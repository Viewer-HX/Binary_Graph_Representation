The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7dc75e8d4375a36a6a19a050f2bee6bd76c7a912/patch_info.txt
{'1': {'before': 'a/libavformat/mpeg.c', 'after': 'b/libavformat/mpeg.c'}}
{'1': [{'before': '-71,10', 'after': '+59,6', 'function': 'static int mpegps_probe'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7dc75e8d4375a36a6a19a050f2bee6bd76c7a912---b/libavformat/mpeg.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7dc75e8d4375a36a6a19a050f2bee6bd76c7a912---a/libavformat/mpeg.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f390307dbd8470dea5f9226eff22e8885763653/patch_info.txt
{'1': {'before': 'a/libavcodec/svq1dec.c', 'after': 'b/libavcodec/svq1dec.c'}}
{'1': [{'before': '-540,7', 'after': '+540,7', 'function': 'static int svq1_decode_delta_block '}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f390307dbd8470dea5f9226eff22e8885763653---b/libavcodec/svq1dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f390307dbd8470dea5f9226eff22e8885763653---a/libavcodec/svq1dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/76e4864583be6fd03c72a54f1cad42b543922c82/patch_info.txt
{'1': {'before': 'a/libavformat/mxf.c', 'after': 'b/libavformat/mxf.c'}}
{'1': [{'before': '-922,7', 'after': '+922,7', 'function': 'static int mxf_read_local_tags'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/76e4864583be6fd03c72a54f1cad42b543922c82---b/libavformat/mxf.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/76e4864583be6fd03c72a54f1cad42b543922c82---a/libavformat/mxf.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/760acb18a347d2265afd34d174647c119035aef4/patch_info.txt
{'1': {'before': 'a/libavcodec/mpegvideo.c', 'after': 'b/libavcodec/mpegvideo.c'}, '2': {'before': 'a/libavcodec/svq1.c', 'after': 'b/libavcodec/svq1.c'}}
{'1': [{'before': '-651,7', 'after': '+651,7', 'function': 'void MPV_frame_start'}], '2': [{'before': '-2484,12', 'after': '+2480,11', 'function': 'static int svq1_decode_frame_header '}, {'before': '-2572,6', 'after': '+2567,8', 'function': 'static int svq1_decode_frame'}, {'before': '-2583,22', 'after': '+2580,30', 'function': 'static int svq1_decode_frame'}, {'before': '-2607,16', 'after': '+2612,17', 'function': 'static int svq1_decode_frame'}, {'before': '-2626,23', 'after': '+2632,17', 'function': 'static int svq1_decode_frame'}, {'before': '-2656,11', 'after': '+2656,9', 'function': 'static int svq1_decode_init'}, {'before': '-2669,7', 'after': '+2667,6', 'function': 'static int svq1_decode_end'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/760acb18a347d2265afd34d174647c119035aef4---b/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/760acb18a347d2265afd34d174647c119035aef4---a/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/760acb18a347d2265afd34d174647c119035aef4---b/libavcodec/svq1.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/760acb18a347d2265afd34d174647c119035aef4---a/libavcodec/svq1.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c/patch_info.txt
{'1': {'before': 'a/libavformat/oggdec.c', 'after': 'b/libavformat/oggdec.c'}, '2': {'before': 'a/libavformat/oggparseflac.c', 'after': 'b/libavformat/oggparseflac.c'}, '3': {'before': 'a/libavformat/oggparseogm.c', 'after': 'b/libavformat/oggparseogm.c'}, '4': {'before': 'a/libavformat/oggparsespeex.c', 'after': 'b/libavformat/oggparsespeex.c'}, '5': {'before': 'a/libavformat/oggparsetheora.c', 'after': 'b/libavformat/oggparsetheora.c'}, '6': {'before': 'a/libavformat/oggparsevorbis.c', 'after': 'b/libavformat/oggparsevorbis.c'}}
{'1': [{'before': '-65,7', 'after': '+65,7', 'function': 'ogg_save '}, {'before': '-79,9', 'after': '+79,9', 'function': 'ogg_save '}, {'before': '-106,12', 'after': '+106,12', 'function': 'ogg_restore '}, {'before': '-126,7', 'after': '+126,7', 'function': 'ogg_reset '}, {'before': '-140,7', 'after': '+140,7', 'function': 'ogg_find_codec '}, {'before': '-179,9', 'after': '+179,9', 'function': 'ogg_new_stream '}, {'before': '-302,9', 'after': '+302,9', 'function': 'ogg_read_page '}, {'before': '-402,7', 'after': '+402,7', 'function': 'ogg_packet '}, {'before': '-419,8', 'after': '+419,8', 'function': 'ogg_get_headers '}, {'before': '-436,7', 'after': '+436,7', 'function': 'ogg_gptopts '}, {'before': '-476,7', 'after': '+476,7', 'function': 'ogg_get_length '}, {'before': '-494,8', 'after': '+494,8', 'function': 'ogg_read_header '}, {'before': '-527,7', 'after': '+527,7', 'function': 'ogg_read_packet '}, {'before': '-575,7', 'after': '+575,7', 'function': 'static int ogg_probe'}], '2': [{'before': '-85,13', 'after': '+85,13', 'function': 'old_flac_header '}], '3': [{'before': '-100,8', 'after': '+100,8', 'function': 'ogm_header'}, {'before': '-134,8', 'after': '+134,8', 'function': 'ogm_dshow_header'}, {'before': '-149,28', 'after': '+149,28', 'function': 'ogm_packet'}], '4': [{'before': '-54,7', 'after': '+54,7', 'function': 'static int speex_header'}], '5': [{'before': '-119,9', 'after': '+119,9', 'function': 'theora_header '}, {'before': '-131,7', 'after': '+131,7', 'function': 'theora_gptopts'}], '6': [{'before': '-122,14', 'after': '+122,14', 'function': 'vorbis_comment'}, {'before': '-154,16', 'after': '+154,16', 'function': 'fixup_vorbis_headers'}, {'before': '-219,7', 'after': '+219,7', 'function': 'vorbis_header '}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggparseflac.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggparseflac.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggparseogm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggparseogm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggparsespeex.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggparsespeex.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggparsetheora.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggparsetheora.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---b/libavformat/oggparsevorbis.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/77be08eeb199c8f3f78b3426e970decadbc1425c---a/libavformat/oggparsevorbis.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c020e1ad37d27c9d5db4d714401f09c80e3cc44/patch_info.txt
{'1': {'before': 'a/libavformat/movenc.c', 'after': 'b/libavformat/movenc.c'}}
{'1': [{'before': '-2757,9', 'after': '+2757,14', 'function': 'static int mov_flush_fragment'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c020e1ad37d27c9d5db4d714401f09c80e3cc44---b/libavformat/movenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c020e1ad37d27c9d5db4d714401f09c80e3cc44---a/libavformat/movenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/patch_info.txt
{'1': {'before': 'a/libswscale/swscale_template.c', 'after': 'b/libswscale/swscale_template.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c---b/libswscale/swscale_template.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c---a/libswscale/swscale_template.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d19628b14311567758626cea1aef901a040486c/clang_before/Os: directory not exists.
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/71bd023da5e83e3f65e068d0b12bf5b45050d2d5/patch_info.txt
{'1': {'before': 'a/libavformat/tiertexseq.c', 'after': 'b/libavformat/tiertexseq.c'}}
{'1': [{'before': '-122,7', 'after': '+122,7', 'function': 'static int seq_parse_frame_data'}, {'before': '-153,13', 'after': '+153,18', 'function': 'static int seq_parse_frame_data'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/71bd023da5e83e3f65e068d0b12bf5b45050d2d5---b/libavformat/tiertexseq.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/71bd023da5e83e3f65e068d0b12bf5b45050d2d5---a/libavformat/tiertexseq.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/patch_info.txt
{'1': {'before': 'a/libavformat/x11grab.c', 'after': 'b/libavformat/x11grab.c'}}
{'1': [{'before': '-101,6', 'after': '+101,11', 'function': 'x11grab_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8---b/libavformat/x11grab.c
The case of compiler gcc with optimization no.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8---a/libavformat/x11grab.c
The case of compiler gcc with optimization no.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: x11grab.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7224e89638ea8d3ec6e4f705f57c168efbe1aca8/clang_before/Os: directory not exists.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f01a4192cdf4565eadee457f76e6b5196e35e0b/patch_info.txt
{'1': {'before': 'a/libavformat/adtsenc.c', 'after': 'b/libavformat/adtsenc.c'}}
{'1': [{'before': '-59,6', 'after': '+59,10', 'function': 'int ff_adts_decode_extradata'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f01a4192cdf4565eadee457f76e6b5196e35e0b---b/libavformat/adtsenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7f01a4192cdf4565eadee457f76e6b5196e35e0b---a/libavformat/adtsenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7acc1a27bc27a74d2e9862dc22f403dfec09d267/patch_info.txt
{'1': {'before': 'a/libavutil/aes.c', 'after': 'b/libavutil/aes.c'}}
{'1': [{'before': '-146,8', 'after': '+146,7', 'function': 'AVAES *av_aes_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7acc1a27bc27a74d2e9862dc22f403dfec09d267---b/libavutil/aes.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7acc1a27bc27a74d2e9862dc22f403dfec09d267---a/libavutil/aes.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/728d2afa17f2c91b7b8499954ea9abafbc085031/patch_info.txt
{'1': {'before': 'a/libavformat/apetag.c', 'after': 'b/libavformat/apetag.c'}}
{'1': [{'before': '-88,15', 'after': '+88,15', 'function': 'static int ape_tag_read_field'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/728d2afa17f2c91b7b8499954ea9abafbc085031---b/libavformat/apetag.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/728d2afa17f2c91b7b8499954ea9abafbc085031---a/libavformat/apetag.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7e201d575dc4385eb67314b0419d4d77185e65f4/patch_info.txt
{'1': {'before': 'a/libavcodec/jpeg2000dec.c', 'after': 'b/libavcodec/jpeg2000dec.c'}}
{'1': [{'before': '-663,6', 'after': '+663,12', 'function': 'static int jpeg2000_decode_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7e201d575dc4385eb67314b0419d4d77185e65f4---b/libavcodec/jpeg2000dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7e201d575dc4385eb67314b0419d4d77185e65f4---a/libavcodec/jpeg2000dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7bad42cf591c61f2e6d0c1a84730dc1c782f1ffd/patch_info.txt
{'1': {'before': 'a/libavcodec/vp3.c', 'after': 'b/libavcodec/vp3.c'}}
{'1': [{'before': '-2066,7', 'after': '+2066,6', 'function': 'static void render_fragments'}, {'before': '-2075,7', 'after': '+2074,6', 'function': 'static void render_fragments'}, {'before': '-2084,7', 'after': '+2082,6', 'function': 'static void render_fragments'}, {'before': '-2172,6', 'after': '+2169,12', 'function': 'av_log'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7bad42cf591c61f2e6d0c1a84730dc1c782f1ffd---b/libavcodec/vp3.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7bad42cf591c61f2e6d0c1a84730dc1c782f1ffd---a/libavcodec/vp3.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/patch_info.txt
{'1': {'before': 'a/ffmpeg.c', 'after': 'b/ffmpeg.c'}, '2': {'before': 'a/ffserver.c', 'after': 'b/ffserver.c'}, '3': {'before': 'a/libavcodec/error_resilience.c', 'after': 'b/libavcodec/error_resilience.c'}, '4': {'before': 'a/libavcodec/h263.c', 'after': 'b/libavcodec/h263.c'}, '5': {'before': 'a/libavcodec/h263dec.c', 'after': 'b/libavcodec/h263dec.c'}, '6': {'before': 'a/libavcodec/motion_est.c', 'after': 'b/libavcodec/motion_est.c'}, '7': {'before': 'a/libavcodec/mpeg12.c', 'after': 'b/libavcodec/mpeg12.c'}, '8': {'before': 'a/libavcodec/mpegvideo.c', 'after': 'b/libavcodec/mpegvideo.c'}, '9': {'before': 'a/libavcodec/rv10.c', 'after': 'b/libavcodec/rv10.c'}, '10': {'before': 'a/libavcodec/utils.c', 'after': 'b/libavcodec/utils.c'}}
{'1': [{'before': '-1751,6', 'after': '+1751,11', 'function': 'static void opt_b_frames'}, {'before': '-2222,9', 'after': '+2227,8', 'function': 'static void opt_output_file'}, {'before': '-2234,7', 'after': '+2238,7', 'function': 'static void opt_output_file'}], '2': [{'before': '-4220,11', 'after': '+4220,11', 'function': 'static int parse_ffconfig'}], '3': [{'before': '-346,7', 'after': '+354,7', 'function': 'static void guess_mv'}, {'before': '-848,7', 'after': '+856,7', 'function': 'void ff_er_frame_end'}, {'before': '-888,7', 'after': '+896,7', 'function': 'void ff_er_frame_end'}], '4': [{'before': '-512,6', 'after': '+512,53', 'function': 'int ff_mpeg4_set_direct_mv'}], '5': [{'before': '-209,6', 'after': '+209,9', 'function': 'static int decode_slice'}], '6': [{'before': '-1083,7', 'after': '+1083,7', 'function': 'void ff_estimate_p_frame_motion'}, {'before': '-1315,8', 'after': '+1315,8', 'function': 'static inline int check_bidir_mv'}, {'before': '-1324,8', 'after': '+1324,8', 'function': 'static inline int check_bidir_mv'}, {'before': '-1333,8', 'after': '+1333,8', 'function': 'static inline int check_bidir_mv'}, {'before': '-1342,8', 'after': '+1342,8', 'function': 'static inline int check_bidir_mv'}, {'before': '-1523,7', 'after': '+1523,7', 'function': 'void ff_estimate_b_frame_motion'}], '7': [{'before': '-1924,6', 'after': '+1924,7', 'function': 'static int mpeg_decode_slice'}, {'before': '-1959,8', 'after': '+1960,12', 'function': 'static int mpeg_decode_slice'}, {'before': '-1983,6', 'after': '+1988,8', 'function': 'static int mpeg_decode_slice'}], '8': [{'before': '-50,6', 'after': '+50,7', 'function': 'static void draw_edges_c'}, {'before': '-2425,50', 'after': '+2426,6', 'function': 'void MPV_decode_mb'}, {'before': '-2478,10', 'after': '+2435,6', 'function': 'void MPV_decode_mb'}, {'before': '-2506,17', 'after': '+2459,6', 'function': 'void MPV_decode_mb'}, {'before': '-2526,11', 'after': '+2468,15', 'function': 'void MPV_decode_mb'}, {'before': '-2791,6', 'after': '+2737,28', 'function': 'void ff_draw_horiz_band'}, {'before': '-2885,9', 'after': '+2853,9', 'function': 'static void encode_mb'}, {'before': '-3161,7', 'after': '+3129,7', 'function': 'static inline void copy_context_before_encode'}, {'before': '-3206,7', 'after': '+3174,8', 'function': 'static inline void encode_mb_hq'}, {'before': '-3216,24', 'after': '+3185,44', 'function': 'static inline void encode_mb_hq'}, {'before': '-3254,6', 'after': '+3243,23', 'function': 'static inline int sse'}, {'before': '-3508,29', 'after': '+3514,21', 'function': 'static void encode_picture'}, {'before': '-3588,6', 'after': '+3586,8', 'function': 'static void encode_picture'}, {'before': '-3670,9', 'after': '+3670,12', 'function': 'static void encode_picture'}, {'before': '-3693,12', 'after': '+3696,24', 'function': 'static void encode_picture'}, {'before': '-3846,6', 'after': '+3861,11', 'function': 'static void encode_picture'}, {'before': '-3853,8', 'after': '+3873,6', 'function': 'static void encode_picture'}, {'before': '-3864,20', 'after': '+3882,14', 'function': 'static void encode_picture'}, {'before': '-4402,7', 'after': '+4414,6', 'function': 'static void dct_unquantize_h263_c'}, {'before': '-723,14', 'after': '+724,7', 'function': 'void ff_er_add_slice'}, {'before': '-739,6', 'after': '+733,9', 'function': 'static inline void ff_update_block_index'}, {'before': '-833,6', 'after': '+830,7', 'function': 'void h263_decode_init_vlc'}], '9': [{'before': '-466,6', 'after': '+466,7', 'function': 'static int rv10_decode_packet'}], '10': [{'before': '-489,7', 'after': '+489,7', 'function': 'void avcodec_string'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/no/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/no/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/no/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/no/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O0/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O0/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O0/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O0/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O1/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O1/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O1/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O1/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O2/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O2/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O2/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O2/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O3/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O3/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O3/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/O3/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/Os/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/Os/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/Os/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_after/Os/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/no/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/no/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/no/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/no/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O0/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O0/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O0/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O0/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O1/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O1/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O1/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O1/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O2/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O2/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O2/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O2/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O3/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O3/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O3/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/O3/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/Os/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/Os/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/Os/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_after/Os/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/no/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/no/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/no/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/no/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O0/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O0/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O0/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O0/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O1/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O1/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O1/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O1/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O2/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O2/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O2/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O2/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O3/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O3/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O3/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/O3/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/Os/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/Os/ffmpeg_gcc.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/Os/ffmpeg_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/gcc_before/Os/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/no/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/no/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/no/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/no/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O0/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O0/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O0/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O0/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O1/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O1/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O1/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O1/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O2/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O2/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O2/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O2/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O3/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O3/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O3/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/O3/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
Patched function: 1---static void opt_b_frames 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/Os/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/Os/ffmpeg.s
Assembly file does not exist.
Patched function: 1---static void opt_output_file 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/Os/ffmpeg.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d/clang_before/Os/ffmpeg.o
Binary file does not exist.
{'opt_b_frames': [], 'opt_output_file': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/ffserver.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/ffserver.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/error_resilience.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/error_resilience.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/h263.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/h263.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/h263dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/h263dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/motion_est.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/motion_est.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/mpeg12.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/mpeg12.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/rv10.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/rv10.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---b/libavcodec/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7d1c3fc1d683d53982a1dec14f0f9749a07ae48d---a/libavcodec/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 16 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/patch_info.txt
{'1': {'before': 'a/libavcodec/ffv1.c', 'after': 'b/libavcodec/ffv1.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9---b/libavcodec/ffv1.c
The case of compiler gcc with optimization no.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/no/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/O0/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/O1/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/O2/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/O3/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_after/Os/ffv1.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/no/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/no/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.101591
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/no/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/no/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.100445
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/no/ffv1.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O0/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O0/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.099994
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O0/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O0/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.099212
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O0/ffv1.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O1/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O1/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.093463
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O1/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O1/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.095057
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O1/ffv1.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O2/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O2/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.097530
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O2/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O2/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.094668
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O2/ffv1.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O3/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O3/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.099792
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O3/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O3/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.096373
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/O3/ffv1.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/Os/ffv1.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/Os/ffv1.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.090406
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/Os/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/Os/ffv1.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.092564
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_after/Os/ffv1.o.
{}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9---a/libavcodec/ffv1.c
The case of compiler gcc with optimization no.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/no/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/O0/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/O1/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/O2/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/O3/ffv1.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/gcc_before/Os/ffv1.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/no/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/no/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.102550
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/no/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/no/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.101898
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/no/ffv1.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O0/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O0/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.101910
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O0/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O0/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.097840
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O0/ffv1.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O1/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O1/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.094564
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O1/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O1/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.093370
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O1/ffv1.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O2/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O2/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.096648
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O2/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O2/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.099906
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O2/ffv1.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O3/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O3/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.099681
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O3/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O3/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.100113
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/O3/ffv1.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: ffv1.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/Os/ffv1.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/Os/ffv1.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.095411
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/Os/ffv1.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/Os/ffv1.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.092944
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c6208d4c0a56922c93ac0eddc1129c2a49d28a9/clang_before/Os/ffv1.o.
{}
The analysis of 17 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/patch_info.txt
{'1': {'before': 'a/libavfilter/avfilter.c', 'after': 'b/libavfilter/avfilter.c'}}
{'1': [{'before': '-246,6', 'after': '+246,7', 'function': 'void ff_dprintf_ref'}, {'before': '-253,6', 'after': '+254,18', 'function': 'void ff_dprintf_link'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a---b/libavfilter/avfilter.c
The case of compiler gcc with optimization no.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/no/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/no/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/no/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O0/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O0/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O0/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O1/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O1/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O1/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O2/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O2/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O2/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O3/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O3/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/O3/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/Os/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/Os/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_after/Os/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization no.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/no/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/no/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/no/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O0/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O0/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O0/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O1/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O1/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O1/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O2/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O2/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O2/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O3/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O3/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/O3/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/Os/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/Os/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_after/Os/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a---a/libavfilter/avfilter.c
The case of compiler gcc with optimization no.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/no/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/no/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/no/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O0/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O0/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O0/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O1/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O1/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O1/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O2/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O2/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O2/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O3/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O3/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/O3/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler gcc with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/Os/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/Os/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/gcc_before/Os/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization no.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/no/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/no/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/no/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O0/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O0/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O0/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O1/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O1/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O1/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O2/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O2/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O2/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O3/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O3/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/O3/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The case of compiler clang with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---void ff_dprintf_ref 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/Os/avfilter.s
Assembly file does not exist.
Patched function: 1---void ff_dprintf_link 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/Os/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7986e34db075df9b02d277d15b596e0341cbf19a/clang_before/Os/avfilter.o
Binary file does not exist.
{'ff_dprintf_ref': [], 'ff_dprintf_link': []}
The analysis of 18 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/patch_info.txt
{'1': {'before': 'a/libavcodec/dct.c', 'after': 'b/libavcodec/dct.c'}}
{'1': [{'before': '-180,9', 'after': '+180,14', 'function': 'av_cold int ff_dct_init'}, {'before': '-203,9', 'after': '+208,7', 'function': 'av_cold int ff_dct_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7---b/libavcodec/dct.c
The case of compiler gcc with optimization no.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/no/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/no/dct_gcc.s---ff_dct_init---after
function id: 22
function flag: True
There are 145 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/no/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/no/dct_gcc.s---ff_dct_init---after
function id: 22
function flag: True
There are 145 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/no/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O0/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O0/dct_gcc.s---ff_dct_init---after
function id: 22
function flag: True
There are 145 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O0/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O0/dct_gcc.s---ff_dct_init---after
function id: 22
function flag: True
There are 145 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O0/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 13, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 14, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 15, 'instruction': 'call\tmemset@PLT'}, {'instIndex': 16, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 18, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 19, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 20, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.L24'}, {'instIndex': 24, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L24'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 29, 'instruction': 'jmp\t.L25'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 33, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 34, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 35, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 36, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 37, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 130, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 131, 'instruction': 'jmp\t.L25'}, {'instIndex': 132, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 133, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 135, 'instruction': 'nop'}, {'instIndex': 136, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 137, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 139, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 141, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O1/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O1/dct_gcc.s---ff_dct_init---after
function id: 513
function flag: True
There are 117 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movl\t%esi, (%rbx)'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, 4(%rbx)'}, {'instIndex': 16, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 17, 'instruction': 'jne\t.L44'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'jne\t.L44'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 28, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 29, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 30, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 31, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 35, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 36, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 37, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 24, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 25, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 94, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 96, 'instruction': 'jmp\t.L45'}, {'instIndex': 100, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 101, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 102, 'instruction': 'jmp\t.L45'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O1/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O1/dct_gcc.s---ff_dct_init---after
function id: 513
function flag: True
There are 117 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movl\t%esi, (%rbx)'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, 4(%rbx)'}, {'instIndex': 16, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 17, 'instruction': 'jne\t.L44'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'jne\t.L44'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 28, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 29, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 30, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 31, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 35, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 36, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 37, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 24, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 25, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 94, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 96, 'instruction': 'jmp\t.L45'}, {'instIndex': 100, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 101, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 102, 'instruction': 'jmp\t.L45'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O1/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movl\t%esi, (%rbx)'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, 4(%rbx)'}, {'instIndex': 16, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 17, 'instruction': 'jne\t.L44'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'jne\t.L44'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 28, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 29, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 30, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 31, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 35, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 36, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 37, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 24, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 25, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 94, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 96, 'instruction': 'jmp\t.L45'}, {'instIndex': 100, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 101, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 102, 'instruction': 'jmp\t.L45'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O2/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O2/dct_gcc.s---ff_dct_init---after
function id: 429
function flag: True
There are 120 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L45'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L45'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L46'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L46'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O2/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O2/dct_gcc.s---ff_dct_init---after
function id: 429
function flag: True
There are 120 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L45'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L45'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L46'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L46'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O2/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L45'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L45'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L46'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L46'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O3/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O3/dct_gcc.s---ff_dct_init---after
function id: 445
function flag: True
There are 120 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L48'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L48'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L49'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L49'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O3/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O3/dct_gcc.s---ff_dct_init---after
function id: 445
function flag: True
There are 120 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L48'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L48'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L49'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L49'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/O3/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L48'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 21, 'instruction': 'jne\t.L48'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 24, 'instruction': 'jmp\t.L49'}, {'instIndex': 25, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 27, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 28, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 29, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 30, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 31, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 33, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 34, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 86, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'jmp\t.L49'}, {'instIndex': 92, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 93, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 94, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 95, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 97, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/Os/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/Os/dct_gcc.s---ff_dct_init---after
function id: 435
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L37'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 22, 'instruction': 'je\t.L56'}, {'instIndex': 23, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 25, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 26, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 27, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 28, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 29, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 30, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 32, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 33, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 77, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 82, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/Os/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/Os/dct_gcc.s---ff_dct_init---after
function id: 435
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L37'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 22, 'instruction': 'je\t.L56'}, {'instIndex': 23, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 25, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 26, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 27, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 28, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 29, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 30, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 32, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 33, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 77, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 82, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_after/Os/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movl\t%esi, 0(%rbp)'}, {'instIndex': 17, 'instruction': 'movl\t%edx, 4(%rbp)'}, {'instIndex': 18, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'jne\t.L37'}, {'instIndex': 20, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 21, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 22, 'instruction': 'je\t.L56'}, {'instIndex': 23, 'instruction': 'leal\t2(%r12), %r13d'}, {'instIndex': 25, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 26, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 27, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 28, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 29, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 30, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 32, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 33, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 77, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 82, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 95 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 129 instructions in binary file.
[4194304, 4194353, 4194383, 4194390, 4194414, 4194426]
[4194778, 4194799, 4194820]
The execution time of patched subCFG information extraction via angr: 0:00:00.913443
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "add" for 0x400072>, <DisassemblerInsn "call" for 0x400075>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40004f>, <DisassemblerInsn "jne" for 0x400054>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "xor" for 0x400025>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "call" for 0x40002c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400035>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "cmp" for 0x400048>, <DisassemblerInsn "jne" for 0x40004d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "cmp" for 0x4000cf>, <DisassemblerInsn "sete" for 0x4000d4>, <DisassemblerInsn "and" for 0x4000d7>, <DisassemblerInsn "movzx" for 0x4000d9>, <DisassemblerInsn "call" for 0x4000dc>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "add" for 0x40007e>, <DisassemblerInsn "movsxd" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "cdq" for 0x4000a4>, <DisassemblerInsn "idiv" for 0x4000a5>, <DisassemblerInsn "movsxd" for 0x4000a7>, <DisassemblerInsn "shl" for 0x4000aa>, <DisassemblerInsn "call" for 0x4000ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500008>']}, {'block_Idx': 2, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x40006e>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x40006e>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfff8d]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (1, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "lea" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "lea" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "lea" for 0x4001a0>, <DisassemblerInsn "movsxd" for 0x4001a7>, <DisassemblerInsn "add" for 0x4001ab>, <DisassemblerInsn "jmp" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7f5]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400204>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x56a]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2529]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}], 'cfg_edge_info': [(17, 23), (6, 8), (4, 6), (23, 6), (18, 6), (21, 18), (17, 21)]}]}
{'ff_dct_init': [4194778, 4194799, 4194820]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/no/dct.o---after
The extraction of function: ff_dct_init
[4194778, 4194799, 4194820]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 31 nodes and 45 edges in CFGEmulated.
It has 29 nodes and 36 edges in CDG.
It has 522 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194778, 4194799, 4194820]
{4194304, 4194818, 4194820, 4194564, 4194700, 4194572, 4194715, 4194849, 4194857, 4194602, 4194736, 4194353, 4194483, 4194757, 4194383, 4194390, 4194646, 4194778, 4194529, 4194534, 4194414, 4194799, 4194551, 4194426}
[26, 4, 8, 5, 29, 7, 19, 23, 11, 20, 0, 18, 22, 30, 27, 3, 24, 28, 16, 2, 14, 25, 12, 15]
The execution time of patched slicing information extraction via angr: 0:00:02.609403
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "lea" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "jmp" for 0x4001c3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "add" for 0x400072>, <DisassemblerInsn "call" for 0x400075>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "add" for 0x40007e>, <DisassemblerInsn "movsxd" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "cdq" for 0x4000a4>, <DisassemblerInsn "idiv" for 0x4000a5>, <DisassemblerInsn "movsxd" for 0x4000a7>, <DisassemblerInsn "shl" for 0x4000aa>, <DisassemblerInsn "call" for 0x4000ae>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "lea" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "sub" for 0x400195>, <DisassemblerInsn "ja" for 0x400199>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "jmp" for 0x4000ff>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "xor" for 0x400025>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "call" for 0x40002c>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "shl" for 0x40012e>, <DisassemblerInsn "cvtsi2sd" for 0x400130>, <DisassemblerInsn "movsd" for 0x400134>, <DisassemblerInsn "divsd" for 0x40013c>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "shl" for 0x400144>, <DisassemblerInsn "add" for 0x400146>, <DisassemblerInsn "cvtsi2sd" for 0x400149>, <DisassemblerInsn "mulsd" for 0x40014d>, <DisassemblerInsn "call" for 0x400151>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "lea" for 0x4001a0>, <DisassemblerInsn "movsxd" for 0x4001a7>, <DisassemblerInsn "add" for 0x4001ab>, <DisassemblerInsn "jmp" for 0x4001ae>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cdq" for 0x40011d>, <DisassemblerInsn "idiv" for 0x40011e>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jge" for 0x400128>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "lea" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40004f>, <DisassemblerInsn "jne" for 0x400054>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "lea" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "jmp" for 0x4001d8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cdq" for 0x40011d>, <DisassemblerInsn "idiv" for 0x40011e>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jge" for 0x400128>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400035>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "cmp" for 0x400048>, <DisassemblerInsn "jne" for 0x40004d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000e1>, <DisassemblerInsn "jge" for 0x4000e4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400156>, <DisassemblerInsn "movsd" for 0x400159>, <DisassemblerInsn "divsd" for 0x400161>, <DisassemblerInsn "cvtsd2ss" for 0x400165>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x40016e>, <DisassemblerInsn "movsxd" for 0x400175>, <DisassemblerInsn "movss" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "add" for 0x400183>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "jmp" for 0x40018a>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "cmp" for 0x4000cf>, <DisassemblerInsn "sete" for 0x4000d4>, <DisassemblerInsn "and" for 0x4000d7>, <DisassemblerInsn "movzx" for 0x4000d9>, <DisassemblerInsn "call" for 0x4000dc>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "call" for 0x4000f2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xb4]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500008>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfff8d]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7f5]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x400202>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400204>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x400229>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<movsd~~xmm0, qword ptr [rip + 0x2584]>', '<divsd~~xmm0, xmm1>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<shl~~eax, 1>', '<add~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<call~~0x500038>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2529]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x40018c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x56a]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x40006e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2df]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x40018c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x40006e>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400104>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x2557]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0xa0]>', '<movsxd~~rcx, dword ptr [rsp + 0x18]>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x40010c>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0xa0]>', '<call~~0x500030>']}], 'cfg_edge_info': [(23, 7), (3, 4), (5, 7), (14, 16), (0, 2), (22, 26), (22, 29), (30, 18), (8, 12), (29, 7), (16, 19), (26, 23), (15, 20), (18, 25), (4, 8), (14, 15), (22, 28), (28, 23), (2, 4), (19, 23), (16, 18), (25, 30), (12, 14), (3, 5), (20, 24), (22, 27), (27, 23), (2, 3), (30, 19), (19, 22), (7, 11)], 'cdg_edge_info': [(3, 4), (14, 7), (3, 7), (14, 16), (22, 23), (14, 19), (22, 26), (22, 29), (30, 18), (30, 30), (16, 25), (3, 12), (14, 15), (22, 28), (14, 24), (19, 23), (16, 18), (16, 30), (3, 5), (14, 11), (3, 11), (3, 8), (3, 14), (22, 27), (14, 20), (2, 3), (30, 25), (19, 22)], 'ddg_edge_info': [(0, 30), (15, 24), (12, 7), (18, 26), (12, 16), (18, 29), (12, 19), (12, 22), (0, 2), (12, 28), (12, 25), (0, 5), (8, 12), (0, 8), (0, 26), (18, 7), (0, 29), (15, 20), (18, 19), (16, 25), (18, 22), (18, 28), (18, 25), (4, 8), (12, 15), (12, 18), (12, 27), (0, 7), (0, 4), (0, 19), (0, 28), (0, 25), (25, 18), (16, 18), (16, 30), (25, 30), (12, 14), (18, 30), (18, 27), (20, 24), (12, 26), (0, 3), (12, 29), (0, 12), (0, 15), (19, 22), (0, 18), (11, 24), (7, 11), (0, 27)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 95 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 129 instructions in binary file.
[4194304, 4194353, 4194383, 4194390, 4194414, 4194426]
[4194778, 4194799, 4194820]
The execution time of patched subCFG information extraction via angr: 0:00:00.927243
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "add" for 0x400072>, <DisassemblerInsn "call" for 0x400075>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40004f>, <DisassemblerInsn "jne" for 0x400054>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "xor" for 0x400025>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "call" for 0x40002c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400035>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "cmp" for 0x400048>, <DisassemblerInsn "jne" for 0x40004d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "cmp" for 0x4000cf>, <DisassemblerInsn "sete" for 0x4000d4>, <DisassemblerInsn "and" for 0x4000d7>, <DisassemblerInsn "movzx" for 0x4000d9>, <DisassemblerInsn "call" for 0x4000dc>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "add" for 0x40007e>, <DisassemblerInsn "movsxd" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "cdq" for 0x4000a4>, <DisassemblerInsn "idiv" for 0x4000a5>, <DisassemblerInsn "movsxd" for 0x4000a7>, <DisassemblerInsn "shl" for 0x4000aa>, <DisassemblerInsn "call" for 0x4000ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500008>']}, {'block_Idx': 2, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x40006e>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x40006e>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfff8d]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (1, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "lea" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "lea" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "lea" for 0x4001a0>, <DisassemblerInsn "movsxd" for 0x4001a7>, <DisassemblerInsn "add" for 0x4001ab>, <DisassemblerInsn "jmp" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7f5]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400204>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x56a]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2529]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}], 'cfg_edge_info': [(17, 23), (6, 8), (4, 6), (23, 6), (18, 6), (21, 18), (17, 21)]}]}
{'ff_dct_init': [4194778, 4194799, 4194820]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O0/dct.o---after
The extraction of function: ff_dct_init
[4194778, 4194799, 4194820]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 31 nodes and 45 edges in CFGEmulated.
It has 29 nodes and 36 edges in CDG.
It has 522 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194778, 4194799, 4194820]
{4194304, 4194818, 4194820, 4194564, 4194700, 4194572, 4194715, 4194849, 4194857, 4194602, 4194736, 4194353, 4194483, 4194757, 4194383, 4194390, 4194646, 4194778, 4194529, 4194534, 4194414, 4194799, 4194551, 4194426}
[26, 4, 8, 5, 29, 7, 19, 23, 11, 20, 0, 18, 22, 30, 27, 3, 24, 28, 16, 2, 14, 25, 12, 15]
The execution time of patched slicing information extraction via angr: 0:00:02.537997
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "lea" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "jmp" for 0x4001c3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "add" for 0x400072>, <DisassemblerInsn "call" for 0x400075>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "add" for 0x40007e>, <DisassemblerInsn "movsxd" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "cdq" for 0x4000a4>, <DisassemblerInsn "idiv" for 0x4000a5>, <DisassemblerInsn "movsxd" for 0x4000a7>, <DisassemblerInsn "shl" for 0x4000aa>, <DisassemblerInsn "call" for 0x4000ae>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "lea" for 0x40005b>, <DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "jmp" for 0x400069>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "lea" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "lea" for 0x400209>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "call" for 0x40021c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "sub" for 0x400195>, <DisassemblerInsn "ja" for 0x400199>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "jmp" for 0x4000ff>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "xor" for 0x400025>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "call" for 0x40002c>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "shl" for 0x40012e>, <DisassemblerInsn "cvtsi2sd" for 0x400130>, <DisassemblerInsn "movsd" for 0x400134>, <DisassemblerInsn "divsd" for 0x40013c>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "shl" for 0x400144>, <DisassemblerInsn "add" for 0x400146>, <DisassemblerInsn "cvtsi2sd" for 0x400149>, <DisassemblerInsn "mulsd" for 0x40014d>, <DisassemblerInsn "call" for 0x400151>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "lea" for 0x4001a0>, <DisassemblerInsn "movsxd" for 0x4001a7>, <DisassemblerInsn "add" for 0x4001ab>, <DisassemblerInsn "jmp" for 0x4001ae>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cdq" for 0x40011d>, <DisassemblerInsn "idiv" for 0x40011e>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jge" for 0x400128>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "lea" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40004f>, <DisassemblerInsn "jne" for 0x400054>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "add" for 0x40022d>, <DisassemblerInsn "ret" for 0x400231>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "lea" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "jmp" for 0x4001d8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cdq" for 0x40011d>, <DisassemblerInsn "idiv" for 0x40011e>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jge" for 0x400128>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400035>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "cmp" for 0x400048>, <DisassemblerInsn "jne" for 0x40004d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000e1>, <DisassemblerInsn "jge" for 0x4000e4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400156>, <DisassemblerInsn "movsd" for 0x400159>, <DisassemblerInsn "divsd" for 0x400161>, <DisassemblerInsn "cvtsd2ss" for 0x400165>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x40016e>, <DisassemblerInsn "movsxd" for 0x400175>, <DisassemblerInsn "movss" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "add" for 0x400183>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "jmp" for 0x40018a>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "cmp" for 0x4000cf>, <DisassemblerInsn "sete" for 0x4000d4>, <DisassemblerInsn "and" for 0x4000d7>, <DisassemblerInsn "movzx" for 0x4000d9>, <DisassemblerInsn "call" for 0x4000dc>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "call" for 0x4000f2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xb4]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500008>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfff8d]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x1de]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7f5]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400204>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa10]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500040>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x400202>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400204>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x400229>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<movsd~~xmm0, qword ptr [rip + 0x2584]>', '<divsd~~xmm0, xmm1>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<shl~~eax, 1>', '<add~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<call~~0x500038>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2529]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x40018c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x56a]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x40006e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2df]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x400202>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x40018c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x40006e>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400104>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x2557]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0xa0]>', '<movsxd~~rcx, dword ptr [rsp + 0x18]>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x40010c>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0xa0]>', '<call~~0x500030>']}], 'cfg_edge_info': [(23, 7), (3, 4), (5, 7), (14, 16), (0, 2), (22, 26), (22, 29), (30, 18), (8, 12), (29, 7), (16, 19), (26, 23), (15, 20), (18, 25), (4, 8), (14, 15), (22, 28), (28, 23), (2, 4), (19, 23), (16, 18), (25, 30), (12, 14), (3, 5), (20, 24), (22, 27), (27, 23), (2, 3), (30, 19), (19, 22), (7, 11)], 'cdg_edge_info': [(3, 4), (14, 7), (3, 7), (14, 16), (22, 23), (14, 19), (22, 26), (22, 29), (30, 18), (30, 30), (16, 25), (3, 12), (14, 15), (22, 28), (14, 24), (19, 23), (16, 18), (16, 30), (3, 5), (14, 11), (3, 11), (3, 8), (3, 14), (22, 27), (14, 20), (2, 3), (30, 25), (19, 22)], 'ddg_edge_info': [(0, 30), (15, 24), (12, 7), (18, 26), (12, 16), (18, 29), (12, 19), (12, 22), (0, 2), (12, 28), (12, 25), (0, 5), (8, 12), (0, 8), (0, 26), (18, 7), (0, 29), (15, 20), (18, 19), (16, 25), (18, 22), (18, 28), (18, 25), (4, 8), (12, 15), (12, 18), (12, 27), (0, 7), (0, 4), (0, 19), (0, 28), (0, 25), (25, 18), (16, 18), (16, 30), (25, 30), (12, 14), (18, 30), (18, 27), (20, 24), (12, 26), (0, 3), (12, 29), (0, 12), (0, 15), (19, 22), (0, 18), (11, 24), (7, 11), (0, 27)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 12, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 15, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 18, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 20, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB0_3'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 24, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 25, 'instruction': 'jmp\t.LBB0_15'}, {'instIndex': 26, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 29, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 31, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 32, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 34, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 112, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 114, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 116, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 118, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 123, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 124, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 9, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 10, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 14, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'sete\t%cl'}, {'instIndex': 20, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 21, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 22, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0x80(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 26, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x50(%rsp)                  # 4-byte Spill'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 32, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 33, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 123, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 129 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 9, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 10, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 14, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'sete\t%cl'}, {'instIndex': 20, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 21, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 22, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0x80(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 26, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x50(%rsp)                  # 4-byte Spill'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 32, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 33, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 123, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 80 nodes and 116 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 129 instructions in binary file.
[4194304, 4194349, 4194405, 4194421]
[4194768, 4194794, 4194814]
The execution time of patched subCFG information extraction via angr: 0:00:00.572663
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "movsxd" for 0x400082>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "cdq" for 0x40009c>, <DisassemblerInsn "idiv" for 0x40009d>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "movsxd" for 0x4000a3>, <DisassemblerInsn "shl" for 0x4000a6>, <DisassemblerInsn "call" for 0x4000aa>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "shl" for 0x40001b>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "xor" for 0x400021>, <DisassemblerInsn "mov" for 0x400023>, <DisassemblerInsn "call" for 0x400028>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "add" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d3>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "cmp" for 0x4000de>, <DisassemblerInsn "sete" for 0x4000e1>, <DisassemblerInsn "and" for 0x4000e4>, <DisassemblerInsn "movzx" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000e9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "add" for 0x400069>, <DisassemblerInsn "mov" for 0x40006c>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002d>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "cmp" for 0x40003f>, <DisassemblerInsn "sete" for 0x400042>, <DisassemblerInsn "cmp" for 0x400045>, <DisassemblerInsn "sete" for 0x400048>, <DisassemblerInsn "and" for 0x40004b>, <DisassemblerInsn "lea" for 0x40004d>, <DisassemblerInsn "test" for 0x400054>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "jne" for 0x40005f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff8c]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x7c]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x50], edi>', '<call~~0x500008>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x1dc]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x4001ea>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (1, 3)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "movsxd" for 0x4001d4>, <DisassemblerInsn "lea" for 0x4001d7>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400216>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "add" for 0x400220>, <DisassemblerInsn "ret" for 0x400227>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jae" for 0x4001ce>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002d>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "cmp" for 0x40003f>, <DisassemblerInsn "sete" for 0x400042>, <DisassemblerInsn "cmp" for 0x400045>, <DisassemblerInsn "sete" for 0x400048>, <DisassemblerInsn "and" for 0x40004b>, <DisassemblerInsn "lea" for 0x40004d>, <DisassemblerInsn "test" for 0x400054>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "jne" for 0x40005f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x194a]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x80], rax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<cmp~~eax, 4>', '<jae~~0x4001fe>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x1dc]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x4001ea>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}], 'cfg_edge_info': [(15, 5), (11, 15), (11, 14), (1, 3), (14, 5), (3, 5)]}]}
{'ff_dct_init': [4194768, 4194794, 4194814]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O1/dct.o---after
The extraction of function: ff_dct_init
[4194768, 4194794, 4194814]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 27 nodes and 39 edges in CFGEmulated.
It has 25 nodes and 28 edges in CDG.
It has 477 nodes and 548 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194768, 4194794, 4194814]
{4194304, 4194560, 4194405, 4194759, 4194695, 4194794, 4194634, 4194349, 4194542, 4194479, 4194768, 4194547, 4194421, 4194838, 4194648, 4194844, 4194621, 4194814}
[17, 14, 16, 12, 2, 22, 0, 18, 3, 20, 26, 10, 8, 21, 13, 7, 4, 19]
The execution time of patched slicing information extraction via angr: 0:00:01.548327
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "shl" for 0x40010d>, <DisassemblerInsn "cvtsi2sd" for 0x40010f>, <DisassemblerInsn "movsd" for 0x400113>, <DisassemblerInsn "divsd" for 0x40011b>, <DisassemblerInsn "movsd" for 0x40011f>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "xor" for 0x400134>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "jmp" for 0x40013b>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "cmp" for 0x4000f7>, <DisassemblerInsn "jle" for 0x4000fa>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jae" for 0x4001ce>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000ee>, <DisassemblerInsn "jl" for 0x4000f1>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002d>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003a>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "cmp" for 0x40003f>, <DisassemblerInsn "sete" for 0x400042>, <DisassemblerInsn "cmp" for 0x400045>, <DisassemblerInsn "sete" for 0x400048>, <DisassemblerInsn "and" for 0x40004b>, <DisassemblerInsn "lea" for 0x40004d>, <DisassemblerInsn "test" for 0x400054>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "jne" for 0x40005f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "add" for 0x400220>, <DisassemblerInsn "ret" for 0x400227>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "shl" for 0x40001b>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "xor" for 0x400021>, <DisassemblerInsn "mov" for 0x400023>, <DisassemblerInsn "call" for 0x400028>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "jmp" for 0x400153>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "add" for 0x400069>, <DisassemblerInsn "mov" for 0x40006c>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "movsd" for 0x400199>, <DisassemblerInsn "divsd" for 0x4001a1>, <DisassemblerInsn "movsd" for 0x4001a5>, <DisassemblerInsn "cvtsd2ss" for 0x4001ab>, <DisassemblerInsn "movss" for 0x4001af>, <DisassemblerInsn "add" for 0x4001b4>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "cmp" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "jne" for 0x4001c5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "add" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d3>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "cmp" for 0x4000de>, <DisassemblerInsn "sete" for 0x4000e1>, <DisassemblerInsn "and" for 0x4000e4>, <DisassemblerInsn "movzx" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000e9>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400216>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "add" for 0x400220>, <DisassemblerInsn "ret" for 0x400227>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "movsd" for 0x40015d>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "shl" for 0x400168>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "or" for 0x40016d>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "cvtsi2sd" for 0x400174>, <DisassemblerInsn "mulsd" for 0x400178>, <DisassemblerInsn "movsd" for 0x40017c>, <DisassemblerInsn "call" for 0x400182>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013d>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "call" for 0x400145>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "movsxd" for 0x400082>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "cdq" for 0x40009c>, <DisassemblerInsn "idiv" for 0x40009d>, <DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "movsxd" for 0x4000a3>, <DisassemblerInsn "shl" for 0x4000a6>, <DisassemblerInsn "call" for 0x4000aa>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "movsxd" for 0x4001d4>, <DisassemblerInsn "lea" for 0x4001d7>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "lea" for 0x400203>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "call" for 0x400211>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1925]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x30], xmm0>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x40], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jmp~~0x400158>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<cmp~~eax, 1>', '<jle~~0x4001c7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<cmp~~eax, 4>', '<jae~~0x4001fe>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40013d>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x1dc]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x4001ea>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<xor~~esi, esi>', '<mov~~edx, 0xb8>', '<call~~0x500000>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x40021c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x7c]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x50], edi>', '<call~~0x500008>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x18a7]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x18], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400158>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 8, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<movsd~~xmm0, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 8], xmm0>', '<call~~0x500038>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff8c]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x194a]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x80], rax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<lea~~rax, [rip + 0xa76]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}], 'cfg_edge_info': [(26, 21), (16, 20), (20, 8), (3, 7), (12, 13), (14, 16), (0, 2), (17, 21), (10, 12), (16, 19), (7, 10), (18, 22), (4, 8), (19, 8), (2, 4), (26, 16), (12, 14), (21, 26), (14, 17), (2, 3), (13, 18)], 'cdg_edge_info': [(26, 21), (16, 20), (12, 16), (12, 13), (12, 22), (2, 8), (16, 19), (26, 26), (12, 18), (14, 21), (2, 4), (2, 7), (2, 10), (12, 8), (12, 14), (14, 17), (14, 26), (2, 3), (2, 12)], 'ddg_edge_info': [(26, 21), (7, 17), (21, 16), (20, 8), (21, 19), (3, 7), (0, 2), (17, 21), (0, 14), (10, 12), (0, 17), (10, 21), (0, 20), (7, 10), (18, 22), (0, 7), (0, 10), (17, 26), (10, 14), (0, 16), (19, 20), (10, 17), (0, 19), (2, 10), (2, 19), (10, 20), (13, 22), (21, 20), (21, 26), (0, 3), (10, 13), (10, 16), (8, 22), (10, 19), (13, 18)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 9, 'instruction': 'movl\t$0xb8, %edx'}, {'instIndex': 10, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 14, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 19, 'instruction': 'sete\t%cl'}, {'instIndex': 20, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 21, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 22, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 23, 'instruction': 'movq\t%rax, 0x80(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 26, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x50(%rsp)                  # 4-byte Spill'}, {'instIndex': 28, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 32, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 33, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 121, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 123, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 213 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 213 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 91 nodes and 135 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 213 instructions in binary file.
[4194304, 4194365, 4194430, 4194452]
[4195361, 4195390, 4195413]
The execution time of patched subCFG information extraction via angr: 0:00:00.594052
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1b8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~dword ptr [rsp + 0x1a8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x1ac]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x180], edi>', '<call~~0x500008>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (1, 3)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400470>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "movsxd" for 0x400428>, <DisassemblerInsn "lea" for 0x40042b>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "cmp" for 0x40041c>, <DisassemblerInsn "jae" for 0x40041f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1956]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<cmp~~eax, 4>', '<jae~~0x400455>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}], 'cfg_edge_info': [(15, 5), (11, 15), (11, 14), (1, 3), (14, 5), (3, 5)]}]}
{'ff_dct_init': [4195361, 4195390, 4195413]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O2/dct.o---after
The extraction of function: ff_dct_init
[4195361, 4195390, 4195413]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 64 nodes and 83 edges in CFGEmulated.
It has 62 nodes and 100 edges in CDG.
It has 899 nodes and 1138 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195361, 4195390, 4195413]
{4194304, 4194821, 4194950, 4194829, 4195214, 4194962, 4194452, 4195349, 4194967, 4194714, 4195228, 4194846, 4195361, 4194978, 4194600, 4194986, 4194862, 4194609, 4195125, 4194998, 4195003, 4194365, 4195390, 4194625, 4194754, 4195011, 4194887, 4195144, 4194762, 4195019, 4195150, 4195279, 4194896, 4195413, 4194901, 4194522, 4194909, 4194789, 4194917, 4194797, 4195054, 4195183, 4195440, 4194926, 4195446, 4194430, 4194939, 4194813, 4195198}
[23, 13, 33, 39, 17, 32, 29, 40, 59, 53, 22, 8, 7, 48, 12, 36, 37, 62, 14, 52, 18, 0, 54, 16, 30, 57, 4, 60, 19, 55, 26, 49, 31, 42, 38, 63, 58, 3, 20, 44, 27, 34, 21, 61, 2, 47, 50, 10, 43, 45, 35]
The execution time of patched slicing information extraction via angr: 0:00:02.847930
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "call" for 0x400389>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "shl" for 0x400157>, <DisassemblerInsn "cvtsi2sd" for 0x400159>, <DisassemblerInsn "movsd" for 0x40015d>, <DisassemblerInsn "divsd" for 0x400165>, <DisassemblerInsn "movsd" for 0x400169>, <DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "xor" for 0x400187>, <DisassemblerInsn "cmp" for 0x400189>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "jb" for 0x400194>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002a2>, <DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x40019a>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "and" for 0x4001ab>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "unpcklpd" for 0x4001b6>, <DisassemblerInsn "movaps" for 0x4001ba>, <DisassemblerInsn "movaps" for 0x4001c2>, <DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400470>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40027b>, <DisassemblerInsn "movaps" for 0x40027e>, <DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400128>, <DisassemblerInsn "jl" for 0x40012b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "cmp" for 0x400138>, <DisassemblerInsn "jle" for 0x40013b>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "movaps" for 0x40029a>, <DisassemblerInsn "movaps" for 0x4002a2>, <DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "jmp" for 0x400397>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "cmp" for 0x40041c>, <DisassemblerInsn "jae" for 0x40041f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "movaps" for 0x4003e4>, <DisassemblerInsn "movsd" for 0x4003e7>, <DisassemblerInsn "divsd" for 0x4003ef>, <DisassemblerInsn "movsd" for 0x4003f3>, <DisassemblerInsn "cvtsd2ss" for 0x4003f9>, <DisassemblerInsn "movss" for 0x4003fd>, <DisassemblerInsn "add" for 0x400402>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "cmp" for 0x40040b>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "jne" for 0x400413>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002bb>, <DisassemblerInsn "movaps" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "movsxd" for 0x400428>, <DisassemblerInsn "lea" for 0x40042b>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "movsd" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "shl" for 0x4003af>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "or" for 0x4003b5>, <DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "cvtsi2sd" for 0x4003bc>, <DisassemblerInsn "mulsd" for 0x4003c0>, <DisassemblerInsn "movsd" for 0x4003c4>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400255>, <DisassemblerInsn "movaps" for 0x400258>, <DisassemblerInsn "movaps" for 0x40025d>, <DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "je" for 0x400369>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001c2>, <DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "jmp" for 0x40037c>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "movaps" for 0x40027b>, <DisassemblerInsn "movaps" for 0x40027e>, <DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025d>, <DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500038>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x130]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 39, 'blockInsts': ['<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x184]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1afb]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x160], xmm0>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~eax, ecx>', '<mov~~qword ptr [rsp + 0x170], rax>', '<xor~~eax, eax>', '<cmp~~ecx, 4>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jb~~0x40036f>']}, {'block_Idx': 32, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x130]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 29, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 40, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 53, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xb0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 22, 'blockInsts': ['<movsd~~xmm0, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<and~~eax, 0xfffffffc>', '<mov~~qword ptr [rsp + 0x118], rax>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x120], xmm0>', '<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 8, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 48, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40037e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 37, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 62, 'blockInsts': ['<jne~~0x4001e5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<cmp~~eax, 1>', '<jle~~0x400415>']}, {'block_Idx': 52, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x400476>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1b8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~dword ptr [rsp + 0x1a8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}, {'block_Idx': 54, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<cmp~~eax, 4>', '<jae~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x1879]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x20], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jne~~0x40039c>']}, {'block_Idx': 57, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rsp + 0xb0]>', '<movaps~~xmm3, xmmword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 60, 'blockInsts': ['<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1956]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movsd~~xmm0, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 0xc], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x10], xmm0>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4001e5>']}, {'block_Idx': 42, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<movaps~~xmmword ptr [rsp + 0x80], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<je~~0x400415>']}, {'block_Idx': 58, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x1ac]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x180], edi>', '<call~~0x500008>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 44, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 27, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 34, 'blockInsts': ['<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jmp~~0x40039c>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}, {'block_Idx': 47, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x80]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 50, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 43, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x80], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 45, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 35, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}], 'cfg_edge_info': [(63, 16), (55, 57), (16, 20), (18, 23), (50, 52), (26, 30), (58, 59), (35, 36), (3, 7), (20, 8), (62, 32), (12, 13), (44, 45), (14, 16), (31, 32), (0, 2), (49, 50), (17, 21), (10, 12), (36, 37), (54, 55), (7, 10), (16, 19), (32, 33), (63, 21), (59, 60), (60, 61), (4, 8), (29, 31), (19, 8), (2, 4), (37, 38), (30, 26), (53, 54), (47, 48), (42, 43), (33, 34), (43, 44), (12, 14), (62, 63), (52, 53), (21, 26), (61, 62), (22, 27), (38, 39), (14, 17), (40, 42), (48, 49), (57, 58), (39, 40), (34, 35), (30, 16), (17, 22), (2, 3), (27, 29), (13, 18), (45, 47)], 'cdg_edge_info': [(16, 20), (17, 58), (62, 35), (62, 44), (17, 21), (17, 30), (17, 60), (62, 37), (12, 18), (2, 4), (17, 44), (17, 53), (17, 62), (62, 39), (14, 17), (62, 60), (17, 55), (62, 32), (12, 13), (62, 53), (62, 62), (17, 39), (16, 19), (17, 48), (17, 57), (62, 55), (17, 32), (17, 50), (17, 59), (63, 26), (12, 8), (62, 48), (62, 57), (17, 34), (17, 43), (17, 52), (17, 61), (62, 50), (17, 27), (2, 8), (62, 59), (17, 36), (17, 45), (17, 54), (63, 21), (63, 30), (62, 34), (62, 43), (62, 52), (17, 29), (30, 26), (2, 10), (62, 61), (17, 38), (12, 14), (12, 23), (62, 36), (62, 45), (17, 22), (2, 3), (62, 54), (2, 12), (17, 40), (17, 49), (12, 16), (62, 38), (17, 33), (30, 30), (17, 42), (17, 63), (62, 40), (62, 49), (2, 7), (17, 26), (62, 58), (17, 35), (62, 33), (62, 42), (17, 37)], 'ddg_edge_info': [(55, 57), (60, 53), (7, 17), (50, 52), (10, 34), (26, 30), (33, 36), (55, 20), (44, 54), (29, 32), (10, 61), (39, 42), (17, 21), (48, 54), (38, 53), (0, 14), (17, 30), (22, 44), (7, 10), (10, 27), (55, 59), (10, 36), (50, 54), (39, 44), (0, 7), (40, 43), (0, 16), (60, 30), (60, 39), (10, 20), (26, 16), (10, 29), (55, 61), (42, 43), (10, 38), (38, 39), (48, 49), (2, 61), (40, 45), (38, 48), (22, 39), (55, 36), (58, 35), (10, 22), (53, 57), (55, 63), (22, 60), (59, 61), (20, 8), (10, 40), (36, 59), (18, 23), (0, 2), (55, 38), (61, 33), (13, 23), (26, 20), (10, 33), (38, 43), (38, 52), (55, 40), (19, 20), (10, 17), (27, 33), (45, 48), (10, 26), (55, 58), (54, 60), (10, 35), (42, 49), (17, 59), (58, 60), (38, 36), (29, 33), (52, 53), (22, 27), (40, 42), (55, 33), (10, 19), (13, 18), (45, 50), (22, 48), (55, 60), (10, 37), (3, 7), (40, 44), (55, 26), (55, 35), (10, 12), (10, 21), (0, 20), (37, 39), (22, 59), (60, 43), (10, 39), (32, 36), (63, 21), (60, 61), (55, 19), (38, 49), (10, 60), (35, 59), (55, 37), (22, 34), (10, 14), (61, 32), (2, 10), (30, 26), (2, 19), (22, 52), (10, 32), (22, 61), (50, 53), (21, 26), (61, 62), (55, 21), (55, 39), (17, 22), (34, 38), (10, 16), (54, 59), (22, 54), (60, 38), (22, 63), (38, 26), (33, 39), (50, 55), (38, 35), (44, 48), (55, 32), (57, 60), (36, 37), (0, 17), (45, 49), (60, 49), (42, 44), (59, 60), (52, 54), (38, 37), (55, 16), (17, 63), (55, 34), (0, 10), (17, 26), (8, 23), (49, 58), (0, 19), (37, 38), (58, 36), (26, 19), (32, 35), (44, 52), (29, 39), (0, 3), (48, 52), (10, 13), (22, 42), (60, 26), (38, 60)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 213 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 213 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 91 nodes and 135 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 213 instructions in binary file.
[4194304, 4194365, 4194430, 4194452]
[4195361, 4195390, 4195413]
The execution time of patched subCFG information extraction via angr: 0:00:00.576481
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1b8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~dword ptr [rsp + 0x1a8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x1ac]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x180], edi>', '<call~~0x500008>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (1, 3)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400470>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "movsxd" for 0x400428>, <DisassemblerInsn "lea" for 0x40042b>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "cmp" for 0x40041c>, <DisassemblerInsn "jae" for 0x40041f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1956]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<cmp~~eax, 4>', '<jae~~0x400455>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}], 'cfg_edge_info': [(15, 5), (11, 15), (11, 14), (1, 3), (14, 5), (3, 5)]}]}
{'ff_dct_init': [4195361, 4195390, 4195413]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/O3/dct.o---after
The extraction of function: ff_dct_init
[4195361, 4195390, 4195413]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 64 nodes and 83 edges in CFGEmulated.
It has 62 nodes and 100 edges in CDG.
It has 899 nodes and 1138 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195361, 4195390, 4195413]
{4194304, 4194821, 4194950, 4194829, 4195214, 4194962, 4194452, 4195349, 4194967, 4194714, 4195228, 4194846, 4195361, 4194978, 4194600, 4194986, 4194862, 4194609, 4195125, 4194998, 4195003, 4194365, 4195390, 4194625, 4194754, 4195011, 4194887, 4195144, 4194762, 4195019, 4195150, 4195279, 4194896, 4195413, 4194901, 4194522, 4194909, 4194789, 4194917, 4194797, 4195054, 4195183, 4195440, 4194926, 4195446, 4194430, 4194939, 4194813, 4195198}
[23, 13, 33, 39, 17, 32, 29, 40, 59, 53, 22, 8, 7, 48, 12, 36, 37, 62, 14, 52, 18, 0, 54, 16, 30, 57, 4, 60, 19, 55, 26, 49, 31, 42, 38, 63, 58, 3, 20, 44, 27, 34, 21, 61, 2, 47, 50, 10, 43, 45, 35]
The execution time of patched slicing information extraction via angr: 0:00:02.737740
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "call" for 0x400389>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "shl" for 0x400157>, <DisassemblerInsn "cvtsi2sd" for 0x400159>, <DisassemblerInsn "movsd" for 0x40015d>, <DisassemblerInsn "divsd" for 0x400165>, <DisassemblerInsn "movsd" for 0x400169>, <DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "xor" for 0x400187>, <DisassemblerInsn "cmp" for 0x400189>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "jb" for 0x400194>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002a2>, <DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x40019a>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "and" for 0x4001ab>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "unpcklpd" for 0x4001b6>, <DisassemblerInsn "movaps" for 0x4001ba>, <DisassemblerInsn "movaps" for 0x4001c2>, <DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400470>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x400476>, <DisassemblerInsn "add" for 0x40047a>, <DisassemblerInsn "ret" for 0x400481>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40027b>, <DisassemblerInsn "movaps" for 0x40027e>, <DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400128>, <DisassemblerInsn "jl" for 0x40012b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "cmp" for 0x400138>, <DisassemblerInsn "jle" for 0x40013b>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "movaps" for 0x40029a>, <DisassemblerInsn "movaps" for 0x4002a2>, <DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "jmp" for 0x400397>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x4002aa>, <DisassemblerInsn "movaps" for 0x4002ae>, <DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "cmp" for 0x40041c>, <DisassemblerInsn "jae" for 0x40041f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "movaps" for 0x4003e4>, <DisassemblerInsn "movsd" for 0x4003e7>, <DisassemblerInsn "divsd" for 0x4003ef>, <DisassemblerInsn "movsd" for 0x4003f3>, <DisassemblerInsn "cvtsd2ss" for 0x4003f9>, <DisassemblerInsn "movss" for 0x4003fd>, <DisassemblerInsn "add" for 0x400402>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "cmp" for 0x40040b>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "jne" for 0x400413>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002bb>, <DisassemblerInsn "movaps" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "movsxd" for 0x400428>, <DisassemblerInsn "lea" for 0x40042b>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "call" for 0x4002b6>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "movsd" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "shl" for 0x4003af>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "or" for 0x4003b5>, <DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "cvtsi2sd" for 0x4003bc>, <DisassemblerInsn "mulsd" for 0x4003c0>, <DisassemblerInsn "movsd" for 0x4003c4>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400255>, <DisassemblerInsn "movaps" for 0x400258>, <DisassemblerInsn "movaps" for 0x40025d>, <DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "je" for 0x400369>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "movaps" for 0x4002e6>, <DisassemblerInsn "unpcklpd" for 0x4002ee>, <DisassemblerInsn "movapd" for 0x4002f2>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "divpd" for 0x4002fd>, <DisassemblerInsn "divpd" for 0x400301>, <DisassemblerInsn "cvtpd2ps" for 0x400305>, <DisassemblerInsn "cvtpd2ps" for 0x400309>, <DisassemblerInsn "unpcklpd" for 0x40030d>, <DisassemblerInsn "movupd" for 0x400311>, <DisassemblerInsn "add" for 0x400316>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "movaps" for 0x400322>, <DisassemblerInsn "paddd" for 0x400329>, <DisassemblerInsn "movaps" for 0x40032d>, <DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "lea" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "call" for 0x40046b>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001c2>, <DisassemblerInsn "movaps" for 0x4001ca>, <DisassemblerInsn "xor" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "movaps" for 0x4001db>, <DisassemblerInsn "jmp" for 0x4001e3>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001fd>, <DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "jmp" for 0x40037c>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400335>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "movaps" for 0x400340>, <DisassemblerInsn "jne" for 0x400348>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "movaps" for 0x40027b>, <DisassemblerInsn "movaps" for 0x40027e>, <DisassemblerInsn "unpcklpd" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "call" for 0x400292>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025d>, <DisassemblerInsn "unpckhpd" for 0x400265>, <DisassemblerInsn "movaps" for 0x400269>, <DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "call" for 0x40026e>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "paddd" for 0x400215>, <DisassemblerInsn "movaps" for 0x400219>, <DisassemblerInsn "movaps" for 0x40021e>, <DisassemblerInsn "por" for 0x400225>, <DisassemblerInsn "movaps" for 0x400229>, <DisassemblerInsn "cvtdq2pd" for 0x40022e>, <DisassemblerInsn "pshufd" for 0x400232>, <DisassemblerInsn "cvtdq2pd" for 0x400237>, <DisassemblerInsn "mulpd" for 0x40023b>, <DisassemblerInsn "movaps" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400247>, <DisassemblerInsn "movaps" for 0x40024b>, <DisassemblerInsn "call" for 0x400250>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500038>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x130]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 39, 'blockInsts': ['<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x184]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1afb]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x160], xmm0>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~eax, ecx>', '<mov~~qword ptr [rsp + 0x170], rax>', '<xor~~eax, eax>', '<cmp~~ecx, 4>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jb~~0x40036f>']}, {'block_Idx': 32, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x130]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 29, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 40, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 53, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xb0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 22, 'blockInsts': ['<movsd~~xmm0, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<and~~eax, 0xfffffffc>', '<mov~~qword ptr [rsp + 0x118], rax>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x120], xmm0>', '<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 8, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x1b8>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 48, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40037e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 37, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 62, 'blockInsts': ['<jne~~0x4001e5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<cmp~~eax, 1>', '<jle~~0x400415>']}, {'block_Idx': 52, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x400476>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1b8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~dword ptr [rsp + 0x1a8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}, {'block_Idx': 54, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<call~~0x500030>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<cmp~~eax, 4>', '<jae~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x1879]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x20], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jne~~0x40039c>']}, {'block_Idx': 57, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rsp + 0xb0]>', '<movaps~~xmm3, xmmword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 60, 'blockInsts': ['<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1956]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movsd~~xmm0, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 0xc], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x10], xmm0>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4001e5>']}, {'block_Idx': 42, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<movaps~~xmmword ptr [rsp + 0x80], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<je~~0x400415>']}, {'block_Idx': 58, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xe0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x1996]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x1977]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x100], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x1ac]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x180], edi>', '<call~~0x500008>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<lea~~rax, [rip + 0xa3c]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 44, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 27, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a9f]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jmp~~0x4001e5>']}, {'block_Idx': 34, 'blockInsts': ['<movaps~~xmm2, xmmword ptr [rsp + 0x120]>', '<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jmp~~0x40039c>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<movaps~~xmmword ptr [rsp + 0x150], xmm0>', '<jne~~0x4001e5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x423]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40043e>']}, {'block_Idx': 47, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x80]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<call~~0x500030>']}, {'block_Idx': 50, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 43, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x80], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500030>']}, {'block_Idx': 45, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 35, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xe0], xmm3>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x40], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1a5b]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x90], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm0>', '<call~~0x500030>']}], 'cfg_edge_info': [(63, 16), (55, 57), (16, 20), (18, 23), (50, 52), (26, 30), (58, 59), (35, 36), (3, 7), (20, 8), (62, 32), (12, 13), (44, 45), (14, 16), (31, 32), (0, 2), (49, 50), (17, 21), (10, 12), (36, 37), (54, 55), (7, 10), (16, 19), (32, 33), (63, 21), (59, 60), (60, 61), (4, 8), (29, 31), (19, 8), (2, 4), (37, 38), (30, 26), (53, 54), (47, 48), (42, 43), (33, 34), (43, 44), (12, 14), (62, 63), (52, 53), (21, 26), (61, 62), (22, 27), (38, 39), (14, 17), (40, 42), (48, 49), (57, 58), (39, 40), (34, 35), (30, 16), (17, 22), (2, 3), (27, 29), (13, 18), (45, 47)], 'cdg_edge_info': [(16, 20), (17, 58), (62, 35), (62, 44), (17, 21), (17, 30), (17, 60), (62, 37), (12, 18), (2, 4), (17, 44), (17, 53), (17, 62), (62, 39), (14, 17), (62, 60), (17, 55), (62, 32), (12, 13), (62, 53), (62, 62), (17, 39), (16, 19), (17, 48), (17, 57), (62, 55), (17, 32), (17, 50), (17, 59), (63, 26), (12, 8), (62, 48), (62, 57), (17, 34), (17, 43), (17, 52), (17, 61), (62, 50), (17, 27), (2, 8), (62, 59), (17, 36), (17, 45), (17, 54), (63, 21), (63, 30), (62, 34), (62, 43), (62, 52), (17, 29), (30, 26), (2, 10), (62, 61), (17, 38), (12, 14), (12, 23), (62, 36), (62, 45), (17, 22), (2, 3), (62, 54), (2, 12), (17, 40), (17, 49), (12, 16), (62, 38), (17, 33), (30, 30), (17, 42), (17, 63), (62, 40), (62, 49), (2, 7), (17, 26), (62, 58), (17, 35), (62, 33), (62, 42), (17, 37)], 'ddg_edge_info': [(55, 57), (60, 53), (7, 17), (50, 52), (10, 34), (26, 30), (33, 36), (55, 20), (44, 54), (29, 32), (10, 61), (39, 42), (17, 21), (48, 54), (38, 53), (0, 14), (17, 30), (22, 44), (7, 10), (10, 27), (55, 59), (10, 36), (50, 54), (39, 44), (0, 7), (40, 43), (0, 16), (60, 30), (60, 39), (10, 20), (26, 16), (10, 29), (55, 61), (42, 43), (10, 38), (38, 39), (48, 49), (2, 61), (40, 45), (38, 48), (22, 39), (55, 36), (58, 35), (10, 22), (53, 57), (55, 63), (22, 60), (59, 61), (20, 8), (10, 40), (36, 59), (18, 23), (0, 2), (55, 38), (61, 33), (13, 23), (26, 20), (10, 33), (38, 43), (38, 52), (55, 40), (19, 20), (10, 17), (27, 33), (45, 48), (10, 26), (55, 58), (54, 60), (10, 35), (42, 49), (17, 59), (58, 60), (38, 36), (29, 33), (52, 53), (22, 27), (40, 42), (55, 33), (10, 19), (13, 18), (45, 50), (22, 48), (55, 60), (10, 37), (3, 7), (40, 44), (55, 26), (55, 35), (10, 12), (10, 21), (0, 20), (37, 39), (22, 59), (60, 43), (10, 39), (32, 36), (63, 21), (60, 61), (55, 19), (38, 49), (10, 60), (35, 59), (55, 37), (22, 34), (10, 14), (61, 32), (2, 10), (30, 26), (2, 19), (22, 52), (10, 32), (22, 61), (50, 53), (21, 26), (61, 62), (55, 21), (55, 39), (17, 22), (34, 38), (10, 16), (54, 59), (22, 54), (60, 38), (22, 63), (38, 26), (33, 39), (50, 55), (38, 35), (44, 48), (55, 32), (57, 60), (36, 37), (0, 17), (45, 49), (60, 49), (42, 44), (59, 60), (52, 54), (38, 37), (55, 16), (17, 63), (55, 34), (0, 10), (17, 26), (8, 23), (49, 58), (0, 19), (37, 38), (58, 36), (26, 19), (32, 35), (44, 52), (29, 39), (0, 3), (48, 52), (10, 13), (22, 42), (60, 26), (38, 60)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x180(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 205, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 206, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 207, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 190 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 183, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 184, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.s---ff_dct_init---after
function id: 0
function flag: True
There are 190 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 183, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 184, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.o---after
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 84 nodes and 123 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 190 instructions in binary file.
[4194304, 4194365, 4194430, 4194452]
[4195142, 4195171, 4195194]
The execution time of patched subCFG information extraction via angr: 0:00:00.573856
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xec]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<call~~0x500008>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x33a]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<jne~~0x400363>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~dword ptr [rsp + 0xe8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (1, 3)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033a>, <DisassemblerInsn "cmp" for 0x400341>, <DisassemblerInsn "jae" for 0x400344>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "movsxd" for 0x40034d>, <DisassemblerInsn "lea" for 0x400350>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400395>, <DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "add" for 0x40039f>, <DisassemblerInsn "ret" for 0x4003a6>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe8]>', '<cmp~~eax, 4>', '<jae~~0x40037a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x33a]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<jne~~0x400363>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1921]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}], 'cfg_edge_info': [(15, 5), (11, 15), (11, 14), (1, 3), (14, 5), (3, 5)]}]}
{'ff_dct_init': [4195142, 4195171, 4195194]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_after/Os/dct.o---after
The extraction of function: ff_dct_init
[4195142, 4195171, 4195194]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 55 nodes and 70 edges in CFGEmulated.
It has 53 nodes and 72 edges in CDG.
It has 782 nodes and 974 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195142, 4195171, 4195194]
{4194304, 4194951, 4194452, 4195221, 4194966, 4194711, 4195096, 4195227, 4195103, 4194723, 4194600, 4194859, 4195119, 4194992, 4194609, 4195130, 4195003, 4194365, 4194750, 4194625, 4195013, 4195142, 4194758, 4194892, 4194766, 4194897, 4194905, 4194522, 4194910, 4194782, 4195171, 4194787, 4194919, 4194924, 4195057, 4194932, 4195194, 4194941, 4194430}
[26, 17, 27, 41, 30, 43, 36, 46, 19, 37, 7, 54, 47, 44, 12, 32, 25, 45, 22, 16, 14, 13, 51, 0, 8, 29, 49, 52, 48, 40, 18, 42, 20, 28, 31, 21, 3, 4, 53, 50, 2, 35, 33, 10, 39]
The execution time of patched slicing information extraction via angr: 0:00:02.370808
{'ff_dct_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001bc>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "add" for 0x400157>, <DisassemblerInsn "cvtsi2sd" for 0x400159>, <DisassemblerInsn "movsd" for 0x40015d>, <DisassemblerInsn "divsd" for 0x400165>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "inc" for 0x400176>, <DisassemblerInsn "and" for 0x400179>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "dec" for 0x400182>, <DisassemblerInsn "movq" for 0x400185>, <DisassemblerInsn "pshufd" for 0x40018a>, <DisassemblerInsn "movaps" for 0x40018f>, <DisassemblerInsn "unpcklpd" for 0x400197>, <DisassemblerInsn "movaps" for 0x40019b>, <DisassemblerInsn "movaps" for 0x4001a3>, <DisassemblerInsn "xor" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "movaps" for 0x4001b4>, <DisassemblerInsn "jmp" for 0x4001bc>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001be>, <DisassemblerInsn "movaps" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "movaps" for 0x4001d6>, <DisassemblerInsn "movaps" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "movq" for 0x4001e8>, <DisassemblerInsn "movaps" for 0x4001ed>, <DisassemblerInsn "pxor" for 0x4001f4>, <DisassemblerInsn "pxor" for 0x4001f8>, <DisassemblerInsn "movaps" for 0x4001fc>, <DisassemblerInsn "pcmpgtd" for 0x4001ff>, <DisassemblerInsn "pshufd" for 0x400203>, <DisassemblerInsn "pcmpeqd" for 0x400208>, <DisassemblerInsn "pshufd" for 0x40020c>, <DisassemblerInsn "pand" for 0x400211>, <DisassemblerInsn "pshufd" for 0x400215>, <DisassemblerInsn "por" for 0x40021a>, <DisassemblerInsn "pcmpeqd" for 0x40021e>, <DisassemblerInsn "pxor" for 0x400222>, <DisassemblerInsn "movaps" for 0x400226>, <DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400274>, <DisassemblerInsn "movaps" for 0x400278>, <DisassemblerInsn "movd" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "jne" for 0x400283>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "movq" for 0x4001e8>, <DisassemblerInsn "movaps" for 0x4001ed>, <DisassemblerInsn "pxor" for 0x4001f4>, <DisassemblerInsn "pxor" for 0x4001f8>, <DisassemblerInsn "movaps" for 0x4001fc>, <DisassemblerInsn "pcmpgtd" for 0x4001ff>, <DisassemblerInsn "pshufd" for 0x400203>, <DisassemblerInsn "pcmpeqd" for 0x400208>, <DisassemblerInsn "pshufd" for 0x40020c>, <DisassemblerInsn "pand" for 0x400211>, <DisassemblerInsn "pshufd" for 0x400215>, <DisassemblerInsn "por" for 0x40021a>, <DisassemblerInsn "pcmpeqd" for 0x40021e>, <DisassemblerInsn "pxor" for 0x400222>, <DisassemblerInsn "movaps" for 0x400226>, <DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400285>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400259>, <DisassemblerInsn "unpckhpd" for 0x40025e>, <DisassemblerInsn "call" for 0x400262>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x400296>, <DisassemblerInsn "divsd" for 0x40029e>, <DisassemblerInsn "cvtsd2ss" for 0x4002a2>, <DisassemblerInsn "movss" for 0x4002a6>, <DisassemblerInsn "movaps" for 0x4002ab>, <DisassemblerInsn "pextrw" for 0x4002b0>, <DisassemblerInsn "test" for 0x4002b5>, <DisassemblerInsn "jne" for 0x4002b7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "movsxd" for 0x40034d>, <DisassemblerInsn "lea" for 0x400350>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x40025e>, <DisassemblerInsn "call" for 0x400262>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "movsxd" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bf>, <DisassemblerInsn "cdq" for 0x4000c4>, <DisassemblerInsn "idiv" for 0x4000c5>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "movsxd" for 0x4000ce>, <DisassemblerInsn "shl" for 0x4000d1>, <DisassemblerInsn "call" for 0x4000d5>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40031a>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "pextrw" for 0x4002b0>, <DisassemblerInsn "test" for 0x4002b5>, <DisassemblerInsn "jne" for 0x4002b7>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "mov" for 0x40028c>, <DisassemblerInsn "movaps" for 0x400291>, <DisassemblerInsn "movsd" for 0x400296>, <DisassemblerInsn "divsd" for 0x40029e>, <DisassemblerInsn "cvtsd2ss" for 0x4002a2>, <DisassemblerInsn "movss" for 0x4002a6>, <DisassemblerInsn "movaps" for 0x4002ab>, <DisassemblerInsn "pextrw" for 0x4002b0>, <DisassemblerInsn "test" for 0x4002b5>, <DisassemblerInsn "jne" for 0x4002b7>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400128>, <DisassemblerInsn "jl" for 0x40012b>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001a3>, <DisassemblerInsn "xor" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "movaps" for 0x4001b4>, <DisassemblerInsn "jmp" for 0x4001bc>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4002ab>, <DisassemblerInsn "pextrw" for 0x4002b0>, <DisassemblerInsn "test" for 0x4002b5>, <DisassemblerInsn "jne" for 0x4002b7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "add" for 0x40039f>, <DisassemblerInsn "ret" for 0x4003a6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033a>, <DisassemblerInsn "cmp" for 0x400341>, <DisassemblerInsn "jae" for 0x400344>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "cmp" for 0x400138>, <DisassemblerInsn "jle" for 0x40013b>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031f>, <DisassemblerInsn "mov" for 0x400327>, <DisassemblerInsn "call" for 0x40032a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "or" for 0x4002ca>, <DisassemblerInsn "unpckhpd" for 0x4002ce>, <DisassemblerInsn "movsd" for 0x4002d2>, <DisassemblerInsn "divsd" for 0x4002da>, <DisassemblerInsn "cvtsd2ss" for 0x4002de>, <DisassemblerInsn "movss" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002ec>, <DisassemblerInsn "mov" for 0x4002f1>, <DisassemblerInsn "add" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "paddq" for 0x400301>, <DisassemblerInsn "cmp" for 0x400305>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "movaps" for 0x400310>, <DisassemblerInsn "je" for 0x400318>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "shl" for 0x400024>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "add" for 0x40002d>, <DisassemblerInsn "xor" for 0x400031>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400395>, <DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "add" for 0x40039f>, <DisassemblerInsn "ret" for 0x4003a6>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "movaps" for 0x4001d6>, <DisassemblerInsn "movaps" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "movq" for 0x4001e8>, <DisassemblerInsn "movaps" for 0x4001ed>, <DisassemblerInsn "pxor" for 0x4001f4>, <DisassemblerInsn "pxor" for 0x4001f8>, <DisassemblerInsn "movaps" for 0x4001fc>, <DisassemblerInsn "pcmpgtd" for 0x4001ff>, <DisassemblerInsn "pshufd" for 0x400203>, <DisassemblerInsn "pcmpeqd" for 0x400208>, <DisassemblerInsn "pshufd" for 0x40020c>, <DisassemblerInsn "pand" for 0x400211>, <DisassemblerInsn "pshufd" for 0x400215>, <DisassemblerInsn "por" for 0x40021a>, <DisassemblerInsn "pcmpeqd" for 0x40021e>, <DisassemblerInsn "pxor" for 0x400222>, <DisassemblerInsn "movaps" for 0x400226>, <DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "movaps" for 0x4002c0>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "or" for 0x4002ca>, <DisassemblerInsn "unpckhpd" for 0x4002ce>, <DisassemblerInsn "movsd" for 0x4002d2>, <DisassemblerInsn "divsd" for 0x4002da>, <DisassemblerInsn "cvtsd2ss" for 0x4002de>, <DisassemblerInsn "movss" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002ec>, <DisassemblerInsn "mov" for 0x4002f1>, <DisassemblerInsn "add" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "paddq" for 0x400301>, <DisassemblerInsn "cmp" for 0x400305>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "movaps" for 0x400310>, <DisassemblerInsn "je" for 0x400318>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f1>, <DisassemblerInsn "add" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "paddq" for 0x400301>, <DisassemblerInsn "cmp" for 0x400305>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "movaps" for 0x400310>, <DisassemblerInsn "je" for 0x400318>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002b9>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "movaps" for 0x40026f>, <DisassemblerInsn "unpcklpd" for 0x400274>, <DisassemblerInsn "movaps" for 0x400278>, <DisassemblerInsn "movd" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "jne" for 0x400283>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "jmp" for 0x400338>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "movd" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "jne" for 0x400283>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "movaps" for 0x4001d6>, <DisassemblerInsn "movaps" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "movq" for 0x4001e8>, <DisassemblerInsn "movaps" for 0x4001ed>, <DisassemblerInsn "pxor" for 0x4001f4>, <DisassemblerInsn "pxor" for 0x4001f8>, <DisassemblerInsn "movaps" for 0x4001fc>, <DisassemblerInsn "pcmpgtd" for 0x4001ff>, <DisassemblerInsn "pshufd" for 0x400203>, <DisassemblerInsn "pcmpeqd" for 0x400208>, <DisassemblerInsn "pshufd" for 0x40020c>, <DisassemblerInsn "pand" for 0x400211>, <DisassemblerInsn "pshufd" for 0x400215>, <DisassemblerInsn "por" for 0x40021a>, <DisassemblerInsn "pcmpeqd" for 0x40021e>, <DisassemblerInsn "pxor" for 0x400222>, <DisassemblerInsn "movaps" for 0x400226>, <DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "movq" for 0x4001e8>, <DisassemblerInsn "movaps" for 0x4001ed>, <DisassemblerInsn "pxor" for 0x4001f4>, <DisassemblerInsn "pxor" for 0x4001f8>, <DisassemblerInsn "movaps" for 0x4001fc>, <DisassemblerInsn "pcmpgtd" for 0x4001ff>, <DisassemblerInsn "pshufd" for 0x400203>, <DisassemblerInsn "pcmpeqd" for 0x400208>, <DisassemblerInsn "pshufd" for 0x40020c>, <DisassemblerInsn "pand" for 0x400211>, <DisassemblerInsn "pshufd" for 0x400215>, <DisassemblerInsn "por" for 0x40021a>, <DisassemblerInsn "pcmpeqd" for 0x40021e>, <DisassemblerInsn "pxor" for 0x400222>, <DisassemblerInsn "movaps" for 0x400226>, <DisassemblerInsn "paddd" for 0x40022b>, <DisassemblerInsn "pshufd" for 0x40022f>, <DisassemblerInsn "movaps" for 0x400234>, <DisassemblerInsn "por" for 0x40023b>, <DisassemblerInsn "cvtdq2pd" for 0x40023f>, <DisassemblerInsn "mulpd" for 0x400243>, <DisassemblerInsn "movaps" for 0x400247>, <DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400197>, <DisassemblerInsn "movaps" for 0x40019b>, <DisassemblerInsn "movaps" for 0x4001a3>, <DisassemblerInsn "xor" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "movaps" for 0x4001b4>, <DisassemblerInsn "jmp" for 0x4001bc>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400085>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "call" for 0x40008f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037a>, <DisassemblerInsn "lea" for 0x400382>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "call" for 0x400390>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "je" for 0x400318>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002ec>, <DisassemblerInsn "mov" for 0x4002f1>, <DisassemblerInsn "add" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fa>, <DisassemblerInsn "paddq" for 0x400301>, <DisassemblerInsn "cmp" for 0x400305>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "movaps" for 0x400310>, <DisassemblerInsn "je" for 0x400318>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x400058>, <DisassemblerInsn "sete" for 0x40005b>, <DisassemblerInsn "cmp" for 0x40005e>, <DisassemblerInsn "sete" for 0x400061>, <DisassemblerInsn "and" for 0x400064>, <DisassemblerInsn "lea" for 0x400066>, <DisassemblerInsn "test" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "jne" for 0x400078>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400251>, <DisassemblerInsn "movaps" for 0x400254>, <DisassemblerInsn "movaps" for 0x400259>, <DisassemblerInsn "unpckhpd" for 0x40025e>, <DisassemblerInsn "call" for 0x400262>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "call" for 0x40024c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "add" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400114>, <DisassemblerInsn "cmp" for 0x400118>, <DisassemblerInsn "sete" for 0x40011b>, <DisassemblerInsn "and" for 0x40011e>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "call" for 0x400123>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400267>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "movaps" for 0x40026f>, <DisassemblerInsn "unpcklpd" for 0x400274>, <DisassemblerInsn "movaps" for 0x400278>, <DisassemblerInsn "movd" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "jne" for 0x400283>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<jmp~~0x4001be>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~edx, dword ptr [rsp + 0xdc]>', '<add~~edx, edx>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x19e3]>', '<divsd~~xmm0, xmm1>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~eax, eax>', '<mov~~rcx, rax>', '<inc~~rcx>', '<and~~rcx, 0xfffffffffffffffe>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<dec~~rax>', '<movq~~xmm1, rax>', '<pshufd~~xmm1, xmm1, 0x44>', '<movaps~~xmmword ptr [rsp + 0x80], xmm1>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x90], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x19b6]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<jmp~~0x4001be>']}, {'block_Idx': 27, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x90]>', '<movaps~~xmm5, xmmword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xb0]>', '<movaps~~xmmword ptr [rsp + 0x10], xmm2>', '<mov~~qword ptr [rsp + 0x28], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x197c]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 41, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x60], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400287>']}, {'block_Idx': 30, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x10], xmm2>', '<mov~~qword ptr [rsp + 0x28], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x197c]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 43, 'blockInsts': ['<jmp~~0x4002ab>']}, {'block_Idx': 36, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x40], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<call~~0x500030>']}, {'block_Idx': 46, 'blockInsts': ['<movsd~~xmm0, qword ptr [rip + 0x18b2]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x50]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x4002bb>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe8]>', '<movsxd~~rcx, eax>', '<lea~~rax, [rip + 0x1921]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 37, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<movsxd~~rsi, edx>', '<mov~~rdx, qword ptr [rip + 0xfff64]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rcx + 0x98], rdx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500020>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x4001be>']}, {'block_Idx': 47, 'blockInsts': ['<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x4002bb>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x60]>', '<movsd~~xmm0, qword ptr [rip + 0x18b2]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x50]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x4002bb>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40031f>']}, {'block_Idx': 32, 'blockInsts': ['<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x19b6]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<jmp~~0x4001be>']}, {'block_Idx': 45, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x50]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x4002bb>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe8]>', '<cmp~~eax, 4>', '<jae~~0x40037a>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~eax, 1>', '<jle~~0x40033a>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500038>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<or~~rcx, 1>', '<unpckhpd~~xmm1, xmm1>', '<movsd~~xmm0, qword ptr [rip + 0x1876]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x188f]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<je~~0x40033a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~dword ptr [rsp + 0xe8], edx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<add~~rdi, 8>', '<xor~~esi, esi>', '<mov~~edx, 0xb0>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xb0]>', '<movaps~~xmmword ptr [rsp + 0x10], xmm2>', '<mov~~qword ptr [rsp + 0x28], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x197c]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<or~~rcx, 1>', '<unpckhpd~~xmm1, xmm1>', '<movsd~~xmm0, qword ptr [rip + 0x1876]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x188f]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<je~~0x40033a>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x188f]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<je~~0x40033a>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x4002e7>']}, {'block_Idx': 40, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x50]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x60], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400287>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xc], eax>', '<jmp~~0x40039b>']}, {'block_Idx': 42, 'blockInsts': ['<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400287>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xb0]>', '<movaps~~xmmword ptr [rsp + 0x10], xmm2>', '<mov~~qword ptr [rsp + 0x28], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x197c]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~qword ptr [rsp + 0x28], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x197c]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x1945]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x30], xmm0>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x90], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x19b6]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<jmp~~0x4001be>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xec]>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500040>']}, {'block_Idx': 53, 'blockInsts': ['<je~~0x40033a>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x188f]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<je~~0x40033a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~dword ptr [rdi], esi>', '<mov~~dword ptr [rdi + 4], edx>', '<cmp~~edx, 0>', '<sete~~al>', '<cmp~~esi, 5>', '<sete~~cl>', '<and~~cl, al>', '<lea~~rax, [rip + 0x33a]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<jne~~0x400363>']}, {'block_Idx': 35, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x30]>', '<movaps~~xmmword ptr [rsp + 0x40], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<call~~0x500030>']}, {'block_Idx': 33, 'blockInsts': ['<call~~0x500030>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~rcx, rax>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~rdx, rdi>', '<add~~rdx, 0xa0>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~qword ptr [rdi + 0xa0], rcx>', '<add~~rdi, 8>', '<cmp~~eax, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x40]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x50]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x60], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400287>']}], 'cfg_edge_info': [(16, 20), (20, 8), (50, 52), (26, 27), (3, 7), (35, 36), (12, 13), (14, 16), (31, 32), (21, 25), (0, 2), (40, 41), (17, 21), (10, 12), (27, 28), (36, 37), (37, 39), (47, 49), (7, 10), (16, 19), (32, 33), (33, 35), (41, 42), (42, 44), (53, 16), (18, 22), (51, 52), (4, 8), (46, 47), (54, 27), (19, 8), (2, 4), (28, 29), (13, 18), (47, 48), (42, 43), (12, 14), (29, 30), (44, 46), (52, 53), (14, 17), (39, 40), (49, 51), (2, 3), (45, 47), (53, 54), (30, 31), (25, 26)], 'cdg_edge_info': [(14, 53), (16, 20), (12, 16), (12, 13), (53, 32), (12, 22), (53, 29), (53, 35), (14, 25), (14, 28), (14, 31), (14, 37), (53, 47), (53, 53), (2, 8), (14, 40), (53, 41), (47, 49), (14, 52), (16, 19), (42, 44), (53, 28), (12, 18), (14, 21), (53, 31), (53, 37), (14, 30), (53, 40), (2, 4), (14, 27), (14, 33), (2, 7), (2, 10), (14, 42), (14, 36), (53, 52), (14, 39), (47, 51), (42, 46), (12, 8), (12, 14), (53, 27), (53, 30), (14, 17), (53, 33), (53, 39), (53, 36), (14, 32), (53, 42), (14, 29), (14, 35), (2, 3), (2, 12), (14, 41), (14, 47)], 'ddg_edge_info': [(32, 37), (7, 17), (33, 36), (41, 49), (32, 46), (25, 32), (40, 41), (17, 21), (0, 14), (37, 33), (37, 42), (7, 10), (10, 27), (41, 51), (17, 51), (0, 7), (31, 40), (40, 52), (0, 16), (10, 20), (10, 29), (41, 44), (17, 44), (35, 37), (17, 53), (2, 52), (37, 19), (46, 52), (37, 28), (31, 51), (10, 31), (25, 29), (20, 8), (44, 51), (0, 2), (40, 47), (31, 44), (37, 30), (10, 33), (33, 35), (37, 51), (10, 51), (51, 52), (29, 31), (46, 47), (40, 31), (21, 27), (39, 41), (19, 20), (10, 17), (52, 32), (17, 32), (37, 44), (33, 37), (32, 41), (46, 40), (52, 53), (37, 16), (40, 42), (8, 22), (10, 19), (13, 18), (10, 28), (37, 46), (17, 52), (51, 47), (41, 46), (3, 7), (46, 42), (46, 51), (31, 32), (10, 12), (10, 21), (0, 20), (37, 39), (10, 30), (51, 40), (30, 51), (32, 36), (46, 35), (35, 41), (10, 14), (37, 32), (2, 10), (31, 46), (37, 41), (2, 19), (10, 32), (17, 47), (51, 42), (46, 37), (29, 30), (40, 30), (44, 46), (10, 16), (27, 32), (28, 31), (10, 25), (17, 40), (51, 35), (37, 52), (17, 49), (35, 36), (10, 46), (37, 27), (0, 17), (17, 42), (51, 37), (46, 32), (18, 22), (32, 51), (37, 20), (0, 10), (37, 29), (36, 39), (0, 19), (17, 35), (31, 52), (37, 47), (52, 29), (13, 22), (32, 35), (2, 46), (0, 3), (10, 13), (49, 51), (37, 31), (17, 28), (37, 40), (17, 37), (51, 32), (37, 49)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 8, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 9, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 10, 'instruction': 'movl\t$0xb0, %edx'}, {'instIndex': 11, 'instruction': 'callq\tmemset@PLT'}, {'instIndex': 15, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'sete\t%al'}, {'instIndex': 19, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 20, 'instruction': 'sete\t%cl'}, {'instIndex': 21, 'instruction': 'andb\t%al, %cl'}, {'instIndex': 22, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 23, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'jne\t.LBB0_12'}, {'instIndex': 27, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 33, 'instruction': 'movslq\t%edx, %rsi'}, {'instIndex': 34, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rdx'}, {'instIndex': 35, 'instruction': 'movq\t(%rdx,%rsi,8), %rdx'}, {'instIndex': 36, 'instruction': 'movq\t%rdx, 0x98(%rcx)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 183, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 184, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7---a/libavcodec/dct.c
The case of compiler gcc with optimization no.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/no/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/no/dct_gcc.s---ff_dct_init---before
function id: 22
function flag: True
There are 139 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/no/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/no/dct_gcc.s---ff_dct_init---before
function id: 22
function flag: True
There are 139 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/no/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O0/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O0/dct_gcc.s---ff_dct_init---before
function id: 22
function flag: True
There are 139 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O0/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O0/dct_gcc.s---ff_dct_init---before
function id: 22
function flag: True
There are 139 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O0/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 6, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 7, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 8, 'instruction': 'sall\t%cl, %edx'}, {'instIndex': 9, 'instruction': 'movl\t%edx, %eax'}, {'instIndex': 10, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t4(%rsp), %edx'}, {'instIndex': 13, 'instruction': 'movl\t%edx, (%rax)'}, {'instIndex': 14, 'instruction': 'movl\t(%rsp), %edx'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 17, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 21, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 22, 'instruction': 'leal\t2(%rax), %edx'}, {'instIndex': 23, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 24, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 25, 'instruction': 'movq\t(%rax,%rdx,8), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 116, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'jmp\t.L29'}, {'instIndex': 119, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 120, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rdx'}, {'instIndex': 121, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 122, 'instruction': 'nop'}, {'instIndex': 123, 'instruction': 'cmpl\t$0, (%rsp)'}, {'instIndex': 124, 'instruction': 'jne\t.L33'}, {'instIndex': 125, 'instruction': 'cmpl\t$5, 4(%rsp)'}, {'instIndex': 126, 'instruction': 'jne\t.L33'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0xa8(%rax)'}, {'instIndex': 130, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 131, 'instruction': 'leaq\tdct0x20(%rip), %rdx'}, {'instIndex': 132, 'instruction': 'movq\t%rdx, 0xb0(%rax)'}, {'instIndex': 133, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 134, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 135, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O1/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O1/dct_gcc.s---ff_dct_init---before
function id: 513
function flag: True
There are 116 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 13, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 14, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 15, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 18, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 22, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 81, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 82, 'instruction': 'jne\t.L54'}, {'instIndex': 83, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 84, 'instruction': 'jne\t.L54'}, {'instIndex': 85, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 87, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 89, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 90, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 96, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 97, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 98, 'instruction': 'jmp\t.L53'}, {'instIndex': 99, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 101, 'instruction': 'jmp\t.L53'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O1/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O1/dct_gcc.s---ff_dct_init---before
function id: 513
function flag: True
There are 116 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 13, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 14, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 15, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 18, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 22, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 81, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 82, 'instruction': 'jne\t.L54'}, {'instIndex': 83, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 84, 'instruction': 'jne\t.L54'}, {'instIndex': 85, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 87, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 89, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 90, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 96, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 97, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 98, 'instruction': 'jmp\t.L53'}, {'instIndex': 99, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 101, 'instruction': 'jmp\t.L53'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O1/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 13, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 14, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 15, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 18, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x98(%rbx)'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 22, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 81, 'instruction': 'testl\t%ebp, %ebp'}, {'instIndex': 82, 'instruction': 'jne\t.L54'}, {'instIndex': 83, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 84, 'instruction': 'jne\t.L54'}, {'instIndex': 85, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 87, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rax, 0xb0(%rbx)'}, {'instIndex': 89, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 90, 'instruction': 'call\tff_dct_init_mmx@PLT'}, {'instIndex': 96, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 97, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 98, 'instruction': 'jmp\t.L53'}, {'instIndex': 99, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, 0xa8(%rbx)'}, {'instIndex': 101, 'instruction': 'jmp\t.L53'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O2/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O2/dct_gcc.s---ff_dct_init---before
function id: 429
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L54'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L55'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L55'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O2/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O2/dct_gcc.s---ff_dct_init---before
function id: 429
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L54'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L55'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L55'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O2/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L54'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L55'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L55'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O3/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O3/dct_gcc.s---ff_dct_init---before
function id: 445
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L57'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L58'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L58'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O3/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O3/dct_gcc.s---ff_dct_init---before
function id: 445
function flag: True
There are 114 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L57'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L58'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L58'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/O3/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 74, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 76, 'instruction': 'jmp\t.L57'}, {'instIndex': 80, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 82, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 83, 'instruction': 'jne\t.L58'}, {'instIndex': 84, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 85, 'instruction': 'jne\t.L58'}, {'instIndex': 86, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 88, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 89, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 90, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 91, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/Os/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/Os/dct_gcc.s---ff_dct_init---before
function id: 435
function flag: True
There are 110 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 67, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 72, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 78, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 79, 'instruction': 'jne\t.L47'}, {'instIndex': 80, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 81, 'instruction': 'jne\t.L47'}, {'instIndex': 82, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 84, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 85, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 87, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/Os/dct_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/Os/dct_gcc.s---ff_dct_init---before
function id: 435
function flag: True
There are 110 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 67, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 72, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 78, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 79, 'instruction': 'jne\t.L47'}, {'instIndex': 80, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 81, 'instruction': 'jne\t.L47'}, {'instIndex': 82, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 84, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 85, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 87, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/gcc_before/Os/dct.o
Binary file does not exist.
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'leal\t2(%rsi), %r13d'}, {'instIndex': 13, 'instruction': 'movl\t%esi, (%rdi)'}, {'instIndex': 14, 'instruction': 'movl\t%edx, 4(%rdi)'}, {'instIndex': 15, 'instruction': 'movl\t%r13d, %edi'}, {'instIndex': 16, 'instruction': 'movslq\t%r13d, %r13'}, {'instIndex': 17, 'instruction': 'call\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 18, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movl\t%r12d, %ecx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax,%r13,8), %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x98(%rbp)'}, {'instIndex': 22, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 23, 'instruction': 'sall\t%cl, %eax'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 67, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 72, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 78, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 79, 'instruction': 'jne\t.L47'}, {'instIndex': 80, 'instruction': 'cmpl\t$5, %r12d'}, {'instIndex': 81, 'instruction': 'jne\t.L47'}, {'instIndex': 82, 'instruction': 'leaq\tdct0x20_func(%rip), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0xa8(%rbp)'}, {'instIndex': 84, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 85, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 86, 'instruction': 'movq\t%rax, 0xb0(%rbp)'}, {'instIndex': 87, 'instruction': 'call\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 123 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 123 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 92 nodes and 123 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 123 instructions in binary file.
[4194304, 4194371]
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
The execution time of patched subCFG information extraction via angr: 0:00:00.931211
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "add" for 0x40003b>, <DisassemblerInsn "call" for 0x40003e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400043>, <DisassemblerInsn "add" for 0x400047>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "cdq" for 0x40006d>, <DisassemblerInsn "idiv" for 0x40006e>, <DisassemblerInsn "movsxd" for 0x400070>, <DisassemblerInsn "shl" for 0x400073>, <DisassemblerInsn "call" for 0x400077>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x40007f>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "sete" for 0x40009d>, <DisassemblerInsn "and" for 0x4000a0>, <DisassemblerInsn "movzx" for 0x4000a2>, <DisassemblerInsn "call" for 0x4000a5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "sub" for 0x40015e>, <DisassemblerInsn "ja" for 0x400162>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "lea" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "jmp" for 0x4001a1>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "lea" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "lea" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "jmp" for 0x4001b6>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "lea" for 0x40017e>, <DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "jmp" for 0x40018c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "lea" for 0x400169>, <DisassemblerInsn "movsxd" for 0x400170>, <DisassemblerInsn "add" for 0x400174>, <DisassemblerInsn "jmp" for 0x400177>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "jne" for 0x4001d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x4001cb>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2c6]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9eb]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7dc]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x551]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9b]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2540]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x4001ec>']}], 'cfg_edge_info': [(11, 16), (15, 12), (18, 20), (12, 19), (18, 19), (16, 12), (14, 19), (17, 12), (12, 18), (8, 12), (14, 18), (11, 14), (19, 21), (20, 21)]}]}
{'ff_dct_init': [4194723, 4194744, 4194763, 4194770, 4194777, 4194796]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/no/dct.o---before
The extraction of function: ff_dct_init
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 29 nodes and 44 edges in CFGEmulated.
It has 23 nodes and 32 edges in CDG.
It has 533 nodes and 612 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
{4194304, 4194825, 4194702, 4194833, 4194591, 4194723, 4194474, 4194479, 4194744, 4194496, 4194371, 4194763, 4194509, 4194770, 4194645, 4194517, 4194777, 4194660, 4194796, 4194547, 4194681, 4194428}
[2, 18, 16, 12, 10, 20, 28, 0, 17, 22, 19, 4, 21, 7, 25, 6, 23, 14, 11, 24, 8, 15]
The execution time of patched slicing information extraction via angr: 0:00:02.483030
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400043>, <DisassemblerInsn "add" for 0x400047>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "cdq" for 0x40006d>, <DisassemblerInsn "idiv" for 0x40006e>, <DisassemblerInsn "movsxd" for 0x400070>, <DisassemblerInsn "shl" for 0x400073>, <DisassemblerInsn "call" for 0x400077>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "lea" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "jmp" for 0x4000c8>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "shl" for 0x4000f7>, <DisassemblerInsn "cvtsi2sd" for 0x4000f9>, <DisassemblerInsn "movsd" for 0x4000fd>, <DisassemblerInsn "divsd" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "shl" for 0x40010d>, <DisassemblerInsn "add" for 0x40010f>, <DisassemblerInsn "cvtsi2sd" for 0x400112>, <DisassemblerInsn "mulsd" for 0x400116>, <DisassemblerInsn "call" for 0x40011a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "jmp" for 0x4001b6>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "add" for 0x40003b>, <DisassemblerInsn "call" for 0x40003e>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40011f>, <DisassemblerInsn "movsd" for 0x400122>, <DisassemblerInsn "divsd" for 0x40012a>, <DisassemblerInsn "cvtsd2ss" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "movsxd" for 0x40013e>, <DisassemblerInsn "movss" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "add" for 0x40014c>, <DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "jmp" for 0x400153>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "jne" for 0x4001d7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "lea" for 0x40017e>, <DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "jmp" for 0x40018c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x40007f>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "sete" for 0x40009d>, <DisassemblerInsn "and" for 0x4000a0>, <DisassemblerInsn "movzx" for 0x4000a2>, <DisassemblerInsn "call" for 0x4000a5>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "lea" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "jmp" for 0x4001a1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "call" for 0x4000bb>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "lea" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000aa>, <DisassemblerInsn "jge" for 0x4000ad>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "lea" for 0x400169>, <DisassemblerInsn "movsxd" for 0x400170>, <DisassemblerInsn "add" for 0x400174>, <DisassemblerInsn "jmp" for 0x400177>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "sub" for 0x40015e>, <DisassemblerInsn "ja" for 0x400162>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "cdq" for 0x4000e6>, <DisassemblerInsn "idiv" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "cmp" for 0x4000ef>, <DisassemblerInsn "jge" for 0x4000f1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "cdq" for 0x4000e6>, <DisassemblerInsn "idiv" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "cmp" for 0x4000ef>, <DisassemblerInsn "jge" for 0x4000f1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7dc]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x400211>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<movsd~~xmm0, qword ptr [rip + 0x259b]>', '<divsd~~xmm0, xmm1>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<shl~~eax, 1>', '<add~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<call~~0x500030>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x551]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500000>']}, {'block_Idx': 17, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x256e]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0xa0]>', '<movsxd~~rcx, dword ptr [rsp + 0x18]>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x4000d5>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x4001ec>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9b]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2c6]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0xa0]>', '<call~~0x500028>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9eb]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000cd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2540]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x4001cb>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x400155>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x400155>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}], 'cfg_edge_info': [(18, 23), (12, 16), (4, 6), (22, 23), (0, 2), (23, 28), (14, 19), (17, 24), (19, 15), (11, 14), (24, 11), (25, 28), (6, 8), (15, 23), (21, 15), (18, 22), (14, 18), (22, 25), (14, 21), (8, 11), (2, 4), (10, 17), (24, 10), (6, 7), (7, 12), (15, 22), (20, 15), (14, 20), (8, 10), (11, 15)], 'cdg_edge_info': [(6, 12), (18, 23), (22, 23), (14, 19), (11, 14), (8, 24), (24, 17), (6, 11), (6, 8), (15, 23), (18, 22), (14, 18), (22, 25), (14, 15), (14, 21), (8, 17), (24, 10), (6, 7), (6, 16), (15, 22), (6, 28), (14, 20), (8, 10), (11, 15), (24, 24)], 'ddg_edge_info': [(4, 6), (4, 21), (12, 28), (0, 2), (4, 18), (17, 24), (11, 14), (10, 18), (0, 11), (0, 17), (8, 24), (10, 21), (0, 20), (10, 24), (25, 28), (7, 28), (4, 8), (4, 14), (4, 11), (4, 17), (4, 20), (0, 7), (2, 4), (10, 11), (0, 4), (0, 10), (8, 17), (10, 14), (0, 19), (10, 17), (0, 22), (10, 20), (0, 25), (7, 12), (4, 7), (4, 10), (4, 19), (17, 10), (4, 22), (8, 10), (4, 25), (0, 21), (10, 19), (10, 25), (0, 18), (0, 24), (10, 22)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 123 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 123 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 92 nodes and 123 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 123 instructions in binary file.
[4194304, 4194371]
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
The execution time of patched subCFG information extraction via angr: 0:00:00.915788
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "add" for 0x40003b>, <DisassemblerInsn "call" for 0x40003e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400043>, <DisassemblerInsn "add" for 0x400047>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "cdq" for 0x40006d>, <DisassemblerInsn "idiv" for 0x40006e>, <DisassemblerInsn "movsxd" for 0x400070>, <DisassemblerInsn "shl" for 0x400073>, <DisassemblerInsn "call" for 0x400077>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x40007f>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "sete" for 0x40009d>, <DisassemblerInsn "and" for 0x4000a0>, <DisassemblerInsn "movzx" for 0x4000a2>, <DisassemblerInsn "call" for 0x4000a5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "sub" for 0x40015e>, <DisassemblerInsn "ja" for 0x400162>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "lea" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "jmp" for 0x4001a1>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "lea" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "lea" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "jmp" for 0x4001b6>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "lea" for 0x40017e>, <DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "jmp" for 0x40018c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "lea" for 0x400169>, <DisassemblerInsn "movsxd" for 0x400170>, <DisassemblerInsn "add" for 0x400174>, <DisassemblerInsn "jmp" for 0x400177>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "jne" for 0x4001d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x4001cb>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2c6]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9eb]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7dc]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x551]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 12, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9b]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2540]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x4001ec>']}], 'cfg_edge_info': [(11, 16), (15, 12), (18, 20), (12, 19), (18, 19), (16, 12), (14, 19), (17, 12), (12, 18), (8, 12), (14, 18), (11, 14), (19, 21), (20, 21)]}]}
{'ff_dct_init': [4194723, 4194744, 4194763, 4194770, 4194777, 4194796]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O0/dct.o---before
The extraction of function: ff_dct_init
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 29 nodes and 44 edges in CFGEmulated.
It has 23 nodes and 32 edges in CDG.
It has 533 nodes and 612 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194723, 4194744, 4194763, 4194770, 4194777, 4194796]
{4194304, 4194825, 4194702, 4194833, 4194591, 4194723, 4194474, 4194479, 4194744, 4194496, 4194371, 4194763, 4194509, 4194770, 4194645, 4194517, 4194777, 4194660, 4194796, 4194547, 4194681, 4194428}
[2, 18, 16, 12, 10, 20, 28, 0, 17, 22, 19, 4, 21, 7, 25, 6, 23, 14, 11, 24, 8, 15]
The execution time of patched slicing information extraction via angr: 0:00:02.494781
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400043>, <DisassemblerInsn "add" for 0x400047>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "cdq" for 0x40006d>, <DisassemblerInsn "idiv" for 0x40006e>, <DisassemblerInsn "movsxd" for 0x400070>, <DisassemblerInsn "shl" for 0x400073>, <DisassemblerInsn "call" for 0x400077>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "lea" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "jmp" for 0x4000c8>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "shl" for 0x4000f7>, <DisassemblerInsn "cvtsi2sd" for 0x4000f9>, <DisassemblerInsn "movsd" for 0x4000fd>, <DisassemblerInsn "divsd" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "shl" for 0x40010d>, <DisassemblerInsn "add" for 0x40010f>, <DisassemblerInsn "cvtsi2sd" for 0x400112>, <DisassemblerInsn "mulsd" for 0x400116>, <DisassemblerInsn "call" for 0x40011a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "jmp" for 0x4001b6>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "add" for 0x400215>, <DisassemblerInsn "ret" for 0x400219>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000d>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "shl" for 0x40001a>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "add" for 0x40003b>, <DisassemblerInsn "call" for 0x40003e>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40011f>, <DisassemblerInsn "movsd" for 0x400122>, <DisassemblerInsn "divsd" for 0x40012a>, <DisassemblerInsn "cvtsd2ss" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "movsxd" for 0x40013e>, <DisassemblerInsn "movss" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "add" for 0x40014c>, <DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "jmp" for 0x400153>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "jne" for 0x4001d7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "lea" for 0x40017e>, <DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "jmp" for 0x40018c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x40007f>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "sete" for 0x40009d>, <DisassemblerInsn "and" for 0x4000a0>, <DisassemblerInsn "movzx" for 0x4000a2>, <DisassemblerInsn "call" for 0x4000a5>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "lea" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "jmp" for 0x4001a1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "call" for 0x4000bb>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "lea" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000aa>, <DisassemblerInsn "jge" for 0x4000ad>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "lea" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "call" for 0x400204>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "lea" for 0x400169>, <DisassemblerInsn "movsxd" for 0x400170>, <DisassemblerInsn "add" for 0x400174>, <DisassemblerInsn "jmp" for 0x400177>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "sub" for 0x40015e>, <DisassemblerInsn "ja" for 0x400162>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "cdq" for 0x4000e6>, <DisassemblerInsn "idiv" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "cmp" for 0x4000ef>, <DisassemblerInsn "jge" for 0x4000f1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "cdq" for 0x4000e6>, <DisassemblerInsn "idiv" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "cmp" for 0x4000ef>, <DisassemblerInsn "jge" for 0x4000f1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "jne" for 0x4001d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, 2>', '<movsxd~~rcx, eax>', '<mov~~rax, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x7dc]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x400211>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<movsd~~xmm0, qword ptr [rip + 0x259b]>', '<divsd~~xmm0, xmm1>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<shl~~eax, 1>', '<add~~eax, 1>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<call~~0x500030>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x551]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~dword ptr [rsp + 0x24], esi>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<add~~edi, 2>', '<call~~0x500000>']}, {'block_Idx': 17, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x256e]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0xa0]>', '<movsxd~~rcx, dword ptr [rsp + 0x18]>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x4000d5>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 5>', '<jne~~0x4001ec>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9b]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~esi, dword ptr [rsp + 0x24]>', '<cmp~~dword ptr [rsp + 0x20], 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x2c6]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x4001cb>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0xa0]>', '<call~~0x500028>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0x9eb]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000cd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<lea~~rcx, [rip + 0xa08]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x500038>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rcx, [rip + 0x2540]>', '<movsxd~~rax, dword ptr [rcx + rax*4]>', '<add~~rax, rcx>', '<jmp~~rax>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<sub~~rax, 3>', '<ja~~0x4001cb>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x400155>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jge~~0x400155>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x20], 0>', '<jne~~0x4001ec>']}], 'cfg_edge_info': [(18, 23), (12, 16), (4, 6), (22, 23), (0, 2), (23, 28), (14, 19), (17, 24), (19, 15), (11, 14), (24, 11), (25, 28), (6, 8), (15, 23), (21, 15), (18, 22), (14, 18), (22, 25), (14, 21), (8, 11), (2, 4), (10, 17), (24, 10), (6, 7), (7, 12), (15, 22), (20, 15), (14, 20), (8, 10), (11, 15)], 'cdg_edge_info': [(6, 12), (18, 23), (22, 23), (14, 19), (11, 14), (8, 24), (24, 17), (6, 11), (6, 8), (15, 23), (18, 22), (14, 18), (22, 25), (14, 15), (14, 21), (8, 17), (24, 10), (6, 7), (6, 16), (15, 22), (6, 28), (14, 20), (8, 10), (11, 15), (24, 24)], 'ddg_edge_info': [(4, 6), (4, 21), (12, 28), (0, 2), (4, 18), (17, 24), (11, 14), (10, 18), (0, 11), (0, 17), (8, 24), (10, 21), (0, 20), (10, 24), (25, 28), (7, 28), (4, 8), (4, 14), (4, 11), (4, 17), (4, 20), (0, 7), (2, 4), (10, 11), (0, 4), (0, 10), (8, 17), (10, 14), (0, 19), (10, 17), (0, 22), (10, 20), (0, 25), (7, 12), (4, 7), (4, 10), (4, 19), (17, 10), (4, 22), (8, 10), (4, 25), (0, 21), (10, 19), (10, 25), (0, 18), (0, 24), (10, 22)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 4, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 5, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 6, 'instruction': 'shll\t%cl, %eax'}, {'instIndex': 7, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t0x24(%rsp), %ecx'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, (%rax)'}, {'instIndex': 11, 'instruction': 'movl\t0x20(%rsp), %ecx'}, {'instIndex': 12, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movl\t%ecx, 4(%rax)'}, {'instIndex': 14, 'instruction': 'movl\t0x24(%rsp), %edi'}, {'instIndex': 15, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 16, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 17, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 18, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 19, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rax'}, {'instIndex': 21, 'instruction': 'movq\t(%rax,%rcx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0x98(%rax)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 100, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 101, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rcx'}, {'instIndex': 102, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 103, 'instruction': 'jmp\t.LBB0_11'}, {'instIndex': 104, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 105, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rcx'}, {'instIndex': 106, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 107, 'instruction': 'cmpl\t$0, 0x20(%rsp)'}, {'instIndex': 108, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 109, 'instruction': 'cmpl\t$5, 0x24(%rsp)'}, {'instIndex': 110, 'instruction': 'jne\t.LBB0_14'}, {'instIndex': 111, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 112, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 113, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xb0(%rax)'}, {'instIndex': 117, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 118, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 126 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 106, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 107, 'instruction': 'sete\t%cl'}, {'instIndex': 108, 'instruction': 'cmpl\t$5, %eax'}, {'instIndex': 109, 'instruction': 'sete\t%al'}, {'instIndex': 110, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 111, 'instruction': 'testb\t$1, %al'}, {'instIndex': 112, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 113, 'instruction': 'jmp\t.LBB0_9'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 119, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 120, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 126 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 106, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 107, 'instruction': 'sete\t%cl'}, {'instIndex': 108, 'instruction': 'cmpl\t$5, %eax'}, {'instIndex': 109, 'instruction': 'sete\t%al'}, {'instIndex': 110, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 111, 'instruction': 'testb\t$1, %al'}, {'instIndex': 112, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 113, 'instruction': 'jmp\t.LBB0_9'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 119, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 120, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 79 nodes and 114 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 126 instructions in binary file.
[4194304, 4194365]
[4194716, 4194746, 4194772, 4194774, 4194793]
The execution time of patched subCFG information extraction via angr: 0:00:00.557453
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000b>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001b>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "shl" for 0x400026>, <DisassemblerInsn "mov" for 0x400028>, <DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "add" for 0x400031>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "cdq" for 0x400064>, <DisassemblerInsn "idiv" for 0x400065>, <DisassemblerInsn "mov" for 0x400067>, <DisassemblerInsn "movsxd" for 0x40006b>, <DisassemblerInsn "shl" for 0x40006e>, <DisassemblerInsn "call" for 0x400072>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "add" for 0x400087>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400093>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "add" for 0x4000a2>, <DisassemblerInsn "cmp" for 0x4000a6>, <DisassemblerInsn "sete" for 0x4000a9>, <DisassemblerInsn "and" for 0x4000ac>, <DisassemblerInsn "movzx" for 0x4000ae>, <DisassemblerInsn "call" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~dword ptr [rsp + 0x58], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x58]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~dword ptr [rsp + 0x74], edi>', '<mov~~dword ptr [rsp + 0x70], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x60], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "cmp" for 0x4001c2>, <DisassemblerInsn "sete" for 0x4001c5>, <DisassemblerInsn "cmp" for 0x4001c8>, <DisassemblerInsn "sete" for 0x4001cb>, <DisassemblerInsn "and" for 0x4001ce>, <DisassemblerInsn "test" for 0x4001d0>, <DisassemblerInsn "jne" for 0x4001d2>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "lea" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "call" for 0x4001fc>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400193>, <DisassemblerInsn "cmp" for 0x400197>, <DisassemblerInsn "jae" for 0x40019a>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400201>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "add" for 0x40020b>, <DisassemblerInsn "ret" for 0x400212>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "movsxd" for 0x4001a5>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "cmp" for 0x4001c2>, <DisassemblerInsn "sete" for 0x4001c5>, <DisassemblerInsn "cmp" for 0x4001c8>, <DisassemblerInsn "sete" for 0x4001cb>, <DisassemblerInsn "and" for 0x4001ce>, <DisassemblerInsn "test" for 0x4001d0>, <DisassemblerInsn "jne" for 0x4001d2>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d6>, <DisassemblerInsn "lea" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "lea" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "call" for 0x4001fc>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<cmp~~eax, 5>', '<sete~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4001d6>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<lea~~rax, [rip + 0xa7b]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<cmp~~eax, 4>', '<jae~~0x4001ba>']}, {'block_Idx': 17, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<movsxd~~rdx, ecx>', '<lea~~rcx, [rip + 0x1969]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<cmp~~eax, 5>', '<sete~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4001d6>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<lea~~rcx, [rip + 0xa7e]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<lea~~rax, [rip + 0xa7b]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4001e9>']}], 'cfg_edge_info': [(10, 14), (14, 17), (11, 13), (7, 10), (13, 16), (10, 13), (7, 11), (11, 14), (16, 17)]}]}
{'ff_dct_init': [4194716, 4194746, 4194772, 4194774, 4194793]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O1/dct.o---before
The extraction of function: ff_dct_init
[4194716, 4194746, 4194772, 4194774, 4194793]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 25 nodes and 36 edges in CFGEmulated.
It has 19 nodes and 26 edges in CDG.
It has 506 nodes and 575 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194716, 4194746, 4194772, 4194774, 4194793]
{4194304, 4194817, 4194595, 4194565, 4194823, 4194504, 4194793, 4194707, 4194772, 4194581, 4194774, 4194486, 4194423, 4194643, 4194746, 4194491, 4194716, 4194365}
[11, 15, 20, 18, 22, 17, 2, 0, 16, 8, 10, 24, 4, 13, 14, 7, 6, 12]
The execution time of patched slicing information extraction via angr: 0:00:01.359925
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "mov" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "shl" for 0x4000d5>, <DisassemblerInsn "cvtsi2sd" for 0x4000d7>, <DisassemblerInsn "movsd" for 0x4000db>, <DisassemblerInsn "divsd" for 0x4000e3>, <DisassemblerInsn "movsd" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "xor" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "jmp" for 0x400103>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "movsd" for 0x400128>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "shl" for 0x400133>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "or" for 0x400139>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "cvtsi2sd" for 0x400140>, <DisassemblerInsn "mulsd" for 0x400144>, <DisassemblerInsn "movsd" for 0x400148>, <DisassemblerInsn "call" for 0x40014e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "lea" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "call" for 0x4001fc>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d6>, <DisassemblerInsn "lea" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "lea" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "call" for 0x4001fc>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "movaps" for 0x400162>, <DisassemblerInsn "movsd" for 0x400165>, <DisassemblerInsn "divsd" for 0x40016d>, <DisassemblerInsn "movsd" for 0x400171>, <DisassemblerInsn "cvtsd2ss" for 0x400177>, <DisassemblerInsn "movss" for 0x40017b>, <DisassemblerInsn "add" for 0x400180>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "cmp" for 0x400189>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "jne" for 0x400191>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "movsxd" for 0x40004a>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "cdq" for 0x400064>, <DisassemblerInsn "idiv" for 0x400065>, <DisassemblerInsn "mov" for 0x400067>, <DisassemblerInsn "movsxd" for 0x40006b>, <DisassemblerInsn "shl" for 0x40006e>, <DisassemblerInsn "call" for 0x400072>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000b>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001b>, <DisassemblerInsn "mov" for 0x40001f>, <DisassemblerInsn "mov" for 0x400024>, <DisassemblerInsn "shl" for 0x400026>, <DisassemblerInsn "mov" for 0x400028>, <DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "add" for 0x400031>, <DisassemblerInsn "mov" for 0x400034>, <DisassemblerInsn "call" for 0x400038>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "add" for 0x40020b>, <DisassemblerInsn "ret" for 0x400212>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "cmp" for 0x4000bf>, <DisassemblerInsn "jle" for 0x4000c2>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400193>, <DisassemblerInsn "cmp" for 0x400197>, <DisassemblerInsn "jae" for 0x40019a>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400201>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "add" for 0x40020b>, <DisassemblerInsn "ret" for 0x400212>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "add" for 0x400087>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400093>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "add" for 0x4000a2>, <DisassemblerInsn "cmp" for 0x4000a6>, <DisassemblerInsn "sete" for 0x4000a9>, <DisassemblerInsn "and" for 0x4000ac>, <DisassemblerInsn "movzx" for 0x4000ae>, <DisassemblerInsn "call" for 0x4000b1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "movsxd" for 0x4001a5>, <DisassemblerInsn "lea" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "cmp" for 0x4001c2>, <DisassemblerInsn "sete" for 0x4001c5>, <DisassemblerInsn "cmp" for 0x4001c8>, <DisassemblerInsn "sete" for 0x4001cb>, <DisassemblerInsn "and" for 0x4001ce>, <DisassemblerInsn "test" for 0x4001d0>, <DisassemblerInsn "jne" for 0x4001d2>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "cmp" for 0x4001c2>, <DisassemblerInsn "sete" for 0x4001c5>, <DisassemblerInsn "cmp" for 0x4001c8>, <DisassemblerInsn "sete" for 0x4001cb>, <DisassemblerInsn "and" for 0x4001ce>, <DisassemblerInsn "test" for 0x4001d0>, <DisassemblerInsn "jne" for 0x4001d2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "call" for 0x400110>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000b6>, <DisassemblerInsn "jl" for 0x4000b9>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "jmp" for 0x40011e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x60]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x194d]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x38], xmm0>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rax>', '<jmp~~0x400123>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<movsd~~xmm0, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 0xc], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x10], xmm0>', '<call~~0x500030>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<lea~~rax, [rip + 0xa7b]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<lea~~rcx, [rip + 0xa7e]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<lea~~rax, [rip + 0xa7b]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x18cb]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x20], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x50], rax>', '<jne~~0x400123>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x4001e9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfffbc]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~dword ptr [rsp + 0x58], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x58]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~dword ptr [rsp + 0x74], edi>', '<mov~~dword ptr [rsp + 0x70], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x60], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<call~~0x500000>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<cmp~~eax, 1>', '<jle~~0x400193>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<cmp~~eax, 4>', '<jae~~0x4001ba>']}, {'block_Idx': 24, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<movsxd~~rdx, ecx>', '<lea~~rcx, [rip + 0x1969]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<cmp~~eax, 5>', '<sete~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4001d6>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<cmp~~eax, 5>', '<sete~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4001d6>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x400105>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x400207>']}], 'cfg_edge_info': [(12, 16), (4, 6), (0, 2), (13, 17), (6, 8), (22, 10), (14, 18), (8, 11), (2, 4), (17, 20), (10, 14), (6, 7), (7, 12), (15, 22), (18, 24), (20, 24), (22, 15), (14, 17), (8, 10), (10, 13), (11, 15), (13, 18)], 'cdg_edge_info': [(6, 12), (6, 24), (8, 15), (13, 17), (13, 20), (6, 8), (14, 18), (22, 22), (8, 11), (10, 14), (6, 7), (6, 10), (6, 16), (22, 15), (14, 17), (14, 20), (10, 13), (8, 22), (13, 18)], 'ddg_edge_info': [(18, 20), (4, 6), (4, 15), (0, 2), (4, 18), (0, 8), (0, 14), (2, 11), (0, 11), (13, 14), (0, 20), (15, 14), (15, 20), (4, 8), (4, 14), (4, 11), (12, 24), (4, 20), (2, 4), (0, 4), (0, 10), (0, 13), (15, 13), (11, 22), (15, 10), (7, 12), (15, 22), (7, 24), (4, 7), (4, 10), (20, 24), (22, 15), (4, 13), (2, 6), (11, 15), (0, 18), (15, 18)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 106, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 107, 'instruction': 'sete\t%cl'}, {'instIndex': 108, 'instruction': 'cmpl\t$5, %eax'}, {'instIndex': 109, 'instruction': 'sete\t%al'}, {'instIndex': 110, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 111, 'instruction': 'testb\t$1, %al'}, {'instIndex': 112, 'instruction': 'jne\t.LBB0_8'}, {'instIndex': 113, 'instruction': 'jmp\t.LBB0_9'}, {'instIndex': 115, 'instruction': 'leaq\tdct0x20_func(%rip), %rcx'}, {'instIndex': 116, 'instruction': 'movq\t%rcx, 0xa8(%rax)'}, {'instIndex': 118, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 119, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 120, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 218 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 218 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 91 nodes and 135 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 218 instructions in binary file.
[4194304, 4194386]
[4195344, 4195357, 4195370, 4195415, 4195434]
The execution time of patched subCFG information extraction via angr: 0:00:00.772121
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~dword ptr [rsp + 0x198], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x198]>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<mov~~dword ptr [rsp + 0x1b4], edi>', '<mov~~dword ptr [rsp + 0x1b0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x19c], edi>', '<call~~0x500000>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "jmp" for 0x40041b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f2>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "movsxd" for 0x400403>, <DisassemblerInsn "add" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "jmp" for 0x40040e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "lea" for 0x400439>, <DisassemblerInsn "lea" for 0x400440>, <DisassemblerInsn "cmp" for 0x400447>, <DisassemblerInsn "cmove" for 0x40044a>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "jmp" for 0x400455>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "lea" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e1>, <DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "sub" for 0x4003ed>, <DisassemblerInsn "ja" for 0x4003f0>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40041d>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "jmp" for 0x400428>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400485>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<lea~~rax, [rip + 0x569]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x18bd]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<lea~~rcx, [rip + 0x280]>', '<lea~~rdx, [rip + 0xa59]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40046a>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1b0]>', '<lea~~rcx, [rip + 0xbf]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40046a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 16, 'blockInsts': ['<lea~~rax, [rip + 0x7fc]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 18, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}], 'cfg_edge_info': [(10, 15), (15, 11), (14, 17), (10, 14), (10, 17), (10, 16), (11, 18), (17, 18), (7, 11), (16, 17)]}]}
{'ff_dct_init': [4195344, 4195357, 4195370, 4195415, 4195434]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O2/dct.o---before
The extraction of function: ff_dct_init
[4195344, 4195357, 4195370, 4195415, 4195434]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 63 nodes and 82 edges in CFGEmulated.
It has 57 nodes and 96 edges in CDG.
It has 866 nodes and 1110 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195344, 4195357, 4195370, 4195415, 4195434]
{4194304, 4194945, 4194818, 4195461, 4194693, 4195078, 4194953, 4195467, 4194827, 4195084, 4195213, 4195344, 4194832, 4194456, 4194840, 4195357, 4194720, 4194848, 4194728, 4195370, 4194988, 4195117, 4194860, 4194744, 4194873, 4195132, 4194752, 4194884, 4194760, 4195148, 4194896, 4194386, 4195283, 4194645, 4194901, 4195415, 4194777, 4195162, 4194912, 4194531, 4194920, 4194793, 4195434, 4194540, 4195314, 4195059, 4194932, 4194937, 4194556, 4194685}
[33, 61, 23, 48, 54, 10, 42, 8, 49, 19, 62, 7, 38, 56, 31, 11, 30, 34, 0, 57, 60, 20, 26, 2, 44, 12, 46, 51, 43, 53, 24, 29, 35, 17, 13, 36, 32, 41, 37, 47, 39, 58, 28, 14, 15, 21, 52, 6, 4, 16, 59, 18]
The execution time of patched slicing information extraction via angr: 0:00:03.088677
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "movsd" for 0x40035f>, <DisassemblerInsn "mov" for 0x400368>, <DisassemblerInsn "shl" for 0x40036d>, <DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "or" for 0x400373>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cvtsi2sd" for 0x40037a>, <DisassemblerInsn "mulsd" for 0x40037e>, <DisassemblerInsn "movsd" for 0x400382>, <DisassemblerInsn "call" for 0x400388>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "lea" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e1>, <DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "sub" for 0x4003ed>, <DisassemblerInsn "ja" for 0x4003f0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400218>, <DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "cmp" for 0x4000f3>, <DisassemblerInsn "jle" for 0x4000f6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "lea" for 0x400439>, <DisassemblerInsn "lea" for 0x400440>, <DisassemblerInsn "cmp" for 0x400447>, <DisassemblerInsn "cmove" for 0x40044a>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "jmp" for 0x400455>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "cmp" for 0x40031c>, <DisassemblerInsn "mov" for 0x40031f>, <DisassemblerInsn "je" for 0x400327>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400344>, <DisassemblerInsn "call" for 0x400347>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400279>, <DisassemblerInsn "movaps" for 0x400281>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "movaps" for 0x4001b0>, <DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400103>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "shl" for 0x400112>, <DisassemblerInsn "cvtsi2sd" for 0x400114>, <DisassemblerInsn "movsd" for 0x400118>, <DisassemblerInsn "divsd" for 0x400120>, <DisassemblerInsn "movsd" for 0x400124>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "mov" for 0x400138>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "xor" for 0x400142>, <DisassemblerInsn "cmp" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "jb" for 0x40014f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400281>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40041d>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "jmp" for 0x400428>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400485>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034c>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "jmp" for 0x400355>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400231>, <DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movaps" for 0x40023c>, <DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400255>, <DisassemblerInsn "movaps" for 0x400258>, <DisassemblerInsn "movaps" for 0x400260>, <DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40017d>, <DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400395>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "movaps" for 0x4003a2>, <DisassemblerInsn "movsd" for 0x4003a5>, <DisassemblerInsn "divsd" for 0x4003ad>, <DisassemblerInsn "movsd" for 0x4003b1>, <DisassemblerInsn "cvtsd2ss" for 0x4003b7>, <DisassemblerInsn "movss" for 0x4003bb>, <DisassemblerInsn "add" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "cmp" for 0x4003c9>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "jne" for 0x4003d1>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f2>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "movsxd" for 0x400403>, <DisassemblerInsn "add" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "jmp" for 0x40040e>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "movaps" for 0x4001b0>, <DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400210>, <DisassemblerInsn "movaps" for 0x400213>, <DisassemblerInsn "movaps" for 0x400218>, <DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movaps" for 0x40023c>, <DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "jmp" for 0x40033a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400260>, <DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "jl" for 0x4000e6>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x400155>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "and" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "unpcklpd" for 0x400171>, <DisassemblerInsn "movaps" for 0x400175>, <DisassemblerInsn "movaps" for 0x40017d>, <DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "jmp" for 0x40041b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 61, 'blockInsts': ['<jne~~0x4001a0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<movsd~~xmm0, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x20], xmm0>', '<call~~0x500028>']}, {'block_Idx': 48, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 54, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1b0]>', '<lea~~rcx, [rip + 0xbf]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40046a>']}, {'block_Idx': 42, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x90], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a0]>', '<cmp~~eax, 1>', '<jle~~0x4003d3>']}, {'block_Idx': 49, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<lea~~rcx, [rip + 0x280]>', '<lea~~rdx, [rip + 0xa59]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40046a>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<je~~0x4003d3>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 56, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rsp + 0xc0]>', '<movaps~~xmm3, xmmword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 31, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x140]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1a0]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1b50]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x178], xmm0>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x180], rax>', '<mov~~eax, ecx>', '<mov~~qword ptr [rsp + 0x188], rax>', '<xor~~eax, eax>', '<cmp~~ecx, 4>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jb~~0x40032d>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001a0>']}, {'block_Idx': 34, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~dword ptr [rsp + 0x198], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x198]>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<mov~~dword ptr [rsp + 0x1b4], edi>', '<mov~~dword ptr [rsp + 0x1b0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x19c], edi>', '<call~~0x500000>']}, {'block_Idx': 57, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rax, [rip + 0x7fc]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 26, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 44, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40048b>']}, {'block_Idx': 46, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x90]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 51, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 43, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 53, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 24, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x140], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x18cb]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x30], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x40035a>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x18bd]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 36, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x140]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 41, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x70]>', '<movaps~~xmmword ptr [rsp + 0x90], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 37, 'blockInsts': ['<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 47, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 28, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jmp~~0x40035a>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 52, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40033c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<movsd~~xmm0, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<and~~eax, 0xfffffffc>', '<mov~~qword ptr [rsp + 0x128], rax>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmmword ptr [rsp + 0x140], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 59, 'blockInsts': ['<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 18, 'blockInsts': ['<lea~~rax, [rip + 0x569]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}], 'cfg_edge_info': [(58, 59), (29, 23), (35, 36), (4, 6), (31, 32), (0, 2), (28, 30), (36, 37), (13, 20), (29, 10), (62, 10), (41, 42), (32, 33), (15, 23), (6, 8), (59, 60), (60, 61), (51, 52), (46, 47), (39, 41), (8, 11), (2, 4), (19, 14), (11, 16), (10, 14), (37, 38), (53, 54), (13, 19), (6, 7), (56, 57), (24, 28), (47, 48), (7, 12), (42, 43), (18, 21), (62, 15), (43, 44), (33, 34), (16, 24), (20, 21), (44, 46), (21, 26), (61, 62), (12, 17), (52, 53), (38, 39), (57, 58), (48, 49), (23, 29), (14, 26), (34, 35), (10, 13), (49, 51), (8, 10), (11, 15), (61, 31), (13, 18), (54, 56), (30, 31), (13, 21)], 'cdg_edge_info': [(61, 52), (61, 61), (11, 51), (11, 60), (11, 23), (61, 36), (61, 54), (11, 44), (11, 53), (8, 11), (11, 62), (11, 16), (61, 38), (13, 19), (61, 47), (61, 56), (11, 37), (61, 31), (13, 21), (61, 49), (61, 58), (62, 23), (11, 39), (11, 48), (29, 29), (11, 57), (13, 14), (61, 33), (61, 42), (61, 51), (11, 32), (11, 41), (11, 59), (61, 35), (61, 44), (11, 34), (11, 43), (11, 52), (11, 61), (13, 18), (61, 37), (11, 36), (11, 54), (61, 39), (11, 29), (6, 8), (11, 38), (6, 17), (11, 47), (6, 26), (61, 60), (10, 14), (61, 32), (11, 31), (6, 10), (61, 53), (11, 49), (11, 15), (11, 24), (11, 33), (6, 12), (11, 42), (29, 23), (62, 29), (11, 35), (13, 20), (61, 48), (61, 57), (11, 56), (11, 28), (6, 7), (61, 41), (62, 15), (61, 59), (11, 58), (10, 13), (61, 34), (61, 43)], 'ddg_edge_info': [(47, 53), (7, 26), (54, 13), (16, 38), (16, 47), (54, 31), (39, 42), (49, 53), (2, 11), (11, 23), (37, 42), (4, 39), (59, 48), (15, 23), (41, 42), (34, 58), (44, 47), (54, 15), (54, 33), (11, 62), (39, 44), (2, 4), (4, 23), (57, 59), (11, 16), (37, 35), (4, 32), (7, 12), (47, 48), (4, 59), (16, 24), (18, 21), (16, 33), (57, 34), (44, 49), (23, 20), (54, 35), (23, 29), (4, 34), (60, 32), (13, 21), (59, 52), (54, 10), (54, 19), (23, 13), (38, 41), (0, 2), (54, 37), (31, 35), (4, 18), (4, 36), (53, 59), (54, 58), (37, 51), (54, 21), (51, 52), (4, 11), (39, 41), (38, 43), (37, 23), (4, 20), (49, 52), (59, 29), (16, 58), (4, 38), (59, 38), (28, 32), (54, 60), (33, 37), (58, 60), (54, 23), (20, 21), (4, 13), (12, 26), (49, 54), (16, 51), (4, 31), (16, 60), (2, 6), (36, 38), (54, 62), (56, 59), (23, 10), (4, 6), (23, 19), (4, 15), (4, 24), (16, 53), (4, 33), (16, 62), (0, 11), (59, 42), (37, 48), (11, 29), (54, 18), (57, 35), (24, 32), (41, 48), (60, 61), (4, 8), (23, 21), (0, 4), (4, 35), (54, 39), (53, 58), (28, 38), (54, 57), (47, 51), (37, 59), (32, 38), (43, 47), (4, 10), (21, 26), (4, 19), (4, 28), (54, 32), (39, 43), (59, 37), (37, 34), (28, 31), (11, 15), (54, 59), (37, 52), (41, 43), (29, 23), (58, 59), (51, 53), (35, 36), (44, 48), (16, 41), (4, 21), (54, 34), (16, 59), (0, 8), (48, 57), (36, 37), (37, 36), (60, 31), (4, 60), (59, 60), (23, 18), (43, 51), (16, 43), (59, 23), (54, 36), (31, 34), (0, 10), (0, 19), (37, 38), (37, 47), (32, 35), (62, 15), (4, 7), (52, 56), (43, 53), (4, 16), (54, 20), (35, 58), (11, 58), (54, 38), (10, 13), (49, 51), (0, 21), (54, 56), (4, 37)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 218 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 218 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 91 nodes and 135 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 218 instructions in binary file.
[4194304, 4194386]
[4195344, 4195357, 4195370, 4195415, 4195434]
The execution time of patched subCFG information extraction via angr: 0:00:00.808559
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~dword ptr [rsp + 0x198], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x198]>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<mov~~dword ptr [rsp + 0x1b4], edi>', '<mov~~dword ptr [rsp + 0x1b0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x19c], edi>', '<call~~0x500000>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "jmp" for 0x40041b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f2>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "movsxd" for 0x400403>, <DisassemblerInsn "add" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "jmp" for 0x40040e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "lea" for 0x400439>, <DisassemblerInsn "lea" for 0x400440>, <DisassemblerInsn "cmp" for 0x400447>, <DisassemblerInsn "cmove" for 0x40044a>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "jmp" for 0x400455>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "lea" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e1>, <DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "sub" for 0x4003ed>, <DisassemblerInsn "ja" for 0x4003f0>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40041d>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "jmp" for 0x400428>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400485>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<lea~~rax, [rip + 0x569]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x18bd]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<lea~~rcx, [rip + 0x280]>', '<lea~~rdx, [rip + 0xa59]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40046a>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1b0]>', '<lea~~rcx, [rip + 0xbf]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40046a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 16, 'blockInsts': ['<lea~~rax, [rip + 0x7fc]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 18, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}], 'cfg_edge_info': [(10, 15), (15, 11), (14, 17), (10, 14), (10, 17), (10, 16), (11, 18), (17, 18), (7, 11), (16, 17)]}]}
{'ff_dct_init': [4195344, 4195357, 4195370, 4195415, 4195434]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/O3/dct.o---before
The extraction of function: ff_dct_init
[4195344, 4195357, 4195370, 4195415, 4195434]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 63 nodes and 82 edges in CFGEmulated.
It has 57 nodes and 96 edges in CDG.
It has 866 nodes and 1110 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195344, 4195357, 4195370, 4195415, 4195434]
{4194304, 4194945, 4194818, 4195461, 4194693, 4195078, 4194953, 4195467, 4194827, 4195084, 4195213, 4195344, 4194832, 4194456, 4194840, 4195357, 4194720, 4194848, 4194728, 4195370, 4194988, 4195117, 4194860, 4194744, 4194873, 4195132, 4194752, 4194884, 4194760, 4195148, 4194896, 4194386, 4195283, 4194645, 4194901, 4195415, 4194777, 4195162, 4194912, 4194531, 4194920, 4194793, 4195434, 4194540, 4195314, 4195059, 4194932, 4194937, 4194556, 4194685}
[33, 61, 23, 48, 54, 10, 42, 8, 49, 19, 62, 7, 38, 56, 31, 11, 30, 34, 0, 57, 60, 20, 26, 2, 44, 12, 46, 51, 43, 53, 24, 29, 35, 17, 13, 36, 32, 41, 37, 47, 39, 58, 28, 14, 15, 21, 52, 6, 4, 16, 59, 18]
The execution time of patched slicing information extraction via angr: 0:00:03.116020
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "movsd" for 0x40035f>, <DisassemblerInsn "mov" for 0x400368>, <DisassemblerInsn "shl" for 0x40036d>, <DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "or" for 0x400373>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cvtsi2sd" for 0x40037a>, <DisassemblerInsn "mulsd" for 0x40037e>, <DisassemblerInsn "movsd" for 0x400382>, <DisassemblerInsn "call" for 0x400388>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "lea" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e1>, <DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "sub" for 0x4003ed>, <DisassemblerInsn "ja" for 0x4003f0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400218>, <DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "cmp" for 0x4000f3>, <DisassemblerInsn "jle" for 0x4000f6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400432>, <DisassemblerInsn "lea" for 0x400439>, <DisassemblerInsn "lea" for 0x400440>, <DisassemblerInsn "cmp" for 0x400447>, <DisassemblerInsn "cmove" for 0x40044a>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "jmp" for 0x400455>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "cmp" for 0x40031c>, <DisassemblerInsn "mov" for 0x40031f>, <DisassemblerInsn "je" for 0x400327>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400344>, <DisassemblerInsn "call" for 0x400347>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400279>, <DisassemblerInsn "movaps" for 0x400281>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "movaps" for 0x4001b0>, <DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400103>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "shl" for 0x400112>, <DisassemblerInsn "cvtsi2sd" for 0x400114>, <DisassemblerInsn "movsd" for 0x400118>, <DisassemblerInsn "divsd" for 0x400120>, <DisassemblerInsn "movsd" for 0x400124>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "mov" for 0x400138>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "xor" for 0x400142>, <DisassemblerInsn "cmp" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "jb" for 0x40014f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400281>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40041d>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "jmp" for 0x400428>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400485>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034c>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "jmp" for 0x400355>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400231>, <DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movaps" for 0x40023c>, <DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400255>, <DisassemblerInsn "movaps" for 0x400258>, <DisassemblerInsn "movaps" for 0x400260>, <DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40017d>, <DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400395>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "movaps" for 0x4003a2>, <DisassemblerInsn "movsd" for 0x4003a5>, <DisassemblerInsn "divsd" for 0x4003ad>, <DisassemblerInsn "movsd" for 0x4003b1>, <DisassemblerInsn "cvtsd2ss" for 0x4003b7>, <DisassemblerInsn "movss" for 0x4003bb>, <DisassemblerInsn "add" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "cmp" for 0x4003c9>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "jne" for 0x4003d1>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "add" for 0x40048f>, <DisassemblerInsn "ret" for 0x400496>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f2>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "movsxd" for 0x400403>, <DisassemblerInsn "add" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "jmp" for 0x40040e>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "movaps" for 0x4001b0>, <DisassemblerInsn "movaps" for 0x4001b8>, <DisassemblerInsn "movaps" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "paddd" for 0x4001d0>, <DisassemblerInsn "movaps" for 0x4001d4>, <DisassemblerInsn "movaps" for 0x4001d9>, <DisassemblerInsn "por" for 0x4001e0>, <DisassemblerInsn "movaps" for 0x4001e4>, <DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400210>, <DisassemblerInsn "movaps" for 0x400213>, <DisassemblerInsn "movaps" for 0x400218>, <DisassemblerInsn "unpckhpd" for 0x400220>, <DisassemblerInsn "movaps" for 0x400224>, <DisassemblerInsn "call" for 0x40022c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "cvtdq2pd" for 0x4001e9>, <DisassemblerInsn "pshufd" for 0x4001ed>, <DisassemblerInsn "cvtdq2pd" for 0x4001f2>, <DisassemblerInsn "mulpd" for 0x4001f6>, <DisassemblerInsn "movaps" for 0x4001fa>, <DisassemblerInsn "mulpd" for 0x400202>, <DisassemblerInsn "movaps" for 0x400206>, <DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movaps" for 0x40023c>, <DisassemblerInsn "unpcklpd" for 0x400244>, <DisassemblerInsn "movaps" for 0x400248>, <DisassemblerInsn "call" for 0x400250>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "call" for 0x40020b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "movaps" for 0x4002a1>, <DisassemblerInsn "movaps" for 0x4002a4>, <DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "jmp" for 0x40033a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "lea" for 0x400472>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "call" for 0x400480>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400260>, <DisassemblerInsn "unpckhpd" for 0x400268>, <DisassemblerInsn "movaps" for 0x40026c>, <DisassemblerInsn "call" for 0x400274>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "jl" for 0x4000e6>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x400155>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "and" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "unpcklpd" for 0x400171>, <DisassemblerInsn "movaps" for 0x400175>, <DisassemblerInsn "movaps" for 0x40017d>, <DisassemblerInsn "movaps" for 0x400185>, <DisassemblerInsn "xor" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "movaps" for 0x400196>, <DisassemblerInsn "jmp" for 0x40019e>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x4002ac>, <DisassemblerInsn "movapd" for 0x4002b0>, <DisassemblerInsn "movaps" for 0x4002b8>, <DisassemblerInsn "divpd" for 0x4002bb>, <DisassemblerInsn "divpd" for 0x4002bf>, <DisassemblerInsn "cvtpd2ps" for 0x4002c3>, <DisassemblerInsn "cvtpd2ps" for 0x4002c7>, <DisassemblerInsn "unpcklpd" for 0x4002cb>, <DisassemblerInsn "movupd" for 0x4002cf>, <DisassemblerInsn "add" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002e0>, <DisassemblerInsn "paddd" for 0x4002e7>, <DisassemblerInsn "movaps" for 0x4002eb>, <DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "movaps" for 0x4002fe>, <DisassemblerInsn "jne" for 0x400306>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "jmp" for 0x40041b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 61, 'blockInsts': ['<jne~~0x4001a0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<movsd~~xmm0, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<shl~~eax, 1>', '<mov~~dword ptr [rsp + 0x18], eax>', '<or~~eax, 1>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<cvtsi2sd~~xmm1, eax>', '<mulsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x20], xmm0>', '<call~~0x500028>']}, {'block_Idx': 48, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 54, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1b0]>', '<lea~~rcx, [rip + 0xbf]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40046a>']}, {'block_Idx': 42, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x90], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a0]>', '<cmp~~eax, 1>', '<jle~~0x4003d3>']}, {'block_Idx': 49, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<lea~~rcx, [rip + 0x280]>', '<lea~~rdx, [rip + 0xa59]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40046a>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<je~~0x4003d3>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 56, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rsp + 0xc0]>', '<movaps~~xmm3, xmmword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 31, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x140]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1a0]>', '<shl~~edx, 1>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1b50]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x178], xmm0>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x180], rax>', '<mov~~eax, ecx>', '<mov~~qword ptr [rsp + 0x188], rax>', '<xor~~eax, eax>', '<cmp~~ecx, 4>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jb~~0x40032d>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001a0>']}, {'block_Idx': 34, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~dword ptr [rsp + 0x198], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0x198]>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<mov~~dword ptr [rsp + 0x1b4], edi>', '<mov~~dword ptr [rsp + 0x1b0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x19c], edi>', '<call~~0x500000>']}, {'block_Idx': 57, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rax, [rip + 0x7fc]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}, {'block_Idx': 26, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 44, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40048b>']}, {'block_Idx': 46, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x90]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 51, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 43, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 53, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 24, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x140], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<movaps~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x18cb]>', '<divsd~~xmm0, xmm1>', '<movsd~~qword ptr [rsp + 0x30], xmm0>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rdx + rax*4], xmm0>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x40035a>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x18bd]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 36, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x140]>', '<movaps~~xmm2, xmmword ptr [rsp + 0x130]>', '<movaps~~xmmword ptr [rsp + 0xf0], xmm3>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<paddd~~xmm3, xmm3>', '<movaps~~xmmword ptr [rsp + 0x50], xmm3>', '<movaps~~xmm1, xmmword ptr [rip + 0x1ab0]>', '<por~~xmm3, xmm1>', '<movaps~~xmmword ptr [rsp + 0x60], xmm3>', '<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 41, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x70]>', '<movaps~~xmmword ptr [rsp + 0x90], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x80], xmm0>', '<call~~0x500028>']}, {'block_Idx': 37, 'blockInsts': ['<cvtdq2pd~~xmm1, xmm3>', '<pshufd~~xmm3, xmm3, 0xee>', '<cvtdq2pd~~xmm3, xmm3>', '<mulpd~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm2>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x70], xmm0>', '<call~~0x500028>']}, {'block_Idx': 47, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0xd0], xmm1>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0xf0]>', '<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 28, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jmp~~0x40035a>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<lea~~rax, [rip + 0xa37]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 52, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0xc0], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xb0], xmm0>', '<call~~0x500028>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40033c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<movsd~~xmm0, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<and~~eax, 0xfffffffc>', '<mov~~qword ptr [rsp + 0x128], rax>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x130], xmm0>', '<movaps~~xmmword ptr [rsp + 0x140], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1af4]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jmp~~0x4001a0>']}, {'block_Idx': 59, 'blockInsts': ['<unpcklpd~~xmm4, xmm1>', '<movapd~~xmm1, xmmword ptr [rip + 0x19e8]>', '<movaps~~xmm2, xmm1>', '<divpd~~xmm2, xmm4>', '<divpd~~xmm1, xmm3>', '<cvtpd2ps~~xmm1, xmm1>', '<cvtpd2ps~~xmm2, xmm2>', '<unpcklpd~~xmm1, xmm2>', '<movupd~~xmmword ptr [rdx + rax*4], xmm1>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<movaps~~xmm1, xmmword ptr [rip + 0x19c9]>', '<paddd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x110], xmm0>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<movaps~~xmmword ptr [rsp + 0x160], xmm0>', '<jne~~0x4001a0>']}, {'block_Idx': 18, 'blockInsts': ['<lea~~rax, [rip + 0x569]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x400457>']}], 'cfg_edge_info': [(58, 59), (29, 23), (35, 36), (4, 6), (31, 32), (0, 2), (28, 30), (36, 37), (13, 20), (29, 10), (62, 10), (41, 42), (32, 33), (15, 23), (6, 8), (59, 60), (60, 61), (51, 52), (46, 47), (39, 41), (8, 11), (2, 4), (19, 14), (11, 16), (10, 14), (37, 38), (53, 54), (13, 19), (6, 7), (56, 57), (24, 28), (47, 48), (7, 12), (42, 43), (18, 21), (62, 15), (43, 44), (33, 34), (16, 24), (20, 21), (44, 46), (21, 26), (61, 62), (12, 17), (52, 53), (38, 39), (57, 58), (48, 49), (23, 29), (14, 26), (34, 35), (10, 13), (49, 51), (8, 10), (11, 15), (61, 31), (13, 18), (54, 56), (30, 31), (13, 21)], 'cdg_edge_info': [(61, 52), (61, 61), (11, 51), (11, 60), (11, 23), (61, 36), (61, 54), (11, 44), (11, 53), (8, 11), (11, 62), (11, 16), (61, 38), (13, 19), (61, 47), (61, 56), (11, 37), (61, 31), (13, 21), (61, 49), (61, 58), (62, 23), (11, 39), (11, 48), (29, 29), (11, 57), (13, 14), (61, 33), (61, 42), (61, 51), (11, 32), (11, 41), (11, 59), (61, 35), (61, 44), (11, 34), (11, 43), (11, 52), (11, 61), (13, 18), (61, 37), (11, 36), (11, 54), (61, 39), (11, 29), (6, 8), (11, 38), (6, 17), (11, 47), (6, 26), (61, 60), (10, 14), (61, 32), (11, 31), (6, 10), (61, 53), (11, 49), (11, 15), (11, 24), (11, 33), (6, 12), (11, 42), (29, 23), (62, 29), (11, 35), (13, 20), (61, 48), (61, 57), (11, 56), (11, 28), (6, 7), (61, 41), (62, 15), (61, 59), (11, 58), (10, 13), (61, 34), (61, 43)], 'ddg_edge_info': [(47, 53), (7, 26), (54, 13), (16, 38), (16, 47), (54, 31), (39, 42), (49, 53), (2, 11), (11, 23), (37, 42), (4, 39), (59, 48), (15, 23), (41, 42), (34, 58), (44, 47), (54, 15), (54, 33), (11, 62), (39, 44), (2, 4), (4, 23), (57, 59), (11, 16), (37, 35), (4, 32), (7, 12), (47, 48), (4, 59), (16, 24), (18, 21), (16, 33), (57, 34), (44, 49), (23, 20), (54, 35), (23, 29), (4, 34), (60, 32), (13, 21), (59, 52), (54, 10), (54, 19), (23, 13), (38, 41), (0, 2), (54, 37), (31, 35), (4, 18), (4, 36), (53, 59), (54, 58), (37, 51), (54, 21), (51, 52), (4, 11), (39, 41), (38, 43), (37, 23), (4, 20), (49, 52), (59, 29), (16, 58), (4, 38), (59, 38), (28, 32), (54, 60), (33, 37), (58, 60), (54, 23), (20, 21), (4, 13), (12, 26), (49, 54), (16, 51), (4, 31), (16, 60), (2, 6), (36, 38), (54, 62), (56, 59), (23, 10), (4, 6), (23, 19), (4, 15), (4, 24), (16, 53), (4, 33), (16, 62), (0, 11), (59, 42), (37, 48), (11, 29), (54, 18), (57, 35), (24, 32), (41, 48), (60, 61), (4, 8), (23, 21), (0, 4), (4, 35), (54, 39), (53, 58), (28, 38), (54, 57), (47, 51), (37, 59), (32, 38), (43, 47), (4, 10), (21, 26), (4, 19), (4, 28), (54, 32), (39, 43), (59, 37), (37, 34), (28, 31), (11, 15), (54, 59), (37, 52), (41, 43), (29, 23), (58, 59), (51, 53), (35, 36), (44, 48), (16, 41), (4, 21), (54, 34), (16, 59), (0, 8), (48, 57), (36, 37), (37, 36), (60, 31), (4, 60), (59, 60), (23, 18), (43, 51), (16, 43), (59, 23), (54, 36), (31, 34), (0, 10), (0, 19), (37, 38), (37, 47), (32, 35), (62, 15), (4, 7), (52, 56), (43, 53), (4, 16), (54, 20), (35, 58), (11, 58), (54, 38), (10, 13), (49, 51), (0, 21), (54, 56), (4, 37)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0x1a0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0x19c(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 192, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 193, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 194, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 195, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 196, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 197, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 200, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 201, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 202, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 203, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 205, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 210, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 211, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 212, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: dct.c
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 195 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 169, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 172, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 173, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 177, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 178, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 179, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 180, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 182, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 187, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 188, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 189, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
Patched function: 1---av_cold int ff_dct_init 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.s---ff_dct_init---before
function id: 0
function flag: True
There are 195 instructions for function: ff_dct_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '180', 'end': 193}, 'before': {'start': '180', 'end': 188}}}, {'modifyIndex': 2, 'line': {'after': {'start': '208', 'end': 214}, 'before': {'start': '203', 'end': 211}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 169, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 172, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 173, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 177, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 178, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 179, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 180, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 182, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 187, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 188, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 189, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.o---before
The extraction of function: ff_dct_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 84 nodes and 123 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 195 instructions in binary file.
[4194304, 4194386]
[4195140, 4195153, 4195166, 4195211, 4195230]
The execution time of patched subCFG information extraction via angr: 0:00:00.760739
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x108>', '<mov~~dword ptr [rsp + 0xd8], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~dword ptr [rsp + 0xf4], edi>', '<mov~~dword ptr [rsp + 0xf0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0xe0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0xdc], edi>', '<call~~0x500000>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xdc]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}], 'cfg_edge_info': [(0, 1), (1, 2)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400344>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "jmp" for 0x40034f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400351>, <DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "jmp" for 0x40035c>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "lea" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "call" for 0x4003b4>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4003b9>, <DisassemblerInsn "mov" for 0x4003bb>, <DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "add" for 0x4003c3>, <DisassemblerInsn "ret" for 0x4003ca>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "lea" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "call" for 0x4003b4>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400326>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "lea" for 0x400330>, <DisassemblerInsn "movsxd" for 0x400337>, <DisassemblerInsn "add" for 0x40033b>, <DisassemblerInsn "mov" for 0x40033e>, <DisassemblerInsn "jmp" for 0x400342>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "lea" for 0x40030e>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "sub" for 0x400321>, <DisassemblerInsn "ja" for 0x400324>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "lea" for 0x40036d>, <DisassemblerInsn "lea" for 0x400374>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "cmove" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jmp" for 0x400389>]'}], 'cfg_block_detailed_info': [{'block_Idx': 15, 'blockInsts': ['<lea~~rax, [rip + 0x54b]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x40038b>']}, {'block_Idx': 13, 'blockInsts': ['<lea~~rax, [rip + 0x7d5]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x40038b>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 17, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x108>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x1889]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf0]>', '<lea~~rcx, [rip + 0xb6]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40039e>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<lea~~rcx, [rip + 0x270]>', '<lea~~rdx, [rip + 0xa2d]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40039e>']}], 'cfg_edge_info': [(10, 15), (13, 14), (15, 14), (10, 14), (14, 17), (10, 13), (10, 16), (7, 11), (16, 11), (11, 17)]}]}
{'ff_dct_init': [4195140, 4195153, 4195166, 4195211, 4195230]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/721d6f2dc5437df21ae17923b29fa2be847764c7/clang_before/Os/dct.o---before
The extraction of function: ff_dct_init
[4195140, 4195153, 4195166, 4195211, 4195230]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 54 nodes and 69 edges in CFGEmulated.
It has 48 nodes and 68 edges in CDG.
It has 749 nodes and 941 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195140, 4195153, 4195166, 4195211, 4195230]
{4194304, 4195079, 4194695, 4195211, 4194956, 4194829, 4194703, 4194943, 4194834, 4194456, 4194842, 4195230, 4194847, 4194719, 4194724, 4195110, 4194856, 4194861, 4194869, 4195257, 4195003, 4194878, 4195263, 4195140, 4194888, 4195153, 4194386, 4194648, 4194906, 4195166, 4195042, 4194531, 4194660, 4195049, 4194540, 4194796, 4194932, 4195065, 4194556, 4194687}
[45, 17, 49, 46, 8, 39, 36, 40, 41, 28, 32, 11, 13, 26, 52, 0, 51, 34, 38, 2, 18, 53, 47, 14, 25, 44, 42, 43, 35, 19, 10, 12, 50, 16, 31, 20, 22, 27, 24, 4, 6, 15, 7, 30, 48, 29]
The execution time of patched slicing information extraction via angr: 0:00:02.790273
{'ff_dct_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x40025a>, <DisassemblerInsn "divsd" for 0x400262>, <DisassemblerInsn "cvtsd2ss" for 0x400266>, <DisassemblerInsn "movss" for 0x40026a>, <DisassemblerInsn "movaps" for 0x40026f>, <DisassemblerInsn "pextrw" for 0x400274>, <DisassemblerInsn "test" for 0x400279>, <DisassemblerInsn "jne" for 0x40027b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400351>, <DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "jmp" for 0x40035c>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ae>, <DisassemblerInsn "movaps" for 0x4002b6>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002c0>, <DisassemblerInsn "movaps" for 0x4002c4>, <DisassemblerInsn "paddq" for 0x4002cb>, <DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "movaps" for 0x4002da>, <DisassemblerInsn "je" for 0x4002e2>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "pextrw" for 0x400274>, <DisassemblerInsn "test" for 0x400279>, <DisassemblerInsn "jne" for 0x40027b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "cmp" for 0x4000f3>, <DisassemblerInsn "jle" for 0x4000f6>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40022d>, <DisassemblerInsn "movaps" for 0x400230>, <DisassemblerInsn "unpcklpd" for 0x400235>, <DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movd" for 0x40023e>, <DisassemblerInsn "test" for 0x400242>, <DisassemblerInsn "jne" for 0x400244>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "unpckhpd" for 0x40021f>, <DisassemblerInsn "call" for 0x400223>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400235>, <DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movd" for 0x40023e>, <DisassemblerInsn "test" for 0x400242>, <DisassemblerInsn "jne" for 0x400244>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "movd" for 0x40023e>, <DisassemblerInsn "test" for 0x400242>, <DisassemblerInsn "jne" for 0x400244>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "movaps" for 0x400197>, <DisassemblerInsn "movaps" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "movq" for 0x4001a9>, <DisassemblerInsn "movaps" for 0x4001ae>, <DisassemblerInsn "pxor" for 0x4001b5>, <DisassemblerInsn "pxor" for 0x4001b9>, <DisassemblerInsn "movaps" for 0x4001bd>, <DisassemblerInsn "pcmpgtd" for 0x4001c0>, <DisassemblerInsn "pshufd" for 0x4001c4>, <DisassemblerInsn "pcmpeqd" for 0x4001c9>, <DisassemblerInsn "pshufd" for 0x4001cd>, <DisassemblerInsn "pand" for 0x4001d2>, <DisassemblerInsn "pshufd" for 0x4001d6>, <DisassemblerInsn "por" for 0x4001db>, <DisassemblerInsn "pcmpeqd" for 0x4001df>, <DisassemblerInsn "pxor" for 0x4001e3>, <DisassemblerInsn "movaps" for 0x4001e7>, <DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400103>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "add" for 0x400112>, <DisassemblerInsn "cvtsi2sd" for 0x400114>, <DisassemblerInsn "movsd" for 0x400118>, <DisassemblerInsn "divsd" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400127>, <DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "inc" for 0x400134>, <DisassemblerInsn "and" for 0x400137>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "dec" for 0x400143>, <DisassemblerInsn "movq" for 0x400146>, <DisassemblerInsn "pshufd" for 0x40014b>, <DisassemblerInsn "movaps" for 0x400150>, <DisassemblerInsn "unpcklpd" for 0x400158>, <DisassemblerInsn "movaps" for 0x40015c>, <DisassemblerInsn "movaps" for 0x400164>, <DisassemblerInsn "xor" for 0x40016b>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "movaps" for 0x400175>, <DisassemblerInsn "jmp" for 0x40017d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400326>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "lea" for 0x400330>, <DisassemblerInsn "movsxd" for 0x400337>, <DisassemblerInsn "add" for 0x40033b>, <DisassemblerInsn "mov" for 0x40033e>, <DisassemblerInsn "jmp" for 0x400342>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40017f>, <DisassemblerInsn "movaps" for 0x400187>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "movaps" for 0x400197>, <DisassemblerInsn "movaps" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "movq" for 0x4001a9>, <DisassemblerInsn "movaps" for 0x4001ae>, <DisassemblerInsn "pxor" for 0x4001b5>, <DisassemblerInsn "pxor" for 0x4001b9>, <DisassemblerInsn "movaps" for 0x4001bd>, <DisassemblerInsn "pcmpgtd" for 0x4001c0>, <DisassemblerInsn "pshufd" for 0x4001c4>, <DisassemblerInsn "pcmpeqd" for 0x4001c9>, <DisassemblerInsn "pshufd" for 0x4001cd>, <DisassemblerInsn "pand" for 0x4001d2>, <DisassemblerInsn "pshufd" for 0x4001d6>, <DisassemblerInsn "por" for 0x4001db>, <DisassemblerInsn "pcmpeqd" for 0x4001df>, <DisassemblerInsn "pxor" for 0x4001e3>, <DisassemblerInsn "movaps" for 0x4001e7>, <DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "je" for 0x4002e2>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x400020>, <DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400033>, <DisassemblerInsn "shl" for 0x400035>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "add" for 0x400043>, <DisassemblerInsn "mov" for 0x400046>, <DisassemblerInsn "call" for 0x40004d>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002c0>, <DisassemblerInsn "movaps" for 0x4002c4>, <DisassemblerInsn "paddq" for 0x4002cb>, <DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "movaps" for 0x4002da>, <DisassemblerInsn "je" for 0x4002e2>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400212>, <DisassemblerInsn "movaps" for 0x400215>, <DisassemblerInsn "movaps" for 0x40021a>, <DisassemblerInsn "unpckhpd" for 0x40021f>, <DisassemblerInsn "call" for 0x400223>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400228>, <DisassemblerInsn "movaps" for 0x40022d>, <DisassemblerInsn "movaps" for 0x400230>, <DisassemblerInsn "unpcklpd" for 0x400235>, <DisassemblerInsn "movaps" for 0x400239>, <DisassemblerInsn "movd" for 0x40023e>, <DisassemblerInsn "test" for 0x400242>, <DisassemblerInsn "jne" for 0x400244>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "movsxd" for 0x400068>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cdq" for 0x400082>, <DisassemblerInsn "idiv" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "movsxd" for 0x40008c>, <DisassemblerInsn "shl" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "lea" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "call" for 0x4003b4>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002e4>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40027d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "lea" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "call" for 0x4003b4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40017d>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40026f>, <DisassemblerInsn "pextrw" for 0x400274>, <DisassemblerInsn "test" for 0x400279>, <DisassemblerInsn "jne" for 0x40027b>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400246>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "movaps" for 0x400255>, <DisassemblerInsn "movsd" for 0x40025a>, <DisassemblerInsn "divsd" for 0x400262>, <DisassemblerInsn "cvtsd2ss" for 0x400266>, <DisassemblerInsn "movss" for 0x40026a>, <DisassemblerInsn "movaps" for 0x40026f>, <DisassemblerInsn "pextrw" for 0x400274>, <DisassemblerInsn "test" for 0x400279>, <DisassemblerInsn "jne" for 0x40027b>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40021a>, <DisassemblerInsn "unpckhpd" for 0x40021f>, <DisassemblerInsn "call" for 0x400223>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400344>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "jmp" for 0x40034f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "lea" for 0x40030e>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "sub" for 0x400321>, <DisassemblerInsn "ja" for 0x400324>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "jmp" for 0x400302>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028c>, <DisassemblerInsn "or" for 0x400291>, <DisassemblerInsn "unpckhpd" for 0x400295>, <DisassemblerInsn "movsd" for 0x400299>, <DisassemblerInsn "divsd" for 0x4002a1>, <DisassemblerInsn "cvtsd2ss" for 0x4002a5>, <DisassemblerInsn "movss" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ae>, <DisassemblerInsn "movaps" for 0x4002b6>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002c0>, <DisassemblerInsn "movaps" for 0x4002c4>, <DisassemblerInsn "paddq" for 0x4002cb>, <DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "movaps" for 0x4002da>, <DisassemblerInsn "je" for 0x4002e2>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "add" for 0x4003c3>, <DisassemblerInsn "ret" for 0x4003ca>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "lea" for 0x40036d>, <DisassemblerInsn "lea" for 0x400374>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "cmove" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jmp" for 0x400389>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400164>, <DisassemblerInsn "xor" for 0x40016b>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "movaps" for 0x400175>, <DisassemblerInsn "jmp" for 0x40017d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x400187>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "movaps" for 0x400197>, <DisassemblerInsn "movaps" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "movq" for 0x4001a9>, <DisassemblerInsn "movaps" for 0x4001ae>, <DisassemblerInsn "pxor" for 0x4001b5>, <DisassemblerInsn "pxor" for 0x4001b9>, <DisassemblerInsn "movaps" for 0x4001bd>, <DisassemblerInsn "pcmpgtd" for 0x4001c0>, <DisassemblerInsn "pshufd" for 0x4001c4>, <DisassemblerInsn "pcmpeqd" for 0x4001c9>, <DisassemblerInsn "pshufd" for 0x4001cd>, <DisassemblerInsn "pand" for 0x4001d2>, <DisassemblerInsn "pshufd" for 0x4001d6>, <DisassemblerInsn "por" for 0x4001db>, <DisassemblerInsn "pcmpeqd" for 0x4001df>, <DisassemblerInsn "pxor" for 0x4001e3>, <DisassemblerInsn "movaps" for 0x4001e7>, <DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4003b9>, <DisassemblerInsn "mov" for 0x4003bb>, <DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "add" for 0x4003c3>, <DisassemblerInsn "ret" for 0x4003ca>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "add" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "add" for 0x4000cf>, <DisassemblerInsn "cmp" for 0x4000d3>, <DisassemblerInsn "sete" for 0x4000d6>, <DisassemblerInsn "and" for 0x4000d9>, <DisassemblerInsn "movzx" for 0x4000db>, <DisassemblerInsn "call" for 0x4000de>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "jl" for 0x4000e6>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "unpcklpd" for 0x400158>, <DisassemblerInsn "movaps" for 0x40015c>, <DisassemblerInsn "movaps" for 0x400164>, <DisassemblerInsn "xor" for 0x40016b>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "movaps" for 0x400175>, <DisassemblerInsn "jmp" for 0x40017d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002f1>, <DisassemblerInsn "call" for 0x4002f4>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "movq" for 0x4001a9>, <DisassemblerInsn "movaps" for 0x4001ae>, <DisassemblerInsn "pxor" for 0x4001b5>, <DisassemblerInsn "pxor" for 0x4001b9>, <DisassemblerInsn "movaps" for 0x4001bd>, <DisassemblerInsn "pcmpgtd" for 0x4001c0>, <DisassemblerInsn "pshufd" for 0x4001c4>, <DisassemblerInsn "pcmpeqd" for 0x4001c9>, <DisassemblerInsn "pshufd" for 0x4001cd>, <DisassemblerInsn "pand" for 0x4001d2>, <DisassemblerInsn "pshufd" for 0x4001d6>, <DisassemblerInsn "por" for 0x4001db>, <DisassemblerInsn "pcmpeqd" for 0x4001df>, <DisassemblerInsn "pxor" for 0x4001e3>, <DisassemblerInsn "movaps" for 0x4001e7>, <DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027f>, <DisassemblerInsn "movaps" for 0x400287>, <DisassemblerInsn "mov" for 0x40028c>, <DisassemblerInsn "or" for 0x400291>, <DisassemblerInsn "unpckhpd" for 0x400295>, <DisassemblerInsn "movsd" for 0x400299>, <DisassemblerInsn "divsd" for 0x4002a1>, <DisassemblerInsn "cvtsd2ss" for 0x4002a5>, <DisassemblerInsn "movss" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ae>, <DisassemblerInsn "movaps" for 0x4002b6>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002c0>, <DisassemblerInsn "movaps" for 0x4002c4>, <DisassemblerInsn "paddq" for 0x4002cb>, <DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "movaps" for 0x4002da>, <DisassemblerInsn "je" for 0x4002e2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "movq" for 0x4001a9>, <DisassemblerInsn "movaps" for 0x4001ae>, <DisassemblerInsn "pxor" for 0x4001b5>, <DisassemblerInsn "pxor" for 0x4001b9>, <DisassemblerInsn "movaps" for 0x4001bd>, <DisassemblerInsn "pcmpgtd" for 0x4001c0>, <DisassemblerInsn "pshufd" for 0x4001c4>, <DisassemblerInsn "pcmpeqd" for 0x4001c9>, <DisassemblerInsn "pshufd" for 0x4001cd>, <DisassemblerInsn "pand" for 0x4001d2>, <DisassemblerInsn "pshufd" for 0x4001d6>, <DisassemblerInsn "por" for 0x4001db>, <DisassemblerInsn "pcmpeqd" for 0x4001df>, <DisassemblerInsn "pxor" for 0x4001e3>, <DisassemblerInsn "movaps" for 0x4001e7>, <DisassemblerInsn "paddd" for 0x4001ec>, <DisassemblerInsn "pshufd" for 0x4001f0>, <DisassemblerInsn "movaps" for 0x4001f5>, <DisassemblerInsn "por" for 0x4001fc>, <DisassemblerInsn "cvtdq2pd" for 0x400200>, <DisassemblerInsn "mulpd" for 0x400204>, <DisassemblerInsn "movaps" for 0x400208>, <DisassemblerInsn "call" for 0x40020d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 45, 'blockInsts': ['<movsd~~xmm0, qword ptr [rip + 0x190e]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x40027f>']}, {'block_Idx': 17, 'blockInsts': ['<lea~~rax, [rip + 0x7d5]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x40038b>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x18e5]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<je~~0x400307>']}, {'block_Idx': 46, 'blockInsts': ['<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x40027f>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe0]>', '<cmp~~eax, 1>', '<jle~~0x400307>']}, {'block_Idx': 39, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x70], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400248>']}, {'block_Idx': 36, 'blockInsts': ['<unpckhpd~~xmm0, xmm0>', '<call~~0x500028>']}, {'block_Idx': 40, 'blockInsts': ['<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x70], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400248>']}, {'block_Idx': 41, 'blockInsts': ['<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400248>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xc0]>', '<movaps~~xmmword ptr [rsp + 0x20], xmm2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x19db]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x60], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}, {'block_Idx': 32, 'blockInsts': ['<call~~0x500028>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<add~~edx, edx>', '<cvtsi2sd~~xmm1, edx>', '<movsd~~xmm0, qword ptr [rip + 0x1a48]>', '<divsd~~xmm0, xmm1>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~eax, eax>', '<mov~~rcx, rax>', '<inc~~rcx>', '<and~~rcx, 0xfffffffffffffffe>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<dec~~rax>', '<movq~~xmm1, rax>', '<pshufd~~xmm1, xmm1, 0x44>', '<movaps~~xmmword ptr [rsp + 0x90], xmm1>', '<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a15]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<jmp~~0x40017f>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<lea~~rdx, [rip + 0x1889]>', '<movsxd~~rax, dword ptr [rdx + rax*4]>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp], rcx>', '<jmp~~rax>']}, {'block_Idx': 26, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0xa0]>', '<movaps~~xmm5, xmmword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xc0]>', '<movaps~~xmmword ptr [rsp + 0x20], xmm2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x19db]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x60], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}, {'block_Idx': 52, 'blockInsts': ['<je~~0x400307>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x108>', '<mov~~dword ptr [rsp + 0xd8], esi>', '<mov~~rax, rdi>', '<mov~~edi, dword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~dword ptr [rsp + 0xf4], edi>', '<mov~~dword ptr [rsp + 0xf0], edx>', '<mov~~esi, 1>', '<mov~~ecx, edi>', '<shl~~esi, cl>', '<mov~~dword ptr [rsp + 0xe0], esi>', '<mov~~dword ptr [rax], edi>', '<mov~~dword ptr [rax + 4], edx>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0xdc], edi>', '<call~~0x500000>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x18e5]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<je~~0x400307>']}, {'block_Idx': 34, 'blockInsts': ['<movaps~~xmm1, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x40]>', '<movaps~~xmmword ptr [rsp + 0x50], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<call~~0x500028>']}, {'block_Idx': 38, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x50]>', '<movaps~~xmm2, xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<unpcklpd~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x70], xmm1>', '<movd~~eax, xmm0>', '<test~~al, 1>', '<jne~~0x400248>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xdc]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<movsxd~~rdx, esi>', '<mov~~rcx, qword ptr [rip + 0xfff9e]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rdi + 0x98], rcx>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<movsxd~~rdi, eax>', '<shl~~rdi, 2>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 53, 'blockInsts': ['<jmp~~0x40017f>']}, {'block_Idx': 47, 'blockInsts': ['<jmp~~0x4002ae>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rax, [rip + 0xa07]>', '<mov~~qword ptr [rdi + 0xb0], rax>', '<call~~0x500038>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x40017f>']}, {'block_Idx': 44, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x40027f>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x40026f>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x70]>', '<movsd~~xmm0, qword ptr [rip + 0x190e]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<movaps~~xmm0, xmmword ptr [rsp + 0x60]>', '<pextrw~~eax, xmm0, 4>', '<test~~al, 1>', '<jne~~0x40027f>']}, {'block_Idx': 35, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x50], xmm1>', '<unpckhpd~~xmm0, xmm0>', '<call~~0x500028>']}, {'block_Idx': 19, 'blockInsts': ['<lea~~rax, [rip + 0x54b]>', '<mov~~qword ptr [rsp], rax>', '<jmp~~0x40038b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf0]>', '<lea~~rcx, [rip + 0xb6]>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~ecx, eax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<sub~~eax, 3>', '<ja~~0x40039e>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<jmp~~0x4003bf>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<or~~rcx, 1>', '<unpckhpd~~xmm1, xmm1>', '<movsd~~xmm0, qword ptr [rip + 0x18cf]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x18e5]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<je~~0x400307>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x108>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<lea~~rcx, [rip + 0x270]>', '<lea~~rdx, [rip + 0xa2d]>', '<cmp~~esi, 5>', '<cmove~~rcx, rdx>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<jmp~~0x40039e>']}, {'block_Idx': 22, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rip + 0x1a15]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<jmp~~0x40017f>']}, {'block_Idx': 27, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movaps~~xmm2, xmmword ptr [rsp + 0xc0]>', '<movaps~~xmmword ptr [rsp + 0x20], xmm2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x19db]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x60], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}, {'block_Idx': 24, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x108>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<mov~~rcx, rdi>', '<add~~rcx, 0xa0>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~qword ptr [rdi + 0xa0], rax>', '<add~~rdi, 8>', '<cmp~~edx, 1>', '<sete~~al>', '<and~~al, 1>', '<movzx~~edx, al>', '<call~~0x500020>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x4002e9>']}, {'block_Idx': 15, 'blockInsts': ['<unpcklpd~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0xa0], xmm0>', '<movaps~~xmm0, xmmword ptr [rip + 0x1a15]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<jmp~~0x40017f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500030>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~qword ptr [rsp + 0x38], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x19db]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x60], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<or~~rcx, 1>', '<unpckhpd~~xmm1, xmm1>', '<movsd~~xmm0, qword ptr [rip + 0x18cf]>', '<divsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rax + rcx*4], xmm0>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<movaps~~xmm1, xmmword ptr [rip + 0x18e5]>', '<paddq~~xmm0, xmm1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<movaps~~xmmword ptr [rsp + 0xc0], xmm0>', '<je~~0x400307>']}, {'block_Idx': 29, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x20], xmm2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<movq~~xmm1, rax>', '<movaps~~xmm3, xmmword ptr [rip + 0x19db]>', '<pxor~~xmm5, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmm3, xmm2>', '<pcmpgtd~~xmm3, xmm5>', '<pshufd~~xmm4, xmm3, 0xa0>', '<pcmpeqd~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xf5>', '<pand~~xmm2, xmm4>', '<pshufd~~xmm3, xmm3, 0xf5>', '<por~~xmm2, xmm3>', '<pcmpeqd~~xmm3, xmm3>', '<pxor~~xmm2, xmm3>', '<movaps~~xmmword ptr [rsp + 0x60], xmm2>', '<paddd~~xmm1, xmm1>', '<pshufd~~xmm1, xmm1, 0x50>', '<movaps~~xmm2, xmmword ptr [rip + 0x19a4]>', '<por~~xmm1, xmm2>', '<cvtdq2pd~~xmm1, xmm1>', '<mulpd~~xmm0, xmm1>', '<movaps~~xmmword ptr [rsp + 0x40], xmm0>', '<call~~0x500028>']}], 'cfg_edge_info': [(32, 34), (20, 14), (41, 43), (26, 27), (35, 36), (12, 16), (4, 6), (31, 32), (53, 26), (0, 2), (46, 48), (40, 41), (19, 18), (17, 18), (27, 28), (45, 46), (13, 17), (13, 20), (6, 8), (50, 51), (41, 42), (43, 45), (51, 52), (46, 47), (22, 25), (8, 11), (14, 24), (48, 50), (2, 4), (10, 14), (28, 29), (13, 19), (6, 7), (7, 12), (15, 22), (18, 24), (29, 30), (44, 46), (52, 53), (38, 39), (39, 40), (8, 10), (52, 10), (10, 13), (34, 35), (49, 51), (11, 15), (36, 38), (13, 18), (30, 31), (25, 26)], 'cdg_edge_info': [(6, 12), (52, 46), (52, 40), (41, 43), (8, 46), (8, 52), (6, 24), (52, 52), (46, 48), (8, 15), (52, 27), (8, 30), (52, 30), (13, 14), (8, 27), (13, 17), (52, 39), (8, 36), (52, 36), (13, 20), (6, 8), (8, 39), (41, 45), (52, 51), (8, 51), (52, 34), (46, 50), (8, 11), (10, 14), (8, 26), (52, 26), (52, 32), (8, 29), (52, 29), (6, 7), (13, 19), (8, 32), (8, 38), (52, 38), (6, 16), (6, 10), (8, 41), (52, 28), (52, 35), (52, 41), (8, 35), (10, 13), (8, 22), (8, 28), (13, 18), (8, 31), (52, 31), (8, 34), (8, 40)], 'ddg_edge_info': [(11, 51), (19, 18), (39, 51), (40, 50), (2, 11), (4, 30), (29, 50), (28, 30), (50, 36), (36, 46), (30, 39), (36, 18), (22, 28), (40, 43), (2, 4), (31, 40), (4, 32), (4, 50), (7, 12), (36, 48), (30, 50), (11, 46), (36, 20), (39, 46), (40, 45), (50, 31), (36, 41), (36, 50), (30, 43), (11, 39), (39, 30), (36, 13), (11, 48), (0, 2), (31, 35), (4, 18), (4, 27), (4, 45), (45, 46), (36, 43), (50, 51), (30, 45), (11, 41), (51, 52), (11, 50), (4, 11), (39, 41), (12, 24), (4, 20), (4, 29), (36, 27), (45, 39), (36, 45), (11, 34), (11, 43), (11, 52), (43, 50), (4, 13), (4, 22), (4, 31), (36, 29), (2, 6), (45, 41), (36, 38), (13, 18), (0, 18), (30, 31), (45, 50), (11, 27), (11, 36), (32, 34), (4, 6), (4, 15), (17, 18), (45, 34), (36, 31), (0, 11), (36, 40), (0, 20), (51, 31), (32, 36), (30, 51), (43, 45), (4, 8), (38, 40), (4, 17), (4, 26), (0, 4), (45, 36), (34, 36), (27, 30), (28, 29), (36, 51), (11, 31), (26, 31), (4, 10), (4, 19), (36, 17), (4, 28), (36, 26), (11, 15), (50, 46), (36, 10), (36, 19), (45, 31), (36, 28), (0, 8), (34, 40), (31, 50), (51, 28), (50, 39), (15, 26), (35, 38), (39, 29), (31, 34), (48, 50), (22, 31), (36, 30), (0, 10), (36, 39), (45, 51), (50, 41), (32, 35), (7, 24), (18, 24), (4, 7), (39, 40), (31, 36), (34, 35), (36, 32), (10, 13), (40, 48), (31, 45), (50, 34)]}]}
{'ff_dct_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movl\t$1, %esi'}, {'instIndex': 8, 'instruction': 'movl\t%edi, %ecx'}, {'instIndex': 9, 'instruction': 'shll\t%cl, %esi'}, {'instIndex': 10, 'instruction': 'movl\t%esi, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%edi, (%rax)'}, {'instIndex': 12, 'instruction': 'movl\t%edx, 4(%rax)'}, {'instIndex': 13, 'instruction': 'addl\t$2, %edi'}, {'instIndex': 14, 'instruction': 'movl\t%edi, 0xdc(%rsp)                 # 4-byte Spill'}, {'instIndex': 15, 'instruction': 'callq\tff_init_ff_cos_tabs@PLT'}, {'instIndex': 19, 'instruction': 'movslq\t%esi, %rdx'}, {'instIndex': 20, 'instruction': 'movq\tff_cos_tabs@GOTPCREL(%rip), %rcx'}, {'instIndex': 21, 'instruction': 'movq\t(%rcx,%rdx,8), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, 0x98(%rdi)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 169, 'instruction': 'leaq\tff_dct_calc_III_c(%rip), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 172, 'instruction': 'leaq\tff_dst_calc_I_c(%rip), %rax'}, {'instIndex': 173, 'instruction': 'movq\t%rax, (%rsp)                    # 8-byte Spill'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB0_13'}, {'instIndex': 177, 'instruction': 'leaq\tff_dct_calc_II_c(%rip), %rcx'}, {'instIndex': 178, 'instruction': 'leaq\tdct0x20_func(%rip), %rdx'}, {'instIndex': 179, 'instruction': 'cmpl\t$5, %esi'}, {'instIndex': 180, 'instruction': 'cmoveq\t%rdx, %rcx'}, {'instIndex': 182, 'instruction': 'jmp\t.LBB0_14'}, {'instIndex': 187, 'instruction': 'leaq\tdct0x20(%rip), %rax'}, {'instIndex': 188, 'instruction': 'movq\t%rax, 0xb0(%rdi)'}, {'instIndex': 189, 'instruction': 'callq\tff_dct_init_mmx@PLT'}]}]}
The analysis of 19 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/patch_info.txt
{'1': {'before': 'a/libavcodec/rpza.c', 'after': 'b/libavcodec/rpza.c'}}
{'1': [{'before': '-267,6', 'after': '+267,7', 'function': 'static int rpza_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c---b/libavcodec/rpza.c
The case of compiler gcc with optimization no.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/no/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/no/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O0/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O0/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O1/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O1/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O2/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O2/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O3/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/O3/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/Os/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_after/Os/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/no/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/no/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O0/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O0/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O1/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O1/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O2/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O2/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O3/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/O3/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/Os/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_after/Os/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c---a/libavcodec/rpza.c
The case of compiler gcc with optimization no.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/no/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/no/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O0/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O0/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O1/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O1/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O2/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O2/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O3/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/O3/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/Os/rpza_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/gcc_before/Os/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/no/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/no/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O0/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O0/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O1/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O1/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O2/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O2/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O3/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/O3/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: rpza.c
Patched function: 1---static int rpza_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/Os/rpza.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72385798357e53f64ba5ac405fb1b227ddcffc6c/clang_before/Os/rpza.o
Binary file does not exist.
{'rpza_decode_frame': []}
The analysis of 20 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/patch_info.txt
{'1': {'before': 'a/ffplay.c', 'after': 'b/ffplay.c'}}
{'1': [{'before': '-2026,9', 'after': '+2026,10', 'function': 'static int decode_thread'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc---b/ffplay.c
The case of compiler gcc with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc---a/ffplay.c
The case of compiler gcc with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/79ee46836578e78ef9539f0232cd1f589ee2e2dc/clang_before/Os: directory not exists.
The analysis of 21 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/patch_info.txt
{'1': {'before': 'a/libavcodec/utvideodec.c', 'after': 'b/libavcodec/utvideodec.c'}}
{'1': [{'before': '-238,7', 'after': '+248,7', 'function': 'static int decode_plane'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33---b/libavcodec/utvideodec.c
The case of compiler gcc with optimization no.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/no/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/no/utvideodec_gcc.s---decode_plane---after
function id: 158
function flag: True
There are 300 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rax), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 19, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 20, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 21, 'instruction': 'call\tcompute_cmask'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 23, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 27, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 28, 'instruction': 'call\tbuild_huff'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L96'}, {'instIndex': 31, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 33, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 37, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/no/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rax), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 19, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 20, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 21, 'instruction': 'call\tcompute_cmask'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 23, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 27, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 28, 'instruction': 'call\tbuild_huff'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L96'}, {'instIndex': 31, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 33, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 37, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O0/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O0/utvideodec_gcc.s---decode_plane---after
function id: 158
function flag: True
There are 300 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rax), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 19, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 20, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 21, 'instruction': 'call\tcompute_cmask'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 23, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 27, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 28, 'instruction': 'call\tbuild_huff'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L96'}, {'instIndex': 31, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 33, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 37, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O0/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rax), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 19, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 20, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 21, 'instruction': 'call\tcompute_cmask'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 23, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 27, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 28, 'instruction': 'call\tbuild_huff'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L96'}, {'instIndex': 31, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 33, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 37, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O1/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O1/utvideodec_gcc.s---decode_plane---after
function id: 333
function flag: True
There are 1794 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 28, 'instruction': 'leaq\t0x90(%rsp), %rsi'}, {'instIndex': 29, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 32, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.L238'}, {'instIndex': 200, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 201, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 202, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 203, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 204, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 205, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O1/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 28, 'instruction': 'leaq\t0x90(%rsp), %rsi'}, {'instIndex': 29, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 32, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.L238'}, {'instIndex': 200, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 201, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 202, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 203, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 204, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 205, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O2/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O2/utvideodec_gcc.s---decode_plane---after
function id: 321
function flag: True
There are 1616 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, 0xa8(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 30, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 32, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 33, 'instruction': 'call\tbuild_huff'}, {'instIndex': 34, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 35, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 37, 'instruction': 'jne\t.L269'}, {'instIndex': 387, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 388, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 389, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 390, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 391, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 392, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O2/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, 0xa8(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 30, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 32, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 33, 'instruction': 'call\tbuild_huff'}, {'instIndex': 34, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 35, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 37, 'instruction': 'jne\t.L269'}, {'instIndex': 387, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 388, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 389, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 390, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 391, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 392, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O3/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O3/utvideodec_gcc.s---decode_plane---after
function id: 325
function flag: True
There are 2337 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0xa8(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x60(%rsp)'}, {'instIndex': 32, 'instruction': 'call\tbuild_huff'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'jne\t.L300'}, {'instIndex': 577, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 578, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 579, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 580, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 581, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 582, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/O3/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0xa8(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x60(%rsp)'}, {'instIndex': 32, 'instruction': 'call\tbuild_huff'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'jne\t.L300'}, {'instIndex': 577, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 578, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 579, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 580, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 581, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 582, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/Os/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/Os/utvideodec_gcc.s---decode_plane---after
function id: 213
function flag: True
There are 1415 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, 0x88(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 24, 'instruction': 'leaq\t0x44(%rsp), %rdx'}, {'instIndex': 25, 'instruction': 'leaq\t0x48(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 27, 'instruction': 'call\tbuild_huff'}, {'instIndex': 28, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L152'}, {'instIndex': 31, 'instruction': 'movq\t8(%r14), %rdi'}, {'instIndex': 32, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_after/Os/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, 0x88(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 24, 'instruction': 'leaq\t0x44(%rsp), %rdx'}, {'instIndex': 25, 'instruction': 'leaq\t0x48(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 27, 'instruction': 'call\tbuild_huff'}, {'instIndex': 28, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L152'}, {'instIndex': 31, 'instruction': 'movq\t8(%r14), %rdi'}, {'instIndex': 32, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/no/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/no/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 283 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t0xb4(%rsp), %edi'}, {'instIndex': 11, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t0x68(%rax), %esi'}, {'instIndex': 13, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'callq\tcompute_cmask'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t0xd8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'leaq\t0x60(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 21, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'je\t.LBB3_2'}, {'instIndex': 24, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 27, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movb\t$0, %al'}, {'instIndex': 29, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/no/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/no/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 668 nodes and 1098 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 283 instructions in binary file.
[4202032, 4202148, 4202175, 4202180]
The execution time of patched subCFG information extraction via angr: 0:00:01.136915
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ebf>, <DisassemblerInsn "je" for 0x401ec2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee3>, <DisassemblerInsn "jmp" for 0x401eee>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "mov" for 0x401ed0>, <DisassemblerInsn "lea" for 0x401ed5>, <DisassemblerInsn "mov" for 0x401edc>, <DisassemblerInsn "call" for 0x401ede>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea8>, <DisassemblerInsn "lea" for 0x401eb0>, <DisassemblerInsn "lea" for 0x401eb5>, <DisassemblerInsn "call" for 0x401eba>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ef3>, <DisassemblerInsn "jl" for 0x401ef8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e95>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "call" for 0x401e9f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401ef3>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<jmp~~0x402424>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x30ea]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rsi, [rsp + 0x60]>', '<lea~~rdx, [rsp + 0x30]>', '<call~~0x4043d0>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 0>', '<jl~~0x402078>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~dword ptr [rsp + 0xb4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~dword ptr [rsp + 0x94], r9d>', '<mov~~edi, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rax + 0x68]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~edx, dword ptr [rax + 0x80]>', '<call~~0x404370>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (2, 3), (4, 7)]}]}
{'decode_plane': [4202032, 4202148, 4202175, 4202180]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/no/utvideodec.o---after
The extraction of function: decode_plane
[4202032, 4202148, 4202175, 4202180]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 162 nodes and 243 edges in CFGEmulated.
It has 158 nodes and 216 edges in CDG.
It has 2960 nodes and 4020 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202032, 4202148, 4202175, 4202180]
{4203137, 4203522, 4203535, 4202257, 4202387, 4202905, 4203545, 4202657, 4202148, 4203556, 4202404, 4202536, 4202281, 4203182, 4202415, 4202032, 4202681, 4202814, 4202175, 4202180, 4202441, 4202576, 4202578, 4202616, 4202462, 4202211, 4202600, 4202227, 4202869, 4203512, 4203259, 4202238}
[131, 35, 58, 55, 135, 41, 60, 139, 7, 43, 104, 50, 47, 0, 102, 19, 68, 129, 33, 64, 6, 66, 49, 59, 39, 34, 110, 38, 48, 8, 57, 42, 54, 87, 56, 65, 140, 51, 22, 32, 4, 26, 16, 31, 97, 23, 108, 88, 1, 27, 136]
The execution time of patched slicing information extraction via angr: 0:00:11.288486
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022fb>, <DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "lea" for 0x40230c>, <DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "call" for 0x402315>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee3>, <DisassemblerInsn "jmp" for 0x401eee>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "cmp" for 0x401f9a>, <DisassemblerInsn "jge" for 0x401f9e>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402199>, <DisassemblerInsn "mov" for 0x4021a1>, <DisassemblerInsn "mov" for 0x4021a8>, <DisassemblerInsn "movsxd" for 0x4021b0>, <DisassemblerInsn "add" for 0x4021b5>, <DisassemblerInsn "mov" for 0x4021b8>, <DisassemblerInsn "mov" for 0x4021c0>, <DisassemblerInsn "shl" for 0x4021c3>, <DisassemblerInsn "cdqe" for 0x4021c6>, <DisassemblerInsn "add" for 0x4021c8>, <DisassemblerInsn "movsxd" for 0x4021cb>, <DisassemblerInsn "call" for 0x4021d0>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x40234c>, <DisassemblerInsn "movsxd" for 0x402351>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "add" for 0x402363>, <DisassemblerInsn "mov" for 0x40236a>, <DisassemblerInsn "jmp" for 0x402371>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "imul" for 0x401fbd>, <DisassemblerInsn "cmp" for 0x401fc5>, <DisassemblerInsn "jge" for 0x401fc7>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404697>, <DisassemblerInsn "mov" for 0x40469e>, <DisassemblerInsn "add" for 0x4046a5>, <DisassemblerInsn "ret" for 0x4046ac>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40231a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "ret" for 0x4043cc>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402424>, <DisassemblerInsn "add" for 0x40242b>, <DisassemblerInsn "ret" for 0x402432>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e2>, <DisassemblerInsn "add" for 0x4023e9>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "jmp" for 0x4023f3>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "add" for 0x402030>, <DisassemblerInsn "mov" for 0x402035>, <DisassemblerInsn "mov" for 0x40203a>, <DisassemblerInsn "add" for 0x402041>, <DisassemblerInsn "mov" for 0x402044>, <DisassemblerInsn "jmp" for 0x40204b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402142>, <DisassemblerInsn "mov" for 0x402146>, <DisassemblerInsn "mov" for 0x40214e>, <DisassemblerInsn "shl" for 0x402155>, <DisassemblerInsn "movsxd" for 0x402158>, <DisassemblerInsn "mov" for 0x40215b>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402162>, <DisassemblerInsn "sub" for 0x402166>, <DisassemblerInsn "mov" for 0x40216a>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "jne" for 0x402173>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e95>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "call" for 0x401e9f>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ae>, <DisassemblerInsn "mov" for 0x4022b6>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "lea" for 0x4022bf>, <DisassemblerInsn "mov" for 0x4022c6>, <DisassemblerInsn "call" for 0x4022c8>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ebf>, <DisassemblerInsn "je" for 0x401ec2>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402419>, <DisassemblerInsn "mov" for 0x402424>, <DisassemblerInsn "add" for 0x40242b>, <DisassemblerInsn "ret" for 0x402432>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ea>, <DisassemblerInsn "cmp" for 0x4022f1>, <DisassemblerInsn "jge" for 0x4022f9>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f29>, <DisassemblerInsn "mov" for 0x401f2d>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "add" for 0x401f42>, <DisassemblerInsn "imul" for 0x401f45>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "cdq" for 0x401f50>, <DisassemblerInsn "idiv" for 0x401f51>, <DisassemblerInsn "and" for 0x401f54>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5c>, <DisassemblerInsn "movsxd" for 0x401f64>, <DisassemblerInsn "imul" for 0x401f6c>, <DisassemblerInsn "add" for 0x401f75>, <DisassemblerInsn "mov" for 0x401f78>, <DisassemblerInsn "mov" for 0x401f7d>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "mov" for 0x401f8c>, <DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "cmp" for 0x401f9a>, <DisassemblerInsn "jge" for 0x401f9e>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "imul" for 0x401fbd>, <DisassemblerInsn "cmp" for 0x401fc5>, <DisassemblerInsn "jge" for 0x401fc7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea8>, <DisassemblerInsn "lea" for 0x401eb0>, <DisassemblerInsn "lea" for 0x401eb5>, <DisassemblerInsn "call" for 0x401eba>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40240f>, <DisassemblerInsn "call" for 0x402414>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fdc>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f11>, <DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "cmp" for 0x401f20>, <DisassemblerInsn "jge" for 0x401f23>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402117>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "shl" for 0x402126>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "mov" for 0x40212c>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "jmp" for 0x402134>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "jmp" for 0x402073>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022cd>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "jmp" for 0x40213c>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402402>, <DisassemblerInsn "jmp" for 0x40240d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4043d0>, <DisassemblerInsn "mov" for 0x4043d7>, <DisassemblerInsn "mov" for 0x4043df>, <DisassemblerInsn "mov" for 0x4043e7>, <DisassemblerInsn "mov" for 0x4043ef>, <DisassemblerInsn "mov" for 0x4043f7>, <DisassemblerInsn "mov" for 0x4043fd>, <DisassemblerInsn "cmp" for 0x404408>, <DisassemblerInsn "jge" for 0x404413>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fde>, <DisassemblerInsn "add" for 0x401fe5>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "mov" for 0x401fed>, <DisassemblerInsn "mov" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "movsxd" for 0x402006>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "add" for 0x402018>, <DisassemblerInsn "mov" for 0x40201f>, <DisassemblerInsn "jmp" for 0x402026>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402050>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402175>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "lea" for 0x402186>, <DisassemblerInsn "mov" for 0x40218d>, <DisassemblerInsn "call" for 0x40218f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40229f>, <DisassemblerInsn "call" for 0x4022a4>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "movsxd" for 0x402006>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "add" for 0x402018>, <DisassemblerInsn "mov" for 0x40201f>, <DisassemblerInsn "jmp" for 0x402026>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402194>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402281>, <DisassemblerInsn "mov" for 0x402288>, <DisassemblerInsn "imul" for 0x40228f>, <DisassemblerInsn "cmp" for 0x402297>, <DisassemblerInsn "jge" for 0x402299>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402052>, <DisassemblerInsn "add" for 0x402059>, <DisassemblerInsn "mov" for 0x40205c>, <DisassemblerInsn "jmp" for 0x402063>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ef3>, <DisassemblerInsn "jl" for 0x401ef8>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4023f8>, <DisassemblerInsn "call" for 0x4023fd>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043bd>, <DisassemblerInsn "xor" for 0x4043c1>, <DisassemblerInsn "mov" for 0x4043c4>, <DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "ret" for 0x4043cc>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402078>, <DisassemblerInsn "add" for 0x402080>, <DisassemblerInsn "mov" for 0x402086>, <DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "cmp" for 0x4020b0>, <DisassemblerInsn "jge" for 0x4020b3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40469e>, <DisassemblerInsn "add" for 0x4046a5>, <DisassemblerInsn "ret" for 0x4046ac>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020b9>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "mov" for 0x4020cb>, <DisassemblerInsn "add" for 0x4020d2>, <DisassemblerInsn "imul" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "cdq" for 0x4020e0>, <DisassemblerInsn "idiv" for 0x4020e1>, <DisassemblerInsn "and" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "movsxd" for 0x4020f4>, <DisassemblerInsn "imul" for 0x4020fc>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "mov" for 0x402108>, <DisassemblerInsn "cmp" for 0x40210d>, <DisassemblerInsn "je" for 0x402115>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4022a9>, <DisassemblerInsn "jg" for 0x4022ac>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "mov" for 0x401ed0>, <DisassemblerInsn "lea" for 0x401ed5>, <DisassemblerInsn "mov" for 0x401edc>, <DisassemblerInsn "call" for 0x401ede>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "cmp" for 0x4020b0>, <DisassemblerInsn "jge" for 0x4020b3>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402376>, <DisassemblerInsn "add" for 0x40237e>, <DisassemblerInsn "mov" for 0x402383>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "add" for 0x40238f>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "jmp" for 0x402399>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404370>, <DisassemblerInsn "mov" for 0x404374>, <DisassemblerInsn "mov" for 0x404378>, <DisassemblerInsn "xor" for 0x40437c>, <DisassemblerInsn "cmp" for 0x40437e>, <DisassemblerInsn "mov" for 0x404383>, <DisassemblerInsn "jne" for 0x404387>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efe>, <DisassemblerInsn "mov" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f11>, <DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "cmp" for 0x401f20>, <DisassemblerInsn "jge" for 0x401f23>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402329>, <DisassemblerInsn "add" for 0x402330>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "mov" for 0x402338>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x40234c>, <DisassemblerInsn "movsxd" for 0x402351>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "add" for 0x402363>, <DisassemblerInsn "mov" for 0x40236a>, <DisassemblerInsn "jmp" for 0x402371>]'}], 'cfg_block_detailed_info': [{'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2d31]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<jmp~~0x402424>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<cmp~~eax, dword ptr [rsp + 0x7c]>', '<jge~~0x402050>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 0x80]>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<movsxd~~rax, dword ptr [rsp + 0x14]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rax + 0x60]>', '<shl~~eax, 2>', '<cdqe~~>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402281>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~dword ptr [rsp + 0x90], 0>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402028>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0xe84], eax>', '<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 139, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jmp~~0x4020a1>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jmp~~0x401f93>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~dword ptr [rsp + 0xc], 0>', '<jne~~0x402199>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~dword ptr [rsp + 0xb4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~dword ptr [rsp + 0x94], r9d>', '<mov~~edi, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rax + 0x68]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~edx, dword ptr [rax + 0x80]>', '<call~~0x404370>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2d5e]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401ef3>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], eax>', '<cmp~~dword ptr [rsp + 0x84], 0>', '<jge~~0x40231f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movsxd~~rcx, dword ptr [rsp + 0x80]>', '<imul~~rcx, qword ptr [rsp + 0x98]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~dword ptr [rsp + 0x34], 0x80>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<cmp~~eax, dword ptr [rsp + 0x7c]>', '<jge~~0x402050>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402028>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rsi, [rsp + 0x60]>', '<lea~~rdx, [rsp + 0x30]>', '<call~~0x4043d0>']}, {'block_Idx': 66, 'blockInsts': ['<lea~~rdi, [rsp + 0x60]>', '<call~~0x500060>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<cmp~~dword ptr [rsp + 0xe0], 0>', '<je~~0x401ff8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402068>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx - 4]>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x40213e>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0>', '<jmp~~0x402424>']}, {'block_Idx': 110, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 38, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x40213e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0>', '<jmp~~0x402424>']}, {'block_Idx': 8, 'blockInsts': ['<sub~~rsp, 0xe88>', '<mov~~qword ptr [rsp + 0xe78], rdi>', '<mov~~qword ptr [rsp + 0xe70], rsi>', '<mov~~qword ptr [rsp + 0xe68], rdx>', '<mov~~rax, qword ptr [rsp + 0xe68]>', '<mov~~dword ptr [rax], 0xffffffff>', '<mov~~dword ptr [rsp + 0xe64], 0>', '<cmp~~dword ptr [rsp + 0xe64], 0x100>', '<jge~~0x40446a>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x401faf>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x402052>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2e55]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 87, 'blockInsts': ['<lea~~rdi, [rsp + 0x38]>', '<call~~0x404700>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x401faf>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402376>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jmp~~0x401f11>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 0>', '<jl~~0x402078>']}, {'block_Idx': 32, 'blockInsts': ['<lea~~rdi, [rsp + 0x60]>', '<call~~0x500060>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x14]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp - 4], eax>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<add~~rax, 0x100>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~dword ptr [rsp + 0x7c], 0>', '<mov~~dword ptr [rsp + 0x88], 0>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x4023f8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movsxd~~rcx, dword ptr [rsp + 0x80]>', '<imul~~rcx, qword ptr [rsp + 0x98]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x88], 0>', '<je~~0x402136>']}, {'block_Idx': 97, 'blockInsts': ['<cmp~~eax, 0>', '<jg~~0x4022d2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x30ea]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x4023f8>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jmp~~0x402265>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp - 0x10], 0>', '<mov~~byte ptr [rsp - 0x15], al>', '<jne~~0x404397>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], 0>', '<mov~~dword ptr [rsp + 0x88], 0>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402068>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402281>']}], 'cfg_edge_info': [(54, 65), (33, 42), (41, 49), (110, 66), (4, 6), (50, 58), (42, 51), (51, 59), (38, 47), (104, 108), (22, 26), (129, 131), (31, 38), (49, 56), (60, 19), (59, 33), (97, 102), (140, 88), (34, 43), (64, 50), (108, 32), (27, 34), (102, 110), (16, 19), (6, 8), (47, 55), (56, 64), (26, 32), (33, 41), (32, 48), (135, 140), (0, 1), (66, 68), (65, 66), (39, 47), (19, 23), (64, 49), (27, 33), (58, 42), (140, 87), (131, 139), (108, 31), (7, 6), (47, 54), (6, 19), (41, 50), (26, 31), (35, 43), (22, 27), (48, 43), (31, 39), (23, 35), (0, 6), (49, 57), (57, 64), (59, 34), (19, 22), (58, 41), (139, 66), (136, 140)], 'cdg_edge_info': [(58, 50), (19, 43), (41, 49), (108, 48), (27, 59), (47, 68), (41, 64), (22, 26), (26, 48), (59, 33), (55, 108), (59, 42), (108, 32), (58, 58), (59, 51), (47, 55), (26, 32), (108, 47), (33, 41), (33, 50), (26, 47), (22, 34), (19, 23), (64, 49), (22, 43), (27, 33), (19, 35), (108, 31), (27, 42), (47, 54), (27, 51), (64, 64), (59, 59), (108, 43), (140, 108), (47, 66), (26, 31), (22, 27), (26, 43), (33, 58), (49, 57), (19, 22), (58, 41)], 'ddg_edge_info': [(23, 68), (34, 68), (57, 33), (27, 59), (108, 54), (50, 58), (6, 33), (51, 59), (33, 57), (41, 64), (22, 26), (22, 32), (59, 33), (22, 41), (22, 47), (22, 50), (22, 59), (47, 55), (22, 68), (108, 47), (50, 57), (6, 26), (0, 50), (33, 50), (32, 48), (41, 57), (26, 108), (26, 47), (57, 59), (22, 31), (66, 68), (131, 66), (22, 34), (35, 68), (22, 49), (27, 33), (48, 68), (108, 31), (51, 33), (0, 31), (54, 66), (22, 55), (27, 51), (22, 58), (22, 64), (26, 31), (102, 66), (108, 55), (6, 31), (22, 27), (64, 57), (0, 64), (33, 58), (23, 35), (32, 68), (22, 33), (26, 55), (57, 64), (49, 57), (22, 51), (22, 54), (0, 33), (22, 57)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t0xb4(%rsp), %edi'}, {'instIndex': 11, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t0x68(%rax), %esi'}, {'instIndex': 13, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'callq\tcompute_cmask'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t0xd8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'leaq\t0x60(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 21, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'je\t.LBB3_2'}, {'instIndex': 24, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 27, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movb\t$0, %al'}, {'instIndex': 29, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O0/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O0/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 283 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t0xb4(%rsp), %edi'}, {'instIndex': 11, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t0x68(%rax), %esi'}, {'instIndex': 13, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'callq\tcompute_cmask'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t0xd8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'leaq\t0x60(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 21, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'je\t.LBB3_2'}, {'instIndex': 24, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 27, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movb\t$0, %al'}, {'instIndex': 29, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O0/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O0/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 668 nodes and 1098 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 283 instructions in binary file.
[4202032, 4202148, 4202175, 4202180]
The execution time of patched subCFG information extraction via angr: 0:00:01.368011
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ebf>, <DisassemblerInsn "je" for 0x401ec2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee3>, <DisassemblerInsn "jmp" for 0x401eee>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "mov" for 0x401ed0>, <DisassemblerInsn "lea" for 0x401ed5>, <DisassemblerInsn "mov" for 0x401edc>, <DisassemblerInsn "call" for 0x401ede>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea8>, <DisassemblerInsn "lea" for 0x401eb0>, <DisassemblerInsn "lea" for 0x401eb5>, <DisassemblerInsn "call" for 0x401eba>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ef3>, <DisassemblerInsn "jl" for 0x401ef8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e95>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "call" for 0x401e9f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401ef3>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<jmp~~0x402424>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x30ea]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rsi, [rsp + 0x60]>', '<lea~~rdx, [rsp + 0x30]>', '<call~~0x4043d0>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 0>', '<jl~~0x402078>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~dword ptr [rsp + 0xb4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~dword ptr [rsp + 0x94], r9d>', '<mov~~edi, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rax + 0x68]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~edx, dword ptr [rax + 0x80]>', '<call~~0x404370>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (2, 3), (4, 7)]}]}
{'decode_plane': [4202032, 4202148, 4202175, 4202180]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O0/utvideodec.o---after
The extraction of function: decode_plane
[4202032, 4202148, 4202175, 4202180]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 162 nodes and 243 edges in CFGEmulated.
It has 158 nodes and 216 edges in CDG.
It has 2960 nodes and 4020 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202032, 4202148, 4202175, 4202180]
{4203137, 4203522, 4203535, 4202257, 4202387, 4202905, 4203545, 4202657, 4202148, 4203556, 4202404, 4202536, 4202281, 4203182, 4202415, 4202032, 4202681, 4202814, 4202175, 4202180, 4202441, 4202576, 4202578, 4202616, 4202462, 4202211, 4202600, 4202227, 4202869, 4203512, 4203259, 4202238}
[131, 35, 58, 55, 135, 41, 60, 139, 7, 43, 104, 50, 47, 0, 102, 19, 68, 129, 33, 64, 6, 66, 49, 59, 39, 34, 110, 38, 48, 8, 57, 42, 54, 87, 56, 65, 140, 51, 22, 32, 4, 26, 16, 31, 97, 23, 108, 88, 1, 27, 136]
The execution time of patched slicing information extraction via angr: 0:00:11.233965
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022fb>, <DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "lea" for 0x40230c>, <DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "call" for 0x402315>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee3>, <DisassemblerInsn "jmp" for 0x401eee>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "cmp" for 0x401f9a>, <DisassemblerInsn "jge" for 0x401f9e>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402199>, <DisassemblerInsn "mov" for 0x4021a1>, <DisassemblerInsn "mov" for 0x4021a8>, <DisassemblerInsn "movsxd" for 0x4021b0>, <DisassemblerInsn "add" for 0x4021b5>, <DisassemblerInsn "mov" for 0x4021b8>, <DisassemblerInsn "mov" for 0x4021c0>, <DisassemblerInsn "shl" for 0x4021c3>, <DisassemblerInsn "cdqe" for 0x4021c6>, <DisassemblerInsn "add" for 0x4021c8>, <DisassemblerInsn "movsxd" for 0x4021cb>, <DisassemblerInsn "call" for 0x4021d0>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x40234c>, <DisassemblerInsn "movsxd" for 0x402351>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "add" for 0x402363>, <DisassemblerInsn "mov" for 0x40236a>, <DisassemblerInsn "jmp" for 0x402371>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "imul" for 0x401fbd>, <DisassemblerInsn "cmp" for 0x401fc5>, <DisassemblerInsn "jge" for 0x401fc7>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404697>, <DisassemblerInsn "mov" for 0x40469e>, <DisassemblerInsn "add" for 0x4046a5>, <DisassemblerInsn "ret" for 0x4046ac>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40231a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "ret" for 0x4043cc>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402424>, <DisassemblerInsn "add" for 0x40242b>, <DisassemblerInsn "ret" for 0x402432>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e2>, <DisassemblerInsn "add" for 0x4023e9>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "jmp" for 0x4023f3>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "add" for 0x402030>, <DisassemblerInsn "mov" for 0x402035>, <DisassemblerInsn "mov" for 0x40203a>, <DisassemblerInsn "add" for 0x402041>, <DisassemblerInsn "mov" for 0x402044>, <DisassemblerInsn "jmp" for 0x40204b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402142>, <DisassemblerInsn "mov" for 0x402146>, <DisassemblerInsn "mov" for 0x40214e>, <DisassemblerInsn "shl" for 0x402155>, <DisassemblerInsn "movsxd" for 0x402158>, <DisassemblerInsn "mov" for 0x40215b>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402162>, <DisassemblerInsn "sub" for 0x402166>, <DisassemblerInsn "mov" for 0x40216a>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "jne" for 0x402173>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e95>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "call" for 0x401e9f>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ae>, <DisassemblerInsn "mov" for 0x4022b6>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "lea" for 0x4022bf>, <DisassemblerInsn "mov" for 0x4022c6>, <DisassemblerInsn "call" for 0x4022c8>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ebf>, <DisassemblerInsn "je" for 0x401ec2>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402419>, <DisassemblerInsn "mov" for 0x402424>, <DisassemblerInsn "add" for 0x40242b>, <DisassemblerInsn "ret" for 0x402432>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ea>, <DisassemblerInsn "cmp" for 0x4022f1>, <DisassemblerInsn "jge" for 0x4022f9>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f29>, <DisassemblerInsn "mov" for 0x401f2d>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "add" for 0x401f42>, <DisassemblerInsn "imul" for 0x401f45>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "cdq" for 0x401f50>, <DisassemblerInsn "idiv" for 0x401f51>, <DisassemblerInsn "and" for 0x401f54>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5c>, <DisassemblerInsn "movsxd" for 0x401f64>, <DisassemblerInsn "imul" for 0x401f6c>, <DisassemblerInsn "add" for 0x401f75>, <DisassemblerInsn "mov" for 0x401f78>, <DisassemblerInsn "mov" for 0x401f7d>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "mov" for 0x401f8c>, <DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "cmp" for 0x401f9a>, <DisassemblerInsn "jge" for 0x401f9e>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "imul" for 0x401fbd>, <DisassemblerInsn "cmp" for 0x401fc5>, <DisassemblerInsn "jge" for 0x401fc7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea8>, <DisassemblerInsn "lea" for 0x401eb0>, <DisassemblerInsn "lea" for 0x401eb5>, <DisassemblerInsn "call" for 0x401eba>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40240f>, <DisassemblerInsn "call" for 0x402414>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fdc>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f11>, <DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "cmp" for 0x401f20>, <DisassemblerInsn "jge" for 0x401f23>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402117>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "shl" for 0x402126>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "mov" for 0x40212c>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "jmp" for 0x402134>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "jmp" for 0x402073>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022cd>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "jmp" for 0x40213c>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402402>, <DisassemblerInsn "jmp" for 0x40240d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4043d0>, <DisassemblerInsn "mov" for 0x4043d7>, <DisassemblerInsn "mov" for 0x4043df>, <DisassemblerInsn "mov" for 0x4043e7>, <DisassemblerInsn "mov" for 0x4043ef>, <DisassemblerInsn "mov" for 0x4043f7>, <DisassemblerInsn "mov" for 0x4043fd>, <DisassemblerInsn "cmp" for 0x404408>, <DisassemblerInsn "jge" for 0x404413>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fde>, <DisassemblerInsn "add" for 0x401fe5>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "mov" for 0x401fed>, <DisassemblerInsn "mov" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "movsxd" for 0x402006>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "add" for 0x402018>, <DisassemblerInsn "mov" for 0x40201f>, <DisassemblerInsn "jmp" for 0x402026>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402050>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402175>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "lea" for 0x402186>, <DisassemblerInsn "mov" for 0x40218d>, <DisassemblerInsn "call" for 0x40218f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40229f>, <DisassemblerInsn "call" for 0x4022a4>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "movsxd" for 0x402006>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "add" for 0x402018>, <DisassemblerInsn "mov" for 0x40201f>, <DisassemblerInsn "jmp" for 0x402026>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402194>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402281>, <DisassemblerInsn "mov" for 0x402288>, <DisassemblerInsn "imul" for 0x40228f>, <DisassemblerInsn "cmp" for 0x402297>, <DisassemblerInsn "jge" for 0x402299>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402052>, <DisassemblerInsn "add" for 0x402059>, <DisassemblerInsn "mov" for 0x40205c>, <DisassemblerInsn "jmp" for 0x402063>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ef3>, <DisassemblerInsn "jl" for 0x401ef8>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4023f8>, <DisassemblerInsn "call" for 0x4023fd>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043bd>, <DisassemblerInsn "xor" for 0x4043c1>, <DisassemblerInsn "mov" for 0x4043c4>, <DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "ret" for 0x4043cc>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402078>, <DisassemblerInsn "add" for 0x402080>, <DisassemblerInsn "mov" for 0x402086>, <DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "cmp" for 0x4020b0>, <DisassemblerInsn "jge" for 0x4020b3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40469e>, <DisassemblerInsn "add" for 0x4046a5>, <DisassemblerInsn "ret" for 0x4046ac>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020b9>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "mov" for 0x4020cb>, <DisassemblerInsn "add" for 0x4020d2>, <DisassemblerInsn "imul" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "cdq" for 0x4020e0>, <DisassemblerInsn "idiv" for 0x4020e1>, <DisassemblerInsn "and" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "movsxd" for 0x4020f4>, <DisassemblerInsn "imul" for 0x4020fc>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "mov" for 0x402108>, <DisassemblerInsn "cmp" for 0x40210d>, <DisassemblerInsn "je" for 0x402115>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4022a9>, <DisassemblerInsn "jg" for 0x4022ac>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "mov" for 0x401ed0>, <DisassemblerInsn "lea" for 0x401ed5>, <DisassemblerInsn "mov" for 0x401edc>, <DisassemblerInsn "call" for 0x401ede>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "cmp" for 0x4020b0>, <DisassemblerInsn "jge" for 0x4020b3>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402376>, <DisassemblerInsn "add" for 0x40237e>, <DisassemblerInsn "mov" for 0x402383>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "add" for 0x40238f>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "jmp" for 0x402399>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404370>, <DisassemblerInsn "mov" for 0x404374>, <DisassemblerInsn "mov" for 0x404378>, <DisassemblerInsn "xor" for 0x40437c>, <DisassemblerInsn "cmp" for 0x40437e>, <DisassemblerInsn "mov" for 0x404383>, <DisassemblerInsn "jne" for 0x404387>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efe>, <DisassemblerInsn "mov" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f11>, <DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "cmp" for 0x401f20>, <DisassemblerInsn "jge" for 0x401f23>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402329>, <DisassemblerInsn "add" for 0x402330>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "mov" for 0x402338>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x40234c>, <DisassemblerInsn "movsxd" for 0x402351>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "add" for 0x402363>, <DisassemblerInsn "mov" for 0x40236a>, <DisassemblerInsn "jmp" for 0x402371>]'}], 'cfg_block_detailed_info': [{'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2d31]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<jmp~~0x402424>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<cmp~~eax, dword ptr [rsp + 0x7c]>', '<jge~~0x402050>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 0x80]>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<movsxd~~rax, dword ptr [rsp + 0x14]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rax + 0x60]>', '<shl~~eax, 2>', '<cdqe~~>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402281>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~dword ptr [rsp + 0x90], 0>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402028>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0xe84], eax>', '<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 139, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jmp~~0x4020a1>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jmp~~0x401f93>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~dword ptr [rsp + 0xc], 0>', '<jne~~0x402199>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~dword ptr [rsp + 0xb4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~dword ptr [rsp + 0x94], r9d>', '<mov~~edi, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rax + 0x68]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~edx, dword ptr [rax + 0x80]>', '<call~~0x404370>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2d5e]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401ef3>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0xc1444e49>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], eax>', '<cmp~~dword ptr [rsp + 0x84], 0>', '<jge~~0x40231f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movsxd~~rcx, dword ptr [rsp + 0x80]>', '<imul~~rcx, qword ptr [rsp + 0x98]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~dword ptr [rsp + 0x34], 0x80>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<cmp~~eax, dword ptr [rsp + 0x7c]>', '<jge~~0x402050>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402028>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rsi, [rsp + 0x60]>', '<lea~~rdx, [rsp + 0x30]>', '<call~~0x4043d0>']}, {'block_Idx': 66, 'blockInsts': ['<lea~~rdi, [rsp + 0x60]>', '<call~~0x500060>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<cmp~~dword ptr [rsp + 0xe0], 0>', '<je~~0x401ff8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402068>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx - 4]>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x40213e>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0>', '<jmp~~0x402424>']}, {'block_Idx': 110, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 38, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x40213e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc4], 0>', '<jmp~~0x402424>']}, {'block_Idx': 8, 'blockInsts': ['<sub~~rsp, 0xe88>', '<mov~~qword ptr [rsp + 0xe78], rdi>', '<mov~~qword ptr [rsp + 0xe70], rsi>', '<mov~~qword ptr [rsp + 0xe68], rdx>', '<mov~~rax, qword ptr [rsp + 0xe68]>', '<mov~~dword ptr [rax], 0xffffffff>', '<mov~~dword ptr [rsp + 0xe64], 0>', '<cmp~~dword ptr [rsp + 0xe64], 0x100>', '<jge~~0x40446a>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x401faf>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x402052>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2e55]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 87, 'blockInsts': ['<lea~~rdi, [rsp + 0x38]>', '<call~~0x404700>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x401faf>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x40240f>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<imul~~ecx, dword ptr [rsp + 0xa4]>', '<cmp~~eax, ecx>', '<jge~~0x402376>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jmp~~0x401f11>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 0>', '<jl~~0x402078>']}, {'block_Idx': 32, 'blockInsts': ['<lea~~rdi, [rsp + 0x60]>', '<call~~0x500060>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x14]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp - 4], eax>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<add~~rax, 0x100>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~dword ptr [rsp + 0x7c], 0>', '<mov~~dword ptr [rsp + 0x88], 0>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x4023f8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~eax, dword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<movsxd~~rcx, dword ptr [rsp + 0x80]>', '<imul~~rcx, qword ptr [rsp + 0x98]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x88], 0>', '<je~~0x402136>']}, {'block_Idx': 97, 'blockInsts': ['<cmp~~eax, 0>', '<jg~~0x4022d2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x30ea]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x4023f8>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jmp~~0x402265>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp - 0x10], 0>', '<mov~~byte ptr [rsp - 0x15], al>', '<jne~~0x404397>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], 0>', '<mov~~dword ptr [rsp + 0x88], 0>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402068>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402281>']}], 'cfg_edge_info': [(54, 65), (33, 42), (41, 49), (110, 66), (4, 6), (50, 58), (42, 51), (51, 59), (38, 47), (104, 108), (22, 26), (129, 131), (31, 38), (49, 56), (60, 19), (59, 33), (97, 102), (140, 88), (34, 43), (64, 50), (108, 32), (27, 34), (102, 110), (16, 19), (6, 8), (47, 55), (56, 64), (26, 32), (33, 41), (32, 48), (135, 140), (0, 1), (66, 68), (65, 66), (39, 47), (19, 23), (64, 49), (27, 33), (58, 42), (140, 87), (131, 139), (108, 31), (7, 6), (47, 54), (6, 19), (41, 50), (26, 31), (35, 43), (22, 27), (48, 43), (31, 39), (23, 35), (0, 6), (49, 57), (57, 64), (59, 34), (19, 22), (58, 41), (139, 66), (136, 140)], 'cdg_edge_info': [(58, 50), (19, 43), (41, 49), (108, 48), (27, 59), (47, 68), (41, 64), (22, 26), (26, 48), (59, 33), (55, 108), (59, 42), (108, 32), (58, 58), (59, 51), (47, 55), (26, 32), (108, 47), (33, 41), (33, 50), (26, 47), (22, 34), (19, 23), (64, 49), (22, 43), (27, 33), (19, 35), (108, 31), (27, 42), (47, 54), (27, 51), (64, 64), (59, 59), (108, 43), (140, 108), (47, 66), (26, 31), (22, 27), (26, 43), (33, 58), (49, 57), (19, 22), (58, 41)], 'ddg_edge_info': [(23, 68), (34, 68), (57, 33), (27, 59), (108, 54), (50, 58), (6, 33), (51, 59), (33, 57), (41, 64), (22, 26), (22, 32), (59, 33), (22, 41), (22, 47), (22, 50), (22, 59), (47, 55), (22, 68), (108, 47), (50, 57), (6, 26), (0, 50), (33, 50), (32, 48), (41, 57), (26, 108), (26, 47), (57, 59), (22, 31), (66, 68), (131, 66), (22, 34), (35, 68), (22, 49), (27, 33), (48, 68), (108, 31), (51, 33), (0, 31), (54, 66), (22, 55), (27, 51), (22, 58), (22, 64), (26, 31), (102, 66), (108, 55), (6, 31), (22, 27), (64, 57), (0, 64), (33, 58), (23, 35), (32, 68), (22, 33), (26, 55), (57, 64), (49, 57), (22, 51), (22, 54), (0, 33), (22, 57)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t0xb4(%rsp), %edi'}, {'instIndex': 11, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movl\t0x68(%rax), %esi'}, {'instIndex': 13, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x80(%rax), %edx'}, {'instIndex': 16, 'instruction': 'callq\tcompute_cmask'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t0xd8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'leaq\t0x60(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 21, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'je\t.LBB3_2'}, {'instIndex': 24, 'instruction': 'movq\t0xb8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 27, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 28, 'instruction': 'movb\t$0, %al'}, {'instIndex': 29, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O1/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O1/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 1007 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x548(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x508(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 177, 'instruction': 'testb\t$1, %al'}, {'instIndex': 178, 'instruction': 'jne\t.LBB3_11'}, {'instIndex': 180, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 181, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 182, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 183, 'instruction': 'movb\t$0, %al'}, {'instIndex': 184, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O1/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O1/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 549 nodes and 952 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1007 instructions in binary file.
[4201968, 4202931, 4202956, 4202981]
The execution time of patched subCFG information extraction via angr: 0:00:02.055451
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "movzx" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "jmp" for 0x401fa6>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "movzx" for 0x402162>, <DisassemblerInsn "add" for 0x402166>, <DisassemblerInsn "lea" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "xor" for 0x402177>, <DisassemblerInsn "mov" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402189>, <DisassemblerInsn "mov" for 0x402191>, <DisassemblerInsn "mov" for 0x402196>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "call" for 0x4021ae>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "mov" for 0x4021ed>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "lea" for 0x4021f5>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "call" for 0x4021fe>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401df0>, <DisassemblerInsn "push" for 0x401df1>, <DisassemblerInsn "push" for 0x401df3>, <DisassemblerInsn "sub" for 0x401df4>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "mov" for 0x401e1a>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e49>, <DisassemblerInsn "lea" for 0x401e50>, <DisassemblerInsn "mov" for 0x401e58>, <DisassemblerInsn "mov" for 0x401e5b>, <DisassemblerInsn "add" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e62>, <DisassemblerInsn "mov" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "or" for 0x401e75>, <DisassemblerInsn "cmp" for 0x401e78>, <DisassemblerInsn "sete" for 0x401e7c>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e84>, <DisassemblerInsn "cmp" for 0x401e89>, <DisassemblerInsn "cmove" for 0x401e8d>, <DisassemblerInsn "and" for 0x401e90>, <DisassemblerInsn "movzx" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e96>, <DisassemblerInsn "cmove" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9c>, <DisassemblerInsn "lea" for 0x401ea3>, <DisassemblerInsn "mov" for 0x401eab>, <DisassemblerInsn "lea" for 0x401eb3>, <DisassemblerInsn "mov" for 0x401ebb>, <DisassemblerInsn "lea" for 0x401ec3>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401edb>, <DisassemblerInsn "xor" for 0x401ee3>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eed>, <DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f05>, <DisassemblerInsn "mov" for 0x401f08>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "add" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1f>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "jne" for 0x401f4b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "cmp" for 0x40221b>, <DisassemblerInsn "jle" for 0x40221e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "test" for 0x4021e1>, <DisassemblerInsn "jne" for 0x4021e3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402134>, <DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "movzx" for 0x402162>, <DisassemblerInsn "add" for 0x402166>, <DisassemblerInsn "lea" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "xor" for 0x402177>, <DisassemblerInsn "mov" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402189>, <DisassemblerInsn "mov" for 0x402191>, <DisassemblerInsn "mov" for 0x402196>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "call" for 0x4021ae>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "jmp" for 0x40220f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021b3>, <DisassemblerInsn "sete" for 0x4021b6>, <DisassemblerInsn "mov" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021be>, <DisassemblerInsn "mov" for 0x4021c5>, <DisassemblerInsn "mov" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "test" for 0x4021e1>, <DisassemblerInsn "jne" for 0x4021e3>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f4d>, <DisassemblerInsn "mov" for 0x401f55>, <DisassemblerInsn "xor" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f70>, <DisassemblerInsn "call" for 0x401f77>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f05>, <DisassemblerInsn "mov" for 0x401f08>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "add" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1f>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "jne" for 0x401f4b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fab>, <DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "xor" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "mov" for 0x401fc3>, <DisassemblerInsn "mov" for 0x401fcb>, <DisassemblerInsn "mov" for 0x401fd2>, <DisassemblerInsn "ja" for 0x401fd9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<movzx~~ecx, word ptr [rsp + 0xb60]>', '<mov~~al, 1>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<jmp~~0x4021cc>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x548]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5129]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1360>', '<mov~~dword ptr [rsp + 0x4cc], r9d>', '<mov~~qword ptr [rsp + 0x4d0], r8>', '<mov~~dword ptr [rsp + 0x4dc], ecx>', '<mov~~qword ptr [rsp + 0x4e0], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x4e8], rdi>', '<mov~~eax, dword ptr [rsp + 0x1390]>', '<mov~~dword ptr [rsp + 0x4f4], eax>', '<mov~~rax, qword ptr [rsp + 0x1388]>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~edx, dword ptr [rsp + 0x1380]>', '<mov~~dword ptr [rsp + 0x504], edx>', '<lea~~rdx, [rsp + 0x548]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x508], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xb60]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x760]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x660]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x560]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb60], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb62], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c0], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x401ef5>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x444]>', '<cmp~~eax, -1>', '<jle~~0x4024b5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4af]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402214>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x44a]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x548]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b8>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~ecx, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4af]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402214>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x518]>', '<mov~~eax, dword ptr [rsp + 0x514]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe0e9]>', '<call~~0x500068>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb60], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb62], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c0], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x401ef5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0x4b7]>', '<mov~~ecx, 0xffffffff>', '<xor~~eax, eax>', '<mov~~edx, 0xff>', '<cmp~~sil, 0x20>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<ja~~0x4021cc>']}], 'cfg_edge_info': [(0, 1), (24, 8), (19, 24), (20, 24), (6, 8), (4, 6), (0, 2), (24, 9), (5, 6), (6, 9), (8, 11)]}]}
{'decode_plane': [4201968, 4202931, 4202956, 4202981]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O1/utvideodec.o---after
The extraction of function: decode_plane
[4201968, 4202931, 4202956, 4202981]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 89 nodes and 144 edges in CFGEmulated.
It has 87 nodes and 146 edges in CDG.
It has 4226 nodes and 5420 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201968, 4202931, 4202956, 4202981]
{4206592, 4203266, 4203011, 4206082, 4207749, 4207494, 4207751, 4206216, 4206466, 4202382, 4202770, 4203410, 4203028, 4207764, 4205842, 4206872, 4207775, 4207009, 4203044, 4204581, 4205222, 4205609, 4202411, 4207788, 4202797, 4202546, 4202931, 4207155, 4203701, 4206902, 4207800, 4205497, 4205752, 4202811, 4205376, 4204994, 4203204, 4204101, 4205639, 4207307, 4202956, 4202317, 4204367, 4203984, 4206674, 4203350, 4203095, 4203481, 4206298, 4204893, 4204510, 4202463, 4202592, 4204256, 4207460, 4202981, 4207590, 4203623, 4202364, 4204137, 4205924, 4204648, 4204397, 4204782, 4201968, 4202229, 4207740}
[38, 29, 87, 82, 58, 65, 49, 20, 76, 60, 74, 23, 77, 24, 25, 28, 80, 5, 34, 13, 78, 59, 72, 2, 54, 33, 48, 68, 71, 4, 81, 45, 43, 8, 10, 18, 15, 44, 84, 16, 86, 1, 36, 52, 17, 21, 85, 31, 56, 19, 6, 66, 37, 35, 57, 50, 73, 79, 46, 9, 63, 42, 75, 62, 61, 64, 7, 0, 47, 30, 39, 70, 12, 55, 11, 22]
The execution time of patched slicing information extraction via angr: 0:00:09.286979
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "xor" for 0x403494>, <DisassemblerInsn "mov" for 0x403496>, <DisassemblerInsn "jmp" for 0x40349d>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c4>, <DisassemblerInsn "mov" for 0x4022cb>, <DisassemblerInsn "mov" for 0x4022d2>, <DisassemblerInsn "mov" for 0x4022da>, <DisassemblerInsn "xor" for 0x4022dc>, <DisassemblerInsn "cmp" for 0x4022de>, <DisassemblerInsn "mov" for 0x4022e0>, <DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ee>, <DisassemblerInsn "mov" for 0x4022f5>, <DisassemblerInsn "jge" for 0x4022fc>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403052>, <DisassemblerInsn "mov" for 0x40305a>, <DisassemblerInsn "mov" for 0x403062>, <DisassemblerInsn "mov" for 0x403069>, <DisassemblerInsn "mov" for 0x403070>, <DisassemblerInsn "mov" for 0x403078>, <DisassemblerInsn "add" for 0x403080>, <DisassemblerInsn "mov" for 0x403083>, <DisassemblerInsn "mov" for 0x403085>, <DisassemblerInsn "shr" for 0x403088>, <DisassemblerInsn "mov" for 0x40308b>, <DisassemblerInsn "add" for 0x40308e>, <DisassemblerInsn "mov" for 0x403091>, <DisassemblerInsn "mov" for 0x403093>, <DisassemblerInsn "movsx" for 0x403096>, <DisassemblerInsn "movsx" for 0x40309c>, <DisassemblerInsn "mov" for 0x4030a1>, <DisassemblerInsn "mov" for 0x4030a8>, <DisassemblerInsn "mov" for 0x4030b0>, <DisassemblerInsn "mov" for 0x4030b8>, <DisassemblerInsn "mov" for 0x4030bf>, <DisassemblerInsn "mov" for 0x4030c6>, <DisassemblerInsn "mov" for 0x4030cd>, <DisassemblerInsn "mov" for 0x4030d5>, <DisassemblerInsn "mov" for 0x4030dd>, <DisassemblerInsn "mov" for 0x4030e4>, <DisassemblerInsn "mov" for 0x4030eb>, <DisassemblerInsn "mov" for 0x4030ef>, <DisassemblerInsn "mov" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f8>, <DisassemblerInsn "shl" for 0x4030fa>, <DisassemblerInsn "mov" for 0x4030fd>, <DisassemblerInsn "mov" for 0x403101>, <DisassemblerInsn "sub" for 0x403106>, <DisassemblerInsn "mov" for 0x403108>, <DisassemblerInsn "cmp" for 0x40310f>, <DisassemblerInsn "jge" for 0x403112>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f82>, <DisassemblerInsn "mov" for 0x402f8a>, <DisassemblerInsn "mov" for 0x402f91>, <DisassemblerInsn "mov" for 0x402f98>, <DisassemblerInsn "mov" for 0x402f9f>, <DisassemblerInsn "mov" for 0x402fa7>, <DisassemblerInsn "shl" for 0x402fae>, <DisassemblerInsn "mov" for 0x402fb1>, <DisassemblerInsn "mov" for 0x402fb9>, <DisassemblerInsn "add" for 0x402fc1>, <DisassemblerInsn "mov" for 0x402fc3>, <DisassemblerInsn "neg" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fcc>, <DisassemblerInsn "sub" for 0x402fce>, <DisassemblerInsn "setb" for 0x402fd0>, <DisassemblerInsn "mov" for 0x402fd4>, <DisassemblerInsn "sub" for 0x402fd7>, <DisassemblerInsn "setb" for 0x402fda>, <DisassemblerInsn "and" for 0x402fde>, <DisassemblerInsn "test" for 0x402fe1>, <DisassemblerInsn "mov" for 0x402fe5>, <DisassemblerInsn "mov" for 0x402fec>, <DisassemblerInsn "mov" for 0x402ff4>, <DisassemblerInsn "jne" for 0x402ffc>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "mov" for 0x402aad>, <DisassemblerInsn "mov" for 0x402ab5>, <DisassemblerInsn "mov" for 0x402abd>, <DisassemblerInsn "mov" for 0x402ac4>, <DisassemblerInsn "mov" for 0x402acc>, <DisassemblerInsn "mov" for 0x402ad4>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "mov" for 0x402adf>, <DisassemblerInsn "mov" for 0x402ae7>, <DisassemblerInsn "mov" for 0x402ae9>, <DisassemblerInsn "mov" for 0x402af0>, <DisassemblerInsn "sub" for 0x402af6>, <DisassemblerInsn "mov" for 0x402af9>, <DisassemblerInsn "mov" for 0x402afc>, <DisassemblerInsn "mov" for 0x402b04>, <DisassemblerInsn "mov" for 0x402b06>, <DisassemblerInsn "mov" for 0x402b0e>, <DisassemblerInsn "mov" for 0x402b13>, <DisassemblerInsn "mov" for 0x402b1b>, <DisassemblerInsn "mov" for 0x402b22>, <DisassemblerInsn "mov" for 0x402b29>, <DisassemblerInsn "mov" for 0x402b31>, <DisassemblerInsn "mov" for 0x402b39>, <DisassemblerInsn "mov" for 0x402b40>, <DisassemblerInsn "mov" for 0x402b48>, <DisassemblerInsn "mov" for 0x402b50>, <DisassemblerInsn "mov" for 0x402b58>, <DisassemblerInsn "mov" for 0x402b5f>, <DisassemblerInsn "mov" for 0x402b67>, <DisassemblerInsn "mov" for 0x402b6f>, <DisassemblerInsn "mov" for 0x402b76>, <DisassemblerInsn "mov" for 0x402b7e>, <DisassemblerInsn "xor" for 0x402b86>, <DisassemblerInsn "test" for 0x402b88>, <DisassemblerInsn "mov" for 0x402b8c>, <DisassemblerInsn "mov" for 0x402b94>, <DisassemblerInsn "mov" for 0x402b9b>, <DisassemblerInsn "mov" for 0x402ba3>, <DisassemblerInsn "mov" for 0x402bab>, <DisassemblerInsn "jne" for 0x402bb2>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c29>, <DisassemblerInsn "mov" for 0x402c31>, <DisassemblerInsn "mov" for 0x402c34>, <DisassemblerInsn "lea" for 0x402c39>, <DisassemblerInsn "mov" for 0x402c40>, <DisassemblerInsn "call" for 0x402c42>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40349f>, <DisassemblerInsn "call" for 0x4034a7>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "jmp" for 0x40220f>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030c6>, <DisassemblerInsn "mov" for 0x4030cd>, <DisassemblerInsn "mov" for 0x4030d5>, <DisassemblerInsn "mov" for 0x4030dd>, <DisassemblerInsn "mov" for 0x4030e4>, <DisassemblerInsn "mov" for 0x4030eb>, <DisassemblerInsn "mov" for 0x4030ef>, <DisassemblerInsn "mov" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f8>, <DisassemblerInsn "shl" for 0x4030fa>, <DisassemblerInsn "mov" for 0x4030fd>, <DisassemblerInsn "mov" for 0x403101>, <DisassemblerInsn "sub" for 0x403106>, <DisassemblerInsn "mov" for 0x403108>, <DisassemblerInsn "cmp" for 0x40310f>, <DisassemblerInsn "jge" for 0x403112>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c2>, <DisassemblerInsn "mov" for 0x4029ca>, <DisassemblerInsn "mov" for 0x4029d2>, <DisassemblerInsn "mov" for 0x4029da>, <DisassemblerInsn "bswap" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "add" for 0x4029e3>, <DisassemblerInsn "mov" for 0x4029e7>, <DisassemblerInsn "mov" for 0x4029ec>, <DisassemblerInsn "mov" for 0x4029f4>, <DisassemblerInsn "mov" for 0x4029fb>, <DisassemblerInsn "mov" for 0x402a03>, <DisassemblerInsn "mov" for 0x402a0b>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a22>, <DisassemblerInsn "mov" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a31>, <DisassemblerInsn "mov" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "mov" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "mov" for 0x402a70>, <DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7f>, <DisassemblerInsn "cmp" for 0x402a87>, <DisassemblerInsn "mov" for 0x402a89>, <DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a98>, <DisassemblerInsn "jge" for 0x402aa0>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d64>, <DisassemblerInsn "mov" for 0x402d6c>, <DisassemblerInsn "mov" for 0x402d73>, <DisassemblerInsn "mov" for 0x402d7b>, <DisassemblerInsn "mov" for 0x402d83>, <DisassemblerInsn "mov" for 0x402d8b>, <DisassemblerInsn "mov" for 0x402d93>, <DisassemblerInsn "mov" for 0x402d9a>, <DisassemblerInsn "shr" for 0x402d9d>, <DisassemblerInsn "mov" for 0x402da0>, <DisassemblerInsn "movabs" for 0x402da8>, <DisassemblerInsn "and" for 0x402db2>, <DisassemblerInsn "movsx" for 0x402db5>, <DisassemblerInsn "mov" for 0x402dba>, <DisassemblerInsn "mov" for 0x402dc1>, <DisassemblerInsn "movsx" for 0x402dc7>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "cmp" for 0x402dd2>, <DisassemblerInsn "mov" for 0x402dd7>, <DisassemblerInsn "mov" for 0x402dde>, <DisassemblerInsn "mov" for 0x402de6>, <DisassemblerInsn "mov" for 0x402dee>, <DisassemblerInsn "mov" for 0x402df5>, <DisassemblerInsn "jge" for 0x402dfc>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402302>, <DisassemblerInsn "mov" for 0x402309>, <DisassemblerInsn "mov" for 0x402310>, <DisassemblerInsn "mov" for 0x402317>, <DisassemblerInsn "mov" for 0x40231e>, <DisassemblerInsn "add" for 0x402325>, <DisassemblerInsn "mov" for 0x402328>, <DisassemblerInsn "imul" for 0x40232f>, <DisassemblerInsn "cdq" for 0x402332>, <DisassemblerInsn "idiv" for 0x402333>, <DisassemblerInsn "mov" for 0x402335>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x40233e>, <DisassemblerInsn "and" for 0x402345>, <DisassemblerInsn "mov" for 0x402347>, <DisassemblerInsn "cmp" for 0x40234e>, <DisassemblerInsn "jge" for 0x402350>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e86>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "mov" for 0x402679>, <DisassemblerInsn "mov" for 0x402681>, <DisassemblerInsn "mov" for 0x402688>, <DisassemblerInsn "mov" for 0x40268f>, <DisassemblerInsn "add" for 0x402692>, <DisassemblerInsn "mov" for 0x402696>, <DisassemblerInsn "imul" for 0x40269e>, <DisassemblerInsn "cdq" for 0x4026a1>, <DisassemblerInsn "idiv" for 0x4026a2>, <DisassemblerInsn "mov" for 0x4026a4>, <DisassemblerInsn "mov" for 0x4026ab>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "and" for 0x4026b5>, <DisassemblerInsn "mov" for 0x4026b8>, <DisassemblerInsn "movsxd" for 0x4026bf>, <DisassemblerInsn "imul" for 0x4026c2>, <DisassemblerInsn "add" for 0x4026c6>, <DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "xor" for 0x4026d1>, <DisassemblerInsn "cmp" for 0x4026d3>, <DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "je" for 0x4026de>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403487>, <DisassemblerInsn "call" for 0x40348f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402356>, <DisassemblerInsn "mov" for 0x40235d>, <DisassemblerInsn "mov" for 0x402365>, <DisassemblerInsn "movsxd" for 0x40236d>, <DisassemblerInsn "imul" for 0x402370>, <DisassemblerInsn "add" for 0x402374>, <DisassemblerInsn "mov" for 0x402377>, <DisassemblerInsn "mov" for 0x40237c>, <DisassemblerInsn "mov" for 0x402384>, <DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "mov" for 0x402399>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b6>, <DisassemblerInsn "xor" for 0x4023be>, <DisassemblerInsn "test" for 0x4023c0>, <DisassemblerInsn "mov" for 0x4023c3>, <DisassemblerInsn "mov" for 0x4023cb>, <DisassemblerInsn "jne" for 0x4023d2>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031a1>, <DisassemblerInsn "mov" for 0x4031a8>, <DisassemblerInsn "mov" for 0x4031ad>, <DisassemblerInsn "mov" for 0x4031b2>, <DisassemblerInsn "mov" for 0x4031ba>, <DisassemblerInsn "mov" for 0x4031c2>, <DisassemblerInsn "mov" for 0x4031ca>, <DisassemblerInsn "mov" for 0x4031d2>, <DisassemblerInsn "mov" for 0x4031d9>, <DisassemblerInsn "mov" for 0x4031e1>, <DisassemblerInsn "mov" for 0x4031e6>, <DisassemblerInsn "add" for 0x4031e9>, <DisassemblerInsn "test" for 0x4031eb>, <DisassemblerInsn "mov" for 0x4031ef>, <DisassemblerInsn "cmovne" for 0x4031f2>, <DisassemblerInsn "test" for 0x4031f6>, <DisassemblerInsn "cmovne" for 0x4031fa>, <DisassemblerInsn "mov" for 0x4031fd>, <DisassemblerInsn "add" for 0x403201>, <DisassemblerInsn "cmp" for 0x403204>, <DisassemblerInsn "mov" for 0x403207>, <DisassemblerInsn "mov" for 0x40320f>, <DisassemblerInsn "mov" for 0x403216>, <DisassemblerInsn "mov" for 0x40321e>, <DisassemblerInsn "mov" for 0x403226>, <DisassemblerInsn "jl" for 0x40322d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "movzx" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "jmp" for 0x401fa6>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023d4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b5>, <DisassemblerInsn "mov" for 0x4024bd>, <DisassemblerInsn "mov" for 0x4024c4>, <DisassemblerInsn "mov" for 0x4024cc>, <DisassemblerInsn "mov" for 0x4024d3>, <DisassemblerInsn "mov" for 0x4024da>, <DisassemblerInsn "mov" for 0x4024e2>, <DisassemblerInsn "add" for 0x4024e5>, <DisassemblerInsn "mov" for 0x4024ec>, <DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "add" for 0x4024f7>, <DisassemblerInsn "mov" for 0x4024fb>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "add" for 0x402506>, <DisassemblerInsn "mov" for 0x40250d>, <DisassemblerInsn "add" for 0x402515>, <DisassemblerInsn "mov" for 0x402519>, <DisassemblerInsn "mov" for 0x402521>, <DisassemblerInsn "imul" for 0x402529>, <DisassemblerInsn "cmp" for 0x40252c>, <DisassemblerInsn "setg" for 0x40252f>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "lea" for 0x40253b>, <DisassemblerInsn "add" for 0x402543>, <DisassemblerInsn "mov" for 0x402547>, <DisassemblerInsn "lea" for 0x40254f>, <DisassemblerInsn "mov" for 0x402557>, <DisassemblerInsn "cmp" for 0x40255f>, <DisassemblerInsn "sete" for 0x402562>, <DisassemblerInsn "mov" for 0x402566>, <DisassemblerInsn "mov" for 0x40256e>, <DisassemblerInsn "mov" for 0x402571>, <DisassemblerInsn "mov" for 0x402579>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "mov" for 0x402584>, <DisassemblerInsn "mov" for 0x402587>, <DisassemblerInsn "mov" for 0x40258f>, <DisassemblerInsn "movsxd" for 0x402597>, <DisassemblerInsn "mov" for 0x40259a>, <DisassemblerInsn "movsxd" for 0x4025a2>, <DisassemblerInsn "mov" for 0x4025a5>, <DisassemblerInsn "add" for 0x4025ad>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "xor" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025bd>, <DisassemblerInsn "xor" for 0x4025bf>, <DisassemblerInsn "mov" for 0x4025c1>, <DisassemblerInsn "mov" for 0x4025c9>, <DisassemblerInsn "mov" for 0x4025d0>, <DisassemblerInsn "mov" for 0x4025d8>, <DisassemblerInsn "mov" for 0x4025e0>, <DisassemblerInsn "mov" for 0x4025e7>, <DisassemblerInsn "mov" for 0x4025ee>, <DisassemblerInsn "mov" for 0x4025f6>, <DisassemblerInsn "mov" for 0x4025fe>, <DisassemblerInsn "mov" for 0x402606>, <DisassemblerInsn "mov" for 0x40260e>, <DisassemblerInsn "mov" for 0x402616>, <DisassemblerInsn "mov" for 0x40261e>, <DisassemblerInsn "mov" for 0x402626>, <DisassemblerInsn "mov" for 0x40262e>, <DisassemblerInsn "mov" for 0x402636>, <DisassemblerInsn "mov" for 0x40263e>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e88>, <DisassemblerInsn "mov" for 0x402e8f>, <DisassemblerInsn "mov" for 0x402e97>, <DisassemblerInsn "mov" for 0x402e9f>, <DisassemblerInsn "bswap" for 0x402ea1>, <DisassemblerInsn "mov" for 0x402ea3>, <DisassemblerInsn "mov" for 0x402ea5>, <DisassemblerInsn "sub" for 0x402eaa>, <DisassemblerInsn "mov" for 0x402eac>, <DisassemblerInsn "shl" for 0x402eae>, <DisassemblerInsn "mov" for 0x402eb1>, <DisassemblerInsn "or" for 0x402eb9>, <DisassemblerInsn "add" for 0x402ebc>, <DisassemblerInsn "add" for 0x402ec0>, <DisassemblerInsn "mov" for 0x402ec3>, <DisassemblerInsn "mov" for 0x402eca>, <DisassemblerInsn "mov" for 0x402ed2>, <DisassemblerInsn "mov" for 0x402eda>, <DisassemblerInsn "mov" for 0x402ee2>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef1>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402f00>, <DisassemblerInsn "mov" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f10>, <DisassemblerInsn "mov" for 0x402f18>, <DisassemblerInsn "add" for 0x402f1f>, <DisassemblerInsn "mov" for 0x402f22>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "shr" for 0x402f27>, <DisassemblerInsn "mov" for 0x402f2a>, <DisassemblerInsn "add" for 0x402f2d>, <DisassemblerInsn "mov" for 0x402f30>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "mov" for 0x402f35>, <DisassemblerInsn "movsx" for 0x402f3b>, <DisassemblerInsn "mov" for 0x402f3f>, <DisassemblerInsn "movsx" for 0x402f46>, <DisassemblerInsn "mov" for 0x402f4b>, <DisassemblerInsn "cmp" for 0x402f52>, <DisassemblerInsn "mov" for 0x402f57>, <DisassemblerInsn "mov" for 0x402f5e>, <DisassemblerInsn "mov" for 0x402f66>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "mov" for 0x402f75>, <DisassemblerInsn "jge" for 0x402f7c>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032cb>, <DisassemblerInsn "mov" for 0x4032d3>, <DisassemblerInsn "mov" for 0x4032db>, <DisassemblerInsn "mov" for 0x4032e3>, <DisassemblerInsn "mov" for 0x4032eb>, <DisassemblerInsn "mov" for 0x4032f3>, <DisassemblerInsn "mov" for 0x4032fb>, <DisassemblerInsn "mov" for 0x403300>, <DisassemblerInsn "mov" for 0x403305>, <DisassemblerInsn "mov" for 0x40330a>, <DisassemblerInsn "sub" for 0x40330d>, <DisassemblerInsn "shl" for 0x403310>, <DisassemblerInsn "mov" for 0x403313>, <DisassemblerInsn "add" for 0x403316>, <DisassemblerInsn "add" for 0x403319>, <DisassemblerInsn "mov" for 0x40331c>, <DisassemblerInsn "xor" for 0x403321>, <DisassemblerInsn "cmp" for 0x403323>, <DisassemblerInsn "mov" for 0x403327>, <DisassemblerInsn "mov" for 0x40332f>, <DisassemblerInsn "mov" for 0x403337>, <DisassemblerInsn "mov" for 0x40333f>, <DisassemblerInsn "mov" for 0x403347>, <DisassemblerInsn "mov" for 0x40334f>, <DisassemblerInsn "mov" for 0x403357>, <DisassemblerInsn "jle" for 0x40335e>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403386>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "mov" for 0x403393>, <DisassemblerInsn "mov" for 0x403398>, <DisassemblerInsn "mov" for 0x4033a0>, <DisassemblerInsn "mov" for 0x4033a8>, <DisassemblerInsn "xor" for 0x4033ad>, <DisassemblerInsn "mov" for 0x4033af>, <DisassemblerInsn "mov" for 0x4033b7>, <DisassemblerInsn "mov" for 0x4033bf>, <DisassemblerInsn "mov" for 0x4033c7>, <DisassemblerInsn "mov" for 0x4033cf>, <DisassemblerInsn "mov" for 0x4033d7>, <DisassemblerInsn "mov" for 0x4033df>, <DisassemblerInsn "mov" for 0x4033e6>, <DisassemblerInsn "mov" for 0x4033ed>, <DisassemblerInsn "mov" for 0x4033f5>, <DisassemblerInsn "mov" for 0x4033fd>, <DisassemblerInsn "mov" for 0x403405>, <DisassemblerInsn "mov" for 0x40340d>, <DisassemblerInsn "mov" for 0x403415>, <DisassemblerInsn "mov" for 0x40341d>, <DisassemblerInsn "mov" for 0x403425>, <DisassemblerInsn "mov" for 0x40342d>, <DisassemblerInsn "test" for 0x403432>, <DisassemblerInsn "mov" for 0x403435>, <DisassemblerInsn "mov" for 0x40343d>, <DisassemblerInsn "mov" for 0x403445>, <DisassemblerInsn "mov" for 0x40344d>, <DisassemblerInsn "mov" for 0x403455>, <DisassemblerInsn "mov" for 0x40345d>, <DisassemblerInsn "mov" for 0x403465>, <DisassemblerInsn "mov" for 0x40346d>, <DisassemblerInsn "je" for 0x403474>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f4d>, <DisassemblerInsn "mov" for 0x401f55>, <DisassemblerInsn "xor" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f70>, <DisassemblerInsn "call" for 0x401f77>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402868>, <DisassemblerInsn "mov" for 0x402870>, <DisassemblerInsn "mov" for 0x402878>, <DisassemblerInsn "mov" for 0x402880>, <DisassemblerInsn "mov" for 0x402887>, <DisassemblerInsn "mov" for 0x40288f>, <DisassemblerInsn "mov" for 0x402897>, <DisassemblerInsn "mov" for 0x40289f>, <DisassemblerInsn "mov" for 0x4028a7>, <DisassemblerInsn "mov" for 0x4028aa>, <DisassemblerInsn "cmp" for 0x4028b2>, <DisassemblerInsn "mov" for 0x4028b9>, <DisassemblerInsn "mov" for 0x4028c1>, <DisassemblerInsn "mov" for 0x4028c8>, <DisassemblerInsn "mov" for 0x4028d0>, <DisassemblerInsn "mov" for 0x4028d8>, <DisassemblerInsn "mov" for 0x4028e0>, <DisassemblerInsn "ja" for 0x4028e8>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021b3>, <DisassemblerInsn "sete" for 0x4021b6>, <DisassemblerInsn "mov" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021be>, <DisassemblerInsn "mov" for 0x4021c5>, <DisassemblerInsn "mov" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "test" for 0x4021e1>, <DisassemblerInsn "jne" for 0x4021e3>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40347c>, <DisassemblerInsn "sub" for 0x403480>, <DisassemblerInsn "je" for 0x403483>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b40>, <DisassemblerInsn "mov" for 0x402b48>, <DisassemblerInsn "mov" for 0x402b50>, <DisassemblerInsn "mov" for 0x402b58>, <DisassemblerInsn "mov" for 0x402b5f>, <DisassemblerInsn "mov" for 0x402b67>, <DisassemblerInsn "mov" for 0x402b6f>, <DisassemblerInsn "mov" for 0x402b76>, <DisassemblerInsn "mov" for 0x402b7e>, <DisassemblerInsn "xor" for 0x402b86>, <DisassemblerInsn "test" for 0x402b88>, <DisassemblerInsn "mov" for 0x402b8c>, <DisassemblerInsn "mov" for 0x402b94>, <DisassemblerInsn "mov" for 0x402b9b>, <DisassemblerInsn "mov" for 0x402ba3>, <DisassemblerInsn "mov" for 0x402bab>, <DisassemblerInsn "jne" for 0x402bb2>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d12>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "mov" for 0x402d29>, <DisassemblerInsn "bswap" for 0x402d2b>, <DisassemblerInsn "mov" for 0x402d2d>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "sub" for 0x402d34>, <DisassemblerInsn "mov" for 0x402d36>, <DisassemblerInsn "shl" for 0x402d38>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "or" for 0x402d43>, <DisassemblerInsn "add" for 0x402d46>, <DisassemblerInsn "add" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "mov" for 0x402d54>, <DisassemblerInsn "mov" for 0x402d5c>, <DisassemblerInsn "mov" for 0x402d64>, <DisassemblerInsn "mov" for 0x402d6c>, <DisassemblerInsn "mov" for 0x402d73>, <DisassemblerInsn "mov" for 0x402d7b>, <DisassemblerInsn "mov" for 0x402d83>, <DisassemblerInsn "mov" for 0x402d8b>, <DisassemblerInsn "mov" for 0x402d93>, <DisassemblerInsn "mov" for 0x402d9a>, <DisassemblerInsn "shr" for 0x402d9d>, <DisassemblerInsn "mov" for 0x402da0>, <DisassemblerInsn "movabs" for 0x402da8>, <DisassemblerInsn "and" for 0x402db2>, <DisassemblerInsn "movsx" for 0x402db5>, <DisassemblerInsn "mov" for 0x402dba>, <DisassemblerInsn "mov" for 0x402dc1>, <DisassemblerInsn "movsx" for 0x402dc7>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "cmp" for 0x402dd2>, <DisassemblerInsn "mov" for 0x402dd7>, <DisassemblerInsn "mov" for 0x402dde>, <DisassemblerInsn "mov" for 0x402de6>, <DisassemblerInsn "mov" for 0x402dee>, <DisassemblerInsn "mov" for 0x402df5>, <DisassemblerInsn "jge" for 0x402dfc>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "cmp" for 0x401f8a>, <DisassemblerInsn "jne" for 0x401f8c>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eda>, <DisassemblerInsn "mov" for 0x402ee2>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef1>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402f00>, <DisassemblerInsn "mov" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f10>, <DisassemblerInsn "mov" for 0x402f18>, <DisassemblerInsn "add" for 0x402f1f>, <DisassemblerInsn "mov" for 0x402f22>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "shr" for 0x402f27>, <DisassemblerInsn "mov" for 0x402f2a>, <DisassemblerInsn "add" for 0x402f2d>, <DisassemblerInsn "mov" for 0x402f30>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "mov" for 0x402f35>, <DisassemblerInsn "movsx" for 0x402f3b>, <DisassemblerInsn "mov" for 0x402f3f>, <DisassemblerInsn "movsx" for 0x402f46>, <DisassemblerInsn "mov" for 0x402f4b>, <DisassemblerInsn "cmp" for 0x402f52>, <DisassemblerInsn "mov" for 0x402f57>, <DisassemblerInsn "mov" for 0x402f5e>, <DisassemblerInsn "mov" for 0x402f66>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "mov" for 0x402f75>, <DisassemblerInsn "jge" for 0x402f7c>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033e6>, <DisassemblerInsn "mov" for 0x4033ed>, <DisassemblerInsn "mov" for 0x4033f5>, <DisassemblerInsn "mov" for 0x4033fd>, <DisassemblerInsn "mov" for 0x403405>, <DisassemblerInsn "mov" for 0x40340d>, <DisassemblerInsn "mov" for 0x403415>, <DisassemblerInsn "mov" for 0x40341d>, <DisassemblerInsn "mov" for 0x403425>, <DisassemblerInsn "mov" for 0x40342d>, <DisassemblerInsn "test" for 0x403432>, <DisassemblerInsn "mov" for 0x403435>, <DisassemblerInsn "mov" for 0x40343d>, <DisassemblerInsn "mov" for 0x403445>, <DisassemblerInsn "mov" for 0x40344d>, <DisassemblerInsn "mov" for 0x403455>, <DisassemblerInsn "mov" for 0x40345d>, <DisassemblerInsn "mov" for 0x403465>, <DisassemblerInsn "mov" for 0x40346d>, <DisassemblerInsn "je" for 0x403474>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40276d>, <DisassemblerInsn "mov" for 0x402775>, <DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402785>, <DisassemblerInsn "mov" for 0x40278d>, <DisassemblerInsn "mov" for 0x402795>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x4027a2>, <DisassemblerInsn "mov" for 0x4027aa>, <DisassemblerInsn "mov" for 0x4027b2>, <DisassemblerInsn "mov" for 0x4027ba>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "jmp" for 0x4027d9>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdf>, <DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fef>, <DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "sub" for 0x401ffd>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "sete" for 0x402007>, <DisassemblerInsn "test" for 0x40200a>, <DisassemblerInsn "setne" for 0x40200d>, <DisassemblerInsn "and" for 0x402010>, <DisassemblerInsn "mov" for 0x402012>, <DisassemblerInsn "add" for 0x402019>, <DisassemblerInsn "mov" for 0x40201d>, <DisassemblerInsn "test" for 0x402025>, <DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "jne" for 0x402030>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "mov" for 0x4021ed>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "lea" for 0x4021f5>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "call" for 0x4021fe>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402257>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402265>, <DisassemblerInsn "mov" for 0x40226c>, <DisassemblerInsn "imul" for 0x402273>, <DisassemblerInsn "cmp" for 0x402276>, <DisassemblerInsn "setg" for 0x402279>, <DisassemblerInsn "mov" for 0x40227d>, <DisassemblerInsn "cmp" for 0x402285>, <DisassemblerInsn "sete" for 0x402288>, <DisassemblerInsn "mov" for 0x40228c>, <DisassemblerInsn "movsxd" for 0x402294>, <DisassemblerInsn "mov" for 0x402297>, <DisassemblerInsn "cdqe" for 0x40229f>, <DisassemblerInsn "mov" for 0x4022a1>, <DisassemblerInsn "xor" for 0x4022a9>, <DisassemblerInsn "mov" for 0x4022ab>, <DisassemblerInsn "mov" for 0x4022b2>, <DisassemblerInsn "mov" for 0x4022b4>, <DisassemblerInsn "mov" for 0x4022bb>, <DisassemblerInsn "jmp" for 0x4022c2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402060>, <DisassemblerInsn "mov" for 0x402067>, <DisassemblerInsn "mov" for 0x40206f>, <DisassemblerInsn "mov" for 0x402076>, <DisassemblerInsn "movzx" for 0x40207d>, <DisassemblerInsn "mov" for 0x402080>, <DisassemblerInsn "mov" for 0x402087>, <DisassemblerInsn "sub" for 0x40208c>, <DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "shr" for 0x402095>, <DisassemblerInsn "mov" for 0x402097>, <DisassemblerInsn "mov" for 0x40209e>, <DisassemblerInsn "mov" for 0x4020a5>, <DisassemblerInsn "mov" for 0x4020ac>, <DisassemblerInsn "mov" for 0x4020b3>, <DisassemblerInsn "mov" for 0x4020bb>, <DisassemblerInsn "add" for 0x4020c2>, <DisassemblerInsn "mov" for 0x4020c5>, <DisassemblerInsn "mov" for 0x4020cc>, <DisassemblerInsn "shr" for 0x4020d1>, <DisassemblerInsn "mov" for 0x4020d3>, <DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "add" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e3>, <DisassemblerInsn "mov" for 0x4020ea>, <DisassemblerInsn "add" for 0x4020ed>, <DisassemblerInsn "mov" for 0x4020f1>, <DisassemblerInsn "cmp" for 0x4020f9>, <DisassemblerInsn "mov" for 0x4020fd>, <DisassemblerInsn "mov" for 0x402105>, <DisassemblerInsn "jg" for 0x40210c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "mov" for 0x402399>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b6>, <DisassemblerInsn "xor" for 0x4023be>, <DisassemblerInsn "test" for 0x4023c0>, <DisassemblerInsn "mov" for 0x4023c3>, <DisassemblerInsn "mov" for 0x4023cb>, <DisassemblerInsn "jne" for 0x4023d2>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ffe>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x40211b>, <DisassemblerInsn "cmp" for 0x402122>, <DisassemblerInsn "mov" for 0x402124>, <DisassemblerInsn "jb" for 0x40212b>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403136>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403146>, <DisassemblerInsn "mov" for 0x40314b>, <DisassemblerInsn "mov" for 0x403153>, <DisassemblerInsn "mov" for 0x40315b>, <DisassemblerInsn "mov" for 0x403160>, <DisassemblerInsn "mov" for 0x403165>, <DisassemblerInsn "mov" for 0x40316d>, <DisassemblerInsn "mov" for 0x403175>, <DisassemblerInsn "mov" for 0x40317d>, <DisassemblerInsn "mov" for 0x403185>, <DisassemblerInsn "mov" for 0x40318d>, <DisassemblerInsn "mov" for 0x403195>, <DisassemblerInsn "jmp" for 0x40319c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f05>, <DisassemblerInsn "mov" for 0x401f08>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "add" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1f>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "jne" for 0x401f4b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40274f>, <DisassemblerInsn "mov" for 0x402757>, <DisassemblerInsn "mov" for 0x40275a>, <DisassemblerInsn "lea" for 0x40275f>, <DisassemblerInsn "mov" for 0x402766>, <DisassemblerInsn "call" for 0x402768>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034ac>, <DisassemblerInsn "mov" for 0x4034b1>, <DisassemblerInsn "mov" for 0x4034b8>, <DisassemblerInsn "add" for 0x4034bf>, <DisassemblerInsn "pop" for 0x4034c6>, <DisassemblerInsn "pop" for 0x4034c7>, <DisassemblerInsn "pop" for 0x4034c9>, <DisassemblerInsn "ret" for 0x4034ca>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034b8>, <DisassemblerInsn "add" for 0x4034bf>, <DisassemblerInsn "pop" for 0x4034c6>, <DisassemblerInsn "pop" for 0x4034c7>, <DisassemblerInsn "pop" for 0x4034c9>, <DisassemblerInsn "ret" for 0x4034ca>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "movzx" for 0x402162>, <DisassemblerInsn "add" for 0x402166>, <DisassemblerInsn "lea" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "xor" for 0x402177>, <DisassemblerInsn "mov" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402189>, <DisassemblerInsn "mov" for 0x402191>, <DisassemblerInsn "mov" for 0x402196>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "call" for 0x4021ae>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403000>, <DisassemblerInsn "mov" for 0x403007>, <DisassemblerInsn "mov" for 0x40300f>, <DisassemblerInsn "mov" for 0x403017>, <DisassemblerInsn "bswap" for 0x403019>, <DisassemblerInsn "mov" for 0x40301b>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "sub" for 0x403022>, <DisassemblerInsn "mov" for 0x403024>, <DisassemblerInsn "shl" for 0x403026>, <DisassemblerInsn "mov" for 0x403029>, <DisassemblerInsn "or" for 0x403031>, <DisassemblerInsn "add" for 0x403034>, <DisassemblerInsn "add" for 0x403038>, <DisassemblerInsn "mov" for 0x40303b>, <DisassemblerInsn "mov" for 0x403042>, <DisassemblerInsn "mov" for 0x40304a>, <DisassemblerInsn "mov" for 0x403052>, <DisassemblerInsn "mov" for 0x40305a>, <DisassemblerInsn "mov" for 0x403062>, <DisassemblerInsn "mov" for 0x403069>, <DisassemblerInsn "mov" for 0x403070>, <DisassemblerInsn "mov" for 0x403078>, <DisassemblerInsn "add" for 0x403080>, <DisassemblerInsn "mov" for 0x403083>, <DisassemblerInsn "mov" for 0x403085>, <DisassemblerInsn "shr" for 0x403088>, <DisassemblerInsn "mov" for 0x40308b>, <DisassemblerInsn "add" for 0x40308e>, <DisassemblerInsn "mov" for 0x403091>, <DisassemblerInsn "mov" for 0x403093>, <DisassemblerInsn "movsx" for 0x403096>, <DisassemblerInsn "movsx" for 0x40309c>, <DisassemblerInsn "mov" for 0x4030a1>, <DisassemblerInsn "mov" for 0x4030a8>, <DisassemblerInsn "mov" for 0x4030b0>, <DisassemblerInsn "mov" for 0x4030b8>, <DisassemblerInsn "mov" for 0x4030bf>, <DisassemblerInsn "mov" for 0x4030c6>, <DisassemblerInsn "mov" for 0x4030cd>, <DisassemblerInsn "mov" for 0x4030d5>, <DisassemblerInsn "mov" for 0x4030dd>, <DisassemblerInsn "mov" for 0x4030e4>, <DisassemblerInsn "mov" for 0x4030eb>, <DisassemblerInsn "mov" for 0x4030ef>, <DisassemblerInsn "mov" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f8>, <DisassemblerInsn "shl" for 0x4030fa>, <DisassemblerInsn "mov" for 0x4030fd>, <DisassemblerInsn "mov" for 0x403101>, <DisassemblerInsn "sub" for 0x403106>, <DisassemblerInsn "mov" for 0x403108>, <DisassemblerInsn "cmp" for 0x40310f>, <DisassemblerInsn "jge" for 0x403112>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e8>, <DisassemblerInsn "shl" for 0x4026f0>, <DisassemblerInsn "movabs" for 0x4026f4>, <DisassemblerInsn "and" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402701>, <DisassemblerInsn "mov" for 0x402704>, <DisassemblerInsn "mov" for 0x40270b>, <DisassemblerInsn "mov" for 0x402713>, <DisassemblerInsn "mov" for 0x40271b>, <DisassemblerInsn "mov" for 0x402722>, <DisassemblerInsn "shl" for 0x402729>, <DisassemblerInsn "movabs" for 0x40272d>, <DisassemblerInsn "and" for 0x402737>, <DisassemblerInsn "mov" for 0x40273a>, <DisassemblerInsn "sub" for 0x40273d>, <DisassemblerInsn "mov" for 0x40273f>, <DisassemblerInsn "cmp" for 0x402746>, <DisassemblerInsn "jne" for 0x402749>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a22>, <DisassemblerInsn "mov" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a31>, <DisassemblerInsn "mov" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "mov" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "mov" for 0x402a70>, <DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7f>, <DisassemblerInsn "cmp" for 0x402a87>, <DisassemblerInsn "mov" for 0x402a89>, <DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a98>, <DisassemblerInsn "jge" for 0x402aa0>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402645>, <DisassemblerInsn "mov" for 0x40264c>, <DisassemblerInsn "mov" for 0x402654>, <DisassemblerInsn "mov" for 0x402656>, <DisassemblerInsn "movsxd" for 0x40265d>, <DisassemblerInsn "cmp" for 0x402660>, <DisassemblerInsn "jge" for 0x402663>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fab>, <DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "xor" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "mov" for 0x401fc3>, <DisassemblerInsn "mov" for 0x401fcb>, <DisassemblerInsn "mov" for 0x401fd2>, <DisassemblerInsn "ja" for 0x401fd9>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb8>, <DisassemblerInsn "mov" for 0x402cc0>, <DisassemblerInsn "mov" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd7>, <DisassemblerInsn "mov" for 0x402cde>, <DisassemblerInsn "sub" for 0x402ce0>, <DisassemblerInsn "setb" for 0x402ce2>, <DisassemblerInsn "mov" for 0x402ce6>, <DisassemblerInsn "sub" for 0x402ce9>, <DisassemblerInsn "setb" for 0x402cec>, <DisassemblerInsn "and" for 0x402cf0>, <DisassemblerInsn "test" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cf7>, <DisassemblerInsn "mov" for 0x402cfe>, <DisassemblerInsn "mov" for 0x402d06>, <DisassemblerInsn "jne" for 0x402d0e>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027de>, <DisassemblerInsn "mov" for 0x4027e5>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "mov" for 0x4027f4>, <DisassemblerInsn "mov" for 0x4027fc>, <DisassemblerInsn "mov" for 0x402803>, <DisassemblerInsn "movsxd" for 0x402806>, <DisassemblerInsn "add" for 0x402809>, <DisassemblerInsn "shl" for 0x40280c>, <DisassemblerInsn "movsxd" for 0x40280f>, <DisassemblerInsn "add" for 0x402812>, <DisassemblerInsn "movsxd" for 0x402815>, <DisassemblerInsn "mov" for 0x402818>, <DisassemblerInsn "call" for 0x402820>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d9>, <DisassemblerInsn "mov" for 0x4023e1>, <DisassemblerInsn "mov" for 0x4023e9>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f9>, <DisassemblerInsn "mov" for 0x402401>, <DisassemblerInsn "mov" for 0x402409>, <DisassemblerInsn "mov" for 0x402411>, <DisassemblerInsn "add" for 0x402414>, <DisassemblerInsn "mov" for 0x402417>, <DisassemblerInsn "test" for 0x40241e>, <DisassemblerInsn "mov" for 0x402422>, <DisassemblerInsn "cmovne" for 0x402425>, <DisassemblerInsn "mov" for 0x402429>, <DisassemblerInsn "test" for 0x402431>, <DisassemblerInsn "cmovne" for 0x402435>, <DisassemblerInsn "mov" for 0x402439>, <DisassemblerInsn "mov" for 0x402440>, <DisassemblerInsn "add" for 0x402444>, <DisassemblerInsn "mov" for 0x402447>, <DisassemblerInsn "cmp" for 0x40244f>, <DisassemblerInsn "mov" for 0x402452>, <DisassemblerInsn "mov" for 0x40245a>, <DisassemblerInsn "jl" for 0x402461>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40295d>, <DisassemblerInsn "mov" for 0x402965>, <DisassemblerInsn "mov" for 0x40296c>, <DisassemblerInsn "and" for 0x402973>, <DisassemblerInsn "mov" for 0x402978>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "add" for 0x40297d>, <DisassemblerInsn "mov" for 0x402980>, <DisassemblerInsn "xor" for 0x402988>, <DisassemblerInsn "xor" for 0x40298a>, <DisassemblerInsn "cmp" for 0x40298c>, <DisassemblerInsn "mov" for 0x40298f>, <DisassemblerInsn "mov" for 0x402996>, <DisassemblerInsn "mov" for 0x40299d>, <DisassemblerInsn "mov" for 0x4029a0>, <DisassemblerInsn "mov" for 0x4029a8>, <DisassemblerInsn "mov" for 0x4029b0>, <DisassemblerInsn "mov" for 0x4029b8>, <DisassemblerInsn "je" for 0x4029c0>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403485>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c47>, <DisassemblerInsn "mov" for 0x402c4f>, <DisassemblerInsn "mov" for 0x402c57>, <DisassemblerInsn "mov" for 0x402c5f>, <DisassemblerInsn "mov" for 0x402c67>, <DisassemblerInsn "mov" for 0x402c6f>, <DisassemblerInsn "mov" for 0x402c77>, <DisassemblerInsn "mov" for 0x402c7c>, <DisassemblerInsn "mov" for 0x402c84>, <DisassemblerInsn "mov" for 0x402c8c>, <DisassemblerInsn "mov" for 0x402c94>, <DisassemblerInsn "mov" for 0x402c9c>, <DisassemblerInsn "mov" for 0x402ca4>, <DisassemblerInsn "mov" for 0x402cac>, <DisassemblerInsn "jmp" for 0x402cb3>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403118>, <DisassemblerInsn "mov" for 0x403120>, <DisassemblerInsn "mov" for 0x403123>, <DisassemblerInsn "lea" for 0x403128>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "call" for 0x403131>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40347a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "cmp" for 0x40221b>, <DisassemblerInsn "jle" for 0x40221e>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403364>, <DisassemblerInsn "mov" for 0x403368>, <DisassemblerInsn "mov" for 0x403370>, <DisassemblerInsn "mov" for 0x403373>, <DisassemblerInsn "lea" for 0x403378>, <DisassemblerInsn "mov" for 0x40337f>, <DisassemblerInsn "call" for 0x403381>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4024b0>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e02>, <DisassemblerInsn "mov" for 0x402e0a>, <DisassemblerInsn "mov" for 0x402e11>, <DisassemblerInsn "mov" for 0x402e18>, <DisassemblerInsn "mov" for 0x402e1f>, <DisassemblerInsn "mov" for 0x402e27>, <DisassemblerInsn "shl" for 0x402e2f>, <DisassemblerInsn "mov" for 0x402e32>, <DisassemblerInsn "mov" for 0x402e3a>, <DisassemblerInsn "sub" for 0x402e42>, <DisassemblerInsn "mov" for 0x402e44>, <DisassemblerInsn "neg" for 0x402e4b>, <DisassemblerInsn "mov" for 0x402e4d>, <DisassemblerInsn "mov" for 0x402e54>, <DisassemblerInsn "sub" for 0x402e56>, <DisassemblerInsn "setb" for 0x402e58>, <DisassemblerInsn "mov" for 0x402e5c>, <DisassemblerInsn "sub" for 0x402e5f>, <DisassemblerInsn "setb" for 0x402e62>, <DisassemblerInsn "and" for 0x402e66>, <DisassemblerInsn "test" for 0x402e69>, <DisassemblerInsn "mov" for 0x402e6d>, <DisassemblerInsn "mov" for 0x402e74>, <DisassemblerInsn "mov" for 0x402e7c>, <DisassemblerInsn "jne" for 0x402e84>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bb9>, <DisassemblerInsn "mov" for 0x402bc0>, <DisassemblerInsn "mov" for 0x402bc8>, <DisassemblerInsn "mov" for 0x402bd0>, <DisassemblerInsn "mov" for 0x402bd8>, <DisassemblerInsn "mov" for 0x402be0>, <DisassemblerInsn "mov" for 0x402be8>, <DisassemblerInsn "mov" for 0x402bef>, <DisassemblerInsn "mov" for 0x402bf6>, <DisassemblerInsn "mov" for 0x402bfe>, <DisassemblerInsn "mov" for 0x402c06>, <DisassemblerInsn "mov" for 0x402c0e>, <DisassemblerInsn "sub" for 0x402c16>, <DisassemblerInsn "shl" for 0x402c19>, <DisassemblerInsn "add" for 0x402c1c>, <DisassemblerInsn "add" for 0x402c1e>, <DisassemblerInsn "cmp" for 0x402c20>, <DisassemblerInsn "jge" for 0x402c23>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402bb4>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403233>, <DisassemblerInsn "mov" for 0x40323b>, <DisassemblerInsn "mov" for 0x403242>, <DisassemblerInsn "mov" for 0x40324a>, <DisassemblerInsn "mov" for 0x403252>, <DisassemblerInsn "mov" for 0x403259>, <DisassemblerInsn "mov" for 0x403261>, <DisassemblerInsn "mov" for 0x403269>, <DisassemblerInsn "add" for 0x403270>, <DisassemblerInsn "add" for 0x403273>, <DisassemblerInsn "cmp" for 0x403276>, <DisassemblerInsn "mov" for 0x403279>, <DisassemblerInsn "mov" for 0x403281>, <DisassemblerInsn "mov" for 0x403288>, <DisassemblerInsn "mov" for 0x40328f>, <DisassemblerInsn "mov" for 0x403292>, <DisassemblerInsn "mov" for 0x40329a>, <DisassemblerInsn "mov" for 0x40329d>, <DisassemblerInsn "mov" for 0x4032a5>, <DisassemblerInsn "mov" for 0x4032a7>, <DisassemblerInsn "mov" for 0x4032ae>, <DisassemblerInsn "mov" for 0x4032b5>, <DisassemblerInsn "mov" for 0x4032bd>, <DisassemblerInsn "jne" for 0x4032c5>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "test" for 0x4021e1>, <DisassemblerInsn "jne" for 0x4021e3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401df0>, <DisassemblerInsn "push" for 0x401df1>, <DisassemblerInsn "push" for 0x401df3>, <DisassemblerInsn "sub" for 0x401df4>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "mov" for 0x401e1a>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e49>, <DisassemblerInsn "lea" for 0x401e50>, <DisassemblerInsn "mov" for 0x401e58>, <DisassemblerInsn "mov" for 0x401e5b>, <DisassemblerInsn "add" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e62>, <DisassemblerInsn "mov" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "or" for 0x401e75>, <DisassemblerInsn "cmp" for 0x401e78>, <DisassemblerInsn "sete" for 0x401e7c>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e84>, <DisassemblerInsn "cmp" for 0x401e89>, <DisassemblerInsn "cmove" for 0x401e8d>, <DisassemblerInsn "and" for 0x401e90>, <DisassemblerInsn "movzx" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e96>, <DisassemblerInsn "cmove" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9c>, <DisassemblerInsn "lea" for 0x401ea3>, <DisassemblerInsn "mov" for 0x401eab>, <DisassemblerInsn "lea" for 0x401eb3>, <DisassemblerInsn "mov" for 0x401ebb>, <DisassemblerInsn "lea" for 0x401ec3>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401edb>, <DisassemblerInsn "xor" for 0x401ee3>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eed>, <DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f05>, <DisassemblerInsn "mov" for 0x401f08>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "add" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1f>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "jne" for 0x401f4b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025d0>, <DisassemblerInsn "mov" for 0x4025d8>, <DisassemblerInsn "mov" for 0x4025e0>, <DisassemblerInsn "mov" for 0x4025e7>, <DisassemblerInsn "mov" for 0x4025ee>, <DisassemblerInsn "mov" for 0x4025f6>, <DisassemblerInsn "mov" for 0x4025fe>, <DisassemblerInsn "mov" for 0x402606>, <DisassemblerInsn "mov" for 0x40260e>, <DisassemblerInsn "mov" for 0x402616>, <DisassemblerInsn "mov" for 0x40261e>, <DisassemblerInsn "mov" for 0x402626>, <DisassemblerInsn "mov" for 0x40262e>, <DisassemblerInsn "mov" for 0x402636>, <DisassemblerInsn "mov" for 0x40263e>, <DisassemblerInsn "mov" for 0x402645>, <DisassemblerInsn "mov" for 0x40264c>, <DisassemblerInsn "mov" for 0x402654>, <DisassemblerInsn "mov" for 0x402656>, <DisassemblerInsn "movsxd" for 0x40265d>, <DisassemblerInsn "cmp" for 0x402660>, <DisassemblerInsn "jge" for 0x402663>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40270b>, <DisassemblerInsn "mov" for 0x402713>, <DisassemblerInsn "mov" for 0x40271b>, <DisassemblerInsn "mov" for 0x402722>, <DisassemblerInsn "shl" for 0x402729>, <DisassemblerInsn "movabs" for 0x40272d>, <DisassemblerInsn "and" for 0x402737>, <DisassemblerInsn "mov" for 0x40273a>, <DisassemblerInsn "sub" for 0x40273d>, <DisassemblerInsn "mov" for 0x40273f>, <DisassemblerInsn "cmp" for 0x402746>, <DisassemblerInsn "jne" for 0x402749>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402467>, <DisassemblerInsn "mov" for 0x40246e>, <DisassemblerInsn "mov" for 0x402475>, <DisassemblerInsn "mov" for 0x40247d>, <DisassemblerInsn "mov" for 0x402485>, <DisassemblerInsn "add" for 0x40248c>, <DisassemblerInsn "add" for 0x40248f>, <DisassemblerInsn "cmp" for 0x402492>, <DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x40249c>, <DisassemblerInsn "mov" for 0x4024a3>, <DisassemblerInsn "je" for 0x4024aa>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d10>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402224>, <DisassemblerInsn "mov" for 0x40222c>, <DisassemblerInsn "add" for 0x40222f>, <DisassemblerInsn "mov" for 0x402233>, <DisassemblerInsn "mov" for 0x40223b>, <DisassemblerInsn "mov" for 0x40223e>, <DisassemblerInsn "xor" for 0x402245>, <DisassemblerInsn "cmp" for 0x402247>, <DisassemblerInsn "mov" for 0x40224a>, <DisassemblerInsn "jle" for 0x402251>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028ee>, <DisassemblerInsn "mov" for 0x4028f6>, <DisassemblerInsn "mov" for 0x4028fe>, <DisassemblerInsn "mov" for 0x402905>, <DisassemblerInsn "mov" for 0x40290d>, <DisassemblerInsn "shl" for 0x402914>, <DisassemblerInsn "mov" for 0x402917>, <DisassemblerInsn "xor" for 0x40291e>, <DisassemblerInsn "xor" for 0x402920>, <DisassemblerInsn "cmp" for 0x402922>, <DisassemblerInsn "mov" for 0x402926>, <DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402934>, <DisassemblerInsn "mov" for 0x402937>, <DisassemblerInsn "mov" for 0x40293f>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "mov" for 0x40294f>, <DisassemblerInsn "je" for 0x402957>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "mov" for 0x40203a>, <DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "cmp" for 0x402048>, <DisassemblerInsn "mov" for 0x40204b>, <DisassemblerInsn "mov" for 0x402053>, <DisassemblerInsn "jle" for 0x40205a>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402134>, <DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "movzx" for 0x402162>, <DisassemblerInsn "add" for 0x402166>, <DisassemblerInsn "lea" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "xor" for 0x402177>, <DisassemblerInsn "mov" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402189>, <DisassemblerInsn "mov" for 0x402191>, <DisassemblerInsn "mov" for 0x402196>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "call" for 0x4021ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 38, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x408]>', '<mov~~edx, dword ptr [rsp + 0x404]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~esi, dword ptr [rax]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x424], esi>', '<mov~~dword ptr [rsp + 0x428], edx>', '<mov~~dword ptr [rsp + 0x42c], ecx>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jge~~0x4034b8>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x4031a1>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0xc0]>', '<mov~~esi, dword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0xd8]>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x88], rax>', '<add~~edx, esi>', '<mov~~dword ptr [rsp + 0x90], edx>', '<neg~~edi>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0x94], edx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<jne~~0x403000>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20c]>', '<mov~~rcx, qword ptr [rsp + 0x200]>', '<mov~~rdx, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0x2f4]>', '<mov~~r8, qword ptr [rsp + 0x2b8]>', '<mov~~rsi, qword ptr [rsp + 0x368]>', '<mov~~r9, qword ptr [rsp + 0x360]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x1a0], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1b0], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1c0], r8>', '<mov~~dword ptr [rsp + 0x1c8], edi>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~qword ptr [rsp + 0x1d0], rdx>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~dword ptr [rsp + 0x1e4], eax>', '<mov~~r8b, byte ptr [rsp + 0x35f]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~r9d, dword ptr [rsp + 0x1c8]>', '<mov~~esi, dword ptr [rsp + 0x1cc]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<mov~~dword ptr [rsp + 0x16c], r9d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402bb9>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x388]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4743]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 49, 'blockInsts': ['<lea~~rdi, [rsp + 0x548]>', '<call~~0x500080>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b8>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x4031a1>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r8d, dword ptr [rsp + 0x234]>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~qword ptr [rsp + 0x1f0], r10>', '<mov~~qword ptr [rsp + 0x1f8], r9>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~dword ptr [rsp + 0x210], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jge~~0x4032cb>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~dword ptr [rsp + 0x100], edi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c6>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x504]>', '<mov~~ecx, dword ptr [rsp + 0x424]>', '<mov~~esi, dword ptr [rsp + 0x428]>', '<mov~~eax, dword ptr [rsp + 0x42c]>', '<mov~~dword ptr [rsp + 0x400], esi>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x408], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x4b0]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x400]>', '<and~~ecx, edx>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<cmp~~eax, ecx>', '<jge~~0x4022c4>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x402eda>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<mov~~r8d, dword ptr [rsp + 0x4b0]>', '<mov~~edi, dword ptr [rsp + 0x32c]>', '<mov~~edx, dword ptr [rsp + 0x504]>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~edx, dword ptr [rsp + 0x2f4]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<movsxd~~rdx, edx>', '<imul~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x2b8], rax>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c4], eax>', '<je~~0x40270b>']}, {'block_Idx': 25, 'blockInsts': ['<lea~~rdi, [rsp + 0x548]>', '<call~~0x500080>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x400]>', '<mov~~rdx, qword ptr [rsp + 0x4e0]>', '<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<movsxd~~rax, ecx>', '<imul~~rax, rsi>', '<add~~rdx, rax>', '<mov~~eax, 0x80>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~dword ptr [rsp + 0x3f8], ecx>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<mov~~dl, byte ptr [rsp + 0x40e]>', '<mov~~rcx, qword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<mov~~eax, dword ptr [rsp + 0x3fc]>', '<mov~~dword ptr [rsp + 0x3d4], esi>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jne~~0x4023d9>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r8, qword ptr [rsp + 0x3a0]>', '<mov~~r9, qword ptr [rsp + 0x398]>', '<mov~~rdi, qword ptr [rsp + 0x160]>', '<mov~~r10, qword ptr [rsp + 0x170]>', '<mov~~ebx, dword ptr [rsp + 0x15c]>', '<mov~~bpl, byte ptr [rsp + 0x377]>', '<mov~~r14d, dword ptr [rsp + 0x64]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jl~~0x402bb9>']}, {'block_Idx': 5, 'blockInsts': ['<movzx~~ecx, word ptr [rsp + 0xb60]>', '<mov~~al, 1>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<jmp~~0x4021cc>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x402467>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~edx, dword ptr [rsp + 0x4dc]>', '<mov~~rsi, qword ptr [rsp + 0x508]>', '<mov~~edi, dword ptr [rsp + 0x4f4]>', '<mov~~ecx, dword ptr [rsp + 0x4cc]>', '<mov~~r9, qword ptr [rsp + 0x4e8]>', '<mov~~r8, rax>', '<add~~r8, 0x100>', '<mov~~qword ptr [rsp + 0x330], r8>', '<mov~~r8, r9>', '<add~~r8, 0x60>', '<mov~~qword ptr [rsp + 0x338], r8>', '<mov~~r8, r9>', '<add~~r8, 0x80>', '<mov~~qword ptr [rsp + 0x340], r8>', '<add~~r9, 0x10>', '<mov~~qword ptr [rsp + 0x348], r9>', '<mov~~qword ptr [rsp + 0x350], r8>', '<imul~~ecx, edx>', '<cmp~~ecx, 0>', '<setg~~r8b>', '<mov~~byte ptr [rsp + 0x35f], r8b>', '<lea~~r8, [rsp + 0x548]>', '<add~~r8, 8>', '<mov~~qword ptr [rsp + 0x360], r8>', '<lea~~r8, [rsp + 0x548]>', '<mov~~qword ptr [rsp + 0x368], r8>', '<cmp~~edi, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x377], dil>', '<mov~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x378], rdi>', '<mov~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x380], rdi>', '<mov~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x388], rdi>', '<mov~~qword ptr [rsp + 0x390], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x3a8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<mov~~rcx, qword ptr [rsp + 0x338]>', '<mov~~rax, qword ptr [rsp + 0x3b0]>', '<mov~~edx, dword ptr [rsp + 0x2f0]>', '<mov~~esi, dword ptr [rsp + 0x2ec]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~r9, qword ptr [rsp + 0x2d0]>', '<mov~~r10, qword ptr [rsp + 0x2c8]>', '<mov~~r11d, dword ptr [rsp + 0x3b8]>', '<mov~~dword ptr [rsp + 0x2f4], r11d>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<mov~~qword ptr [rsp + 0x308], r8>', '<mov~~qword ptr [rsp + 0x310], rdi>', '<mov~~dword ptr [rsp + 0x318], esi>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xd4]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0x104]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~edi, dword ptr [rsp + 0xdc]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c6>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x214]>', '<mov~~rdi, qword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x5c], r8d>', '<mov~~rax, rdx>', '<sub~~rax, rdi>', '<shl~~eax, 3>', '<mov~~r10d, r8d>', '<add~~r10d, r9d>', '<add~~r10d, eax>', '<mov~~dword ptr [rsp + 0x60], r10d>', '<xor~~eax, eax>', '<cmp~~r10d, 0x20>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jle~~0x4033e6>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x5c]>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<mov~~eax, dword ptr [rsp + 0x2b4]>', '<mov~~r10, qword ptr [rsp + 0x2a8]>', '<mov~~r9d, dword ptr [rsp + 0x270]>', '<mov~~r8d, dword ptr [rsp + 0x274]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~r11d, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x44], r11d>', '<test~~r11d, r11d>', '<mov~~qword ptr [rsp + 0x3b0], r10>', '<mov~~dword ptr [rsp + 0x2f0], r9d>', '<mov~~dword ptr [rsp + 0x2ec], r8d>', '<mov~~qword ptr [rsp + 0x2e0], rdi>', '<mov~~qword ptr [rsp + 0x2d8], rsi>', '<mov~~qword ptr [rsp + 0x2d0], rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<je~~0x4025d0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x518]>', '<mov~~eax, dword ptr [rsp + 0x514]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe0e9]>', '<call~~0x500068>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x340]>', '<mov~~r9d, dword ptr [rsp + 0x2a4]>', '<mov~~r8d, dword ptr [rsp + 0x31c]>', '<mov~~edi, dword ptr [rsp + 0x318]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~rdx, qword ptr [rsp + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x300]>', '<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x240], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<ja~~0x402a1b>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~ecx, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4af]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402214>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<sub~~eax, 0xe>', '<je~~0x40349f>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x35f]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~r9d, dword ptr [rsp + 0x1c8]>', '<mov~~esi, dword ptr [rsp + 0x1cc]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<mov~~dword ptr [rsp + 0x16c], r9d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402bb9>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x12c], edx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~dword ptr [rsp + 0x100], edi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c6>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xb62]>', '<mov~~byte ptr [rsp + 0x4b7], al>', '<cmp~~al, 0>', '<jne~~0x401fab>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0x104]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~edi, dword ptr [rsp + 0xdc]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c6>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b4]>', '<mov~~r10, qword ptr [rsp + 0x2a8]>', '<mov~~r9d, dword ptr [rsp + 0x270]>', '<mov~~r8d, dword ptr [rsp + 0x274]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~r11d, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x44], r11d>', '<test~~r11d, r11d>', '<mov~~qword ptr [rsp + 0x3b0], r10>', '<mov~~dword ptr [rsp + 0x2f0], r9d>', '<mov~~dword ptr [rsp + 0x2ec], r8d>', '<mov~~qword ptr [rsp + 0x2e0], rdi>', '<mov~~qword ptr [rsp + 0x2d8], rsi>', '<mov~~qword ptr [rsp + 0x2d0], rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<je~~0x4025d0>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x31c]>', '<mov~~r8d, dword ptr [rsp + 0x318]>', '<mov~~rdi, qword ptr [rsp + 0x310]>', '<mov~~rsi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rcx, qword ptr [rsp + 0x2f8]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e6>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~qword ptr [rsp + 0x488], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xb62]>', '<mov~~byte ptr [rsp + 0x495], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x496], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x497], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x498], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401fdf>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5129]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x43c]>', '<mov~~edx, dword ptr [rsp + 0x4dc]>', '<mov~~esi, dword ptr [rsp + 0x4f4]>', '<mov~~eax, dword ptr [rsp + 0x4cc]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x40e], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x40f], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x410], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x418], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x428], ecx>', '<mov~~dword ptr [rsp + 0x42c], eax>', '<jmp~~0x402302>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x484]>', '<mov~~rdx, qword ptr [rsp + 0x478]>', '<mov~~dword ptr [rsp + 0x45c], esi>', '<mov~~al, byte ptr [rsp + rdx*8 + 0xb62]>', '<movzx~~edi, al>', '<mov~~dword ptr [rsp + 0x450], edi>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~dword ptr [rsp + 0x44c], ecx>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x454], esi>', '<mov~~dword ptr [rsp + rdx*4 + 0x760], esi>', '<mov~~byte ptr [rsp + rdx + 0x660], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xb60]>', '<mov~~byte ptr [rsp + rdx + 0x560], al>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x45c]>', '<mov~~dword ptr [rsp + 0x460], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x464], eax>', '<mov~~rcx, rdx>', '<add~~rcx, -1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<mov~~dword ptr [rsp + 0x484], eax>', '<jg~~0x402060>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x40e]>', '<mov~~rcx, qword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<mov~~eax, dword ptr [rsp + 0x3fc]>', '<mov~~dword ptr [rsp + 0x3d4], esi>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jne~~0x4023d9>']}, {'block_Idx': 84, 'blockInsts': ['<jmp~~0x403052>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x495]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x44a], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x44b], al>', '<jb~~0x40213b>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x84]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e6>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb60], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb62], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c0], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x401ef5>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x390]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4bdb]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<mov~~eax, dword ptr [rsp + 0x440]>', '<add~~rsp, 0x1360>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x440]>', '<add~~rsp, 0x1360>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x548]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x94], edx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x4031a1>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x2c4], eax>', '<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~rdx, qword ptr [rsp + 0x320]>', '<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~dword ptr [rsp + 0x2a0], ecx>', '<shl~~rdx, 2>', '<movabs~~rsi, 0xfffffffc>', '<and~~rdx, rsi>', '<mov~~eax, dword ptr [rax + rdx]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<cmp~~eax, 0>', '<jne~~0x4027de>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~qword ptr [rsp + 0x1f0], r10>', '<mov~~qword ptr [rsp + 0x1f8], r9>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~dword ptr [rsp + 0x210], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jge~~0x4032cb>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~dword ptr [rsp + 0x31c], edx>', '<mov~~qword ptr [rsp + 0x320], rax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x32c], ecx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x403487>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0x4b7]>', '<mov~~ecx, 0xffffffff>', '<xor~~eax, eax>', '<mov~~edx, 0xff>', '<cmp~~sil, 0x20>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4af], al>', '<ja~~0x4021cc>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0x1ac]>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0x12c], edx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x402d12>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2a4]>', '<mov~~rdi, qword ptr [rsp + 0x340]>', '<mov~~ecx, dword ptr [rsp + 0x32c]>', '<mov~~rsi, qword ptr [rsp + 0x330]>', '<mov~~edx, dword ptr [rsp + 0x2a0]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<call~~0x500078>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3ec]>', '<mov~~rcx, qword ptr [rsp + 0x3e0]>', '<mov~~rdx, qword ptr [rsp + 0x418]>', '<mov~~rsi, qword ptr [rsp + 0x410]>', '<mov~~rdi, qword ptr [rsp + 0x3d8]>', '<mov~~r10b, byte ptr [rsp + 0x40f]>', '<mov~~r11d, dword ptr [rsp + 0x444]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3c0], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3c4], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jl~~0x4023d9>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x234]>', '<mov~~eax, dword ptr [rsp + 0x2a4]>', '<and~~eax, 0x1fffffff>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<xor~~esi, esi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~dword ptr [rsp + 0x248], edi>', '<mov~~dword ptr [rsp + 0x24c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<je~~0x402a1b>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x4034b8>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x144]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e6>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x380]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4274]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 46, 'blockInsts': ['<jmp~~0x40347c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x444]>', '<cmp~~eax, -1>', '<jle~~0x4024b5>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x378]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x4034]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x402392>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<sub~~edx, esi>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xd8], edi>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<jne~~0x402e88>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x210]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~r8d, dword ptr [rsp + 0x184]>', '<mov~~r9, qword ptr [rsp + 0x188]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<mov~~qword ptr [rsp + 0x148], rsi>', '<mov~~qword ptr [rsp + 0x150], r9>', '<mov~~dword ptr [rsp + 0x15c], r8d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<cmp~~eax, 1>', '<jge~~0x402cb8>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x403233>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2b4]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~r8, qword ptr [rsp + 0x170]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~esi, dword ptr [rsp + 0x184]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1c0], r8>', '<mov~~dword ptr [rsp + 0x1c8], edi>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1e4], esi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jne~~0x402b40>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4af]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402214>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1360>', '<mov~~dword ptr [rsp + 0x4cc], r9d>', '<mov~~qword ptr [rsp + 0x4d0], r8>', '<mov~~dword ptr [rsp + 0x4dc], ecx>', '<mov~~qword ptr [rsp + 0x4e0], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x4e8], rdi>', '<mov~~eax, dword ptr [rsp + 0x1390]>', '<mov~~dword ptr [rsp + 0x4f4], eax>', '<mov~~rax, qword ptr [rsp + 0x1388]>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~edx, dword ptr [rsp + 0x1380]>', '<mov~~dword ptr [rsp + 0x504], edx>', '<lea~~rdx, [rsp + 0x548]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x508], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xb60]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x760]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x660]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x560]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb60], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb62], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c0], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x401ef5>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x338]>', '<mov~~rax, qword ptr [rsp + 0x3b0]>', '<mov~~edx, dword ptr [rsp + 0x2f0]>', '<mov~~esi, dword ptr [rsp + 0x2ec]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~r9, qword ptr [rsp + 0x2d0]>', '<mov~~r10, qword ptr [rsp + 0x2c8]>', '<mov~~r11d, dword ptr [rsp + 0x3b8]>', '<mov~~dword ptr [rsp + 0x2f4], r11d>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<mov~~qword ptr [rsp + 0x308], r8>', '<mov~~qword ptr [rsp + 0x310], rdi>', '<mov~~dword ptr [rsp + 0x318], esi>', '<mov~~dword ptr [rsp + 0x31c], edx>', '<mov~~qword ptr [rsp + 0x320], rax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x32c], ecx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x403487>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~rdx, qword ptr [rsp + 0x320]>', '<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~dword ptr [rsp + 0x2a0], ecx>', '<shl~~rdx, 2>', '<movabs~~rsi, 0xfffffffc>', '<and~~rdx, rsi>', '<mov~~eax, dword ptr [rax + rdx]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<cmp~~eax, 0>', '<jne~~0x4027de>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x404]>', '<mov~~ecx, dword ptr [rsp + 0x3d4]>', '<mov~~rdi, qword ptr [rsp + 0x4d0]>', '<mov~~rdx, qword ptr [rsp + 0x3d8]>', '<mov~~eax, dword ptr [rsp + 0x3ec]>', '<add~~rdx, rdi>', '<add~~ecx, 1>', '<cmp~~ecx, esi>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~dword ptr [rsp + 0x3f8], ecx>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<je~~0x4022c4>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x402d64>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x43c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jle~~0x4034b8>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~rdx, qword ptr [rsp + 0x308]>', '<mov~~edi, dword ptr [rsp + 0x31c]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0x2a4]>', '<shl~~ecx, 3>', '<mov~~dword ptr [rsp + 0x234], ecx>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x248], edi>', '<mov~~dword ptr [rsp + 0x24c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<je~~0x402a1b>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, ecx>', '<mov~~dword ptr [rsp + 0x474], edx>', '<mov~~eax, 1>', '<cmp~~edx, -1>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<mov~~dword ptr [rsp + 0x484], eax>', '<jle~~0x402112>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x44a]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x548]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}], 'cfg_edge_info': [(81, 76), (55, 57), (87, 80), (46, 48), (47, 25), (39, 42), (76, 79), (7, 10), (16, 22), (35, 35), (12, 18), (8, 11), (2, 4), (74, 75), (11, 16), (66, 71), (10, 20), (13, 19), (15, 16), (48, 49), (23, 29), (9, 12), (68, 61), (24, 30), (81, 82), (18, 23), (25, 38), (20, 17), (5, 7), (0, 2), (85, 79), (75, 78), (45, 46), (59, 45), (64, 59), (36, 43), (55, 56), (30, 36), (44, 35), (64, 68), (59, 63), (57, 56), (31, 37), (49, 52), (50, 17), (72, 47), (33, 10), (34, 39), (7, 9), (16, 21), (71, 76), (63, 72), (82, 85), (12, 17), (66, 70), (28, 34), (62, 66), (56, 59), (29, 17), (80, 62), (58, 62), (4, 6), (60, 59), (35, 39), (23, 28), (19, 24), (54, 55), (6, 8), (80, 64), (43, 45), (87, 79), (78, 76), (21, 33), (8, 8), (75, 77), (1, 2), (47, 24), (70, 74), (72, 46), (33, 9), (73, 45), (11, 15), (45, 47), (76, 80), (71, 75), (30, 37), (38, 17), (82, 84), (15, 15), (29, 23), (84, 87), (77, 81), (61, 64), (57, 60), (74, 76), (65, 73), (62, 65), (56, 58), (58, 61), (42, 44), (4, 5), (60, 58), (78, 82), (39, 29), (0, 1), (48, 50), (9, 13), (68, 62), (28, 35), (6, 7), (44, 34), (79, 86), (24, 31), (1, 1), (31, 36), (22, 33), (85, 80), (19, 25), (86, 45), (54, 56)], 'cdg_edge_info': [(55, 57), (7, 17), (87, 80), (47, 25), (9, 17), (75, 81), (33, 20), (6, 11), (7, 10), (16, 22), (35, 35), (12, 18), (39, 44), (74, 75), (9, 19), (66, 71), (24, 37), (48, 49), (12, 29), (9, 12), (85, 86), (81, 82), (29, 29), (60, 62), (68, 45), (39, 39), (85, 79), (75, 78), (33, 17), (59, 45), (64, 59), (44, 35), (48, 17), (64, 68), (59, 63), (72, 47), (33, 10), (45, 48), (7, 9), (19, 38), (62, 73), (16, 21), (82, 85), (47, 38), (62, 66), (82, 87), (60, 59), (4, 6), (6, 33), (87, 86), (23, 28), (19, 24), (54, 55), (6, 8), (58, 64), (80, 64), (87, 79), (59, 72), (8, 8), (47, 24), (19, 17), (60, 45), (12, 23), (47, 17), (33, 9), (11, 15), (45, 47), (71, 75), (15, 15), (29, 23), (7, 20), (72, 48), (57, 60), (62, 65), (37, 54), (60, 58), (4, 5), (78, 82), (0, 1), (48, 50), (9, 13), (31, 43), (68, 62), (23, 39), (66, 74), (28, 35), (6, 7), (6, 16), (24, 31), (4, 7), (85, 62), (1, 1), (31, 36), (48, 52), (68, 64), (85, 80), (19, 25), (31, 45), (87, 62)], 'ddg_edge_info': [(55, 57), (79, 24), (86, 72), (81, 85), (80, 65), (87, 80), (2, 39), (63, 25), (10, 52), (18, 35), (65, 52), (16, 47), (18, 44), (71, 47), (36, 25), (22, 35), (63, 52), (2, 11), (74, 82), (80, 31), (22, 44), (0, 23), (75, 81), (24, 72), (12, 52), (16, 22), (1, 33), (81, 87), (65, 36), (33, 47), (22, 10), (71, 31), (12, 18), (63, 36), (25, 52), (22, 28), (39, 44), (8, 11), (2, 4), (74, 75), (65, 72), (22, 37), (29, 52), (10, 20), (36, 48), (2, 25), (71, 79), (13, 37), (0, 37), (79, 37), (16, 33), (22, 12), (65, 47), (2, 52), (12, 29), (23, 29), (63, 47), (22, 39), (58, 81), (80, 81), (65, 31), (81, 82), (71, 81), (18, 23), (0, 39), (2, 36), (25, 38), (65, 49), (63, 31), (60, 62), (22, 23), (80, 74), (58, 74), (0, 2), (54, 37), (63, 49), (74, 79), (75, 78), (80, 37), (71, 65), (47, 43), (64, 59), (36, 43), (65, 24), (71, 74), (62, 71), (74, 36), (64, 68), (2, 29), (44, 35), (59, 63), (62, 80), (33, 35), (36, 52), (63, 24), (71, 37), (2, 47), (60, 64), (22, 25), (74, 63), (60, 73), (31, 37), (38, 52), (49, 52), (80, 85), (72, 47), (60, 82), (1, 5), (47, 36), (2, 13), (54, 60), (79, 25), (62, 73), (2, 22), (63, 72), (2, 31), (8, 47), (82, 85), (74, 47), (22, 9), (71, 85), (22, 18), (0, 52), (60, 66), (74, 65), (78, 81), (80, 78), (60, 75), (80, 87), (58, 87), (75, 82), (2, 6), (0, 18), (2, 15), (36, 47), (74, 31), (55, 60), (62, 66), (71, 78), (2, 24), (0, 36), (65, 37), (71, 87), (82, 87), (2, 33), (80, 62), (60, 59), (4, 6), (35, 39), (63, 37), (6, 33), (80, 71), (87, 86), (23, 28), (79, 48), (60, 86), (8, 15), (36, 31), (47, 31), (2, 8), (54, 55), (36, 49), (0, 29), (6, 8), (2, 35), (22, 13), (65, 48), (0, 47), (80, 64), (59, 72), (15, 47), (36, 24), (43, 72), (47, 24), (0, 13), (2, 10), (74, 81), (11, 22), (54, 57), (22, 52), (0, 22), (0, 31), (2, 28), (2, 37), (58, 66), (58, 75), (64, 24), (36, 72), (60, 72), (79, 52), (33, 9), (1, 4), (22, 36), (11, 15), (2, 12), (65, 25), (0, 24), (73, 72), (74, 37), (29, 23), (44, 39), (13, 36), (15, 33), (79, 36), (58, 68), (72, 48), (22, 29), (57, 60), (2, 5), (65, 73), (79, 72), (36, 37), (47, 37), (22, 47), (74, 85), (2, 23), (35, 29), (60, 58), (13, 47), (2, 44), (80, 79), (79, 47), (0, 1), (22, 31), (63, 48), (68, 62), (0, 10), (74, 78), (23, 39), (66, 74), (20, 52), (74, 87), (2, 16), (5, 33), (0, 28), (68, 80), (80, 36), (28, 44), (85, 87), (13, 31), (24, 31), (80, 63), (79, 31), (79, 86), (1, 47), (71, 36), (79, 49), (22, 24), (74, 71), (22, 33), (8, 16), (0, 12), (2, 9), (71, 63), (68, 64), (2, 18), (80, 47)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x548(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x508(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 177, 'instruction': 'testb\t$1, %al'}, {'instIndex': 178, 'instruction': 'jne\t.LBB3_11'}, {'instIndex': 180, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 181, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 182, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 183, 'instruction': 'movb\t$0, %al'}, {'instIndex': 184, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O2/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O2/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 1029 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x588(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x548(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 99, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 200, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 201, 'instruction': 'je\t.LBB3_25'}, {'instIndex': 203, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 204, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 205, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 206, 'instruction': 'movb\t$0, %al'}, {'instIndex': 207, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O2/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O2/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 568 nodes and 990 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1029 instructions in binary file.
[4202016, 4202573, 4203162, 4203171]
The execution time of patched subCFG information extraction via angr: 0:00:02.034536
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401e20>, <DisassemblerInsn "push" for 0x401e21>, <DisassemblerInsn "push" for 0x401e23>, <DisassemblerInsn "sub" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "mov" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "mov" for 0x401e5b>, <DisassemblerInsn "mov" for 0x401e62>, <DisassemblerInsn "mov" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e72>, <DisassemblerInsn "mov" for 0x401e79>, <DisassemblerInsn "lea" for 0x401e80>, <DisassemblerInsn "mov" for 0x401e88>, <DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "add" for 0x401e8e>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "mov" for 0x401e9e>, <DisassemblerInsn "or" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ea8>, <DisassemblerInsn "sete" for 0x401eac>, <DisassemblerInsn "mov" for 0x401eaf>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "cmove" for 0x401ebd>, <DisassemblerInsn "and" for 0x401ec0>, <DisassemblerInsn "movzx" for 0x401ec3>, <DisassemblerInsn "cmp" for 0x401ec6>, <DisassemblerInsn "cmove" for 0x401ec9>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "lea" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401edb>, <DisassemblerInsn "lea" for 0x401ee3>, <DisassemblerInsn "mov" for 0x401eeb>, <DisassemblerInsn "lea" for 0x401ef3>, <DisassemblerInsn "mov" for 0x401efb>, <DisassemblerInsn "lea" for 0x401f03>, <DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "xor" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f15>, <DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "mov" for 0x401f25>, <DisassemblerInsn "mov" for 0x401f2d>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "mov" for 0x401f38>, <DisassemblerInsn "mov" for 0x401f40>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f49>, <DisassemblerInsn "or" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5b>, <DisassemblerInsn "mov" for 0x401f63>, <DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6d>, <DisassemblerInsn "or" for 0x401f70>, <DisassemblerInsn "mov" for 0x401f74>, <DisassemblerInsn "mov" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f7f>, <DisassemblerInsn "mov" for 0x401f87>, <DisassemblerInsn "mov" for 0x401f8a>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "or" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401fa0>, <DisassemblerInsn "mov" for 0x401fa3>, <DisassemblerInsn "mov" for 0x401fab>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "add" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb2>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "mov" for 0x401fbe>, <DisassemblerInsn "add" for 0x401fc6>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "cmp" for 0x401fd2>, <DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "mov" for 0x401fe1>, <DisassemblerInsn "jne" for 0x401fe9>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022ab>, <DisassemblerInsn "mov" for 0x4022ae>, <DisassemblerInsn "lea" for 0x4022b3>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "call" for 0x4022bc>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40229a>, <DisassemblerInsn "je" for 0x40229d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402034>, <DisassemblerInsn "mov" for 0x40203b>, <DisassemblerInsn "cmp" for 0x402040>, <DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "jbe" for 0x40204b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "movzx" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "lea" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "xor" for 0x40225e>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x40227d>, <DisassemblerInsn "mov" for 0x402285>, <DisassemblerInsn "mov" for 0x40228d>, <DisassemblerInsn "call" for 0x402295>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "mov" for 0x4022c6>, <DisassemblerInsn "jmp" for 0x4022cd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b3>, <DisassemblerInsn "mov" for 0x4027bb>, <DisassemblerInsn "add" for 0x4027c3>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d5>, <DisassemblerInsn "mov" for 0x4027d9>, <DisassemblerInsn "mov" for 0x4027e1>, <DisassemblerInsn "mov" for 0x4027e4>, <DisassemblerInsn "cmp" for 0x4027eb>, <DisassemblerInsn "jle" for 0x4027ee>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "movzx" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "lea" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "xor" for 0x40225e>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x40227d>, <DisassemblerInsn "mov" for 0x402285>, <DisassemblerInsn "mov" for 0x40228d>, <DisassemblerInsn "call" for 0x402295>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40204d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13a0>', '<mov~~dword ptr [rsp + 0x50c], r9d>', '<mov~~qword ptr [rsp + 0x510], r8>', '<mov~~dword ptr [rsp + 0x51c], ecx>', '<mov~~qword ptr [rsp + 0x520], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x528], rdi>', '<mov~~eax, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x534], eax>', '<mov~~rax, qword ptr [rsp + 0x13c8]>', '<mov~~qword ptr [rsp + 0x538], rax>', '<mov~~edx, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x544], edx>', '<lea~~rdx, [rsp + 0x588]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x548], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x554], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x558], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x560], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~qword ptr [rsp + 0x580], rax>', '<mov~~rsi, qword ptr [rsp + 0x580]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f0], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>']}, {'block_Idx': 1, 'blockInsts': ['<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~qword ptr [rsp + 0x580], rax>', '<jne~~0x401f25>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x548]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5738]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x4027b3>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4df]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<jbe~~0x402052>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x476]>', '<mov~~byte ptr [rsp + 0x477], al>', '<mov~~rax, qword ptr [rsp + 0x570]>', '<mov~~r10, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~sil, byte ptr [rsp + 0x477]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jmp~~0x403507>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x368], eax>', '<cmp~~eax, 0>', '<jle~~0x4034b7>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x570]>', '<mov~~r10, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~sil, byte ptr [rsp + 0x477]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4022a3>']}], 'cfg_edge_info': [(0, 1), (28, 13), (21, 28), (10, 13), (6, 10), (13, 18), (28, 30), (22, 28)]}]}
{'decode_plane': [4202016, 4202573, 4203162, 4203171]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O2/utvideodec.o---after
The extraction of function: decode_plane
[4202016, 4202573, 4203162, 4203171]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 84 nodes and 139 edges in CFGEmulated.
It has 81 nodes and 149 edges in CDG.
It has 4489 nodes and 5609 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202016, 4202573, 4203162, 4203171]
{4204930, 4207619, 4203396, 4207879, 4207242, 4205068, 4206222, 4203792, 4203028, 4203284, 4205205, 4203162, 4202526, 4202016, 4203042, 4203171, 4207396, 4202661, 4207653, 4202277, 4203687, 4203946, 4202797, 4204467, 4202548, 4206005, 4207799, 4205496, 4202685, 4203201, 4204227, 4207812, 4207043, 4202573, 4205134, 4207823, 4203469, 4204369, 4202578, 4203218, 4205272, 4205017, 4203611, 4204765, 4205406, 4206301, 4207854, 4202479, 4204017, 4204532, 4203892, 4203001, 4207867, 4204159}
[65, 9, 22, 40, 63, 80, 13, 70, 38, 29, 28, 16, 48, 34, 56, 32, 39, 12, 37, 3, 72, 42, 47, 82, 20, 21, 62, 46, 0, 15, 5, 51, 7, 25, 81, 67, 64, 23, 6, 71, 2, 73, 44, 60, 26, 1, 36, 43, 17, 35, 53, 33, 55, 8, 77, 59, 10, 24, 11, 69, 14, 18, 27, 57, 58, 45, 61, 74, 66]
The execution time of patched slicing information extraction via angr: 0:00:09.618944
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403324>, <DisassemblerInsn "mov" for 0x40332c>, <DisassemblerInsn "mov" for 0x403333>, <DisassemblerInsn "mov" for 0x40333b>, <DisassemblerInsn "mov" for 0x403343>, <DisassemblerInsn "mov" for 0x40334a>, <DisassemblerInsn "mov" for 0x403352>, <DisassemblerInsn "mov" for 0x40335a>, <DisassemblerInsn "add" for 0x403361>, <DisassemblerInsn "add" for 0x403364>, <DisassemblerInsn "cmp" for 0x403367>, <DisassemblerInsn "mov" for 0x40336a>, <DisassemblerInsn "mov" for 0x403372>, <DisassemblerInsn "mov" for 0x403379>, <DisassemblerInsn "mov" for 0x403380>, <DisassemblerInsn "mov" for 0x403383>, <DisassemblerInsn "mov" for 0x40338b>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "mov" for 0x403396>, <DisassemblerInsn "mov" for 0x403398>, <DisassemblerInsn "mov" for 0x40339f>, <DisassemblerInsn "mov" for 0x4033a6>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "jne" for 0x4033b6>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402314>, <DisassemblerInsn "mov" for 0x40231b>, <DisassemblerInsn "mov" for 0x402322>, <DisassemblerInsn "mov" for 0x402329>, <DisassemblerInsn "imul" for 0x402330>, <DisassemblerInsn "cmp" for 0x402333>, <DisassemblerInsn "setg" for 0x402336>, <DisassemblerInsn "mov" for 0x40233a>, <DisassemblerInsn "cmp" for 0x402342>, <DisassemblerInsn "sete" for 0x402345>, <DisassemblerInsn "mov" for 0x402349>, <DisassemblerInsn "movsxd" for 0x402351>, <DisassemblerInsn "mov" for 0x402354>, <DisassemblerInsn "cdqe" for 0x40235c>, <DisassemblerInsn "mov" for 0x40235e>, <DisassemblerInsn "xor" for 0x402366>, <DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "mov" for 0x402378>, <DisassemblerInsn "jmp" for 0x40237f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402134>, <DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214a>, <DisassemblerInsn "add" for 0x40214d>, <DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "add" for 0x402159>, <DisassemblerInsn "mov" for 0x40215c>, <DisassemblerInsn "mov" for 0x402163>, <DisassemblerInsn "shr" for 0x402168>, <DisassemblerInsn "mov" for 0x40216a>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "add" for 0x402178>, <DisassemblerInsn "mov" for 0x40217a>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "movzx" for 0x402189>, <DisassemblerInsn "mov" for 0x40218d>, <DisassemblerInsn "mov" for 0x402195>, <DisassemblerInsn "sub" for 0x40219a>, <DisassemblerInsn "mov" for 0x40219d>, <DisassemblerInsn "mov" for 0x4021a4>, <DisassemblerInsn "shr" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021aa>, <DisassemblerInsn "mov" for 0x4021b1>, <DisassemblerInsn "mov" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021c9>, <DisassemblerInsn "mov" for 0x4021d1>, <DisassemblerInsn "cmp" for 0x4021d9>, <DisassemblerInsn "mov" for 0x4021dd>, <DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "mov" for 0x4021ec>, <DisassemblerInsn "ja" for 0x4021f3>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4027ae>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403425>, <DisassemblerInsn "mov" for 0x40342c>, <DisassemblerInsn "mov" for 0x403430>, <DisassemblerInsn "mov" for 0x403435>, <DisassemblerInsn "mov" for 0x40343d>, <DisassemblerInsn "mov" for 0x403445>, <DisassemblerInsn "mov" for 0x40344a>, <DisassemblerInsn "mov" for 0x403452>, <DisassemblerInsn "mov" for 0x40345a>, <DisassemblerInsn "mov" for 0x403462>, <DisassemblerInsn "movsxd" for 0x403465>, <DisassemblerInsn "cmp" for 0x403468>, <DisassemblerInsn "mov" for 0x40346b>, <DisassemblerInsn "mov" for 0x403473>, <DisassemblerInsn "mov" for 0x40347b>, <DisassemblerInsn "mov" for 0x403483>, <DisassemblerInsn "mov" for 0x40348b>, <DisassemblerInsn "mov" for 0x403493>, <DisassemblerInsn "mov" for 0x40349b>, <DisassemblerInsn "mov" for 0x4034a3>, <DisassemblerInsn "mov" for 0x4034aa>, <DisassemblerInsn "jl" for 0x4034b1>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403173>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a5>, <DisassemblerInsn "mov" for 0x4020ad>, <DisassemblerInsn "cmp" for 0x4020b4>, <DisassemblerInsn "jle" for 0x4020b7>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e8c>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4034b7>, <DisassemblerInsn "call" for 0x4034bf>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025f1>, <DisassemblerInsn "mov" for 0x4025f9>, <DisassemblerInsn "mov" for 0x402601>, <DisassemblerInsn "mov" for 0x402609>, <DisassemblerInsn "mov" for 0x402611>, <DisassemblerInsn "mov" for 0x402619>, <DisassemblerInsn "mov" for 0x402621>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "add" for 0x40262c>, <DisassemblerInsn "mov" for 0x40262f>, <DisassemblerInsn "test" for 0x402636>, <DisassemblerInsn "mov" for 0x40263a>, <DisassemblerInsn "cmovne" for 0x40263d>, <DisassemblerInsn "mov" for 0x402641>, <DisassemblerInsn "test" for 0x402649>, <DisassemblerInsn "cmovne" for 0x40264d>, <DisassemblerInsn "mov" for 0x402651>, <DisassemblerInsn "mov" for 0x402658>, <DisassemblerInsn "add" for 0x40265c>, <DisassemblerInsn "mov" for 0x40265f>, <DisassemblerInsn "cmp" for 0x402667>, <DisassemblerInsn "mov" for 0x40266a>, <DisassemblerInsn "mov" for 0x402672>, <DisassemblerInsn "jl" for 0x402679>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4025ec>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402510>, <DisassemblerInsn "mov" for 0x402517>, <DisassemblerInsn "mov" for 0x40251e>, <DisassemblerInsn "mov" for 0x402526>, <DisassemblerInsn "movsxd" for 0x40252e>, <DisassemblerInsn "imul" for 0x402531>, <DisassemblerInsn "add" for 0x402535>, <DisassemblerInsn "mov" for 0x402538>, <DisassemblerInsn "mov" for 0x402540>, <DisassemblerInsn "sub" for 0x402542>, <DisassemblerInsn "mov" for 0x402544>, <DisassemblerInsn "add" for 0x40254b>, <DisassemblerInsn "and" for 0x40254e>, <DisassemblerInsn "mov" for 0x402551>, <DisassemblerInsn "mov" for 0x402558>, <DisassemblerInsn "cmp" for 0x40255d>, <DisassemblerInsn "mov" for 0x40255f>, <DisassemblerInsn "mov" for 0x402567>, <DisassemblerInsn "je" for 0x40256e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4e>, <DisassemblerInsn "mov" for 0x402a55>, <DisassemblerInsn "mov" for 0x402a5d>, <DisassemblerInsn "mov" for 0x402a64>, <DisassemblerInsn "mov" for 0x402a6c>, <DisassemblerInsn "mov" for 0x402a73>, <DisassemblerInsn "movsxd" for 0x402a76>, <DisassemblerInsn "add" for 0x402a79>, <DisassemblerInsn "shl" for 0x402a7c>, <DisassemblerInsn "movsxd" for 0x402a7f>, <DisassemblerInsn "add" for 0x402a82>, <DisassemblerInsn "movsxd" for 0x402a85>, <DisassemblerInsn "mov" for 0x402a88>, <DisassemblerInsn "call" for 0x402a90>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026be>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b5e>, <DisassemblerInsn "mov" for 0x402b66>, <DisassemblerInsn "mov" for 0x402b6e>, <DisassemblerInsn "mov" for 0x402b75>, <DisassemblerInsn "xor" for 0x402b7d>, <DisassemblerInsn "xor" for 0x402b7f>, <DisassemblerInsn "cmp" for 0x402b81>, <DisassemblerInsn "mov" for 0x402b85>, <DisassemblerInsn "mov" for 0x402b8c>, <DisassemblerInsn "mov" for 0x402b93>, <DisassemblerInsn "mov" for 0x402b96>, <DisassemblerInsn "mov" for 0x402b9e>, <DisassemblerInsn "mov" for 0x402ba6>, <DisassemblerInsn "mov" for 0x402bae>, <DisassemblerInsn "je" for 0x402bb6>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40267f>, <DisassemblerInsn "mov" for 0x402686>, <DisassemblerInsn "mov" for 0x40268e>, <DisassemblerInsn "mov" for 0x402696>, <DisassemblerInsn "add" for 0x40269d>, <DisassemblerInsn "mov" for 0x4026a0>, <DisassemblerInsn "xor" for 0x4026a8>, <DisassemblerInsn "test" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b5>, <DisassemblerInsn "jne" for 0x4026bc>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027f4>, <DisassemblerInsn "mov" for 0x4027fb>, <DisassemblerInsn "mov" for 0x402803>, <DisassemblerInsn "mov" for 0x40280a>, <DisassemblerInsn "mov" for 0x402812>, <DisassemblerInsn "mov" for 0x40281a>, <DisassemblerInsn "mov" for 0x402821>, <DisassemblerInsn "mov" for 0x402829>, <DisassemblerInsn "add" for 0x40282c>, <DisassemblerInsn "mov" for 0x402833>, <DisassemblerInsn "add" for 0x40283b>, <DisassemblerInsn "mov" for 0x40283f>, <DisassemblerInsn "mov" for 0x402847>, <DisassemblerInsn "imul" for 0x40284f>, <DisassemblerInsn "cmp" for 0x402852>, <DisassemblerInsn "setg" for 0x402855>, <DisassemblerInsn "mov" for 0x402859>, <DisassemblerInsn "lea" for 0x402861>, <DisassemblerInsn "add" for 0x402869>, <DisassemblerInsn "mov" for 0x40286d>, <DisassemblerInsn "lea" for 0x402875>, <DisassemblerInsn "mov" for 0x40287d>, <DisassemblerInsn "cmp" for 0x402885>, <DisassemblerInsn "sete" for 0x402889>, <DisassemblerInsn "mov" for 0x40288d>, <DisassemblerInsn "mov" for 0x402895>, <DisassemblerInsn "movsxd" for 0x40289d>, <DisassemblerInsn "mov" for 0x4028a0>, <DisassemblerInsn "movsxd" for 0x4028a8>, <DisassemblerInsn "mov" for 0x4028ab>, <DisassemblerInsn "add" for 0x4028b3>, <DisassemblerInsn "mov" for 0x4028b9>, <DisassemblerInsn "xor" for 0x4028c1>, <DisassemblerInsn "mov" for 0x4028c3>, <DisassemblerInsn "xor" for 0x4028c5>, <DisassemblerInsn "mov" for 0x4028c7>, <DisassemblerInsn "mov" for 0x4028cf>, <DisassemblerInsn "mov" for 0x4028d6>, <DisassemblerInsn "mov" for 0x4028dd>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "mov" for 0x4028ed>, <DisassemblerInsn "mov" for 0x4028f4>, <DisassemblerInsn "mov" for 0x4028fc>, <DisassemblerInsn "mov" for 0x402903>, <DisassemblerInsn "mov" for 0x40290a>, <DisassemblerInsn "mov" for 0x402912>, <DisassemblerInsn "mov" for 0x40291a>, <DisassemblerInsn "mov" for 0x402922>, <DisassemblerInsn "mov" for 0x40292a>, <DisassemblerInsn "mov" for 0x402931>, <DisassemblerInsn "mov" for 0x402939>, <DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402948>, <DisassemblerInsn "mov" for 0x402950>, <DisassemblerInsn "mov" for 0x402958>, <DisassemblerInsn "mov" for 0x402960>, <DisassemblerInsn "mov" for 0x402968>, <DisassemblerInsn "mov" for 0x40296f>, <DisassemblerInsn "mov" for 0x402976>, <DisassemblerInsn "add" for 0x40297e>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024ae>, <DisassemblerInsn "mov" for 0x4024b5>, <DisassemblerInsn "mov" for 0x4024bc>, <DisassemblerInsn "mov" for 0x4024c3>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "mov" for 0x4024d1>, <DisassemblerInsn "add" for 0x4024d8>, <DisassemblerInsn "mov" for 0x4024db>, <DisassemblerInsn "imul" for 0x4024e2>, <DisassemblerInsn "cdq" for 0x4024e5>, <DisassemblerInsn "idiv" for 0x4024e6>, <DisassemblerInsn "mov" for 0x4024e8>, <DisassemblerInsn "mov" for 0x4024ef>, <DisassemblerInsn "mov" for 0x4024f1>, <DisassemblerInsn "and" for 0x4024f8>, <DisassemblerInsn "mov" for 0x4024fa>, <DisassemblerInsn "cmp" for 0x402501>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "jle" for 0x40250a>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402751>, <DisassemblerInsn "mov" for 0x402758>, <DisassemblerInsn "mov" for 0x40275f>, <DisassemblerInsn "mov" for 0x402767>, <DisassemblerInsn "mov" for 0x40276f>, <DisassemblerInsn "add" for 0x402776>, <DisassemblerInsn "add" for 0x402779>, <DisassemblerInsn "cmp" for 0x40277c>, <DisassemblerInsn "mov" for 0x40277e>, <DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "mov" for 0x402789>, <DisassemblerInsn "mov" for 0x40278b>, <DisassemblerInsn "mov" for 0x402792>, <DisassemblerInsn "mov" for 0x40279a>, <DisassemblerInsn "mov" for 0x4027a1>, <DisassemblerInsn "je" for 0x4027a8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fef>, <DisassemblerInsn "mov" for 0x401ff7>, <DisassemblerInsn "xor" for 0x401ffe>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "mov" for 0x402008>, <DisassemblerInsn "mov" for 0x40200d>, <DisassemblerInsn "mov" for 0x402012>, <DisassemblerInsn "call" for 0x402019>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402edd>, <DisassemblerInsn "mov" for 0x402ee5>, <DisassemblerInsn "mov" for 0x402eed>, <DisassemblerInsn "mov" for 0x402ef5>, <DisassemblerInsn "mov" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f03>, <DisassemblerInsn "mov" for 0x402f0b>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "shr" for 0x402f16>, <DisassemblerInsn "mov" for 0x402f19>, <DisassemblerInsn "movabs" for 0x402f21>, <DisassemblerInsn "and" for 0x402f2b>, <DisassemblerInsn "movsx" for 0x402f2e>, <DisassemblerInsn "mov" for 0x402f33>, <DisassemblerInsn "mov" for 0x402f3a>, <DisassemblerInsn "movsx" for 0x402f40>, <DisassemblerInsn "mov" for 0x402f44>, <DisassemblerInsn "cmp" for 0x402f4b>, <DisassemblerInsn "mov" for 0x402f50>, <DisassemblerInsn "mov" for 0x402f58>, <DisassemblerInsn "mov" for 0x402f5f>, <DisassemblerInsn "mov" for 0x402f67>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "jge" for 0x402f75>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402982>, <DisassemblerInsn "imul" for 0x40298a>, <DisassemblerInsn "cdq" for 0x40298d>, <DisassemblerInsn "idiv" for 0x40298e>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402998>, <DisassemblerInsn "mov" for 0x40299a>, <DisassemblerInsn "and" for 0x4029a2>, <DisassemblerInsn "mov" for 0x4029a5>, <DisassemblerInsn "movsxd" for 0x4029ac>, <DisassemblerInsn "imul" for 0x4029af>, <DisassemblerInsn "add" for 0x4029b3>, <DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "xor" for 0x4029be>, <DisassemblerInsn "mov" for 0x4029c0>, <DisassemblerInsn "xor" for 0x4029c2>, <DisassemblerInsn "cmp" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c8>, <DisassemblerInsn "mov" for 0x4029d0>, <DisassemblerInsn "je" for 0x4029d7>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034cf>, <DisassemblerInsn "mov" for 0x4034d7>, <DisassemblerInsn "mov" for 0x4034df>, <DisassemblerInsn "mov" for 0x4034e2>, <DisassemblerInsn "mov" for 0x4034e7>, <DisassemblerInsn "call" for 0x4034e9>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031c3>, <DisassemblerInsn "mov" for 0x4031cb>, <DisassemblerInsn "mov" for 0x4031d3>, <DisassemblerInsn "mov" for 0x4031da>, <DisassemblerInsn "mov" for 0x4031e2>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "add" for 0x4031f1>, <DisassemblerInsn "mov" for 0x4031f4>, <DisassemblerInsn "mov" for 0x4031f6>, <DisassemblerInsn "shr" for 0x4031f9>, <DisassemblerInsn "mov" for 0x4031fc>, <DisassemblerInsn "add" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403202>, <DisassemblerInsn "mov" for 0x403204>, <DisassemblerInsn "movsx" for 0x403207>, <DisassemblerInsn "movsx" for 0x40320d>, <DisassemblerInsn "mov" for 0x403212>, <DisassemblerInsn "mov" for 0x40321a>, <DisassemblerInsn "mov" for 0x403221>, <DisassemblerInsn "mov" for 0x403229>, <DisassemblerInsn "mov" for 0x403230>, <DisassemblerInsn "mov" for 0x403237>, <DisassemblerInsn "mov" for 0x40323f>, <DisassemblerInsn "mov" for 0x403246>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403255>, <DisassemblerInsn "mov" for 0x40325c>, <DisassemblerInsn "mov" for 0x403260>, <DisassemblerInsn "mov" for 0x403264>, <DisassemblerInsn "mov" for 0x403269>, <DisassemblerInsn "mov" for 0x40326d>, <DisassemblerInsn "lea" for 0x403272>, <DisassemblerInsn "cmp" for 0x403279>, <DisassemblerInsn "mov" for 0x40327c>, <DisassemblerInsn "jl" for 0x403284>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402384>, <DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "mov" for 0x40239a>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "test" for 0x4023a9>, <DisassemblerInsn "sete" for 0x4023ab>, <DisassemblerInsn "xor" for 0x4023ae>, <DisassemblerInsn "or" for 0x4023b1>, <DisassemblerInsn "xor" for 0x4023b3>, <DisassemblerInsn "test" for 0x4023b5>, <DisassemblerInsn "mov" for 0x4023b8>, <DisassemblerInsn "mov" for 0x4023c0>, <DisassemblerInsn "jne" for 0x4023c7>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "and" for 0x402583>, <DisassemblerInsn "mov" for 0x402586>, <DisassemblerInsn "mov" for 0x40258d>, <DisassemblerInsn "xor" for 0x402592>, <DisassemblerInsn "mov" for 0x402594>, <DisassemblerInsn "mov" for 0x40259c>, <DisassemblerInsn "mov" for 0x4025a3>, <DisassemblerInsn "mov" for 0x4025aa>, <DisassemblerInsn "mov" for 0x4025b1>, <DisassemblerInsn "mov" for 0x4025b9>, <DisassemblerInsn "mov" for 0x4025c0>, <DisassemblerInsn "mov" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025ce>, <DisassemblerInsn "xor" for 0x4025d6>, <DisassemblerInsn "test" for 0x4025d8>, <DisassemblerInsn "mov" for 0x4025db>, <DisassemblerInsn "mov" for 0x4025e3>, <DisassemblerInsn "jne" for 0x4025ea>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402db5>, <DisassemblerInsn "mov" for 0x402dbc>, <DisassemblerInsn "mov" for 0x402dc4>, <DisassemblerInsn "mov" for 0x402dcc>, <DisassemblerInsn "mov" for 0x402dd4>, <DisassemblerInsn "mov" for 0x402ddc>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "mov" for 0x402deb>, <DisassemblerInsn "mov" for 0x402df2>, <DisassemblerInsn "mov" for 0x402dfa>, <DisassemblerInsn "mov" for 0x402e02>, <DisassemblerInsn "mov" for 0x402e0a>, <DisassemblerInsn "sub" for 0x402e12>, <DisassemblerInsn "shl" for 0x402e15>, <DisassemblerInsn "add" for 0x402e18>, <DisassemblerInsn "add" for 0x402e1a>, <DisassemblerInsn "lea" for 0x402e1c>, <DisassemblerInsn "cmp" for 0x402e23>, <DisassemblerInsn "mov" for 0x402e26>, <DisassemblerInsn "jl" for 0x402e2e>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029d9>, <DisassemblerInsn "mov" for 0x4029e1>, <DisassemblerInsn "shl" for 0x4029e9>, <DisassemblerInsn "movabs" for 0x4029ed>, <DisassemblerInsn "and" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029fa>, <DisassemblerInsn "mov" for 0x4029fd>, <DisassemblerInsn "mov" for 0x402a05>, <DisassemblerInsn "mov" for 0x402a0c>, <DisassemblerInsn "mov" for 0x402a14>, <DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a23>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "sub" for 0x402a2d>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "lea" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a3d>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "je" for 0x402a48>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401e20>, <DisassemblerInsn "push" for 0x401e21>, <DisassemblerInsn "push" for 0x401e23>, <DisassemblerInsn "sub" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "mov" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "mov" for 0x401e5b>, <DisassemblerInsn "mov" for 0x401e62>, <DisassemblerInsn "mov" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e72>, <DisassemblerInsn "mov" for 0x401e79>, <DisassemblerInsn "lea" for 0x401e80>, <DisassemblerInsn "mov" for 0x401e88>, <DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "add" for 0x401e8e>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "mov" for 0x401e9e>, <DisassemblerInsn "or" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ea8>, <DisassemblerInsn "sete" for 0x401eac>, <DisassemblerInsn "mov" for 0x401eaf>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "cmove" for 0x401ebd>, <DisassemblerInsn "and" for 0x401ec0>, <DisassemblerInsn "movzx" for 0x401ec3>, <DisassemblerInsn "cmp" for 0x401ec6>, <DisassemblerInsn "cmove" for 0x401ec9>, <DisassemblerInsn "mov" for 0x401ecc>, <DisassemblerInsn "lea" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401edb>, <DisassemblerInsn "lea" for 0x401ee3>, <DisassemblerInsn "mov" for 0x401eeb>, <DisassemblerInsn "lea" for 0x401ef3>, <DisassemblerInsn "mov" for 0x401efb>, <DisassemblerInsn "lea" for 0x401f03>, <DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "xor" for 0x401f13>, <DisassemblerInsn "mov" for 0x401f15>, <DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "mov" for 0x401f25>, <DisassemblerInsn "mov" for 0x401f2d>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "mov" for 0x401f38>, <DisassemblerInsn "mov" for 0x401f40>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f49>, <DisassemblerInsn "or" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5b>, <DisassemblerInsn "mov" for 0x401f63>, <DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6d>, <DisassemblerInsn "or" for 0x401f70>, <DisassemblerInsn "mov" for 0x401f74>, <DisassemblerInsn "mov" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f7f>, <DisassemblerInsn "mov" for 0x401f87>, <DisassemblerInsn "mov" for 0x401f8a>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "or" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401fa0>, <DisassemblerInsn "mov" for 0x401fa3>, <DisassemblerInsn "mov" for 0x401fab>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "mov" for 0x402473>, <DisassemblerInsn "mov" for 0x40247a>, <DisassemblerInsn "xor" for 0x402481>, <DisassemblerInsn "cmp" for 0x402483>, <DisassemblerInsn "mov" for 0x402485>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402493>, <DisassemblerInsn "mov" for 0x40249a>, <DisassemblerInsn "jge" for 0x4024a1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40201e>, <DisassemblerInsn "mov" for 0x402025>, <DisassemblerInsn "cmp" for 0x40202c>, <DisassemblerInsn "je" for 0x40202e>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4034ee>, <DisassemblerInsn "call" for 0x4034f6>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402034>, <DisassemblerInsn "mov" for 0x40203b>, <DisassemblerInsn "cmp" for 0x402040>, <DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "jbe" for 0x40204b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "mov" for 0x4022c6>, <DisassemblerInsn "jmp" for 0x4022cd>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403175>, <DisassemblerInsn "mov" for 0x40317c>, <DisassemblerInsn "mov" for 0x403184>, <DisassemblerInsn "mov" for 0x403189>, <DisassemblerInsn "bswap" for 0x40318b>, <DisassemblerInsn "mov" for 0x40318d>, <DisassemblerInsn "mov" for 0x40318f>, <DisassemblerInsn "sub" for 0x403194>, <DisassemblerInsn "mov" for 0x403196>, <DisassemblerInsn "shl" for 0x403198>, <DisassemblerInsn "mov" for 0x40319b>, <DisassemblerInsn "or" for 0x4031a2>, <DisassemblerInsn "add" for 0x4031a5>, <DisassemblerInsn "add" for 0x4031a9>, <DisassemblerInsn "mov" for 0x4031ac>, <DisassemblerInsn "mov" for 0x4031b4>, <DisassemblerInsn "mov" for 0x4031bb>, <DisassemblerInsn "mov" for 0x4031c3>, <DisassemblerInsn "mov" for 0x4031cb>, <DisassemblerInsn "mov" for 0x4031d3>, <DisassemblerInsn "mov" for 0x4031da>, <DisassemblerInsn "mov" for 0x4031e2>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "add" for 0x4031f1>, <DisassemblerInsn "mov" for 0x4031f4>, <DisassemblerInsn "mov" for 0x4031f6>, <DisassemblerInsn "shr" for 0x4031f9>, <DisassemblerInsn "mov" for 0x4031fc>, <DisassemblerInsn "add" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403202>, <DisassemblerInsn "mov" for 0x403204>, <DisassemblerInsn "movsx" for 0x403207>, <DisassemblerInsn "movsx" for 0x40320d>, <DisassemblerInsn "mov" for 0x403212>, <DisassemblerInsn "mov" for 0x40321a>, <DisassemblerInsn "mov" for 0x403221>, <DisassemblerInsn "mov" for 0x403229>, <DisassemblerInsn "mov" for 0x403230>, <DisassemblerInsn "mov" for 0x403237>, <DisassemblerInsn "mov" for 0x40323f>, <DisassemblerInsn "mov" for 0x403246>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403255>, <DisassemblerInsn "mov" for 0x40325c>, <DisassemblerInsn "mov" for 0x403260>, <DisassemblerInsn "mov" for 0x403264>, <DisassemblerInsn "mov" for 0x403269>, <DisassemblerInsn "mov" for 0x40326d>, <DisassemblerInsn "lea" for 0x403272>, <DisassemblerInsn "cmp" for 0x403279>, <DisassemblerInsn "mov" for 0x40327c>, <DisassemblerInsn "jl" for 0x403284>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028dd>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "mov" for 0x4028ed>, <DisassemblerInsn "mov" for 0x4028f4>, <DisassemblerInsn "mov" for 0x4028fc>, <DisassemblerInsn "mov" for 0x402903>, <DisassemblerInsn "mov" for 0x40290a>, <DisassemblerInsn "mov" for 0x402912>, <DisassemblerInsn "mov" for 0x40291a>, <DisassemblerInsn "mov" for 0x402922>, <DisassemblerInsn "mov" for 0x40292a>, <DisassemblerInsn "mov" for 0x402931>, <DisassemblerInsn "mov" for 0x402939>, <DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402948>, <DisassemblerInsn "mov" for 0x402950>, <DisassemblerInsn "mov" for 0x402958>, <DisassemblerInsn "mov" for 0x402960>, <DisassemblerInsn "mov" for 0x402968>, <DisassemblerInsn "mov" for 0x40296f>, <DisassemblerInsn "mov" for 0x402976>, <DisassemblerInsn "add" for 0x40297e>, <DisassemblerInsn "mov" for 0x402982>, <DisassemblerInsn "imul" for 0x40298a>, <DisassemblerInsn "cdq" for 0x40298d>, <DisassemblerInsn "idiv" for 0x40298e>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402998>, <DisassemblerInsn "mov" for 0x40299a>, <DisassemblerInsn "and" for 0x4029a2>, <DisassemblerInsn "mov" for 0x4029a5>, <DisassemblerInsn "movsxd" for 0x4029ac>, <DisassemblerInsn "imul" for 0x4029af>, <DisassemblerInsn "add" for 0x4029b3>, <DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "xor" for 0x4029be>, <DisassemblerInsn "mov" for 0x4029c0>, <DisassemblerInsn "xor" for 0x4029c2>, <DisassemblerInsn "cmp" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c8>, <DisassemblerInsn "mov" for 0x4029d0>, <DisassemblerInsn "je" for 0x4029d7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403403>, <DisassemblerInsn "mov" for 0x403407>, <DisassemblerInsn "mov" for 0x40340f>, <DisassemblerInsn "mov" for 0x403412>, <DisassemblerInsn "lea" for 0x403417>, <DisassemblerInsn "mov" for 0x40341e>, <DisassemblerInsn "call" for 0x403420>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "movzx" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "lea" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "xor" for 0x40225e>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x40227d>, <DisassemblerInsn "mov" for 0x402285>, <DisassemblerInsn "mov" for 0x40228d>, <DisassemblerInsn "call" for 0x402295>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022d2>, <DisassemblerInsn "movzx" for 0x4022da>, <DisassemblerInsn "mov" for 0x4022e2>, <DisassemblerInsn "mov" for 0x4022e9>, <DisassemblerInsn "add" for 0x4022ec>, <DisassemblerInsn "mov" for 0x4022f0>, <DisassemblerInsn "mov" for 0x4022f8>, <DisassemblerInsn "mov" for 0x4022fb>, <DisassemblerInsn "xor" for 0x402302>, <DisassemblerInsn "cmp" for 0x402304>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "jle" for 0x40230e>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e8e>, <DisassemblerInsn "mov" for 0x402e95>, <DisassemblerInsn "mov" for 0x402e9d>, <DisassemblerInsn "mov" for 0x402ea5>, <DisassemblerInsn "bswap" for 0x402ea7>, <DisassemblerInsn "mov" for 0x402ea9>, <DisassemblerInsn "mov" for 0x402eab>, <DisassemblerInsn "mov" for 0x402ead>, <DisassemblerInsn "sub" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb4>, <DisassemblerInsn "shl" for 0x402eb6>, <DisassemblerInsn "mov" for 0x402eb9>, <DisassemblerInsn "or" for 0x402ebc>, <DisassemblerInsn "add" for 0x402ebf>, <DisassemblerInsn "add" for 0x402ec3>, <DisassemblerInsn "mov" for 0x402ec6>, <DisassemblerInsn "mov" for 0x402ece>, <DisassemblerInsn "mov" for 0x402ed6>, <DisassemblerInsn "mov" for 0x402edd>, <DisassemblerInsn "mov" for 0x402ee5>, <DisassemblerInsn "mov" for 0x402eed>, <DisassemblerInsn "mov" for 0x402ef5>, <DisassemblerInsn "mov" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f03>, <DisassemblerInsn "mov" for 0x402f0b>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "shr" for 0x402f16>, <DisassemblerInsn "mov" for 0x402f19>, <DisassemblerInsn "movabs" for 0x402f21>, <DisassemblerInsn "and" for 0x402f2b>, <DisassemblerInsn "movsx" for 0x402f2e>, <DisassemblerInsn "mov" for 0x402f33>, <DisassemblerInsn "mov" for 0x402f3a>, <DisassemblerInsn "movsx" for 0x402f40>, <DisassemblerInsn "mov" for 0x402f44>, <DisassemblerInsn "cmp" for 0x402f4b>, <DisassemblerInsn "mov" for 0x402f50>, <DisassemblerInsn "mov" for 0x402f58>, <DisassemblerInsn "mov" for 0x402f5f>, <DisassemblerInsn "mov" for 0x402f67>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "jge" for 0x402f75>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f25>, <DisassemblerInsn "mov" for 0x401f2d>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "mov" for 0x401f38>, <DisassemblerInsn "mov" for 0x401f40>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f49>, <DisassemblerInsn "or" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5b>, <DisassemblerInsn "mov" for 0x401f63>, <DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6d>, <DisassemblerInsn "or" for 0x401f70>, <DisassemblerInsn "mov" for 0x401f74>, <DisassemblerInsn "mov" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f7f>, <DisassemblerInsn "mov" for 0x401f87>, <DisassemblerInsn "mov" for 0x401f8a>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "or" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401fa0>, <DisassemblerInsn "mov" for 0x401fa3>, <DisassemblerInsn "mov" for 0x401fab>, <DisassemblerInsn "add" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb2>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "mov" for 0x401fbe>, <DisassemblerInsn "add" for 0x401fc6>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "cmp" for 0x401fd2>, <DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "mov" for 0x401fe1>, <DisassemblerInsn "jne" for 0x401fe9>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f7b>, <DisassemblerInsn "mov" for 0x402f83>, <DisassemblerInsn "mov" for 0x402f8b>, <DisassemblerInsn "mov" for 0x402f92>, <DisassemblerInsn "mov" for 0x402f99>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "shl" for 0x402fa9>, <DisassemblerInsn "mov" for 0x402fac>, <DisassemblerInsn "mov" for 0x402fb3>, <DisassemblerInsn "sub" for 0x402fbb>, <DisassemblerInsn "mov" for 0x402fbd>, <DisassemblerInsn "neg" for 0x402fc4>, <DisassemblerInsn "mov" for 0x402fc6>, <DisassemblerInsn "mov" for 0x402fcd>, <DisassemblerInsn "sub" for 0x402fcf>, <DisassemblerInsn "setb" for 0x402fd1>, <DisassemblerInsn "mov" for 0x402fd5>, <DisassemblerInsn "sub" for 0x402fd8>, <DisassemblerInsn "setb" for 0x402fdb>, <DisassemblerInsn "and" for 0x402fdf>, <DisassemblerInsn "test" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff5>, <DisassemblerInsn "jne" for 0x402ffd>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4034c4>, <DisassemblerInsn "mov" for 0x4034c6>, <DisassemblerInsn "jmp" for 0x4034cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033bc>, <DisassemblerInsn "mov" for 0x4033c3>, <DisassemblerInsn "mov" for 0x4033cb>, <DisassemblerInsn "mov" for 0x4033d2>, <DisassemblerInsn "mov" for 0x4033da>, <DisassemblerInsn "mov" for 0x4033e2>, <DisassemblerInsn "mov" for 0x4033e7>, <DisassemblerInsn "mov" for 0x4033ec>, <DisassemblerInsn "sub" for 0x4033f0>, <DisassemblerInsn "shl" for 0x4033f3>, <DisassemblerInsn "add" for 0x4033f6>, <DisassemblerInsn "add" for 0x4033f8>, <DisassemblerInsn "mov" for 0x4033fa>, <DisassemblerInsn "cmp" for 0x4033fe>, <DisassemblerInsn "jle" for 0x403401>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023cd>, <DisassemblerInsn "mov" for 0x4023d5>, <DisassemblerInsn "mov" for 0x4023dd>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "mov" for 0x4023ed>, <DisassemblerInsn "mov" for 0x4023f5>, <DisassemblerInsn "mov" for 0x4023fd>, <DisassemblerInsn "mov" for 0x402405>, <DisassemblerInsn "add" for 0x402408>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "test" for 0x402412>, <DisassemblerInsn "mov" for 0x402416>, <DisassemblerInsn "cmovne" for 0x402419>, <DisassemblerInsn "mov" for 0x40241d>, <DisassemblerInsn "test" for 0x402425>, <DisassemblerInsn "cmovne" for 0x402429>, <DisassemblerInsn "mov" for 0x40242d>, <DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "add" for 0x402438>, <DisassemblerInsn "mov" for 0x40243b>, <DisassemblerInsn "cmp" for 0x402443>, <DisassemblerInsn "mov" for 0x402446>, <DisassemblerInsn "mov" for 0x40244e>, <DisassemblerInsn "jl" for 0x402455>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "add" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb2>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "mov" for 0x401fbe>, <DisassemblerInsn "add" for 0x401fc6>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "cmp" for 0x401fd2>, <DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "mov" for 0x401fe1>, <DisassemblerInsn "jne" for 0x401fe9>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b3>, <DisassemblerInsn "mov" for 0x4027bb>, <DisassemblerInsn "add" for 0x4027c3>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d5>, <DisassemblerInsn "mov" for 0x4027d9>, <DisassemblerInsn "mov" for 0x4027e1>, <DisassemblerInsn "mov" for 0x4027e4>, <DisassemblerInsn "cmp" for 0x4027eb>, <DisassemblerInsn "jle" for 0x4027ee>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025aa>, <DisassemblerInsn "mov" for 0x4025b1>, <DisassemblerInsn "mov" for 0x4025b9>, <DisassemblerInsn "mov" for 0x4025c0>, <DisassemblerInsn "mov" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025ce>, <DisassemblerInsn "xor" for 0x4025d6>, <DisassemblerInsn "test" for 0x4025d8>, <DisassemblerInsn "mov" for 0x4025db>, <DisassemblerInsn "mov" for 0x4025e3>, <DisassemblerInsn "jne" for 0x4025ea>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c5>, <DisassemblerInsn "movzx" for 0x4020cc>, <DisassemblerInsn "mov" for 0x4020cf>, <DisassemblerInsn "mov" for 0x4020d6>, <DisassemblerInsn "sub" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "shr" for 0x4020e2>, <DisassemblerInsn "mov" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020eb>, <DisassemblerInsn "mov" for 0x4020f2>, <DisassemblerInsn "mov" for 0x4020f9>, <DisassemblerInsn "mov" for 0x402101>, <DisassemblerInsn "mov" for 0x402108>, <DisassemblerInsn "cmp" for 0x40210d>, <DisassemblerInsn "mov" for 0x402111>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x402120>, <DisassemblerInsn "jle" for 0x402127>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026c3>, <DisassemblerInsn "mov" for 0x4026cb>, <DisassemblerInsn "mov" for 0x4026d3>, <DisassemblerInsn "mov" for 0x4026db>, <DisassemblerInsn "mov" for 0x4026e3>, <DisassemblerInsn "mov" for 0x4026eb>, <DisassemblerInsn "mov" for 0x4026f3>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "add" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402701>, <DisassemblerInsn "test" for 0x402708>, <DisassemblerInsn "mov" for 0x40270c>, <DisassemblerInsn "cmovne" for 0x40270f>, <DisassemblerInsn "mov" for 0x402713>, <DisassemblerInsn "test" for 0x40271b>, <DisassemblerInsn "cmovne" for 0x40271f>, <DisassemblerInsn "mov" for 0x402723>, <DisassemblerInsn "mov" for 0x40272a>, <DisassemblerInsn "add" for 0x40272e>, <DisassemblerInsn "mov" for 0x402731>, <DisassemblerInsn "cmp" for 0x402739>, <DisassemblerInsn "mov" for 0x40273c>, <DisassemblerInsn "mov" for 0x402744>, <DisassemblerInsn "jl" for 0x40274b>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034fb>, <DisassemblerInsn "mov" for 0x403500>, <DisassemblerInsn "mov" for 0x403507>, <DisassemblerInsn "add" for 0x40350e>, <DisassemblerInsn "pop" for 0x403515>, <DisassemblerInsn "pop" for 0x403516>, <DisassemblerInsn "pop" for 0x403518>, <DisassemblerInsn "ret" for 0x403519>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40229a>, <DisassemblerInsn "je" for 0x40229d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ad8>, <DisassemblerInsn "mov" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae8>, <DisassemblerInsn "mov" for 0x402af0>, <DisassemblerInsn "mov" for 0x402af7>, <DisassemblerInsn "mov" for 0x402aff>, <DisassemblerInsn "mov" for 0x402b07>, <DisassemblerInsn "mov" for 0x402b0f>, <DisassemblerInsn "mov" for 0x402b17>, <DisassemblerInsn "mov" for 0x402b1a>, <DisassemblerInsn "cmp" for 0x402b22>, <DisassemblerInsn "mov" for 0x402b29>, <DisassemblerInsn "mov" for 0x402b31>, <DisassemblerInsn "mov" for 0x402b38>, <DisassemblerInsn "mov" for 0x402b40>, <DisassemblerInsn "mov" for 0x402b48>, <DisassemblerInsn "mov" for 0x402b50>, <DisassemblerInsn "ja" for 0x402b58>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403507>, <DisassemblerInsn "add" for 0x40350e>, <DisassemblerInsn "pop" for 0x403515>, <DisassemblerInsn "pop" for 0x403516>, <DisassemblerInsn "pop" for 0x403518>, <DisassemblerInsn "ret" for 0x403519>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40328a>, <DisassemblerInsn "mov" for 0x403292>, <DisassemblerInsn "mov" for 0x40329a>, <DisassemblerInsn "mov" for 0x4032a2>, <DisassemblerInsn "mov" for 0x4032aa>, <DisassemblerInsn "mov" for 0x4032b1>, <DisassemblerInsn "mov" for 0x4032b9>, <DisassemblerInsn "mov" for 0x4032be>, <DisassemblerInsn "mov" for 0x4032c3>, <DisassemblerInsn "mov" for 0x4032c7>, <DisassemblerInsn "sub" for 0x4032cb>, <DisassemblerInsn "mov" for 0x4032cd>, <DisassemblerInsn "shl" for 0x4032cf>, <DisassemblerInsn "mov" for 0x4032d2>, <DisassemblerInsn "mov" for 0x4032d7>, <DisassemblerInsn "add" for 0x4032da>, <DisassemblerInsn "test" for 0x4032dc>, <DisassemblerInsn "mov" for 0x4032e0>, <DisassemblerInsn "cmovne" for 0x4032e3>, <DisassemblerInsn "test" for 0x4032e7>, <DisassemblerInsn "cmovne" for 0x4032eb>, <DisassemblerInsn "mov" for 0x4032ee>, <DisassemblerInsn "add" for 0x4032f2>, <DisassemblerInsn "cmp" for 0x4032f5>, <DisassemblerInsn "mov" for 0x4032f8>, <DisassemblerInsn "mov" for 0x403300>, <DisassemblerInsn "mov" for 0x403307>, <DisassemblerInsn "mov" for 0x40330f>, <DisassemblerInsn "mov" for 0x403317>, <DisassemblerInsn "jl" for 0x40331e>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca9>, <DisassemblerInsn "mov" for 0x402cb1>, <DisassemblerInsn "mov" for 0x402cb9>, <DisassemblerInsn "mov" for 0x402cc0>, <DisassemblerInsn "mov" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402cd0>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "mov" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402ce3>, <DisassemblerInsn "mov" for 0x402ce5>, <DisassemblerInsn "mov" for 0x402cec>, <DisassemblerInsn "sub" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cf8>, <DisassemblerInsn "mov" for 0x402d00>, <DisassemblerInsn "mov" for 0x402d02>, <DisassemblerInsn "mov" for 0x402d0a>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d17>, <DisassemblerInsn "mov" for 0x402d1e>, <DisassemblerInsn "mov" for 0x402d25>, <DisassemblerInsn "mov" for 0x402d2d>, <DisassemblerInsn "mov" for 0x402d35>, <DisassemblerInsn "mov" for 0x402d3c>, <DisassemblerInsn "mov" for 0x402d44>, <DisassemblerInsn "mov" for 0x402d4c>, <DisassemblerInsn "mov" for 0x402d54>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "mov" for 0x402d63>, <DisassemblerInsn "mov" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d72>, <DisassemblerInsn "mov" for 0x402d7a>, <DisassemblerInsn "xor" for 0x402d82>, <DisassemblerInsn "test" for 0x402d84>, <DisassemblerInsn "mov" for 0x402d88>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "mov" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9f>, <DisassemblerInsn "mov" for 0x402da7>, <DisassemblerInsn "jne" for 0x402dae>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402052>, <DisassemblerInsn "mov" for 0x40205a>, <DisassemblerInsn "mov" for 0x402062>, <DisassemblerInsn "mov" for 0x402069>, <DisassemblerInsn "sub" for 0x402070>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "sete" for 0x40207a>, <DisassemblerInsn "test" for 0x40207d>, <DisassemblerInsn "setne" for 0x402080>, <DisassemblerInsn "and" for 0x402083>, <DisassemblerInsn "mov" for 0x402085>, <DisassemblerInsn "add" for 0x40208c>, <DisassemblerInsn "mov" for 0x402090>, <DisassemblerInsn "test" for 0x402098>, <DisassemblerInsn "mov" for 0x40209b>, <DisassemblerInsn "jne" for 0x4020a3>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "movzx" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "lea" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "xor" for 0x40225e>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x40227d>, <DisassemblerInsn "mov" for 0x402285>, <DisassemblerInsn "mov" for 0x40228d>, <DisassemblerInsn "call" for 0x402295>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40204d>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d3c>, <DisassemblerInsn "mov" for 0x402d44>, <DisassemblerInsn "mov" for 0x402d4c>, <DisassemblerInsn "mov" for 0x402d54>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "mov" for 0x402d63>, <DisassemblerInsn "mov" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d72>, <DisassemblerInsn "mov" for 0x402d7a>, <DisassemblerInsn "xor" for 0x402d82>, <DisassemblerInsn "test" for 0x402d84>, <DisassemblerInsn "mov" for 0x402d88>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "mov" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9f>, <DisassemblerInsn "mov" for 0x402da7>, <DisassemblerInsn "jne" for 0x402dae>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022ab>, <DisassemblerInsn "mov" for 0x4022ae>, <DisassemblerInsn "lea" for 0x4022b3>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "call" for 0x4022bc>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021f9>, <DisassemblerInsn "mov" for 0x402200>, <DisassemblerInsn "mov" for 0x402202>, <DisassemblerInsn "cmp" for 0x402209>, <DisassemblerInsn "mov" for 0x40220b>, <DisassemblerInsn "jb" for 0x402212>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x402463>, <DisassemblerInsn "mov" for 0x402465>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "mov" for 0x402473>, <DisassemblerInsn "mov" for 0x40247a>, <DisassemblerInsn "xor" for 0x402481>, <DisassemblerInsn "cmp" for 0x402483>, <DisassemblerInsn "mov" for 0x402485>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402493>, <DisassemblerInsn "mov" for 0x40249a>, <DisassemblerInsn "jge" for 0x4024a1>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c17>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "mov" for 0x402c25>, <DisassemblerInsn "mov" for 0x402c2d>, <DisassemblerInsn "mov" for 0x402c34>, <DisassemblerInsn "mov" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c44>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5c>, <DisassemblerInsn "mov" for 0x402c64>, <DisassemblerInsn "mov" for 0x402c6c>, <DisassemblerInsn "mov" for 0x402c74>, <DisassemblerInsn "mov" for 0x402c7b>, <DisassemblerInsn "cmp" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c85>, <DisassemblerInsn "mov" for 0x402c8c>, <DisassemblerInsn "mov" for 0x402c94>, <DisassemblerInsn "jge" for 0x402c9c>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bb8>, <DisassemblerInsn "mov" for 0x402bc0>, <DisassemblerInsn "mov" for 0x402bc7>, <DisassemblerInsn "shl" for 0x402bca>, <DisassemblerInsn "mov" for 0x402bce>, <DisassemblerInsn "mov" for 0x402bd0>, <DisassemblerInsn "add" for 0x402bd3>, <DisassemblerInsn "mov" for 0x402bd6>, <DisassemblerInsn "bswap" for 0x402bd9>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "add" for 0x402bdf>, <DisassemblerInsn "mov" for 0x402be3>, <DisassemblerInsn "mov" for 0x402be8>, <DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf7>, <DisassemblerInsn "mov" for 0x402bff>, <DisassemblerInsn "mov" for 0x402c07>, <DisassemblerInsn "mov" for 0x402c0f>, <DisassemblerInsn "mov" for 0x402c17>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "mov" for 0x402c25>, <DisassemblerInsn "mov" for 0x402c2d>, <DisassemblerInsn "mov" for 0x402c34>, <DisassemblerInsn "mov" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c44>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5c>, <DisassemblerInsn "mov" for 0x402c64>, <DisassemblerInsn "mov" for 0x402c6c>, <DisassemblerInsn "mov" for 0x402c74>, <DisassemblerInsn "mov" for 0x402c7b>, <DisassemblerInsn "cmp" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c85>, <DisassemblerInsn "mov" for 0x402c8c>, <DisassemblerInsn "mov" for 0x402c94>, <DisassemblerInsn "jge" for 0x402c9c>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a0c>, <DisassemblerInsn "mov" for 0x402a14>, <DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a23>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "sub" for 0x402a2d>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "lea" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a3d>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "je" for 0x402a48>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402db0>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403237>, <DisassemblerInsn "mov" for 0x40323f>, <DisassemblerInsn "mov" for 0x403246>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403255>, <DisassemblerInsn "mov" for 0x40325c>, <DisassemblerInsn "mov" for 0x403260>, <DisassemblerInsn "mov" for 0x403264>, <DisassemblerInsn "mov" for 0x403269>, <DisassemblerInsn "mov" for 0x40326d>, <DisassemblerInsn "lea" for 0x403272>, <DisassemblerInsn "cmp" for 0x403279>, <DisassemblerInsn "mov" for 0x40327c>, <DisassemblerInsn "jl" for 0x403284>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e34>, <DisassemblerInsn "mov" for 0x402e3b>, <DisassemblerInsn "mov" for 0x402e43>, <DisassemblerInsn "mov" for 0x402e4b>, <DisassemblerInsn "mov" for 0x402e53>, <DisassemblerInsn "mov" for 0x402e5a>, <DisassemblerInsn "sub" for 0x402e5c>, <DisassemblerInsn "setb" for 0x402e5e>, <DisassemblerInsn "mov" for 0x402e62>, <DisassemblerInsn "sub" for 0x402e65>, <DisassemblerInsn "setb" for 0x402e68>, <DisassemblerInsn "and" for 0x402e6c>, <DisassemblerInsn "test" for 0x402e6f>, <DisassemblerInsn "mov" for 0x402e73>, <DisassemblerInsn "mov" for 0x402e7b>, <DisassemblerInsn "mov" for 0x402e83>, <DisassemblerInsn "jne" for 0x402e8a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 65, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2d4]>', '<mov~~edi, dword ptr [rsp + 0x164]>', '<mov~~r10, qword ptr [rsp + 0x510]>', '<mov~~r8, qword ptr [rsp + 0x168]>', '<mov~~edx, dword ptr [rsp + 0x194]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x17c]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1b8], r8>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jne~~0x402d3c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x46c]>', '<mov~~edx, dword ptr [rsp + 0x51c]>', '<mov~~esi, dword ptr [rsp + 0x534]>', '<mov~~eax, dword ptr [rsp + 0x50c]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x43e], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x43f], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x440], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x448], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x454], ecx>', '<mov~~dword ptr [rsp + 0x458], eax>', '<jmp~~0x4024a7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x4ac]>', '<mov~~rsi, qword ptr [rsp + 0x4a0]>', '<mov~~dword ptr [rsp + 0x484], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x478], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x480], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x484]>', '<mov~~dword ptr [rsp + 0x488], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xb9a]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x494], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x490], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x494]>', '<mov~~dword ptr [rsp + 0x498], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x79c], r8d>', '<mov~~byte ptr [rsp + rsi + 0x69f], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xb98]>', '<mov~~byte ptr [rsp + rsi + 0x59f], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4ac], ecx>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<ja~~0x40212d>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x4025aa>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x208]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rsi, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~r8, qword ptr [rsp + 0x40]>', '<mov~~r9d, dword ptr [rsp + 0x2d4]>', '<mov~~r11, qword ptr [rsp + 0x2c0]>', '<mov~~r10, qword ptr [rsp + 0x360]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x348], r11>', '<mov~~dword ptr [rsp + 0x350], r10d>', '<mov~~dword ptr [rsp + 0x354], r9d>', '<mov~~qword ptr [rsp + 0x288], r8>', '<mov~~qword ptr [rsp + 0x280], rdi>', '<mov~~qword ptr [rsp + 0x278], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x26c], ecx>', '<mov~~dword ptr [rsp + 0x268], eax>', '<jl~~0x4028dd>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x4031c3>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~dword ptr [rsp + 0x4b4], eax>', '<cmp~~eax, -1>', '<jle~~0x4021f9>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x402edd>']}, {'block_Idx': 38, 'blockInsts': ['<lea~~rdi, [rsp + 0x588]>', '<call~~0x500080>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3c0]>', '<mov~~rcx, qword ptr [rsp + 0x3b8]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x3b0]>', '<mov~~r10b, byte ptr [rsp + 0x43f]>', '<mov~~r11d, dword ptr [rsp + 0x45c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x394], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x398], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x39c], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~dword ptr [rsp + 0x3c0], eax>', '<jl~~0x4025f1>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40267f>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3e8]>', '<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~rdi, qword ptr [rsp + 0x510]>', '<movsxd~~rax, esi>', '<imul~~rax, rdi>', '<add~~rcx, rax>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<mov~~eax, edx>', '<sub~~eax, esi>', '<mov~~dword ptr [rsp + 0x3e4], eax>', '<add~~esi, 1>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x424], eax>', '<mov~~eax, 0x80>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~dword ptr [rsp + 0x414], eax>', '<je~~0x402384>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~rdi, qword ptr [rsp + 0x2f0]>', '<mov~~ecx, dword ptr [rsp + 0x2bc]>', '<mov~~rsi, qword ptr [rsp + 0x358]>', '<mov~~edx, dword ptr [rsp + 0x258]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<call~~0x500078>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x402751>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2b0]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~edi, dword ptr [rsp + 0x290]>', '<mov~~r8, qword ptr [rsp + 0x228]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x230], edi>', '<mov~~dword ptr [rsp + 0x234], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<je~~0x402c17>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x43e]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x3b0]>', '<mov~~eax, dword ptr [rsp + 0x3c0]>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x390], eax>', '<jne~~0x4026c3>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x368]>', '<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~esi, dword ptr [rsp + 0x51c]>', '<mov~~rdi, qword ptr [rsp + 0x548]>', '<mov~~r8d, dword ptr [rsp + 0x534]>', '<mov~~edx, dword ptr [rsp + 0x50c]>', '<mov~~r10, qword ptr [rsp + 0x528]>', '<mov~~r9, r10>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x2f0], r9>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x30f], r9b>', '<lea~~r9, [rsp + 0x588]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x310], r9>', '<lea~~r9, [rsp + 0x588]>', '<mov~~qword ptr [rsp + 0x318], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x327], r8b>', '<mov~~qword ptr [rsp + 0x328], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x330], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x338], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x340], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x348], rdx>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<mov~~dword ptr [rsp + 0x354], eax>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~r8d, dword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x544]>', '<mov~~rax, qword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x350]>', '<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~r9, qword ptr [rsp + 0x288]>', '<mov~~r10, qword ptr [rsp + 0x280]>', '<mov~~r11, qword ptr [rsp + 0x278]>', '<mov~~rbx, qword ptr [rsp + 0x270]>', '<mov~~ebp, dword ptr [rsp + 0x26c]>', '<mov~~r14d, dword ptr [rsp + 0x268]>', '<mov~~dword ptr [rsp + 0x290], r14d>', '<mov~~dword ptr [rsp + 0x294], ebp>', '<mov~~qword ptr [rsp + 0x298], rbx>', '<mov~~qword ptr [rsp + 0x2a0], r11>', '<mov~~qword ptr [rsp + 0x2a8], r10>', '<mov~~qword ptr [rsp + 0x2b0], r9>', '<mov~~dword ptr [rsp + 0x2b8], ecx>', '<mov~~dword ptr [rsp + 0x2bc], edi>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<add~~rax, 1>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x544]>', '<mov~~ecx, dword ptr [rsp + 0x450]>', '<mov~~edi, dword ptr [rsp + 0x454]>', '<mov~~eax, dword ptr [rsp + 0x458]>', '<mov~~dword ptr [rsp + 0x3e8], edi>', '<mov~~dword ptr [rsp + 0x3ec], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x3f4], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x3e8]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x3ec]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3f0], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jle~~0x40246c>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3c4]>', '<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~rdi, qword ptr [rsp + 0x510]>', '<mov~~rdx, qword ptr [rsp + 0x380]>', '<mov~~ecx, dword ptr [rsp + 0x390]>', '<add~~rdx, rdi>', '<add~~eax, 2>', '<cmp~~eax, esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x418], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x414], esi>', '<mov~~qword ptr [rsp + 0x3c8], rdx>', '<mov~~dword ptr [rsp + 0x3d0], ecx>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<je~~0x402384>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x558]>', '<mov~~eax, dword ptr [rsp + 0x554]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4d8], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe047]>', '<call~~0x500068>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~esi, dword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0xec], esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x198]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x403237>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2c0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x520]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<je~~0x402a0c>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x328]>', '<mov~~rdx, qword ptr [rsp + 0x260]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0xbc]>', '<mov~~ecx, dword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x47f7]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x4034cf>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x43e]>', '<mov~~edx, dword ptr [rsp + 0x424]>', '<mov~~rsi, qword ptr [rsp + 0x418]>', '<mov~~eax, dword ptr [rsp + 0x414]>', '<mov~~qword ptr [rsp + 0x428], rsi>', '<test~~edx, edx>', '<sete~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~dword ptr [rsp + 0x438], eax>', '<jne~~0x40245b>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3d8]>', '<mov~~eax, dword ptr [rsp + 0x3e4]>', '<and~~eax, 0xfffffffe>', '<mov~~dword ptr [rsp + 0x3c4], eax>', '<mov~~ecx, 0x80>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x3c8], rdx>', '<mov~~dword ptr [rsp + 0x3d0], ecx>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<mov~~dl, byte ptr [rsp + 0x43e]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~eax, dword ptr [rsp + 0x3d0]>', '<mov~~esi, dword ptr [rsp + 0x3d4]>', '<mov~~dword ptr [rsp + 0x3ac], esi>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~dword ptr [rsp + 0x3c0], eax>', '<jne~~0x4025f1>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~r8d, dword ptr [rsp + 0x17c]>', '<mov~~r9, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x188]>', '<mov~~ecx, dword ptr [rsp + 0x194]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~qword ptr [rsp + 0x140], rsi>', '<mov~~qword ptr [rsp + 0x148], r9>', '<mov~~dword ptr [rsp + 0x154], r8d>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x4c2d]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x4034cf>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x258], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x25c], ecx>', '<lea~~rax, [rip + 0x4fd1]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<je~~0x4034cf>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13a0>', '<mov~~dword ptr [rsp + 0x50c], r9d>', '<mov~~qword ptr [rsp + 0x510], r8>', '<mov~~dword ptr [rsp + 0x51c], ecx>', '<mov~~qword ptr [rsp + 0x520], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x528], rdi>', '<mov~~eax, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x534], eax>', '<mov~~rax, qword ptr [rsp + 0x13c8]>', '<mov~~qword ptr [rsp + 0x538], rax>', '<mov~~edx, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x544], edx>', '<lea~~rdx, [rsp + 0x588]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x548], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x554], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x558], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x560], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~qword ptr [rsp + 0x580], rax>', '<mov~~rsi, qword ptr [rsp + 0x580]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f0], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3f4]>', '<mov~~edx, dword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x450], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jge~~0x403507>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xba2]>', '<mov~~byte ptr [rsp + 0x4df], al>', '<cmp~~al, 0>', '<je~~0x4022d2>']}, {'block_Idx': 51, 'blockInsts': ['<lea~~rdi, [rsp + 0x588]>', '<call~~0x500080>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4df]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<jbe~~0x402052>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jmp~~0x403507>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0xbc]>', '<mov~~ecx, dword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x47f7]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x4034cf>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~r8d, dword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x544]>', '<mov~~rax, qword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x350]>', '<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~r9, qword ptr [rsp + 0x288]>', '<mov~~r10, qword ptr [rsp + 0x280]>', '<mov~~r11, qword ptr [rsp + 0x278]>', '<mov~~rbx, qword ptr [rsp + 0x270]>', '<mov~~ebp, dword ptr [rsp + 0x26c]>', '<mov~~r14d, dword ptr [rsp + 0x268]>', '<mov~~dword ptr [rsp + 0x290], r14d>', '<mov~~dword ptr [rsp + 0x294], ebp>', '<mov~~qword ptr [rsp + 0x298], rbx>', '<mov~~qword ptr [rsp + 0x2a0], r11>', '<mov~~qword ptr [rsp + 0x2a8], r10>', '<mov~~qword ptr [rsp + 0x2b0], r9>', '<mov~~dword ptr [rsp + 0x2b8], ecx>', '<mov~~dword ptr [rsp + 0x2bc], edi>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x520]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<je~~0x402a0c>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x328]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x4662]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x570]>', '<mov~~r10, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~sil, byte ptr [rsp + 0x477]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<movzx~~ecx, word ptr [rsp + 0xba0]>', '<mov~~dword ptr [rsp + 0x45c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x460], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x46c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jle~~0x403507>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x138], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~esi, dword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0xec], esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x198]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x403237>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x580]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f0], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~qword ptr [rsp + 0x580], rax>', '<jne~~0x401f25>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0x1f0]>', '<mov~~edi, dword ptr [rsp + 0x104]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xcc], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<jne~~0x403001>']}, {'block_Idx': 44, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jmp~~0x403507>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x208]>', '<mov~~rcx, qword ptr [rsp + 0x1e8]>', '<mov~~eax, dword ptr [rsp + 0x20c]>', '<mov~~rsi, qword ptr [rsp + 0x210]>', '<mov~~rdi, qword ptr [rsp + 0x218]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~dword ptr [rsp + 0x50], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<cmp~~eax, 0x20>', '<jle~~0x403425>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x438]>', '<mov~~rcx, qword ptr [rsp + 0x430]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x428]>', '<mov~~r10b, byte ptr [rsp + 0x43f]>', '<mov~~r11d, dword ptr [rsp + 0x45c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x400], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x404], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x408], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~dword ptr [rsp + 0x438], eax>', '<jl~~0x4023cd>']}, {'block_Idx': 1, 'blockInsts': ['<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~qword ptr [rsp + 0x580], rax>', '<jne~~0x401f25>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x368], eax>', '<cmp~~eax, 0>', '<jle~~0x4034b7>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x43e]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~eax, dword ptr [rsp + 0x3d0]>', '<mov~~esi, dword ptr [rsp + 0x3d4]>', '<mov~~dword ptr [rsp + 0x3ac], esi>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~dword ptr [rsp + 0x3c0], eax>', '<jne~~0x4025f1>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~al, byte ptr [rsp + 0x4c5]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x49c], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x49c]>', '<mov~~dword ptr [rsp + rdx*4 + 0x7a0], esi>', '<mov~~byte ptr [rsp + rdx + 0x6a0], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xba0]>', '<mov~~byte ptr [rsp + rdx + 0x5a0], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4ac], ecx>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<jle~~0x4021f9>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x390]>', '<mov~~rcx, qword ptr [rsp + 0x388]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x380]>', '<mov~~r10b, byte ptr [rsp + 0x43f]>', '<mov~~r11d, dword ptr [rsp + 0x45c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x36c], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x370], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x374], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x390], eax>', '<jl~~0x4026c3>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x470], eax>', '<mov~~eax, dword ptr [rsp + 0x470]>', '<add~~rsp, 0x13a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x4027b3>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x2f0]>', '<mov~~r9d, dword ptr [rsp + 0x25c]>', '<mov~~r8d, dword ptr [rsp + 0x290]>', '<mov~~edi, dword ptr [rsp + 0x294]>', '<mov~~rsi, qword ptr [rsp + 0x298]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~rcx, qword ptr [rsp + 0x2a8]>', '<mov~~rax, qword ptr [rsp + 0x2b0]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x228], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x230], r8d>', '<mov~~dword ptr [rsp + 0x234], edi>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<ja~~0x402c17>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x470]>', '<add~~rsp, 0x13a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x338]>', '<mov~~r9, qword ptr [rsp + 0x330]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~ebx, dword ptr [rsp + 0x154]>', '<mov~~bpl, byte ptr [rsp + 0x327]>', '<mov~~r14d, dword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x6c]>', '<sub~~eax, ecx>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jl~~0x402db5>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rcx, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~edi, dword ptr [rsp + 0x2b8]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~rsi, qword ptr [rsp + 0x318]>', '<mov~~r9, qword ptr [rsp + 0x310]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x198], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1a4], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1a8], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1b8], r8>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~qword ptr [rsp + 0x1c8], rdx>', '<mov~~qword ptr [rsp + 0x1d0], rcx>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<mov~~r8b, byte ptr [rsp + 0x30f]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~r9d, dword ptr [rsp + 0x1c0]>', '<mov~~esi, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x164], r9d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jne~~0x402db5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xba2]>', '<mov~~byte ptr [rsp + 0x4c5], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x4c6], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x4c7], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<jne~~0x402052>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x476]>', '<mov~~byte ptr [rsp + 0x477], al>', '<mov~~rax, qword ptr [rsp + 0x570]>', '<mov~~r10, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~sil, byte ptr [rsp + 0x477]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x4022a3>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x30f]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~r9d, dword ptr [rsp + 0x1c0]>', '<mov~~esi, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x164], r9d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jne~~0x402db5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x548]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5738]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4c5]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x476], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x477], al>', '<jb~~0x402222>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x460]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<mov~~ecx, dword ptr [rsp + 0x3f4]>', '<mov~~edx, dword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x450], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~dword ptr [rsp + 0x470], eax>', '<jge~~0x403507>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~edi, dword ptr [rsp + 0x2d4]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~r9, qword ptr [rsp + 0x240]>', '<mov~~r10, qword ptr [rsp + 0x248]>', '<mov~~rax, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<mov~~qword ptr [rsp + 0x1e8], r10>', '<mov~~qword ptr [rsp + 0x1f0], r9>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~dword ptr [rsp + 0x208], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jge~~0x4033bc>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x228]>', '<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x230], r8d>', '<mov~~dword ptr [rsp + 0x234], edi>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~edi, dword ptr [rsp + 0x2d4]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~r9, qword ptr [rsp + 0x240]>', '<mov~~r10, qword ptr [rsp + 0x248]>', '<mov~~rax, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<mov~~qword ptr [rsp + 0x1e8], r10>', '<mov~~qword ptr [rsp + 0x1f0], r9>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~dword ptr [rsp + 0x208], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jge~~0x4033bc>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x258], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x25c], ecx>', '<lea~~rax, [rip + 0x4fd1]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<je~~0x4034cf>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x403324>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x47f7]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x4034cf>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~r8, qword ptr [rsp + 0x1f0]>', '<mov~~edi, dword ptr [rsp + 0x1a4]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x138], eax>', '<jne~~0x402e8e>']}], 'cfg_edge_info': [(55, 57), (72, 73), (16, 20), (33, 36), (24, 33), (29, 32), (46, 48), (82, 47), (39, 42), (38, 44), (2, 2), (34, 37), (11, 14), (13, 17), (77, 62), (7, 10), (35, 35), (40, 43), (66, 71), (67, 45), (35, 37), (27, 8), (63, 38), (9, 12), (74, 77), (42, 45), (18, 23), (29, 29), (20, 26), (5, 7), (44, 8), (1, 3), (55, 56), (71, 74), (12, 15), (60, 64), (46, 47), (65, 60), (23, 33), (28, 32), (45, 48), (81, 77), (72, 74), (16, 21), (56, 57), (74, 47), (3, 5), (58, 60), (22, 18), (61, 65), (21, 29), (10, 10), (25, 8), (36, 38), (13, 18), (62, 66), (7, 11), (64, 63), (32, 34), (26, 27), (69, 62), (14, 25), (17, 18), (33, 14), (67, 46), (63, 67), (6, 8), (5, 6), (70, 72), (6, 9), (27, 12), (80, 82), (81, 47), (1, 2), (65, 69), (71, 73), (47, 51), (43, 29), (60, 63), (2, 3), (17, 22), (45, 47), (58, 59), (51, 53), (12, 16), (21, 28), (62, 47), (15, 8), (82, 77), (56, 58), (77, 65), (26, 26), (22, 22), (37, 20), (0, 1), (36, 39), (32, 35), (42, 46), (18, 24), (59, 62), (20, 27), (10, 13), (37, 40), (15, 12), (43, 28)], 'cdg_edge_info': [(33, 36), (46, 48), (82, 47), (2, 2), (13, 17), (77, 62), (7, 10), (35, 35), (65, 63), (12, 27), (67, 45), (12, 20), (63, 38), (82, 51), (45, 53), (7, 14), (55, 63), (42, 45), (18, 23), (29, 29), (5, 7), (20, 26), (33, 8), (62, 53), (55, 56), (46, 47), (45, 48), (16, 21), (63, 8), (21, 29), (10, 10), (36, 38), (37, 37), (7, 11), (46, 51), (82, 53), (33, 14), (67, 46), (63, 67), (5, 6), (7, 25), (16, 37), (27, 12), (37, 32), (36, 42), (56, 63), (43, 29), (7, 18), (36, 8), (63, 44), (17, 22), (48, 55), (45, 47), (36, 44), (37, 43), (6, 12), (12, 16), (16, 32), (62, 47), (82, 77), (56, 58), (7, 13), (77, 65), (26, 26), (22, 22), (46, 53), (36, 39), (45, 51), (33, 25), (32, 35), (58, 63), (42, 46), (18, 24), (7, 33), (5, 8), (62, 51), (6, 9), (7, 8)], 'ddg_edge_info': [(43, 37), (32, 37), (16, 20), (24, 33), (72, 82), (58, 65), (2, 48), (3, 13), (46, 48), (71, 47), (82, 47), (17, 67), (3, 22), (38, 44), (29, 32), (21, 37), (38, 53), (0, 14), (9, 26), (9, 35), (36, 46), (77, 62), (7, 10), (3, 6), (0, 53), (12, 27), (3, 24), (0, 16), (77, 46), (18, 67), (43, 32), (36, 48), (35, 37), (0, 37), (22, 67), (29, 27), (3, 17), (39, 46), (9, 12), (63, 47), (0, 9), (3, 26), (3, 35), (24, 67), (77, 48), (64, 48), (71, 72), (2, 27), (0, 39), (2, 36), (3, 10), (5, 7), (20, 26), (6, 27), (0, 2), (65, 67), (21, 43), (3, 37), (24, 14), (72, 63), (55, 56), (62, 71), (0, 32), (77, 71), (3, 67), (2, 47), (3, 12), (6, 29), (46, 47), (3, 21), (72, 47), (10, 17), (55, 58), (16, 21), (77, 64), (3, 5), (3, 14), (77, 82), (24, 46), (2, 6), (64, 63), (27, 53), (0, 36), (3, 53), (14, 53), (2, 33), (26, 27), (58, 62), (3, 7), (24, 39), (3, 16), (24, 48), (14, 25), (64, 38), (10, 67), (39, 48), (64, 47), (67, 46), (9, 32), (63, 67), (62, 77), (6, 26), (3, 9), (3, 18), (6, 35), (44, 53), (27, 12), (71, 46), (71, 64), (47, 51), (43, 29), (71, 82), (9, 43), (72, 64), (72, 46), (71, 48), (0, 6), (17, 22), (2, 67), (55, 48), (3, 32), (0, 24), (37, 43), (77, 63), (35, 27), (51, 53), (77, 72), (12, 16), (24, 36), (25, 53), (72, 48), (62, 47), (63, 46), (2, 5), (10, 18), (9, 20), (17, 33), (2, 14), (9, 29), (3, 43), (77, 47), (82, 77), (56, 58), (77, 65), (24, 38), (24, 47), (37, 20), (39, 47), (64, 46), (3, 27), (63, 48), (36, 39), (6, 53), (67, 48), (72, 71), (32, 35), (64, 67), (58, 63), (18, 24), (18, 33), (2, 46), (0, 3), (3, 20), (0, 67), (10, 13), (0, 12), (3, 29), (71, 63), (39, 67), (6, 9), (13, 24)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x588(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x548(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 99, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 200, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 201, 'instruction': 'je\t.LBB3_25'}, {'instIndex': 203, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 204, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 205, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 206, 'instruction': 'movb\t$0, %al'}, {'instIndex': 207, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O3/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O3/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 1030 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x598(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x558(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 99, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 200, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 201, 'instruction': 'je\t.LBB3_26'}, {'instIndex': 203, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 204, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 205, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 206, 'instruction': 'movb\t$0, %al'}, {'instIndex': 207, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O3/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O3/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 693 nodes and 1243 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1030 instructions in binary file.
[4205488, 4206045, 4206634, 4206643]
The execution time of patched subCFG information extraction via angr: 0:00:02.357164
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ddd>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403527>, <DisassemblerInsn "mov" for 0x40352f>, <DisassemblerInsn "add" for 0x403537>, <DisassemblerInsn "mov" for 0x40353e>, <DisassemblerInsn "mov" for 0x403546>, <DisassemblerInsn "add" for 0x403549>, <DisassemblerInsn "mov" for 0x40354d>, <DisassemblerInsn "mov" for 0x403555>, <DisassemblerInsn "mov" for 0x403558>, <DisassemblerInsn "cmp" for 0x40355f>, <DisassemblerInsn "jle" for 0x403562>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fb2>, <DisassemblerInsn "mov" for 0x402fba>, <DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "movzx" for 0x402fd9>, <DisassemblerInsn "add" for 0x402fdd>, <DisassemblerInsn "lea" for 0x402fe0>, <DisassemblerInsn "mov" for 0x402fe8>, <DisassemblerInsn "xor" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff1>, <DisassemblerInsn "mov" for 0x402ff4>, <DisassemblerInsn "mov" for 0x402ff8>, <DisassemblerInsn "mov" for 0x403000>, <DisassemblerInsn "mov" for 0x403008>, <DisassemblerInsn "mov" for 0x40300d>, <DisassemblerInsn "mov" for 0x403015>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "call" for 0x403025>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dc4>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "cmp" for 0x402dd0>, <DisassemblerInsn "mov" for 0x402dd3>, <DisassemblerInsn "jbe" for 0x402ddb>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403051>, <DisassemblerInsn "mov" for 0x403056>, <DisassemblerInsn "jmp" for 0x40305d>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40302a>, <DisassemblerInsn "je" for 0x40302d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "add" for 0x402d3e>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "mov" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "add" for 0x402d56>, <DisassemblerInsn "mov" for 0x402d5a>, <DisassemblerInsn "cmp" for 0x402d62>, <DisassemblerInsn "mov" for 0x402d69>, <DisassemblerInsn "mov" for 0x402d71>, <DisassemblerInsn "jne" for 0x402d79>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fa4>, <DisassemblerInsn "mov" for 0x402fab>, <DisassemblerInsn "mov" for 0x402fb2>, <DisassemblerInsn "mov" for 0x402fba>, <DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "movzx" for 0x402fd9>, <DisassemblerInsn "add" for 0x402fdd>, <DisassemblerInsn "lea" for 0x402fe0>, <DisassemblerInsn "mov" for 0x402fe8>, <DisassemblerInsn "xor" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff1>, <DisassemblerInsn "mov" for 0x402ff4>, <DisassemblerInsn "mov" for 0x402ff8>, <DisassemblerInsn "mov" for 0x403000>, <DisassemblerInsn "mov" for 0x403008>, <DisassemblerInsn "mov" for 0x40300d>, <DisassemblerInsn "mov" for 0x403015>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "call" for 0x403025>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403033>, <DisassemblerInsn "mov" for 0x40303b>, <DisassemblerInsn "mov" for 0x40303e>, <DisassemblerInsn "lea" for 0x403043>, <DisassemblerInsn "mov" for 0x40304a>, <DisassemblerInsn "call" for 0x40304c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x402bb0>, <DisassemblerInsn "push" for 0x402bb1>, <DisassemblerInsn "push" for 0x402bb3>, <DisassemblerInsn "sub" for 0x402bb4>, <DisassemblerInsn "mov" for 0x402bbb>, <DisassemblerInsn "mov" for 0x402bc3>, <DisassemblerInsn "mov" for 0x402bcb>, <DisassemblerInsn "mov" for 0x402bd2>, <DisassemblerInsn "mov" for 0x402bda>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "mov" for 0x402be4>, <DisassemblerInsn "mov" for 0x402beb>, <DisassemblerInsn "mov" for 0x402bf2>, <DisassemblerInsn "mov" for 0x402bfa>, <DisassemblerInsn "mov" for 0x402c02>, <DisassemblerInsn "mov" for 0x402c09>, <DisassemblerInsn "lea" for 0x402c10>, <DisassemblerInsn "mov" for 0x402c18>, <DisassemblerInsn "mov" for 0x402c1b>, <DisassemblerInsn "add" for 0x402c1e>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c2a>, <DisassemblerInsn "mov" for 0x402c2e>, <DisassemblerInsn "or" for 0x402c35>, <DisassemblerInsn "cmp" for 0x402c38>, <DisassemblerInsn "sete" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c3f>, <DisassemblerInsn "mov" for 0x402c44>, <DisassemblerInsn "cmp" for 0x402c49>, <DisassemblerInsn "cmove" for 0x402c4d>, <DisassemblerInsn "and" for 0x402c50>, <DisassemblerInsn "movzx" for 0x402c53>, <DisassemblerInsn "cmp" for 0x402c56>, <DisassemblerInsn "cmove" for 0x402c59>, <DisassemblerInsn "mov" for 0x402c5c>, <DisassemblerInsn "lea" for 0x402c63>, <DisassemblerInsn "mov" for 0x402c6b>, <DisassemblerInsn "lea" for 0x402c73>, <DisassemblerInsn "mov" for 0x402c7b>, <DisassemblerInsn "lea" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c8b>, <DisassemblerInsn "lea" for 0x402c93>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "xor" for 0x402ca3>, <DisassemblerInsn "mov" for 0x402ca5>, <DisassemblerInsn "mov" for 0x402cad>, <DisassemblerInsn "mov" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "mov" for 0x402cc5>, <DisassemblerInsn "mov" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402cd0>, <DisassemblerInsn "mov" for 0x402cd2>, <DisassemblerInsn "mov" for 0x402cd9>, <DisassemblerInsn "or" for 0x402cdc>, <DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "mov" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cf6>, <DisassemblerInsn "mov" for 0x402cfd>, <DisassemblerInsn "or" for 0x402d00>, <DisassemblerInsn "mov" for 0x402d04>, <DisassemblerInsn "mov" for 0x402d0c>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d17>, <DisassemblerInsn "mov" for 0x402d1a>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "or" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d28>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "mov" for 0x402d33>, <DisassemblerInsn "mov" for 0x402d3b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<jmp~~0x403033>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~rcx, qword ptr [rsp + 0x548]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x380], eax>', '<cmp~~eax, 0>', '<jle~~0x404260>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x580]>', '<mov~~r10, qword ptr [rsp + 0x570]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~edx, dword ptr [rsp + 0x4c4]>', '<mov~~sil, byte ptr [rsp + 0x487]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x598]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4ef]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<jbe~~0x402de2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jmp~~0x4042b0>']}, {'block_Idx': 29, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x403527>']}, {'block_Idx': 1, 'blockInsts': ['<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x508], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xbb2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~qword ptr [rsp + 0x590], rax>', '<jne~~0x402cb5>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x486]>', '<mov~~byte ptr [rsp + 0x487], al>', '<mov~~rax, qword ptr [rsp + 0x580]>', '<mov~~r10, qword ptr [rsp + 0x570]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~edx, dword ptr [rsp + 0x4c4]>', '<mov~~sil, byte ptr [rsp + 0x487]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x598]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6208]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13b0>', '<mov~~dword ptr [rsp + 0x51c], r9d>', '<mov~~qword ptr [rsp + 0x520], r8>', '<mov~~dword ptr [rsp + 0x52c], ecx>', '<mov~~qword ptr [rsp + 0x530], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x538], rdi>', '<mov~~eax, dword ptr [rsp + 0x13e0]>', '<mov~~dword ptr [rsp + 0x544], eax>', '<mov~~rax, qword ptr [rsp + 0x13d8]>', '<mov~~qword ptr [rsp + 0x548], rax>', '<mov~~edx, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x554], edx>', '<lea~~rdx, [rsp + 0x598]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x558], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x564], ecx>', '<lea~~rcx, [rsp + 0xbb0]>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<lea~~rcx, [rsp + 0x7b0]>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<lea~~rcx, [rsp + 0x6b0]>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<lea~~rcx, [rsp + 0x5b0]>', '<mov~~qword ptr [rsp + 0x580], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~qword ptr [rsp + 0x590], rax>', '<mov~~rsi, qword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x588]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xbb0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xbb2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xbb0], ax>', '<mov~~rax, rsi>']}], 'cfg_edge_info': [(0, 1), (23, 29), (10, 13), (29, 13), (24, 29), (29, 32), (6, 10), (13, 18)]}]}
{'decode_plane': [4205488, 4206045, 4206634, 4206643]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/O3/utvideodec.o---after
The extraction of function: decode_plane
[4205488, 4206045, 4206634, 4206643]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 84 nodes and 140 edges in CFGEmulated.
It has 81 nodes and 155 edges in CDG.
It has 4784 nodes and 5969 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205488, 4206045, 4206634, 4206643]
{4208512, 4207620, 4206473, 4208649, 4206990, 4209174, 4211351, 4209697, 4206500, 4211364, 4206756, 4207911, 4206885, 4207145, 4206634, 4210729, 4208940, 4211116, 4205998, 4205488, 4211376, 4206514, 4206643, 4206133, 4205749, 4207671, 4206269, 4207424, 4208578, 4206020, 4207813, 4209480, 4208716, 4206157, 4211150, 4208461, 4206673, 4208850, 4208209, 4210902, 4210524, 4206045, 4211296, 4207201, 4206050, 4206690, 4206818, 4207976, 4211309, 4207086, 4207343, 4209776, 4208374, 4207478, 4211320, 4205951}
[29, 5, 9, 72, 65, 55, 53, 12, 79, 8, 57, 82, 17, 28, 43, 66, 58, 81, 10, 70, 3, 60, 61, 63, 21, 18, 34, 6, 78, 44, 7, 37, 25, 24, 13, 15, 16, 27, 1, 48, 47, 80, 40, 22, 2, 75, 35, 0, 33, 20, 51, 46, 45, 62, 11, 68, 39, 26, 30, 38, 41, 64, 56, 69, 23, 14, 71, 59, 36]
The execution time of patched slicing information extraction via angr: 0:00:08.027298
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403261>, <DisassemblerInsn "mov" for 0x403269>, <DisassemblerInsn "mov" for 0x403271>, <DisassemblerInsn "mov" for 0x403279>, <DisassemblerInsn "mov" for 0x403281>, <DisassemblerInsn "mov" for 0x403289>, <DisassemblerInsn "mov" for 0x403291>, <DisassemblerInsn "mov" for 0x403299>, <DisassemblerInsn "add" for 0x40329c>, <DisassemblerInsn "mov" for 0x40329f>, <DisassemblerInsn "test" for 0x4032a6>, <DisassemblerInsn "mov" for 0x4032aa>, <DisassemblerInsn "cmovne" for 0x4032ad>, <DisassemblerInsn "mov" for 0x4032b1>, <DisassemblerInsn "test" for 0x4032b9>, <DisassemblerInsn "cmovne" for 0x4032bd>, <DisassemblerInsn "mov" for 0x4032c1>, <DisassemblerInsn "mov" for 0x4032c8>, <DisassemblerInsn "add" for 0x4032cc>, <DisassemblerInsn "mov" for 0x4032cf>, <DisassemblerInsn "cmp" for 0x4032d7>, <DisassemblerInsn "mov" for 0x4032da>, <DisassemblerInsn "mov" for 0x4032e2>, <DisassemblerInsn "jl" for 0x4032e9>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dae>, <DisassemblerInsn "mov" for 0x402db5>, <DisassemblerInsn "cmp" for 0x402dbc>, <DisassemblerInsn "je" for 0x402dbe>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030a4>, <DisassemblerInsn "mov" for 0x4030ab>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "imul" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030bc>, <DisassemblerInsn "cmp" for 0x4030c3>, <DisassemblerInsn "sete" for 0x4030c6>, <DisassemblerInsn "mov" for 0x4030c9>, <DisassemblerInsn "xor" for 0x4030d0>, <DisassemblerInsn "cmp" for 0x4030d2>, <DisassemblerInsn "mov" for 0x4030d5>, <DisassemblerInsn "jle" for 0x4030dc>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "mov" for 0x403fd8>, <DisassemblerInsn "mov" for 0x403fdf>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff5>, <DisassemblerInsn "mov" for 0x403ff9>, <DisassemblerInsn "mov" for 0x403ffd>, <DisassemblerInsn "mov" for 0x404002>, <DisassemblerInsn "mov" for 0x404009>, <DisassemblerInsn "lea" for 0x404011>, <DisassemblerInsn "cmp" for 0x404018>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "jl" for 0x404023>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403bc7>, <DisassemblerInsn "mov" for 0x403bce>, <DisassemblerInsn "mov" for 0x403bd6>, <DisassemblerInsn "mov" for 0x403bde>, <DisassemblerInsn "mov" for 0x403be6>, <DisassemblerInsn "mov" for 0x403bed>, <DisassemblerInsn "sub" for 0x403bef>, <DisassemblerInsn "setb" for 0x403bf1>, <DisassemblerInsn "mov" for 0x403bf5>, <DisassemblerInsn "sub" for 0x403bf8>, <DisassemblerInsn "setb" for 0x403bfb>, <DisassemblerInsn "and" for 0x403bff>, <DisassemblerInsn "test" for 0x403c02>, <DisassemblerInsn "mov" for 0x403c06>, <DisassemblerInsn "mov" for 0x403c0e>, <DisassemblerInsn "mov" for 0x403c16>, <DisassemblerInsn "jne" for 0x403c1d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40384c>, <DisassemblerInsn "mov" for 0x403854>, <DisassemblerInsn "mov" for 0x40385c>, <DisassemblerInsn "mov" for 0x403864>, <DisassemblerInsn "mov" for 0x40386b>, <DisassemblerInsn "mov" for 0x403873>, <DisassemblerInsn "mov" for 0x40387b>, <DisassemblerInsn "mov" for 0x403883>, <DisassemblerInsn "mov" for 0x40388b>, <DisassemblerInsn "mov" for 0x40388e>, <DisassemblerInsn "cmp" for 0x403896>, <DisassemblerInsn "mov" for 0x40389d>, <DisassemblerInsn "mov" for 0x4038a5>, <DisassemblerInsn "mov" for 0x4038ac>, <DisassemblerInsn "mov" for 0x4038b4>, <DisassemblerInsn "mov" for 0x4038bc>, <DisassemblerInsn "mov" for 0x4038c4>, <DisassemblerInsn "ja" for 0x4038cc>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4042a4>, <DisassemblerInsn "mov" for 0x4042a9>, <DisassemblerInsn "mov" for 0x4042b0>, <DisassemblerInsn "add" for 0x4042b7>, <DisassemblerInsn "pop" for 0x4042be>, <DisassemblerInsn "pop" for 0x4042bf>, <DisassemblerInsn "pop" for 0x4042c1>, <DisassemblerInsn "ret" for 0x4042c2>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030e2>, <DisassemblerInsn "mov" for 0x4030e9>, <DisassemblerInsn "mov" for 0x4030f0>, <DisassemblerInsn "movsxd" for 0x4030f7>, <DisassemblerInsn "mov" for 0x4030fa>, <DisassemblerInsn "mov" for 0x403102>, <DisassemblerInsn "mov" for 0x403104>, <DisassemblerInsn "xor" for 0x40310c>, <DisassemblerInsn "mov" for 0x40310e>, <DisassemblerInsn "mov" for 0x403115>, <DisassemblerInsn "mov" for 0x403117>, <DisassemblerInsn "mov" for 0x40311e>, <DisassemblerInsn "mov" for 0x403125>, <DisassemblerInsn "mov" for 0x40312c>, <DisassemblerInsn "mov" for 0x403133>, <DisassemblerInsn "mov" for 0x40313a>, <DisassemblerInsn "mov" for 0x403141>, <DisassemblerInsn "mov" for 0x403148>, <DisassemblerInsn "mov" for 0x40314f>, <DisassemblerInsn "add" for 0x403156>, <DisassemblerInsn "mov" for 0x403159>, <DisassemblerInsn "imul" for 0x403160>, <DisassemblerInsn "cdq" for 0x403163>, <DisassemblerInsn "idiv" for 0x403164>, <DisassemblerInsn "mov" for 0x403166>, <DisassemblerInsn "mov" for 0x40316d>, <DisassemblerInsn "mov" for 0x40316f>, <DisassemblerInsn "and" for 0x403176>, <DisassemblerInsn "mov" for 0x403178>, <DisassemblerInsn "cmp" for 0x40317f>, <DisassemblerInsn "mov" for 0x403181>, <DisassemblerInsn "jle" for 0x403188>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4040d6>, <DisassemblerInsn "mov" for 0x4040db>, <DisassemblerInsn "mov" for 0x4040e3>, <DisassemblerInsn "mov" for 0x4040e7>, <DisassemblerInsn "mov" for 0x4040eb>, <DisassemblerInsn "mov" for 0x4040f3>, <DisassemblerInsn "mov" for 0x4040fa>, <DisassemblerInsn "mov" for 0x404102>, <DisassemblerInsn "add" for 0x40410a>, <DisassemblerInsn "add" for 0x40410d>, <DisassemblerInsn "cmp" for 0x404110>, <DisassemblerInsn "mov" for 0x404113>, <DisassemblerInsn "mov" for 0x40411b>, <DisassemblerInsn "mov" for 0x404122>, <DisassemblerInsn "mov" for 0x404129>, <DisassemblerInsn "mov" for 0x40412c>, <DisassemblerInsn "mov" for 0x404134>, <DisassemblerInsn "mov" for 0x404137>, <DisassemblerInsn "mov" for 0x40413f>, <DisassemblerInsn "mov" for 0x404141>, <DisassemblerInsn "mov" for 0x404148>, <DisassemblerInsn "mov" for 0x40414f>, <DisassemblerInsn "mov" for 0x404157>, <DisassemblerInsn "jne" for 0x40415f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4042b0>, <DisassemblerInsn "add" for 0x4042b7>, <DisassemblerInsn "pop" for 0x4042be>, <DisassemblerInsn "pop" for 0x4042bf>, <DisassemblerInsn "pop" for 0x4042c1>, <DisassemblerInsn "ret" for 0x4042c2>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40398b>, <DisassemblerInsn "mov" for 0x403992>, <DisassemblerInsn "mov" for 0x403999>, <DisassemblerInsn "mov" for 0x4039a1>, <DisassemblerInsn "mov" for 0x4039a8>, <DisassemblerInsn "mov" for 0x4039b0>, <DisassemblerInsn "mov" for 0x4039b8>, <DisassemblerInsn "mov" for 0x4039c0>, <DisassemblerInsn "mov" for 0x4039c8>, <DisassemblerInsn "mov" for 0x4039d0>, <DisassemblerInsn "mov" for 0x4039d8>, <DisassemblerInsn "mov" for 0x4039e0>, <DisassemblerInsn "mov" for 0x4039e8>, <DisassemblerInsn "mov" for 0x4039ef>, <DisassemblerInsn "cmp" for 0x4039f7>, <DisassemblerInsn "mov" for 0x4039f9>, <DisassemblerInsn "mov" for 0x403a00>, <DisassemblerInsn "mov" for 0x403a08>, <DisassemblerInsn "jge" for 0x403a10>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f5c>, <DisassemblerInsn "mov" for 0x403f64>, <DisassemblerInsn "mov" for 0x403f6c>, <DisassemblerInsn "mov" for 0x403f73>, <DisassemblerInsn "mov" for 0x403f7b>, <DisassemblerInsn "mov" for 0x403f82>, <DisassemblerInsn "add" for 0x403f8a>, <DisassemblerInsn "mov" for 0x403f8d>, <DisassemblerInsn "mov" for 0x403f8f>, <DisassemblerInsn "shr" for 0x403f92>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "add" for 0x403f98>, <DisassemblerInsn "mov" for 0x403f9b>, <DisassemblerInsn "mov" for 0x403f9d>, <DisassemblerInsn "movsx" for 0x403fa0>, <DisassemblerInsn "movsx" for 0x403fa6>, <DisassemblerInsn "mov" for 0x403fab>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "mov" for 0x403fba>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "mov" for 0x403fd8>, <DisassemblerInsn "mov" for 0x403fdf>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff5>, <DisassemblerInsn "mov" for 0x403ff9>, <DisassemblerInsn "mov" for 0x403ffd>, <DisassemblerInsn "mov" for 0x404002>, <DisassemblerInsn "mov" for 0x404009>, <DisassemblerInsn "lea" for 0x404011>, <DisassemblerInsn "cmp" for 0x404018>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "jl" for 0x404023>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e4d>, <DisassemblerInsn "mov" for 0x402e55>, <DisassemblerInsn "movzx" for 0x402e5c>, <DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "mov" for 0x402e66>, <DisassemblerInsn "sub" for 0x402e6b>, <DisassemblerInsn "mov" for 0x402e6d>, <DisassemblerInsn "shr" for 0x402e72>, <DisassemblerInsn "mov" for 0x402e74>, <DisassemblerInsn "mov" for 0x402e7b>, <DisassemblerInsn "mov" for 0x402e82>, <DisassemblerInsn "mov" for 0x402e89>, <DisassemblerInsn "mov" for 0x402e91>, <DisassemblerInsn "mov" for 0x402e98>, <DisassemblerInsn "cmp" for 0x402e9d>, <DisassemblerInsn "mov" for 0x402ea1>, <DisassemblerInsn "mov" for 0x402ea9>, <DisassemblerInsn "mov" for 0x402eb0>, <DisassemblerInsn "jle" for 0x402eb7>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032ef>, <DisassemblerInsn "mov" for 0x4032f7>, <DisassemblerInsn "mov" for 0x4032f9>, <DisassemblerInsn "mov" for 0x403300>, <DisassemblerInsn "mov" for 0x403307>, <DisassemblerInsn "mov" for 0x40330e>, <DisassemblerInsn "xor" for 0x403315>, <DisassemblerInsn "cmp" for 0x403317>, <DisassemblerInsn "mov" for 0x403319>, <DisassemblerInsn "mov" for 0x403320>, <DisassemblerInsn "mov" for 0x403327>, <DisassemblerInsn "mov" for 0x40332e>, <DisassemblerInsn "jl" for 0x403335>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4036f6>, <DisassemblerInsn "imul" for 0x4036fe>, <DisassemblerInsn "cdq" for 0x403701>, <DisassemblerInsn "idiv" for 0x403702>, <DisassemblerInsn "mov" for 0x403704>, <DisassemblerInsn "mov" for 0x40370c>, <DisassemblerInsn "mov" for 0x40370e>, <DisassemblerInsn "and" for 0x403716>, <DisassemblerInsn "mov" for 0x403719>, <DisassemblerInsn "movsxd" for 0x403720>, <DisassemblerInsn "imul" for 0x403723>, <DisassemblerInsn "add" for 0x403727>, <DisassemblerInsn "mov" for 0x40372a>, <DisassemblerInsn "xor" for 0x403732>, <DisassemblerInsn "mov" for 0x403734>, <DisassemblerInsn "xor" for 0x403736>, <DisassemblerInsn "cmp" for 0x403738>, <DisassemblerInsn "mov" for 0x40373c>, <DisassemblerInsn "mov" for 0x403744>, <DisassemblerInsn "je" for 0x40374b>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403651>, <DisassemblerInsn "mov" for 0x403659>, <DisassemblerInsn "mov" for 0x403661>, <DisassemblerInsn "mov" for 0x403668>, <DisassemblerInsn "mov" for 0x403670>, <DisassemblerInsn "mov" for 0x403677>, <DisassemblerInsn "mov" for 0x40367e>, <DisassemblerInsn "mov" for 0x403686>, <DisassemblerInsn "mov" for 0x40368e>, <DisassemblerInsn "mov" for 0x403696>, <DisassemblerInsn "mov" for 0x40369e>, <DisassemblerInsn "mov" for 0x4036a5>, <DisassemblerInsn "mov" for 0x4036ad>, <DisassemblerInsn "mov" for 0x4036b5>, <DisassemblerInsn "mov" for 0x4036bc>, <DisassemblerInsn "mov" for 0x4036c4>, <DisassemblerInsn "mov" for 0x4036cc>, <DisassemblerInsn "mov" for 0x4036d4>, <DisassemblerInsn "mov" for 0x4036dc>, <DisassemblerInsn "mov" for 0x4036e3>, <DisassemblerInsn "mov" for 0x4036ea>, <DisassemblerInsn "add" for 0x4036f2>, <DisassemblerInsn "mov" for 0x4036f6>, <DisassemblerInsn "imul" for 0x4036fe>, <DisassemblerInsn "cdq" for 0x403701>, <DisassemblerInsn "idiv" for 0x403702>, <DisassemblerInsn "mov" for 0x403704>, <DisassemblerInsn "mov" for 0x40370c>, <DisassemblerInsn "mov" for 0x40370e>, <DisassemblerInsn "and" for 0x403716>, <DisassemblerInsn "mov" for 0x403719>, <DisassemblerInsn "movsxd" for 0x403720>, <DisassemblerInsn "imul" for 0x403723>, <DisassemblerInsn "add" for 0x403727>, <DisassemblerInsn "mov" for 0x40372a>, <DisassemblerInsn "xor" for 0x403732>, <DisassemblerInsn "mov" for 0x403734>, <DisassemblerInsn "xor" for 0x403736>, <DisassemblerInsn "cmp" for 0x403738>, <DisassemblerInsn "mov" for 0x40373c>, <DisassemblerInsn "mov" for 0x403744>, <DisassemblerInsn "je" for 0x40374b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40392c>, <DisassemblerInsn "mov" for 0x403934>, <DisassemblerInsn "mov" for 0x40393b>, <DisassemblerInsn "shl" for 0x40393e>, <DisassemblerInsn "mov" for 0x403942>, <DisassemblerInsn "mov" for 0x403944>, <DisassemblerInsn "add" for 0x403947>, <DisassemblerInsn "mov" for 0x40394a>, <DisassemblerInsn "bswap" for 0x40394d>, <DisassemblerInsn "mov" for 0x403950>, <DisassemblerInsn "add" for 0x403953>, <DisassemblerInsn "mov" for 0x403957>, <DisassemblerInsn "mov" for 0x40395c>, <DisassemblerInsn "mov" for 0x403964>, <DisassemblerInsn "mov" for 0x40396b>, <DisassemblerInsn "mov" for 0x403973>, <DisassemblerInsn "mov" for 0x40397b>, <DisassemblerInsn "mov" for 0x403983>, <DisassemblerInsn "mov" for 0x40398b>, <DisassemblerInsn "mov" for 0x403992>, <DisassemblerInsn "mov" for 0x403999>, <DisassemblerInsn "mov" for 0x4039a1>, <DisassemblerInsn "mov" for 0x4039a8>, <DisassemblerInsn "mov" for 0x4039b0>, <DisassemblerInsn "mov" for 0x4039b8>, <DisassemblerInsn "mov" for 0x4039c0>, <DisassemblerInsn "mov" for 0x4039c8>, <DisassemblerInsn "mov" for 0x4039d0>, <DisassemblerInsn "mov" for 0x4039d8>, <DisassemblerInsn "mov" for 0x4039e0>, <DisassemblerInsn "mov" for 0x4039e8>, <DisassemblerInsn "mov" for 0x4039ef>, <DisassemblerInsn "cmp" for 0x4039f7>, <DisassemblerInsn "mov" for 0x4039f9>, <DisassemblerInsn "mov" for 0x403a00>, <DisassemblerInsn "mov" for 0x403a08>, <DisassemblerInsn "jge" for 0x403a10>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f0b>, <DisassemblerInsn "mov" for 0x403f12>, <DisassemblerInsn "mov" for 0x403f1a>, <DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "bswap" for 0x403f24>, <DisassemblerInsn "mov" for 0x403f26>, <DisassemblerInsn "mov" for 0x403f28>, <DisassemblerInsn "sub" for 0x403f2d>, <DisassemblerInsn "mov" for 0x403f2f>, <DisassemblerInsn "shl" for 0x403f31>, <DisassemblerInsn "mov" for 0x403f34>, <DisassemblerInsn "or" for 0x403f3b>, <DisassemblerInsn "add" for 0x403f3e>, <DisassemblerInsn "add" for 0x403f42>, <DisassemblerInsn "mov" for 0x403f45>, <DisassemblerInsn "mov" for 0x403f4d>, <DisassemblerInsn "mov" for 0x403f54>, <DisassemblerInsn "mov" for 0x403f5c>, <DisassemblerInsn "mov" for 0x403f64>, <DisassemblerInsn "mov" for 0x403f6c>, <DisassemblerInsn "mov" for 0x403f73>, <DisassemblerInsn "mov" for 0x403f7b>, <DisassemblerInsn "mov" for 0x403f82>, <DisassemblerInsn "add" for 0x403f8a>, <DisassemblerInsn "mov" for 0x403f8d>, <DisassemblerInsn "mov" for 0x403f8f>, <DisassemblerInsn "shr" for 0x403f92>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "add" for 0x403f98>, <DisassemblerInsn "mov" for 0x403f9b>, <DisassemblerInsn "mov" for 0x403f9d>, <DisassemblerInsn "movsx" for 0x403fa0>, <DisassemblerInsn "movsx" for 0x403fa6>, <DisassemblerInsn "mov" for 0x403fab>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "mov" for 0x403fba>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "mov" for 0x403fd8>, <DisassemblerInsn "mov" for 0x403fdf>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff5>, <DisassemblerInsn "mov" for 0x403ff9>, <DisassemblerInsn "mov" for 0x403ffd>, <DisassemblerInsn "mov" for 0x404002>, <DisassemblerInsn "mov" for 0x404009>, <DisassemblerInsn "lea" for 0x404011>, <DisassemblerInsn "cmp" for 0x404018>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "jl" for 0x404023>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402de2>, <DisassemblerInsn "mov" for 0x402dea>, <DisassemblerInsn "mov" for 0x402df2>, <DisassemblerInsn "mov" for 0x402df9>, <DisassemblerInsn "sub" for 0x402e00>, <DisassemblerInsn "mov" for 0x402e03>, <DisassemblerInsn "sete" for 0x402e0a>, <DisassemblerInsn "test" for 0x402e0d>, <DisassemblerInsn "setne" for 0x402e10>, <DisassemblerInsn "and" for 0x402e13>, <DisassemblerInsn "mov" for 0x402e15>, <DisassemblerInsn "add" for 0x402e1c>, <DisassemblerInsn "mov" for 0x402e20>, <DisassemblerInsn "test" for 0x402e28>, <DisassemblerInsn "mov" for 0x402e2b>, <DisassemblerInsn "jne" for 0x402e33>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c70>, <DisassemblerInsn "mov" for 0x403c78>, <DisassemblerInsn "mov" for 0x403c80>, <DisassemblerInsn "mov" for 0x403c88>, <DisassemblerInsn "mov" for 0x403c8f>, <DisassemblerInsn "mov" for 0x403c96>, <DisassemblerInsn "mov" for 0x403c9e>, <DisassemblerInsn "mov" for 0x403ca6>, <DisassemblerInsn "shr" for 0x403ca9>, <DisassemblerInsn "mov" for 0x403cac>, <DisassemblerInsn "movabs" for 0x403cb4>, <DisassemblerInsn "and" for 0x403cbe>, <DisassemblerInsn "movsx" for 0x403cc1>, <DisassemblerInsn "mov" for 0x403cc6>, <DisassemblerInsn "mov" for 0x403ccd>, <DisassemblerInsn "movsx" for 0x403cd3>, <DisassemblerInsn "mov" for 0x403cd7>, <DisassemblerInsn "cmp" for 0x403cde>, <DisassemblerInsn "mov" for 0x403ce3>, <DisassemblerInsn "mov" for 0x403ceb>, <DisassemblerInsn "mov" for 0x403cf2>, <DisassemblerInsn "mov" for 0x403cfa>, <DisassemblerInsn "mov" for 0x403d01>, <DisassemblerInsn "jge" for 0x403d08>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d7f>, <DisassemblerInsn "mov" for 0x402d87>, <DisassemblerInsn "xor" for 0x402d8e>, <DisassemblerInsn "mov" for 0x402d91>, <DisassemblerInsn "mov" for 0x402d98>, <DisassemblerInsn "mov" for 0x402d9d>, <DisassemblerInsn "mov" for 0x402da2>, <DisassemblerInsn "call" for 0x402da9>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404165>, <DisassemblerInsn "mov" for 0x40416c>, <DisassemblerInsn "mov" for 0x404174>, <DisassemblerInsn "mov" for 0x40417b>, <DisassemblerInsn "mov" for 0x404183>, <DisassemblerInsn "mov" for 0x40418b>, <DisassemblerInsn "mov" for 0x404190>, <DisassemblerInsn "mov" for 0x404195>, <DisassemblerInsn "sub" for 0x404199>, <DisassemblerInsn "shl" for 0x40419c>, <DisassemblerInsn "add" for 0x40419f>, <DisassemblerInsn "add" for 0x4041a1>, <DisassemblerInsn "mov" for 0x4041a3>, <DisassemblerInsn "cmp" for 0x4041a7>, <DisassemblerInsn "jle" for 0x4041aa>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403add>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041ce>, <DisassemblerInsn "mov" for 0x4041d5>, <DisassemblerInsn "mov" for 0x4041d9>, <DisassemblerInsn "mov" for 0x4041de>, <DisassemblerInsn "mov" for 0x4041e6>, <DisassemblerInsn "mov" for 0x4041ee>, <DisassemblerInsn "mov" for 0x4041f3>, <DisassemblerInsn "mov" for 0x4041fb>, <DisassemblerInsn "mov" for 0x404203>, <DisassemblerInsn "mov" for 0x40420b>, <DisassemblerInsn "movsxd" for 0x40420e>, <DisassemblerInsn "cmp" for 0x404211>, <DisassemblerInsn "mov" for 0x404214>, <DisassemblerInsn "mov" for 0x40421c>, <DisassemblerInsn "mov" for 0x404224>, <DisassemblerInsn "mov" for 0x40422c>, <DisassemblerInsn "mov" for 0x404234>, <DisassemblerInsn "mov" for 0x40423c>, <DisassemblerInsn "mov" for 0x404244>, <DisassemblerInsn "mov" for 0x40424c>, <DisassemblerInsn "mov" for 0x404253>, <DisassemblerInsn "jl" for 0x40425a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40333b>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f89>, <DisassemblerInsn "mov" for 0x402f90>, <DisassemblerInsn "mov" for 0x402f92>, <DisassemblerInsn "cmp" for 0x402f99>, <DisassemblerInsn "mov" for 0x402f9b>, <DisassemblerInsn "jb" for 0x402fa2>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403404>, <DisassemblerInsn "mov" for 0x40340b>, <DisassemblerInsn "mov" for 0x403413>, <DisassemblerInsn "add" for 0x40341b>, <DisassemblerInsn "mov" for 0x40341e>, <DisassemblerInsn "xor" for 0x403426>, <DisassemblerInsn "mov" for 0x403428>, <DisassemblerInsn "mov" for 0x403430>, <DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "mov" for 0x40344f>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345f>, <DisassemblerInsn "mov" for 0x403467>, <DisassemblerInsn "mov" for 0x40346f>, <DisassemblerInsn "add" for 0x403472>, <DisassemblerInsn "mov" for 0x403475>, <DisassemblerInsn "test" for 0x40347c>, <DisassemblerInsn "mov" for 0x403480>, <DisassemblerInsn "cmovne" for 0x403483>, <DisassemblerInsn "mov" for 0x403487>, <DisassemblerInsn "test" for 0x40348f>, <DisassemblerInsn "cmovne" for 0x403493>, <DisassemblerInsn "mov" for 0x403497>, <DisassemblerInsn "mov" for 0x40349e>, <DisassemblerInsn "add" for 0x4034a2>, <DisassemblerInsn "mov" for 0x4034a5>, <DisassemblerInsn "cmp" for 0x4034ad>, <DisassemblerInsn "mov" for 0x4034b0>, <DisassemblerInsn "mov" for 0x4034b8>, <DisassemblerInsn "jl" for 0x4034bf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403062>, <DisassemblerInsn "movzx" for 0x40306a>, <DisassemblerInsn "mov" for 0x403072>, <DisassemblerInsn "mov" for 0x403079>, <DisassemblerInsn "add" for 0x40307c>, <DisassemblerInsn "mov" for 0x403080>, <DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "mov" for 0x40308b>, <DisassemblerInsn "xor" for 0x403092>, <DisassemblerInsn "cmp" for 0x403094>, <DisassemblerInsn "mov" for 0x403097>, <DisassemblerInsn "jle" for 0x40309e>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403b48>, <DisassemblerInsn "mov" for 0x403b4f>, <DisassemblerInsn "mov" for 0x403b57>, <DisassemblerInsn "mov" for 0x403b5f>, <DisassemblerInsn "mov" for 0x403b67>, <DisassemblerInsn "mov" for 0x403b6f>, <DisassemblerInsn "mov" for 0x403b77>, <DisassemblerInsn "mov" for 0x403b7e>, <DisassemblerInsn "mov" for 0x403b85>, <DisassemblerInsn "mov" for 0x403b8d>, <DisassemblerInsn "mov" for 0x403b95>, <DisassemblerInsn "mov" for 0x403b9d>, <DisassemblerInsn "sub" for 0x403ba5>, <DisassemblerInsn "shl" for 0x403ba8>, <DisassemblerInsn "add" for 0x403bab>, <DisassemblerInsn "add" for 0x403bad>, <DisassemblerInsn "lea" for 0x403baf>, <DisassemblerInsn "cmp" for 0x403bb6>, <DisassemblerInsn "mov" for 0x403bb9>, <DisassemblerInsn "jl" for 0x403bc1>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40426d>, <DisassemblerInsn "mov" for 0x40426f>, <DisassemblerInsn "jmp" for 0x404276>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dc4>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "cmp" for 0x402dd0>, <DisassemblerInsn "mov" for 0x402dd3>, <DisassemblerInsn "jbe" for 0x402ddb>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034c5>, <DisassemblerInsn "mov" for 0x4034cc>, <DisassemblerInsn "mov" for 0x4034d3>, <DisassemblerInsn "mov" for 0x4034da>, <DisassemblerInsn "mov" for 0x4034e2>, <DisassemblerInsn "add" for 0x4034ea>, <DisassemblerInsn "add" for 0x4034ed>, <DisassemblerInsn "cmp" for 0x4034f0>, <DisassemblerInsn "mov" for 0x4034f2>, <DisassemblerInsn "mov" for 0x4034f5>, <DisassemblerInsn "mov" for 0x4034fd>, <DisassemblerInsn "mov" for 0x4034ff>, <DisassemblerInsn "mov" for 0x403506>, <DisassemblerInsn "mov" for 0x40350e>, <DisassemblerInsn "mov" for 0x403515>, <DisassemblerInsn "je" for 0x40351c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fb2>, <DisassemblerInsn "mov" for 0x402fba>, <DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "movzx" for 0x402fd9>, <DisassemblerInsn "add" for 0x402fdd>, <DisassemblerInsn "lea" for 0x402fe0>, <DisassemblerInsn "mov" for 0x402fe8>, <DisassemblerInsn "xor" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff1>, <DisassemblerInsn "mov" for 0x402ff4>, <DisassemblerInsn "mov" for 0x402ff8>, <DisassemblerInsn "mov" for 0x403000>, <DisassemblerInsn "mov" for 0x403008>, <DisassemblerInsn "mov" for 0x40300d>, <DisassemblerInsn "mov" for 0x403015>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "call" for 0x403025>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ebd>, <DisassemblerInsn "mov" for 0x402ec4>, <DisassemblerInsn "mov" for 0x402ecb>, <DisassemblerInsn "mov" for 0x402ed3>, <DisassemblerInsn "mov" for 0x402eda>, <DisassemblerInsn "add" for 0x402edd>, <DisassemblerInsn "mov" for 0x402ee1>, <DisassemblerInsn "add" for 0x402ee9>, <DisassemblerInsn "mov" for 0x402eec>, <DisassemblerInsn "mov" for 0x402ef3>, <DisassemblerInsn "shr" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402efa>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "add" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f0a>, <DisassemblerInsn "mov" for 0x402f11>, <DisassemblerInsn "movzx" for 0x402f19>, <DisassemblerInsn "mov" for 0x402f1d>, <DisassemblerInsn "mov" for 0x402f25>, <DisassemblerInsn "sub" for 0x402f2a>, <DisassemblerInsn "mov" for 0x402f2d>, <DisassemblerInsn "mov" for 0x402f34>, <DisassemblerInsn "shr" for 0x402f37>, <DisassemblerInsn "mov" for 0x402f3a>, <DisassemblerInsn "mov" for 0x402f41>, <DisassemblerInsn "mov" for 0x402f49>, <DisassemblerInsn "mov" for 0x402f51>, <DisassemblerInsn "mov" for 0x402f59>, <DisassemblerInsn "mov" for 0x402f61>, <DisassemblerInsn "cmp" for 0x402f69>, <DisassemblerInsn "mov" for 0x402f6d>, <DisassemblerInsn "mov" for 0x402f75>, <DisassemblerInsn "mov" for 0x402f7c>, <DisassemblerInsn "ja" for 0x402f83>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e35>, <DisassemblerInsn "mov" for 0x402e3d>, <DisassemblerInsn "cmp" for 0x402e44>, <DisassemblerInsn "jle" for 0x402e47>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403300>, <DisassemblerInsn "mov" for 0x403307>, <DisassemblerInsn "mov" for 0x40330e>, <DisassemblerInsn "xor" for 0x403315>, <DisassemblerInsn "cmp" for 0x403317>, <DisassemblerInsn "mov" for 0x403319>, <DisassemblerInsn "mov" for 0x403320>, <DisassemblerInsn "mov" for 0x403327>, <DisassemblerInsn "mov" for 0x40332e>, <DisassemblerInsn "jl" for 0x403335>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40318e>, <DisassemblerInsn "mov" for 0x403195>, <DisassemblerInsn "mov" for 0x40319c>, <DisassemblerInsn "mov" for 0x4031a4>, <DisassemblerInsn "movsxd" for 0x4031ac>, <DisassemblerInsn "imul" for 0x4031af>, <DisassemblerInsn "add" for 0x4031b3>, <DisassemblerInsn "mov" for 0x4031b6>, <DisassemblerInsn "mov" for 0x4031be>, <DisassemblerInsn "sub" for 0x4031c0>, <DisassemblerInsn "mov" for 0x4031c2>, <DisassemblerInsn "add" for 0x4031c9>, <DisassemblerInsn "and" for 0x4031cc>, <DisassemblerInsn "mov" for 0x4031cf>, <DisassemblerInsn "mov" for 0x4031d6>, <DisassemblerInsn "cmp" for 0x4031db>, <DisassemblerInsn "mov" for 0x4031dd>, <DisassemblerInsn "mov" for 0x4031e5>, <DisassemblerInsn "je" for 0x4031ec>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403051>, <DisassemblerInsn "mov" for 0x403056>, <DisassemblerInsn "jmp" for 0x40305d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "add" for 0x402d3e>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "mov" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "add" for 0x402d56>, <DisassemblerInsn "mov" for 0x402d5a>, <DisassemblerInsn "cmp" for 0x402d62>, <DisassemblerInsn "mov" for 0x402d69>, <DisassemblerInsn "mov" for 0x402d71>, <DisassemblerInsn "jne" for 0x402d79>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4037c2>, <DisassemblerInsn "mov" for 0x4037c9>, <DisassemblerInsn "mov" for 0x4037d1>, <DisassemblerInsn "mov" for 0x4037d8>, <DisassemblerInsn "mov" for 0x4037e0>, <DisassemblerInsn "mov" for 0x4037e7>, <DisassemblerInsn "movsxd" for 0x4037ea>, <DisassemblerInsn "add" for 0x4037ed>, <DisassemblerInsn "shl" for 0x4037f0>, <DisassemblerInsn "movsxd" for 0x4037f3>, <DisassemblerInsn "add" for 0x4037f6>, <DisassemblerInsn "movsxd" for 0x4037f9>, <DisassemblerInsn "mov" for 0x4037fc>, <DisassemblerInsn "call" for 0x403804>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404278>, <DisassemblerInsn "mov" for 0x404280>, <DisassemblerInsn "mov" for 0x404288>, <DisassemblerInsn "mov" for 0x40428b>, <DisassemblerInsn "mov" for 0x404290>, <DisassemblerInsn "call" for 0x404292>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403f09>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404260>, <DisassemblerInsn "call" for 0x404268>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403229>, <DisassemblerInsn "mov" for 0x403230>, <DisassemblerInsn "mov" for 0x403238>, <DisassemblerInsn "mov" for 0x40323f>, <DisassemblerInsn "xor" for 0x403247>, <DisassemblerInsn "cmp" for 0x403249>, <DisassemblerInsn "mov" for 0x40324c>, <DisassemblerInsn "mov" for 0x403254>, <DisassemblerInsn "je" for 0x40325b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "mov" for 0x402cc5>, <DisassemblerInsn "mov" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402cd0>, <DisassemblerInsn "mov" for 0x402cd2>, <DisassemblerInsn "mov" for 0x402cd9>, <DisassemblerInsn "or" for 0x402cdc>, <DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "mov" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cf6>, <DisassemblerInsn "mov" for 0x402cfd>, <DisassemblerInsn "or" for 0x402d00>, <DisassemblerInsn "mov" for 0x402d04>, <DisassemblerInsn "mov" for 0x402d0c>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d17>, <DisassemblerInsn "mov" for 0x402d1a>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "or" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d28>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "mov" for 0x402d33>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "add" for 0x402d3e>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "mov" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "add" for 0x402d56>, <DisassemblerInsn "mov" for 0x402d5a>, <DisassemblerInsn "cmp" for 0x402d62>, <DisassemblerInsn "mov" for 0x402d69>, <DisassemblerInsn "mov" for 0x402d71>, <DisassemblerInsn "jne" for 0x402d79>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404029>, <DisassemblerInsn "mov" for 0x404031>, <DisassemblerInsn "mov" for 0x404039>, <DisassemblerInsn "mov" for 0x404041>, <DisassemblerInsn "mov" for 0x404049>, <DisassemblerInsn "mov" for 0x404050>, <DisassemblerInsn "mov" for 0x404058>, <DisassemblerInsn "mov" for 0x40405d>, <DisassemblerInsn "mov" for 0x404062>, <DisassemblerInsn "mov" for 0x404066>, <DisassemblerInsn "sub" for 0x40406d>, <DisassemblerInsn "mov" for 0x40406f>, <DisassemblerInsn "mov" for 0x404073>, <DisassemblerInsn "shl" for 0x404075>, <DisassemblerInsn "mov" for 0x404078>, <DisassemblerInsn "mov" for 0x404080>, <DisassemblerInsn "mov" for 0x404085>, <DisassemblerInsn "add" for 0x404088>, <DisassemblerInsn "test" for 0x40408a>, <DisassemblerInsn "mov" for 0x40408e>, <DisassemblerInsn "cmovne" for 0x404091>, <DisassemblerInsn "test" for 0x404095>, <DisassemblerInsn "cmovne" for 0x404099>, <DisassemblerInsn "mov" for 0x40409c>, <DisassemblerInsn "mov" for 0x4040a0>, <DisassemblerInsn "add" for 0x4040a4>, <DisassemblerInsn "cmp" for 0x4040a7>, <DisassemblerInsn "mov" for 0x4040aa>, <DisassemblerInsn "mov" for 0x4040b2>, <DisassemblerInsn "mov" for 0x4040b9>, <DisassemblerInsn "mov" for 0x4040c1>, <DisassemblerInsn "mov" for 0x4040c9>, <DisassemblerInsn "jl" for 0x4040d0>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40302a>, <DisassemblerInsn "je" for 0x40302d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x402bb0>, <DisassemblerInsn "push" for 0x402bb1>, <DisassemblerInsn "push" for 0x402bb3>, <DisassemblerInsn "sub" for 0x402bb4>, <DisassemblerInsn "mov" for 0x402bbb>, <DisassemblerInsn "mov" for 0x402bc3>, <DisassemblerInsn "mov" for 0x402bcb>, <DisassemblerInsn "mov" for 0x402bd2>, <DisassemblerInsn "mov" for 0x402bda>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "mov" for 0x402be4>, <DisassemblerInsn "mov" for 0x402beb>, <DisassemblerInsn "mov" for 0x402bf2>, <DisassemblerInsn "mov" for 0x402bfa>, <DisassemblerInsn "mov" for 0x402c02>, <DisassemblerInsn "mov" for 0x402c09>, <DisassemblerInsn "lea" for 0x402c10>, <DisassemblerInsn "mov" for 0x402c18>, <DisassemblerInsn "mov" for 0x402c1b>, <DisassemblerInsn "add" for 0x402c1e>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c2a>, <DisassemblerInsn "mov" for 0x402c2e>, <DisassemblerInsn "or" for 0x402c35>, <DisassemblerInsn "cmp" for 0x402c38>, <DisassemblerInsn "sete" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c3f>, <DisassemblerInsn "mov" for 0x402c44>, <DisassemblerInsn "cmp" for 0x402c49>, <DisassemblerInsn "cmove" for 0x402c4d>, <DisassemblerInsn "and" for 0x402c50>, <DisassemblerInsn "movzx" for 0x402c53>, <DisassemblerInsn "cmp" for 0x402c56>, <DisassemblerInsn "cmove" for 0x402c59>, <DisassemblerInsn "mov" for 0x402c5c>, <DisassemblerInsn "lea" for 0x402c63>, <DisassemblerInsn "mov" for 0x402c6b>, <DisassemblerInsn "lea" for 0x402c73>, <DisassemblerInsn "mov" for 0x402c7b>, <DisassemblerInsn "lea" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c8b>, <DisassemblerInsn "lea" for 0x402c93>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "xor" for 0x402ca3>, <DisassemblerInsn "mov" for 0x402ca5>, <DisassemblerInsn "mov" for 0x402cad>, <DisassemblerInsn "mov" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "mov" for 0x402cc5>, <DisassemblerInsn "mov" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402cd0>, <DisassemblerInsn "mov" for 0x402cd2>, <DisassemblerInsn "mov" for 0x402cd9>, <DisassemblerInsn "or" for 0x402cdc>, <DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "mov" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cf6>, <DisassemblerInsn "mov" for 0x402cfd>, <DisassemblerInsn "or" for 0x402d00>, <DisassemblerInsn "mov" for 0x402d04>, <DisassemblerInsn "mov" for 0x402d0c>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d17>, <DisassemblerInsn "mov" for 0x402d1a>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "or" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d28>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "mov" for 0x402d33>, <DisassemblerInsn "mov" for 0x402d3b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403376>, <DisassemblerInsn "mov" for 0x40337e>, <DisassemblerInsn "mov" for 0x403386>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "mov" for 0x403396>, <DisassemblerInsn "mov" for 0x40339e>, <DisassemblerInsn "mov" for 0x4033a6>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "add" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b4>, <DisassemblerInsn "test" for 0x4033bb>, <DisassemblerInsn "mov" for 0x4033bf>, <DisassemblerInsn "cmovne" for 0x4033c2>, <DisassemblerInsn "mov" for 0x4033c6>, <DisassemblerInsn "test" for 0x4033ce>, <DisassemblerInsn "cmovne" for 0x4033d2>, <DisassemblerInsn "mov" for 0x4033d6>, <DisassemblerInsn "mov" for 0x4033dd>, <DisassemblerInsn "add" for 0x4033e1>, <DisassemblerInsn "mov" for 0x4033e4>, <DisassemblerInsn "cmp" for 0x4033ec>, <DisassemblerInsn "mov" for 0x4033ef>, <DisassemblerInsn "mov" for 0x4033f7>, <DisassemblerInsn "jl" for 0x4033fe>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403125>, <DisassemblerInsn "mov" for 0x40312c>, <DisassemblerInsn "mov" for 0x403133>, <DisassemblerInsn "mov" for 0x40313a>, <DisassemblerInsn "mov" for 0x403141>, <DisassemblerInsn "mov" for 0x403148>, <DisassemblerInsn "mov" for 0x40314f>, <DisassemblerInsn "add" for 0x403156>, <DisassemblerInsn "mov" for 0x403159>, <DisassemblerInsn "imul" for 0x403160>, <DisassemblerInsn "cdq" for 0x403163>, <DisassemblerInsn "idiv" for 0x403164>, <DisassemblerInsn "mov" for 0x403166>, <DisassemblerInsn "mov" for 0x40316d>, <DisassemblerInsn "mov" for 0x40316f>, <DisassemblerInsn "and" for 0x403176>, <DisassemblerInsn "mov" for 0x403178>, <DisassemblerInsn "cmp" for 0x40317f>, <DisassemblerInsn "mov" for 0x403181>, <DisassemblerInsn "jle" for 0x403188>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404297>, <DisassemblerInsn "call" for 0x40429f>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40374d>, <DisassemblerInsn "mov" for 0x403755>, <DisassemblerInsn "shl" for 0x40375d>, <DisassemblerInsn "movabs" for 0x403761>, <DisassemblerInsn "and" for 0x40376b>, <DisassemblerInsn "mov" for 0x40376e>, <DisassemblerInsn "mov" for 0x403771>, <DisassemblerInsn "mov" for 0x403779>, <DisassemblerInsn "mov" for 0x403780>, <DisassemblerInsn "mov" for 0x403788>, <DisassemblerInsn "mov" for 0x403790>, <DisassemblerInsn "mov" for 0x403797>, <DisassemblerInsn "mov" for 0x40379e>, <DisassemblerInsn "sub" for 0x4037a1>, <DisassemblerInsn "mov" for 0x4037a3>, <DisassemblerInsn "lea" for 0x4037aa>, <DisassemblerInsn "cmp" for 0x4037b1>, <DisassemblerInsn "mov" for 0x4037b4>, <DisassemblerInsn "je" for 0x4037bc>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403780>, <DisassemblerInsn "mov" for 0x403788>, <DisassemblerInsn "mov" for 0x403790>, <DisassemblerInsn "mov" for 0x403797>, <DisassemblerInsn "mov" for 0x40379e>, <DisassemblerInsn "sub" for 0x4037a1>, <DisassemblerInsn "mov" for 0x4037a3>, <DisassemblerInsn "lea" for 0x4037aa>, <DisassemblerInsn "cmp" for 0x4037b1>, <DisassemblerInsn "mov" for 0x4037b4>, <DisassemblerInsn "je" for 0x4037bc>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ae2>, <DisassemblerInsn "mov" for 0x403aea>, <DisassemblerInsn "mov" for 0x403af2>, <DisassemblerInsn "mov" for 0x403af9>, <DisassemblerInsn "mov" for 0x403b01>, <DisassemblerInsn "mov" for 0x403b09>, <DisassemblerInsn "mov" for 0x403b10>, <DisassemblerInsn "mov" for 0x403b18>, <DisassemblerInsn "xor" for 0x403b20>, <DisassemblerInsn "mov" for 0x403b22>, <DisassemblerInsn "mov" for 0x403b2a>, <DisassemblerInsn "mov" for 0x403b31>, <DisassemblerInsn "mov" for 0x403b39>, <DisassemblerInsn "mov" for 0x403b41>, <DisassemblerInsn "mov" for 0x403b48>, <DisassemblerInsn "mov" for 0x403b4f>, <DisassemblerInsn "mov" for 0x403b57>, <DisassemblerInsn "mov" for 0x403b5f>, <DisassemblerInsn "mov" for 0x403b67>, <DisassemblerInsn "mov" for 0x403b6f>, <DisassemblerInsn "mov" for 0x403b77>, <DisassemblerInsn "mov" for 0x403b7e>, <DisassemblerInsn "mov" for 0x403b85>, <DisassemblerInsn "mov" for 0x403b8d>, <DisassemblerInsn "mov" for 0x403b95>, <DisassemblerInsn "mov" for 0x403b9d>, <DisassemblerInsn "sub" for 0x403ba5>, <DisassemblerInsn "shl" for 0x403ba8>, <DisassemblerInsn "add" for 0x403bab>, <DisassemblerInsn "add" for 0x403bad>, <DisassemblerInsn "lea" for 0x403baf>, <DisassemblerInsn "cmp" for 0x403bb6>, <DisassemblerInsn "mov" for 0x403bb9>, <DisassemblerInsn "jl" for 0x403bc1>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ddd>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403c1f>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403522>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fa4>, <DisassemblerInsn "mov" for 0x402fab>, <DisassemblerInsn "mov" for 0x402fb2>, <DisassemblerInsn "mov" for 0x402fba>, <DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "movzx" for 0x402fd9>, <DisassemblerInsn "add" for 0x402fdd>, <DisassemblerInsn "lea" for 0x402fe0>, <DisassemblerInsn "mov" for 0x402fe8>, <DisassemblerInsn "xor" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff1>, <DisassemblerInsn "mov" for 0x402ff4>, <DisassemblerInsn "mov" for 0x402ff8>, <DisassemblerInsn "mov" for 0x403000>, <DisassemblerInsn "mov" for 0x403008>, <DisassemblerInsn "mov" for 0x40300d>, <DisassemblerInsn "mov" for 0x403015>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "call" for 0x403025>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403340>, <DisassemblerInsn "mov" for 0x403348>, <DisassemblerInsn "mov" for 0x40334f>, <DisassemblerInsn "mov" for 0x403356>, <DisassemblerInsn "mov" for 0x40335d>, <DisassemblerInsn "xor" for 0x403365>, <DisassemblerInsn "mov" for 0x403367>, <DisassemblerInsn "mov" for 0x40336f>, <DisassemblerInsn "mov" for 0x403376>, <DisassemblerInsn "mov" for 0x40337e>, <DisassemblerInsn "mov" for 0x403386>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "mov" for 0x403396>, <DisassemblerInsn "mov" for 0x40339e>, <DisassemblerInsn "mov" for 0x4033a6>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "add" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b4>, <DisassemblerInsn "test" for 0x4033bb>, <DisassemblerInsn "mov" for 0x4033bf>, <DisassemblerInsn "cmovne" for 0x4033c2>, <DisassemblerInsn "mov" for 0x4033c6>, <DisassemblerInsn "test" for 0x4033ce>, <DisassemblerInsn "cmovne" for 0x4033d2>, <DisassemblerInsn "mov" for 0x4033d6>, <DisassemblerInsn "mov" for 0x4033dd>, <DisassemblerInsn "add" for 0x4033e1>, <DisassemblerInsn "mov" for 0x4033e4>, <DisassemblerInsn "cmp" for 0x4033ec>, <DisassemblerInsn "mov" for 0x4033ef>, <DisassemblerInsn "mov" for 0x4033f7>, <DisassemblerInsn "jl" for 0x4033fe>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403527>, <DisassemblerInsn "mov" for 0x40352f>, <DisassemblerInsn "add" for 0x403537>, <DisassemblerInsn "mov" for 0x40353e>, <DisassemblerInsn "mov" for 0x403546>, <DisassemblerInsn "add" for 0x403549>, <DisassemblerInsn "mov" for 0x40354d>, <DisassemblerInsn "mov" for 0x403555>, <DisassemblerInsn "mov" for 0x403558>, <DisassemblerInsn "cmp" for 0x40355f>, <DisassemblerInsn "jle" for 0x403562>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403568>, <DisassemblerInsn "mov" for 0x40356f>, <DisassemblerInsn "mov" for 0x403577>, <DisassemblerInsn "mov" for 0x40357e>, <DisassemblerInsn "mov" for 0x403586>, <DisassemblerInsn "mov" for 0x40358e>, <DisassemblerInsn "mov" for 0x403595>, <DisassemblerInsn "mov" for 0x40359d>, <DisassemblerInsn "add" for 0x4035a0>, <DisassemblerInsn "mov" for 0x4035a7>, <DisassemblerInsn "add" for 0x4035af>, <DisassemblerInsn "mov" for 0x4035b3>, <DisassemblerInsn "mov" for 0x4035bb>, <DisassemblerInsn "imul" for 0x4035c3>, <DisassemblerInsn "cmp" for 0x4035c6>, <DisassemblerInsn "setg" for 0x4035c9>, <DisassemblerInsn "mov" for 0x4035cd>, <DisassemblerInsn "lea" for 0x4035d5>, <DisassemblerInsn "add" for 0x4035dd>, <DisassemblerInsn "mov" for 0x4035e1>, <DisassemblerInsn "lea" for 0x4035e9>, <DisassemblerInsn "mov" for 0x4035f1>, <DisassemblerInsn "cmp" for 0x4035f9>, <DisassemblerInsn "sete" for 0x4035fd>, <DisassemblerInsn "mov" for 0x403601>, <DisassemblerInsn "mov" for 0x403609>, <DisassemblerInsn "movsxd" for 0x403611>, <DisassemblerInsn "mov" for 0x403614>, <DisassemblerInsn "movsxd" for 0x40361c>, <DisassemblerInsn "mov" for 0x40361f>, <DisassemblerInsn "add" for 0x403627>, <DisassemblerInsn "mov" for 0x40362d>, <DisassemblerInsn "xor" for 0x403635>, <DisassemblerInsn "mov" for 0x403637>, <DisassemblerInsn "xor" for 0x403639>, <DisassemblerInsn "mov" for 0x40363b>, <DisassemblerInsn "mov" for 0x403643>, <DisassemblerInsn "mov" for 0x40364a>, <DisassemblerInsn "mov" for 0x403651>, <DisassemblerInsn "mov" for 0x403659>, <DisassemblerInsn "mov" for 0x403661>, <DisassemblerInsn "mov" for 0x403668>, <DisassemblerInsn "mov" for 0x403670>, <DisassemblerInsn "mov" for 0x403677>, <DisassemblerInsn "mov" for 0x40367e>, <DisassemblerInsn "mov" for 0x403686>, <DisassemblerInsn "mov" for 0x40368e>, <DisassemblerInsn "mov" for 0x403696>, <DisassemblerInsn "mov" for 0x40369e>, <DisassemblerInsn "mov" for 0x4036a5>, <DisassemblerInsn "mov" for 0x4036ad>, <DisassemblerInsn "mov" for 0x4036b5>, <DisassemblerInsn "mov" for 0x4036bc>, <DisassemblerInsn "mov" for 0x4036c4>, <DisassemblerInsn "mov" for 0x4036cc>, <DisassemblerInsn "mov" for 0x4036d4>, <DisassemblerInsn "mov" for 0x4036dc>, <DisassemblerInsn "mov" for 0x4036e3>, <DisassemblerInsn "mov" for 0x4036ea>, <DisassemblerInsn "add" for 0x4036f2>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041ac>, <DisassemblerInsn "mov" for 0x4041b0>, <DisassemblerInsn "mov" for 0x4041b8>, <DisassemblerInsn "mov" for 0x4041bb>, <DisassemblerInsn "lea" for 0x4041c0>, <DisassemblerInsn "mov" for 0x4041c7>, <DisassemblerInsn "call" for 0x4041c9>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4038d2>, <DisassemblerInsn "mov" for 0x4038da>, <DisassemblerInsn "mov" for 0x4038e2>, <DisassemblerInsn "mov" for 0x4038e9>, <DisassemblerInsn "xor" for 0x4038f1>, <DisassemblerInsn "xor" for 0x4038f3>, <DisassemblerInsn "cmp" for 0x4038f5>, <DisassemblerInsn "mov" for 0x4038f9>, <DisassemblerInsn "mov" for 0x403900>, <DisassemblerInsn "mov" for 0x403907>, <DisassemblerInsn "mov" for 0x40390a>, <DisassemblerInsn "mov" for 0x403912>, <DisassemblerInsn "mov" for 0x40391a>, <DisassemblerInsn "mov" for 0x403922>, <DisassemblerInsn "je" for 0x40392a>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c21>, <DisassemblerInsn "mov" for 0x403c28>, <DisassemblerInsn "mov" for 0x403c30>, <DisassemblerInsn "mov" for 0x403c38>, <DisassemblerInsn "bswap" for 0x403c3a>, <DisassemblerInsn "mov" for 0x403c3c>, <DisassemblerInsn "mov" for 0x403c3e>, <DisassemblerInsn "mov" for 0x403c40>, <DisassemblerInsn "sub" for 0x403c45>, <DisassemblerInsn "mov" for 0x403c47>, <DisassemblerInsn "shl" for 0x403c49>, <DisassemblerInsn "mov" for 0x403c4c>, <DisassemblerInsn "or" for 0x403c4f>, <DisassemblerInsn "add" for 0x403c52>, <DisassemblerInsn "add" for 0x403c56>, <DisassemblerInsn "mov" for 0x403c59>, <DisassemblerInsn "mov" for 0x403c61>, <DisassemblerInsn "mov" for 0x403c69>, <DisassemblerInsn "mov" for 0x403c70>, <DisassemblerInsn "mov" for 0x403c78>, <DisassemblerInsn "mov" for 0x403c80>, <DisassemblerInsn "mov" for 0x403c88>, <DisassemblerInsn "mov" for 0x403c8f>, <DisassemblerInsn "mov" for 0x403c96>, <DisassemblerInsn "mov" for 0x403c9e>, <DisassemblerInsn "mov" for 0x403ca6>, <DisassemblerInsn "shr" for 0x403ca9>, <DisassemblerInsn "mov" for 0x403cac>, <DisassemblerInsn "movabs" for 0x403cb4>, <DisassemblerInsn "and" for 0x403cbe>, <DisassemblerInsn "movsx" for 0x403cc1>, <DisassemblerInsn "mov" for 0x403cc6>, <DisassemblerInsn "mov" for 0x403ccd>, <DisassemblerInsn "movsx" for 0x403cd3>, <DisassemblerInsn "mov" for 0x403cd7>, <DisassemblerInsn "cmp" for 0x403cde>, <DisassemblerInsn "mov" for 0x403ce3>, <DisassemblerInsn "mov" for 0x403ceb>, <DisassemblerInsn "mov" for 0x403cf2>, <DisassemblerInsn "mov" for 0x403cfa>, <DisassemblerInsn "mov" for 0x403d01>, <DisassemblerInsn "jge" for 0x403d08>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031ee>, <DisassemblerInsn "mov" for 0x4031f6>, <DisassemblerInsn "and" for 0x4031fd>, <DisassemblerInsn "mov" for 0x403200>, <DisassemblerInsn "mov" for 0x403207>, <DisassemblerInsn "xor" for 0x40320c>, <DisassemblerInsn "mov" for 0x40320e>, <DisassemblerInsn "mov" for 0x403216>, <DisassemblerInsn "mov" for 0x40321d>, <DisassemblerInsn "jmp" for 0x403224>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403033>, <DisassemblerInsn "mov" for 0x40303b>, <DisassemblerInsn "mov" for 0x40303e>, <DisassemblerInsn "lea" for 0x403043>, <DisassemblerInsn "mov" for 0x40304a>, <DisassemblerInsn "call" for 0x40304c>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d0e>, <DisassemblerInsn "mov" for 0x403d16>, <DisassemblerInsn "mov" for 0x403d1e>, <DisassemblerInsn "mov" for 0x403d25>, <DisassemblerInsn "mov" for 0x403d2c>, <DisassemblerInsn "mov" for 0x403d34>, <DisassemblerInsn "shl" for 0x403d3c>, <DisassemblerInsn "mov" for 0x403d3f>, <DisassemblerInsn "mov" for 0x403d46>, <DisassemblerInsn "sub" for 0x403d4e>, <DisassemblerInsn "mov" for 0x403d50>, <DisassemblerInsn "neg" for 0x403d57>, <DisassemblerInsn "mov" for 0x403d59>, <DisassemblerInsn "mov" for 0x403d60>, <DisassemblerInsn "sub" for 0x403d62>, <DisassemblerInsn "setb" for 0x403d64>, <DisassemblerInsn "mov" for 0x403d68>, <DisassemblerInsn "sub" for 0x403d6b>, <DisassemblerInsn "setb" for 0x403d6e>, <DisassemblerInsn "and" for 0x403d72>, <DisassemblerInsn "test" for 0x403d75>, <DisassemblerInsn "mov" for 0x403d79>, <DisassemblerInsn "mov" for 0x403d81>, <DisassemblerInsn "mov" for 0x403d88>, <DisassemblerInsn "jne" for 0x403d90>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403a16>, <DisassemblerInsn "mov" for 0x403a1e>, <DisassemblerInsn "mov" for 0x403a26>, <DisassemblerInsn "mov" for 0x403a2d>, <DisassemblerInsn "mov" for 0x403a34>, <DisassemblerInsn "mov" for 0x403a3c>, <DisassemblerInsn "mov" for 0x403a44>, <DisassemblerInsn "mov" for 0x403a4c>, <DisassemblerInsn "mov" for 0x403a54>, <DisassemblerInsn "mov" for 0x403a57>, <DisassemblerInsn "mov" for 0x403a5f>, <DisassemblerInsn "mov" for 0x403a61>, <DisassemblerInsn "mov" for 0x403a68>, <DisassemblerInsn "sub" for 0x403a6e>, <DisassemblerInsn "mov" for 0x403a71>, <DisassemblerInsn "mov" for 0x403a74>, <DisassemblerInsn "mov" for 0x403a7c>, <DisassemblerInsn "mov" for 0x403a7e>, <DisassemblerInsn "mov" for 0x403a86>, <DisassemblerInsn "test" for 0x403a8b>, <DisassemblerInsn "mov" for 0x403a8f>, <DisassemblerInsn "mov" for 0x403a97>, <DisassemblerInsn "mov" for 0x403a9e>, <DisassemblerInsn "mov" for 0x403aa5>, <DisassemblerInsn "mov" for 0x403aa8>, <DisassemblerInsn "mov" for 0x403ab0>, <DisassemblerInsn "mov" for 0x403ab3>, <DisassemblerInsn "mov" for 0x403abb>, <DisassemblerInsn "mov" for 0x403abd>, <DisassemblerInsn "mov" for 0x403ac4>, <DisassemblerInsn "mov" for 0x403acb>, <DisassemblerInsn "mov" for 0x403ad3>, <DisassemblerInsn "jne" for 0x403adb>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "mov" for 0x40344f>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345f>, <DisassemblerInsn "mov" for 0x403467>, <DisassemblerInsn "mov" for 0x40346f>, <DisassemblerInsn "add" for 0x403472>, <DisassemblerInsn "mov" for 0x403475>, <DisassemblerInsn "test" for 0x40347c>, <DisassemblerInsn "mov" for 0x403480>, <DisassemblerInsn "cmovne" for 0x403483>, <DisassemblerInsn "mov" for 0x403487>, <DisassemblerInsn "test" for 0x40348f>, <DisassemblerInsn "cmovne" for 0x403493>, <DisassemblerInsn "mov" for 0x403497>, <DisassemblerInsn "mov" for 0x40349e>, <DisassemblerInsn "add" for 0x4034a2>, <DisassemblerInsn "mov" for 0x4034a5>, <DisassemblerInsn "cmp" for 0x4034ad>, <DisassemblerInsn "mov" for 0x4034b0>, <DisassemblerInsn "mov" for 0x4034b8>, <DisassemblerInsn "jl" for 0x4034bf>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rsp + 0x3f8]>', '<mov~~rdx, qword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~rdi, qword ptr [rsp + 0x3f0]>', '<mov~~r10b, byte ptr [rsp + 0x46b]>', '<mov~~r11d, dword ptr [rsp + 0x46c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3e0], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3e4], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3f8], rcx>', '<mov~~dword ptr [rsp + 0x400], eax>', '<jl~~0x403261>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xbb2]>', '<mov~~byte ptr [rsp + 0x4ef], al>', '<cmp~~al, 0>', '<je~~0x403062>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x544]>', '<mov~~edx, dword ptr [rsp + 0x52c]>', '<mov~~ecx, dword ptr [rsp + 0x51c]>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x464], ecx>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x46b], al>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jle~~0x4042b0>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~edx, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x138]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~dword ptr [rsp + 0x70], ecx>', '<mov~~dword ptr [rsp + 0x74], edi>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~dword ptr [rsp + 0x84], edx>', '<mov~~qword ptr [rsp + 0x88], rax>', '<lea~~rax, [rip + 0x52b8]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x278], rax>', '<jl~~0x404278>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~r8, qword ptr [rsp + 0x208]>', '<mov~~edi, dword ptr [rsp + 0x1bc]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~dword ptr [rsp + 0x150], eax>', '<jne~~0x403c21>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x308]>', '<mov~~r9d, dword ptr [rsp + 0x274]>', '<mov~~r8d, dword ptr [rsp + 0x2a8]>', '<mov~~edi, dword ptr [rsp + 0x2ac]>', '<mov~~rsi, qword ptr [rsp + 0x2b0]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x240], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<ja~~0x40398b>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x480], eax>', '<mov~~eax, dword ptr [rsp + 0x480]>', '<add~~rsp, 0x13b0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x47c]>', '<mov~~eax, dword ptr [rsp + 0x464]>', '<mov~~edx, dword ptr [rsp + 0x52c]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x448], rdx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x450], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x45c], ecx>', '<mov~~dword ptr [rsp + 0x460], eax>', '<mov~~esi, dword ptr [rsp + 0x4e8]>', '<mov~~edx, dword ptr [rsp + 0x554]>', '<mov~~ecx, dword ptr [rsp + 0x458]>', '<mov~~edi, dword ptr [rsp + 0x45c]>', '<mov~~eax, dword ptr [rsp + 0x460]>', '<mov~~dword ptr [rsp + 0x438], edi>', '<mov~~dword ptr [rsp + 0x43c], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x434], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x438]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x43c]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x440], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x444], eax>', '<jle~~0x403300>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<mov~~r9d, dword ptr [rsp + 0x2ec]>', '<mov~~edi, dword ptr [rsp + 0x17c]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~r8, qword ptr [rsp + 0x180]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1d0], r8>', '<mov~~dword ptr [rsp + 0x1d8], edi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1f4], esi>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jne~~0x403ae2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x480]>', '<add~~rsp, 0x13b0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2d0]>', '<mov~~edi, dword ptr [rsp + 0x2ec]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~qword ptr [rsp + 0x200], r10>', '<mov~~qword ptr [rsp + 0x208], r9>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~dword ptr [rsp + 0x220], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jge~~0x404165>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~ecx, dword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~dword ptr [rsp + 0x138], ecx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~edx, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x138]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~dword ptr [rsp + 0x70], ecx>', '<mov~~dword ptr [rsp + 0x74], edi>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~dword ptr [rsp + 0x84], edx>', '<mov~~qword ptr [rsp + 0x88], rax>', '<lea~~rax, [rip + 0x52b8]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x278], rax>', '<jl~~0x404278>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~al, byte ptr [rsp + 0x4d5]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x4ac], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x4ac]>', '<mov~~dword ptr [rsp + rdx*4 + 0x7b0], esi>', '<mov~~byte ptr [rsp + rdx + 0x6b0], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xbb0]>', '<mov~~byte ptr [rsp + rdx + 0x5b0], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x4b0], rdx>', '<mov~~dword ptr [rsp + 0x4bc], ecx>', '<mov~~dword ptr [rsp + 0x4c0], eax>', '<jle~~0x402f89>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x470]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x444], eax>', '<mov~~ecx, dword ptr [rsp + 0x434]>', '<mov~~edx, dword ptr [rsp + 0x440]>', '<mov~~esi, dword ptr [rsp + 0x444]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x458], esi>', '<mov~~dword ptr [rsp + 0x45c], edx>', '<mov~~dword ptr [rsp + 0x460], ecx>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jl~~0x403125>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2d8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2ec], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2f0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<mov~~dword ptr [rsp + 0x304], eax>', '<je~~0x403780>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~r8d, dword ptr [rsp + 0x4e8]>', '<mov~~edx, dword ptr [rsp + 0x554]>', '<mov~~rax, qword ptr [rsp + 0x360]>', '<mov~~edi, dword ptr [rsp + 0x368]>', '<mov~~ecx, dword ptr [rsp + 0x36c]>', '<mov~~r9, qword ptr [rsp + 0x2a0]>', '<mov~~r10, qword ptr [rsp + 0x298]>', '<mov~~r11, qword ptr [rsp + 0x290]>', '<mov~~rbx, qword ptr [rsp + 0x288]>', '<mov~~ebp, dword ptr [rsp + 0x284]>', '<mov~~r14d, dword ptr [rsp + 0x280]>', '<mov~~dword ptr [rsp + 0x2a8], r14d>', '<mov~~dword ptr [rsp + 0x2ac], ebp>', '<mov~~qword ptr [rsp + 0x2b0], rbx>', '<mov~~qword ptr [rsp + 0x2b8], r11>', '<mov~~qword ptr [rsp + 0x2c0], r10>', '<mov~~qword ptr [rsp + 0x2c8], r9>', '<mov~~dword ptr [rsp + 0x2d0], ecx>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2ec], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2f0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<mov~~dword ptr [rsp + 0x304], eax>', '<je~~0x403780>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~eax, dword ptr [rsp + 0x274]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<mov~~esi, dword ptr [rsp + 0x2d0]>', '<mov~~edi, dword ptr [rsp + 0x2ec]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~qword ptr [rsp + 0x200], r10>', '<mov~~qword ptr [rsp + 0x208], r9>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~dword ptr [rsp + 0x220], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jge~~0x404165>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x9c]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x9c]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~dword ptr [rsp + 0xac], ecx>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~ecx, dword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~dword ptr [rsp + 0x138], ecx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~edx, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x138]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~dword ptr [rsp + 0x70], ecx>', '<mov~~dword ptr [rsp + 0x74], edi>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~dword ptr [rsp + 0x84], edx>', '<mov~~qword ptr [rsp + 0x88], rax>', '<lea~~rax, [rip + 0x52b8]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x278], rax>', '<jl~~0x404278>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xbb2]>', '<mov~~byte ptr [rsp + 0x4d5], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x4d6], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x4d7], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<jne~~0x402de2>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~esi, dword ptr [rsp + 0x150]>', '<mov~~dword ptr [rsp + 0x104], esi>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x118], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x11c], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~dword ptr [rsp + 0x138], ecx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<jge~~0x403fd0>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x568]>', '<mov~~eax, dword ptr [rsp + 0x564]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4e8], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfd2b7]>', '<call~~0x500068>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x220]>', '<mov~~rcx, qword ptr [rsp + 0x200]>', '<mov~~eax, dword ptr [rsp + 0x224]>', '<mov~~rsi, qword ptr [rsp + 0x228]>', '<mov~~rdi, qword ptr [rsp + 0x230]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~dword ptr [rsp + 0x54], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<cmp~~eax, 0x20>', '<jle~~0x4041ce>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x404165>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x220]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rsi, qword ptr [rsp + 0x208]>', '<mov~~rdi, qword ptr [rsp + 0x200]>', '<mov~~r8, qword ptr [rsp + 0x40]>', '<mov~~r9d, dword ptr [rsp + 0x2ec]>', '<mov~~r11, qword ptr [rsp + 0x2d8]>', '<mov~~r10, qword ptr [rsp + 0x378]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x360], r11>', '<mov~~dword ptr [rsp + 0x368], r10d>', '<mov~~dword ptr [rsp + 0x36c], r9d>', '<mov~~qword ptr [rsp + 0x2a0], r8>', '<mov~~qword ptr [rsp + 0x298], rdi>', '<mov~~qword ptr [rsp + 0x290], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~dword ptr [rsp + 0x284], ecx>', '<mov~~dword ptr [rsp + 0x280], eax>', '<jl~~0x403651>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4042b0>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4d5]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x486], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x487], al>', '<jb~~0x402fb2>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3b4]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<mov~~r9d, dword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~rdx, qword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~rdi, qword ptr [rsp + 0x398]>', '<mov~~r10b, byte ptr [rsp + 0x46b]>', '<mov~~r11d, dword ptr [rsp + 0x46c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x384], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x388], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<jl~~0x403437>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x538]>', '<movzx~~ecx, word ptr [rsp + 0xbb0]>', '<mov~~dword ptr [rsp + 0x46c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x47c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jle~~0x4042b0>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x220]>', '<mov~~rax, qword ptr [rsp + 0x200]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~r8d, dword ptr [rsp + 0x194]>', '<mov~~r9, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rsp + 0x154], ecx>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<mov~~qword ptr [rsp + 0x160], r9>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x56fa]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x278], rax>', '<jl~~0x404278>']}, {'block_Idx': 44, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jmp~~0x4042b0>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4ef]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<jbe~~0x402de2>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x38c]>', '<mov~~esi, dword ptr [rsp + 0x404]>', '<mov~~eax, dword ptr [rsp + 0x3c4]>', '<mov~~rdi, qword ptr [rsp + 0x520]>', '<mov~~rdx, qword ptr [rsp + 0x398]>', '<add~~rdx, rdi>', '<add~~eax, 2>', '<cmp~~eax, esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x428], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x430], esi>', '<mov~~qword ptr [rsp + 0x408], rdx>', '<mov~~dword ptr [rsp + 0x410], ecx>', '<mov~~dword ptr [rsp + 0x414], eax>', '<je~~0x403229>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x580]>', '<mov~~r10, qword ptr [rsp + 0x570]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~edx, dword ptr [rsp + 0x4c4]>', '<mov~~sil, byte ptr [rsp + 0x487]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x598]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x4bc]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~dword ptr [rsp + 0x494], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x488], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x490], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x494]>', '<mov~~dword ptr [rsp + 0x498], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x49c], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xbaa]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x4a4], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x4a0], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x4a4]>', '<mov~~dword ptr [rsp + 0x4a8], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x7ac], r8d>', '<mov~~byte ptr [rsp + rsi + 0x6af], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xba8]>', '<mov~~byte ptr [rsp + rsi + 0x5af], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x4b0], rdx>', '<mov~~dword ptr [rsp + 0x4bc], ecx>', '<mov~~dword ptr [rsp + 0x4c0], eax>', '<ja~~0x402ebd>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<cmp~~eax, -1>', '<jle~~0x402f89>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x434]>', '<mov~~edx, dword ptr [rsp + 0x440]>', '<mov~~esi, dword ptr [rsp + 0x444]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x458], esi>', '<mov~~dword ptr [rsp + 0x45c], edx>', '<mov~~dword ptr [rsp + 0x460], ecx>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jl~~0x403125>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x440]>', '<mov~~esi, dword ptr [rsp + 0x438]>', '<mov~~rcx, qword ptr [rsp + 0x530]>', '<mov~~rdi, qword ptr [rsp + 0x520]>', '<movsxd~~rax, esi>', '<imul~~rax, rdi>', '<add~~rcx, rax>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~eax, edx>', '<sub~~eax, esi>', '<mov~~dword ptr [rsp + 0x420], eax>', '<add~~esi, 1>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x424], eax>', '<mov~~eax, 0x80>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<mov~~dword ptr [rsp + 0x430], eax>', '<je~~0x403229>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x480], eax>', '<jmp~~0x4042b0>']}, {'block_Idx': 1, 'blockInsts': ['<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x508], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xbb2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~qword ptr [rsp + 0x590], rax>', '<jne~~0x402cb5>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x274]>', '<mov~~rdi, qword ptr [rsp + 0x308]>', '<mov~~ecx, dword ptr [rsp + 0x2d4]>', '<mov~~rsi, qword ptr [rsp + 0x370]>', '<mov~~edx, dword ptr [rsp + 0x270]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<call~~0x500078>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x403f5c>']}, {'block_Idx': 40, 'blockInsts': ['<lea~~rdi, [rsp + 0x598]>', '<call~~0x500080>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x424]>', '<mov~~rcx, qword ptr [rsp + 0x428]>', '<mov~~eax, dword ptr [rsp + 0x430]>', '<mov~~qword ptr [rsp + 0x3f0], rcx>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x3f8], rcx>', '<mov~~dword ptr [rsp + 0x400], eax>', '<je~~0x4032ef>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x588]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xbb0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xbb2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xbb0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x508], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xbb2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~qword ptr [rsp + 0x590], rax>', '<jne~~0x402cb5>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x350]>', '<mov~~r9, qword ptr [rsp + 0x348]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~r10, qword ptr [rsp + 0x180]>', '<mov~~ebx, dword ptr [rsp + 0x16c]>', '<mov~~bpl, byte ptr [rsp + 0x33f]>', '<mov~~r14d, dword ptr [rsp + 0x70]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<jl~~0x403b48>']}, {'block_Idx': 35, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x403527>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13b0>', '<mov~~dword ptr [rsp + 0x51c], r9d>', '<mov~~qword ptr [rsp + 0x520], r8>', '<mov~~dword ptr [rsp + 0x52c], ecx>', '<mov~~qword ptr [rsp + 0x530], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x538], rdi>', '<mov~~eax, dword ptr [rsp + 0x13e0]>', '<mov~~dword ptr [rsp + 0x544], eax>', '<mov~~rax, qword ptr [rsp + 0x13d8]>', '<mov~~qword ptr [rsp + 0x548], rax>', '<mov~~edx, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x554], edx>', '<lea~~rdx, [rsp + 0x598]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x558], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x564], ecx>', '<lea~~rcx, [rsp + 0xbb0]>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<lea~~rcx, [rsp + 0x7b0]>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<lea~~rcx, [rsp + 0x6b0]>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<lea~~rcx, [rsp + 0x5b0]>', '<mov~~qword ptr [rsp + 0x580], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~qword ptr [rsp + 0x590], rax>', '<mov~~rsi, qword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x588]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xbb0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xbb2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xbb0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xbb2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xbb0], ax>', '<mov~~rax, rsi>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3d8]>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~rdx, qword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~rdi, qword ptr [rsp + 0x3c8]>', '<mov~~r10b, byte ptr [rsp + 0x46b]>', '<mov~~r11d, dword ptr [rsp + 0x46c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3b0], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3b4], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~dword ptr [rsp + 0x3d8], eax>', '<jl~~0x403376>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x4e8]>', '<mov~~edx, dword ptr [rsp + 0x554]>', '<mov~~ecx, dword ptr [rsp + 0x458]>', '<mov~~edi, dword ptr [rsp + 0x45c]>', '<mov~~eax, dword ptr [rsp + 0x460]>', '<mov~~dword ptr [rsp + 0x438], edi>', '<mov~~dword ptr [rsp + 0x43c], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x434], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x438]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x43c]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x440], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x444], eax>', '<jle~~0x403300>']}, {'block_Idx': 51, 'blockInsts': ['<lea~~rdi, [rsp + 0x598]>', '<call~~0x500080>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~rcx, qword ptr [rsp + 0x2e0]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<mov~~dword ptr [rsp + 0x304], eax>', '<mov~~rcx, qword ptr [rsp + 0x370]>', '<mov~~rdx, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x304]>', '<mov~~dword ptr [rsp + 0x270], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x274], ecx>', '<lea~~rax, [rip + 0x5abd]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x278], rax>', '<je~~0x404278>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x370]>', '<mov~~rdx, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x304]>', '<mov~~dword ptr [rsp + 0x270], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x274], ecx>', '<lea~~rax, [rip + 0x5abd]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x278], rax>', '<je~~0x404278>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~r8d, dword ptr [rsp + 0x1d8]>', '<mov~~esi, dword ptr [rsp + 0x1dc]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1e8]>', '<mov~~eax, dword ptr [rsp + 0x1f4]>', '<mov~~dword ptr [rsp + 0x17c], r8d>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<xor~~edi, edi>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<mov~~edx, dword ptr [rsp + 0x220]>', '<mov~~rax, qword ptr [rsp + 0x200]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~r8d, dword ptr [rsp + 0x194]>', '<mov~~r9, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rsp + 0x154], ecx>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<mov~~qword ptr [rsp + 0x160], r9>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x56fa]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x278], rax>', '<jl~~0x404278>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x403033>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x403c70>']}, {'block_Idx': 39, 'blockInsts': ['<jmp~~0x403340>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x486]>', '<mov~~byte ptr [rsp + 0x487], al>', '<mov~~rax, qword ptr [rsp + 0x580]>', '<mov~~r10, qword ptr [rsp + 0x570]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<mov~~edx, dword ptr [rsp + 0x4c4]>', '<mov~~sil, byte ptr [rsp + 0x487]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x598]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x408]>', '<mov~~eax, dword ptr [rsp + 0x410]>', '<mov~~edx, dword ptr [rsp + 0x414]>', '<mov~~dword ptr [rsp + 0x3c4], edx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~dword ptr [rsp + 0x3d8], eax>', '<mov~~r9d, dword ptr [rsp + 0x3d8]>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~rdx, qword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~rdi, qword ptr [rsp + 0x3c8]>', '<mov~~r10b, byte ptr [rsp + 0x46b]>', '<mov~~r11d, dword ptr [rsp + 0x46c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3b0], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3b4], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~dword ptr [rsp + 0x3d8], eax>', '<jl~~0x403376>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~rcx, qword ptr [rsp + 0x548]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x380], eax>', '<cmp~~eax, 0>', '<jle~~0x404260>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x380]>', '<mov~~rax, qword ptr [rsp + 0x548]>', '<mov~~esi, dword ptr [rsp + 0x52c]>', '<mov~~rdi, qword ptr [rsp + 0x558]>', '<mov~~r8d, dword ptr [rsp + 0x544]>', '<mov~~edx, dword ptr [rsp + 0x51c]>', '<mov~~r10, qword ptr [rsp + 0x538]>', '<mov~~r9, r10>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x308], r9>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x310], r10>', '<mov~~qword ptr [rsp + 0x318], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x327], r9b>', '<lea~~r9, [rsp + 0x598]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x328], r9>', '<lea~~r9, [rsp + 0x598]>', '<mov~~qword ptr [rsp + 0x330], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x33f], r8b>', '<mov~~qword ptr [rsp + 0x340], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x348], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x350], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x358], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x360], rdx>', '<mov~~dword ptr [rsp + 0x368], ecx>', '<mov~~dword ptr [rsp + 0x36c], eax>', '<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~r8d, dword ptr [rsp + 0x4e8]>', '<mov~~edx, dword ptr [rsp + 0x554]>', '<mov~~rax, qword ptr [rsp + 0x360]>', '<mov~~edi, dword ptr [rsp + 0x368]>', '<mov~~ecx, dword ptr [rsp + 0x36c]>', '<mov~~r9, qword ptr [rsp + 0x2a0]>', '<mov~~r10, qword ptr [rsp + 0x298]>', '<mov~~r11, qword ptr [rsp + 0x290]>', '<mov~~rbx, qword ptr [rsp + 0x288]>', '<mov~~ebp, dword ptr [rsp + 0x284]>', '<mov~~r14d, dword ptr [rsp + 0x280]>', '<mov~~dword ptr [rsp + 0x2a8], r14d>', '<mov~~dword ptr [rsp + 0x2ac], ebp>', '<mov~~qword ptr [rsp + 0x2b0], rbx>', '<mov~~qword ptr [rsp + 0x2b8], r11>', '<mov~~qword ptr [rsp + 0x2c0], r10>', '<mov~~qword ptr [rsp + 0x2c8], r9>', '<mov~~dword ptr [rsp + 0x2d0], ecx>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<add~~rax, 1>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x5119]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~edi, dword ptr [rsp + 0x2a8]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x248], edi>', '<mov~~dword ptr [rsp + 0x24c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<je~~0x40398b>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~dword ptr [rsp + 0x150], eax>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~esi, dword ptr [rsp + 0x150]>', '<mov~~dword ptr [rsp + 0x104], esi>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x118], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x11c], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~dword ptr [rsp + 0x138], ecx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<jge~~0x403fd0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x418]>', '<mov~~eax, dword ptr [rsp + 0x420]>', '<and~~eax, 0xfffffffe>', '<mov~~dword ptr [rsp + 0x404], eax>', '<mov~~ecx, 0x80>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x408], rdx>', '<mov~~dword ptr [rsp + 0x410], ecx>', '<mov~~dword ptr [rsp + 0x414], eax>', '<jmp~~0x403340>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6208]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~r8, qword ptr [rsp + 0x208]>', '<mov~~edi, dword ptr [rsp + 0x11c]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xe4], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<jne~~0x403d94>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x21c]>', '<mov~~edi, dword ptr [rsp + 0x2d0]>', '<mov~~r8, qword ptr [rsp + 0x2f0]>', '<mov~~r9b, byte ptr [rsp + 0x327]>', '<mov~~rsi, qword ptr [rsp + 0x330]>', '<mov~~r10, qword ptr [rsp + 0x328]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x1b0], r10>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~r10d, 0x40>', '<sub~~r10d, esi>', '<mov~~r10d, r10d>', '<mov~~qword ptr [rsp + 0x1c0], r10>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~esi, 0x80>', '<test~~r9b, 1>', '<mov~~qword ptr [rsp + 0x1d0], r8>', '<mov~~dword ptr [rsp + 0x1d8], edi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1f4], esi>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jne~~0x403ae2>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~rdx, qword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~rdi, qword ptr [rsp + 0x398]>', '<mov~~r10b, byte ptr [rsp + 0x46b]>', '<mov~~r11d, dword ptr [rsp + 0x46c]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x384], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x388], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<jl~~0x403437>']}], 'cfg_edge_info': [(55, 57), (43, 46), (18, 26), (46, 48), (82, 47), (9, 8), (79, 60), (2, 2), (34, 37), (28, 21), (11, 14), (13, 17), (7, 10), (72, 75), (16, 22), (22, 28), (57, 59), (20, 15), (27, 8), (66, 46), (9, 12), (68, 70), (78, 47), (30, 34), (33, 33), (78, 65), (59, 61), (39, 30), (29, 29), (5, 7), (38, 41), (63, 40), (75, 78), (44, 8), (1, 3), (35, 14), (81, 75), (55, 56), (12, 15), (60, 64), (46, 47), (72, 47), (79, 62), (36, 36), (45, 48), (56, 57), (58, 60), (3, 5), (10, 10), (13, 18), (24, 18), (7, 11), (64, 63), (16, 23), (25, 35), (66, 45), (69, 71), (40, 44), (17, 18), (37, 39), (30, 33), (6, 8), (15, 20), (20, 16), (43, 45), (5, 6), (18, 25), (29, 28), (38, 40), (70, 72), (23, 30), (80, 82), (81, 47), (1, 2), (28, 20), (34, 36), (65, 69), (47, 51), (21, 8), (60, 63), (2, 3), (45, 47), (82, 75), (41, 43), (58, 59), (51, 53), (12, 16), (22, 29), (62, 47), (17, 24), (36, 37), (56, 58), (35, 38), (26, 35), (0, 1), (14, 27), (63, 66), (33, 34), (59, 62), (69, 72), (70, 71), (37, 22), (10, 13), (75, 79), (6, 9), (24, 24)], 'cdg_edge_info': [(43, 46), (18, 26), (7, 35), (46, 48), (82, 47), (38, 44), (2, 2), (35, 8), (13, 17), (7, 10), (20, 22), (66, 46), (82, 51), (9, 12), (78, 47), (45, 53), (7, 14), (33, 33), (55, 63), (29, 29), (5, 7), (12, 22), (38, 41), (63, 40), (37, 30), (75, 78), (35, 14), (55, 56), (59, 63), (20, 28), (46, 47), (38, 43), (36, 36), (78, 51), (45, 48), (63, 8), (16, 30), (10, 10), (78, 53), (37, 37), (7, 11), (16, 23), (66, 45), (46, 51), (12, 28), (82, 53), (30, 33), (20, 16), (43, 45), (5, 6), (18, 25), (38, 40), (16, 37), (28, 20), (34, 36), (56, 63), (7, 18), (7, 27), (63, 44), (48, 55), (37, 34), (45, 47), (38, 8), (82, 75), (35, 27), (58, 59), (12, 16), (22, 29), (79, 63), (17, 24), (56, 58), (7, 13), (35, 38), (16, 34), (46, 53), (45, 51), (63, 66), (58, 63), (5, 8), (75, 79), (6, 9), (7, 8), (24, 24)], 'ddg_edge_info': [(18, 26), (70, 64), (18, 35), (2, 48), (3, 13), (70, 82), (59, 82), (46, 48), (82, 47), (3, 22), (34, 37), (2, 66), (0, 14), (26, 14), (7, 10), (13, 26), (70, 48), (16, 22), (3, 6), (0, 53), (38, 46), (3, 24), (12, 36), (0, 16), (3, 33), (82, 79), (0, 37), (28, 53), (66, 46), (12, 20), (3, 17), (38, 48), (9, 12), (0, 9), (63, 47), (3, 26), (12, 29), (64, 48), (78, 47), (30, 34), (64, 66), (59, 70), (66, 48), (3, 10), (5, 7), (38, 41), (0, 2), (6, 36), (0, 66), (75, 69), (37, 30), (26, 48), (3, 28), (75, 78), (3, 37), (26, 66), (69, 46), (55, 56), (70, 63), (0, 41), (2, 38), (9, 53), (17, 66), (2, 47), (20, 28), (6, 29), (3, 12), (26, 41), (46, 47), (12, 33), (3, 30), (10, 17), (33, 28), (70, 47), (55, 58), (0, 34), (75, 46), (3, 5), (3, 14), (75, 64), (58, 78), (3, 23), (75, 82), (2, 6), (18, 66), (64, 63), (16, 23), (27, 53), (14, 53), (3, 53), (75, 48), (3, 7), (41, 46), (6, 33), (3, 16), (40, 44), (23, 37), (24, 66), (64, 47), (79, 66), (0, 20), (30, 33), (0, 38), (2, 35), (20, 16), (41, 48), (69, 64), (29, 28), (3, 9), (26, 38), (3, 18), (44, 53), (23, 30), (26, 47), (69, 82), (41, 66), (64, 40), (28, 20), (34, 36), (47, 51), (2, 28), (69, 48), (3, 66), (78, 69), (6, 28), (26, 40), (75, 70), (0, 6), (55, 48), (82, 75), (30, 37), (9, 36), (6, 12), (58, 59), (51, 53), (75, 63), (22, 29), (36, 28), (63, 46), (2, 5), (17, 24), (10, 18), (36, 37), (40, 53), (2, 14), (3, 34), (9, 29), (0, 26), (56, 58), (75, 47), (26, 35), (69, 70), (70, 69), (58, 79), (10, 66), (64, 46), (14, 27), (63, 48), (6, 53), (17, 35), (3, 36), (63, 66), (33, 34), (41, 47), (58, 63), (69, 63), (78, 75), (26, 46), (2, 46), (3, 20), (0, 3), (37, 22), (10, 13), (0, 12), (3, 29), (75, 79), (9, 33), (69, 47), (70, 46)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x598(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x558(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 99, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 200, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 201, 'instruction': 'je\t.LBB3_26'}, {'instIndex': 203, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 204, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 205, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 206, 'instruction': 'movb\t$0, %al'}, {'instIndex': 207, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/Os/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/Os/utvideodec.s---decode_plane---after
function id: 3
function flag: True
There are 911 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x4f8(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 179, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 180, 'instruction': 'je\t.LBB3_20'}, {'instIndex': 182, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 183, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 184, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 185, 'instruction': 'movb\t$0, %al'}, {'instIndex': 186, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/Os/utvideodec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/Os/utvideodec.o---after
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 517 nodes and 905 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 911 instructions in binary file.
[4201834, 4202277, 4202866, 4202875]
The execution time of patched subCFG information extraction via angr: 0:00:02.035553
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401d6a>, <DisassemblerInsn "push" for 0x401d6b>, <DisassemblerInsn "push" for 0x401d6d>, <DisassemblerInsn "sub" for 0x401d6e>, <DisassemblerInsn "mov" for 0x401d75>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8c>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d96>, <DisassemblerInsn "mov" for 0x401d9e>, <DisassemblerInsn "mov" for 0x401da5>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db4>, <DisassemblerInsn "mov" for 0x401dbc>, <DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "lea" for 0x401dca>, <DisassemblerInsn "mov" for 0x401dd2>, <DisassemblerInsn "mov" for 0x401dd5>, <DisassemblerInsn "add" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401ddc>, <DisassemblerInsn "mov" for 0x401de4>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "or" for 0x401def>, <DisassemblerInsn "cmp" for 0x401df2>, <DisassemblerInsn "sete" for 0x401df6>, <DisassemblerInsn "mov" for 0x401df9>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "cmp" for 0x401e03>, <DisassemblerInsn "cmove" for 0x401e07>, <DisassemblerInsn "and" for 0x401e0a>, <DisassemblerInsn "movzx" for 0x401e0d>, <DisassemblerInsn "cmp" for 0x401e10>, <DisassemblerInsn "cmove" for 0x401e13>, <DisassemblerInsn "mov" for 0x401e16>, <DisassemblerInsn "lea" for 0x401e1d>, <DisassemblerInsn "mov" for 0x401e25>, <DisassemblerInsn "lea" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "lea" for 0x401e3d>, <DisassemblerInsn "mov" for 0x401e45>, <DisassemblerInsn "lea" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "xor" for 0x401e5d>, <DisassemblerInsn "mov" for 0x401e5f>, <DisassemblerInsn "mov" for 0x401e67>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "add" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e91>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "add" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea6>, <DisassemblerInsn "cmp" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebd>, <DisassemblerInsn "jne" for 0x401ec5>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402199>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "jmp" for 0x4021a5>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "mov" for 0x4020f3>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "movzx" for 0x402121>, <DisassemblerInsn "add" for 0x402125>, <DisassemblerInsn "lea" for 0x402128>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402140>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "mov" for 0x402150>, <DisassemblerInsn "mov" for 0x402155>, <DisassemblerInsn "mov" for 0x40215d>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "call" for 0x40216d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402466>, <DisassemblerInsn "mov" for 0x40246e>, <DisassemblerInsn "add" for 0x402476>, <DisassemblerInsn "mov" for 0x40247d>, <DisassemblerInsn "mov" for 0x402485>, <DisassemblerInsn "add" for 0x402488>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x402497>, <DisassemblerInsn "cmp" for 0x40249e>, <DisassemblerInsn "jle" for 0x4024a1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec7>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "xor" for 0x401ed6>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "call" for 0x401ef1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0c>, <DisassemblerInsn "mov" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f18>, <DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "jbe" for 0x401f23>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "add" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e91>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "add" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea6>, <DisassemblerInsn "cmp" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebd>, <DisassemblerInsn "jne" for 0x401ec5>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402172>, <DisassemblerInsn "je" for 0x402175>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40217b>, <DisassemblerInsn "mov" for 0x402183>, <DisassemblerInsn "mov" for 0x402186>, <DisassemblerInsn "lea" for 0x40218b>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "call" for 0x402194>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f25>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "movzx" for 0x402121>, <DisassemblerInsn "add" for 0x402125>, <DisassemblerInsn "lea" for 0x402128>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402140>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "mov" for 0x402150>, <DisassemblerInsn "mov" for 0x402155>, <DisassemblerInsn "mov" for 0x40215d>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "call" for 0x40216d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1310>', '<mov~~dword ptr [rsp + 0x47c], r9d>', '<mov~~qword ptr [rsp + 0x480], r8>', '<mov~~dword ptr [rsp + 0x48c], ecx>', '<mov~~qword ptr [rsp + 0x490], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x498], rdi>', '<mov~~eax, dword ptr [rsp + 0x1340]>', '<mov~~dword ptr [rsp + 0x4a4], eax>', '<mov~~rax, qword ptr [rsp + 0x1338]>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~edx, dword ptr [rsp + 0x1330]>', '<mov~~dword ptr [rsp + 0x4b4], edx>', '<lea~~rdx, [rsp + 0x4f8]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x4b8], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb10]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x710]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x610]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x510]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb10], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x468], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb12], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401e6f>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jmp~~0x4031ba>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3fe]>', '<mov~~byte ptr [rsp + 0x3ff], al>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x43c]>', '<mov~~sil, byte ptr [rsp + 0x3ff]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4f8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x4a8]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x368], eax>', '<cmp~~eax, 0>', '<jle~~0x40316a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c8]>', '<mov~~eax, dword ptr [rsp + 0x4c4]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x460], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe16f]>', '<call~~0x500068>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x467]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x458], rax>', '<jbe~~0x401f2a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb10], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x468], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb12], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401e6f>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x402466>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x49ec]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40217b>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x43c]>', '<mov~~sil, byte ptr [rsp + 0x3ff]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4f8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}], 'cfg_edge_info': [(0, 1), (12, 17), (20, 24), (24, 27), (9, 12), (0, 2), (24, 12), (21, 24), (5, 9)]}]}
{'decode_plane': [4201834, 4202277, 4202866, 4202875]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_after/Os/utvideodec.o---after
The extraction of function: decode_plane
[4201834, 4202277, 4202866, 4202875]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 77 nodes and 127 edges in CFGEmulated.
It has 75 nodes and 140 edges in CDG.
It has 3993 nodes and 4996 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201834, 4202277, 4202866, 4202875]
{4204289, 4206978, 4202501, 4205829, 4203271, 4203402, 4204427, 4202252, 4204172, 4203920, 4204561, 4205456, 4202389, 4203544, 4202905, 4207009, 4202277, 4203173, 4203687, 4206120, 4202282, 4202922, 4205997, 4207022, 4205614, 4205748, 4204085, 4206774, 4207034, 4206397, 4204223, 4205377, 4203331, 4202183, 4204360, 4202705, 4204885, 4206551, 4206808, 4203097, 4203622, 4205287, 4205160, 4201834, 4206954, 4202732, 4204651, 4202988, 4202095, 4206703, 4205039, 4202866, 4202230, 4206967, 4206198, 4202746, 4202875, 4202365}
[44, 54, 50, 9, 41, 17, 10, 67, 69, 72, 51, 32, 20, 74, 64, 49, 39, 15, 66, 55, 25, 52, 14, 19, 4, 2, 24, 34, 30, 11, 23, 75, 56, 1, 13, 0, 63, 38, 60, 57, 62, 58, 31, 29, 28, 21, 12, 73, 53, 6, 70, 71, 22, 37, 46, 59, 48, 7, 40, 5, 16, 65, 33, 68, 36, 8]
The execution time of patched slicing information extraction via angr: 0:00:07.040356
{'decode_plane': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4031a1>, <DisassemblerInsn "call" for 0x4031a9>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a63>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028ca>, <DisassemblerInsn "mov" for 0x4028d1>, <DisassemblerInsn "mov" for 0x4028d8>, <DisassemblerInsn "mov" for 0x4028e0>, <DisassemblerInsn "mov" for 0x4028e7>, <DisassemblerInsn "mov" for 0x4028ef>, <DisassemblerInsn "mov" for 0x4028f7>, <DisassemblerInsn "mov" for 0x4028ff>, <DisassemblerInsn "mov" for 0x402907>, <DisassemblerInsn "mov" for 0x40290f>, <DisassemblerInsn "mov" for 0x402917>, <DisassemblerInsn "mov" for 0x40291f>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "cmp" for 0x402936>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "mov" for 0x40293f>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "jge" for 0x40294f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "sub" for 0x401f48>, <DisassemblerInsn "mov" for 0x401f4b>, <DisassemblerInsn "sete" for 0x401f52>, <DisassemblerInsn "test" for 0x401f55>, <DisassemblerInsn "setne" for 0x401f58>, <DisassemblerInsn "and" for 0x401f5b>, <DisassemblerInsn "mov" for 0x401f5d>, <DisassemblerInsn "add" for 0x401f64>, <DisassemblerInsn "mov" for 0x401f68>, <DisassemblerInsn "test" for 0x401f70>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "jne" for 0x401f7b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402701>, <DisassemblerInsn "mov" for 0x402708>, <DisassemblerInsn "mov" for 0x402710>, <DisassemblerInsn "mov" for 0x402717>, <DisassemblerInsn "mov" for 0x40271f>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "movsxd" for 0x402729>, <DisassemblerInsn "add" for 0x40272c>, <DisassemblerInsn "shl" for 0x40272f>, <DisassemblerInsn "movsxd" for 0x402732>, <DisassemblerInsn "add" for 0x402735>, <DisassemblerInsn "movsxd" for 0x402738>, <DisassemblerInsn "mov" for 0x40273b>, <DisassemblerInsn "call" for 0x402743>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020d1>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "cmp" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e3>, <DisassemblerInsn "jb" for 0x4020ea>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f25>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f0f>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "mov" for 0x402f17>, <DisassemblerInsn "mov" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f20>, <DisassemblerInsn "lea" for 0x402f25>, <DisassemblerInsn "cmp" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "jl" for 0x402f37>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbb>, <DisassemblerInsn "mov" for 0x402cc3>, <DisassemblerInsn "mov" for 0x402ccb>, <DisassemblerInsn "bswap" for 0x402ccd>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "sub" for 0x402cd6>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "shl" for 0x402cda>, <DisassemblerInsn "mov" for 0x402cdd>, <DisassemblerInsn "or" for 0x402ce4>, <DisassemblerInsn "add" for 0x402ce7>, <DisassemblerInsn "add" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cee>, <DisassemblerInsn "mov" for 0x402cf6>, <DisassemblerInsn "mov" for 0x402cfd>, <DisassemblerInsn "mov" for 0x402d05>, <DisassemblerInsn "mov" for 0x402d0d>, <DisassemblerInsn "mov" for 0x402d15>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d2b>, <DisassemblerInsn "mov" for 0x402d33>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "add" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "mov" for 0x402d4f>, <DisassemblerInsn "shr" for 0x402d52>, <DisassemblerInsn "mov" for 0x402d55>, <DisassemblerInsn "add" for 0x402d58>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "mov" for 0x402d5d>, <DisassemblerInsn "mov" for 0x402d60>, <DisassemblerInsn "movsx" for 0x402d66>, <DisassemblerInsn "mov" for 0x402d6a>, <DisassemblerInsn "movsx" for 0x402d71>, <DisassemblerInsn "mov" for 0x402d76>, <DisassemblerInsn "cmp" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d82>, <DisassemblerInsn "mov" for 0x402d8a>, <DisassemblerInsn "mov" for 0x402d91>, <DisassemblerInsn "mov" for 0x402d99>, <DisassemblerInsn "mov" for 0x402da0>, <DisassemblerInsn "jge" for 0x402da7>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dad>, <DisassemblerInsn "mov" for 0x402db5>, <DisassemblerInsn "mov" for 0x402dbd>, <DisassemblerInsn "mov" for 0x402dc4>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "mov" for 0x402dd3>, <DisassemblerInsn "shl" for 0x402dda>, <DisassemblerInsn "mov" for 0x402ddd>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "add" for 0x402de9>, <DisassemblerInsn "mov" for 0x402deb>, <DisassemblerInsn "neg" for 0x402df2>, <DisassemblerInsn "mov" for 0x402df4>, <DisassemblerInsn "sub" for 0x402df6>, <DisassemblerInsn "setb" for 0x402df8>, <DisassemblerInsn "mov" for 0x402dfc>, <DisassemblerInsn "sub" for 0x402dff>, <DisassemblerInsn "setb" for 0x402e02>, <DisassemblerInsn "and" for 0x402e06>, <DisassemblerInsn "test" for 0x402e09>, <DisassemblerInsn "mov" for 0x402e0d>, <DisassemblerInsn "mov" for 0x402e15>, <DisassemblerInsn "mov" for 0x402e1c>, <DisassemblerInsn "jne" for 0x402e24>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40286b>, <DisassemblerInsn "mov" for 0x402873>, <DisassemblerInsn "mov" for 0x40287a>, <DisassemblerInsn "shl" for 0x40287d>, <DisassemblerInsn "mov" for 0x402881>, <DisassemblerInsn "mov" for 0x402883>, <DisassemblerInsn "add" for 0x402886>, <DisassemblerInsn "mov" for 0x402889>, <DisassemblerInsn "bswap" for 0x40288c>, <DisassemblerInsn "mov" for 0x40288f>, <DisassemblerInsn "add" for 0x402892>, <DisassemblerInsn "mov" for 0x402896>, <DisassemblerInsn "mov" for 0x40289b>, <DisassemblerInsn "mov" for 0x4028a3>, <DisassemblerInsn "mov" for 0x4028aa>, <DisassemblerInsn "mov" for 0x4028b2>, <DisassemblerInsn "mov" for 0x4028ba>, <DisassemblerInsn "mov" for 0x4028c2>, <DisassemblerInsn "mov" for 0x4028ca>, <DisassemblerInsn "mov" for 0x4028d1>, <DisassemblerInsn "mov" for 0x4028d8>, <DisassemblerInsn "mov" for 0x4028e0>, <DisassemblerInsn "mov" for 0x4028e7>, <DisassemblerInsn "mov" for 0x4028ef>, <DisassemblerInsn "mov" for 0x4028f7>, <DisassemblerInsn "mov" for 0x4028ff>, <DisassemblerInsn "mov" for 0x402907>, <DisassemblerInsn "mov" for 0x40290f>, <DisassemblerInsn "mov" for 0x402917>, <DisassemblerInsn "mov" for 0x40291f>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "cmp" for 0x402936>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "mov" for 0x40293f>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "jge" for 0x40294f>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402466>, <DisassemblerInsn "mov" for 0x40246e>, <DisassemblerInsn "add" for 0x402476>, <DisassemblerInsn "mov" for 0x40247d>, <DisassemblerInsn "mov" for 0x402485>, <DisassemblerInsn "add" for 0x402488>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x402497>, <DisassemblerInsn "cmp" for 0x40249e>, <DisassemblerInsn "jle" for 0x4024a1>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40238a>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "mov" for 0x40239a>, <DisassemblerInsn "mov" for 0x4023a2>, <DisassemblerInsn "mov" for 0x4023aa>, <DisassemblerInsn "mov" for 0x4023b2>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "mov" for 0x4023c2>, <DisassemblerInsn "add" for 0x4023c5>, <DisassemblerInsn "mov" for 0x4023c8>, <DisassemblerInsn "test" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d3>, <DisassemblerInsn "cmovne" for 0x4023d6>, <DisassemblerInsn "mov" for 0x4023da>, <DisassemblerInsn "test" for 0x4023e2>, <DisassemblerInsn "cmovne" for 0x4023e6>, <DisassemblerInsn "mov" for 0x4023ea>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "add" for 0x4023f5>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "cmp" for 0x402400>, <DisassemblerInsn "mov" for 0x402403>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "jl" for 0x402412>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e28>, <DisassemblerInsn "mov" for 0x402e2f>, <DisassemblerInsn "mov" for 0x402e37>, <DisassemblerInsn "mov" for 0x402e3c>, <DisassemblerInsn "bswap" for 0x402e3e>, <DisassemblerInsn "mov" for 0x402e40>, <DisassemblerInsn "mov" for 0x402e42>, <DisassemblerInsn "sub" for 0x402e47>, <DisassemblerInsn "mov" for 0x402e49>, <DisassemblerInsn "shl" for 0x402e4b>, <DisassemblerInsn "mov" for 0x402e4e>, <DisassemblerInsn "or" for 0x402e55>, <DisassemblerInsn "add" for 0x402e58>, <DisassemblerInsn "add" for 0x402e5c>, <DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "mov" for 0x402e67>, <DisassemblerInsn "mov" for 0x402e6e>, <DisassemblerInsn "mov" for 0x402e76>, <DisassemblerInsn "mov" for 0x402e7e>, <DisassemblerInsn "mov" for 0x402e86>, <DisassemblerInsn "mov" for 0x402e8d>, <DisassemblerInsn "mov" for 0x402e95>, <DisassemblerInsn "mov" for 0x402e9c>, <DisassemblerInsn "add" for 0x402ea4>, <DisassemblerInsn "mov" for 0x402ea7>, <DisassemblerInsn "mov" for 0x402ea9>, <DisassemblerInsn "shr" for 0x402eac>, <DisassemblerInsn "mov" for 0x402eaf>, <DisassemblerInsn "add" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb5>, <DisassemblerInsn "mov" for 0x402eb7>, <DisassemblerInsn "movsx" for 0x402eba>, <DisassemblerInsn "movsx" for 0x402ec0>, <DisassemblerInsn "mov" for 0x402ec5>, <DisassemblerInsn "mov" for 0x402ecd>, <DisassemblerInsn "mov" for 0x402ed4>, <DisassemblerInsn "mov" for 0x402edc>, <DisassemblerInsn "mov" for 0x402ee3>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f0f>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "mov" for 0x402f17>, <DisassemblerInsn "mov" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f20>, <DisassemblerInsn "lea" for 0x402f25>, <DisassemblerInsn "cmp" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "jl" for 0x402f37>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b41>, <DisassemblerInsn "mov" for 0x402b48>, <DisassemblerInsn "mov" for 0x402b50>, <DisassemblerInsn "mov" for 0x402b58>, <DisassemblerInsn "bswap" for 0x402b5a>, <DisassemblerInsn "mov" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b5e>, <DisassemblerInsn "mov" for 0x402b60>, <DisassemblerInsn "sub" for 0x402b65>, <DisassemblerInsn "mov" for 0x402b67>, <DisassemblerInsn "shl" for 0x402b69>, <DisassemblerInsn "mov" for 0x402b6c>, <DisassemblerInsn "or" for 0x402b6f>, <DisassemblerInsn "add" for 0x402b72>, <DisassemblerInsn "add" for 0x402b76>, <DisassemblerInsn "mov" for 0x402b79>, <DisassemblerInsn "mov" for 0x402b81>, <DisassemblerInsn "mov" for 0x402b89>, <DisassemblerInsn "mov" for 0x402b90>, <DisassemblerInsn "mov" for 0x402b98>, <DisassemblerInsn "mov" for 0x402ba0>, <DisassemblerInsn "mov" for 0x402ba8>, <DisassemblerInsn "mov" for 0x402baf>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "mov" for 0x402bbe>, <DisassemblerInsn "mov" for 0x402bc6>, <DisassemblerInsn "shr" for 0x402bc9>, <DisassemblerInsn "mov" for 0x402bcc>, <DisassemblerInsn "movabs" for 0x402bd4>, <DisassemblerInsn "and" for 0x402bde>, <DisassemblerInsn "movsx" for 0x402be1>, <DisassemblerInsn "mov" for 0x402be6>, <DisassemblerInsn "mov" for 0x402bed>, <DisassemblerInsn "movsx" for 0x402bf3>, <DisassemblerInsn "mov" for 0x402bf7>, <DisassemblerInsn "cmp" for 0x402bfe>, <DisassemblerInsn "mov" for 0x402c03>, <DisassemblerInsn "mov" for 0x402c0b>, <DisassemblerInsn "mov" for 0x402c12>, <DisassemblerInsn "mov" for 0x402c1a>, <DisassemblerInsn "mov" for 0x402c21>, <DisassemblerInsn "jge" for 0x402c28>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402811>, <DisassemblerInsn "mov" for 0x402819>, <DisassemblerInsn "mov" for 0x402821>, <DisassemblerInsn "mov" for 0x402828>, <DisassemblerInsn "xor" for 0x402830>, <DisassemblerInsn "xor" for 0x402832>, <DisassemblerInsn "cmp" for 0x402834>, <DisassemblerInsn "mov" for 0x402838>, <DisassemblerInsn "mov" for 0x40283f>, <DisassemblerInsn "mov" for 0x402846>, <DisassemblerInsn "mov" for 0x402849>, <DisassemblerInsn "mov" for 0x402851>, <DisassemblerInsn "mov" for 0x402859>, <DisassemblerInsn "mov" for 0x402861>, <DisassemblerInsn "je" for 0x402869>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40268c>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "shl" for 0x40269c>, <DisassemblerInsn "movabs" for 0x4026a0>, <DisassemblerInsn "and" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b0>, <DisassemblerInsn "mov" for 0x4026b8>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "mov" for 0x4026c7>, <DisassemblerInsn "mov" for 0x4026cf>, <DisassemblerInsn "mov" for 0x4026d6>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "sub" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e2>, <DisassemblerInsn "lea" for 0x4026e9>, <DisassemblerInsn "cmp" for 0x4026f0>, <DisassemblerInsn "mov" for 0x4026f3>, <DisassemblerInsn "je" for 0x4026fb>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40226a>, <DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "xor" for 0x40227f>, <DisassemblerInsn "cmp" for 0x402281>, <DisassemblerInsn "mov" for 0x402283>, <DisassemblerInsn "mov" for 0x40228a>, <DisassemblerInsn "mov" for 0x402291>, <DisassemblerInsn "mov" for 0x402298>, <DisassemblerInsn "jge" for 0x40229f>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c2e>, <DisassemblerInsn "mov" for 0x402c36>, <DisassemblerInsn "mov" for 0x402c3e>, <DisassemblerInsn "mov" for 0x402c45>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "shl" for 0x402c5c>, <DisassemblerInsn "mov" for 0x402c5f>, <DisassemblerInsn "mov" for 0x402c66>, <DisassemblerInsn "sub" for 0x402c6e>, <DisassemblerInsn "mov" for 0x402c70>, <DisassemblerInsn "neg" for 0x402c77>, <DisassemblerInsn "mov" for 0x402c79>, <DisassemblerInsn "mov" for 0x402c80>, <DisassemblerInsn "sub" for 0x402c82>, <DisassemblerInsn "setb" for 0x402c84>, <DisassemblerInsn "mov" for 0x402c88>, <DisassemblerInsn "sub" for 0x402c8b>, <DisassemblerInsn "setb" for 0x402c8e>, <DisassemblerInsn "and" for 0x402c92>, <DisassemblerInsn "test" for 0x402c95>, <DisassemblerInsn "mov" for 0x402c99>, <DisassemblerInsn "mov" for 0x402ca1>, <DisassemblerInsn "mov" for 0x402ca8>, <DisassemblerInsn "jne" for 0x402cb0>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "mov" for 0x402a6f>, <DisassemblerInsn "mov" for 0x402a77>, <DisassemblerInsn "mov" for 0x402a7f>, <DisassemblerInsn "mov" for 0x402a87>, <DisassemblerInsn "mov" for 0x402a8f>, <DisassemblerInsn "mov" for 0x402a97>, <DisassemblerInsn "mov" for 0x402a9e>, <DisassemblerInsn "mov" for 0x402aa5>, <DisassemblerInsn "mov" for 0x402aad>, <DisassemblerInsn "mov" for 0x402ab5>, <DisassemblerInsn "mov" for 0x402abd>, <DisassemblerInsn "sub" for 0x402ac5>, <DisassemblerInsn "shl" for 0x402ac8>, <DisassemblerInsn "add" for 0x402acb>, <DisassemblerInsn "add" for 0x402acd>, <DisassemblerInsn "lea" for 0x402acf>, <DisassemblerInsn "cmp" for 0x402ad6>, <DisassemblerInsn "mov" for 0x402ad9>, <DisassemblerInsn "jl" for 0x402ae1>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402418>, <DisassemblerInsn "mov" for 0x40241f>, <DisassemblerInsn "mov" for 0x402426>, <DisassemblerInsn "mov" for 0x40242e>, <DisassemblerInsn "mov" for 0x402436>, <DisassemblerInsn "add" for 0x40243d>, <DisassemblerInsn "add" for 0x402440>, <DisassemblerInsn "cmp" for 0x402443>, <DisassemblerInsn "mov" for 0x402445>, <DisassemblerInsn "mov" for 0x40244d>, <DisassemblerInsn "mov" for 0x402454>, <DisassemblerInsn "je" for 0x40245b>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402955>, <DisassemblerInsn "mov" for 0x40295c>, <DisassemblerInsn "mov" for 0x402964>, <DisassemblerInsn "mov" for 0x40296c>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x40297b>, <DisassemblerInsn "mov" for 0x402983>, <DisassemblerInsn "mov" for 0x40298b>, <DisassemblerInsn "mov" for 0x40298e>, <DisassemblerInsn "mov" for 0x402996>, <DisassemblerInsn "mov" for 0x402998>, <DisassemblerInsn "mov" for 0x40299f>, <DisassemblerInsn "sub" for 0x4029a5>, <DisassemblerInsn "mov" for 0x4029a8>, <DisassemblerInsn "mov" for 0x4029ab>, <DisassemblerInsn "mov" for 0x4029b3>, <DisassemblerInsn "mov" for 0x4029b5>, <DisassemblerInsn "mov" for 0x4029bd>, <DisassemblerInsn "mov" for 0x4029c2>, <DisassemblerInsn "mov" for 0x4029ca>, <DisassemblerInsn "mov" for 0x4029d1>, <DisassemblerInsn "mov" for 0x4029d8>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "mov" for 0x4029e8>, <DisassemblerInsn "mov" for 0x4029ef>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "mov" for 0x402a07>, <DisassemblerInsn "mov" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1e>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2d>, <DisassemblerInsn "xor" for 0x402a35>, <DisassemblerInsn "test" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a43>, <DisassemblerInsn "mov" for 0x402a4a>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "jne" for 0x402a61>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "mov" for 0x40230e>, <DisassemblerInsn "mov" for 0x402316>, <DisassemblerInsn "movsxd" for 0x40231e>, <DisassemblerInsn "imul" for 0x402321>, <DisassemblerInsn "add" for 0x402325>, <DisassemblerInsn "mov" for 0x402328>, <DisassemblerInsn "mov" for 0x40232d>, <DisassemblerInsn "mov" for 0x402335>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x402352>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x402360>, <DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "xor" for 0x40236f>, <DisassemblerInsn "test" for 0x402371>, <DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "mov" for 0x40237c>, <DisassemblerInsn "jne" for 0x402383>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402385>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "cmp" for 0x401f04>, <DisassemblerInsn "je" for 0x401f06>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec7>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "xor" for 0x401ed6>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "call" for 0x401ef1>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402199>, <DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "jmp" for 0x4021a5>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024ae>, <DisassemblerInsn "mov" for 0x4024b6>, <DisassemblerInsn "mov" for 0x4024bd>, <DisassemblerInsn "mov" for 0x4024c5>, <DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d4>, <DisassemblerInsn "mov" for 0x4024dc>, <DisassemblerInsn "add" for 0x4024df>, <DisassemblerInsn "mov" for 0x4024e6>, <DisassemblerInsn "add" for 0x4024ee>, <DisassemblerInsn "mov" for 0x4024f2>, <DisassemblerInsn "mov" for 0x4024fa>, <DisassemblerInsn "imul" for 0x402502>, <DisassemblerInsn "cmp" for 0x402505>, <DisassemblerInsn "setg" for 0x402508>, <DisassemblerInsn "mov" for 0x40250c>, <DisassemblerInsn "lea" for 0x402514>, <DisassemblerInsn "add" for 0x40251c>, <DisassemblerInsn "mov" for 0x402520>, <DisassemblerInsn "lea" for 0x402528>, <DisassemblerInsn "mov" for 0x402530>, <DisassemblerInsn "cmp" for 0x402538>, <DisassemblerInsn "sete" for 0x40253c>, <DisassemblerInsn "mov" for 0x402540>, <DisassemblerInsn "mov" for 0x402548>, <DisassemblerInsn "movsxd" for 0x402550>, <DisassemblerInsn "mov" for 0x402553>, <DisassemblerInsn "movsxd" for 0x40255b>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "add" for 0x402566>, <DisassemblerInsn "mov" for 0x40256c>, <DisassemblerInsn "xor" for 0x402574>, <DisassemblerInsn "mov" for 0x402576>, <DisassemblerInsn "xor" for 0x402578>, <DisassemblerInsn "mov" for 0x40257a>, <DisassemblerInsn "mov" for 0x402582>, <DisassemblerInsn "mov" for 0x402589>, <DisassemblerInsn "mov" for 0x402590>, <DisassemblerInsn "mov" for 0x402598>, <DisassemblerInsn "mov" for 0x4025a0>, <DisassemblerInsn "mov" for 0x4025a7>, <DisassemblerInsn "mov" for 0x4025af>, <DisassemblerInsn "mov" for 0x4025b6>, <DisassemblerInsn "mov" for 0x4025bd>, <DisassemblerInsn "mov" for 0x4025c5>, <DisassemblerInsn "mov" for 0x4025cd>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e4>, <DisassemblerInsn "mov" for 0x4025ec>, <DisassemblerInsn "mov" for 0x4025f4>, <DisassemblerInsn "mov" for 0x4025fb>, <DisassemblerInsn "mov" for 0x402603>, <DisassemblerInsn "mov" for 0x40260b>, <DisassemblerInsn "mov" for 0x402613>, <DisassemblerInsn "mov" for 0x40261b>, <DisassemblerInsn "mov" for 0x402622>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "add" for 0x402631>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402172>, <DisassemblerInsn "je" for 0x402175>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a5>, <DisassemblerInsn "mov" for 0x4022ac>, <DisassemblerInsn "mov" for 0x4022b3>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "mov" for 0x4022c8>, <DisassemblerInsn "mov" for 0x4022cf>, <DisassemblerInsn "add" for 0x4022d6>, <DisassemblerInsn "mov" for 0x4022d9>, <DisassemblerInsn "imul" for 0x4022e0>, <DisassemblerInsn "cdq" for 0x4022e3>, <DisassemblerInsn "idiv" for 0x4022e4>, <DisassemblerInsn "mov" for 0x4022e6>, <DisassemblerInsn "mov" for 0x4022e8>, <DisassemblerInsn "and" for 0x4022ef>, <DisassemblerInsn "mov" for 0x4022f1>, <DisassemblerInsn "cmp" for 0x4022f8>, <DisassemblerInsn "mov" for 0x4022fa>, <DisassemblerInsn "jge" for 0x402301>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "mov" for 0x4020f3>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "movzx" for 0x402121>, <DisassemblerInsn "add" for 0x402125>, <DisassemblerInsn "lea" for 0x402128>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402140>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "mov" for 0x402150>, <DisassemblerInsn "mov" for 0x402155>, <DisassemblerInsn "mov" for 0x40215d>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "call" for 0x40216d>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e76>, <DisassemblerInsn "mov" for 0x402e7e>, <DisassemblerInsn "mov" for 0x402e86>, <DisassemblerInsn "mov" for 0x402e8d>, <DisassemblerInsn "mov" for 0x402e95>, <DisassemblerInsn "mov" for 0x402e9c>, <DisassemblerInsn "add" for 0x402ea4>, <DisassemblerInsn "mov" for 0x402ea7>, <DisassemblerInsn "mov" for 0x402ea9>, <DisassemblerInsn "shr" for 0x402eac>, <DisassemblerInsn "mov" for 0x402eaf>, <DisassemblerInsn "add" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb5>, <DisassemblerInsn "mov" for 0x402eb7>, <DisassemblerInsn "movsx" for 0x402eba>, <DisassemblerInsn "movsx" for 0x402ec0>, <DisassemblerInsn "mov" for 0x402ec5>, <DisassemblerInsn "mov" for 0x402ecd>, <DisassemblerInsn "mov" for 0x402ed4>, <DisassemblerInsn "mov" for 0x402edc>, <DisassemblerInsn "mov" for 0x402ee3>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f08>, <DisassemblerInsn "mov" for 0x402f0f>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "mov" for 0x402f17>, <DisassemblerInsn "mov" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f20>, <DisassemblerInsn "lea" for 0x402f25>, <DisassemblerInsn "cmp" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "jl" for 0x402f37>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030d8>, <DisassemblerInsn "mov" for 0x4030df>, <DisassemblerInsn "mov" for 0x4030e3>, <DisassemblerInsn "mov" for 0x4030e8>, <DisassemblerInsn "mov" for 0x4030f0>, <DisassemblerInsn "mov" for 0x4030f8>, <DisassemblerInsn "mov" for 0x4030fd>, <DisassemblerInsn "mov" for 0x403105>, <DisassemblerInsn "mov" for 0x40310d>, <DisassemblerInsn "mov" for 0x403115>, <DisassemblerInsn "movsxd" for 0x403118>, <DisassemblerInsn "cmp" for 0x40311b>, <DisassemblerInsn "mov" for 0x40311e>, <DisassemblerInsn "mov" for 0x403126>, <DisassemblerInsn "mov" for 0x40312e>, <DisassemblerInsn "mov" for 0x403136>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403146>, <DisassemblerInsn "mov" for 0x40314e>, <DisassemblerInsn "mov" for 0x403156>, <DisassemblerInsn "mov" for 0x40315d>, <DisassemblerInsn "jl" for 0x403164>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "add" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e91>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "add" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea6>, <DisassemblerInsn "cmp" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebd>, <DisassemblerInsn "jne" for 0x401ec5>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40217b>, <DisassemblerInsn "mov" for 0x402183>, <DisassemblerInsn "mov" for 0x402186>, <DisassemblerInsn "lea" for 0x40218b>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "call" for 0x402194>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401d6a>, <DisassemblerInsn "push" for 0x401d6b>, <DisassemblerInsn "push" for 0x401d6d>, <DisassemblerInsn "sub" for 0x401d6e>, <DisassemblerInsn "mov" for 0x401d75>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8c>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d96>, <DisassemblerInsn "mov" for 0x401d9e>, <DisassemblerInsn "mov" for 0x401da5>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db4>, <DisassemblerInsn "mov" for 0x401dbc>, <DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "lea" for 0x401dca>, <DisassemblerInsn "mov" for 0x401dd2>, <DisassemblerInsn "mov" for 0x401dd5>, <DisassemblerInsn "add" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401ddc>, <DisassemblerInsn "mov" for 0x401de4>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "or" for 0x401def>, <DisassemblerInsn "cmp" for 0x401df2>, <DisassemblerInsn "sete" for 0x401df6>, <DisassemblerInsn "mov" for 0x401df9>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "cmp" for 0x401e03>, <DisassemblerInsn "cmove" for 0x401e07>, <DisassemblerInsn "and" for 0x401e0a>, <DisassemblerInsn "movzx" for 0x401e0d>, <DisassemblerInsn "cmp" for 0x401e10>, <DisassemblerInsn "cmove" for 0x401e13>, <DisassemblerInsn "mov" for 0x401e16>, <DisassemblerInsn "lea" for 0x401e1d>, <DisassemblerInsn "mov" for 0x401e25>, <DisassemblerInsn "lea" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "lea" for 0x401e3d>, <DisassemblerInsn "mov" for 0x401e45>, <DisassemblerInsn "lea" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "xor" for 0x401e5d>, <DisassemblerInsn "mov" for 0x401e5f>, <DisassemblerInsn "mov" for 0x401e67>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "mov" for 0x401e7f>, <DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "add" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e91>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "add" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea6>, <DisassemblerInsn "cmp" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebd>, <DisassemblerInsn "jne" for 0x401ec5>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402b3f>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "mov" for 0x4026c7>, <DisassemblerInsn "mov" for 0x4026cf>, <DisassemblerInsn "mov" for 0x4026d6>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "sub" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e2>, <DisassemblerInsn "lea" for 0x4026e9>, <DisassemblerInsn "cmp" for 0x4026f0>, <DisassemblerInsn "mov" for 0x4026f3>, <DisassemblerInsn "je" for 0x4026fb>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402590>, <DisassemblerInsn "mov" for 0x402598>, <DisassemblerInsn "mov" for 0x4025a0>, <DisassemblerInsn "mov" for 0x4025a7>, <DisassemblerInsn "mov" for 0x4025af>, <DisassemblerInsn "mov" for 0x4025b6>, <DisassemblerInsn "mov" for 0x4025bd>, <DisassemblerInsn "mov" for 0x4025c5>, <DisassemblerInsn "mov" for 0x4025cd>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e4>, <DisassemblerInsn "mov" for 0x4025ec>, <DisassemblerInsn "mov" for 0x4025f4>, <DisassemblerInsn "mov" for 0x4025fb>, <DisassemblerInsn "mov" for 0x402603>, <DisassemblerInsn "mov" for 0x40260b>, <DisassemblerInsn "mov" for 0x402613>, <DisassemblerInsn "mov" for 0x40261b>, <DisassemblerInsn "mov" for 0x402622>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "add" for 0x402631>, <DisassemblerInsn "mov" for 0x402635>, <DisassemblerInsn "imul" for 0x40263d>, <DisassemblerInsn "cdq" for 0x402640>, <DisassemblerInsn "idiv" for 0x402641>, <DisassemblerInsn "mov" for 0x402643>, <DisassemblerInsn "mov" for 0x40264b>, <DisassemblerInsn "mov" for 0x40264d>, <DisassemblerInsn "and" for 0x402655>, <DisassemblerInsn "mov" for 0x402658>, <DisassemblerInsn "movsxd" for 0x40265f>, <DisassemblerInsn "imul" for 0x402662>, <DisassemblerInsn "add" for 0x402666>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "xor" for 0x402671>, <DisassemblerInsn "mov" for 0x402673>, <DisassemblerInsn "xor" for 0x402675>, <DisassemblerInsn "cmp" for 0x402677>, <DisassemblerInsn "mov" for 0x40267b>, <DisassemblerInsn "mov" for 0x402683>, <DisassemblerInsn "je" for 0x40268a>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030b6>, <DisassemblerInsn "mov" for 0x4030ba>, <DisassemblerInsn "mov" for 0x4030c2>, <DisassemblerInsn "mov" for 0x4030c5>, <DisassemblerInsn "lea" for 0x4030ca>, <DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "call" for 0x4030d3>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029ef>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "mov" for 0x402a07>, <DisassemblerInsn "mov" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1e>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2d>, <DisassemblerInsn "xor" for 0x402a35>, <DisassemblerInsn "test" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a43>, <DisassemblerInsn "mov" for 0x402a4a>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "jne" for 0x402a61>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fd7>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffd>, <DisassemblerInsn "mov" for 0x403005>, <DisassemblerInsn "mov" for 0x40300d>, <DisassemblerInsn "add" for 0x403014>, <DisassemblerInsn "add" for 0x403017>, <DisassemblerInsn "cmp" for 0x40301a>, <DisassemblerInsn "mov" for 0x40301d>, <DisassemblerInsn "mov" for 0x403025>, <DisassemblerInsn "mov" for 0x40302c>, <DisassemblerInsn "mov" for 0x403033>, <DisassemblerInsn "mov" for 0x403036>, <DisassemblerInsn "mov" for 0x40303e>, <DisassemblerInsn "mov" for 0x403041>, <DisassemblerInsn "mov" for 0x403049>, <DisassemblerInsn "mov" for 0x40304b>, <DisassemblerInsn "mov" for 0x403052>, <DisassemblerInsn "mov" for 0x403059>, <DisassemblerInsn "mov" for 0x403061>, <DisassemblerInsn "jne" for 0x403069>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "mov" for 0x40234a>, <DisassemblerInsn "mov" for 0x402352>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x402360>, <DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "xor" for 0x40236f>, <DisassemblerInsn "test" for 0x402371>, <DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "mov" for 0x40237c>, <DisassemblerInsn "jne" for 0x402383>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402461>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402259>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "mov" for 0x402263>, <DisassemblerInsn "mov" for 0x40226a>, <DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "xor" for 0x40227f>, <DisassemblerInsn "cmp" for 0x402281>, <DisassemblerInsn "mov" for 0x402283>, <DisassemblerInsn "mov" for 0x40228a>, <DisassemblerInsn "mov" for 0x402291>, <DisassemblerInsn "mov" for 0x402298>, <DisassemblerInsn "jge" for 0x40229f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402005>, <DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402013>, <DisassemblerInsn "mov" for 0x40201b>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "add" for 0x402025>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "add" for 0x402031>, <DisassemblerInsn "mov" for 0x402034>, <DisassemblerInsn "mov" for 0x40203b>, <DisassemblerInsn "shr" for 0x402040>, <DisassemblerInsn "mov" for 0x402042>, <DisassemblerInsn "mov" for 0x402049>, <DisassemblerInsn "add" for 0x402050>, <DisassemblerInsn "mov" for 0x402052>, <DisassemblerInsn "mov" for 0x402059>, <DisassemblerInsn "movzx" for 0x402061>, <DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "mov" for 0x40206d>, <DisassemblerInsn "sub" for 0x402072>, <DisassemblerInsn "mov" for 0x402075>, <DisassemblerInsn "mov" for 0x40207c>, <DisassemblerInsn "shr" for 0x40207f>, <DisassemblerInsn "mov" for 0x402082>, <DisassemblerInsn "mov" for 0x402089>, <DisassemblerInsn "mov" for 0x402091>, <DisassemblerInsn "mov" for 0x402099>, <DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a9>, <DisassemblerInsn "cmp" for 0x4020b1>, <DisassemblerInsn "mov" for 0x4020b5>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "ja" for 0x4020cb>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7d>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "cmp" for 0x401f8c>, <DisassemblerInsn "jle" for 0x401f8f>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e26>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40306f>, <DisassemblerInsn "mov" for 0x403076>, <DisassemblerInsn "mov" for 0x40307e>, <DisassemblerInsn "mov" for 0x403085>, <DisassemblerInsn "mov" for 0x40308d>, <DisassemblerInsn "mov" for 0x403095>, <DisassemblerInsn "mov" for 0x40309a>, <DisassemblerInsn "mov" for 0x40309f>, <DisassemblerInsn "sub" for 0x4030a3>, <DisassemblerInsn "shl" for 0x4030a6>, <DisassemblerInsn "add" for 0x4030a9>, <DisassemblerInsn "add" for 0x4030ab>, <DisassemblerInsn "mov" for 0x4030ad>, <DisassemblerInsn "cmp" for 0x4030b1>, <DisassemblerInsn "jle" for 0x4030b4>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0c>, <DisassemblerInsn "mov" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f18>, <DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "jbe" for 0x401f23>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f3d>, <DisassemblerInsn "mov" for 0x402f45>, <DisassemblerInsn "mov" for 0x402f4d>, <DisassemblerInsn "mov" for 0x402f55>, <DisassemblerInsn "mov" for 0x402f5d>, <DisassemblerInsn "mov" for 0x402f64>, <DisassemblerInsn "mov" for 0x402f6c>, <DisassemblerInsn "mov" for 0x402f71>, <DisassemblerInsn "mov" for 0x402f76>, <DisassemblerInsn "mov" for 0x402f7a>, <DisassemblerInsn "sub" for 0x402f7e>, <DisassemblerInsn "mov" for 0x402f80>, <DisassemblerInsn "shl" for 0x402f82>, <DisassemblerInsn "mov" for 0x402f85>, <DisassemblerInsn "mov" for 0x402f8a>, <DisassemblerInsn "add" for 0x402f8d>, <DisassemblerInsn "test" for 0x402f8f>, <DisassemblerInsn "mov" for 0x402f93>, <DisassemblerInsn "cmovne" for 0x402f96>, <DisassemblerInsn "test" for 0x402f9a>, <DisassemblerInsn "cmovne" for 0x402f9e>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "add" for 0x402fa5>, <DisassemblerInsn "cmp" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fab>, <DisassemblerInsn "mov" for 0x402fb3>, <DisassemblerInsn "mov" for 0x402fba>, <DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fca>, <DisassemblerInsn "jl" for 0x402fd1>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d05>, <DisassemblerInsn "mov" for 0x402d0d>, <DisassemblerInsn "mov" for 0x402d15>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d2b>, <DisassemblerInsn "mov" for 0x402d33>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "add" for 0x402d4a>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "mov" for 0x402d4f>, <DisassemblerInsn "shr" for 0x402d52>, <DisassemblerInsn "mov" for 0x402d55>, <DisassemblerInsn "add" for 0x402d58>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "mov" for 0x402d5d>, <DisassemblerInsn "mov" for 0x402d60>, <DisassemblerInsn "movsx" for 0x402d66>, <DisassemblerInsn "mov" for 0x402d6a>, <DisassemblerInsn "movsx" for 0x402d71>, <DisassemblerInsn "mov" for 0x402d76>, <DisassemblerInsn "cmp" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d82>, <DisassemblerInsn "mov" for 0x402d8a>, <DisassemblerInsn "mov" for 0x402d91>, <DisassemblerInsn "mov" for 0x402d99>, <DisassemblerInsn "mov" for 0x402da0>, <DisassemblerInsn "jge" for 0x402da7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "movzx" for 0x402121>, <DisassemblerInsn "add" for 0x402125>, <DisassemblerInsn "lea" for 0x402128>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "xor" for 0x402136>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402140>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "mov" for 0x402150>, <DisassemblerInsn "mov" for 0x402155>, <DisassemblerInsn "mov" for 0x40215d>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "call" for 0x40216d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "xor" for 0x403177>, <DisassemblerInsn "mov" for 0x403179>, <DisassemblerInsn "jmp" for 0x403180>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031ae>, <DisassemblerInsn "mov" for 0x4031b3>, <DisassemblerInsn "mov" for 0x4031ba>, <DisassemblerInsn "add" for 0x4031c1>, <DisassemblerInsn "pop" for 0x4031c8>, <DisassemblerInsn "pop" for 0x4031c9>, <DisassemblerInsn "pop" for 0x4031cb>, <DisassemblerInsn "ret" for 0x4031cc>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ae7>, <DisassemblerInsn "mov" for 0x402aee>, <DisassemblerInsn "mov" for 0x402af6>, <DisassemblerInsn "mov" for 0x402afe>, <DisassemblerInsn "mov" for 0x402b06>, <DisassemblerInsn "mov" for 0x402b0d>, <DisassemblerInsn "sub" for 0x402b0f>, <DisassemblerInsn "setb" for 0x402b11>, <DisassemblerInsn "mov" for 0x402b15>, <DisassemblerInsn "sub" for 0x402b18>, <DisassemblerInsn "setb" for 0x402b1b>, <DisassemblerInsn "and" for 0x402b1f>, <DisassemblerInsn "test" for 0x402b22>, <DisassemblerInsn "mov" for 0x402b26>, <DisassemblerInsn "mov" for 0x402b2e>, <DisassemblerInsn "mov" for 0x402b36>, <DisassemblerInsn "jne" for 0x402b3d>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40278b>, <DisassemblerInsn "mov" for 0x402793>, <DisassemblerInsn "mov" for 0x40279b>, <DisassemblerInsn "mov" for 0x4027a3>, <DisassemblerInsn "mov" for 0x4027aa>, <DisassemblerInsn "mov" for 0x4027b2>, <DisassemblerInsn "mov" for 0x4027ba>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027cd>, <DisassemblerInsn "cmp" for 0x4027d5>, <DisassemblerInsn "mov" for 0x4027dc>, <DisassemblerInsn "mov" for 0x4027e4>, <DisassemblerInsn "mov" for 0x4027eb>, <DisassemblerInsn "mov" for 0x4027f3>, <DisassemblerInsn "mov" for 0x4027fb>, <DisassemblerInsn "mov" for 0x402803>, <DisassemblerInsn "ja" for 0x40280b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031ba>, <DisassemblerInsn "add" for 0x4031c1>, <DisassemblerInsn "pop" for 0x4031c8>, <DisassemblerInsn "pop" for 0x4031c9>, <DisassemblerInsn "pop" for 0x4031cb>, <DisassemblerInsn "ret" for 0x4031cc>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403182>, <DisassemblerInsn "mov" for 0x40318a>, <DisassemblerInsn "mov" for 0x403192>, <DisassemblerInsn "mov" for 0x403195>, <DisassemblerInsn "mov" for 0x40319a>, <DisassemblerInsn "call" for 0x40319c>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021aa>, <DisassemblerInsn "movzx" for 0x4021b2>, <DisassemblerInsn "mov" for 0x4021ba>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "add" for 0x4021c4>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "mov" for 0x4021d0>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "xor" for 0x4021da>, <DisassemblerInsn "cmp" for 0x4021dc>, <DisassemblerInsn "mov" for 0x4021df>, <DisassemblerInsn "jle" for 0x4021e6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f95>, <DisassemblerInsn "mov" for 0x401f9d>, <DisassemblerInsn "movzx" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa7>, <DisassemblerInsn "mov" for 0x401fae>, <DisassemblerInsn "sub" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fb5>, <DisassemblerInsn "shr" for 0x401fba>, <DisassemblerInsn "mov" for 0x401fbc>, <DisassemblerInsn "mov" for 0x401fc3>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "mov" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "cmp" for 0x401fe5>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "mov" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "jle" for 0x401fff>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b90>, <DisassemblerInsn "mov" for 0x402b98>, <DisassemblerInsn "mov" for 0x402ba0>, <DisassemblerInsn "mov" for 0x402ba8>, <DisassemblerInsn "mov" for 0x402baf>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "mov" for 0x402bbe>, <DisassemblerInsn "mov" for 0x402bc6>, <DisassemblerInsn "shr" for 0x402bc9>, <DisassemblerInsn "mov" for 0x402bcc>, <DisassemblerInsn "movabs" for 0x402bd4>, <DisassemblerInsn "and" for 0x402bde>, <DisassemblerInsn "movsx" for 0x402be1>, <DisassemblerInsn "mov" for 0x402be6>, <DisassemblerInsn "mov" for 0x402bed>, <DisassemblerInsn "movsx" for 0x402bf3>, <DisassemblerInsn "mov" for 0x402bf7>, <DisassemblerInsn "cmp" for 0x402bfe>, <DisassemblerInsn "mov" for 0x402c03>, <DisassemblerInsn "mov" for 0x402c0b>, <DisassemblerInsn "mov" for 0x402c12>, <DisassemblerInsn "mov" for 0x402c1a>, <DisassemblerInsn "mov" for 0x402c21>, <DisassemblerInsn "jge" for 0x402c28>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40316a>, <DisassemblerInsn "call" for 0x403172>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402cb2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402635>, <DisassemblerInsn "imul" for 0x40263d>, <DisassemblerInsn "cdq" for 0x402640>, <DisassemblerInsn "idiv" for 0x402641>, <DisassemblerInsn "mov" for 0x402643>, <DisassemblerInsn "mov" for 0x40264b>, <DisassemblerInsn "mov" for 0x40264d>, <DisassemblerInsn "and" for 0x402655>, <DisassemblerInsn "mov" for 0x402658>, <DisassemblerInsn "movsxd" for 0x40265f>, <DisassemblerInsn "imul" for 0x402662>, <DisassemblerInsn "add" for 0x402666>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "xor" for 0x402671>, <DisassemblerInsn "mov" for 0x402673>, <DisassemblerInsn "xor" for 0x402675>, <DisassemblerInsn "cmp" for 0x402677>, <DisassemblerInsn "mov" for 0x40267b>, <DisassemblerInsn "mov" for 0x402683>, <DisassemblerInsn "je" for 0x40268a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ec>, <DisassemblerInsn "mov" for 0x4021f3>, <DisassemblerInsn "mov" for 0x4021fa>, <DisassemblerInsn "mov" for 0x402201>, <DisassemblerInsn "imul" for 0x402208>, <DisassemblerInsn "cmp" for 0x40220b>, <DisassemblerInsn "setg" for 0x40220e>, <DisassemblerInsn "mov" for 0x402212>, <DisassemblerInsn "cmp" for 0x40221a>, <DisassemblerInsn "sete" for 0x40221d>, <DisassemblerInsn "mov" for 0x402221>, <DisassemblerInsn "movsxd" for 0x402229>, <DisassemblerInsn "mov" for 0x40222c>, <DisassemblerInsn "cdqe" for 0x402234>, <DisassemblerInsn "mov" for 0x402236>, <DisassemblerInsn "xor" for 0x40223e>, <DisassemblerInsn "mov" for 0x402240>, <DisassemblerInsn "mov" for 0x402247>, <DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "jmp" for 0x402257>]'}], 'cfg_block_detailed_info': [{'block_Idx': 44, 'blockInsts': ['<lea~~rdi, [rsp + 0x4f8]>', '<call~~0x500080>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x402fd7>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~edi, dword ptr [rsp + 0x2d4]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~r9, qword ptr [rsp + 0x240]>', '<mov~~r10, qword ptr [rsp + 0x248]>', '<mov~~rax, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<mov~~qword ptr [rsp + 0x1e8], r10>', '<mov~~qword ptr [rsp + 0x1f0], r9>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~dword ptr [rsp + 0x208], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jge~~0x40306f>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x440], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xb12]>', '<mov~~byte ptr [rsp + 0x44d], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x44e], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x44f], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x450], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x458], rax>', '<jne~~0x401f2a>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~rdi, qword ptr [rsp + 0x2f0]>', '<mov~~ecx, dword ptr [rsp + 0x2bc]>', '<mov~~rsi, qword ptr [rsp + 0x358]>', '<mov~~edx, dword ptr [rsp + 0x258]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<call~~0x500078>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x44d]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x3fe], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x3ff], al>', '<jb~~0x4020fa>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x40217b>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x403182>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc8]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0xdc]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~dword ptr [rsp + 0xac], esi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb8], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x402eea>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~r8, qword ptr [rsp + 0x1f0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0x104]>', '<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xac]>', '<mov~~qword ptr [rsp + 0x78], rax>', '<add~~ecx, esi>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<neg~~edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<jne~~0x402e28>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x228]>', '<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x230], r8d>', '<mov~~dword ptr [rsp + 0x234], edi>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~edi, dword ptr [rsp + 0x2d4]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~r9, qword ptr [rsp + 0x240]>', '<mov~~r10, qword ptr [rsp + 0x248]>', '<mov~~rax, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<mov~~qword ptr [rsp + 0x1e8], r10>', '<mov~~qword ptr [rsp + 0x1f0], r9>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~dword ptr [rsp + 0x208], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jge~~0x40306f>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x4a8]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x368], eax>', '<cmp~~eax, 0>', '<jle~~0x40316a>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x39c]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x3d0]>', '<mov~~rsi, qword ptr [rsp + 0x3c8]>', '<mov~~rdi, qword ptr [rsp + 0x388]>', '<mov~~r10b, byte ptr [rsp + 0x3c7]>', '<mov~~r11d, dword ptr [rsp + 0x3e4]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x36c], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x370], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x374], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<mov~~dword ptr [rsp + 0x39c], eax>', '<jl~~0x40238a>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0xbc]>', '<mov~~ecx, dword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x403182>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x138], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~esi, dword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0xec], esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x198]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x402eea>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2b0]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~edi, dword ptr [rsp + 0x290]>', '<mov~~r8, qword ptr [rsp + 0x228]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x230], edi>', '<mov~~dword ptr [rsp + 0x234], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<je~~0x4028ca>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x258], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x25c], ecx>', '<lea~~rax, [rip + 0x44aa]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<je~~0x403182>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~edx, dword ptr [rsp + 0x3b8]>', '<mov~~esi, dword ptr [rsp + 0x3c0]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3d8], esi>', '<mov~~dword ptr [rsp + 0x3dc], edx>', '<mov~~dword ptr [rsp + 0x3e0], ecx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jge~~0x4031ba>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0x1f0]>', '<mov~~edi, dword ptr [rsp + 0x104]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xcc], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~r8d, dword ptr [rsp + 0x17c]>', '<mov~~r9, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x188]>', '<mov~~ecx, dword ptr [rsp + 0x194]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~qword ptr [rsp + 0x140], rsi>', '<mov~~qword ptr [rsp + 0x148], r9>', '<mov~~dword ptr [rsp + 0x154], r8d>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x4106]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x403182>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3b8]>', '<mov~~ecx, dword ptr [rsp + 0x384]>', '<mov~~rdi, qword ptr [rsp + 0x480]>', '<mov~~rdx, qword ptr [rsp + 0x388]>', '<mov~~eax, dword ptr [rsp + 0x39c]>', '<add~~rdx, rdi>', '<add~~ecx, 1>', '<cmp~~ecx, esi>', '<mov~~qword ptr [rsp + 0x3a0], rdx>', '<mov~~dword ptr [rsp + 0x3a8], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x402259>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rcx, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~edi, dword ptr [rsp + 0x2b8]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~rsi, qword ptr [rsp + 0x318]>', '<mov~~r9, qword ptr [rsp + 0x310]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x198], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1a4], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1a8], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1b8], r8>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~qword ptr [rsp + 0x1c8], rdx>', '<mov~~qword ptr [rsp + 0x1d0], rcx>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<mov~~r8b, byte ptr [rsp + 0x30f]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~r9d, dword ptr [rsp + 0x1c0]>', '<mov~~esi, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x164], r9d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jne~~0x402a68>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3b0]>', '<mov~~rdx, qword ptr [rsp + 0x490]>', '<mov~~rsi, qword ptr [rsp + 0x480]>', '<movsxd~~rax, ecx>', '<imul~~rax, rsi>', '<add~~rdx, rax>', '<mov~~eax, 0x80>', '<mov~~qword ptr [rsp + 0x3a0], rdx>', '<mov~~dword ptr [rsp + 0x3a8], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<mov~~dl, byte ptr [rsp + 0x3c6]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~esi, dword ptr [rsp + 0x3a8]>', '<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x384], esi>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<mov~~dword ptr [rsp + 0x39c], eax>', '<jne~~0x40238a>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x402418>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xb12]>', '<mov~~byte ptr [rsp + 0x467], al>', '<cmp~~al, 0>', '<je~~0x4021aa>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c8]>', '<mov~~eax, dword ptr [rsp + 0x4c4]>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x460], eax>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe16f]>', '<call~~0x500068>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jmp~~0x4031ba>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x368]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~esi, dword ptr [rsp + 0x48c]>', '<mov~~rdi, qword ptr [rsp + 0x4b8]>', '<mov~~r8d, dword ptr [rsp + 0x4a4]>', '<mov~~edx, dword ptr [rsp + 0x47c]>', '<mov~~r10, qword ptr [rsp + 0x498]>', '<mov~~r9, r10>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x2f0], r9>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x30f], r9b>', '<lea~~r9, [rsp + 0x4f8]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x310], r9>', '<lea~~r9, [rsp + 0x4f8]>', '<mov~~qword ptr [rsp + 0x318], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x327], r8b>', '<mov~~qword ptr [rsp + 0x328], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x330], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x338], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x340], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x348], rdx>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<mov~~dword ptr [rsp + 0x354], eax>', '<mov~~rsi, qword ptr [rsp + 0x480]>', '<mov~~r8d, dword ptr [rsp + 0x460]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~rax, qword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x350]>', '<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~r9, qword ptr [rsp + 0x288]>', '<mov~~r10, qword ptr [rsp + 0x280]>', '<mov~~r11, qword ptr [rsp + 0x278]>', '<mov~~rbx, qword ptr [rsp + 0x270]>', '<mov~~ebp, dword ptr [rsp + 0x26c]>', '<mov~~r14d, dword ptr [rsp + 0x268]>', '<mov~~dword ptr [rsp + 0x290], r14d>', '<mov~~dword ptr [rsp + 0x294], ebp>', '<mov~~qword ptr [rsp + 0x298], rbx>', '<mov~~qword ptr [rsp + 0x2a0], r11>', '<mov~~qword ptr [rsp + 0x2a8], r10>', '<mov~~qword ptr [rsp + 0x2b0], r9>', '<mov~~dword ptr [rsp + 0x2b8], ecx>', '<mov~~dword ptr [rsp + 0x2bc], edi>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<add~~rax, 1>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x402466>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x460]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~edi, dword ptr [rsp + 0x3d8]>', '<mov~~ecx, dword ptr [rsp + 0x3dc]>', '<mov~~eax, dword ptr [rsp + 0x3e0]>', '<mov~~dword ptr [rsp + 0x3b0], ecx>', '<mov~~dword ptr [rsp + 0x3b4], edi>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x3b4]>', '<and~~edx, esi>', '<mov~~dword ptr [rsp + 0x3b8], edx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3c0], eax>', '<jge~~0x40226a>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3fe]>', '<mov~~byte ptr [rsp + 0x3ff], al>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x43c]>', '<mov~~sil, byte ptr [rsp + 0x3ff]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4f8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0xbc]>', '<mov~~ecx, dword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x120]>', '<mov~~ecx, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], edi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~dword ptr [rsp + 0x6c], edx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<jl~~0x403182>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x208]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rsi, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~r8, qword ptr [rsp + 0x40]>', '<mov~~r9d, dword ptr [rsp + 0x2d4]>', '<mov~~r11, qword ptr [rsp + 0x2c0]>', '<mov~~r10, qword ptr [rsp + 0x360]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x348], r11>', '<mov~~dword ptr [rsp + 0x350], r10d>', '<mov~~dword ptr [rsp + 0x354], r9d>', '<mov~~qword ptr [rsp + 0x288], r8>', '<mov~~qword ptr [rsp + 0x280], rdi>', '<mov~~qword ptr [rsp + 0x278], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x26c], ecx>', '<mov~~dword ptr [rsp + 0x268], eax>', '<jl~~0x402590>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb10], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x468], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb12], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401e6f>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x49ec]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1310>', '<mov~~dword ptr [rsp + 0x47c], r9d>', '<mov~~qword ptr [rsp + 0x480], r8>', '<mov~~dword ptr [rsp + 0x48c], ecx>', '<mov~~qword ptr [rsp + 0x490], rdx>', '<mov~~ecx, esi>', '<mov~~qword ptr [rsp + 0x498], rdi>', '<mov~~eax, dword ptr [rsp + 0x1340]>', '<mov~~dword ptr [rsp + 0x4a4], eax>', '<mov~~rax, qword ptr [rsp + 0x1338]>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~edx, dword ptr [rsp + 0x1330]>', '<mov~~dword ptr [rsp + 0x4b4], edx>', '<lea~~rdx, [rsp + 0x4f8]>', '<mov~~esi, dword ptr [rdi + 0x68]>', '<mov~~rdx, rdi>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x4b8], rdx>', '<mov~~rdx, qword ptr [rdi + 8]>', '<mov~~r8d, dword ptr [rdx + 0x80]>', '<or~~r8d, ecx>', '<cmp~~r8d, 0>', '<sete~~dl>', '<mov~~ecx, 1>', '<mov~~edi, 3>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<cmp~~esi, 0>', '<cmove~~ecx, edx>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb10]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x710]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x610]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x510]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb10], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x468], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb12], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401e6f>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x402b90>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~rdx, qword ptr [rsp + 0x2e0]>', '<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x258], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x25c], ecx>', '<lea~~rax, [rip + 0x44aa]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x260], rax>', '<je~~0x403182>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x480]>', '<mov~~r8d, dword ptr [rsp + 0x460]>', '<mov~~edx, dword ptr [rsp + 0x4b4]>', '<mov~~rax, qword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x350]>', '<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~r9, qword ptr [rsp + 0x288]>', '<mov~~r10, qword ptr [rsp + 0x280]>', '<mov~~r11, qword ptr [rsp + 0x278]>', '<mov~~rbx, qword ptr [rsp + 0x270]>', '<mov~~ebp, dword ptr [rsp + 0x26c]>', '<mov~~r14d, dword ptr [rsp + 0x268]>', '<mov~~dword ptr [rsp + 0x290], r14d>', '<mov~~dword ptr [rsp + 0x294], ebp>', '<mov~~qword ptr [rsp + 0x298], rbx>', '<mov~~qword ptr [rsp + 0x2a0], r11>', '<mov~~qword ptr [rsp + 0x2a8], r10>', '<mov~~qword ptr [rsp + 0x2b0], r9>', '<mov~~dword ptr [rsp + 0x2b8], ecx>', '<mov~~dword ptr [rsp + 0x2bc], edi>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<je~~0x4026bf>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x328]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3b3b]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x30f]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~r9d, dword ptr [rsp + 0x1c0]>', '<mov~~esi, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x164], r9d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jne~~0x402a68>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2d4]>', '<mov~~edi, dword ptr [rsp + 0x164]>', '<mov~~r10, qword ptr [rsp + 0x480]>', '<mov~~r8, qword ptr [rsp + 0x168]>', '<mov~~edx, dword ptr [rsp + 0x194]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x17c]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1b8], r8>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~qword ptr [rsp + 0x218], rax>', '<jne~~0x4029ef>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x3c6]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~esi, dword ptr [rsp + 0x3a8]>', '<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x384], esi>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<mov~~dword ptr [rsp + 0x39c], eax>', '<jne~~0x40238a>']}, {'block_Idx': 29, 'blockInsts': ['<jmp~~0x402343>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x3c0], eax>', '<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~edx, dword ptr [rsp + 0x3b8]>', '<mov~~esi, dword ptr [rsp + 0x3c0]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3d8], esi>', '<mov~~dword ptr [rsp + 0x3dc], edx>', '<mov~~dword ptr [rsp + 0x3e0], ecx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jge~~0x4031ba>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x438]>', '<mov~~ecx, dword ptr [rsp + 0x434]>', '<mov~~rsi, qword ptr [rsp + 0x428]>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x400], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x408], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~dword ptr [rsp + 0x410], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x414], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xb0a]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x41c], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x418], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x41c]>', '<mov~~dword ptr [rsp + 0x420], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x70c], r8d>', '<mov~~byte ptr [rsp + rsi + 0x60f], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xb08]>', '<mov~~byte ptr [rsp + rsi + 0x50f], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x428], rdx>', '<mov~~dword ptr [rsp + 0x434], ecx>', '<mov~~dword ptr [rsp + 0x438], eax>', '<ja~~0x402005>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x440]>', '<mov~~dword ptr [rsp + 0x43c], eax>', '<cmp~~eax, -1>', '<jle~~0x4020d1>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x402e76>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x208]>', '<mov~~rcx, qword ptr [rsp + 0x1e8]>', '<mov~~eax, dword ptr [rsp + 0x20c]>', '<mov~~rsi, qword ptr [rsp + 0x210]>', '<mov~~rdi, qword ptr [rsp + 0x218]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~dword ptr [rsp + 0x50], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<cmp~~eax, 0x20>', '<jle~~0x4030d8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x467]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x458], rax>', '<jbe~~0x401f2a>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x338]>', '<mov~~r9, qword ptr [rsp + 0x330]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~ebx, dword ptr [rsp + 0x154]>', '<mov~~bpl, byte ptr [rsp + 0x327]>', '<mov~~r14d, dword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x6c]>', '<sub~~eax, ecx>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~dword ptr [rsp + 0x17c], esi>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<jl~~0x402a68>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0xdc]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~dword ptr [rsp + 0xac], esi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb8], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x402eea>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x43c]>', '<mov~~sil, byte ptr [rsp + 0x3ff]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4f8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 37, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jmp~~0x4031ba>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<mov~~eax, dword ptr [rsp + 0x3f8]>', '<add~~rsp, 0x1310>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~r8, qword ptr [rsp + 0x1f0]>', '<mov~~edi, dword ptr [rsp + 0x1a4]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x138], eax>', '<jne~~0x402b41>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x2f0]>', '<mov~~r9d, dword ptr [rsp + 0x25c]>', '<mov~~r8d, dword ptr [rsp + 0x290]>', '<mov~~edi, dword ptr [rsp + 0x294]>', '<mov~~rsi, qword ptr [rsp + 0x298]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~rcx, qword ptr [rsp + 0x2a8]>', '<mov~~rax, qword ptr [rsp + 0x2b0]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x228], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x230], r8d>', '<mov~~dword ptr [rsp + 0x234], edi>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~qword ptr [rsp + 0x250], rax>', '<ja~~0x4028ca>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3f8]>', '<add~~rsp, 0x1310>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x328]>', '<mov~~rdx, qword ptr [rsp + 0x260]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x498]>', '<movzx~~ecx, word ptr [rsp + 0xb10]>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x3f4], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jle~~0x4031ba>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x440]>', '<mov~~al, byte ptr [rsp + 0x44d]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x424], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x424]>', '<mov~~dword ptr [rsp + rdx*4 + 0x710], esi>', '<mov~~byte ptr [rsp + rdx + 0x610], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xb10]>', '<mov~~byte ptr [rsp + rdx + 0x510], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x428], rdx>', '<mov~~dword ptr [rsp + 0x434], ecx>', '<mov~~dword ptr [rsp + 0x438], eax>', '<jle~~0x4020d1>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~esi, dword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0xec], esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x198]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~dword ptr [rsp + 0x114], esi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jge~~0x402eea>']}, {'block_Idx': 33, 'blockInsts': ['<lea~~rdi, [rsp + 0x4f8]>', '<call~~0x500080>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x402d05>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2c0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2d4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2e0], rcx>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<je~~0x4026bf>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3f4]>', '<mov~~edx, dword ptr [rsp + 0x48c]>', '<mov~~esi, dword ptr [rsp + 0x4a4]>', '<mov~~eax, dword ptr [rsp + 0x47c]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x3c6], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x3c7], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x3c8], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x3d0], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3d8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x3e0], eax>', '<jmp~~0x4022a5>']}], 'cfg_edge_info': [(72, 73), (70, 55), (50, 52), (59, 64), (20, 20), (11, 14), (66, 69), (55, 59), (67, 70), (8, 11), (2, 4), (17, 23), (15, 7), (60, 39), (56, 60), (28, 7), (48, 49), (30, 13), (9, 12), (22, 30), (53, 57), (58, 53), (16, 17), (71, 72), (64, 66), (25, 29), (5, 7), (38, 41), (14, 19), (0, 2), (74, 70), (65, 67), (49, 50), (67, 40), (15, 11), (54, 58), (59, 63), (31, 19), (51, 52), (69, 67), (28, 11), (29, 31), (39, 41), (57, 56), (66, 68), (24, 7), (55, 40), (62, 55), (71, 67), (72, 74), (16, 21), (33, 37), (37, 7), (12, 17), (9, 9), (36, 38), (63, 65), (73, 75), (74, 40), (32, 34), (58, 62), (4, 6), (52, 55), (40, 44), (53, 56), (25, 28), (20, 25), (38, 40), (23, 30), (1, 2), (34, 36), (6, 10), (21, 17), (50, 53), (44, 46), (75, 70), (17, 22), (62, 54), (11, 15), (60, 38), (31, 20), (70, 58), (51, 53), (12, 16), (32, 33), (4, 5), (21, 21), (52, 54), (0, 1), (48, 50), (65, 66), (56, 33), (36, 39), (68, 71), (30, 32), (75, 40), (64, 67), (69, 72), (5, 8), (39, 40), (1, 1), (14, 20), (10, 13), (49, 51), (19, 25), (6, 9), (13, 24)], 'cdg_edge_info': [(58, 56), (32, 37), (70, 55), (59, 64), (52, 58), (20, 20), (38, 44), (56, 37), (49, 53), (11, 14), (66, 69), (75, 44), (25, 25), (72, 75), (55, 59), (39, 44), (38, 46), (17, 23), (48, 56), (66, 71), (60, 39), (6, 13), (56, 60), (30, 13), (39, 46), (48, 49), (32, 7), (53, 57), (58, 53), (71, 72), (64, 66), (56, 7), (38, 41), (74, 70), (25, 31), (51, 52), (28, 11), (39, 41), (48, 53), (55, 40), (62, 55), (11, 25), (72, 74), (16, 21), (75, 46), (5, 11), (9, 9), (36, 38), (74, 40), (32, 34), (58, 62), (6, 24), (4, 6), (51, 56), (52, 55), (49, 56), (55, 44), (30, 24), (6, 17), (32, 36), (41, 48), (38, 40), (55, 46), (6, 10), (74, 44), (59, 65), (75, 70), (17, 22), (60, 38), (6, 12), (74, 46), (31, 20), (51, 53), (70, 58), (12, 16), (6, 30), (32, 33), (4, 5), (21, 21), (0, 1), (56, 33), (65, 66), (62, 58), (36, 39), (30, 32), (11, 28), (6, 7), (75, 40), (4, 7), (69, 72), (5, 8), (30, 7), (39, 40), (1, 1), (14, 20), (49, 51), (6, 9)], 'ddg_edge_info': [(70, 55), (64, 69), (70, 64), (0, 60), (64, 41), (0, 5), (23, 34), (0, 14), (17, 30), (2, 11), (9, 17), (14, 31), (11, 14), (66, 69), (0, 23), (5, 28), (70, 39), (55, 59), (32, 39), (72, 75), (70, 57), (64, 71), (17, 60), (70, 75), (57, 41), (8, 11), (17, 23), (56, 39), (65, 72), (74, 75), (2, 4), (66, 71), (60, 39), (70, 41), (2, 25), (34, 60), (56, 60), (55, 70), (0, 46), (65, 56), (48, 49), (51, 66), (9, 12), (60, 41), (53, 57), (64, 57), (58, 53), (71, 72), (28, 46), (64, 75), (65, 40), (0, 39), (23, 13), (51, 59), (9, 60), (0, 2), (48, 51), (23, 40), (2, 20), (71, 74), (1, 30), (0, 32), (5, 46), (25, 31), (0, 41), (51, 52), (20, 28), (28, 11), (39, 41), (57, 56), (9, 16), (23, 33), (1, 60), (1, 5), (55, 40), (8, 20), (62, 55), (34, 39), (2, 13), (0, 25), (72, 74), (11, 25), (33, 37), (70, 56), (16, 21), (0, 34), (16, 30), (2, 31), (32, 41), (57, 40), (58, 60), (13, 46), (24, 46), (52, 62), (51, 72), (52, 71), (16, 60), (2, 6), (34, 41), (70, 40), (65, 74), (56, 41), (8, 31), (37, 46), (32, 34), (57, 33), (58, 62), (4, 6), (51, 56), (69, 71), (40, 44), (0, 11), (2, 8), (64, 56), (53, 56), (2, 17), (64, 65), (65, 39), (31, 25), (51, 58), (20, 25), (23, 30), (52, 66), (52, 75), (64, 40), (65, 69), (0, 13), (62, 70), (2, 28), (23, 60), (0, 40), (65, 41), (33, 46), (70, 65), (52, 59), (59, 65), (12, 23), (70, 74), (44, 46), (75, 70), (1, 4), (5, 20), (65, 71), (2, 12), (2, 21), (71, 75), (57, 39), (51, 53), (70, 58), (31, 20), (65, 64), (2, 60), (0, 8), (57, 60), (34, 40), (56, 40), (2, 5), (66, 72), (2, 14), (2, 23), (51, 55), (64, 74), (70, 69), (48, 41), (65, 57), (0, 1), (65, 66), (65, 75), (23, 39), (62, 58), (2, 16), (0, 28), (11, 28), (21, 60), (75, 40), (55, 64), (70, 71), (52, 65), (2, 46), (5, 8), (39, 40), (64, 39), (49, 51), (23, 32), (2, 9), (23, 41), (6, 9), (13, 24)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'leaq\t0x4f8(%rsp), %rdx'}, {'instIndex': 17, 'instruction': 'movl\t0x68(%rdi), %esi'}, {'instIndex': 18, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 19, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t0x80(%rdx), %r8d'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB3_10'}, {'instIndex': 179, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 180, 'instruction': 'je\t.LBB3_20'}, {'instIndex': 182, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 183, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 184, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 185, 'instruction': 'movb\t$0, %al'}, {'instIndex': 186, 'instruction': 'callq\tav_log@PLT'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33---a/libavcodec/utvideodec.c
The case of compiler gcc with optimization no.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/no/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/no/utvideodec_gcc.s---decode_plane---before
function id: 157
function flag: True
There are 302 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 14, 'instruction': 'jne\t.L91'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x80(%rax), %eax'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jne\t.L91'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'jmp\t.L92'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'notl\t%eax'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 25, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'je\t.L93'}, {'instIndex': 33, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 35, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 36, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 39, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/no/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 14, 'instruction': 'jne\t.L91'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x80(%rax), %eax'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jne\t.L91'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'jmp\t.L92'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'notl\t%eax'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 25, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'je\t.L93'}, {'instIndex': 33, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 35, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 36, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 39, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O0/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O0/utvideodec_gcc.s---decode_plane---before
function id: 157
function flag: True
There are 302 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 14, 'instruction': 'jne\t.L91'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x80(%rax), %eax'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jne\t.L91'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'jmp\t.L92'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'notl\t%eax'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 25, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'je\t.L93'}, {'instIndex': 33, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 35, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 36, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 39, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O0/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 14, 'instruction': 'jne\t.L91'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movl\t0x80(%rax), %eax'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jne\t.L91'}, {'instIndex': 20, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 21, 'instruction': 'jmp\t.L92'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'notl\t%eax'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 25, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tbuild_huff'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'je\t.L93'}, {'instIndex': 33, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 35, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 36, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 39, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O1/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O1/utvideodec_gcc.s---decode_plane---before
function id: 333
function flag: True
There are 1789 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 19, 'instruction': 'jne\t.L184'}, {'instIndex': 20, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 22, 'instruction': 'sete\t%al'}, {'instIndex': 23, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 24, 'instruction': 'notl\t%eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x48(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rsi'}, {'instIndex': 28, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'call\tbuild_huff'}, {'instIndex': 30, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'jne\t.L237'}, {'instIndex': 195, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 198, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 199, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 200, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O1/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 19, 'instruction': 'jne\t.L184'}, {'instIndex': 20, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 22, 'instruction': 'sete\t%al'}, {'instIndex': 23, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 24, 'instruction': 'notl\t%eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x48(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'leaq\t0x90(%rsp), %rsi'}, {'instIndex': 28, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'call\tbuild_huff'}, {'instIndex': 30, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 31, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'jne\t.L237'}, {'instIndex': 195, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 198, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 199, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 200, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O2/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O2/utvideodec_gcc.s---decode_plane---before
function id: 321
function flag: True
There are 1615 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 19, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 20, 'instruction': 'jne\t.L215'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t$-2, %eax'}, {'instIndex': 24, 'instruction': 'sbbl\t$-1, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 28, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 29, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 32, 'instruction': 'call\tbuild_huff'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 34, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 36, 'instruction': 'jne\t.L271'}, {'instIndex': 386, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 387, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 388, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 389, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 390, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 391, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O2/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 19, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 20, 'instruction': 'jne\t.L215'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t$-2, %eax'}, {'instIndex': 24, 'instruction': 'sbbl\t$-1, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 28, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 29, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 31, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 32, 'instruction': 'call\tbuild_huff'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 34, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x4c(%rsp)'}, {'instIndex': 36, 'instruction': 'jne\t.L271'}, {'instIndex': 386, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 387, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 388, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 389, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 390, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 391, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O3/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O3/utvideodec_gcc.s---decode_plane---before
function id: 325
function flag: True
There are 2336 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movl\t$-1, 0x28(%rsp)'}, {'instIndex': 19, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 20, 'instruction': 'jne\t.L212'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t$-2, %eax'}, {'instIndex': 24, 'instruction': 'sbbl\t$-1, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 28, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x60(%rsp)'}, {'instIndex': 31, 'instruction': 'call\tbuild_huff'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 33, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'jne\t.L302'}, {'instIndex': 576, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 577, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 578, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 579, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 580, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 581, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/O3/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movl\t$-1, 0x28(%rsp)'}, {'instIndex': 19, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 20, 'instruction': 'jne\t.L212'}, {'instIndex': 21, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t$-2, %eax'}, {'instIndex': 24, 'instruction': 'sbbl\t$-1, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'leaq\t0x90(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 28, 'instruction': 'leaq\t0x8c(%rsp), %rdx'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x60(%rsp)'}, {'instIndex': 31, 'instruction': 'call\tbuild_huff'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 33, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'jne\t.L302'}, {'instIndex': 576, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 577, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 578, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 579, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 580, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 581, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/Os/utvideodec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/Os/utvideodec_gcc.s---decode_plane---before
function id: 213
function flag: True
There are 1415 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 17, 'instruction': 'jne\t.L151'}, {'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 19, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 20, 'instruction': 'sete\t%al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'notl\t%eax'}, {'instIndex': 23, 'instruction': 'leaq\t0x44(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x48(%rsp), %rsi'}, {'instIndex': 25, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 27, 'instruction': 'call\tbuild_huff'}, {'instIndex': 28, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L152'}, {'instIndex': 31, 'instruction': 'movq\t8(%r14), %rdi'}, {'instIndex': 32, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/gcc_before/Os/utvideodec.o
Binary file does not exist.
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'testl\t%esi, %esi'}, {'instIndex': 17, 'instruction': 'jne\t.L151'}, {'instIndex': 18, 'instruction': 'movq\t8(%rdi), %rax'}, {'instIndex': 19, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 20, 'instruction': 'sete\t%al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'notl\t%eax'}, {'instIndex': 23, 'instruction': 'leaq\t0x44(%rsp), %rdx'}, {'instIndex': 24, 'instruction': 'leaq\t0x48(%rsp), %rsi'}, {'instIndex': 25, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 27, 'instruction': 'call\tbuild_huff'}, {'instIndex': 28, 'instruction': 'movl\t%eax, %r15d'}, {'instIndex': 29, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 30, 'instruction': 'je\t.L152'}, {'instIndex': 31, 'instruction': 'movq\t8(%r14), %rdi'}, {'instIndex': 32, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/no/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/no/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 289 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0, 0xc4(%rsp)'}, {'instIndex': 12, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 13, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 14, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 20, 'instruction': 'andb\t$1, %al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0xe8(%rsp), %rdi'}, {'instIndex': 25, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 30, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/no/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/no/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 662 nodes and 1090 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 289 instructions in binary file.
[4202032, 4202123, 4202149, 4202188, 4202193]
The execution time of patched subCFG information extraction via angr: 0:00:01.354489
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef0>, <DisassemblerInsn "jmp" for 0x401efb>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "xor" for 0x401e7b>, <DisassemblerInsn "cmp" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "jne" for 0x401e89>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ecc>, <DisassemblerInsn "je" for 0x401ecf>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed1>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "call" for 0x401eeb>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e97>, <DisassemblerInsn "sete" for 0x401e9e>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jl" for 0x401f05>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<jmp~~0x40244b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xd8>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xc8], rdi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xb4], ecx>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<mov~~dword ptr [rsp + 0xa4], r9d>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0xc4], 0>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x401ea5>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401f00>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x309d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0>', '<jl~~0x402091>']}], 'cfg_edge_info': [(0, 1), (3, 4), (5, 8), (2, 3), (0, 2), (1, 3), (3, 5)]}]}
{'decode_plane': [4202032, 4202123, 4202149, 4202188, 4202193]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/no/utvideodec.o---before
The extraction of function: decode_plane
[4202032, 4202123, 4202149, 4202188, 4202193]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 183 nodes and 276 edges in CFGEmulated.
It has 183 nodes and 249 edges in CDG.
It has 2866 nodes and 3896 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202032, 4202123, 4202149, 4202188, 4202193]
{4202240, 4202625, 4203529, 4202123, 4202251, 4203279, 4202641, 4202903, 4203034, 4203163, 4203419, 4203551, 4203296, 4202273, 4202149, 4203174, 4203561, 4202409, 4202032, 4203574, 4202297, 4202809, 4202939, 4202685, 4202429, 4203584, 4202561, 4202440, 4203595, 4202188, 4203342, 4202193, 4203474, 4203219, 4203092, 4202709, 4202840, 4202848, 4202466, 4202999, 4202601, 4202603, 4203501, 4202224, 4203121, 4202487}
[57, 4, 55, 36, 94, 25, 43, 31, 45, 78, 81, 1, 105, 0, 2, 52, 64, 109, 131, 118, 74, 87, 30, 126, 120, 152, 67, 101, 46, 160, 107, 129, 77, 76, 148, 37, 92, 47, 104, 65, 89, 125, 44, 85, 114, 150, 108, 66, 53, 157, 22, 124, 123, 86, 93, 56, 98, 130, 75, 153, 73, 156, 119, 161, 68, 115]
The execution time of patched slicing information extraction via angr: 0:00:10.987357
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40244b>, <DisassemblerInsn "add" for 0x402452>, <DisassemblerInsn "ret" for 0x402459>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x404390>, <DisassemblerInsn "mov" for 0x404397>, <DisassemblerInsn "mov" for 0x40439f>, <DisassemblerInsn "mov" for 0x4043a7>, <DisassemblerInsn "mov" for 0x4043af>, <DisassemblerInsn "mov" for 0x4043b7>, <DisassemblerInsn "mov" for 0x4043bd>, <DisassemblerInsn "cmp" for 0x4043c8>, <DisassemblerInsn "jge" for 0x4043d3>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "mov" for 0x401fc8>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "imul" for 0x401fd6>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "jge" for 0x401fe0>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402091>, <DisassemblerInsn "add" for 0x402099>, <DisassemblerInsn "mov" for 0x40209f>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "cmp" for 0x4020cc>, <DisassemblerInsn "jge" for 0x4020cf>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "sub" for 0x404670>, <DisassemblerInsn "mov" for 0x404674>, <DisassemblerInsn "mov" for 0x404679>, <DisassemblerInsn "mov" for 0x40467e>, <DisassemblerInsn "cmp" for 0x404682>, <DisassemblerInsn "jbe" for 0x40468a>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ecc>, <DisassemblerInsn "je" for 0x401ecf>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020dc>, <DisassemblerInsn "mov" for 0x4020e3>, <DisassemblerInsn "mov" for 0x4020ea>, <DisassemblerInsn "add" for 0x4020f1>, <DisassemblerInsn "imul" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020f7>, <DisassemblerInsn "cdq" for 0x4020ff>, <DisassemblerInsn "idiv" for 0x402100>, <DisassemblerInsn "and" for 0x402103>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "mov" for 0x40210e>, <DisassemblerInsn "movsxd" for 0x402116>, <DisassemblerInsn "imul" for 0x40211e>, <DisassemblerInsn "add" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "cmp" for 0x40212f>, <DisassemblerInsn "je" for 0x402137>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed1>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "call" for 0x401eeb>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "mov" for 0x401f40>, <DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4e>, <DisassemblerInsn "add" for 0x401f55>, <DisassemblerInsn "imul" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5b>, <DisassemblerInsn "cdq" for 0x401f63>, <DisassemblerInsn "idiv" for 0x401f64>, <DisassemblerInsn "and" for 0x401f67>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f72>, <DisassemblerInsn "movsxd" for 0x401f7a>, <DisassemblerInsn "imul" for 0x401f82>, <DisassemblerInsn "add" for 0x401f8b>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f9b>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "cmp" for 0x401fb0>, <DisassemblerInsn "jge" for 0x401fb7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f28>, <DisassemblerInsn "cmp" for 0x401f30>, <DisassemblerInsn "jge" for 0x401f33>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404657>, <DisassemblerInsn "mov" for 0x40465e>, <DisassemblerInsn "add" for 0x404665>, <DisassemblerInsn "ret" for 0x40466c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e97>, <DisassemblerInsn "sete" for 0x401e9e>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4023c3>, <DisassemblerInsn "call" for 0x4023c8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "xor" for 0x401e7b>, <DisassemblerInsn "cmp" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "jne" for 0x401e89>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "xor" for 0x402158>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "jmp" for 0x40215e>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402160>, <DisassemblerInsn "mov" for 0x402164>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x402170>, <DisassemblerInsn "shl" for 0x402177>, <DisassemblerInsn "movsxd" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402180>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "sub" for 0x402188>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "cmp" for 0x402190>, <DisassemblerInsn "jne" for 0x402195>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "add" for 0x4023a3>, <DisassemblerInsn "mov" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ad>, <DisassemblerInsn "add" for 0x4023b4>, <DisassemblerInsn "mov" for 0x4023b7>, <DisassemblerInsn "jmp" for 0x4023be>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022f2>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4022ce>, <DisassemblerInsn "jg" for 0x4022d1>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021bb>, <DisassemblerInsn "mov" for 0x4021c3>, <DisassemblerInsn "mov" for 0x4021ca>, <DisassemblerInsn "movsxd" for 0x4021d2>, <DisassemblerInsn "add" for 0x4021d7>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "mov" for 0x4021e2>, <DisassemblerInsn "shl" for 0x4021e5>, <DisassemblerInsn "cdqe" for 0x4021e8>, <DisassemblerInsn "add" for 0x4021ea>, <DisassemblerInsn "movsxd" for 0x4021ed>, <DisassemblerInsn "call" for 0x4021f2>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "lea" for 0x402436>, <DisassemblerInsn "call" for 0x40243b>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jl" for 0x401f05>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046c0>, <DisassemblerInsn "mov" for 0x4046c5>, <DisassemblerInsn "mov" for 0x4046ca>, <DisassemblerInsn "mov" for 0x4046ce>, <DisassemblerInsn "mov" for 0x4046d3>, <DisassemblerInsn "sub" for 0x4046d7>, <DisassemblerInsn "shl" for 0x4046da>, <DisassemblerInsn "mov" for 0x4046de>, <DisassemblerInsn "mov" for 0x4046e3>, <DisassemblerInsn "add" for 0x4046e6>, <DisassemblerInsn "mov" for 0x4046e9>, <DisassemblerInsn "mov" for 0x4046ee>, <DisassemblerInsn "add" for 0x4046f1>, <DisassemblerInsn "ret" for 0x4046f4>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d2>, <DisassemblerInsn "mov" for 0x4023da>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "lea" for 0x4023e3>, <DisassemblerInsn "call" for 0x4023e8>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402320>, <DisassemblerInsn "mov" for 0x402328>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "lea" for 0x402331>, <DisassemblerInsn "mov" for 0x402338>, <DisassemblerInsn "call" for 0x40233a>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "add" for 0x402049>, <DisassemblerInsn "mov" for 0x40204e>, <DisassemblerInsn "mov" for 0x402053>, <DisassemblerInsn "add" for 0x40205a>, <DisassemblerInsn "mov" for 0x40205d>, <DisassemblerInsn "jmp" for 0x402064>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "cmp" for 0x40228e>, <DisassemblerInsn "jge" for 0x402295>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402081>, <DisassemblerInsn "jmp" for 0x40208c>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40233f>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046ac>, <DisassemblerInsn "mov" for 0x4046b0>, <DisassemblerInsn "add" for 0x4046b4>, <DisassemblerInsn "ret" for 0x4046b8>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "cmp" for 0x4020cc>, <DisassemblerInsn "jge" for 0x4020cf>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "cmp" for 0x401fb0>, <DisassemblerInsn "jge" for 0x401fb7>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff7>, <DisassemblerInsn "add" for 0x401ffe>, <DisassemblerInsn "mov" for 0x402002>, <DisassemblerInsn "mov" for 0x402006>, <DisassemblerInsn "mov" for 0x40200a>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "movsxd" for 0x40201f>, <DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "add" for 0x402031>, <DisassemblerInsn "mov" for 0x402038>, <DisassemblerInsn "jmp" for 0x40203f>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4047cd>, <DisassemblerInsn "add" for 0x4047d1>, <DisassemblerInsn "ret" for 0x4047d5>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f28>, <DisassemblerInsn "cmp" for 0x401f30>, <DisassemblerInsn "jge" for 0x401f33>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40221a>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x402226>, <DisassemblerInsn "mov" for 0x40222e>, <DisassemblerInsn "mov" for 0x402235>, <DisassemblerInsn "mov" for 0x40223d>, <DisassemblerInsn "mov" for 0x402244>, <DisassemblerInsn "sub" for 0x402248>, <DisassemblerInsn "add" for 0x40224c>, <DisassemblerInsn "sar" for 0x40224f>, <DisassemblerInsn "call" for 0x402252>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef0>, <DisassemblerInsn "jmp" for 0x401efb>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229b>, <DisassemblerInsn "mov" for 0x4022a6>, <DisassemblerInsn "mov" for 0x4022ad>, <DisassemblerInsn "imul" for 0x4022b4>, <DisassemblerInsn "cmp" for 0x4022bc>, <DisassemblerInsn "jge" for 0x4022be>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402429>, <DisassemblerInsn "jmp" for 0x402434>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402440>, <DisassemblerInsn "mov" for 0x40244b>, <DisassemblerInsn "add" for 0x402452>, <DisassemblerInsn "ret" for 0x402459>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402409>, <DisassemblerInsn "add" for 0x402410>, <DisassemblerInsn "mov" for 0x402413>, <DisassemblerInsn "jmp" for 0x40241a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40241f>, <DisassemblerInsn "call" for 0x402424>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc8>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "imul" for 0x401fd6>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "jge" for 0x401fe0>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "cmp" for 0x40228e>, <DisassemblerInsn "jge" for 0x402295>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40230f>, <DisassemblerInsn "cmp" for 0x402316>, <DisassemblerInsn "jge" for 0x40231e>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4022c4>, <DisassemblerInsn "call" for 0x4022c9>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe2>, <DisassemblerInsn "mov" for 0x401fe6>, <DisassemblerInsn "cmp" for 0x401fed>, <DisassemblerInsn "je" for 0x401ff5>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "shl" for 0x402148>, <DisassemblerInsn "movsxd" for 0x40214b>, <DisassemblerInsn "mov" for 0x40214e>, <DisassemblerInsn "mov" for 0x402152>, <DisassemblerInsn "jmp" for 0x402156>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234e>, <DisassemblerInsn "add" for 0x402355>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235d>, <DisassemblerInsn "mov" for 0x402361>, <DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "movsxd" for 0x402376>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "add" for 0x402388>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40465e>, <DisassemblerInsn "add" for 0x404665>, <DisassemblerInsn "ret" for 0x40466c>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022fc>, <DisassemblerInsn "lea" for 0x402300>, <DisassemblerInsn "mov" for 0x402305>, <DisassemblerInsn "call" for 0x40230a>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022d3>, <DisassemblerInsn "mov" for 0x4022db>, <DisassemblerInsn "mov" for 0x4022df>, <DisassemblerInsn "lea" for 0x4022e4>, <DisassemblerInsn "mov" for 0x4022eb>, <DisassemblerInsn "call" for 0x4022ed>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021b6>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402254>, <DisassemblerInsn "mov" for 0x40225c>, <DisassemblerInsn "mov" for 0x402263>, <DisassemblerInsn "lea" for 0x402267>, <DisassemblerInsn "call" for 0x40226c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402069>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046b0>, <DisassemblerInsn "add" for 0x4046b4>, <DisassemblerInsn "ret" for 0x4046b8>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023ed>, <DisassemblerInsn "mov" for 0x4023f2>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "lea" for 0x4023f9>, <DisassemblerInsn "mov" for 0x402400>, <DisassemblerInsn "call" for 0x402402>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "movsxd" for 0x40201f>, <DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "add" for 0x402031>, <DisassemblerInsn "mov" for 0x402038>, <DisassemblerInsn "jmp" for 0x40203f>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402344>, <DisassemblerInsn "je" for 0x40234c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402197>, <DisassemblerInsn "mov" for 0x40219f>, <DisassemblerInsn "mov" for 0x4021a3>, <DisassemblerInsn "lea" for 0x4021a8>, <DisassemblerInsn "mov" for 0x4021af>, <DisassemblerInsn "call" for 0x4021b1>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "movsxd" for 0x402376>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "add" for 0x402388>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402407>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a6>, <DisassemblerInsn "mov" for 0x4022ad>, <DisassemblerInsn "imul" for 0x4022b4>, <DisassemblerInsn "cmp" for 0x4022bc>, <DisassemblerInsn "jge" for 0x4022be>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40206b>, <DisassemblerInsn "add" for 0x402072>, <DisassemblerInsn "mov" for 0x402075>, <DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4023cd>, <DisassemblerInsn "jle" for 0x4023d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<add~~rsp, 0xd8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0xe88>', '<mov~~qword ptr [rsp + 0xe78], rdi>', '<mov~~qword ptr [rsp + 0xe70], rsi>', '<mov~~qword ptr [rsp + 0xe68], rdx>', '<mov~~rax, qword ptr [rsp + 0xe68]>', '<mov~~dword ptr [rax], 0xffffffff>', '<mov~~dword ptr [rsp + 0xe64], 0>', '<cmp~~dword ptr [rsp + 0xe64], 0x100>', '<jge~~0x40442a>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0xa0], 0>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x402041>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<add~~rax, 0x100>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~dword ptr [rsp + 0x8c], 0>', '<mov~~dword ptr [rsp + 0x98], 0>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x40241f>']}, {'block_Idx': 94, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 0xfffffff>', '<jbe~~0x404696>']}, {'block_Idx': 25, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401f00>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<imul~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~dword ptr [rsp + 0x98], 0>', '<je~~0x402158>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x309d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<imul~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x44], 0x80>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x402069>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402081>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp + 0xe84], eax>', '<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 105, 'blockInsts': ['<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xd8>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xc8], rdi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xb4], ecx>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<mov~~dword ptr [rsp + 0xa4], r9d>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0xc4], 0>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x401ea5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 52, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x402160>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<cmp~~dword ptr [rsp + 0x1c], 0>', '<jne~~0x4021bb>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<add~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<jmp~~0x402287>']}, {'block_Idx': 131, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 118, 'blockInsts': ['<cmp~~eax, 0>', '<jg~~0x4022f7>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 0x80]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<movsxd~~rax, dword ptr [rsp + 0x24]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~eax, dword ptr [rax + 0x60]>', '<shl~~eax, 2>', '<cdqe~~>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0x1c]>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<lea~~rdi, [rsp + 0x70]>', '<call~~0x500060>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0>', '<jl~~0x402091>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x24]>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<add~~rax, rcx>', '<ret~~>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 8], rax>', '<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2ccc]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<add~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<jmp~~0x401fa9>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0x80>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x4023c3>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0>', '<jmp~~0x40244b>']}, {'block_Idx': 160, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x40241f>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x402069>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<add~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x401fc8>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8c], 0>', '<mov~~dword ptr [rsp + 0x98], 0>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402081>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rcx + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rcx + 0x80]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<sub~~edx, dword ptr [rsp + 0x24]>', '<add~~edx, 3>', '<sar~~edx, 2>', '<call~~rax>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<jmp~~0x40244b>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~dword ptr [rsp + 0xa0], 0>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x40239b>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0>', '<jmp~~0x40244b>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<add~~rsp, 0xd8>', '<ret~~>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x4020bd>']}, {'block_Idx': 44, 'blockInsts': ['<lea~~rdi, [rsp + 0x70]>', '<call~~0x500060>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x402041>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x4023c3>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~dword ptr [rsp + 0x94], 0>', '<jge~~0x402344>']}, {'block_Idx': 108, 'blockInsts': ['<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~dword ptr [rsp + 0xf0], 0>', '<je~~0x402011>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx - 4]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x402160>']}, {'block_Idx': 157, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<add~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x4022a6>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x70]>', '<lea~~rdi, [rsp + 0x48]>', '<mov~~ecx, 4>', '<call~~0x404700>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2cf9]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rax + 0x80]>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<lea~~rdi, [rsp + 0x48]>', '<call~~0x404670>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x40206b>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~ecx, eax>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x2c14]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x401fc8>']}, {'block_Idx': 153, 'blockInsts': ['<cmp~~dword ptr [rsp + 0xf0], 0>', '<je~~0x402368>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2df3]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x4022a6>']}, {'block_Idx': 119, 'blockInsts': ['<jmp~~0x402409>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x40239b>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x401f21>']}, {'block_Idx': 115, 'blockInsts': ['<cmp~~eax, 0x20>', '<jle~~0x402407>']}], 'cfg_edge_info': [(129, 43), (55, 66), (98, 101), (67, 77), (156, 161), (87, 89), (46, 57), (31, 47), (148, 150), (85, 66), (2, 4), (160, 87), (78, 45), (77, 55), (53, 64), (2, 25), (81, 25), (47, 57), (64, 73), (150, 152), (114, 104), (153, 157), (161, 109), (75, 85), (107, 101), (0, 2), (66, 75), (36, 43), (30, 36), (45, 55), (25, 31), (101, 105), (22, 25), (44, 65), (119, 125), (55, 67), (125, 129), (130, 119), (126, 130), (104, 109), (123, 131), (1, 25), (37, 46), (120, 126), (56, 68), (43, 52), (86, 87), (85, 67), (52, 64), (152, 160), (161, 108), (115, 120), (78, 46), (76, 85), (93, 101), (93, 94), (157, 161), (131, 87), (129, 44), (120, 130), (118, 123), (1, 4), (36, 44), (109, 114), (45, 56), (30, 37), (104, 108), (124, 150), (37, 45), (68, 78), (77, 56), (64, 74), (73, 86), (150, 153), (65, 57), (0, 1), (92, 93), (25, 30), (43, 53), (101, 104), (66, 76)], 'cdg_edge_info': [(74, 101), (129, 43), (74, 92), (36, 65), (78, 68), (30, 46), (55, 66), (45, 77), (25, 47), (150, 87), (64, 87), (43, 52), (0, 2), (101, 109), (74, 125), (129, 64), (85, 85), (37, 45), (36, 43), (161, 129), (30, 36), (45, 55), (25, 31), (45, 67), (36, 64), (64, 74), (77, 77), (150, 89), (30, 57), (64, 89), (129, 57), (37, 78), (85, 66), (0, 1), (78, 45), (77, 55), (161, 125), (37, 56), (74, 93), (77, 67), (129, 44), (64, 73), (25, 30), (36, 57), (37, 68), (43, 53), (150, 152), (101, 104), (78, 78), (129, 65), (55, 85), (74, 129), (25, 57), (150, 161), (161, 109), (66, 76), (36, 44), (30, 37), (78, 56)], 'ddg_edge_info': [(120, 129), (129, 43), (36, 53), (30, 46), (125, 64), (67, 77), (30, 55), (87, 89), (150, 157), (30, 64), (161, 157), (129, 64), (30, 73), (47, 89), (129, 73), (31, 47), (157, 43), (130, 44), (45, 67), (130, 53), (36, 64), (76, 45), (45, 76), (157, 73), (30, 66), (130, 74), (78, 45), (157, 109), (53, 64), (2, 25), (2, 43), (150, 152), (30, 68), (30, 77), (150, 109), (120, 53), (1, 74), (125, 43), (30, 43), (2, 36), (30, 52), (120, 74), (73, 87), (157, 123), (2, 45), (68, 45), (0, 2), (36, 43), (30, 36), (30, 45), (37, 78), (44, 65), (157, 152), (150, 104), (0, 43), (125, 129), (130, 64), (1, 53), (129, 74), (150, 161), (130, 73), (157, 120), (36, 129), (0, 45), (45, 77), (157, 129), (157, 74), (104, 157), (152, 87), (52, 64), (1, 64), (1, 73), (76, 85), (120, 64), (101, 157), (120, 73), (31, 89), (67, 76), (1, 2), (76, 78), (44, 89), (157, 161), (125, 53), (30, 44), (120, 130), (130, 43), (37, 68), (129, 53), (130, 52), (55, 76), (104, 161), (55, 85), (130, 125), (30, 74), (30, 37), (65, 89), (157, 53), (36, 74), (101, 109), (30, 67), (30, 76), (85, 76), (109, 43), (120, 43), (30, 85), (37, 45), (68, 78), (123, 87), (157, 64), (64, 74), (130, 129), (0, 1), (30, 78), (92, 93), (46, 89), (30, 53), (101, 104), (0, 67), (66, 76), (30, 89), (0, 85)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0, 0xc4(%rsp)'}, {'instIndex': 12, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 13, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 14, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 20, 'instruction': 'andb\t$1, %al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0xe8(%rsp), %rdi'}, {'instIndex': 25, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 30, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O0/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O0/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 289 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0, 0xc4(%rsp)'}, {'instIndex': 12, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 13, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 14, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 20, 'instruction': 'andb\t$1, %al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0xe8(%rsp), %rdi'}, {'instIndex': 25, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 30, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O0/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O0/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 662 nodes and 1090 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 289 instructions in binary file.
[4202032, 4202123, 4202149, 4202188, 4202193]
The execution time of patched subCFG information extraction via angr: 0:00:01.435017
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef0>, <DisassemblerInsn "jmp" for 0x401efb>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "xor" for 0x401e7b>, <DisassemblerInsn "cmp" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "jne" for 0x401e89>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ecc>, <DisassemblerInsn "je" for 0x401ecf>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed1>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "call" for 0x401eeb>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e97>, <DisassemblerInsn "sete" for 0x401e9e>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jl" for 0x401f05>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<jmp~~0x40244b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xd8>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xc8], rdi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xb4], ecx>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<mov~~dword ptr [rsp + 0xa4], r9d>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0xc4], 0>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x401ea5>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401f00>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x309d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0>', '<jl~~0x402091>']}], 'cfg_edge_info': [(0, 1), (3, 4), (5, 8), (2, 3), (0, 2), (1, 3), (3, 5)]}]}
{'decode_plane': [4202032, 4202123, 4202149, 4202188, 4202193]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O0/utvideodec.o---before
The extraction of function: decode_plane
[4202032, 4202123, 4202149, 4202188, 4202193]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 183 nodes and 276 edges in CFGEmulated.
It has 183 nodes and 249 edges in CDG.
It has 2866 nodes and 3896 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202032, 4202123, 4202149, 4202188, 4202193]
{4202240, 4202625, 4203529, 4202123, 4202251, 4203279, 4202641, 4202903, 4203034, 4203163, 4203419, 4203551, 4203296, 4202273, 4202149, 4203174, 4203561, 4202409, 4202032, 4203574, 4202297, 4202809, 4202939, 4202685, 4202429, 4203584, 4202561, 4202440, 4203595, 4202188, 4203342, 4202193, 4203474, 4203219, 4203092, 4202709, 4202840, 4202848, 4202466, 4202999, 4202601, 4202603, 4203501, 4202224, 4203121, 4202487}
[57, 4, 55, 36, 94, 25, 43, 31, 45, 78, 81, 1, 105, 0, 2, 52, 64, 109, 131, 118, 74, 87, 30, 126, 120, 152, 67, 101, 46, 160, 107, 129, 77, 76, 148, 37, 92, 47, 104, 65, 89, 125, 44, 85, 114, 150, 108, 66, 53, 157, 22, 124, 123, 86, 93, 56, 98, 130, 75, 153, 73, 156, 119, 161, 68, 115]
The execution time of patched slicing information extraction via angr: 0:00:11.015932
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40244b>, <DisassemblerInsn "add" for 0x402452>, <DisassemblerInsn "ret" for 0x402459>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x404390>, <DisassemblerInsn "mov" for 0x404397>, <DisassemblerInsn "mov" for 0x40439f>, <DisassemblerInsn "mov" for 0x4043a7>, <DisassemblerInsn "mov" for 0x4043af>, <DisassemblerInsn "mov" for 0x4043b7>, <DisassemblerInsn "mov" for 0x4043bd>, <DisassemblerInsn "cmp" for 0x4043c8>, <DisassemblerInsn "jge" for 0x4043d3>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "mov" for 0x401fc8>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "imul" for 0x401fd6>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "jge" for 0x401fe0>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402091>, <DisassemblerInsn "add" for 0x402099>, <DisassemblerInsn "mov" for 0x40209f>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "cmp" for 0x4020cc>, <DisassemblerInsn "jge" for 0x4020cf>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "sub" for 0x404670>, <DisassemblerInsn "mov" for 0x404674>, <DisassemblerInsn "mov" for 0x404679>, <DisassemblerInsn "mov" for 0x40467e>, <DisassemblerInsn "cmp" for 0x404682>, <DisassemblerInsn "jbe" for 0x40468a>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401ecc>, <DisassemblerInsn "je" for 0x401ecf>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020dc>, <DisassemblerInsn "mov" for 0x4020e3>, <DisassemblerInsn "mov" for 0x4020ea>, <DisassemblerInsn "add" for 0x4020f1>, <DisassemblerInsn "imul" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020f7>, <DisassemblerInsn "cdq" for 0x4020ff>, <DisassemblerInsn "idiv" for 0x402100>, <DisassemblerInsn "and" for 0x402103>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "mov" for 0x40210e>, <DisassemblerInsn "movsxd" for 0x402116>, <DisassemblerInsn "imul" for 0x40211e>, <DisassemblerInsn "add" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "cmp" for 0x40212f>, <DisassemblerInsn "je" for 0x402137>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed1>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "call" for 0x401eeb>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "mov" for 0x401f40>, <DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4e>, <DisassemblerInsn "add" for 0x401f55>, <DisassemblerInsn "imul" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5b>, <DisassemblerInsn "cdq" for 0x401f63>, <DisassemblerInsn "idiv" for 0x401f64>, <DisassemblerInsn "and" for 0x401f67>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f72>, <DisassemblerInsn "movsxd" for 0x401f7a>, <DisassemblerInsn "imul" for 0x401f82>, <DisassemblerInsn "add" for 0x401f8b>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f9b>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "cmp" for 0x401fb0>, <DisassemblerInsn "jge" for 0x401fb7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f28>, <DisassemblerInsn "cmp" for 0x401f30>, <DisassemblerInsn "jge" for 0x401f33>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404657>, <DisassemblerInsn "mov" for 0x40465e>, <DisassemblerInsn "add" for 0x404665>, <DisassemblerInsn "ret" for 0x40466c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "cmp" for 0x401e97>, <DisassemblerInsn "sete" for 0x401e9e>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4023c3>, <DisassemblerInsn "call" for 0x4023c8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "mov" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e64>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "xor" for 0x401e7b>, <DisassemblerInsn "cmp" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "jne" for 0x401e89>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "and" for 0x401ea9>, <DisassemblerInsn "movzx" for 0x401eab>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "lea" for 0x401ebd>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "call" for 0x401ec7>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "xor" for 0x402158>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "jmp" for 0x40215e>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402160>, <DisassemblerInsn "mov" for 0x402164>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x402170>, <DisassemblerInsn "shl" for 0x402177>, <DisassemblerInsn "movsxd" for 0x40217a>, <DisassemblerInsn "mov" for 0x40217d>, <DisassemblerInsn "mov" for 0x402180>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "sub" for 0x402188>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "cmp" for 0x402190>, <DisassemblerInsn "jne" for 0x402195>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "add" for 0x4023a3>, <DisassemblerInsn "mov" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ad>, <DisassemblerInsn "add" for 0x4023b4>, <DisassemblerInsn "mov" for 0x4023b7>, <DisassemblerInsn "jmp" for 0x4023be>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022f2>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4022ce>, <DisassemblerInsn "jg" for 0x4022d1>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021bb>, <DisassemblerInsn "mov" for 0x4021c3>, <DisassemblerInsn "mov" for 0x4021ca>, <DisassemblerInsn "movsxd" for 0x4021d2>, <DisassemblerInsn "add" for 0x4021d7>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "mov" for 0x4021e2>, <DisassemblerInsn "shl" for 0x4021e5>, <DisassemblerInsn "cdqe" for 0x4021e8>, <DisassemblerInsn "add" for 0x4021ea>, <DisassemblerInsn "movsxd" for 0x4021ed>, <DisassemblerInsn "call" for 0x4021f2>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "lea" for 0x402436>, <DisassemblerInsn "call" for 0x40243b>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jl" for 0x401f05>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046c0>, <DisassemblerInsn "mov" for 0x4046c5>, <DisassemblerInsn "mov" for 0x4046ca>, <DisassemblerInsn "mov" for 0x4046ce>, <DisassemblerInsn "mov" for 0x4046d3>, <DisassemblerInsn "sub" for 0x4046d7>, <DisassemblerInsn "shl" for 0x4046da>, <DisassemblerInsn "mov" for 0x4046de>, <DisassemblerInsn "mov" for 0x4046e3>, <DisassemblerInsn "add" for 0x4046e6>, <DisassemblerInsn "mov" for 0x4046e9>, <DisassemblerInsn "mov" for 0x4046ee>, <DisassemblerInsn "add" for 0x4046f1>, <DisassemblerInsn "ret" for 0x4046f4>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d2>, <DisassemblerInsn "mov" for 0x4023da>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "lea" for 0x4023e3>, <DisassemblerInsn "call" for 0x4023e8>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402320>, <DisassemblerInsn "mov" for 0x402328>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "lea" for 0x402331>, <DisassemblerInsn "mov" for 0x402338>, <DisassemblerInsn "call" for 0x40233a>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "add" for 0x402049>, <DisassemblerInsn "mov" for 0x40204e>, <DisassemblerInsn "mov" for 0x402053>, <DisassemblerInsn "add" for 0x40205a>, <DisassemblerInsn "mov" for 0x40205d>, <DisassemblerInsn "jmp" for 0x402064>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "cmp" for 0x40228e>, <DisassemblerInsn "jge" for 0x402295>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402081>, <DisassemblerInsn "jmp" for 0x40208c>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40233f>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046ac>, <DisassemblerInsn "mov" for 0x4046b0>, <DisassemblerInsn "add" for 0x4046b4>, <DisassemblerInsn "ret" for 0x4046b8>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "cmp" for 0x4020cc>, <DisassemblerInsn "jge" for 0x4020cf>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "cmp" for 0x401fb0>, <DisassemblerInsn "jge" for 0x401fb7>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff7>, <DisassemblerInsn "add" for 0x401ffe>, <DisassemblerInsn "mov" for 0x402002>, <DisassemblerInsn "mov" for 0x402006>, <DisassemblerInsn "mov" for 0x40200a>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "movsxd" for 0x40201f>, <DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "add" for 0x402031>, <DisassemblerInsn "mov" for 0x402038>, <DisassemblerInsn "jmp" for 0x40203f>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4047cd>, <DisassemblerInsn "add" for 0x4047d1>, <DisassemblerInsn "ret" for 0x4047d5>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f28>, <DisassemblerInsn "cmp" for 0x401f30>, <DisassemblerInsn "jge" for 0x401f33>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40221a>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x402226>, <DisassemblerInsn "mov" for 0x40222e>, <DisassemblerInsn "mov" for 0x402235>, <DisassemblerInsn "mov" for 0x40223d>, <DisassemblerInsn "mov" for 0x402244>, <DisassemblerInsn "sub" for 0x402248>, <DisassemblerInsn "add" for 0x40224c>, <DisassemblerInsn "sar" for 0x40224f>, <DisassemblerInsn "call" for 0x402252>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef0>, <DisassemblerInsn "jmp" for 0x401efb>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229b>, <DisassemblerInsn "mov" for 0x4022a6>, <DisassemblerInsn "mov" for 0x4022ad>, <DisassemblerInsn "imul" for 0x4022b4>, <DisassemblerInsn "cmp" for 0x4022bc>, <DisassemblerInsn "jge" for 0x4022be>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402429>, <DisassemblerInsn "jmp" for 0x402434>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402440>, <DisassemblerInsn "mov" for 0x40244b>, <DisassemblerInsn "add" for 0x402452>, <DisassemblerInsn "ret" for 0x402459>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402409>, <DisassemblerInsn "add" for 0x402410>, <DisassemblerInsn "mov" for 0x402413>, <DisassemblerInsn "jmp" for 0x40241a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40241f>, <DisassemblerInsn "call" for 0x402424>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc8>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "imul" for 0x401fd6>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "jge" for 0x401fe0>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "cmp" for 0x40228e>, <DisassemblerInsn "jge" for 0x402295>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40230f>, <DisassemblerInsn "cmp" for 0x402316>, <DisassemblerInsn "jge" for 0x40231e>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4022c4>, <DisassemblerInsn "call" for 0x4022c9>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe2>, <DisassemblerInsn "mov" for 0x401fe6>, <DisassemblerInsn "cmp" for 0x401fed>, <DisassemblerInsn "je" for 0x401ff5>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "shl" for 0x402148>, <DisassemblerInsn "movsxd" for 0x40214b>, <DisassemblerInsn "mov" for 0x40214e>, <DisassemblerInsn "mov" for 0x402152>, <DisassemblerInsn "jmp" for 0x402156>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234e>, <DisassemblerInsn "add" for 0x402355>, <DisassemblerInsn "mov" for 0x402359>, <DisassemblerInsn "mov" for 0x40235d>, <DisassemblerInsn "mov" for 0x402361>, <DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "movsxd" for 0x402376>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "add" for 0x402388>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40465e>, <DisassemblerInsn "add" for 0x404665>, <DisassemblerInsn "ret" for 0x40466c>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022fc>, <DisassemblerInsn "lea" for 0x402300>, <DisassemblerInsn "mov" for 0x402305>, <DisassemblerInsn "call" for 0x40230a>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022d3>, <DisassemblerInsn "mov" for 0x4022db>, <DisassemblerInsn "mov" for 0x4022df>, <DisassemblerInsn "lea" for 0x4022e4>, <DisassemblerInsn "mov" for 0x4022eb>, <DisassemblerInsn "call" for 0x4022ed>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021b6>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402254>, <DisassemblerInsn "mov" for 0x40225c>, <DisassemblerInsn "mov" for 0x402263>, <DisassemblerInsn "lea" for 0x402267>, <DisassemblerInsn "call" for 0x40226c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402069>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4046b0>, <DisassemblerInsn "add" for 0x4046b4>, <DisassemblerInsn "ret" for 0x4046b8>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023ed>, <DisassemblerInsn "mov" for 0x4023f2>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "lea" for 0x4023f9>, <DisassemblerInsn "mov" for 0x402400>, <DisassemblerInsn "call" for 0x402402>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "movsxd" for 0x40201f>, <DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "add" for 0x402031>, <DisassemblerInsn "mov" for 0x402038>, <DisassemblerInsn "jmp" for 0x40203f>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402344>, <DisassemblerInsn "je" for 0x40234c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402197>, <DisassemblerInsn "mov" for 0x40219f>, <DisassemblerInsn "mov" for 0x4021a3>, <DisassemblerInsn "lea" for 0x4021a8>, <DisassemblerInsn "mov" for 0x4021af>, <DisassemblerInsn "call" for 0x4021b1>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "movsxd" for 0x402376>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "add" for 0x402388>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402407>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a6>, <DisassemblerInsn "mov" for 0x4022ad>, <DisassemblerInsn "imul" for 0x4022b4>, <DisassemblerInsn "cmp" for 0x4022bc>, <DisassemblerInsn "jge" for 0x4022be>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40206b>, <DisassemblerInsn "add" for 0x402072>, <DisassemblerInsn "mov" for 0x402075>, <DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4023cd>, <DisassemblerInsn "jle" for 0x4023d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<add~~rsp, 0xd8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0xe88>', '<mov~~qword ptr [rsp + 0xe78], rdi>', '<mov~~qword ptr [rsp + 0xe70], rsi>', '<mov~~qword ptr [rsp + 0xe68], rdx>', '<mov~~rax, qword ptr [rsp + 0xe68]>', '<mov~~dword ptr [rax], 0xffffffff>', '<mov~~dword ptr [rsp + 0xe64], 0>', '<cmp~~dword ptr [rsp + 0xe64], 0x100>', '<jge~~0x40442a>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0xa0], 0>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x402041>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<add~~rax, 0x100>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~dword ptr [rsp + 0x8c], 0>', '<mov~~dword ptr [rsp + 0x98], 0>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x40241f>']}, {'block_Idx': 94, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 0xfffffff>', '<jbe~~0x404696>']}, {'block_Idx': 25, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401f00>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<imul~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~dword ptr [rsp + 0x98], 0>', '<je~~0x402158>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x309d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cdq~~>', '<idiv~~dword ptr [rcx + 0x60]>', '<and~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<movsxd~~rcx, dword ptr [rsp + 0x90]>', '<imul~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x44], 0x80>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x402069>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402081>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp + 0xe84], eax>', '<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 105, 'blockInsts': ['<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xd8>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0xc8], rdi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xb4], ecx>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<mov~~dword ptr [rsp + 0xa4], r9d>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0xc4], 0>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x401ea5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<lea~~rsi, [rsp + 0x70]>', '<lea~~rdx, [rsp + 0x40]>', '<call~~0x404390>']}, {'block_Idx': 52, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x402160>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<cmp~~dword ptr [rsp + 0x1c], 0>', '<jne~~0x4021bb>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<add~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<jmp~~0x402287>']}, {'block_Idx': 131, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 118, 'blockInsts': ['<cmp~~eax, 0>', '<jg~~0x4022f7>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 0x80]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<movsxd~~rax, dword ptr [rsp + 0x24]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~eax, dword ptr [rax + 0x60]>', '<shl~~eax, 2>', '<cdqe~~>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0x1c]>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<lea~~rdi, [rsp + 0x70]>', '<call~~0x500060>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0>', '<jl~~0x402091>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x24]>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<add~~rax, rcx>', '<ret~~>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 8], rax>', '<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2ccc]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<add~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<jmp~~0x401fa9>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0x80>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x4023c3>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0>', '<jmp~~0x40244b>']}, {'block_Idx': 160, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x40241f>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x402069>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<add~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x401fc8>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8c], 0>', '<mov~~dword ptr [rsp + 0x98], 0>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<cmp~~eax, dword ptr [rcx + 0x60]>', '<jge~~0x402081>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rcx + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rcx + 0x80]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<sub~~edx, dword ptr [rsp + 0x24]>', '<add~~edx, 3>', '<sar~~edx, 2>', '<call~~rax>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<jmp~~0x40244b>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~dword ptr [rsp + 0xa0], 0>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x40239b>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0>', '<jmp~~0x40244b>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~dword ptr [rsp + 0xd4], 0xc1444e49>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<add~~rsp, 0xd8>', '<ret~~>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x4020bd>']}, {'block_Idx': 44, 'blockInsts': ['<lea~~rdi, [rsp + 0x70]>', '<call~~0x500060>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x402041>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<cmp~~eax, dword ptr [rsp + 0x8c]>', '<jge~~0x4023c3>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~dword ptr [rsp + 0x94], 0>', '<jge~~0x402344>']}, {'block_Idx': 108, 'blockInsts': ['<lea~~rdi, [rsp + 0x48]>', '<call~~0x4046c0>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~dword ptr [rsp + 0xf0], 0>', '<je~~0x402011>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x98]>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<mov~~eax, dword ptr [rax + rcx - 4]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x402160>']}, {'block_Idx': 157, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<add~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x4022a6>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe84]>', '<add~~rsp, 0xe88>', '<ret~~>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x70]>', '<lea~~rdi, [rsp + 0x48]>', '<mov~~ecx, 4>', '<call~~0x404700>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2cf9]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x402436>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rax + 0x80]>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<lea~~rdi, [rsp + 0x48]>', '<call~~0x404670>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x40206b>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~ecx, eax>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x2c14]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x401fc8>']}, {'block_Idx': 153, 'blockInsts': ['<cmp~~dword ptr [rsp + 0xf0], 0>', '<je~~0x402368>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2df3]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~dl, al>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0xa0]>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jmp~~0x4022a6>']}, {'block_Idx': 119, 'blockInsts': ['<jmp~~0x402409>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<imul~~ecx, dword ptr [rsp + 0xb4]>', '<cmp~~eax, ecx>', '<jge~~0x40239b>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x401f21>']}, {'block_Idx': 115, 'blockInsts': ['<cmp~~eax, 0x20>', '<jle~~0x402407>']}], 'cfg_edge_info': [(129, 43), (55, 66), (98, 101), (67, 77), (156, 161), (87, 89), (46, 57), (31, 47), (148, 150), (85, 66), (2, 4), (160, 87), (78, 45), (77, 55), (53, 64), (2, 25), (81, 25), (47, 57), (64, 73), (150, 152), (114, 104), (153, 157), (161, 109), (75, 85), (107, 101), (0, 2), (66, 75), (36, 43), (30, 36), (45, 55), (25, 31), (101, 105), (22, 25), (44, 65), (119, 125), (55, 67), (125, 129), (130, 119), (126, 130), (104, 109), (123, 131), (1, 25), (37, 46), (120, 126), (56, 68), (43, 52), (86, 87), (85, 67), (52, 64), (152, 160), (161, 108), (115, 120), (78, 46), (76, 85), (93, 101), (93, 94), (157, 161), (131, 87), (129, 44), (120, 130), (118, 123), (1, 4), (36, 44), (109, 114), (45, 56), (30, 37), (104, 108), (124, 150), (37, 45), (68, 78), (77, 56), (64, 74), (73, 86), (150, 153), (65, 57), (0, 1), (92, 93), (25, 30), (43, 53), (101, 104), (66, 76)], 'cdg_edge_info': [(74, 101), (129, 43), (74, 92), (36, 65), (78, 68), (30, 46), (55, 66), (45, 77), (25, 47), (150, 87), (64, 87), (43, 52), (0, 2), (101, 109), (74, 125), (129, 64), (85, 85), (37, 45), (36, 43), (161, 129), (30, 36), (45, 55), (25, 31), (45, 67), (36, 64), (64, 74), (77, 77), (150, 89), (30, 57), (64, 89), (129, 57), (37, 78), (85, 66), (0, 1), (78, 45), (77, 55), (161, 125), (37, 56), (74, 93), (77, 67), (129, 44), (64, 73), (25, 30), (36, 57), (37, 68), (43, 53), (150, 152), (101, 104), (78, 78), (129, 65), (55, 85), (74, 129), (25, 57), (150, 161), (161, 109), (66, 76), (36, 44), (30, 37), (78, 56)], 'ddg_edge_info': [(120, 129), (129, 43), (36, 53), (30, 46), (125, 64), (67, 77), (30, 55), (87, 89), (150, 157), (30, 64), (161, 157), (129, 64), (30, 73), (47, 89), (129, 73), (31, 47), (157, 43), (130, 44), (45, 67), (130, 53), (36, 64), (76, 45), (45, 76), (157, 73), (30, 66), (130, 74), (78, 45), (157, 109), (53, 64), (2, 25), (2, 43), (150, 152), (30, 68), (30, 77), (150, 109), (120, 53), (1, 74), (125, 43), (30, 43), (2, 36), (30, 52), (120, 74), (73, 87), (157, 123), (2, 45), (68, 45), (0, 2), (36, 43), (30, 36), (30, 45), (37, 78), (44, 65), (157, 152), (150, 104), (0, 43), (125, 129), (130, 64), (1, 53), (129, 74), (150, 161), (130, 73), (157, 120), (36, 129), (0, 45), (45, 77), (157, 129), (157, 74), (104, 157), (152, 87), (52, 64), (1, 64), (1, 73), (76, 85), (120, 64), (101, 157), (120, 73), (31, 89), (67, 76), (1, 2), (76, 78), (44, 89), (157, 161), (125, 53), (30, 44), (120, 130), (130, 43), (37, 68), (129, 53), (130, 52), (55, 76), (104, 161), (55, 85), (130, 125), (30, 74), (30, 37), (65, 89), (157, 53), (36, 74), (101, 109), (30, 67), (30, 76), (85, 76), (109, 43), (120, 43), (30, 85), (37, 45), (68, 78), (123, 87), (157, 64), (64, 74), (130, 129), (0, 1), (30, 78), (92, 93), (46, 89), (30, 53), (101, 104), (0, 67), (66, 76), (30, 89), (0, 85)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0, 0xc4(%rsp)'}, {'instIndex': 12, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 13, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 14, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 17, 'instruction': 'sete\t%al'}, {'instIndex': 18, 'instruction': 'movb\t%al, 0x1b(%rsp)                   # 1-byte Spill'}, {'instIndex': 20, 'instruction': 'andb\t$1, %al'}, {'instIndex': 21, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 22, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0xe8(%rsp), %rdi'}, {'instIndex': 25, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 26, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 27, 'instruction': 'callq\tbuild_huff'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 30, 'instruction': 'movq\t0xc8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O1/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O1/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 1004 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x538(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x534(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x534(%rsp)                # 4-byte Spill'}, {'instIndex': 170, 'instruction': 'testb\t$1, %al'}, {'instIndex': 171, 'instruction': 'jne\t.LBB3_13'}, {'instIndex': 173, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 174, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 175, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 176, 'instruction': 'movb\t$0, %al'}, {'instIndex': 177, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O1/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O1/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 551 nodes and 956 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1004 instructions in binary file.
[4201968, 4202087, 4202913, 4202938, 4202963]
The execution time of patched subCFG information extraction via angr: 0:00:02.108192
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e67>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "cmp" for 0x401e73>, <DisassemblerInsn "sete" for 0x401e7a>, <DisassemblerInsn "and" for 0x401e7d>, <DisassemblerInsn "movzx" for 0x401e7f>, <DisassemblerInsn "xor" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "lea" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eba>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "xor" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401eec>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "lea" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eba>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "xor" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401eec>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movzx" for 0x402150>, <DisassemblerInsn "add" for 0x402154>, <DisassemblerInsn "lea" for 0x402157>, <DisassemblerInsn "mov" for 0x40215f>, <DisassemblerInsn "xor" for 0x402165>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216b>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "mov" for 0x40217f>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "call" for 0x40219c>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40211b>, <DisassemblerInsn "mov" for 0x402122>, <DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movzx" for 0x402150>, <DisassemblerInsn "add" for 0x402154>, <DisassemblerInsn "lea" for 0x402157>, <DisassemblerInsn "mov" for 0x40215f>, <DisassemblerInsn "xor" for 0x402165>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216b>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "mov" for 0x40217f>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "call" for 0x40219c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "movzx" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f84>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f8d>, <DisassemblerInsn "jmp" for 0x401f94>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021f2>, <DisassemblerInsn "mov" for 0x4021f7>, <DisassemblerInsn "jmp" for 0x4021fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "cmp" for 0x40220a>, <DisassemblerInsn "jle" for 0x40220d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "mov" for 0x401f59>, <DisassemblerInsn "mov" for 0x401f5e>, <DisassemblerInsn "call" for 0x401f65>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401df0>, <DisassemblerInsn "push" for 0x401df1>, <DisassemblerInsn "push" for 0x401df3>, <DisassemblerInsn "sub" for 0x401df4>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "mov" for 0x401e1a>, <DisassemblerInsn "mov" for 0x401e22>, <DisassemblerInsn "mov" for 0x401e29>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e38>, <DisassemblerInsn "mov" for 0x401e40>, <DisassemblerInsn "mov" for 0x401e47>, <DisassemblerInsn "lea" for 0x401e4e>, <DisassemblerInsn "mov" for 0x401e56>, <DisassemblerInsn "cmp" for 0x401e5b>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "jne" for 0x401e65>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021db>, <DisassemblerInsn "mov" for 0x4021df>, <DisassemblerInsn "lea" for 0x4021e4>, <DisassemblerInsn "mov" for 0x4021eb>, <DisassemblerInsn "call" for 0x4021ed>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ba>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "test" for 0x4021cf>, <DisassemblerInsn "jne" for 0x4021d1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f99>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "xor" for 0x401fa6>, <DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "cmp" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fc0>, <DisassemblerInsn "ja" for 0x401fc7>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021a1>, <DisassemblerInsn "sete" for 0x4021a4>, <DisassemblerInsn "mov" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021ac>, <DisassemblerInsn "mov" for 0x4021b3>, <DisassemblerInsn "mov" for 0x4021ba>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "test" for 0x4021cf>, <DisassemblerInsn "jne" for 0x4021d1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x534], eax>', '<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb50]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x750]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x650]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x550]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb50]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x750]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x650]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x550]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x538]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x44a]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x538]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 6, 'blockInsts': ['<movzx~~ecx, word ptr [rsp + 0xb50]>', '<mov~~al, 1>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<jmp~~0x4021ba>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b2>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x444]>', '<cmp~~eax, -1>', '<jle~~0x4024a4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c8]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe0fb]>', '<call~~0x500068>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1350>', '<mov~~dword ptr [rsp + 0x4fc], r9d>', '<mov~~qword ptr [rsp + 0x500], r8>', '<mov~~dword ptr [rsp + 0x50c], ecx>', '<mov~~qword ptr [rsp + 0x510], rdx>', '<mov~~qword ptr [rsp + 0x518], rdi>', '<mov~~eax, dword ptr [rsp + 0x1380]>', '<mov~~dword ptr [rsp + 0x524], eax>', '<mov~~rax, qword ptr [rsp + 0x1378]>', '<mov~~qword ptr [rsp + 0x528], rax>', '<mov~~eax, dword ptr [rsp + 0x1370]>', '<mov~~dword ptr [rsp + 0x530], eax>', '<lea~~rax, [rsp + 0x538]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x534], eax>', '<jne~~0x401e8c>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x513a]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4ae]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402203>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0x4af]>', '<mov~~ecx, 0xffffffff>', '<xor~~eax, eax>', '<mov~~edx, 0xff>', '<cmp~~sil, 0x20>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<ja~~0x4021ba>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~ecx, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4ae]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402203>']}], 'cfg_edge_info': [(0, 1), (26, 11), (21, 26), (6, 8), (8, 10), (1, 4), (10, 13), (26, 10), (0, 2), (22, 26), (7, 8), (1, 3), (8, 11)]}]}
{'decode_plane': [4201968, 4202087, 4202913, 4202938, 4202963]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O1/utvideodec.o---before
The extraction of function: decode_plane
[4201968, 4202087, 4202913, 4202938, 4202963]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 91 nodes and 148 edges in CFGEmulated.
It has 89 nodes and 149 edges in CDG.
It has 4259 nodes and 5509 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201968, 4202087, 4202913, 4202938, 4202963]
{4202752, 4207745, 4207488, 4203011, 4203393, 4206210, 4202124, 4205836, 4207758, 4206866, 4203027, 4202393, 4207769, 4202779, 4207003, 4204575, 4202528, 4202913, 4205216, 4205603, 4203684, 4207782, 4202793, 4207149, 4204080, 4206896, 4207794, 4203187, 4205491, 4205746, 4202938, 4205370, 4204988, 4205633, 4203333, 4203078, 4207301, 4203464, 4204361, 4203978, 4202316, 4202445, 4202574, 4206668, 4202963, 4206292, 4203606, 4204887, 4204504, 4204250, 4206076, 4207454, 4205918, 4207584, 4204642, 4204131, 4202087, 4204391, 4204776, 4202346, 4206460, 4201968, 4203249, 4202994, 4202228, 4207734, 4206586, 4202364, 4207743}
[25, 50, 9, 6, 60, 2, 46, 61, 19, 59, 57, 68, 89, 14, 37, 62, 79, 66, 65, 17, 11, 73, 24, 45, 36, 82, 22, 56, 7, 20, 38, 63, 74, 49, 58, 10, 12, 41, 23, 18, 78, 31, 32, 83, 64, 72, 51, 13, 30, 52, 1, 76, 86, 3, 48, 75, 44, 87, 8, 40, 67, 26, 81, 15, 77, 39, 33, 4, 70, 27, 21, 35, 80, 54, 84, 0, 88, 47]
The execution time of patched slicing information extraction via angr: 0:00:08.907693
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f1>, <DisassemblerInsn "mov" for 0x4022f8>, <DisassemblerInsn "mov" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402306>, <DisassemblerInsn "mov" for 0x40230d>, <DisassemblerInsn "add" for 0x402314>, <DisassemblerInsn "mov" for 0x402317>, <DisassemblerInsn "imul" for 0x40231e>, <DisassemblerInsn "cdq" for 0x402321>, <DisassemblerInsn "idiv" for 0x402322>, <DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232b>, <DisassemblerInsn "mov" for 0x40232d>, <DisassemblerInsn "and" for 0x402334>, <DisassemblerInsn "mov" for 0x402336>, <DisassemblerInsn "cmp" for 0x40233d>, <DisassemblerInsn "jge" for 0x40233f>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403476>, <DisassemblerInsn "sub" for 0x40347a>, <DisassemblerInsn "je" for 0x40347d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ba>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "test" for 0x4021cf>, <DisassemblerInsn "jne" for 0x4021d1>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f6a>, <DisassemblerInsn "mov" for 0x401f71>, <DisassemblerInsn "cmp" for 0x401f78>, <DisassemblerInsn "jne" for 0x401f7a>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aa0>, <DisassemblerInsn "mov" for 0x402aa7>, <DisassemblerInsn "mov" for 0x402aaf>, <DisassemblerInsn "mov" for 0x402ab7>, <DisassemblerInsn "mov" for 0x402abe>, <DisassemblerInsn "mov" for 0x402ac6>, <DisassemblerInsn "mov" for 0x402ace>, <DisassemblerInsn "mov" for 0x402ad6>, <DisassemblerInsn "mov" for 0x402ad9>, <DisassemblerInsn "mov" for 0x402ae1>, <DisassemblerInsn "mov" for 0x402ae3>, <DisassemblerInsn "mov" for 0x402aea>, <DisassemblerInsn "sub" for 0x402af0>, <DisassemblerInsn "mov" for 0x402af3>, <DisassemblerInsn "mov" for 0x402af6>, <DisassemblerInsn "mov" for 0x402afe>, <DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "mov" for 0x402b08>, <DisassemblerInsn "mov" for 0x402b0d>, <DisassemblerInsn "mov" for 0x402b15>, <DisassemblerInsn "mov" for 0x402b1c>, <DisassemblerInsn "mov" for 0x402b23>, <DisassemblerInsn "mov" for 0x402b2b>, <DisassemblerInsn "mov" for 0x402b33>, <DisassemblerInsn "mov" for 0x402b3a>, <DisassemblerInsn "mov" for 0x402b42>, <DisassemblerInsn "mov" for 0x402b4a>, <DisassemblerInsn "mov" for 0x402b52>, <DisassemblerInsn "mov" for 0x402b59>, <DisassemblerInsn "mov" for 0x402b61>, <DisassemblerInsn "mov" for 0x402b69>, <DisassemblerInsn "mov" for 0x402b70>, <DisassemblerInsn "mov" for 0x402b78>, <DisassemblerInsn "xor" for 0x402b80>, <DisassemblerInsn "test" for 0x402b82>, <DisassemblerInsn "mov" for 0x402b86>, <DisassemblerInsn "mov" for 0x402b8e>, <DisassemblerInsn "mov" for 0x402b95>, <DisassemblerInsn "mov" for 0x402b9d>, <DisassemblerInsn "mov" for 0x402ba5>, <DisassemblerInsn "jne" for 0x402bac>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "lea" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eba>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "xor" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401eec>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "mov" for 0x402390>, <DisassemblerInsn "mov" for 0x402397>, <DisassemblerInsn "mov" for 0x40239e>, <DisassemblerInsn "mov" for 0x4023a5>, <DisassemblerInsn "xor" for 0x4023ad>, <DisassemblerInsn "test" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b2>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "jne" for 0x4023c1>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032c5>, <DisassemblerInsn "mov" for 0x4032cd>, <DisassemblerInsn "mov" for 0x4032d5>, <DisassemblerInsn "mov" for 0x4032dd>, <DisassemblerInsn "mov" for 0x4032e5>, <DisassemblerInsn "mov" for 0x4032ed>, <DisassemblerInsn "mov" for 0x4032f5>, <DisassemblerInsn "mov" for 0x4032fa>, <DisassemblerInsn "mov" for 0x4032ff>, <DisassemblerInsn "mov" for 0x403304>, <DisassemblerInsn "sub" for 0x403307>, <DisassemblerInsn "shl" for 0x40330a>, <DisassemblerInsn "mov" for 0x40330d>, <DisassemblerInsn "add" for 0x403310>, <DisassemblerInsn "add" for 0x403313>, <DisassemblerInsn "mov" for 0x403316>, <DisassemblerInsn "xor" for 0x40331b>, <DisassemblerInsn "cmp" for 0x40331d>, <DisassemblerInsn "mov" for 0x403321>, <DisassemblerInsn "mov" for 0x403329>, <DisassemblerInsn "mov" for 0x403331>, <DisassemblerInsn "mov" for 0x403339>, <DisassemblerInsn "mov" for 0x403341>, <DisassemblerInsn "mov" for 0x403349>, <DisassemblerInsn "mov" for 0x403351>, <DisassemblerInsn "jle" for 0x403358>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034b2>, <DisassemblerInsn "add" for 0x4034b9>, <DisassemblerInsn "pop" for 0x4034c0>, <DisassemblerInsn "pop" for 0x4034c1>, <DisassemblerInsn "pop" for 0x4034c3>, <DisassemblerInsn "ret" for 0x4034c4>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "mov" for 0x40295f>, <DisassemblerInsn "mov" for 0x402966>, <DisassemblerInsn "and" for 0x40296d>, <DisassemblerInsn "mov" for 0x402972>, <DisassemblerInsn "mov" for 0x402974>, <DisassemblerInsn "add" for 0x402977>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "xor" for 0x402982>, <DisassemblerInsn "xor" for 0x402984>, <DisassemblerInsn "cmp" for 0x402986>, <DisassemblerInsn "mov" for 0x402989>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402997>, <DisassemblerInsn "mov" for 0x40299a>, <DisassemblerInsn "mov" for 0x4029a2>, <DisassemblerInsn "mov" for 0x4029aa>, <DisassemblerInsn "mov" for 0x4029b2>, <DisassemblerInsn "je" for 0x4029ba>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028e8>, <DisassemblerInsn "mov" for 0x4028f0>, <DisassemblerInsn "mov" for 0x4028f8>, <DisassemblerInsn "mov" for 0x4028ff>, <DisassemblerInsn "mov" for 0x402907>, <DisassemblerInsn "shl" for 0x40290e>, <DisassemblerInsn "mov" for 0x402911>, <DisassemblerInsn "xor" for 0x402918>, <DisassemblerInsn "xor" for 0x40291a>, <DisassemblerInsn "cmp" for 0x40291c>, <DisassemblerInsn "mov" for 0x402920>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "mov" for 0x402931>, <DisassemblerInsn "mov" for 0x402939>, <DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402949>, <DisassemblerInsn "je" for 0x402951>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb2>, <DisassemblerInsn "mov" for 0x402cba>, <DisassemblerInsn "mov" for 0x402cc2>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "sub" for 0x402cda>, <DisassemblerInsn "setb" for 0x402cdc>, <DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "sub" for 0x402ce3>, <DisassemblerInsn "setb" for 0x402ce6>, <DisassemblerInsn "and" for 0x402cea>, <DisassemblerInsn "test" for 0x402ced>, <DisassemblerInsn "mov" for 0x402cf1>, <DisassemblerInsn "mov" for 0x402cf8>, <DisassemblerInsn "mov" for 0x402d00>, <DisassemblerInsn "jne" for 0x402d08>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40304c>, <DisassemblerInsn "mov" for 0x403054>, <DisassemblerInsn "mov" for 0x40305c>, <DisassemblerInsn "mov" for 0x403063>, <DisassemblerInsn "mov" for 0x40306a>, <DisassemblerInsn "mov" for 0x403072>, <DisassemblerInsn "add" for 0x40307a>, <DisassemblerInsn "mov" for 0x40307d>, <DisassemblerInsn "mov" for 0x40307f>, <DisassemblerInsn "shr" for 0x403082>, <DisassemblerInsn "mov" for 0x403085>, <DisassemblerInsn "add" for 0x403088>, <DisassemblerInsn "mov" for 0x40308b>, <DisassemblerInsn "mov" for 0x40308d>, <DisassemblerInsn "movsx" for 0x403090>, <DisassemblerInsn "movsx" for 0x403096>, <DisassemblerInsn "mov" for 0x40309b>, <DisassemblerInsn "mov" for 0x4030a2>, <DisassemblerInsn "mov" for 0x4030aa>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c0>, <DisassemblerInsn "mov" for 0x4030c7>, <DisassemblerInsn "mov" for 0x4030cf>, <DisassemblerInsn "mov" for 0x4030d7>, <DisassemblerInsn "mov" for 0x4030de>, <DisassemblerInsn "mov" for 0x4030e5>, <DisassemblerInsn "mov" for 0x4030e9>, <DisassemblerInsn "mov" for 0x4030ee>, <DisassemblerInsn "mov" for 0x4030f2>, <DisassemblerInsn "shl" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f7>, <DisassemblerInsn "mov" for 0x4030fb>, <DisassemblerInsn "sub" for 0x403100>, <DisassemblerInsn "mov" for 0x403102>, <DisassemblerInsn "cmp" for 0x403109>, <DisassemblerInsn "jge" for 0x40310c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402213>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "add" for 0x40221e>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x40222d>, <DisassemblerInsn "xor" for 0x402234>, <DisassemblerInsn "cmp" for 0x402236>, <DisassemblerInsn "mov" for 0x402239>, <DisassemblerInsn "jle" for 0x402240>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c8>, <DisassemblerInsn "mov" for 0x4023d0>, <DisassemblerInsn "mov" for 0x4023d8>, <DisassemblerInsn "mov" for 0x4023e0>, <DisassemblerInsn "mov" for 0x4023e8>, <DisassemblerInsn "mov" for 0x4023f0>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "mov" for 0x402400>, <DisassemblerInsn "add" for 0x402403>, <DisassemblerInsn "mov" for 0x402406>, <DisassemblerInsn "test" for 0x40240d>, <DisassemblerInsn "mov" for 0x402411>, <DisassemblerInsn "cmovne" for 0x402414>, <DisassemblerInsn "mov" for 0x402418>, <DisassemblerInsn "test" for 0x402420>, <DisassemblerInsn "cmovne" for 0x402424>, <DisassemblerInsn "mov" for 0x402428>, <DisassemblerInsn "mov" for 0x40242f>, <DisassemblerInsn "add" for 0x402433>, <DisassemblerInsn "mov" for 0x402436>, <DisassemblerInsn "cmp" for 0x40243e>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "mov" for 0x402449>, <DisassemblerInsn "jl" for 0x402450>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029bc>, <DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029cc>, <DisassemblerInsn "mov" for 0x4029d4>, <DisassemblerInsn "bswap" for 0x4029d7>, <DisassemblerInsn "mov" for 0x4029da>, <DisassemblerInsn "add" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e1>, <DisassemblerInsn "mov" for 0x4029e6>, <DisassemblerInsn "mov" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f5>, <DisassemblerInsn "mov" for 0x4029fd>, <DisassemblerInsn "mov" for 0x402a05>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a15>, <DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a23>, <DisassemblerInsn "mov" for 0x402a2b>, <DisassemblerInsn "mov" for 0x402a32>, <DisassemblerInsn "mov" for 0x402a3a>, <DisassemblerInsn "mov" for 0x402a42>, <DisassemblerInsn "mov" for 0x402a4a>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "mov" for 0x402a6a>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "cmp" for 0x402a81>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "mov" for 0x402a92>, <DisassemblerInsn "jge" for 0x402a9a>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e80>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40322d>, <DisassemblerInsn "mov" for 0x403235>, <DisassemblerInsn "mov" for 0x40323c>, <DisassemblerInsn "mov" for 0x403244>, <DisassemblerInsn "mov" for 0x40324c>, <DisassemblerInsn "mov" for 0x403253>, <DisassemblerInsn "mov" for 0x40325b>, <DisassemblerInsn "mov" for 0x403263>, <DisassemblerInsn "add" for 0x40326a>, <DisassemblerInsn "add" for 0x40326d>, <DisassemblerInsn "cmp" for 0x403270>, <DisassemblerInsn "mov" for 0x403273>, <DisassemblerInsn "mov" for 0x40327b>, <DisassemblerInsn "mov" for 0x403282>, <DisassemblerInsn "mov" for 0x403289>, <DisassemblerInsn "mov" for 0x40328c>, <DisassemblerInsn "mov" for 0x403294>, <DisassemblerInsn "mov" for 0x403297>, <DisassemblerInsn "mov" for 0x40329f>, <DisassemblerInsn "mov" for 0x4032a1>, <DisassemblerInsn "mov" for 0x4032a8>, <DisassemblerInsn "mov" for 0x4032af>, <DisassemblerInsn "mov" for 0x4032b7>, <DisassemblerInsn "jne" for 0x4032bf>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40335e>, <DisassemblerInsn "mov" for 0x403362>, <DisassemblerInsn "mov" for 0x40336a>, <DisassemblerInsn "mov" for 0x40336d>, <DisassemblerInsn "lea" for 0x403372>, <DisassemblerInsn "mov" for 0x403379>, <DisassemblerInsn "call" for 0x40337b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40204e>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x40205d>, <DisassemblerInsn "mov" for 0x402064>, <DisassemblerInsn "movzx" for 0x40206b>, <DisassemblerInsn "mov" for 0x40206e>, <DisassemblerInsn "mov" for 0x402075>, <DisassemblerInsn "sub" for 0x40207a>, <DisassemblerInsn "mov" for 0x40207c>, <DisassemblerInsn "shr" for 0x402083>, <DisassemblerInsn "mov" for 0x402085>, <DisassemblerInsn "mov" for 0x40208c>, <DisassemblerInsn "mov" for 0x402093>, <DisassemblerInsn "mov" for 0x40209a>, <DisassemblerInsn "mov" for 0x4020a1>, <DisassemblerInsn "mov" for 0x4020a9>, <DisassemblerInsn "add" for 0x4020b0>, <DisassemblerInsn "mov" for 0x4020b3>, <DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "shr" for 0x4020bf>, <DisassemblerInsn "mov" for 0x4020c1>, <DisassemblerInsn "mov" for 0x4020c8>, <DisassemblerInsn "add" for 0x4020cf>, <DisassemblerInsn "mov" for 0x4020d1>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "add" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020df>, <DisassemblerInsn "cmp" for 0x4020e7>, <DisassemblerInsn "mov" for 0x4020eb>, <DisassemblerInsn "mov" for 0x4020f3>, <DisassemblerInsn "jg" for 0x4020fa>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "cmp" for 0x40220a>, <DisassemblerInsn "jle" for 0x40220d>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d0c>, <DisassemblerInsn "mov" for 0x402d13>, <DisassemblerInsn "mov" for 0x402d1b>, <DisassemblerInsn "mov" for 0x402d23>, <DisassemblerInsn "bswap" for 0x402d25>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d29>, <DisassemblerInsn "sub" for 0x402d2e>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "shl" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d35>, <DisassemblerInsn "or" for 0x402d3d>, <DisassemblerInsn "add" for 0x402d40>, <DisassemblerInsn "add" for 0x402d44>, <DisassemblerInsn "mov" for 0x402d47>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "mov" for 0x402d56>, <DisassemblerInsn "mov" for 0x402d5e>, <DisassemblerInsn "mov" for 0x402d66>, <DisassemblerInsn "mov" for 0x402d6d>, <DisassemblerInsn "mov" for 0x402d75>, <DisassemblerInsn "mov" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8d>, <DisassemblerInsn "mov" for 0x402d94>, <DisassemblerInsn "shr" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9a>, <DisassemblerInsn "movabs" for 0x402da2>, <DisassemblerInsn "and" for 0x402dac>, <DisassemblerInsn "movsx" for 0x402daf>, <DisassemblerInsn "mov" for 0x402db4>, <DisassemblerInsn "mov" for 0x402dbb>, <DisassemblerInsn "movsx" for 0x402dc1>, <DisassemblerInsn "mov" for 0x402dc5>, <DisassemblerInsn "cmp" for 0x402dcc>, <DisassemblerInsn "mov" for 0x402dd1>, <DisassemblerInsn "mov" for 0x402dd8>, <DisassemblerInsn "mov" for 0x402de0>, <DisassemblerInsn "mov" for 0x402de8>, <DisassemblerInsn "mov" for 0x402def>, <DisassemblerInsn "jge" for 0x402df6>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40211b>, <DisassemblerInsn "mov" for 0x402122>, <DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movzx" for 0x402150>, <DisassemblerInsn "add" for 0x402154>, <DisassemblerInsn "lea" for 0x402157>, <DisassemblerInsn "mov" for 0x40215f>, <DisassemblerInsn "xor" for 0x402165>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216b>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "mov" for 0x40217f>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "call" for 0x40219c>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402767>, <DisassemblerInsn "mov" for 0x40276f>, <DisassemblerInsn "mov" for 0x402777>, <DisassemblerInsn "mov" for 0x40277f>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "mov" for 0x40278f>, <DisassemblerInsn "mov" for 0x402797>, <DisassemblerInsn "mov" for 0x40279c>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "mov" for 0x4027b4>, <DisassemblerInsn "mov" for 0x4027bc>, <DisassemblerInsn "mov" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027cc>, <DisassemblerInsn "jmp" for 0x4027d3>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023c3>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40319b>, <DisassemblerInsn "mov" for 0x4031a2>, <DisassemblerInsn "mov" for 0x4031a7>, <DisassemblerInsn "mov" for 0x4031ac>, <DisassemblerInsn "mov" for 0x4031b4>, <DisassemblerInsn "mov" for 0x4031bc>, <DisassemblerInsn "mov" for 0x4031c4>, <DisassemblerInsn "mov" for 0x4031cc>, <DisassemblerInsn "mov" for 0x4031d3>, <DisassemblerInsn "mov" for 0x4031db>, <DisassemblerInsn "mov" for 0x4031e0>, <DisassemblerInsn "add" for 0x4031e3>, <DisassemblerInsn "test" for 0x4031e5>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "cmovne" for 0x4031ec>, <DisassemblerInsn "test" for 0x4031f0>, <DisassemblerInsn "cmovne" for 0x4031f4>, <DisassemblerInsn "mov" for 0x4031f7>, <DisassemblerInsn "add" for 0x4031fb>, <DisassemblerInsn "cmp" for 0x4031fe>, <DisassemblerInsn "mov" for 0x403201>, <DisassemblerInsn "mov" for 0x403209>, <DisassemblerInsn "mov" for 0x403210>, <DisassemblerInsn "mov" for 0x403218>, <DisassemblerInsn "mov" for 0x403220>, <DisassemblerInsn "jl" for 0x403227>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021f2>, <DisassemblerInsn "mov" for 0x4021f7>, <DisassemblerInsn "jmp" for 0x4021fe>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402862>, <DisassemblerInsn "mov" for 0x40286a>, <DisassemblerInsn "mov" for 0x402872>, <DisassemblerInsn "mov" for 0x40287a>, <DisassemblerInsn "mov" for 0x402881>, <DisassemblerInsn "mov" for 0x402889>, <DisassemblerInsn "mov" for 0x402891>, <DisassemblerInsn "mov" for 0x402899>, <DisassemblerInsn "mov" for 0x4028a1>, <DisassemblerInsn "mov" for 0x4028a4>, <DisassemblerInsn "cmp" for 0x4028ac>, <DisassemblerInsn "mov" for 0x4028b3>, <DisassemblerInsn "mov" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c2>, <DisassemblerInsn "mov" for 0x4028ca>, <DisassemblerInsn "mov" for 0x4028d2>, <DisassemblerInsn "mov" for 0x4028da>, <DisassemblerInsn "ja" for 0x4028e2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "movzx" for 0x401f7c>, <DisassemblerInsn "mov" for 0x401f84>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f8d>, <DisassemblerInsn "jmp" for 0x401f94>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402246>, <DisassemblerInsn "mov" for 0x40224d>, <DisassemblerInsn "mov" for 0x402254>, <DisassemblerInsn "mov" for 0x40225b>, <DisassemblerInsn "imul" for 0x402262>, <DisassemblerInsn "cmp" for 0x402265>, <DisassemblerInsn "setg" for 0x402268>, <DisassemblerInsn "mov" for 0x40226c>, <DisassemblerInsn "cmp" for 0x402274>, <DisassemblerInsn "sete" for 0x402277>, <DisassemblerInsn "mov" for 0x40227b>, <DisassemblerInsn "movsxd" for 0x402283>, <DisassemblerInsn "mov" for 0x402286>, <DisassemblerInsn "cdqe" for 0x40228e>, <DisassemblerInsn "mov" for 0x402290>, <DisassemblerInsn "xor" for 0x402298>, <DisassemblerInsn "mov" for 0x40229a>, <DisassemblerInsn "mov" for 0x4022a1>, <DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022aa>, <DisassemblerInsn "jmp" for 0x4022b1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402749>, <DisassemblerInsn "mov" for 0x402751>, <DisassemblerInsn "mov" for 0x402754>, <DisassemblerInsn "lea" for 0x402759>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "call" for 0x402762>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402bae>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403380>, <DisassemblerInsn "mov" for 0x403388>, <DisassemblerInsn "mov" for 0x40338d>, <DisassemblerInsn "mov" for 0x403392>, <DisassemblerInsn "mov" for 0x40339a>, <DisassemblerInsn "mov" for 0x4033a2>, <DisassemblerInsn "xor" for 0x4033a7>, <DisassemblerInsn "mov" for 0x4033a9>, <DisassemblerInsn "mov" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b9>, <DisassemblerInsn "mov" for 0x4033c1>, <DisassemblerInsn "mov" for 0x4033c9>, <DisassemblerInsn "mov" for 0x4033d1>, <DisassemblerInsn "mov" for 0x4033d9>, <DisassemblerInsn "mov" for 0x4033e0>, <DisassemblerInsn "mov" for 0x4033e7>, <DisassemblerInsn "mov" for 0x4033ef>, <DisassemblerInsn "mov" for 0x4033f7>, <DisassemblerInsn "mov" for 0x4033ff>, <DisassemblerInsn "mov" for 0x403407>, <DisassemblerInsn "mov" for 0x40340f>, <DisassemblerInsn "mov" for 0x403417>, <DisassemblerInsn "mov" for 0x40341f>, <DisassemblerInsn "mov" for 0x403427>, <DisassemblerInsn "test" for 0x40342c>, <DisassemblerInsn "mov" for 0x40342f>, <DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "mov" for 0x40344f>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345f>, <DisassemblerInsn "mov" for 0x403467>, <DisassemblerInsn "je" for 0x40346e>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025da>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "mov" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025f0>, <DisassemblerInsn "mov" for 0x4025f8>, <DisassemblerInsn "mov" for 0x402600>, <DisassemblerInsn "mov" for 0x402608>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "mov" for 0x402618>, <DisassemblerInsn "mov" for 0x402620>, <DisassemblerInsn "mov" for 0x402628>, <DisassemblerInsn "mov" for 0x402630>, <DisassemblerInsn "mov" for 0x402638>, <DisassemblerInsn "mov" for 0x40263f>, <DisassemblerInsn "mov" for 0x402646>, <DisassemblerInsn "mov" for 0x40264e>, <DisassemblerInsn "mov" for 0x402650>, <DisassemblerInsn "movsxd" for 0x402657>, <DisassemblerInsn "cmp" for 0x40265a>, <DisassemblerInsn "jge" for 0x40265d>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a15>, <DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a23>, <DisassemblerInsn "mov" for 0x402a2b>, <DisassemblerInsn "mov" for 0x402a32>, <DisassemblerInsn "mov" for 0x402a3a>, <DisassemblerInsn "mov" for 0x402a42>, <DisassemblerInsn "mov" for 0x402a4a>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "mov" for 0x402a6a>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "cmp" for 0x402a81>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "mov" for 0x402a92>, <DisassemblerInsn "jge" for 0x402a9a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "mov" for 0x401fdd>, <DisassemblerInsn "mov" for 0x401fe4>, <DisassemblerInsn "sub" for 0x401feb>, <DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "sete" for 0x401ff5>, <DisassemblerInsn "test" for 0x401ff8>, <DisassemblerInsn "setne" for 0x401ffb>, <DisassemblerInsn "and" for 0x401ffe>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "add" for 0x402007>, <DisassemblerInsn "mov" for 0x40200b>, <DisassemblerInsn "test" for 0x402013>, <DisassemblerInsn "mov" for 0x402016>, <DisassemblerInsn "jne" for 0x40201e>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021db>, <DisassemblerInsn "mov" for 0x4021df>, <DisassemblerInsn "lea" for 0x4021e4>, <DisassemblerInsn "mov" for 0x4021eb>, <DisassemblerInsn "call" for 0x4021ed>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402456>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "mov" for 0x402464>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "add" for 0x40247b>, <DisassemblerInsn "add" for 0x40247e>, <DisassemblerInsn "cmp" for 0x402481>, <DisassemblerInsn "mov" for 0x402483>, <DisassemblerInsn "mov" for 0x40248b>, <DisassemblerInsn "mov" for 0x402492>, <DisassemblerInsn "je" for 0x402499>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movzx" for 0x402150>, <DisassemblerInsn "add" for 0x402154>, <DisassemblerInsn "lea" for 0x402157>, <DisassemblerInsn "mov" for 0x40215f>, <DisassemblerInsn "xor" for 0x402165>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216b>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "mov" for 0x40217f>, <DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "call" for 0x40219c>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402100>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "mov" for 0x402109>, <DisassemblerInsn "cmp" for 0x402110>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "jb" for 0x402119>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030c0>, <DisassemblerInsn "mov" for 0x4030c7>, <DisassemblerInsn "mov" for 0x4030cf>, <DisassemblerInsn "mov" for 0x4030d7>, <DisassemblerInsn "mov" for 0x4030de>, <DisassemblerInsn "mov" for 0x4030e5>, <DisassemblerInsn "mov" for 0x4030e9>, <DisassemblerInsn "mov" for 0x4030ee>, <DisassemblerInsn "mov" for 0x4030f2>, <DisassemblerInsn "shl" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f7>, <DisassemblerInsn "mov" for 0x4030fb>, <DisassemblerInsn "sub" for 0x403100>, <DisassemblerInsn "mov" for 0x403102>, <DisassemblerInsn "cmp" for 0x403109>, <DisassemblerInsn "jge" for 0x40310c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022b3>, <DisassemblerInsn "mov" for 0x4022ba>, <DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "mov" for 0x4022c9>, <DisassemblerInsn "xor" for 0x4022cb>, <DisassemblerInsn "cmp" for 0x4022cd>, <DisassemblerInsn "mov" for 0x4022cf>, <DisassemblerInsn "mov" for 0x4022d6>, <DisassemblerInsn "mov" for 0x4022dd>, <DisassemblerInsn "mov" for 0x4022e4>, <DisassemblerInsn "jge" for 0x4022eb>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402705>, <DisassemblerInsn "mov" for 0x40270d>, <DisassemblerInsn "mov" for 0x402715>, <DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "shl" for 0x402723>, <DisassemblerInsn "movabs" for 0x402727>, <DisassemblerInsn "and" for 0x402731>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "sub" for 0x402737>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "cmp" for 0x402740>, <DisassemblerInsn "jne" for 0x402743>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ed4>, <DisassemblerInsn "mov" for 0x402edc>, <DisassemblerInsn "mov" for 0x402ee4>, <DisassemblerInsn "mov" for 0x402eeb>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402efa>, <DisassemblerInsn "mov" for 0x402f02>, <DisassemblerInsn "mov" for 0x402f0a>, <DisassemblerInsn "mov" for 0x402f12>, <DisassemblerInsn "add" for 0x402f19>, <DisassemblerInsn "mov" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f1e>, <DisassemblerInsn "shr" for 0x402f21>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "add" for 0x402f27>, <DisassemblerInsn "mov" for 0x402f2a>, <DisassemblerInsn "mov" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "movsx" for 0x402f35>, <DisassemblerInsn "mov" for 0x402f39>, <DisassemblerInsn "movsx" for 0x402f40>, <DisassemblerInsn "mov" for 0x402f45>, <DisassemblerInsn "cmp" for 0x402f4c>, <DisassemblerInsn "mov" for 0x402f51>, <DisassemblerInsn "mov" for 0x402f58>, <DisassemblerInsn "mov" for 0x402f60>, <DisassemblerInsn "mov" for 0x402f68>, <DisassemblerInsn "mov" for 0x402f6f>, <DisassemblerInsn "jge" for 0x402f76>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bb3>, <DisassemblerInsn "mov" for 0x402bba>, <DisassemblerInsn "mov" for 0x402bc2>, <DisassemblerInsn "mov" for 0x402bca>, <DisassemblerInsn "mov" for 0x402bd2>, <DisassemblerInsn "mov" for 0x402bda>, <DisassemblerInsn "mov" for 0x402be2>, <DisassemblerInsn "mov" for 0x402be9>, <DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "sub" for 0x402c10>, <DisassemblerInsn "shl" for 0x402c13>, <DisassemblerInsn "add" for 0x402c16>, <DisassemblerInsn "add" for 0x402c18>, <DisassemblerInsn "cmp" for 0x402c1a>, <DisassemblerInsn "jge" for 0x402c1d>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d0a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403499>, <DisassemblerInsn "call" for 0x4034a1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402036>, <DisassemblerInsn "mov" for 0x402039>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "jle" for 0x402048>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402345>, <DisassemblerInsn "mov" for 0x40234c>, <DisassemblerInsn "mov" for 0x402354>, <DisassemblerInsn "movsxd" for 0x40235c>, <DisassemblerInsn "imul" for 0x40235f>, <DisassemblerInsn "add" for 0x402363>, <DisassemblerInsn "mov" for 0x402366>, <DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "mov" for 0x402373>, <DisassemblerInsn "mov" for 0x40237a>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "mov" for 0x402390>, <DisassemblerInsn "mov" for 0x402397>, <DisassemblerInsn "mov" for 0x40239e>, <DisassemblerInsn "mov" for 0x4023a5>, <DisassemblerInsn "xor" for 0x4023ad>, <DisassemblerInsn "test" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b2>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "jne" for 0x4023c1>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40347f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e67>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "cmp" for 0x401e73>, <DisassemblerInsn "sete" for 0x401e7a>, <DisassemblerInsn "and" for 0x401e7d>, <DisassemblerInsn "movzx" for 0x401e7f>, <DisassemblerInsn "xor" for 0x401e82>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "lea" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eba>, <DisassemblerInsn "lea" for 0x401ec2>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "xor" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401eec>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d5e>, <DisassemblerInsn "mov" for 0x402d66>, <DisassemblerInsn "mov" for 0x402d6d>, <DisassemblerInsn "mov" for 0x402d75>, <DisassemblerInsn "mov" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8d>, <DisassemblerInsn "mov" for 0x402d94>, <DisassemblerInsn "shr" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9a>, <DisassemblerInsn "movabs" for 0x402da2>, <DisassemblerInsn "and" for 0x402dac>, <DisassemblerInsn "movsx" for 0x402daf>, <DisassemblerInsn "mov" for 0x402db4>, <DisassemblerInsn "mov" for 0x402dbb>, <DisassemblerInsn "movsx" for 0x402dc1>, <DisassemblerInsn "mov" for 0x402dc5>, <DisassemblerInsn "cmp" for 0x402dcc>, <DisassemblerInsn "mov" for 0x402dd1>, <DisassemblerInsn "mov" for 0x402dd8>, <DisassemblerInsn "mov" for 0x402de0>, <DisassemblerInsn "mov" for 0x402de8>, <DisassemblerInsn "mov" for 0x402def>, <DisassemblerInsn "jge" for 0x402df6>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ff8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "add" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f1e>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "add" for 0x401f27>, <DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "cmp" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "jne" for 0x401f4a>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403474>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c41>, <DisassemblerInsn "mov" for 0x402c49>, <DisassemblerInsn "mov" for 0x402c51>, <DisassemblerInsn "mov" for 0x402c59>, <DisassemblerInsn "mov" for 0x402c61>, <DisassemblerInsn "mov" for 0x402c69>, <DisassemblerInsn "mov" for 0x402c71>, <DisassemblerInsn "mov" for 0x402c76>, <DisassemblerInsn "mov" for 0x402c7e>, <DisassemblerInsn "mov" for 0x402c86>, <DisassemblerInsn "mov" for 0x402c8e>, <DisassemblerInsn "mov" for 0x402c96>, <DisassemblerInsn "mov" for 0x402c9e>, <DisassemblerInsn "mov" for 0x402ca6>, <DisassemblerInsn "jmp" for 0x402cad>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40249f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ffa>, <DisassemblerInsn "mov" for 0x403001>, <DisassemblerInsn "mov" for 0x403009>, <DisassemblerInsn "mov" for 0x403011>, <DisassemblerInsn "bswap" for 0x403013>, <DisassemblerInsn "mov" for 0x403015>, <DisassemblerInsn "mov" for 0x403017>, <DisassemblerInsn "sub" for 0x40301c>, <DisassemblerInsn "mov" for 0x40301e>, <DisassemblerInsn "shl" for 0x403020>, <DisassemblerInsn "mov" for 0x403023>, <DisassemblerInsn "or" for 0x40302b>, <DisassemblerInsn "add" for 0x40302e>, <DisassemblerInsn "add" for 0x403032>, <DisassemblerInsn "mov" for 0x403035>, <DisassemblerInsn "mov" for 0x40303c>, <DisassemblerInsn "mov" for 0x403044>, <DisassemblerInsn "mov" for 0x40304c>, <DisassemblerInsn "mov" for 0x403054>, <DisassemblerInsn "mov" for 0x40305c>, <DisassemblerInsn "mov" for 0x403063>, <DisassemblerInsn "mov" for 0x40306a>, <DisassemblerInsn "mov" for 0x403072>, <DisassemblerInsn "add" for 0x40307a>, <DisassemblerInsn "mov" for 0x40307d>, <DisassemblerInsn "mov" for 0x40307f>, <DisassemblerInsn "shr" for 0x403082>, <DisassemblerInsn "mov" for 0x403085>, <DisassemblerInsn "add" for 0x403088>, <DisassemblerInsn "mov" for 0x40308b>, <DisassemblerInsn "mov" for 0x40308d>, <DisassemblerInsn "movsx" for 0x403090>, <DisassemblerInsn "movsx" for 0x403096>, <DisassemblerInsn "mov" for 0x40309b>, <DisassemblerInsn "mov" for 0x4030a2>, <DisassemblerInsn "mov" for 0x4030aa>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c0>, <DisassemblerInsn "mov" for 0x4030c7>, <DisassemblerInsn "mov" for 0x4030cf>, <DisassemblerInsn "mov" for 0x4030d7>, <DisassemblerInsn "mov" for 0x4030de>, <DisassemblerInsn "mov" for 0x4030e5>, <DisassemblerInsn "mov" for 0x4030e9>, <DisassemblerInsn "mov" for 0x4030ee>, <DisassemblerInsn "mov" for 0x4030f2>, <DisassemblerInsn "shl" for 0x4030f4>, <DisassemblerInsn "mov" for 0x4030f7>, <DisassemblerInsn "mov" for 0x4030fb>, <DisassemblerInsn "sub" for 0x403100>, <DisassemblerInsn "mov" for 0x403102>, <DisassemblerInsn "cmp" for 0x403109>, <DisassemblerInsn "jge" for 0x40310c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f99>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "xor" for 0x401fa6>, <DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "cmp" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fc0>, <DisassemblerInsn "ja" for 0x401fc7>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40348e>, <DisassemblerInsn "mov" for 0x403490>, <DisassemblerInsn "jmp" for 0x403497>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c23>, <DisassemblerInsn "mov" for 0x402c2b>, <DisassemblerInsn "mov" for 0x402c2e>, <DisassemblerInsn "lea" for 0x402c33>, <DisassemblerInsn "mov" for 0x402c3a>, <DisassemblerInsn "call" for 0x402c3c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402663>, <DisassemblerInsn "mov" for 0x40266b>, <DisassemblerInsn "mov" for 0x402673>, <DisassemblerInsn "mov" for 0x40267b>, <DisassemblerInsn "mov" for 0x402682>, <DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "add" for 0x40268c>, <DisassemblerInsn "mov" for 0x402690>, <DisassemblerInsn "imul" for 0x402698>, <DisassemblerInsn "cdq" for 0x40269b>, <DisassemblerInsn "idiv" for 0x40269c>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a5>, <DisassemblerInsn "mov" for 0x4026a7>, <DisassemblerInsn "and" for 0x4026af>, <DisassemblerInsn "mov" for 0x4026b2>, <DisassemblerInsn "movsxd" for 0x4026b9>, <DisassemblerInsn "imul" for 0x4026bc>, <DisassemblerInsn "add" for 0x4026c0>, <DisassemblerInsn "mov" for 0x4026c3>, <DisassemblerInsn "xor" for 0x4026cb>, <DisassemblerInsn "cmp" for 0x4026cd>, <DisassemblerInsn "mov" for 0x4026d1>, <DisassemblerInsn "je" for 0x4026d8>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403112>, <DisassemblerInsn "mov" for 0x40311a>, <DisassemblerInsn "mov" for 0x40311d>, <DisassemblerInsn "lea" for 0x403122>, <DisassemblerInsn "mov" for 0x403129>, <DisassemblerInsn "call" for 0x40312b>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a4>, <DisassemblerInsn "mov" for 0x4024ac>, <DisassemblerInsn "mov" for 0x4024b3>, <DisassemblerInsn "mov" for 0x4024bb>, <DisassemblerInsn "mov" for 0x4024c2>, <DisassemblerInsn "mov" for 0x4024c9>, <DisassemblerInsn "add" for 0x4024cc>, <DisassemblerInsn "mov" for 0x4024d3>, <DisassemblerInsn "mov" for 0x4024db>, <DisassemblerInsn "add" for 0x4024de>, <DisassemblerInsn "mov" for 0x4024e2>, <DisassemblerInsn "mov" for 0x4024ea>, <DisassemblerInsn "add" for 0x4024ed>, <DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fc>, <DisassemblerInsn "add" for 0x4024ff>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "mov" for 0x40250b>, <DisassemblerInsn "imul" for 0x402513>, <DisassemblerInsn "cmp" for 0x402516>, <DisassemblerInsn "setg" for 0x402519>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "lea" for 0x402525>, <DisassemblerInsn "add" for 0x40252d>, <DisassemblerInsn "mov" for 0x402531>, <DisassemblerInsn "lea" for 0x402539>, <DisassemblerInsn "mov" for 0x402541>, <DisassemblerInsn "cmp" for 0x402549>, <DisassemblerInsn "sete" for 0x40254c>, <DisassemblerInsn "mov" for 0x402550>, <DisassemblerInsn "mov" for 0x402558>, <DisassemblerInsn "add" for 0x40255b>, <DisassemblerInsn "mov" for 0x40255f>, <DisassemblerInsn "mov" for 0x402567>, <DisassemblerInsn "add" for 0x40256a>, <DisassemblerInsn "mov" for 0x40256e>, <DisassemblerInsn "mov" for 0x402576>, <DisassemblerInsn "add" for 0x402579>, <DisassemblerInsn "mov" for 0x40257d>, <DisassemblerInsn "add" for 0x402585>, <DisassemblerInsn "mov" for 0x402589>, <DisassemblerInsn "movsxd" for 0x402591>, <DisassemblerInsn "mov" for 0x402594>, <DisassemblerInsn "movsxd" for 0x40259c>, <DisassemblerInsn "mov" for 0x40259f>, <DisassemblerInsn "add" for 0x4025a7>, <DisassemblerInsn "mov" for 0x4025ad>, <DisassemblerInsn "xor" for 0x4025b5>, <DisassemblerInsn "mov" for 0x4025b7>, <DisassemblerInsn "xor" for 0x4025b9>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025da>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "mov" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025f0>, <DisassemblerInsn "mov" for 0x4025f8>, <DisassemblerInsn "mov" for 0x402600>, <DisassemblerInsn "mov" for 0x402608>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "mov" for 0x402618>, <DisassemblerInsn "mov" for 0x402620>, <DisassemblerInsn "mov" for 0x402628>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dfc>, <DisassemblerInsn "mov" for 0x402e04>, <DisassemblerInsn "mov" for 0x402e0b>, <DisassemblerInsn "mov" for 0x402e12>, <DisassemblerInsn "mov" for 0x402e19>, <DisassemblerInsn "mov" for 0x402e21>, <DisassemblerInsn "shl" for 0x402e29>, <DisassemblerInsn "mov" for 0x402e2c>, <DisassemblerInsn "mov" for 0x402e34>, <DisassemblerInsn "sub" for 0x402e3c>, <DisassemblerInsn "mov" for 0x402e3e>, <DisassemblerInsn "neg" for 0x402e45>, <DisassemblerInsn "mov" for 0x402e47>, <DisassemblerInsn "mov" for 0x402e4e>, <DisassemblerInsn "sub" for 0x402e50>, <DisassemblerInsn "setb" for 0x402e52>, <DisassemblerInsn "mov" for 0x402e56>, <DisassemblerInsn "sub" for 0x402e59>, <DisassemblerInsn "setb" for 0x402e5c>, <DisassemblerInsn "and" for 0x402e60>, <DisassemblerInsn "test" for 0x402e63>, <DisassemblerInsn "mov" for 0x402e67>, <DisassemblerInsn "mov" for 0x402e6e>, <DisassemblerInsn "mov" for 0x402e76>, <DisassemblerInsn "jne" for 0x402e7e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d8>, <DisassemblerInsn "mov" for 0x4027df>, <DisassemblerInsn "mov" for 0x4027e7>, <DisassemblerInsn "mov" for 0x4027ee>, <DisassemblerInsn "mov" for 0x4027f6>, <DisassemblerInsn "mov" for 0x4027fd>, <DisassemblerInsn "movsxd" for 0x402800>, <DisassemblerInsn "add" for 0x402803>, <DisassemblerInsn "shl" for 0x402806>, <DisassemblerInsn "movsxd" for 0x402809>, <DisassemblerInsn "add" for 0x40280c>, <DisassemblerInsn "movsxd" for 0x40280f>, <DisassemblerInsn "mov" for 0x402812>, <DisassemblerInsn "call" for 0x40281a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026e2>, <DisassemblerInsn "shl" for 0x4026ea>, <DisassemblerInsn "movabs" for 0x4026ee>, <DisassemblerInsn "and" for 0x4026f8>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402705>, <DisassemblerInsn "mov" for 0x40270d>, <DisassemblerInsn "mov" for 0x402715>, <DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "shl" for 0x402723>, <DisassemblerInsn "movabs" for 0x402727>, <DisassemblerInsn "and" for 0x402731>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "sub" for 0x402737>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "cmp" for 0x402740>, <DisassemblerInsn "jne" for 0x402743>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "mov" for 0x401f59>, <DisassemblerInsn "mov" for 0x401f5e>, <DisassemblerInsn "call" for 0x401f65>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b3a>, <DisassemblerInsn "mov" for 0x402b42>, <DisassemblerInsn "mov" for 0x402b4a>, <DisassemblerInsn "mov" for 0x402b52>, <DisassemblerInsn "mov" for 0x402b59>, <DisassemblerInsn "mov" for 0x402b61>, <DisassemblerInsn "mov" for 0x402b69>, <DisassemblerInsn "mov" for 0x402b70>, <DisassemblerInsn "mov" for 0x402b78>, <DisassemblerInsn "xor" for 0x402b80>, <DisassemblerInsn "test" for 0x402b82>, <DisassemblerInsn "mov" for 0x402b86>, <DisassemblerInsn "mov" for 0x402b8e>, <DisassemblerInsn "mov" for 0x402b95>, <DisassemblerInsn "mov" for 0x402b9d>, <DisassemblerInsn "mov" for 0x402ba5>, <DisassemblerInsn "jne" for 0x402bac>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403481>, <DisassemblerInsn "call" for 0x403489>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402630>, <DisassemblerInsn "mov" for 0x402638>, <DisassemblerInsn "mov" for 0x40263f>, <DisassemblerInsn "mov" for 0x402646>, <DisassemblerInsn "mov" for 0x40264e>, <DisassemblerInsn "mov" for 0x402650>, <DisassemblerInsn "movsxd" for 0x402657>, <DisassemblerInsn "cmp" for 0x40265a>, <DisassemblerInsn "jge" for 0x40265d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021a1>, <DisassemblerInsn "sete" for 0x4021a4>, <DisassemblerInsn "mov" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021ac>, <DisassemblerInsn "mov" for 0x4021b3>, <DisassemblerInsn "mov" for 0x4021ba>, <DisassemblerInsn "mov" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "test" for 0x4021cf>, <DisassemblerInsn "jne" for 0x4021d1>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e82>, <DisassemblerInsn "mov" for 0x402e89>, <DisassemblerInsn "mov" for 0x402e91>, <DisassemblerInsn "mov" for 0x402e99>, <DisassemblerInsn "bswap" for 0x402e9b>, <DisassemblerInsn "mov" for 0x402e9d>, <DisassemblerInsn "mov" for 0x402e9f>, <DisassemblerInsn "sub" for 0x402ea4>, <DisassemblerInsn "mov" for 0x402ea6>, <DisassemblerInsn "shl" for 0x402ea8>, <DisassemblerInsn "mov" for 0x402eab>, <DisassemblerInsn "or" for 0x402eb3>, <DisassemblerInsn "add" for 0x402eb6>, <DisassemblerInsn "add" for 0x402eba>, <DisassemblerInsn "mov" for 0x402ebd>, <DisassemblerInsn "mov" for 0x402ec4>, <DisassemblerInsn "mov" for 0x402ecc>, <DisassemblerInsn "mov" for 0x402ed4>, <DisassemblerInsn "mov" for 0x402edc>, <DisassemblerInsn "mov" for 0x402ee4>, <DisassemblerInsn "mov" for 0x402eeb>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402efa>, <DisassemblerInsn "mov" for 0x402f02>, <DisassemblerInsn "mov" for 0x402f0a>, <DisassemblerInsn "mov" for 0x402f12>, <DisassemblerInsn "add" for 0x402f19>, <DisassemblerInsn "mov" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f1e>, <DisassemblerInsn "shr" for 0x402f21>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "add" for 0x402f27>, <DisassemblerInsn "mov" for 0x402f2a>, <DisassemblerInsn "mov" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "movsx" for 0x402f35>, <DisassemblerInsn "mov" for 0x402f39>, <DisassemblerInsn "movsx" for 0x402f40>, <DisassemblerInsn "mov" for 0x402f45>, <DisassemblerInsn "cmp" for 0x402f4c>, <DisassemblerInsn "mov" for 0x402f51>, <DisassemblerInsn "mov" for 0x402f58>, <DisassemblerInsn "mov" for 0x402f60>, <DisassemblerInsn "mov" for 0x402f68>, <DisassemblerInsn "mov" for 0x402f6f>, <DisassemblerInsn "jge" for 0x402f76>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034a6>, <DisassemblerInsn "mov" for 0x4034ab>, <DisassemblerInsn "mov" for 0x4034b2>, <DisassemblerInsn "add" for 0x4034b9>, <DisassemblerInsn "pop" for 0x4034c0>, <DisassemblerInsn "pop" for 0x4034c1>, <DisassemblerInsn "pop" for 0x4034c3>, <DisassemblerInsn "ret" for 0x4034c4>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f7c>, <DisassemblerInsn "mov" for 0x402f84>, <DisassemblerInsn "mov" for 0x402f8b>, <DisassemblerInsn "mov" for 0x402f92>, <DisassemblerInsn "mov" for 0x402f99>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "shl" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fab>, <DisassemblerInsn "mov" for 0x402fb3>, <DisassemblerInsn "add" for 0x402fbb>, <DisassemblerInsn "mov" for 0x402fbd>, <DisassemblerInsn "neg" for 0x402fc4>, <DisassemblerInsn "mov" for 0x402fc6>, <DisassemblerInsn "sub" for 0x402fc8>, <DisassemblerInsn "setb" for 0x402fca>, <DisassemblerInsn "mov" for 0x402fce>, <DisassemblerInsn "sub" for 0x402fd1>, <DisassemblerInsn "setb" for 0x402fd4>, <DisassemblerInsn "and" for 0x402fd8>, <DisassemblerInsn "test" for 0x402fdb>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "jne" for 0x402ff6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401df0>, <DisassemblerInsn "push" for 0x401df1>, <DisassemblerInsn "push" for 0x401df3>, <DisassemblerInsn "sub" for 0x401df4>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "mov" for 0x401e1a>, <DisassemblerInsn "mov" for 0x401e22>, <DisassemblerInsn "mov" for 0x401e29>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e38>, <DisassemblerInsn "mov" for 0x401e40>, <DisassemblerInsn "mov" for 0x401e47>, <DisassemblerInsn "lea" for 0x401e4e>, <DisassemblerInsn "mov" for 0x401e56>, <DisassemblerInsn "cmp" for 0x401e5b>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "jne" for 0x401e65>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403130>, <DisassemblerInsn "mov" for 0x403138>, <DisassemblerInsn "mov" for 0x403140>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "mov" for 0x40314d>, <DisassemblerInsn "mov" for 0x403155>, <DisassemblerInsn "mov" for 0x40315a>, <DisassemblerInsn "mov" for 0x40315f>, <DisassemblerInsn "mov" for 0x403167>, <DisassemblerInsn "mov" for 0x40316f>, <DisassemblerInsn "mov" for 0x403177>, <DisassemblerInsn "mov" for 0x40317f>, <DisassemblerInsn "mov" for 0x403187>, <DisassemblerInsn "mov" for 0x40318f>, <DisassemblerInsn "jmp" for 0x403196>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033e0>, <DisassemblerInsn "mov" for 0x4033e7>, <DisassemblerInsn "mov" for 0x4033ef>, <DisassemblerInsn "mov" for 0x4033f7>, <DisassemblerInsn "mov" for 0x4033ff>, <DisassemblerInsn "mov" for 0x403407>, <DisassemblerInsn "mov" for 0x40340f>, <DisassemblerInsn "mov" for 0x403417>, <DisassemblerInsn "mov" for 0x40341f>, <DisassemblerInsn "mov" for 0x403427>, <DisassemblerInsn "test" for 0x40342c>, <DisassemblerInsn "mov" for 0x40342f>, <DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "mov" for 0x40344f>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345f>, <DisassemblerInsn "mov" for 0x403467>, <DisassemblerInsn "je" for 0x40346e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 25, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x530]>', '<mov~~ecx, dword ptr [rsp + 0x424]>', '<mov~~esi, dword ptr [rsp + 0x428]>', '<mov~~eax, dword ptr [rsp + 0x42c]>', '<mov~~dword ptr [rsp + 0x400], esi>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x408], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x4c4]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x400]>', '<and~~ecx, edx>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<cmp~~eax, ecx>', '<jge~~0x4022b3>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<sub~~eax, 0xe>', '<je~~0x403499>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4ae]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402203>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xb52]>', '<mov~~byte ptr [rsp + 0x4af], al>', '<cmp~~al, 0>', '<jne~~0x401f99>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20c]>', '<mov~~rcx, qword ptr [rsp + 0x200]>', '<mov~~rdx, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0x2f4]>', '<mov~~r8, qword ptr [rsp + 0x2b8]>', '<mov~~rsi, qword ptr [rsp + 0x368]>', '<mov~~r9, qword ptr [rsp + 0x360]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x1a0], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1b0], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1c0], r8>', '<mov~~dword ptr [rsp + 0x1c8], edi>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~qword ptr [rsp + 0x1d0], rdx>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~dword ptr [rsp + 0x1e4], eax>', '<mov~~r8b, byte ptr [rsp + 0x35f]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~r9d, dword ptr [rsp + 0x1c8]>', '<mov~~esi, dword ptr [rsp + 0x1cc]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<mov~~dword ptr [rsp + 0x16c], r9d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402bb3>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb50]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x750]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x650]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x550]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x40e]>', '<mov~~rcx, qword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<mov~~eax, dword ptr [rsp + 0x3fc]>', '<mov~~dword ptr [rsp + 0x3d4], esi>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jne~~0x4023c8>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x214]>', '<mov~~rdi, qword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x5c], r8d>', '<mov~~rax, rdx>', '<sub~~rax, rdi>', '<shl~~eax, 3>', '<mov~~r10d, r8d>', '<add~~r10d, r9d>', '<add~~r10d, eax>', '<mov~~dword ptr [rsp + 0x60], r10d>', '<xor~~eax, eax>', '<cmp~~r10d, 0x20>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jle~~0x4033e0>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x440]>', '<add~~rsp, 0x1350>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x234]>', '<mov~~eax, dword ptr [rsp + 0x2a4]>', '<and~~eax, 0x1fffffff>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<xor~~esi, esi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~dword ptr [rsp + 0x248], edi>', '<mov~~dword ptr [rsp + 0x24c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<je~~0x402a15>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~rdx, qword ptr [rsp + 0x308]>', '<mov~~edi, dword ptr [rsp + 0x31c]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0x2a4]>', '<shl~~ecx, 3>', '<mov~~dword ptr [rsp + 0x234], ecx>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x248], edi>', '<mov~~dword ptr [rsp + 0x24c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<je~~0x402a15>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0x1ac]>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0x12c], edx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x402d0c>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x40319b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x43c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jle~~0x4034b2>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3ec]>', '<mov~~rcx, qword ptr [rsp + 0x3e0]>', '<mov~~rdx, qword ptr [rsp + 0x418]>', '<mov~~rsi, qword ptr [rsp + 0x410]>', '<mov~~rdi, qword ptr [rsp + 0x3d8]>', '<mov~~r10b, byte ptr [rsp + 0x40f]>', '<mov~~r11d, dword ptr [rsp + 0x444]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3c0], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3c4], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jl~~0x4023c8>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r8d, dword ptr [rsp + 0x234]>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~qword ptr [rsp + 0x1f0], r10>', '<mov~~qword ptr [rsp + 0x1f8], r9>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~dword ptr [rsp + 0x210], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jge~~0x4032c5>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x402ed4>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2b4]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~r10, qword ptr [rsp + 0x500]>', '<mov~~r8, qword ptr [rsp + 0x170]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~esi, dword ptr [rsp + 0x184]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1c0], r8>', '<mov~~dword ptr [rsp + 0x1c8], edi>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1e4], esi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jne~~0x402b3a>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x378]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x403a]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x484]>', '<mov~~rdx, qword ptr [rsp + 0x478]>', '<mov~~dword ptr [rsp + 0x45c], esi>', '<mov~~al, byte ptr [rsp + rdx*8 + 0xb52]>', '<movzx~~edi, al>', '<mov~~dword ptr [rsp + 0x450], edi>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~dword ptr [rsp + 0x44c], ecx>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x454], esi>', '<mov~~dword ptr [rsp + rdx*4 + 0x750], esi>', '<mov~~byte ptr [rsp + rdx + 0x650], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xb50]>', '<mov~~byte ptr [rsp + rdx + 0x550], al>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x45c]>', '<mov~~dword ptr [rsp + 0x460], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x464], eax>', '<mov~~rcx, rdx>', '<add~~rcx, -1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<mov~~dword ptr [rsp + 0x484], eax>', '<jg~~0x40204e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x444]>', '<cmp~~eax, -1>', '<jle~~0x4024a4>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x12c], edx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~dword ptr [rsp + 0x100], edi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c0>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x44a]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x538]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x31c]>', '<mov~~r8d, dword ptr [rsp + 0x318]>', '<mov~~rdi, qword ptr [rsp + 0x310]>', '<mov~~rsi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rcx, qword ptr [rsp + 0x2f8]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e0>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x402456>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r8, qword ptr [rsp + 0x3a0]>', '<mov~~r9, qword ptr [rsp + 0x398]>', '<mov~~rdi, qword ptr [rsp + 0x160]>', '<mov~~r10, qword ptr [rsp + 0x170]>', '<mov~~ebx, dword ptr [rsp + 0x15c]>', '<mov~~bpl, byte ptr [rsp + 0x377]>', '<mov~~r14d, dword ptr [rsp + 0x64]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jl~~0x402bb3>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b2>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x340]>', '<mov~~r9d, dword ptr [rsp + 0x2a4]>', '<mov~~r8d, dword ptr [rsp + 0x31c]>', '<mov~~edi, dword ptr [rsp + 0x318]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~rdx, qword ptr [rsp + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x300]>', '<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x240], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x248], r8d>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<mov~~qword ptr [rsp + 0x250], rsi>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~qword ptr [rsp + 0x268], rax>', '<ja~~0x402a15>']}, {'block_Idx': 7, 'blockInsts': ['<movzx~~ecx, word ptr [rsp + 0xb50]>', '<mov~~al, 1>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<jmp~~0x4021ba>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x43c]>', '<mov~~edx, dword ptr [rsp + 0x50c]>', '<mov~~esi, dword ptr [rsp + 0x524]>', '<mov~~eax, dword ptr [rsp + 0x4fc]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x40e], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x40f], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x410], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x418], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x428], ecx>', '<mov~~dword ptr [rsp + 0x42c], eax>', '<jmp~~0x4022f1>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x390]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4be1]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x40322d>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x5c]>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<mov~~eax, dword ptr [rsp + 0x2b4]>', '<mov~~r10, qword ptr [rsp + 0x2a8]>', '<mov~~r9d, dword ptr [rsp + 0x270]>', '<mov~~r8d, dword ptr [rsp + 0x274]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~r11d, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x44], r11d>', '<test~~r11d, r11d>', '<mov~~qword ptr [rsp + 0x3b0], r10>', '<mov~~dword ptr [rsp + 0x2f0], r9d>', '<mov~~dword ptr [rsp + 0x2ec], r8d>', '<mov~~qword ptr [rsp + 0x2e0], rdi>', '<mov~~qword ptr [rsp + 0x2d8], rsi>', '<mov~~qword ptr [rsp + 0x2d0], rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<je~~0x4025ca>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x338]>', '<mov~~rax, qword ptr [rsp + 0x3b0]>', '<mov~~edx, dword ptr [rsp + 0x2f0]>', '<mov~~esi, dword ptr [rsp + 0x2ec]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~r9, qword ptr [rsp + 0x2d0]>', '<mov~~r10, qword ptr [rsp + 0x2c8]>', '<mov~~r11d, dword ptr [rsp + 0x3b8]>', '<mov~~dword ptr [rsp + 0x2f4], r11d>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<mov~~qword ptr [rsp + 0x308], r8>', '<mov~~qword ptr [rsp + 0x310], rdi>', '<mov~~dword ptr [rsp + 0x318], esi>', '<mov~~dword ptr [rsp + 0x31c], edx>', '<mov~~qword ptr [rsp + 0x320], rax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x32c], ecx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x403481>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<mov~~r8d, dword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rsp + 0x24c]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~r10, qword ptr [rsp + 0x260]>', '<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~qword ptr [rsp + 0x1f0], r10>', '<mov~~qword ptr [rsp + 0x1f8], r9>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~dword ptr [rsp + 0x20c], edx>', '<mov~~dword ptr [rsp + 0x210], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jge~~0x4032c5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~qword ptr [rsp + 0x488], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xb52]>', '<mov~~byte ptr [rsp + 0x495], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x496], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x497], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x498], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401fcd>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x513a]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x404]>', '<mov~~ecx, dword ptr [rsp + 0x3d4]>', '<mov~~rdi, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x3d8]>', '<mov~~eax, dword ptr [rsp + 0x3ec]>', '<add~~rdx, rdi>', '<add~~ecx, 1>', '<cmp~~ecx, esi>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~dword ptr [rsp + 0x3f8], ecx>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<je~~0x4022b3>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~r10, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~edx, dword ptr [rsp + 0x474]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x538]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x495]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x44a], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x44b], al>', '<jb~~0x402129>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x40319b>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x408]>', '<mov~~edx, dword ptr [rsp + 0x404]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~esi, dword ptr [rax]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x424], esi>', '<mov~~dword ptr [rsp + 0x428], edx>', '<mov~~dword ptr [rsp + 0x42c], ecx>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jge~~0x4034b2>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~rdx, qword ptr [rsp + 0x320]>', '<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~dword ptr [rsp + 0x2a0], ecx>', '<shl~~rdx, 2>', '<movabs~~rsi, 0xfffffffc>', '<and~~rdx, rsi>', '<mov~~eax, dword ptr [rax + rdx]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<cmp~~eax, 0>', '<jne~~0x4027d8>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0x104]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~edi, dword ptr [rsp + 0xdc]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c0>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x210]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~r8d, dword ptr [rsp + 0x184]>', '<mov~~r9, qword ptr [rsp + 0x188]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<mov~~qword ptr [rsp + 0x148], rsi>', '<mov~~qword ptr [rsp + 0x150], r9>', '<mov~~dword ptr [rsp + 0x15c], r8d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<cmp~~eax, 1>', '<jge~~0x402cb2>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x402d5e>']}, {'block_Idx': 51, 'blockInsts': ['<lea~~rdi, [rsp + 0x538]>', '<call~~0x500080>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, ecx>', '<mov~~dword ptr [rsp + 0x474], edx>', '<mov~~eax, 1>', '<cmp~~edx, -1>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<mov~~dword ptr [rsp + 0x484], eax>', '<jle~~0x402100>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x400]>', '<mov~~rdx, qword ptr [rsp + 0x510]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<movsxd~~rax, ecx>', '<imul~~rax, rsi>', '<add~~rdx, rax>', '<mov~~eax, 0x80>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~dword ptr [rsp + 0x3f8], ecx>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<mov~~dl, byte ptr [rsp + 0x40e]>', '<mov~~rcx, qword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3f8]>', '<mov~~eax, dword ptr [rsp + 0x3fc]>', '<mov~~dword ptr [rsp + 0x3d4], esi>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<jne~~0x4023c8>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x4034b2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x534], eax>', '<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x4c4], ecx>', '<lea~~rcx, [rsp + 0xb50]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<lea~~rcx, [rsp + 0x750]>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<lea~~rcx, [rsp + 0x650]>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<lea~~rcx, [rsp + 0x550]>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x12c]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~dword ptr [rsp + 0x100], edi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c0>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x40304c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb50], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb52], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<jne~~0x401ef4>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x403476>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x144]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e0>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x402381>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x94], edx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~eax, dword ptr [rsp + 0x128]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~ecx, edx>', '<shl~~rsi, cl>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~eax, 0>', '<jge~~0x40319b>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0x4af]>', '<mov~~ecx, 0xffffffff>', '<xor~~eax, eax>', '<mov~~edx, 0xff>', '<cmp~~sil, 0x20>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<ja~~0x4021ba>']}, {'block_Idx': 40, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x440], eax>', '<jmp~~0x4034b2>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x388]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4749]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~r8d, dword ptr [rsp + 0x4c4]>', '<mov~~edi, dword ptr [rsp + 0x32c]>', '<mov~~edx, dword ptr [rsp + 0x530]>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~edx, dword ptr [rsp + 0x2f4]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x510]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<movsxd~~rdx, edx>', '<imul~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x2b8], rax>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c4], eax>', '<je~~0x402705>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x380]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x427a]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x50c]>', '<mov~~rsi, qword ptr [rsp + 0x518]>', '<mov~~edi, dword ptr [rsp + 0x524]>', '<mov~~ecx, dword ptr [rsp + 0x4fc]>', '<mov~~r8, rax>', '<add~~r8, 0x100>', '<mov~~qword ptr [rsp + 0x330], r8>', '<mov~~r8, rsi>', '<add~~r8, 0x60>', '<mov~~qword ptr [rsp + 0x338], r8>', '<mov~~r8, rsi>', '<add~~r8, 0x80>', '<mov~~qword ptr [rsp + 0x340], r8>', '<mov~~r9, rsi>', '<add~~r9, 0x10>', '<mov~~qword ptr [rsp + 0x348], r9>', '<mov~~qword ptr [rsp + 0x350], r8>', '<imul~~ecx, edx>', '<cmp~~ecx, 0>', '<setg~~r8b>', '<mov~~byte ptr [rsp + 0x35f], r8b>', '<lea~~r8, [rsp + 0x538]>', '<add~~r8, 8>', '<mov~~qword ptr [rsp + 0x360], r8>', '<lea~~r8, [rsp + 0x538]>', '<mov~~qword ptr [rsp + 0x368], r8>', '<cmp~~edi, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x377], dil>', '<mov~~rdi, rsi>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x378], rdi>', '<mov~~rdi, rsi>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x380], rdi>', '<mov~~rdi, rsi>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x388], rdi>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x390], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x3a8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<mov~~rcx, qword ptr [rsp + 0x338]>', '<mov~~rax, qword ptr [rsp + 0x3b0]>', '<mov~~edx, dword ptr [rsp + 0x2f0]>', '<mov~~esi, dword ptr [rsp + 0x2ec]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~r8, qword ptr [rsp + 0x2d8]>', '<mov~~r9, qword ptr [rsp + 0x2d0]>', '<mov~~r10, qword ptr [rsp + 0x2c8]>', '<mov~~r11d, dword ptr [rsp + 0x3b8]>', '<mov~~dword ptr [rsp + 0x2f4], r11d>', '<mov~~qword ptr [rsp + 0x2f8], r10>', '<mov~~qword ptr [rsp + 0x300], r9>', '<mov~~qword ptr [rsp + 0x308], r8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x1ac]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<sub~~edx, esi>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xd8], edi>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<jne~~0x402e82>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2a4]>', '<mov~~rdi, qword ptr [rsp + 0x340]>', '<mov~~ecx, dword ptr [rsp + 0x32c]>', '<mov~~rsi, qword ptr [rsp + 0x330]>', '<mov~~edx, dword ptr [rsp + 0x2a0]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<call~~0x500078>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~dword ptr [rsp + 0x2c4], eax>', '<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~rdx, qword ptr [rsp + 0x320]>', '<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~dword ptr [rsp + 0x2a0], ecx>', '<shl~~rdx, 2>', '<movabs~~rsi, 0xfffffffc>', '<and~~rdx, rsi>', '<mov~~eax, dword ptr [rax + rdx]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<cmp~~eax, 0>', '<jne~~0x4027d8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c8]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe0fb]>', '<call~~0x500068>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x35f]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~r9d, dword ptr [rsp + 0x1c8]>', '<mov~~esi, dword ptr [rsp + 0x1cc]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<mov~~dword ptr [rsp + 0x16c], r9d>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~dword ptr [rsp + 0x184], esi>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402bb3>']}, {'block_Idx': 27, 'blockInsts': ['<lea~~rdi, [rsp + 0x538]>', '<call~~0x500080>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~qword ptr [rsp + 0x310], rdi>', '<mov~~dword ptr [rsp + 0x318], esi>', '<mov~~dword ptr [rsp + 0x31c], edx>', '<mov~~qword ptr [rsp + 0x320], rax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x32c], ecx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x403481>']}, {'block_Idx': 35, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~ecx, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4a8], ecx>', '<mov~~byte ptr [rsp + 0x4ae], al>', '<mov~~ecx, dword ptr [rsp + 0x4a8]>', '<mov~~al, byte ptr [rsp + 0x4ae]>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<test~~al, 1>', '<jne~~0x402203>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xd4]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~eax, dword ptr [rax]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<or~~rax, rsi>', '<add~~rcx, 4>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~r8d, dword ptr [rsp + 0x104]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~edi, dword ptr [rsp + 0xdc]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<cmp~~r8w, 0>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~dword ptr [rsp + 0x128], eax>', '<jge~~0x4030c0>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x440], eax>', '<mov~~eax, dword ptr [rsp + 0x440]>', '<add~~rsp, 0x1350>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~edi, dword ptr [rsp + 0xc0]>', '<mov~~esi, dword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0xd8]>', '<shl~~rax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x88], rax>', '<add~~edx, esi>', '<mov~~dword ptr [rsp + 0x90], edx>', '<neg~~edi>', '<mov~~esi, edx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rcx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~dword ptr [rsp + 0x94], edx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<jne~~0x402ffa>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1350>', '<mov~~dword ptr [rsp + 0x4fc], r9d>', '<mov~~qword ptr [rsp + 0x500], r8>', '<mov~~dword ptr [rsp + 0x50c], ecx>', '<mov~~qword ptr [rsp + 0x510], rdx>', '<mov~~qword ptr [rsp + 0x518], rdi>', '<mov~~eax, dword ptr [rsp + 0x1380]>', '<mov~~dword ptr [rsp + 0x524], eax>', '<mov~~rax, qword ptr [rsp + 0x1378]>', '<mov~~qword ptr [rsp + 0x528], rax>', '<mov~~eax, dword ptr [rsp + 0x1370]>', '<mov~~dword ptr [rsp + 0x530], eax>', '<lea~~rax, [rsp + 0x538]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x534], eax>', '<jne~~0x401e8c>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x210]>', '<mov~~r8d, dword ptr [rsp + 0x84]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x1f8]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~eax, 0xe>', '<mov~~dword ptr [rsp + 0x270], r9d>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<jmp~~0x4033e0>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b4]>', '<mov~~r10, qword ptr [rsp + 0x2a8]>', '<mov~~r9d, dword ptr [rsp + 0x270]>', '<mov~~r8d, dword ptr [rsp + 0x274]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~r11d, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x44], r11d>', '<test~~r11d, r11d>', '<mov~~qword ptr [rsp + 0x3b0], r10>', '<mov~~dword ptr [rsp + 0x2f0], r9d>', '<mov~~dword ptr [rsp + 0x2ec], r8d>', '<mov~~qword ptr [rsp + 0x2e0], rdi>', '<mov~~qword ptr [rsp + 0x2d8], rsi>', '<mov~~qword ptr [rsp + 0x2d0], rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<je~~0x4025ca>']}], 'cfg_edge_info': [(15, 21), (50, 52), (70, 64), (8, 9), (11, 14), (13, 17), (32, 39), (33, 38), (24, 35), (26, 32), (74, 48), (87, 82), (88, 47), (22, 19), (2, 4), (83, 78), (57, 59), (47, 48), (61, 47), (79, 83), (41, 44), (9, 12), (52, 19), (35, 12), (62, 60), (36, 41), (18, 23), (73, 78), (46, 36), (12, 22), (0, 2), (14, 19), (1, 3), (68, 72), (27, 40), (30, 36), (50, 51), (64, 68), (25, 31), (70, 63), (3, 3), (31, 19), (84, 86), (60, 64), (77, 80), (21, 27), (83, 84), (7, 9), (56, 57), (49, 27), (58, 60), (51, 54), (61, 65), (78, 81), (80, 78), (89, 81), (66, 61), (38, 45), (23, 35), (66, 70), (57, 58), (10, 10), (65, 74), (13, 18), (37, 37), (74, 49), (4, 6), (17, 18), (35, 11), (47, 49), (6, 8), (73, 77), (40, 19), (31, 25), (20, 25), (86, 89), (82, 64), (62, 61), (76, 78), (37, 41), (32, 38), (46, 37), (60, 63), (44, 46), (87, 81), (21, 26), (77, 79), (80, 84), (8, 10), (1, 4), (2, 3), (11, 15), (82, 66), (45, 47), (30, 37), (49, 26), (3, 4), (72, 76), (59, 58), (33, 39), (81, 88), (26, 33), (84, 87), (9, 11), (56, 58), (75, 47), (58, 61), (78, 82), (89, 82), (0, 1), (17, 17), (48, 50), (63, 66), (6, 7), (64, 67), (25, 30), (18, 24), (59, 62), (67, 75), (14, 20), (10, 13), (76, 77), (68, 73), (41, 31)], 'cdg_edge_info': [(50, 52), (33, 45), (70, 64), (26, 39), (25, 41), (8, 9), (8, 18), (14, 31), (11, 14), (13, 17), (87, 64), (33, 38), (50, 54), (70, 66), (87, 82), (33, 47), (31, 31), (77, 83), (57, 59), (9, 19), (35, 19), (61, 47), (74, 50), (9, 12), (35, 12), (62, 60), (47, 50), (18, 23), (64, 75), (0, 2), (1, 3), (64, 68), (50, 51), (3, 3), (77, 80), (21, 27), (89, 88), (83, 84), (70, 47), (62, 64), (56, 57), (49, 27), (60, 66), (61, 65), (89, 81), (66, 61), (61, 74), (66, 70), (50, 19), (8, 13), (10, 10), (37, 37), (74, 49), (41, 46), (14, 25), (21, 40), (35, 11), (47, 49), (6, 8), (73, 77), (31, 25), (49, 40), (87, 88), (62, 61), (8, 35), (41, 41), (46, 37), (87, 81), (21, 26), (80, 84), (8, 10), (2, 3), (11, 15), (82, 66), (68, 76), (30, 37), (49, 26), (21, 19), (26, 33), (84, 87), (62, 47), (9, 11), (49, 19), (89, 64), (84, 89), (89, 82), (0, 1), (17, 17), (39, 56), (9, 22), (11, 19), (6, 7), (35, 22), (64, 67), (25, 30), (59, 62), (18, 24), (14, 20), (76, 77), (11, 21), (68, 73), (6, 9)], 'ddg_edge_info': [(1, 31), (24, 33), (30, 46), (70, 64), (73, 81), (15, 39), (25, 41), (45, 74), (7, 35), (87, 89), (18, 35), (1, 49), (82, 38), (70, 82), (81, 39), (14, 31), (0, 14), (4, 30), (60, 83), (3, 31), (82, 65), (4, 39), (13, 17), (3, 49), (24, 26), (62, 74), (1, 33), (24, 35), (70, 66), (73, 83), (3, 6), (46, 41), (65, 54), (82, 49), (77, 83), (57, 59), (56, 39), (67, 27), (75, 74), (3, 33), (2, 4), (83, 87), (60, 76), (4, 41), (12, 54), (67, 54), (73, 67), (2, 25), (73, 76), (64, 73), (76, 38), (65, 38), (27, 54), (24, 37), (64, 82), (74, 50), (82, 33), (35, 37), (73, 39), (49, 39), (38, 39), (76, 65), (4, 25), (3, 35), (40, 54), (83, 89), (67, 38), (24, 12), (62, 60), (24, 30), (0, 30), (81, 27), (56, 62), (82, 81), (64, 75), (73, 87), (10, 49), (65, 49), (76, 49), (12, 22), (0, 2), (4, 18), (76, 67), (38, 50), (80, 83), (4, 27), (1, 3), (60, 89), (24, 14), (1, 12), (67, 49), (27, 40), (4, 54), (64, 68), (65, 33), (25, 31), (82, 83), (73, 80), (1, 39), (0, 41), (76, 33), (73, 89), (65, 51), (3, 12), (77, 80), (4, 11), (20, 37), (4, 20), (89, 88), (83, 84), (67, 33), (81, 50), (4, 38), (88, 74), (1, 14), (67, 51), (10, 17), (82, 67), (62, 64), (24, 25), (76, 81), (0, 25), (82, 76), (65, 26), (56, 57), (38, 27), (82, 39), (51, 54), (3, 14), (4, 13), (24, 46), (49, 45), (61, 65), (66, 61), (38, 45), (61, 74), (38, 54), (66, 70), (67, 26), (4, 31), (65, 74), (76, 83), (62, 66), (2, 24), (56, 59), (62, 75), (82, 87), (8, 49), (74, 49), (62, 84), (41, 46), (3, 7), (4, 6), (0, 54), (24, 39), (67, 74), (60, 68), (4, 15), (77, 84), (49, 38), (60, 77), (4, 24), (81, 54), (4, 33), (24, 11), (35, 11), (0, 20), (62, 68), (2, 26), (6, 8), (82, 80), (62, 77), (65, 39), (76, 39), (82, 89), (20, 25), (4, 8), (24, 41), (31, 25), (15, 38), (81, 38), (4, 17), (60, 70), (38, 49), (4, 26), (1, 2), (0, 4), (4, 35), (67, 39), (20, 46), (82, 64), (62, 61), (81, 74), (37, 41), (3, 39), (82, 73), (8, 35), (76, 87), (46, 37), (49, 33), (38, 33), (4, 10), (15, 49), (81, 49), (8, 10), (2, 3), (0, 15), (82, 66), (76, 80), (68, 76), (22, 54), (76, 89), (17, 49), (4, 49), (24, 27), (49, 26), (38, 26), (33, 39), (26, 33), (84, 87), (81, 33), (81, 88), (15, 33), (4, 12), (24, 54), (73, 38), (81, 51), (10, 18), (76, 73), (73, 65), (0, 26), (65, 27), (66, 26), (38, 74), (24, 20), (81, 26), (24, 38), (84, 89), (4, 14), (89, 82), (0, 1), (18, 49), (73, 49), (57, 62), (17, 35), (76, 84), (26, 74), (14, 54), (24, 31), (25, 30), (18, 24), (1, 38), (67, 75), (59, 62), (4, 7), (62, 88), (24, 49), (65, 50), (35, 49), (73, 33), (0, 3), (14, 20), (10, 13), (38, 51), (0, 12), (37, 31), (76, 77), (3, 38), (31, 54), (4, 37), (24, 15), (67, 50), (4, 46), (13, 24)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x538(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x534(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x534(%rsp)                # 4-byte Spill'}, {'instIndex': 170, 'instruction': 'testb\t$1, %al'}, {'instIndex': 171, 'instruction': 'jne\t.LBB3_13'}, {'instIndex': 173, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 174, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 175, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 176, 'instruction': 'movb\t$0, %al'}, {'instIndex': 177, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O2/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O2/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 1023 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x578(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x574(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x574(%rsp)                # 4-byte Spill'}, {'instIndex': 92, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 193, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 194, 'instruction': 'je\t.LBB3_27'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 198, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 199, 'instruction': 'movb\t$0, %al'}, {'instIndex': 200, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O2/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O2/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 569 nodes and 993 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1023 instructions in binary file.
[4202016, 4202135, 4202555, 4203144, 4203153]
The execution time of patched subCFG information extraction via angr: 0:00:02.051372
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401e20>, <DisassemblerInsn "push" for 0x401e21>, <DisassemblerInsn "push" for 0x401e23>, <DisassemblerInsn "sub" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "mov" for 0x401e68>, <DisassemblerInsn "mov" for 0x401e70>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "lea" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "cmp" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e8e>, <DisassemblerInsn "jne" for 0x401e95>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402291>, <DisassemblerInsn "mov" for 0x402299>, <DisassemblerInsn "mov" for 0x40229d>, <DisassemblerInsn "lea" for 0x4022a2>, <DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "call" for 0x4022ab>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "mov" for 0x401ffb>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "call" for 0x402007>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022b0>, <DisassemblerInsn "mov" for 0x4022b5>, <DisassemblerInsn "jmp" for 0x4022bc>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222f>, <DisassemblerInsn "movzx" for 0x402237>, <DisassemblerInsn "add" for 0x40223b>, <DisassemblerInsn "lea" for 0x40223e>, <DisassemblerInsn "mov" for 0x402246>, <DisassemblerInsn "xor" for 0x40224c>, <DisassemblerInsn "mov" for 0x40224f>, <DisassemblerInsn "mov" for 0x402252>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226b>, <DisassemblerInsn "mov" for 0x402273>, <DisassemblerInsn "mov" for 0x40227b>, <DisassemblerInsn "call" for 0x402283>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "lea" for 0x401ef2>, <DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "lea" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "xor" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f14>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e97>, <DisassemblerInsn "mov" for 0x401e9f>, <DisassemblerInsn "cmp" for 0x401ea3>, <DisassemblerInsn "sete" for 0x401eaa>, <DisassemblerInsn "and" for 0x401ead>, <DisassemblerInsn "movzx" for 0x401eaf>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "lea" for 0x401ef2>, <DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "lea" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "xor" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f14>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402288>, <DisassemblerInsn "je" for 0x40228b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402202>, <DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222f>, <DisassemblerInsn "movzx" for 0x402237>, <DisassemblerInsn "add" for 0x40223b>, <DisassemblerInsn "lea" for 0x40223e>, <DisassemblerInsn "mov" for 0x402246>, <DisassemblerInsn "xor" for 0x40224c>, <DisassemblerInsn "mov" for 0x40224f>, <DisassemblerInsn "mov" for 0x402252>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226b>, <DisassemblerInsn "mov" for 0x402273>, <DisassemblerInsn "mov" for 0x40227b>, <DisassemblerInsn "call" for 0x402283>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "cmp" for 0x40202e>, <DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "jbe" for 0x402039>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027a2>, <DisassemblerInsn "mov" for 0x4027aa>, <DisassemblerInsn "add" for 0x4027b2>, <DisassemblerInsn "mov" for 0x4027b9>, <DisassemblerInsn "mov" for 0x4027c1>, <DisassemblerInsn "add" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c8>, <DisassemblerInsn "mov" for 0x4027d0>, <DisassemblerInsn "mov" for 0x4027d3>, <DisassemblerInsn "cmp" for 0x4027da>, <DisassemblerInsn "jle" for 0x4027dd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1390>', '<mov~~dword ptr [rsp + 0x53c], r9d>', '<mov~~qword ptr [rsp + 0x540], r8>', '<mov~~dword ptr [rsp + 0x54c], ecx>', '<mov~~qword ptr [rsp + 0x550], rdx>', '<mov~~qword ptr [rsp + 0x558], rdi>', '<mov~~eax, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x564], eax>', '<mov~~rax, qword ptr [rsp + 0x13b8]>', '<mov~~qword ptr [rsp + 0x568], rax>', '<mov~~eax, dword ptr [rsp + 0x13b0]>', '<mov~~dword ptr [rsp + 0x570], eax>', '<lea~~rax, [rsp + 0x578]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x574], eax>', '<jne~~0x401ebc>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5729]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe059]>', '<call~~0x500068>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jmp~~0x4034ec>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x520]>', '<mov~~r10, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~sil, byte ptr [rsp + 0x46f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x578]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x402291>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~ecx, dword ptr [rsp + 0x574]>', '<mov~~dword ptr [rsp + 0x504], ecx>', '<lea~~rcx, [rsp + 0xb90]>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<lea~~rcx, [rsp + 0x790]>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<lea~~rcx, [rsp + 0x690]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x590]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x574], eax>', '<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~ecx, dword ptr [rsp + 0x574]>', '<mov~~dword ptr [rsp + 0x504], ecx>', '<lea~~rcx, [rsp + 0xb90]>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<lea~~rcx, [rsp + 0x790]>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<lea~~rcx, [rsp + 0x690]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x590]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 29, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x4027a2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x46e]>', '<mov~~byte ptr [rsp + 0x46f], al>', '<mov~~rax, qword ptr [rsp + 0x520]>', '<mov~~r10, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~sil, byte ptr [rsp + 0x46f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x578]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4d7]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<jbe~~0x402040>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x360], eax>', '<cmp~~eax, 0>', '<jle~~0x40349c>']}], 'cfg_edge_info': [(0, 1), (29, 14), (23, 29), (1, 4), (7, 11), (0, 2), (14, 19), (22, 29), (29, 31), (11, 14), (1, 3)]}]}
{'decode_plane': [4202016, 4202135, 4202555, 4203144, 4203153]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O2/utvideodec.o---before
The extraction of function: decode_plane
[4202016, 4202135, 4202555, 4203144, 4203153]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 85 nodes and 142 edges in CFGEmulated.
It has 83 nodes and 152 edges in CDG.
It has 4559 nodes and 5747 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202016, 4202135, 4202555, 4203144, 4203153]
{4203010, 4203267, 4205187, 4203144, 4207369, 4207626, 4202508, 4203024, 4203153, 4205712, 4202643, 4203670, 4202135, 4203929, 4202779, 4207772, 4202016, 4207521, 4202530, 4204450, 4202276, 4205987, 4205478, 4206114, 4207016, 4207785, 4205866, 4202667, 4203184, 4204210, 4207796, 4202555, 4202172, 4205116, 4203452, 4202560, 4203201, 4204352, 4206656, 4205254, 4204999, 4203594, 4204747, 4205388, 4206283, 4207827, 4207840, 4204000, 4206944, 4204515, 4203875, 4202983, 4207592, 4206441, 4206824, 4207852, 4202478, 4204142, 4204912, 4207215, 4206575, 4203379, 4205050, 4206204, 4203775}
[30, 26, 75, 66, 70, 73, 18, 37, 45, 19, 61, 40, 62, 12, 1, 71, 46, 54, 67, 36, 82, 44, 14, 23, 57, 72, 81, 9, 3, 35, 52, 27, 79, 21, 0, 4, 48, 56, 43, 39, 7, 60, 49, 15, 64, 29, 25, 2, 80, 24, 63, 59, 11, 58, 41, 33, 47, 77, 76, 8, 68, 13, 10, 74, 6, 28, 83, 16, 65, 34, 17, 38, 22, 78]
The execution time of patched slicing information extraction via angr: 0:00:08.382108
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025e0>, <DisassemblerInsn "mov" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025f0>, <DisassemblerInsn "mov" for 0x4025f8>, <DisassemblerInsn "mov" for 0x402600>, <DisassemblerInsn "mov" for 0x402608>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "mov" for 0x402618>, <DisassemblerInsn "add" for 0x40261b>, <DisassemblerInsn "mov" for 0x40261e>, <DisassemblerInsn "test" for 0x402625>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "cmovne" for 0x40262c>, <DisassemblerInsn "mov" for 0x402630>, <DisassemblerInsn "test" for 0x402638>, <DisassemblerInsn "cmovne" for 0x40263c>, <DisassemblerInsn "mov" for 0x402640>, <DisassemblerInsn "mov" for 0x402647>, <DisassemblerInsn "add" for 0x40264b>, <DisassemblerInsn "mov" for 0x40264e>, <DisassemblerInsn "cmp" for 0x402656>, <DisassemblerInsn "mov" for 0x402659>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "jl" for 0x402668>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022b0>, <DisassemblerInsn "mov" for 0x4022b5>, <DisassemblerInsn "jmp" for 0x4022bc>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40321c>, <DisassemblerInsn "mov" for 0x403224>, <DisassemblerInsn "mov" for 0x40322b>, <DisassemblerInsn "mov" for 0x403233>, <DisassemblerInsn "mov" for 0x40323a>, <DisassemblerInsn "mov" for 0x403241>, <DisassemblerInsn "mov" for 0x403245>, <DisassemblerInsn "mov" for 0x403249>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403252>, <DisassemblerInsn "lea" for 0x403257>, <DisassemblerInsn "cmp" for 0x40325e>, <DisassemblerInsn "mov" for 0x403261>, <DisassemblerInsn "jl" for 0x403269>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403309>, <DisassemblerInsn "mov" for 0x403311>, <DisassemblerInsn "mov" for 0x403318>, <DisassemblerInsn "mov" for 0x403320>, <DisassemblerInsn "mov" for 0x403328>, <DisassemblerInsn "mov" for 0x40332f>, <DisassemblerInsn "mov" for 0x403337>, <DisassemblerInsn "mov" for 0x40333f>, <DisassemblerInsn "add" for 0x403346>, <DisassemblerInsn "add" for 0x403349>, <DisassemblerInsn "cmp" for 0x40334c>, <DisassemblerInsn "mov" for 0x40334f>, <DisassemblerInsn "mov" for 0x403357>, <DisassemblerInsn "mov" for 0x40335e>, <DisassemblerInsn "mov" for 0x403365>, <DisassemblerInsn "mov" for 0x403368>, <DisassemblerInsn "mov" for 0x403370>, <DisassemblerInsn "mov" for 0x403373>, <DisassemblerInsn "mov" for 0x40337b>, <DisassemblerInsn "mov" for 0x40337d>, <DisassemblerInsn "mov" for 0x403384>, <DisassemblerInsn "mov" for 0x40338b>, <DisassemblerInsn "mov" for 0x403393>, <DisassemblerInsn "jne" for 0x40339b>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d2a>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d51>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "mov" for 0x402d60>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "xor" for 0x402d70>, <DisassemblerInsn "test" for 0x402d72>, <DisassemblerInsn "mov" for 0x402d76>, <DisassemblerInsn "mov" for 0x402d7e>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8d>, <DisassemblerInsn "mov" for 0x402d95>, <DisassemblerInsn "jne" for 0x402d9c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ecb>, <DisassemblerInsn "mov" for 0x402ed3>, <DisassemblerInsn "mov" for 0x402edb>, <DisassemblerInsn "mov" for 0x402ee3>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef1>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "shr" for 0x402f04>, <DisassemblerInsn "mov" for 0x402f07>, <DisassemblerInsn "movabs" for 0x402f0f>, <DisassemblerInsn "and" for 0x402f19>, <DisassemblerInsn "movsx" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f21>, <DisassemblerInsn "mov" for 0x402f28>, <DisassemblerInsn "movsx" for 0x402f2e>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "cmp" for 0x402f39>, <DisassemblerInsn "mov" for 0x402f3e>, <DisassemblerInsn "mov" for 0x402f46>, <DisassemblerInsn "mov" for 0x402f4d>, <DisassemblerInsn "mov" for 0x402f55>, <DisassemblerInsn "mov" for 0x402f5c>, <DisassemblerInsn "jge" for 0x402f63>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ab>, <DisassemblerInsn "mov" for 0x4020b3>, <DisassemblerInsn "movzx" for 0x4020ba>, <DisassemblerInsn "mov" for 0x4020bd>, <DisassemblerInsn "mov" for 0x4020c4>, <DisassemblerInsn "sub" for 0x4020c9>, <DisassemblerInsn "mov" for 0x4020cb>, <DisassemblerInsn "shr" for 0x4020d0>, <DisassemblerInsn "mov" for 0x4020d2>, <DisassemblerInsn "mov" for 0x4020d9>, <DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e7>, <DisassemblerInsn "mov" for 0x4020ef>, <DisassemblerInsn "mov" for 0x4020f6>, <DisassemblerInsn "cmp" for 0x4020fb>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "mov" for 0x40210e>, <DisassemblerInsn "jle" for 0x402115>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027a2>, <DisassemblerInsn "mov" for 0x4027aa>, <DisassemblerInsn "add" for 0x4027b2>, <DisassemblerInsn "mov" for 0x4027b9>, <DisassemblerInsn "mov" for 0x4027c1>, <DisassemblerInsn "add" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c8>, <DisassemblerInsn "mov" for 0x4027d0>, <DisassemblerInsn "mov" for 0x4027d3>, <DisassemblerInsn "cmp" for 0x4027da>, <DisassemblerInsn "jle" for 0x4027dd>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4034a9>, <DisassemblerInsn "mov" for 0x4034ab>, <DisassemblerInsn "jmp" for 0x4034b2>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e7>, <DisassemblerInsn "mov" for 0x4021ee>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "cmp" for 0x4021f7>, <DisassemblerInsn "mov" for 0x4021f9>, <DisassemblerInsn "jb" for 0x402200>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033a1>, <DisassemblerInsn "mov" for 0x4033a8>, <DisassemblerInsn "mov" for 0x4033b0>, <DisassemblerInsn "mov" for 0x4033b7>, <DisassemblerInsn "mov" for 0x4033bf>, <DisassemblerInsn "mov" for 0x4033c7>, <DisassemblerInsn "mov" for 0x4033cc>, <DisassemblerInsn "mov" for 0x4033d1>, <DisassemblerInsn "sub" for 0x4033d5>, <DisassemblerInsn "shl" for 0x4033d8>, <DisassemblerInsn "add" for 0x4033db>, <DisassemblerInsn "add" for 0x4033dd>, <DisassemblerInsn "mov" for 0x4033df>, <DisassemblerInsn "cmp" for 0x4033e3>, <DisassemblerInsn "jle" for 0x4033e6>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027e3>, <DisassemblerInsn "mov" for 0x4027ea>, <DisassemblerInsn "mov" for 0x4027f2>, <DisassemblerInsn "mov" for 0x4027f9>, <DisassemblerInsn "mov" for 0x402801>, <DisassemblerInsn "mov" for 0x402809>, <DisassemblerInsn "mov" for 0x402810>, <DisassemblerInsn "add" for 0x402813>, <DisassemblerInsn "mov" for 0x40281a>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "add" for 0x402825>, <DisassemblerInsn "mov" for 0x402829>, <DisassemblerInsn "mov" for 0x402831>, <DisassemblerInsn "imul" for 0x402839>, <DisassemblerInsn "cmp" for 0x40283c>, <DisassemblerInsn "setg" for 0x40283f>, <DisassemblerInsn "mov" for 0x402843>, <DisassemblerInsn "lea" for 0x40284b>, <DisassemblerInsn "add" for 0x402853>, <DisassemblerInsn "mov" for 0x402857>, <DisassemblerInsn "lea" for 0x40285f>, <DisassemblerInsn "mov" for 0x402867>, <DisassemblerInsn "cmp" for 0x40286f>, <DisassemblerInsn "sete" for 0x402873>, <DisassemblerInsn "mov" for 0x402877>, <DisassemblerInsn "add" for 0x40287f>, <DisassemblerInsn "mov" for 0x402883>, <DisassemblerInsn "movsxd" for 0x40288b>, <DisassemblerInsn "mov" for 0x40288e>, <DisassemblerInsn "movsxd" for 0x402896>, <DisassemblerInsn "mov" for 0x402899>, <DisassemblerInsn "add" for 0x4028a1>, <DisassemblerInsn "mov" for 0x4028a7>, <DisassemblerInsn "xor" for 0x4028af>, <DisassemblerInsn "mov" for 0x4028b1>, <DisassemblerInsn "xor" for 0x4028b3>, <DisassemblerInsn "mov" for 0x4028b5>, <DisassemblerInsn "mov" for 0x4028bd>, <DisassemblerInsn "mov" for 0x4028c4>, <DisassemblerInsn "mov" for 0x4028cb>, <DisassemblerInsn "mov" for 0x4028d3>, <DisassemblerInsn "mov" for 0x4028db>, <DisassemblerInsn "mov" for 0x4028e2>, <DisassemblerInsn "mov" for 0x4028ea>, <DisassemblerInsn "mov" for 0x4028f1>, <DisassemblerInsn "mov" for 0x4028f8>, <DisassemblerInsn "mov" for 0x402900>, <DisassemblerInsn "mov" for 0x402908>, <DisassemblerInsn "mov" for 0x402910>, <DisassemblerInsn "mov" for 0x402918>, <DisassemblerInsn "mov" for 0x40291f>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292f>, <DisassemblerInsn "mov" for 0x402936>, <DisassemblerInsn "mov" for 0x40293e>, <DisassemblerInsn "mov" for 0x402946>, <DisassemblerInsn "mov" for 0x40294e>, <DisassemblerInsn "mov" for 0x402956>, <DisassemblerInsn "mov" for 0x40295d>, <DisassemblerInsn "mov" for 0x402964>, <DisassemblerInsn "add" for 0x40296c>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d9e>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e97>, <DisassemblerInsn "mov" for 0x401e9f>, <DisassemblerInsn "cmp" for 0x401ea3>, <DisassemblerInsn "sete" for 0x401eaa>, <DisassemblerInsn "and" for 0x401ead>, <DisassemblerInsn "movzx" for 0x401eaf>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "mov" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "lea" for 0x401ef2>, <DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "lea" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "xor" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f14>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e7a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fa>, <DisassemblerInsn "mov" for 0x402a02>, <DisassemblerInsn "mov" for 0x402a0a>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a18>, <DisassemblerInsn "sub" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a1d>, <DisassemblerInsn "lea" for 0x402a24>, <DisassemblerInsn "cmp" for 0x402a2b>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "je" for 0x402a36>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034e0>, <DisassemblerInsn "mov" for 0x4034e5>, <DisassemblerInsn "mov" for 0x4034ec>, <DisassemblerInsn "add" for 0x4034f3>, <DisassemblerInsn "pop" for 0x4034fa>, <DisassemblerInsn "pop" for 0x4034fb>, <DisassemblerInsn "pop" for 0x4034fd>, <DisassemblerInsn "ret" for 0x4034fe>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e22>, <DisassemblerInsn "mov" for 0x402e29>, <DisassemblerInsn "mov" for 0x402e31>, <DisassemblerInsn "mov" for 0x402e39>, <DisassemblerInsn "mov" for 0x402e41>, <DisassemblerInsn "mov" for 0x402e48>, <DisassemblerInsn "sub" for 0x402e4a>, <DisassemblerInsn "setb" for 0x402e4c>, <DisassemblerInsn "mov" for 0x402e50>, <DisassemblerInsn "sub" for 0x402e53>, <DisassemblerInsn "setb" for 0x402e56>, <DisassemblerInsn "and" for 0x402e5a>, <DisassemblerInsn "test" for 0x402e5d>, <DisassemblerInsn "mov" for 0x402e61>, <DisassemblerInsn "mov" for 0x402e69>, <DisassemblerInsn "mov" for 0x402e71>, <DisassemblerInsn "jne" for 0x402e78>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026b2>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "mov" for 0x4026ca>, <DisassemblerInsn "mov" for 0x4026d2>, <DisassemblerInsn "mov" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026e2>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "add" for 0x4026ed>, <DisassemblerInsn "mov" for 0x4026f0>, <DisassemblerInsn "test" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "cmovne" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402702>, <DisassemblerInsn "test" for 0x40270a>, <DisassemblerInsn "cmovne" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "mov" for 0x402719>, <DisassemblerInsn "add" for 0x40271d>, <DisassemblerInsn "mov" for 0x402720>, <DisassemblerInsn "cmp" for 0x402728>, <DisassemblerInsn "mov" for 0x40272b>, <DisassemblerInsn "mov" for 0x402733>, <DisassemblerInsn "jl" for 0x40273a>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403160>, <DisassemblerInsn "mov" for 0x403164>, <DisassemblerInsn "mov" for 0x40316c>, <DisassemblerInsn "mov" for 0x403171>, <DisassemblerInsn "bswap" for 0x403173>, <DisassemblerInsn "mov" for 0x403175>, <DisassemblerInsn "mov" for 0x403177>, <DisassemblerInsn "sub" for 0x40317c>, <DisassemblerInsn "mov" for 0x40317e>, <DisassemblerInsn "shl" for 0x403180>, <DisassemblerInsn "mov" for 0x403183>, <DisassemblerInsn "or" for 0x403187>, <DisassemblerInsn "add" for 0x40318a>, <DisassemblerInsn "add" for 0x40318e>, <DisassemblerInsn "mov" for 0x403191>, <DisassemblerInsn "mov" for 0x403199>, <DisassemblerInsn "mov" for 0x4031a0>, <DisassemblerInsn "mov" for 0x4031a8>, <DisassemblerInsn "mov" for 0x4031b0>, <DisassemblerInsn "mov" for 0x4031b8>, <DisassemblerInsn "mov" for 0x4031bf>, <DisassemblerInsn "mov" for 0x4031c7>, <DisassemblerInsn "mov" for 0x4031ce>, <DisassemblerInsn "add" for 0x4031d6>, <DisassemblerInsn "mov" for 0x4031d9>, <DisassemblerInsn "mov" for 0x4031db>, <DisassemblerInsn "shr" for 0x4031de>, <DisassemblerInsn "mov" for 0x4031e1>, <DisassemblerInsn "add" for 0x4031e4>, <DisassemblerInsn "mov" for 0x4031e7>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "movsx" for 0x4031ec>, <DisassemblerInsn "movsx" for 0x4031f2>, <DisassemblerInsn "mov" for 0x4031f7>, <DisassemblerInsn "mov" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403206>, <DisassemblerInsn "mov" for 0x40320e>, <DisassemblerInsn "mov" for 0x403215>, <DisassemblerInsn "mov" for 0x40321c>, <DisassemblerInsn "mov" for 0x403224>, <DisassemblerInsn "mov" for 0x40322b>, <DisassemblerInsn "mov" for 0x403233>, <DisassemblerInsn "mov" for 0x40323a>, <DisassemblerInsn "mov" for 0x403241>, <DisassemblerInsn "mov" for 0x403245>, <DisassemblerInsn "mov" for 0x403249>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403252>, <DisassemblerInsn "lea" for 0x403257>, <DisassemblerInsn "cmp" for 0x40325e>, <DisassemblerInsn "mov" for 0x403261>, <DisassemblerInsn "jl" for 0x403269>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402599>, <DisassemblerInsn "mov" for 0x4025a0>, <DisassemblerInsn "mov" for 0x4025a8>, <DisassemblerInsn "mov" for 0x4025af>, <DisassemblerInsn "mov" for 0x4025b6>, <DisassemblerInsn "mov" for 0x4025bd>, <DisassemblerInsn "xor" for 0x4025c5>, <DisassemblerInsn "test" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "jne" for 0x4025d9>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402093>, <DisassemblerInsn "mov" for 0x40209b>, <DisassemblerInsn "cmp" for 0x4020a2>, <DisassemblerInsn "jle" for 0x4020a5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40211b>, <DisassemblerInsn "mov" for 0x402122>, <DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "add" for 0x40213b>, <DisassemblerInsn "mov" for 0x40213f>, <DisassemblerInsn "add" for 0x402147>, <DisassemblerInsn "mov" for 0x40214a>, <DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "shr" for 0x402156>, <DisassemblerInsn "mov" for 0x402158>, <DisassemblerInsn "mov" for 0x40215f>, <DisassemblerInsn "add" for 0x402166>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "movzx" for 0x402177>, <DisassemblerInsn "mov" for 0x40217b>, <DisassemblerInsn "mov" for 0x402183>, <DisassemblerInsn "sub" for 0x402188>, <DisassemblerInsn "mov" for 0x40218b>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "shr" for 0x402195>, <DisassemblerInsn "mov" for 0x402198>, <DisassemblerInsn "mov" for 0x40219f>, <DisassemblerInsn "mov" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021af>, <DisassemblerInsn "mov" for 0x4021b7>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "cmp" for 0x4021c7>, <DisassemblerInsn "mov" for 0x4021cb>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "ja" for 0x4021e1>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b4c>, <DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "mov" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b63>, <DisassemblerInsn "xor" for 0x402b6b>, <DisassemblerInsn "xor" for 0x402b6d>, <DisassemblerInsn "cmp" for 0x402b6f>, <DisassemblerInsn "mov" for 0x402b73>, <DisassemblerInsn "mov" for 0x402b7a>, <DisassemblerInsn "mov" for 0x402b81>, <DisassemblerInsn "mov" for 0x402b84>, <DisassemblerInsn "mov" for 0x402b8c>, <DisassemblerInsn "mov" for 0x402b94>, <DisassemblerInsn "mov" for 0x402b9c>, <DisassemblerInsn "je" for 0x402ba4>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e7c>, <DisassemblerInsn "mov" for 0x402e83>, <DisassemblerInsn "mov" for 0x402e8b>, <DisassemblerInsn "mov" for 0x402e93>, <DisassemblerInsn "bswap" for 0x402e95>, <DisassemblerInsn "mov" for 0x402e97>, <DisassemblerInsn "mov" for 0x402e99>, <DisassemblerInsn "mov" for 0x402e9b>, <DisassemblerInsn "sub" for 0x402ea0>, <DisassemblerInsn "mov" for 0x402ea2>, <DisassemblerInsn "shl" for 0x402ea4>, <DisassemblerInsn "mov" for 0x402ea7>, <DisassemblerInsn "or" for 0x402eaa>, <DisassemblerInsn "add" for 0x402ead>, <DisassemblerInsn "add" for 0x402eb1>, <DisassemblerInsn "mov" for 0x402eb4>, <DisassemblerInsn "mov" for 0x402ebc>, <DisassemblerInsn "mov" for 0x402ec4>, <DisassemblerInsn "mov" for 0x402ecb>, <DisassemblerInsn "mov" for 0x402ed3>, <DisassemblerInsn "mov" for 0x402edb>, <DisassemblerInsn "mov" for 0x402ee3>, <DisassemblerInsn "mov" for 0x402eea>, <DisassemblerInsn "mov" for 0x402ef1>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "shr" for 0x402f04>, <DisassemblerInsn "mov" for 0x402f07>, <DisassemblerInsn "movabs" for 0x402f0f>, <DisassemblerInsn "and" for 0x402f19>, <DisassemblerInsn "movsx" for 0x402f1c>, <DisassemblerInsn "mov" for 0x402f21>, <DisassemblerInsn "mov" for 0x402f28>, <DisassemblerInsn "movsx" for 0x402f2e>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "cmp" for 0x402f39>, <DisassemblerInsn "mov" for 0x402f3e>, <DisassemblerInsn "mov" for 0x402f46>, <DisassemblerInsn "mov" for 0x402f4d>, <DisassemblerInsn "mov" for 0x402f55>, <DisassemblerInsn "mov" for 0x402f5c>, <DisassemblerInsn "jge" for 0x402f63>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40315e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034ec>, <DisassemblerInsn "add" for 0x4034f3>, <DisassemblerInsn "pop" for 0x4034fa>, <DisassemblerInsn "pop" for 0x4034fb>, <DisassemblerInsn "pop" for 0x4034fd>, <DisassemblerInsn "ret" for 0x4034fe>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026ad>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4034d3>, <DisassemblerInsn "call" for 0x4034db>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023c4>, <DisassemblerInsn "mov" for 0x4023cc>, <DisassemblerInsn "mov" for 0x4023d4>, <DisassemblerInsn "mov" for 0x4023dc>, <DisassemblerInsn "mov" for 0x4023e4>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "add" for 0x4023f7>, <DisassemblerInsn "mov" for 0x4023fa>, <DisassemblerInsn "test" for 0x402401>, <DisassemblerInsn "mov" for 0x402405>, <DisassemblerInsn "cmovne" for 0x402408>, <DisassemblerInsn "mov" for 0x40240c>, <DisassemblerInsn "test" for 0x402414>, <DisassemblerInsn "cmovne" for 0x402418>, <DisassemblerInsn "mov" for 0x40241c>, <DisassemblerInsn "mov" for 0x402423>, <DisassemblerInsn "add" for 0x402427>, <DisassemblerInsn "mov" for 0x40242a>, <DisassemblerInsn "cmp" for 0x402432>, <DisassemblerInsn "mov" for 0x402435>, <DisassemblerInsn "mov" for 0x40243d>, <DisassemblerInsn "jl" for 0x402444>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403040>, <DisassemblerInsn "mov" for 0x403048>, <DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "mov" for 0x403066>, <DisassemblerInsn "mov" for 0x40306e>, <DisassemblerInsn "mov" for 0x403076>, <DisassemblerInsn "mov" for 0x40307d>, <DisassemblerInsn "add" for 0x403085>, <DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "mov" for 0x40308a>, <DisassemblerInsn "shr" for 0x40308d>, <DisassemblerInsn "mov" for 0x403090>, <DisassemblerInsn "add" for 0x403093>, <DisassemblerInsn "mov" for 0x403096>, <DisassemblerInsn "mov" for 0x403098>, <DisassemblerInsn "mov" for 0x40309b>, <DisassemblerInsn "movsx" for 0x4030a1>, <DisassemblerInsn "mov" for 0x4030a5>, <DisassemblerInsn "movsx" for 0x4030ac>, <DisassemblerInsn "mov" for 0x4030b1>, <DisassemblerInsn "cmp" for 0x4030b8>, <DisassemblerInsn "mov" for 0x4030bd>, <DisassemblerInsn "mov" for 0x4030c5>, <DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030db>, <DisassemblerInsn "jge" for 0x4030e2>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402373>, <DisassemblerInsn "mov" for 0x40237a>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "mov" for 0x402389>, <DisassemblerInsn "mov" for 0x402390>, <DisassemblerInsn "test" for 0x402398>, <DisassemblerInsn "sete" for 0x40239a>, <DisassemblerInsn "xor" for 0x40239d>, <DisassemblerInsn "or" for 0x4023a0>, <DisassemblerInsn "xor" for 0x4023a2>, <DisassemblerInsn "test" for 0x4023a4>, <DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "mov" for 0x4023af>, <DisassemblerInsn "jne" for 0x4023b6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401e20>, <DisassemblerInsn "push" for 0x401e21>, <DisassemblerInsn "push" for 0x401e23>, <DisassemblerInsn "sub" for 0x401e24>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "mov" for 0x401e68>, <DisassemblerInsn "mov" for 0x401e70>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "lea" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "cmp" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e8e>, <DisassemblerInsn "jne" for 0x401e95>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "mov" for 0x401ffb>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "call" for 0x402007>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034b4>, <DisassemblerInsn "mov" for 0x4034bc>, <DisassemblerInsn "mov" for 0x4034c4>, <DisassemblerInsn "mov" for 0x4034c7>, <DisassemblerInsn "mov" for 0x4034cc>, <DisassemblerInsn "call" for 0x4034ce>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac6>, <DisassemblerInsn "mov" for 0x402ace>, <DisassemblerInsn "mov" for 0x402ad6>, <DisassemblerInsn "mov" for 0x402ade>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "mov" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af5>, <DisassemblerInsn "mov" for 0x402afd>, <DisassemblerInsn "mov" for 0x402b05>, <DisassemblerInsn "mov" for 0x402b08>, <DisassemblerInsn "cmp" for 0x402b10>, <DisassemblerInsn "mov" for 0x402b17>, <DisassemblerInsn "mov" for 0x402b1f>, <DisassemblerInsn "mov" for 0x402b26>, <DisassemblerInsn "mov" for 0x402b2e>, <DisassemblerInsn "mov" for 0x402b36>, <DisassemblerInsn "mov" for 0x402b3e>, <DisassemblerInsn "ja" for 0x402b46>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402970>, <DisassemblerInsn "imul" for 0x402978>, <DisassemblerInsn "cdq" for 0x40297b>, <DisassemblerInsn "idiv" for 0x40297c>, <DisassemblerInsn "mov" for 0x40297e>, <DisassemblerInsn "mov" for 0x402986>, <DisassemblerInsn "mov" for 0x402988>, <DisassemblerInsn "and" for 0x402990>, <DisassemblerInsn "mov" for 0x402993>, <DisassemblerInsn "movsxd" for 0x40299a>, <DisassemblerInsn "imul" for 0x40299d>, <DisassemblerInsn "add" for 0x4029a1>, <DisassemblerInsn "mov" for 0x4029a4>, <DisassemblerInsn "xor" for 0x4029ac>, <DisassemblerInsn "mov" for 0x4029ae>, <DisassemblerInsn "xor" for 0x4029b0>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "mov" for 0x4029be>, <DisassemblerInsn "je" for 0x4029c5>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40349c>, <DisassemblerInsn "call" for 0x4034a4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "movzx" for 0x4022c9>, <DisassemblerInsn "mov" for 0x4022d1>, <DisassemblerInsn "mov" for 0x4022d8>, <DisassemblerInsn "add" for 0x4022db>, <DisassemblerInsn "mov" for 0x4022df>, <DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ea>, <DisassemblerInsn "xor" for 0x4022f1>, <DisassemblerInsn "cmp" for 0x4022f3>, <DisassemblerInsn "mov" for 0x4022f6>, <DisassemblerInsn "jle" for 0x4022fd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c90>, <DisassemblerInsn "mov" for 0x402c97>, <DisassemblerInsn "mov" for 0x402c9f>, <DisassemblerInsn "mov" for 0x402ca7>, <DisassemblerInsn "mov" for 0x402cae>, <DisassemblerInsn "mov" for 0x402cb6>, <DisassemblerInsn "mov" for 0x402cbe>, <DisassemblerInsn "mov" for 0x402cc6>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd3>, <DisassemblerInsn "mov" for 0x402cda>, <DisassemblerInsn "sub" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce3>, <DisassemblerInsn "mov" for 0x402ce6>, <DisassemblerInsn "mov" for 0x402cee>, <DisassemblerInsn "mov" for 0x402cf0>, <DisassemblerInsn "mov" for 0x402cf8>, <DisassemblerInsn "mov" for 0x402cfd>, <DisassemblerInsn "mov" for 0x402d05>, <DisassemblerInsn "mov" for 0x402d0c>, <DisassemblerInsn "mov" for 0x402d13>, <DisassemblerInsn "mov" for 0x402d1b>, <DisassemblerInsn "mov" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d2a>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d51>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "mov" for 0x402d60>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "xor" for 0x402d70>, <DisassemblerInsn "test" for 0x402d72>, <DisassemblerInsn "mov" for 0x402d76>, <DisassemblerInsn "mov" for 0x402d7e>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8d>, <DisassemblerInsn "mov" for 0x402d95>, <DisassemblerInsn "jne" for 0x402d9c>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3c>, <DisassemblerInsn "mov" for 0x402a43>, <DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a61>, <DisassemblerInsn "movsxd" for 0x402a64>, <DisassemblerInsn "add" for 0x402a67>, <DisassemblerInsn "shl" for 0x402a6a>, <DisassemblerInsn "movsxd" for 0x402a6d>, <DisassemblerInsn "add" for 0x402a70>, <DisassemblerInsn "movsxd" for 0x402a73>, <DisassemblerInsn "mov" for 0x402a76>, <DisassemblerInsn "call" for 0x402a7e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402291>, <DisassemblerInsn "mov" for 0x402299>, <DisassemblerInsn "mov" for 0x40229d>, <DisassemblerInsn "lea" for 0x4022a2>, <DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "call" for 0x4022ab>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40340a>, <DisassemblerInsn "mov" for 0x403411>, <DisassemblerInsn "mov" for 0x403415>, <DisassemblerInsn "mov" for 0x40341a>, <DisassemblerInsn "mov" for 0x403422>, <DisassemblerInsn "mov" for 0x40342a>, <DisassemblerInsn "mov" for 0x40342f>, <DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "movsxd" for 0x40344a>, <DisassemblerInsn "cmp" for 0x40344d>, <DisassemblerInsn "mov" for 0x403450>, <DisassemblerInsn "mov" for 0x403458>, <DisassemblerInsn "mov" for 0x403460>, <DisassemblerInsn "mov" for 0x403468>, <DisassemblerInsn "mov" for 0x403470>, <DisassemblerInsn "mov" for 0x403478>, <DisassemblerInsn "mov" for 0x403480>, <DisassemblerInsn "mov" for 0x403488>, <DisassemblerInsn "mov" for 0x40348f>, <DisassemblerInsn "jl" for 0x403496>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4025db>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402202>, <DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222f>, <DisassemblerInsn "movzx" for 0x402237>, <DisassemblerInsn "add" for 0x40223b>, <DisassemblerInsn "lea" for 0x40223e>, <DisassemblerInsn "mov" for 0x402246>, <DisassemblerInsn "xor" for 0x40224c>, <DisassemblerInsn "mov" for 0x40224f>, <DisassemblerInsn "mov" for 0x402252>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226b>, <DisassemblerInsn "mov" for 0x402273>, <DisassemblerInsn "mov" for 0x40227b>, <DisassemblerInsn "call" for 0x402283>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "lea" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401eda>, <DisassemblerInsn "lea" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "lea" for 0x401ef2>, <DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "lea" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "xor" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f14>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f34>, <DisassemblerInsn "mov" for 0x401f37>, <DisassemblerInsn "mov" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "or" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "or" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f86>, <DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "or" for 0x401f93>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "add" for 0x401fad>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbd>, <DisassemblerInsn "add" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "cmp" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "jne" for 0x401fe8>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030e8>, <DisassemblerInsn "mov" for 0x4030f0>, <DisassemblerInsn "mov" for 0x4030f8>, <DisassemblerInsn "mov" for 0x4030ff>, <DisassemblerInsn "mov" for 0x403106>, <DisassemblerInsn "mov" for 0x40310e>, <DisassemblerInsn "shl" for 0x403115>, <DisassemblerInsn "mov" for 0x403118>, <DisassemblerInsn "mov" for 0x40311f>, <DisassemblerInsn "add" for 0x403124>, <DisassemblerInsn "mov" for 0x403126>, <DisassemblerInsn "neg" for 0x40312a>, <DisassemblerInsn "mov" for 0x40312c>, <DisassemblerInsn "sub" for 0x40312e>, <DisassemblerInsn "setb" for 0x403130>, <DisassemblerInsn "mov" for 0x403134>, <DisassemblerInsn "sub" for 0x403137>, <DisassemblerInsn "setb" for 0x40313a>, <DisassemblerInsn "and" for 0x40313e>, <DisassemblerInsn "test" for 0x403141>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "mov" for 0x40314d>, <DisassemblerInsn "mov" for 0x403154>, <DisassemblerInsn "jne" for 0x40315c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222f>, <DisassemblerInsn "movzx" for 0x402237>, <DisassemblerInsn "add" for 0x40223b>, <DisassemblerInsn "lea" for 0x40223e>, <DisassemblerInsn "mov" for 0x402246>, <DisassemblerInsn "xor" for 0x40224c>, <DisassemblerInsn "mov" for 0x40224f>, <DisassemblerInsn "mov" for 0x402252>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226b>, <DisassemblerInsn "mov" for 0x402273>, <DisassemblerInsn "mov" for 0x40227b>, <DisassemblerInsn "call" for 0x402283>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402da3>, <DisassemblerInsn "mov" for 0x402daa>, <DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "mov" for 0x402dba>, <DisassemblerInsn "mov" for 0x402dc2>, <DisassemblerInsn "mov" for 0x402dca>, <DisassemblerInsn "mov" for 0x402dd2>, <DisassemblerInsn "mov" for 0x402dd9>, <DisassemblerInsn "mov" for 0x402de0>, <DisassemblerInsn "mov" for 0x402de8>, <DisassemblerInsn "mov" for 0x402df0>, <DisassemblerInsn "mov" for 0x402df8>, <DisassemblerInsn "sub" for 0x402e00>, <DisassemblerInsn "shl" for 0x402e03>, <DisassemblerInsn "add" for 0x402e06>, <DisassemblerInsn "add" for 0x402e08>, <DisassemblerInsn "lea" for 0x402e0a>, <DisassemblerInsn "cmp" for 0x402e11>, <DisassemblerInsn "mov" for 0x402e14>, <DisassemblerInsn "jl" for 0x402e1c>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ba6>, <DisassemblerInsn "mov" for 0x402bae>, <DisassemblerInsn "mov" for 0x402bb5>, <DisassemblerInsn "shl" for 0x402bb8>, <DisassemblerInsn "mov" for 0x402bbc>, <DisassemblerInsn "mov" for 0x402bbe>, <DisassemblerInsn "add" for 0x402bc1>, <DisassemblerInsn "mov" for 0x402bc4>, <DisassemblerInsn "bswap" for 0x402bc7>, <DisassemblerInsn "mov" for 0x402bca>, <DisassemblerInsn "add" for 0x402bcd>, <DisassemblerInsn "mov" for 0x402bd1>, <DisassemblerInsn "mov" for 0x402bd6>, <DisassemblerInsn "mov" for 0x402bde>, <DisassemblerInsn "mov" for 0x402be5>, <DisassemblerInsn "mov" for 0x402bed>, <DisassemblerInsn "mov" for 0x402bf5>, <DisassemblerInsn "mov" for 0x402bfd>, <DisassemblerInsn "mov" for 0x402c05>, <DisassemblerInsn "mov" for 0x402c0c>, <DisassemblerInsn "mov" for 0x402c13>, <DisassemblerInsn "mov" for 0x402c1b>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c2a>, <DisassemblerInsn "mov" for 0x402c32>, <DisassemblerInsn "mov" for 0x402c3a>, <DisassemblerInsn "mov" for 0x402c42>, <DisassemblerInsn "mov" for 0x402c4a>, <DisassemblerInsn "mov" for 0x402c52>, <DisassemblerInsn "mov" for 0x402c5a>, <DisassemblerInsn "mov" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c69>, <DisassemblerInsn "cmp" for 0x402c71>, <DisassemblerInsn "mov" for 0x402c73>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "mov" for 0x402c82>, <DisassemblerInsn "jge" for 0x402c8a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402040>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "mov" for 0x402050>, <DisassemblerInsn "mov" for 0x402057>, <DisassemblerInsn "sub" for 0x40205e>, <DisassemblerInsn "mov" for 0x402061>, <DisassemblerInsn "sete" for 0x402068>, <DisassemblerInsn "test" for 0x40206b>, <DisassemblerInsn "setne" for 0x40206e>, <DisassemblerInsn "and" for 0x402071>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "add" for 0x40207a>, <DisassemblerInsn "mov" for 0x40207e>, <DisassemblerInsn "test" for 0x402086>, <DisassemblerInsn "mov" for 0x402089>, <DisassemblerInsn "jne" for 0x402091>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c05>, <DisassemblerInsn "mov" for 0x402c0c>, <DisassemblerInsn "mov" for 0x402c13>, <DisassemblerInsn "mov" for 0x402c1b>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c2a>, <DisassemblerInsn "mov" for 0x402c32>, <DisassemblerInsn "mov" for 0x402c3a>, <DisassemblerInsn "mov" for 0x402c42>, <DisassemblerInsn "mov" for 0x402c4a>, <DisassemblerInsn "mov" for 0x402c52>, <DisassemblerInsn "mov" for 0x402c5a>, <DisassemblerInsn "mov" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c69>, <DisassemblerInsn "cmp" for 0x402c71>, <DisassemblerInsn "mov" for 0x402c73>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "mov" for 0x402c82>, <DisassemblerInsn "jge" for 0x402c8a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40279d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40266e>, <DisassemblerInsn "mov" for 0x402675>, <DisassemblerInsn "mov" for 0x40267d>, <DisassemblerInsn "mov" for 0x402685>, <DisassemblerInsn "add" for 0x40268c>, <DisassemblerInsn "mov" for 0x40268f>, <DisassemblerInsn "xor" for 0x402697>, <DisassemblerInsn "test" for 0x402699>, <DisassemblerInsn "mov" for 0x40269c>, <DisassemblerInsn "mov" for 0x4026a4>, <DisassemblerInsn "jne" for 0x4026ab>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c7>, <DisassemblerInsn "mov" for 0x4029cf>, <DisassemblerInsn "shl" for 0x4029d7>, <DisassemblerInsn "movabs" for 0x4029db>, <DisassemblerInsn "and" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029e8>, <DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "mov" for 0x4029fa>, <DisassemblerInsn "mov" for 0x402a02>, <DisassemblerInsn "mov" for 0x402a0a>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a18>, <DisassemblerInsn "sub" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a1d>, <DisassemblerInsn "lea" for 0x402a24>, <DisassemblerInsn "cmp" for 0x402a2b>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "je" for 0x402a36>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fef>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffe>, <DisassemblerInsn "mov" for 0x403006>, <DisassemblerInsn "bswap" for 0x403008>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "mov" for 0x40300c>, <DisassemblerInsn "sub" for 0x403011>, <DisassemblerInsn "mov" for 0x403013>, <DisassemblerInsn "shl" for 0x403015>, <DisassemblerInsn "mov" for 0x403018>, <DisassemblerInsn "or" for 0x40301f>, <DisassemblerInsn "add" for 0x403022>, <DisassemblerInsn "add" for 0x403026>, <DisassemblerInsn "mov" for 0x403029>, <DisassemblerInsn "mov" for 0x403031>, <DisassemblerInsn "mov" for 0x403038>, <DisassemblerInsn "mov" for 0x403040>, <DisassemblerInsn "mov" for 0x403048>, <DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "mov" for 0x403066>, <DisassemblerInsn "mov" for 0x40306e>, <DisassemblerInsn "mov" for 0x403076>, <DisassemblerInsn "mov" for 0x40307d>, <DisassemblerInsn "add" for 0x403085>, <DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "mov" for 0x40308a>, <DisassemblerInsn "shr" for 0x40308d>, <DisassemblerInsn "mov" for 0x403090>, <DisassemblerInsn "add" for 0x403093>, <DisassemblerInsn "mov" for 0x403096>, <DisassemblerInsn "mov" for 0x403098>, <DisassemblerInsn "mov" for 0x40309b>, <DisassemblerInsn "movsx" for 0x4030a1>, <DisassemblerInsn "mov" for 0x4030a5>, <DisassemblerInsn "movsx" for 0x4030ac>, <DisassemblerInsn "mov" for 0x4030b1>, <DisassemblerInsn "cmp" for 0x4030b8>, <DisassemblerInsn "mov" for 0x4030bd>, <DisassemblerInsn "mov" for 0x4030c5>, <DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030db>, <DisassemblerInsn "jge" for 0x4030e2>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402fed>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "cmp" for 0x40202e>, <DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "jbe" for 0x402039>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028cb>, <DisassemblerInsn "mov" for 0x4028d3>, <DisassemblerInsn "mov" for 0x4028db>, <DisassemblerInsn "mov" for 0x4028e2>, <DisassemblerInsn "mov" for 0x4028ea>, <DisassemblerInsn "mov" for 0x4028f1>, <DisassemblerInsn "mov" for 0x4028f8>, <DisassemblerInsn "mov" for 0x402900>, <DisassemblerInsn "mov" for 0x402908>, <DisassemblerInsn "mov" for 0x402910>, <DisassemblerInsn "mov" for 0x402918>, <DisassemblerInsn "mov" for 0x40291f>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292f>, <DisassemblerInsn "mov" for 0x402936>, <DisassemblerInsn "mov" for 0x40293e>, <DisassemblerInsn "mov" for 0x402946>, <DisassemblerInsn "mov" for 0x40294e>, <DisassemblerInsn "mov" for 0x402956>, <DisassemblerInsn "mov" for 0x40295d>, <DisassemblerInsn "mov" for 0x402964>, <DisassemblerInsn "add" for 0x40296c>, <DisassemblerInsn "mov" for 0x402970>, <DisassemblerInsn "imul" for 0x402978>, <DisassemblerInsn "cdq" for 0x40297b>, <DisassemblerInsn "idiv" for 0x40297c>, <DisassemblerInsn "mov" for 0x40297e>, <DisassemblerInsn "mov" for 0x402986>, <DisassemblerInsn "mov" for 0x402988>, <DisassemblerInsn "and" for 0x402990>, <DisassemblerInsn "mov" for 0x402993>, <DisassemblerInsn "movsxd" for 0x40299a>, <DisassemblerInsn "imul" for 0x40299d>, <DisassemblerInsn "add" for 0x4029a1>, <DisassemblerInsn "mov" for 0x4029a4>, <DisassemblerInsn "xor" for 0x4029ac>, <DisassemblerInsn "mov" for 0x4029ae>, <DisassemblerInsn "xor" for 0x4029b0>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "mov" for 0x4029be>, <DisassemblerInsn "je" for 0x4029c5>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402496>, <DisassemblerInsn "mov" for 0x40249d>, <DisassemblerInsn "mov" for 0x4024a4>, <DisassemblerInsn "mov" for 0x4024ab>, <DisassemblerInsn "mov" for 0x4024b2>, <DisassemblerInsn "mov" for 0x4024b9>, <DisassemblerInsn "mov" for 0x4024c0>, <DisassemblerInsn "add" for 0x4024c7>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "imul" for 0x4024d1>, <DisassemblerInsn "cdq" for 0x4024d4>, <DisassemblerInsn "idiv" for 0x4024d5>, <DisassemblerInsn "mov" for 0x4024d7>, <DisassemblerInsn "mov" for 0x4024de>, <DisassemblerInsn "mov" for 0x4024e0>, <DisassemblerInsn "and" for 0x4024e7>, <DisassemblerInsn "mov" for 0x4024e9>, <DisassemblerInsn "cmp" for 0x4024f0>, <DisassemblerInsn "mov" for 0x4024f2>, <DisassemblerInsn "jle" for 0x4024f9>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "mov" for 0x40230a>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "mov" for 0x402318>, <DisassemblerInsn "imul" for 0x40231f>, <DisassemblerInsn "cmp" for 0x402322>, <DisassemblerInsn "setg" for 0x402325>, <DisassemblerInsn "mov" for 0x402329>, <DisassemblerInsn "cmp" for 0x402331>, <DisassemblerInsn "sete" for 0x402334>, <DisassemblerInsn "mov" for 0x402338>, <DisassemblerInsn "movsxd" for 0x402340>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "cdqe" for 0x40234b>, <DisassemblerInsn "mov" for 0x40234d>, <DisassemblerInsn "xor" for 0x402355>, <DisassemblerInsn "mov" for 0x402357>, <DisassemblerInsn "mov" for 0x40235e>, <DisassemblerInsn "mov" for 0x402360>, <DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "jmp" for 0x40236e>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f69>, <DisassemblerInsn "mov" for 0x402f71>, <DisassemblerInsn "mov" for 0x402f79>, <DisassemblerInsn "mov" for 0x402f80>, <DisassemblerInsn "mov" for 0x402f87>, <DisassemblerInsn "mov" for 0x402f8f>, <DisassemblerInsn "shl" for 0x402f97>, <DisassemblerInsn "mov" for 0x402f9a>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "sub" for 0x402fa9>, <DisassemblerInsn "mov" for 0x402fab>, <DisassemblerInsn "neg" for 0x402fb2>, <DisassemblerInsn "mov" for 0x402fb4>, <DisassemblerInsn "mov" for 0x402fbb>, <DisassemblerInsn "sub" for 0x402fbd>, <DisassemblerInsn "setb" for 0x402fbf>, <DisassemblerInsn "mov" for 0x402fc3>, <DisassemblerInsn "sub" for 0x402fc6>, <DisassemblerInsn "setb" for 0x402fc9>, <DisassemblerInsn "and" for 0x402fcd>, <DisassemblerInsn "test" for 0x402fd0>, <DisassemblerInsn "mov" for 0x402fd4>, <DisassemblerInsn "mov" for 0x402fdc>, <DisassemblerInsn "mov" for 0x402fe3>, <DisassemblerInsn "jne" for 0x402feb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402013>, <DisassemblerInsn "cmp" for 0x40201a>, <DisassemblerInsn "je" for 0x40201c>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40244a>, <DisassemblerInsn "mov" for 0x402452>, <DisassemblerInsn "mov" for 0x402454>, <DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "mov" for 0x402469>, <DisassemblerInsn "xor" for 0x402470>, <DisassemblerInsn "cmp" for 0x402472>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "mov" for 0x40247b>, <DisassemblerInsn "mov" for 0x402482>, <DisassemblerInsn "mov" for 0x402489>, <DisassemblerInsn "jge" for 0x402490>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031a8>, <DisassemblerInsn "mov" for 0x4031b0>, <DisassemblerInsn "mov" for 0x4031b8>, <DisassemblerInsn "mov" for 0x4031bf>, <DisassemblerInsn "mov" for 0x4031c7>, <DisassemblerInsn "mov" for 0x4031ce>, <DisassemblerInsn "add" for 0x4031d6>, <DisassemblerInsn "mov" for 0x4031d9>, <DisassemblerInsn "mov" for 0x4031db>, <DisassemblerInsn "shr" for 0x4031de>, <DisassemblerInsn "mov" for 0x4031e1>, <DisassemblerInsn "add" for 0x4031e4>, <DisassemblerInsn "mov" for 0x4031e7>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "movsx" for 0x4031ec>, <DisassemblerInsn "movsx" for 0x4031f2>, <DisassemblerInsn "mov" for 0x4031f7>, <DisassemblerInsn "mov" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403206>, <DisassemblerInsn "mov" for 0x40320e>, <DisassemblerInsn "mov" for 0x403215>, <DisassemblerInsn "mov" for 0x40321c>, <DisassemblerInsn "mov" for 0x403224>, <DisassemblerInsn "mov" for 0x40322b>, <DisassemblerInsn "mov" for 0x403233>, <DisassemblerInsn "mov" for 0x40323a>, <DisassemblerInsn "mov" for 0x403241>, <DisassemblerInsn "mov" for 0x403245>, <DisassemblerInsn "mov" for 0x403249>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "mov" for 0x403252>, <DisassemblerInsn "lea" for 0x403257>, <DisassemblerInsn "cmp" for 0x40325e>, <DisassemblerInsn "mov" for 0x403261>, <DisassemblerInsn "jl" for 0x403269>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "mov" for 0x402469>, <DisassemblerInsn "xor" for 0x402470>, <DisassemblerInsn "cmp" for 0x402472>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "mov" for 0x40247b>, <DisassemblerInsn "mov" for 0x402482>, <DisassemblerInsn "mov" for 0x402489>, <DisassemblerInsn "jge" for 0x402490>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033e8>, <DisassemblerInsn "mov" for 0x4033ec>, <DisassemblerInsn "mov" for 0x4033f4>, <DisassemblerInsn "mov" for 0x4033f7>, <DisassemblerInsn "lea" for 0x4033fc>, <DisassemblerInsn "mov" for 0x403403>, <DisassemblerInsn "call" for 0x403405>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402288>, <DisassemblerInsn "je" for 0x40228b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024ff>, <DisassemblerInsn "mov" for 0x402506>, <DisassemblerInsn "mov" for 0x40250d>, <DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "movsxd" for 0x40251d>, <DisassemblerInsn "imul" for 0x402520>, <DisassemblerInsn "add" for 0x402524>, <DisassemblerInsn "mov" for 0x402527>, <DisassemblerInsn "mov" for 0x40252f>, <DisassemblerInsn "sub" for 0x402531>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "add" for 0x40253a>, <DisassemblerInsn "and" for 0x40253d>, <DisassemblerInsn "mov" for 0x402540>, <DisassemblerInsn "mov" for 0x402547>, <DisassemblerInsn "cmp" for 0x40254c>, <DisassemblerInsn "mov" for 0x40254e>, <DisassemblerInsn "mov" for 0x402556>, <DisassemblerInsn "je" for 0x40255d>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402740>, <DisassemblerInsn "mov" for 0x402747>, <DisassemblerInsn "mov" for 0x40274e>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "mov" for 0x40275e>, <DisassemblerInsn "add" for 0x402765>, <DisassemblerInsn "add" for 0x402768>, <DisassemblerInsn "cmp" for 0x40276b>, <DisassemblerInsn "mov" for 0x40276d>, <DisassemblerInsn "mov" for 0x402770>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277a>, <DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "mov" for 0x402789>, <DisassemblerInsn "mov" for 0x402790>, <DisassemblerInsn "je" for 0x402797>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402563>, <DisassemblerInsn "mov" for 0x40256b>, <DisassemblerInsn "and" for 0x402572>, <DisassemblerInsn "mov" for 0x402575>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "xor" for 0x402581>, <DisassemblerInsn "mov" for 0x402583>, <DisassemblerInsn "mov" for 0x40258b>, <DisassemblerInsn "mov" for 0x402592>, <DisassemblerInsn "mov" for 0x402599>, <DisassemblerInsn "mov" for 0x4025a0>, <DisassemblerInsn "mov" for 0x4025a8>, <DisassemblerInsn "mov" for 0x4025af>, <DisassemblerInsn "mov" for 0x4025b6>, <DisassemblerInsn "mov" for 0x4025bd>, <DisassemblerInsn "xor" for 0x4025c5>, <DisassemblerInsn "test" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "jne" for 0x4025d9>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40326f>, <DisassemblerInsn "mov" for 0x403277>, <DisassemblerInsn "mov" for 0x40327f>, <DisassemblerInsn "mov" for 0x403287>, <DisassemblerInsn "mov" for 0x40328f>, <DisassemblerInsn "mov" for 0x403296>, <DisassemblerInsn "mov" for 0x40329e>, <DisassemblerInsn "mov" for 0x4032a3>, <DisassemblerInsn "mov" for 0x4032a8>, <DisassemblerInsn "mov" for 0x4032ac>, <DisassemblerInsn "sub" for 0x4032b0>, <DisassemblerInsn "mov" for 0x4032b2>, <DisassemblerInsn "shl" for 0x4032b4>, <DisassemblerInsn "mov" for 0x4032b7>, <DisassemblerInsn "mov" for 0x4032bc>, <DisassemblerInsn "add" for 0x4032bf>, <DisassemblerInsn "test" for 0x4032c1>, <DisassemblerInsn "mov" for 0x4032c5>, <DisassemblerInsn "cmovne" for 0x4032c8>, <DisassemblerInsn "test" for 0x4032cc>, <DisassemblerInsn "cmovne" for 0x4032d0>, <DisassemblerInsn "mov" for 0x4032d3>, <DisassemblerInsn "add" for 0x4032d7>, <DisassemblerInsn "cmp" for 0x4032da>, <DisassemblerInsn "mov" for 0x4032dd>, <DisassemblerInsn "mov" for 0x4032e5>, <DisassemblerInsn "mov" for 0x4032ec>, <DisassemblerInsn "mov" for 0x4032f4>, <DisassemblerInsn "mov" for 0x4032fc>, <DisassemblerInsn "jl" for 0x403303>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3b8]>', '<mov~~rcx, qword ptr [rsp + 0x3b0]>', '<mov~~rdx, qword ptr [rsp + 0x440]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~rdi, qword ptr [rsp + 0x3a8]>', '<mov~~r10b, byte ptr [rsp + 0x437]>', '<mov~~r11d, dword ptr [rsp + 0x454]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x390], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x394], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<jl~~0x4025e0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jmp~~0x4034ec>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x47f2]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x4034b4>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2cc]>', '<mov~~edi, dword ptr [rsp + 0x15c]>', '<mov~~r10, qword ptr [rsp + 0x540]>', '<mov~~r8, qword ptr [rsp + 0x160]>', '<mov~~edx, dword ptr [rsp + 0x18c]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~esi, dword ptr [rsp + 0x174]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1b0], r8>', '<mov~~dword ptr [rsp + 0x1b8], edi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jne~~0x402d2a>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x307]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~r9d, dword ptr [rsp + 0x1b8]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~dword ptr [rsp + 0x15c], r9d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402da3>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~esi, dword ptr [rsp + 0x130]>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x40321c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~al, byte ptr [rsp + 0x4bd]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x494], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x494]>', '<mov~~dword ptr [rsp + rdx*4 + 0x790], esi>', '<mov~~byte ptr [rsp + rdx + 0x690], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xb90]>', '<mov~~byte ptr [rsp + rdx + 0x590], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x498], rdx>', '<mov~~dword ptr [rsp + 0x4a4], ecx>', '<mov~~dword ptr [rsp + 0x4a8], eax>', '<jle~~0x4021e7>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x360], eax>', '<cmp~~eax, 0>', '<jle~~0x40349c>']}, {'block_Idx': 45, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jmp~~0x4034ec>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4bd]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x46e], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x46f], al>', '<jb~~0x402210>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x200]>', '<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rsi, qword ptr [rsp + 0x208]>', '<mov~~rdi, qword ptr [rsp + 0x210]>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~dword ptr [rsp + 0x48], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<cmp~~eax, 0x20>', '<jle~~0x40340a>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x360]>', '<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~esi, dword ptr [rsp + 0x54c]>', '<mov~~rdi, qword ptr [rsp + 0x558]>', '<mov~~r8d, dword ptr [rsp + 0x564]>', '<mov~~edx, dword ptr [rsp + 0x53c]>', '<mov~~r9, rdi>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x2e8], r9>', '<mov~~r10, rdi>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x2f0], r10>', '<mov~~qword ptr [rsp + 0x2f8], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x307], r9b>', '<lea~~r9, [rsp + 0x578]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x308], r9>', '<lea~~r9, [rsp + 0x578]>', '<mov~~qword ptr [rsp + 0x310], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x31f], r8b>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x320], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x328], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x338], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x340], rdx>', '<mov~~dword ptr [rsp + 0x348], ecx>', '<mov~~dword ptr [rsp + 0x34c], eax>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~r8d, dword ptr [rsp + 0x504]>', '<mov~~edx, dword ptr [rsp + 0x570]>', '<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~edi, dword ptr [rsp + 0x348]>', '<mov~~ecx, dword ptr [rsp + 0x34c]>', '<mov~~r9, qword ptr [rsp + 0x280]>', '<mov~~r10, qword ptr [rsp + 0x278]>', '<mov~~r11, qword ptr [rsp + 0x270]>', '<mov~~rbx, qword ptr [rsp + 0x268]>', '<mov~~ebp, dword ptr [rsp + 0x264]>', '<mov~~r14d, dword ptr [rsp + 0x260]>', '<mov~~dword ptr [rsp + 0x288], r14d>', '<mov~~dword ptr [rsp + 0x28c], ebp>', '<mov~~qword ptr [rsp + 0x290], rbx>', '<mov~~qword ptr [rsp + 0x298], r11>', '<mov~~qword ptr [rsp + 0x2a0], r10>', '<mov~~qword ptr [rsp + 0x2a8], r9>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rax, 1>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x403309>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x402291>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x574], eax>', '<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~ecx, dword ptr [rsp + 0x574]>', '<mov~~dword ptr [rsp + 0x504], ecx>', '<lea~~rcx, [rsp + 0xb90]>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<lea~~rcx, [rsp + 0x790]>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<lea~~rcx, [rsp + 0x690]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x590]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x402ecb>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x350]>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~eax, dword ptr [rsp + 0x2e4]>', '<mov~~dword ptr [rsp + 0x250], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x254], ecx>', '<lea~~rax, [rip + 0x4fc3]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<je~~0x4034b4>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x468], eax>', '<mov~~eax, dword ptr [rsp + 0x468]>', '<add~~rsp, 0x1390>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0x19c]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jne~~0x402e7c>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x388]>', '<mov~~rcx, qword ptr [rsp + 0x380]>', '<mov~~rdx, qword ptr [rsp + 0x440]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~rdi, qword ptr [rsp + 0x378]>', '<mov~~r10b, byte ptr [rsp + 0x437]>', '<mov~~r11d, dword ptr [rsp + 0x454]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x364], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x368], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x36c], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<mov~~dword ptr [rsp + 0x388], eax>', '<jl~~0x4026b2>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x7c]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xb4]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x8c]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x47f2]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x4034b4>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x436]>', '<mov~~rcx, qword ptr [rsp + 0x3c0]>', '<mov~~eax, dword ptr [rsp + 0x3c8]>', '<mov~~esi, dword ptr [rsp + 0x3cc]>', '<mov~~dword ptr [rsp + 0x3a4], esi>', '<mov~~qword ptr [rsp + 0x3a8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<jne~~0x4025e0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<cmp~~eax, -1>', '<jle~~0x4021e7>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4a8]>', '<mov~~ecx, dword ptr [rsp + 0x4a4]>', '<mov~~rsi, qword ptr [rsp + 0x498]>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x470], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x478], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x47c]>', '<mov~~dword ptr [rsp + 0x480], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x484], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xb8a]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x48c], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x488], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x48c]>', '<mov~~dword ptr [rsp + 0x490], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x78c], r8d>', '<mov~~byte ptr [rsp + rsi + 0x68f], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xb88]>', '<mov~~byte ptr [rsp + rsi + 0x58f], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x498], rdx>', '<mov~~dword ptr [rsp + 0x4a4], ecx>', '<mov~~dword ptr [rsp + 0x4a8], eax>', '<ja~~0x40211b>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rdx, qword ptr [rsp + 0x298]>', '<mov~~edi, dword ptr [rsp + 0x288]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x228], edi>', '<mov~~dword ptr [rsp + 0x22c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<je~~0x402c05>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~esi, dword ptr [rsp + 0x130]>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x40321c>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4031a8>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x468]>', '<add~~rsp, 0x1390>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x402740>']}, {'block_Idx': 52, 'blockInsts': ['<lea~~rdi, [rsp + 0x578]>', '<call~~0x500080>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x430]>', '<mov~~rcx, qword ptr [rsp + 0x428]>', '<mov~~rdx, qword ptr [rsp + 0x440]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~rdi, qword ptr [rsp + 0x420]>', '<mov~~r10b, byte ptr [rsp + 0x437]>', '<mov~~r11d, dword ptr [rsp + 0x454]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3f4], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3f8], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x400], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<mov~~dword ptr [rsp + 0x430], eax>', '<jl~~0x4023bc>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~rdi, qword ptr [rsp + 0xc8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x40321c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x436]>', '<mov~~edx, dword ptr [rsp + 0x41c]>', '<mov~~rsi, qword ptr [rsp + 0x410]>', '<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~qword ptr [rsp + 0x420], rsi>', '<test~~edx, edx>', '<sete~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<mov~~dword ptr [rsp + 0x430], eax>', '<jne~~0x40244a>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1390>', '<mov~~dword ptr [rsp + 0x53c], r9d>', '<mov~~qword ptr [rsp + 0x540], r8>', '<mov~~dword ptr [rsp + 0x54c], ecx>', '<mov~~qword ptr [rsp + 0x550], rdx>', '<mov~~qword ptr [rsp + 0x558], rdi>', '<mov~~eax, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x564], eax>', '<mov~~rax, qword ptr [rsp + 0x13b8]>', '<mov~~qword ptr [rsp + 0x568], rax>', '<mov~~eax, dword ptr [rsp + 0x13b0]>', '<mov~~dword ptr [rsp + 0x570], eax>', '<lea~~rax, [rsp + 0x578]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x574], eax>', '<jne~~0x401ebc>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe059]>', '<call~~0x500068>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x2e8]>', '<mov~~r9d, dword ptr [rsp + 0x254]>', '<mov~~r8d, dword ptr [rsp + 0x288]>', '<mov~~edi, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x298]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x220], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x228], r8d>', '<mov~~dword ptr [rsp + 0x22c], edi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<ja~~0x402c05>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2b8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<je~~0x4029fa>']}, {'block_Idx': 39, 'blockInsts': ['<lea~~rdi, [rsp + 0x578]>', '<call~~0x500080>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<movzx~~ecx, word ptr [rsp + 0xb90]>', '<mov~~dword ptr [rsp + 0x454], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x464], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jle~~0x4034ec>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~edi, dword ptr [rsp + 0x2b0]>', '<mov~~r8, qword ptr [rsp + 0x2d0]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~r9, qword ptr [rsp + 0x308]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x190], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x19c], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1a0], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1b0], r8>', '<mov~~dword ptr [rsp + 0x1b8], edi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<mov~~r8b, byte ptr [rsp + 0x307]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~r9d, dword ptr [rsp + 0x1b8]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~dword ptr [rsp + 0x15c], r9d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402da3>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~rdi, qword ptr [rsp + 0x2e8]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~rsi, qword ptr [rsp + 0x350]>', '<mov~~edx, dword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x218], rdx>', '<call~~0x500078>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x5729]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x200]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rsi, qword ptr [rsp + 0x1e8]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~r8, qword ptr [rsp + 0x38]>', '<mov~~r9d, dword ptr [rsp + 0x2cc]>', '<mov~~r11, qword ptr [rsp + 0x2b8]>', '<mov~~r10, qword ptr [rsp + 0x358]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x340], r11>', '<mov~~dword ptr [rsp + 0x348], r10d>', '<mov~~dword ptr [rsp + 0x34c], r9d>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x270], rsi>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~dword ptr [rsp + 0x264], ecx>', '<mov~~dword ptr [rsp + 0x260], eax>', '<jl~~0x4028cb>']}, {'block_Idx': 29, 'blockInsts': ['<jmp~~0x40266e>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x46e]>', '<mov~~byte ptr [rsp + 0x46f], al>', '<mov~~rax, qword ptr [rsp + 0x520]>', '<mov~~r10, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~sil, byte ptr [rsp + 0x46f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x578]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~ecx, dword ptr [rsp + 0x574]>', '<mov~~dword ptr [rsp + 0x504], ecx>', '<lea~~rcx, [rsp + 0xb90]>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<lea~~rcx, [rsp + 0x790]>', '<mov~~qword ptr [rsp + 0x510], rcx>', '<lea~~rcx, [rsp + 0x690]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x590]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<mov~~rsi, qword ptr [rsp + 0x530]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb90], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb92], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xb90], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xb92], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xb90], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xb92], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<mov~~qword ptr [rsp + 0x530], rax>', '<jne~~0x401f24>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0xb0]>', '<mov~~esi, dword ptr [rsp + 0xfc]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0xc4]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<add~~ecx, esi>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<neg~~edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~qword ptr [rsp + 0x90], rax>', '<jne~~0x403160>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x520]>', '<mov~~r10, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~sil, byte ptr [rsp + 0x46f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x578]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~r8d, dword ptr [rsp + 0x174]>', '<mov~~r9, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~qword ptr [rsp + 0x140], r9>', '<mov~~dword ptr [rsp + 0x14c], r8d>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x4c1f]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x4034b4>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x228], r8d>', '<mov~~dword ptr [rsp + 0x22c], edi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<mov~~esi, dword ptr [rsp + 0x2b0]>', '<mov~~edi, dword ptr [rsp + 0x2cc]>', '<mov~~r8d, dword ptr [rsp + 0x228]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rcx, qword ptr [rsp + 0x230]>', '<mov~~r9, qword ptr [rsp + 0x238]>', '<mov~~r10, qword ptr [rsp + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~qword ptr [rsp + 0x1e0], r10>', '<mov~~qword ptr [rsp + 0x1e8], r9>', '<mov~~qword ptr [rsp + 0x1f0], rcx>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jge~~0x4033a1>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xb92]>', '<mov~~byte ptr [rsp + 0x4bd], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x4be], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x4bf], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x4c0], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<jne~~0x402040>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2b0]>', '<mov~~edi, dword ptr [rsp + 0x2cc]>', '<mov~~r8d, dword ptr [rsp + 0x228]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rcx, qword ptr [rsp + 0x230]>', '<mov~~r9, qword ptr [rsp + 0x238]>', '<mov~~r10, qword ptr [rsp + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~qword ptr [rsp + 0x1e0], r10>', '<mov~~qword ptr [rsp + 0x1e8], r9>', '<mov~~qword ptr [rsp + 0x1f0], rcx>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jge~~0x4033a1>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x402599>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x436]>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x3a8]>', '<mov~~eax, dword ptr [rsp + 0x3b8]>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<mov~~dword ptr [rsp + 0x388], eax>', '<jne~~0x4026b2>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<mov~~rcx, qword ptr [rsp + 0x350]>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~eax, dword ptr [rsp + 0x2e4]>', '<mov~~dword ptr [rsp + 0x250], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x254], ecx>', '<lea~~rax, [rip + 0x4fc3]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<je~~0x4034b4>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rsp + 0xd4], ecx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~rdi, qword ptr [rsp + 0xc8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x40321c>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x403040>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4d7]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<jbe~~0x402040>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~r8d, dword ptr [rsp + 0x504]>', '<mov~~edx, dword ptr [rsp + 0x570]>', '<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~edi, dword ptr [rsp + 0x348]>', '<mov~~ecx, dword ptr [rsp + 0x34c]>', '<mov~~r9, qword ptr [rsp + 0x280]>', '<mov~~r10, qword ptr [rsp + 0x278]>', '<mov~~r11, qword ptr [rsp + 0x270]>', '<mov~~rbx, qword ptr [rsp + 0x268]>', '<mov~~ebp, dword ptr [rsp + 0x264]>', '<mov~~r14d, dword ptr [rsp + 0x260]>', '<mov~~dword ptr [rsp + 0x288], r14d>', '<mov~~dword ptr [rsp + 0x28c], ebp>', '<mov~~qword ptr [rsp + 0x290], rbx>', '<mov~~qword ptr [rsp + 0x298], r11>', '<mov~~qword ptr [rsp + 0x2a0], r10>', '<mov~~qword ptr [rsp + 0x2a8], r9>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2b8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<je~~0x4029fa>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x504]>', '<mov~~edx, dword ptr [rsp + 0x570]>', '<mov~~ecx, dword ptr [rsp + 0x448]>', '<mov~~edi, dword ptr [rsp + 0x44c]>', '<mov~~eax, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x3e0], edi>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x3ec], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x3e0]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x3e4]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3e8], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jle~~0x40245b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x464]>', '<mov~~edx, dword ptr [rsp + 0x54c]>', '<mov~~esi, dword ptr [rsp + 0x564]>', '<mov~~eax, dword ptr [rsp + 0x53c]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x436], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x437], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x438], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x440], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x448], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x44c], ecx>', '<mov~~dword ptr [rsp + 0x450], eax>', '<jmp~~0x402496>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rsp + 0xd4], ecx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<jne~~0x402fef>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xb92]>', '<mov~~byte ptr [rsp + 0x4d7], al>', '<cmp~~al, 0>', '<je~~0x4022c1>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<mov~~ecx, dword ptr [rsp + 0x3ec]>', '<mov~~edx, dword ptr [rsp + 0x3e8]>', '<mov~~esi, dword ptr [rsp + 0x3f0]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x448], esi>', '<mov~~dword ptr [rsp + 0x44c], edx>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jge~~0x4034ec>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xb4]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x8c]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x47f2]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x4034b4>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3ec]>', '<mov~~edx, dword ptr [rsp + 0x3e8]>', '<mov~~esi, dword ptr [rsp + 0x3f0]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x448], esi>', '<mov~~dword ptr [rsp + 0x44c], edx>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<mov~~dword ptr [rsp + 0x468], eax>', '<jge~~0x4034ec>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x465d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 34, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x4027a2>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3e8]>', '<mov~~esi, dword ptr [rsp + 0x3e0]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~rdi, qword ptr [rsp + 0x540]>', '<movsxd~~rax, esi>', '<imul~~rax, rdi>', '<add~~rcx, rax>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~eax, edx>', '<sub~~eax, esi>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<add~~esi, 1>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<mov~~eax, 0x80>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<je~~0x402373>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3bc]>', '<mov~~eax, dword ptr [rsp + 0x3a4]>', '<mov~~rdi, qword ptr [rsp + 0x540]>', '<mov~~rdx, qword ptr [rsp + 0x378]>', '<mov~~ecx, dword ptr [rsp + 0x388]>', '<add~~rdx, rdi>', '<add~~eax, 2>', '<cmp~~eax, esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x410], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x40c], esi>', '<mov~~qword ptr [rsp + 0x3c0], rdx>', '<mov~~dword ptr [rsp + 0x3c8], ecx>', '<mov~~dword ptr [rsp + 0x3cc], eax>', '<je~~0x402373>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3d0]>', '<mov~~eax, dword ptr [rsp + 0x3dc]>', '<and~~eax, 0xfffffffe>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<mov~~ecx, 0x80>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x3c0], rdx>', '<mov~~dword ptr [rsp + 0x3c8], ecx>', '<mov~~dword ptr [rsp + 0x3cc], eax>', '<mov~~dl, byte ptr [rsp + 0x436]>', '<mov~~rcx, qword ptr [rsp + 0x3c0]>', '<mov~~eax, dword ptr [rsp + 0x3c8]>', '<mov~~esi, dword ptr [rsp + 0x3cc]>', '<mov~~dword ptr [rsp + 0x3a4], esi>', '<mov~~qword ptr [rsp + 0x3a8], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<jne~~0x4025e0>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x330]>', '<mov~~r9, qword ptr [rsp + 0x328]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~r10, qword ptr [rsp + 0x160]>', '<mov~~ebx, dword ptr [rsp + 0x14c]>', '<mov~~bpl, byte ptr [rsp + 0x31f]>', '<mov~~r14d, dword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, ecx>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jl~~0x402da3>']}], 'cfg_edge_info': [(33, 36), (43, 46), (46, 48), (17, 21), (34, 37), (11, 14), (76, 79), (13, 17), (16, 13), (7, 10), (44, 29), (72, 75), (18, 19), (73, 74), (25, 34), (8, 11), (40, 43), (57, 59), (83, 78), (2, 4), (47, 48), (41, 44), (78, 63), (22, 30), (80, 81), (74, 77), (26, 9), (18, 23), (59, 61), (60, 62), (28, 9), (38, 41), (14, 19), (0, 2), (75, 78), (1, 3), (33, 35), (64, 68), (70, 63), (83, 48), (45, 9), (3, 3), (12, 15), (68, 47), (77, 80), (21, 27), (36, 36), (13, 16), (7, 9), (79, 80), (72, 74), (56, 57), (58, 60), (67, 72), (29, 33), (46, 49), (61, 65), (66, 61), (57, 58), (66, 70), (36, 38), (44, 30), (62, 66), (82, 78), (73, 75), (75, 48), (4, 6), (77, 75), (23, 19), (27, 28), (11, 11), (19, 24), (79, 75), (37, 39), (30, 33), (47, 49), (63, 67), (6, 8), (14, 18), (80, 82), (16, 9), (71, 73), (24, 34), (43, 47), (60, 63), (68, 46), (23, 23), (28, 13), (82, 48), (1, 4), (2, 3), (17, 22), (3, 4), (67, 71), (61, 64), (21, 28), (8, 12), (65, 64), (39, 45), (22, 29), (74, 76), (30, 30), (56, 58), (15, 26), (58, 61), (59, 60), (35, 38), (52, 54), (34, 15), (0, 1), (27, 27), (63, 48), (6, 7), (38, 21), (78, 66), (81, 83), (70, 62), (64, 39), (48, 52), (10, 13), (19, 25), (37, 40)], 'cdg_edge_info': [(33, 36), (43, 46), (59, 64), (46, 48), (8, 9), (38, 44), (34, 37), (63, 52), (13, 17), (7, 10), (73, 74), (70, 66), (8, 11), (57, 59), (83, 78), (63, 54), (47, 48), (13, 28), (78, 63), (64, 9), (46, 52), (22, 30), (66, 64), (57, 61), (74, 77), (13, 21), (8, 34), (59, 61), (18, 23), (0, 2), (46, 54), (80, 83), (74, 79), (1, 3), (47, 52), (64, 68), (56, 64), (83, 48), (70, 63), (34, 9), (3, 3), (68, 47), (77, 80), (21, 27), (36, 36), (79, 80), (72, 74), (56, 57), (47, 54), (67, 72), (60, 66), (46, 49), (61, 65), (66, 61), (66, 70), (64, 45), (44, 30), (82, 78), (83, 52), (37, 9), (38, 38), (49, 56), (8, 15), (11, 11), (19, 24), (37, 39), (47, 49), (63, 67), (6, 8), (56, 61), (83, 54), (14, 18), (80, 82), (8, 26), (17, 38), (38, 33), (43, 47), (68, 46), (60, 63), (23, 23), (28, 13), (82, 48), (2, 3), (8, 19), (17, 22), (37, 43), (8, 12), (17, 33), (30, 30), (37, 45), (7, 13), (59, 60), (67, 73), (34, 15), (0, 1), (8, 14), (82, 52), (27, 27), (63, 48), (6, 7), (78, 66), (34, 26), (64, 39), (82, 54), (57, 64), (19, 25), (37, 40), (6, 9)], 'ddg_edge_info': [(72, 73), (23, 68), (33, 36), (72, 82), (59, 64), (78, 77), (1, 49), (38, 44), (60, 74), (17, 21), (11, 14), (60, 83), (4, 30), (22, 44), (3, 49), (1, 15), (13, 17), (40, 68), (10, 27), (7, 10), (10, 36), (44, 38), (33, 38), (25, 34), (73, 74), (59, 66), (73, 83), (70, 66), (7, 28), (3, 6), (3, 15), (8, 11), (0, 7), (83, 78), (2, 4), (57, 59), (2, 68), (4, 23), (47, 48), (13, 28), (78, 63), (2, 25), (79, 83), (72, 77), (0, 37), (78, 72), (7, 30), (65, 47), (19, 68), (74, 77), (4, 25), (64, 48), (78, 47), (19, 34), (44, 33), (1, 28), (78, 65), (72, 79), (59, 61), (1, 37), (18, 23), (65, 49), (25, 47), (0, 2), (4, 18), (3, 28), (80, 83), (4, 27), (74, 79), (40, 47), (1, 3), (3, 37), (4, 36), (25, 68), (78, 49), (4, 54), (10, 33), (64, 68), (82, 83), (83, 48), (59, 63), (73, 80), (25, 40), (70, 63), (68, 47), (4, 11), (21, 27), (78, 79), (60, 73), (0, 68), (11, 68), (66, 68), (40, 49), (72, 47), (4, 38), (2, 13), (25, 15), (73, 64), (79, 80), (72, 65), (56, 57), (63, 72), (73, 82), (10, 44), (68, 49), (4, 13), (61, 65), (66, 61), (4, 22), (66, 70), (72, 49), (73, 48), (1, 7), (36, 38), (11, 18), (44, 30), (79, 82), (56, 59), (3, 7), (4, 6), (0, 54), (4, 15), (78, 83), (14, 25), (15, 54), (26, 54), (4, 33), (64, 47), (27, 28), (10, 21), (18, 68), (30, 33), (47, 49), (10, 30), (63, 67), (6, 8), (73, 77), (0, 38), (28, 54), (65, 39), (65, 48), (4, 8), (60, 70), (18, 34), (1, 48), (4, 17), (25, 49), (60, 79), (80, 82), (1, 2), (0, 4), (64, 49), (0, 13), (45, 54), (3, 48), (63, 78), (0, 40), (72, 83), (7, 27), (77, 79), (4, 10), (7, 36), (59, 74), (4, 19), (28, 13), (4, 28), (7, 54), (2, 3), (17, 22), (0, 15), (30, 28), (73, 72), (0, 33), (3, 68), (59, 67), (61, 64), (4, 21), (72, 48), (65, 64), (73, 47), (36, 28), (39, 45), (22, 38), (39, 54), (3, 34), (0, 17), (56, 49), (3, 47), (73, 65), (15, 26), (78, 64), (59, 60), (52, 54), (25, 37), (78, 73), (4, 14), (60, 67), (78, 82), (67, 73), (70, 78), (0, 1), (73, 49), (63, 48), (0, 10), (11, 19), (37, 47), (78, 48), (4, 44), (38, 21), (78, 66), (4, 7), (73, 79), (25, 39), (1, 47), (25, 48), (59, 80), (0, 3), (48, 52), (10, 13), (65, 68), (40, 48), (74, 80), (19, 25), (37, 40), (37, 49), (72, 64)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x578(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x574(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x574(%rsp)                # 4-byte Spill'}, {'instIndex': 92, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 193, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 194, 'instruction': 'je\t.LBB3_27'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 198, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 199, 'instruction': 'movb\t$0, %al'}, {'instIndex': 200, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O3/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O3/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 1024 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x588(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x584(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x584(%rsp)                # 4-byte Spill'}, {'instIndex': 92, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 193, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 194, 'instruction': 'je\t.LBB3_28'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 198, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 199, 'instruction': 'movb\t$0, %al'}, {'instIndex': 200, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O3/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O3/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 694 nodes and 1246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1024 instructions in binary file.
[4205488, 4205607, 4206027, 4206616, 4206625]
The execution time of patched subCFG information extraction via angr: 0:00:02.405627
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "mov" for 0x402db9>, <DisassemblerInsn "cmp" for 0x402dbe>, <DisassemblerInsn "mov" for 0x402dc1>, <DisassemblerInsn "jbe" for 0x402dc9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5b>, <DisassemblerInsn "lea" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "lea" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "lea" for 0x402c82>, <DisassemblerInsn "mov" for 0x402c8a>, <DisassemblerInsn "lea" for 0x402c92>, <DisassemblerInsn "mov" for 0x402c9a>, <DisassemblerInsn "xor" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca4>, <DisassemblerInsn "mov" for 0x402cac>, <DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fa0>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fb0>, <DisassemblerInsn "mov" for 0x402fb8>, <DisassemblerInsn "mov" for 0x402fbf>, <DisassemblerInsn "movzx" for 0x402fc7>, <DisassemblerInsn "add" for 0x402fcb>, <DisassemblerInsn "lea" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd6>, <DisassemblerInsn "xor" for 0x402fdc>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffb>, <DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300b>, <DisassemblerInsn "call" for 0x403013>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402dcb>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c27>, <DisassemblerInsn "mov" for 0x402c2f>, <DisassemblerInsn "cmp" for 0x402c33>, <DisassemblerInsn "sete" for 0x402c3a>, <DisassemblerInsn "and" for 0x402c3d>, <DisassemblerInsn "movzx" for 0x402c3f>, <DisassemblerInsn "xor" for 0x402c42>, <DisassemblerInsn "mov" for 0x402c45>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5b>, <DisassemblerInsn "lea" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "lea" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "lea" for 0x402c82>, <DisassemblerInsn "mov" for 0x402c8a>, <DisassemblerInsn "lea" for 0x402c92>, <DisassemblerInsn "mov" for 0x402c9a>, <DisassemblerInsn "xor" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca4>, <DisassemblerInsn "mov" for 0x402cac>, <DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "je" for 0x40301b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403516>, <DisassemblerInsn "mov" for 0x40351e>, <DisassemblerInsn "add" for 0x403526>, <DisassemblerInsn "mov" for 0x40352d>, <DisassemblerInsn "mov" for 0x403535>, <DisassemblerInsn "add" for 0x403538>, <DisassemblerInsn "mov" for 0x40353c>, <DisassemblerInsn "mov" for 0x403544>, <DisassemblerInsn "mov" for 0x403547>, <DisassemblerInsn "cmp" for 0x40354e>, <DisassemblerInsn "jle" for 0x403551>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403040>, <DisassemblerInsn "mov" for 0x403045>, <DisassemblerInsn "jmp" for 0x40304c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x402bb0>, <DisassemblerInsn "push" for 0x402bb1>, <DisassemblerInsn "push" for 0x402bb3>, <DisassemblerInsn "sub" for 0x402bb4>, <DisassemblerInsn "mov" for 0x402bbb>, <DisassemblerInsn "mov" for 0x402bc3>, <DisassemblerInsn "mov" for 0x402bcb>, <DisassemblerInsn "mov" for 0x402bd2>, <DisassemblerInsn "mov" for 0x402bda>, <DisassemblerInsn "mov" for 0x402be2>, <DisassemblerInsn "mov" for 0x402be9>, <DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c07>, <DisassemblerInsn "lea" for 0x402c0e>, <DisassemblerInsn "mov" for 0x402c16>, <DisassemblerInsn "cmp" for 0x402c1b>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "jne" for 0x402c25>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f92>, <DisassemblerInsn "mov" for 0x402f99>, <DisassemblerInsn "mov" for 0x402fa0>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fb0>, <DisassemblerInsn "mov" for 0x402fb8>, <DisassemblerInsn "mov" for 0x402fbf>, <DisassemblerInsn "movzx" for 0x402fc7>, <DisassemblerInsn "add" for 0x402fcb>, <DisassemblerInsn "lea" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd6>, <DisassemblerInsn "xor" for 0x402fdc>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffb>, <DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300b>, <DisassemblerInsn "call" for 0x403013>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d7e>, <DisassemblerInsn "mov" for 0x402d86>, <DisassemblerInsn "mov" for 0x402d8b>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "call" for 0x402d97>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403021>, <DisassemblerInsn "mov" for 0x403029>, <DisassemblerInsn "mov" for 0x40302d>, <DisassemblerInsn "lea" for 0x403032>, <DisassemblerInsn "mov" for 0x403039>, <DisassemblerInsn "call" for 0x40303b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4e7]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jbe~~0x402dd0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~ecx, dword ptr [rsp + 0x584]>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~sil, byte ptr [rsp + 0x47f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x403021>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x584], eax>', '<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~ecx, dword ptr [rsp + 0x584]>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x403516>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x368], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x378], eax>', '<cmp~~eax, 0>', '<jle~~0x404248>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jmp~~0x404298>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13a0>', '<mov~~dword ptr [rsp + 0x54c], r9d>', '<mov~~qword ptr [rsp + 0x550], r8>', '<mov~~dword ptr [rsp + 0x55c], ecx>', '<mov~~qword ptr [rsp + 0x560], rdx>', '<mov~~qword ptr [rsp + 0x568], rdi>', '<mov~~eax, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x574], eax>', '<mov~~rax, qword ptr [rsp + 0x13c8]>', '<mov~~qword ptr [rsp + 0x578], rax>', '<mov~~eax, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x580], eax>', '<lea~~rax, [rsp + 0x588]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x584], eax>', '<jne~~0x402c4c>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x47e]>', '<mov~~byte ptr [rsp + 0x47f], al>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~sil, byte ptr [rsp + 0x47f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x518]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfd2c9]>', '<call~~0x500068>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x61f9]>', '<mov~~al, 0>', '<call~~0x500010>']}], 'cfg_edge_info': [(0, 1), (24, 30), (30, 14), (30, 33), (25, 30), (1, 4), (7, 11), (0, 2), (14, 19), (11, 14), (1, 3)]}]}
{'decode_plane': [4205488, 4205607, 4206027, 4206616, 4206625]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/O3/utvideodec.o---before
The extraction of function: decode_plane
[4205488, 4205607, 4206027, 4206616, 4206625]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 85 nodes and 143 edges in CFGEmulated.
It has 83 nodes and 158 edges in CDG.
It has 4854 nodes and 6108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205488, 4205607, 4206027, 4206616, 4206625]
{4210050, 4209156, 4211340, 4209679, 4206482, 4206739, 4206868, 4208631, 4207894, 4211092, 4211352, 4206616, 4208922, 4207128, 4205980, 4210708, 4206496, 4206625, 4206115, 4207654, 4205607, 4206251, 4207407, 4205488, 4208560, 4206002, 4205748, 4207796, 4211126, 4209462, 4209589, 4208698, 4206139, 4208443, 4210878, 4208191, 4206656, 4208832, 4211272, 4210506, 4206027, 4205644, 4211021, 4206032, 4206673, 4206801, 4207184, 4209360, 4211285, 4210131, 4207959, 4207069, 4207326, 4209758, 4211296, 4208356, 4207461, 4208494, 4207603, 4206455, 4210425, 4210299, 4209916, 4206973, 4205950, 4211327}
[41, 79, 17, 28, 59, 81, 22, 57, 24, 2, 66, 26, 62, 16, 67, 19, 52, 29, 77, 60, 12, 69, 1, 56, 65, 14, 45, 6, 40, 47, 74, 42, 4, 80, 38, 54, 37, 35, 25, 71, 61, 82, 9, 31, 11, 75, 72, 7, 63, 13, 46, 27, 78, 23, 76, 30, 48, 64, 70, 15, 3, 8, 21, 34, 0, 10, 39, 83, 49, 58, 18, 36, 44, 73]
The execution time of patched slicing information extraction via angr: 0:00:09.090314
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404248>, <DisassemblerInsn "call" for 0x404250>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403b36>, <DisassemblerInsn "mov" for 0x403b3d>, <DisassemblerInsn "mov" for 0x403b45>, <DisassemblerInsn "mov" for 0x403b4d>, <DisassemblerInsn "mov" for 0x403b55>, <DisassemblerInsn "mov" for 0x403b5d>, <DisassemblerInsn "mov" for 0x403b65>, <DisassemblerInsn "mov" for 0x403b6c>, <DisassemblerInsn "mov" for 0x403b73>, <DisassemblerInsn "mov" for 0x403b7b>, <DisassemblerInsn "mov" for 0x403b83>, <DisassemblerInsn "mov" for 0x403b8b>, <DisassemblerInsn "sub" for 0x403b93>, <DisassemblerInsn "shl" for 0x403b96>, <DisassemblerInsn "add" for 0x403b99>, <DisassemblerInsn "add" for 0x403b9b>, <DisassemblerInsn "lea" for 0x403b9d>, <DisassemblerInsn "cmp" for 0x403ba4>, <DisassemblerInsn "mov" for 0x403ba7>, <DisassemblerInsn "jl" for 0x403baf>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40317d>, <DisassemblerInsn "mov" for 0x403184>, <DisassemblerInsn "mov" for 0x40318b>, <DisassemblerInsn "mov" for 0x403193>, <DisassemblerInsn "movsxd" for 0x40319b>, <DisassemblerInsn "imul" for 0x40319e>, <DisassemblerInsn "add" for 0x4031a2>, <DisassemblerInsn "mov" for 0x4031a5>, <DisassemblerInsn "mov" for 0x4031ad>, <DisassemblerInsn "sub" for 0x4031af>, <DisassemblerInsn "mov" for 0x4031b1>, <DisassemblerInsn "add" for 0x4031b8>, <DisassemblerInsn "and" for 0x4031bb>, <DisassemblerInsn "mov" for 0x4031be>, <DisassemblerInsn "mov" for 0x4031c5>, <DisassemblerInsn "cmp" for 0x4031ca>, <DisassemblerInsn "mov" for 0x4031cc>, <DisassemblerInsn "mov" for 0x4031d4>, <DisassemblerInsn "je" for 0x4031db>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403040>, <DisassemblerInsn "mov" for 0x403045>, <DisassemblerInsn "jmp" for 0x40304c>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40391a>, <DisassemblerInsn "mov" for 0x403922>, <DisassemblerInsn "mov" for 0x403929>, <DisassemblerInsn "shl" for 0x40392c>, <DisassemblerInsn "mov" for 0x403930>, <DisassemblerInsn "mov" for 0x403932>, <DisassemblerInsn "add" for 0x403935>, <DisassemblerInsn "mov" for 0x403938>, <DisassemblerInsn "bswap" for 0x40393b>, <DisassemblerInsn "mov" for 0x40393e>, <DisassemblerInsn "add" for 0x403941>, <DisassemblerInsn "mov" for 0x403945>, <DisassemblerInsn "mov" for 0x40394a>, <DisassemblerInsn "mov" for 0x403952>, <DisassemblerInsn "mov" for 0x403959>, <DisassemblerInsn "mov" for 0x403961>, <DisassemblerInsn "mov" for 0x403969>, <DisassemblerInsn "mov" for 0x403971>, <DisassemblerInsn "mov" for 0x403979>, <DisassemblerInsn "mov" for 0x403980>, <DisassemblerInsn "mov" for 0x403987>, <DisassemblerInsn "mov" for 0x40398f>, <DisassemblerInsn "mov" for 0x403996>, <DisassemblerInsn "mov" for 0x40399e>, <DisassemblerInsn "mov" for 0x4039a6>, <DisassemblerInsn "mov" for 0x4039ae>, <DisassemblerInsn "mov" for 0x4039b6>, <DisassemblerInsn "mov" for 0x4039be>, <DisassemblerInsn "mov" for 0x4039c6>, <DisassemblerInsn "mov" for 0x4039ce>, <DisassemblerInsn "mov" for 0x4039d6>, <DisassemblerInsn "mov" for 0x4039dd>, <DisassemblerInsn "cmp" for 0x4039e5>, <DisassemblerInsn "mov" for 0x4039e7>, <DisassemblerInsn "mov" for 0x4039ee>, <DisassemblerInsn "mov" for 0x4039f6>, <DisassemblerInsn "jge" for 0x4039fe>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403ef7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40332a>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4038c0>, <DisassemblerInsn "mov" for 0x4038c8>, <DisassemblerInsn "mov" for 0x4038d0>, <DisassemblerInsn "mov" for 0x4038d7>, <DisassemblerInsn "xor" for 0x4038df>, <DisassemblerInsn "xor" for 0x4038e1>, <DisassemblerInsn "cmp" for 0x4038e3>, <DisassemblerInsn "mov" for 0x4038e7>, <DisassemblerInsn "mov" for 0x4038ee>, <DisassemblerInsn "mov" for 0x4038f5>, <DisassemblerInsn "mov" for 0x4038f8>, <DisassemblerInsn "mov" for 0x403900>, <DisassemblerInsn "mov" for 0x403908>, <DisassemblerInsn "mov" for 0x403910>, <DisassemblerInsn "je" for 0x403918>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031dd>, <DisassemblerInsn "mov" for 0x4031e5>, <DisassemblerInsn "and" for 0x4031ec>, <DisassemblerInsn "mov" for 0x4031ef>, <DisassemblerInsn "mov" for 0x4031f6>, <DisassemblerInsn "xor" for 0x4031fb>, <DisassemblerInsn "mov" for 0x4031fd>, <DisassemblerInsn "mov" for 0x403205>, <DisassemblerInsn "mov" for 0x40320c>, <DisassemblerInsn "jmp" for 0x403213>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5b>, <DisassemblerInsn "lea" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "lea" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "lea" for 0x402c82>, <DisassemblerInsn "mov" for 0x402c8a>, <DisassemblerInsn "lea" for 0x402c92>, <DisassemblerInsn "mov" for 0x402c9a>, <DisassemblerInsn "xor" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca4>, <DisassemblerInsn "mov" for 0x402cac>, <DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403bb5>, <DisassemblerInsn "mov" for 0x403bbc>, <DisassemblerInsn "mov" for 0x403bc4>, <DisassemblerInsn "mov" for 0x403bcc>, <DisassemblerInsn "mov" for 0x403bd4>, <DisassemblerInsn "mov" for 0x403bdb>, <DisassemblerInsn "sub" for 0x403bdd>, <DisassemblerInsn "setb" for 0x403bdf>, <DisassemblerInsn "mov" for 0x403be3>, <DisassemblerInsn "sub" for 0x403be6>, <DisassemblerInsn "setb" for 0x403be9>, <DisassemblerInsn "and" for 0x403bed>, <DisassemblerInsn "test" for 0x403bf0>, <DisassemblerInsn "mov" for 0x403bf4>, <DisassemblerInsn "mov" for 0x403bfc>, <DisassemblerInsn "mov" for 0x403c04>, <DisassemblerInsn "jne" for 0x403c0b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fa0>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fb0>, <DisassemblerInsn "mov" for 0x402fb8>, <DisassemblerInsn "mov" for 0x402fbf>, <DisassemblerInsn "movzx" for 0x402fc7>, <DisassemblerInsn "add" for 0x402fcb>, <DisassemblerInsn "lea" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd6>, <DisassemblerInsn "xor" for 0x402fdc>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffb>, <DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300b>, <DisassemblerInsn "call" for 0x403013>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403acb>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032ef>, <DisassemblerInsn "mov" for 0x4032f6>, <DisassemblerInsn "mov" for 0x4032fd>, <DisassemblerInsn "xor" for 0x403304>, <DisassemblerInsn "cmp" for 0x403306>, <DisassemblerInsn "mov" for 0x403308>, <DisassemblerInsn "mov" for 0x40330f>, <DisassemblerInsn "mov" for 0x403316>, <DisassemblerInsn "mov" for 0x40331d>, <DisassemblerInsn "jl" for 0x403324>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40363f>, <DisassemblerInsn "mov" for 0x403647>, <DisassemblerInsn "mov" for 0x40364f>, <DisassemblerInsn "mov" for 0x403656>, <DisassemblerInsn "mov" for 0x40365e>, <DisassemblerInsn "mov" for 0x403665>, <DisassemblerInsn "mov" for 0x40366c>, <DisassemblerInsn "mov" for 0x403674>, <DisassemblerInsn "mov" for 0x40367c>, <DisassemblerInsn "mov" for 0x403684>, <DisassemblerInsn "mov" for 0x40368c>, <DisassemblerInsn "mov" for 0x403693>, <DisassemblerInsn "mov" for 0x40369b>, <DisassemblerInsn "mov" for 0x4036a3>, <DisassemblerInsn "mov" for 0x4036aa>, <DisassemblerInsn "mov" for 0x4036b2>, <DisassemblerInsn "mov" for 0x4036ba>, <DisassemblerInsn "mov" for 0x4036c2>, <DisassemblerInsn "mov" for 0x4036ca>, <DisassemblerInsn "mov" for 0x4036d1>, <DisassemblerInsn "mov" for 0x4036d8>, <DisassemblerInsn "add" for 0x4036e0>, <DisassemblerInsn "mov" for 0x4036e4>, <DisassemblerInsn "imul" for 0x4036ec>, <DisassemblerInsn "cdq" for 0x4036ef>, <DisassemblerInsn "idiv" for 0x4036f0>, <DisassemblerInsn "mov" for 0x4036f2>, <DisassemblerInsn "mov" for 0x4036fa>, <DisassemblerInsn "mov" for 0x4036fc>, <DisassemblerInsn "and" for 0x403704>, <DisassemblerInsn "mov" for 0x403707>, <DisassemblerInsn "movsxd" for 0x40370e>, <DisassemblerInsn "imul" for 0x403711>, <DisassemblerInsn "add" for 0x403715>, <DisassemblerInsn "mov" for 0x403718>, <DisassemblerInsn "xor" for 0x403720>, <DisassemblerInsn "mov" for 0x403722>, <DisassemblerInsn "xor" for 0x403724>, <DisassemblerInsn "cmp" for 0x403726>, <DisassemblerInsn "mov" for 0x40372a>, <DisassemblerInsn "mov" for 0x403732>, <DisassemblerInsn "je" for 0x403739>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f77>, <DisassemblerInsn "mov" for 0x402f7e>, <DisassemblerInsn "mov" for 0x402f80>, <DisassemblerInsn "cmp" for 0x402f87>, <DisassemblerInsn "mov" for 0x402f89>, <DisassemblerInsn "jb" for 0x402f90>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40427f>, <DisassemblerInsn "call" for 0x404287>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032de>, <DisassemblerInsn "mov" for 0x4032e6>, <DisassemblerInsn "mov" for 0x4032e8>, <DisassemblerInsn "mov" for 0x4032ef>, <DisassemblerInsn "mov" for 0x4032f6>, <DisassemblerInsn "mov" for 0x4032fd>, <DisassemblerInsn "xor" for 0x403304>, <DisassemblerInsn "cmp" for 0x403306>, <DisassemblerInsn "mov" for 0x403308>, <DisassemblerInsn "mov" for 0x40330f>, <DisassemblerInsn "mov" for 0x403316>, <DisassemblerInsn "mov" for 0x40331d>, <DisassemblerInsn "jl" for 0x403324>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403dd3>, <DisassemblerInsn "mov" for 0x403ddb>, <DisassemblerInsn "mov" for 0x403de3>, <DisassemblerInsn "mov" for 0x403dea>, <DisassemblerInsn "mov" for 0x403df2>, <DisassemblerInsn "mov" for 0x403df9>, <DisassemblerInsn "mov" for 0x403e01>, <DisassemblerInsn "mov" for 0x403e09>, <DisassemblerInsn "mov" for 0x403e10>, <DisassemblerInsn "add" for 0x403e18>, <DisassemblerInsn "mov" for 0x403e1b>, <DisassemblerInsn "mov" for 0x403e1d>, <DisassemblerInsn "shr" for 0x403e20>, <DisassemblerInsn "mov" for 0x403e23>, <DisassemblerInsn "add" for 0x403e26>, <DisassemblerInsn "mov" for 0x403e29>, <DisassemblerInsn "mov" for 0x403e2b>, <DisassemblerInsn "mov" for 0x403e2e>, <DisassemblerInsn "movsx" for 0x403e34>, <DisassemblerInsn "mov" for 0x403e38>, <DisassemblerInsn "movsx" for 0x403e3f>, <DisassemblerInsn "mov" for 0x403e44>, <DisassemblerInsn "cmp" for 0x403e4b>, <DisassemblerInsn "mov" for 0x403e50>, <DisassemblerInsn "mov" for 0x403e58>, <DisassemblerInsn "mov" for 0x403e5f>, <DisassemblerInsn "mov" for 0x403e67>, <DisassemblerInsn "mov" for 0x403e6e>, <DisassemblerInsn "jge" for 0x403e75>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403a04>, <DisassemblerInsn "mov" for 0x403a0c>, <DisassemblerInsn "mov" for 0x403a14>, <DisassemblerInsn "mov" for 0x403a1b>, <DisassemblerInsn "mov" for 0x403a22>, <DisassemblerInsn "mov" for 0x403a2a>, <DisassemblerInsn "mov" for 0x403a32>, <DisassemblerInsn "mov" for 0x403a3a>, <DisassemblerInsn "mov" for 0x403a42>, <DisassemblerInsn "mov" for 0x403a45>, <DisassemblerInsn "mov" for 0x403a4d>, <DisassemblerInsn "mov" for 0x403a4f>, <DisassemblerInsn "mov" for 0x403a56>, <DisassemblerInsn "sub" for 0x403a5c>, <DisassemblerInsn "mov" for 0x403a5f>, <DisassemblerInsn "mov" for 0x403a62>, <DisassemblerInsn "mov" for 0x403a6a>, <DisassemblerInsn "mov" for 0x403a6c>, <DisassemblerInsn "mov" for 0x403a74>, <DisassemblerInsn "test" for 0x403a79>, <DisassemblerInsn "mov" for 0x403a7d>, <DisassemblerInsn "mov" for 0x403a85>, <DisassemblerInsn "mov" for 0x403a8c>, <DisassemblerInsn "mov" for 0x403a93>, <DisassemblerInsn "mov" for 0x403a96>, <DisassemblerInsn "mov" for 0x403a9e>, <DisassemblerInsn "mov" for 0x403aa1>, <DisassemblerInsn "mov" for 0x403aa9>, <DisassemblerInsn "mov" for 0x403aab>, <DisassemblerInsn "mov" for 0x403ab2>, <DisassemblerInsn "mov" for 0x403ab9>, <DisassemblerInsn "mov" for 0x403ac1>, <DisassemblerInsn "jne" for 0x403ac9>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402dcb>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403c0d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c27>, <DisassemblerInsn "mov" for 0x402c2f>, <DisassemblerInsn "cmp" for 0x402c33>, <DisassemblerInsn "sete" for 0x402c3a>, <DisassemblerInsn "and" for 0x402c3d>, <DisassemblerInsn "movzx" for 0x402c3f>, <DisassemblerInsn "xor" for 0x402c42>, <DisassemblerInsn "mov" for 0x402c45>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "mov" for 0x402c5b>, <DisassemblerInsn "lea" for 0x402c62>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "lea" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "lea" for 0x402c82>, <DisassemblerInsn "mov" for 0x402c8a>, <DisassemblerInsn "lea" for 0x402c92>, <DisassemblerInsn "mov" for 0x402c9a>, <DisassemblerInsn "xor" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca4>, <DisassemblerInsn "mov" for 0x402cac>, <DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40383a>, <DisassemblerInsn "mov" for 0x403842>, <DisassemblerInsn "mov" for 0x40384a>, <DisassemblerInsn "mov" for 0x403852>, <DisassemblerInsn "mov" for 0x403859>, <DisassemblerInsn "mov" for 0x403861>, <DisassemblerInsn "mov" for 0x403869>, <DisassemblerInsn "mov" for 0x403871>, <DisassemblerInsn "mov" for 0x403879>, <DisassemblerInsn "mov" for 0x40387c>, <DisassemblerInsn "cmp" for 0x403884>, <DisassemblerInsn "mov" for 0x40388b>, <DisassemblerInsn "mov" for 0x403893>, <DisassemblerInsn "mov" for 0x40389a>, <DisassemblerInsn "mov" for 0x4038a2>, <DisassemblerInsn "mov" for 0x4038aa>, <DisassemblerInsn "mov" for 0x4038b2>, <DisassemblerInsn "ja" for 0x4038ba>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404194>, <DisassemblerInsn "mov" for 0x404198>, <DisassemblerInsn "mov" for 0x4041a0>, <DisassemblerInsn "mov" for 0x4041a3>, <DisassemblerInsn "lea" for 0x4041a8>, <DisassemblerInsn "mov" for 0x4041af>, <DisassemblerInsn "call" for 0x4041b1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e23>, <DisassemblerInsn "mov" for 0x402e2b>, <DisassemblerInsn "cmp" for 0x402e32>, <DisassemblerInsn "jle" for 0x402e35>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "xor" for 0x404255>, <DisassemblerInsn "mov" for 0x404257>, <DisassemblerInsn "jmp" for 0x40425e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d9c>, <DisassemblerInsn "mov" for 0x402da3>, <DisassemblerInsn "cmp" for 0x402daa>, <DisassemblerInsn "je" for 0x402dac>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403511>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40373b>, <DisassemblerInsn "mov" for 0x403743>, <DisassemblerInsn "shl" for 0x40374b>, <DisassemblerInsn "movabs" for 0x40374f>, <DisassemblerInsn "and" for 0x403759>, <DisassemblerInsn "mov" for 0x40375c>, <DisassemblerInsn "mov" for 0x40375f>, <DisassemblerInsn "mov" for 0x403767>, <DisassemblerInsn "mov" for 0x40376e>, <DisassemblerInsn "mov" for 0x403776>, <DisassemblerInsn "mov" for 0x40377e>, <DisassemblerInsn "mov" for 0x403785>, <DisassemblerInsn "mov" for 0x40378c>, <DisassemblerInsn "sub" for 0x40378f>, <DisassemblerInsn "mov" for 0x403791>, <DisassemblerInsn "lea" for 0x403798>, <DisassemblerInsn "cmp" for 0x40379f>, <DisassemblerInsn "mov" for 0x4037a2>, <DisassemblerInsn "je" for 0x4037aa>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403d80>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403557>, <DisassemblerInsn "mov" for 0x40355e>, <DisassemblerInsn "mov" for 0x403566>, <DisassemblerInsn "mov" for 0x40356d>, <DisassemblerInsn "mov" for 0x403575>, <DisassemblerInsn "mov" for 0x40357d>, <DisassemblerInsn "mov" for 0x403584>, <DisassemblerInsn "add" for 0x403587>, <DisassemblerInsn "mov" for 0x40358e>, <DisassemblerInsn "mov" for 0x403596>, <DisassemblerInsn "add" for 0x403599>, <DisassemblerInsn "mov" for 0x40359d>, <DisassemblerInsn "mov" for 0x4035a5>, <DisassemblerInsn "imul" for 0x4035ad>, <DisassemblerInsn "cmp" for 0x4035b0>, <DisassemblerInsn "setg" for 0x4035b3>, <DisassemblerInsn "mov" for 0x4035b7>, <DisassemblerInsn "lea" for 0x4035bf>, <DisassemblerInsn "add" for 0x4035c7>, <DisassemblerInsn "mov" for 0x4035cb>, <DisassemblerInsn "lea" for 0x4035d3>, <DisassemblerInsn "mov" for 0x4035db>, <DisassemblerInsn "cmp" for 0x4035e3>, <DisassemblerInsn "sete" for 0x4035e7>, <DisassemblerInsn "mov" for 0x4035eb>, <DisassemblerInsn "add" for 0x4035f3>, <DisassemblerInsn "mov" for 0x4035f7>, <DisassemblerInsn "movsxd" for 0x4035ff>, <DisassemblerInsn "mov" for 0x403602>, <DisassemblerInsn "movsxd" for 0x40360a>, <DisassemblerInsn "mov" for 0x40360d>, <DisassemblerInsn "add" for 0x403615>, <DisassemblerInsn "mov" for 0x40361b>, <DisassemblerInsn "xor" for 0x403623>, <DisassemblerInsn "mov" for 0x403625>, <DisassemblerInsn "xor" for 0x403627>, <DisassemblerInsn "mov" for 0x403629>, <DisassemblerInsn "mov" for 0x403631>, <DisassemblerInsn "mov" for 0x403638>, <DisassemblerInsn "mov" for 0x40363f>, <DisassemblerInsn "mov" for 0x403647>, <DisassemblerInsn "mov" for 0x40364f>, <DisassemblerInsn "mov" for 0x403656>, <DisassemblerInsn "mov" for 0x40365e>, <DisassemblerInsn "mov" for 0x403665>, <DisassemblerInsn "mov" for 0x40366c>, <DisassemblerInsn "mov" for 0x403674>, <DisassemblerInsn "mov" for 0x40367c>, <DisassemblerInsn "mov" for 0x403684>, <DisassemblerInsn "mov" for 0x40368c>, <DisassemblerInsn "mov" for 0x403693>, <DisassemblerInsn "mov" for 0x40369b>, <DisassemblerInsn "mov" for 0x4036a3>, <DisassemblerInsn "mov" for 0x4036aa>, <DisassemblerInsn "mov" for 0x4036b2>, <DisassemblerInsn "mov" for 0x4036ba>, <DisassemblerInsn "mov" for 0x4036c2>, <DisassemblerInsn "mov" for 0x4036ca>, <DisassemblerInsn "mov" for 0x4036d1>, <DisassemblerInsn "mov" for 0x4036d8>, <DisassemblerInsn "add" for 0x4036e0>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d7e>, <DisassemblerInsn "mov" for 0x402d86>, <DisassemblerInsn "mov" for 0x402d8b>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "call" for 0x402d97>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4040be>, <DisassemblerInsn "mov" for 0x4040c3>, <DisassemblerInsn "mov" for 0x4040cb>, <DisassemblerInsn "mov" for 0x4040cf>, <DisassemblerInsn "mov" for 0x4040d3>, <DisassemblerInsn "mov" for 0x4040db>, <DisassemblerInsn "mov" for 0x4040e2>, <DisassemblerInsn "mov" for 0x4040ea>, <DisassemblerInsn "add" for 0x4040f2>, <DisassemblerInsn "add" for 0x4040f5>, <DisassemblerInsn "cmp" for 0x4040f8>, <DisassemblerInsn "mov" for 0x4040fb>, <DisassemblerInsn "mov" for 0x404103>, <DisassemblerInsn "mov" for 0x40410a>, <DisassemblerInsn "mov" for 0x404111>, <DisassemblerInsn "mov" for 0x404114>, <DisassemblerInsn "mov" for 0x40411c>, <DisassemblerInsn "mov" for 0x40411f>, <DisassemblerInsn "mov" for 0x404127>, <DisassemblerInsn "mov" for 0x404129>, <DisassemblerInsn "mov" for 0x404130>, <DisassemblerInsn "mov" for 0x404137>, <DisassemblerInsn "mov" for 0x40413f>, <DisassemblerInsn "jne" for 0x404147>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034b4>, <DisassemblerInsn "mov" for 0x4034bb>, <DisassemblerInsn "mov" for 0x4034c2>, <DisassemblerInsn "mov" for 0x4034c9>, <DisassemblerInsn "mov" for 0x4034d1>, <DisassemblerInsn "add" for 0x4034d9>, <DisassemblerInsn "add" for 0x4034dc>, <DisassemblerInsn "cmp" for 0x4034df>, <DisassemblerInsn "mov" for 0x4034e1>, <DisassemblerInsn "mov" for 0x4034e4>, <DisassemblerInsn "mov" for 0x4034ec>, <DisassemblerInsn "mov" for 0x4034ee>, <DisassemblerInsn "mov" for 0x4034f5>, <DisassemblerInsn "mov" for 0x4034fd>, <DisassemblerInsn "mov" for 0x403504>, <DisassemblerInsn "je" for 0x40350b>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40428c>, <DisassemblerInsn "mov" for 0x404291>, <DisassemblerInsn "mov" for 0x404298>, <DisassemblerInsn "add" for 0x40429f>, <DisassemblerInsn "pop" for 0x4042a6>, <DisassemblerInsn "pop" for 0x4042a7>, <DisassemblerInsn "pop" for 0x4042a9>, <DisassemblerInsn "ret" for 0x4042aa>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403426>, <DisassemblerInsn "mov" for 0x40342e>, <DisassemblerInsn "mov" for 0x403436>, <DisassemblerInsn "mov" for 0x40343e>, <DisassemblerInsn "mov" for 0x403446>, <DisassemblerInsn "mov" for 0x40344e>, <DisassemblerInsn "mov" for 0x403456>, <DisassemblerInsn "mov" for 0x40345e>, <DisassemblerInsn "add" for 0x403461>, <DisassemblerInsn "mov" for 0x403464>, <DisassemblerInsn "test" for 0x40346b>, <DisassemblerInsn "mov" for 0x40346f>, <DisassemblerInsn "cmovne" for 0x403472>, <DisassemblerInsn "mov" for 0x403476>, <DisassemblerInsn "test" for 0x40347e>, <DisassemblerInsn "cmovne" for 0x403482>, <DisassemblerInsn "mov" for 0x403486>, <DisassemblerInsn "mov" for 0x40348d>, <DisassemblerInsn "add" for 0x403491>, <DisassemblerInsn "mov" for 0x403494>, <DisassemblerInsn "cmp" for 0x40349c>, <DisassemblerInsn "mov" for 0x40349f>, <DisassemblerInsn "mov" for 0x4034a7>, <DisassemblerInsn "jl" for 0x4034ae>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033f3>, <DisassemblerInsn "mov" for 0x4033fa>, <DisassemblerInsn "mov" for 0x403402>, <DisassemblerInsn "add" for 0x40340a>, <DisassemblerInsn "mov" for 0x40340d>, <DisassemblerInsn "xor" for 0x403415>, <DisassemblerInsn "mov" for 0x403417>, <DisassemblerInsn "mov" for 0x40341f>, <DisassemblerInsn "mov" for 0x403426>, <DisassemblerInsn "mov" for 0x40342e>, <DisassemblerInsn "mov" for 0x403436>, <DisassemblerInsn "mov" for 0x40343e>, <DisassemblerInsn "mov" for 0x403446>, <DisassemblerInsn "mov" for 0x40344e>, <DisassemblerInsn "mov" for 0x403456>, <DisassemblerInsn "mov" for 0x40345e>, <DisassemblerInsn "add" for 0x403461>, <DisassemblerInsn "mov" for 0x403464>, <DisassemblerInsn "test" for 0x40346b>, <DisassemblerInsn "mov" for 0x40346f>, <DisassemblerInsn "cmovne" for 0x403472>, <DisassemblerInsn "mov" for 0x403476>, <DisassemblerInsn "test" for 0x40347e>, <DisassemblerInsn "cmovne" for 0x403482>, <DisassemblerInsn "mov" for 0x403486>, <DisassemblerInsn "mov" for 0x40348d>, <DisassemblerInsn "add" for 0x403491>, <DisassemblerInsn "mov" for 0x403494>, <DisassemblerInsn "cmp" for 0x40349c>, <DisassemblerInsn "mov" for 0x40349f>, <DisassemblerInsn "mov" for 0x4034a7>, <DisassemblerInsn "jl" for 0x4034ae>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eab>, <DisassemblerInsn "mov" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb9>, <DisassemblerInsn "mov" for 0x402ec1>, <DisassemblerInsn "mov" for 0x402ec8>, <DisassemblerInsn "add" for 0x402ecb>, <DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "add" for 0x402ed7>, <DisassemblerInsn "mov" for 0x402eda>, <DisassemblerInsn "mov" for 0x402ee1>, <DisassemblerInsn "shr" for 0x402ee6>, <DisassemblerInsn "mov" for 0x402ee8>, <DisassemblerInsn "mov" for 0x402eef>, <DisassemblerInsn "add" for 0x402ef6>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402eff>, <DisassemblerInsn "movzx" for 0x402f07>, <DisassemblerInsn "mov" for 0x402f0b>, <DisassemblerInsn "mov" for 0x402f13>, <DisassemblerInsn "sub" for 0x402f18>, <DisassemblerInsn "mov" for 0x402f1b>, <DisassemblerInsn "mov" for 0x402f22>, <DisassemblerInsn "shr" for 0x402f25>, <DisassemblerInsn "mov" for 0x402f28>, <DisassemblerInsn "mov" for 0x402f2f>, <DisassemblerInsn "mov" for 0x402f37>, <DisassemblerInsn "mov" for 0x402f3f>, <DisassemblerInsn "mov" for 0x402f47>, <DisassemblerInsn "mov" for 0x402f4f>, <DisassemblerInsn "cmp" for 0x402f57>, <DisassemblerInsn "mov" for 0x402f5b>, <DisassemblerInsn "mov" for 0x402f63>, <DisassemblerInsn "mov" for 0x402f6a>, <DisassemblerInsn "ja" for 0x402f71>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c5e>, <DisassemblerInsn "mov" for 0x403c66>, <DisassemblerInsn "mov" for 0x403c6e>, <DisassemblerInsn "mov" for 0x403c76>, <DisassemblerInsn "mov" for 0x403c7d>, <DisassemblerInsn "mov" for 0x403c84>, <DisassemblerInsn "mov" for 0x403c8c>, <DisassemblerInsn "mov" for 0x403c94>, <DisassemblerInsn "shr" for 0x403c97>, <DisassemblerInsn "mov" for 0x403c9a>, <DisassemblerInsn "movabs" for 0x403ca2>, <DisassemblerInsn "and" for 0x403cac>, <DisassemblerInsn "movsx" for 0x403caf>, <DisassemblerInsn "mov" for 0x403cb4>, <DisassemblerInsn "mov" for 0x403cbb>, <DisassemblerInsn "movsx" for 0x403cc1>, <DisassemblerInsn "mov" for 0x403cc5>, <DisassemblerInsn "cmp" for 0x403ccc>, <DisassemblerInsn "mov" for 0x403cd1>, <DisassemblerInsn "mov" for 0x403cd9>, <DisassemblerInsn "mov" for 0x403ce0>, <DisassemblerInsn "mov" for 0x403ce8>, <DisassemblerInsn "mov" for 0x403cef>, <DisassemblerInsn "jge" for 0x403cf6>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40414d>, <DisassemblerInsn "mov" for 0x404154>, <DisassemblerInsn "mov" for 0x40415c>, <DisassemblerInsn "mov" for 0x404163>, <DisassemblerInsn "mov" for 0x40416b>, <DisassemblerInsn "mov" for 0x404173>, <DisassemblerInsn "mov" for 0x404178>, <DisassemblerInsn "mov" for 0x40417d>, <DisassemblerInsn "sub" for 0x404181>, <DisassemblerInsn "shl" for 0x404184>, <DisassemblerInsn "add" for 0x404187>, <DisassemblerInsn "add" for 0x404189>, <DisassemblerInsn "mov" for 0x40418b>, <DisassemblerInsn "cmp" for 0x40418f>, <DisassemblerInsn "jle" for 0x404192>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ef9>, <DisassemblerInsn "mov" for 0x403f00>, <DisassemblerInsn "mov" for 0x403f08>, <DisassemblerInsn "mov" for 0x403f10>, <DisassemblerInsn "bswap" for 0x403f12>, <DisassemblerInsn "mov" for 0x403f14>, <DisassemblerInsn "mov" for 0x403f16>, <DisassemblerInsn "sub" for 0x403f1b>, <DisassemblerInsn "mov" for 0x403f1d>, <DisassemblerInsn "shl" for 0x403f1f>, <DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "or" for 0x403f29>, <DisassemblerInsn "add" for 0x403f2c>, <DisassemblerInsn "add" for 0x403f30>, <DisassemblerInsn "mov" for 0x403f33>, <DisassemblerInsn "mov" for 0x403f3b>, <DisassemblerInsn "mov" for 0x403f42>, <DisassemblerInsn "mov" for 0x403f4a>, <DisassemblerInsn "mov" for 0x403f52>, <DisassemblerInsn "mov" for 0x403f5a>, <DisassemblerInsn "mov" for 0x403f61>, <DisassemblerInsn "mov" for 0x403f69>, <DisassemblerInsn "mov" for 0x403f70>, <DisassemblerInsn "add" for 0x403f78>, <DisassemblerInsn "mov" for 0x403f7b>, <DisassemblerInsn "mov" for 0x403f7d>, <DisassemblerInsn "shr" for 0x403f80>, <DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "add" for 0x403f86>, <DisassemblerInsn "mov" for 0x403f89>, <DisassemblerInsn "mov" for 0x403f8b>, <DisassemblerInsn "movsx" for 0x403f8e>, <DisassemblerInsn "movsx" for 0x403f94>, <DisassemblerInsn "mov" for 0x403f99>, <DisassemblerInsn "mov" for 0x403fa1>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "mov" for 0x403fb0>, <DisassemblerInsn "mov" for 0x403fb7>, <DisassemblerInsn "mov" for 0x403fbe>, <DisassemblerInsn "mov" for 0x403fc6>, <DisassemblerInsn "mov" for 0x403fcd>, <DisassemblerInsn "mov" for 0x403fd5>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403feb>, <DisassemblerInsn "mov" for 0x403ff0>, <DisassemblerInsn "mov" for 0x403ff4>, <DisassemblerInsn "lea" for 0x403ffc>, <DisassemblerInsn "cmp" for 0x404003>, <DisassemblerInsn "mov" for 0x404006>, <DisassemblerInsn "jl" for 0x40400e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404298>, <DisassemblerInsn "add" for 0x40429f>, <DisassemblerInsn "pop" for 0x4042a6>, <DisassemblerInsn "pop" for 0x4042a7>, <DisassemblerInsn "pop" for 0x4042a9>, <DisassemblerInsn "ret" for 0x4042aa>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40332f>, <DisassemblerInsn "mov" for 0x403337>, <DisassemblerInsn "mov" for 0x40333e>, <DisassemblerInsn "mov" for 0x403345>, <DisassemblerInsn "mov" for 0x40334c>, <DisassemblerInsn "xor" for 0x403354>, <DisassemblerInsn "mov" for 0x403356>, <DisassemblerInsn "mov" for 0x40335e>, <DisassemblerInsn "mov" for 0x403365>, <DisassemblerInsn "mov" for 0x40336d>, <DisassemblerInsn "mov" for 0x403375>, <DisassemblerInsn "mov" for 0x40337d>, <DisassemblerInsn "mov" for 0x403385>, <DisassemblerInsn "mov" for 0x40338d>, <DisassemblerInsn "mov" for 0x403395>, <DisassemblerInsn "mov" for 0x40339d>, <DisassemblerInsn "add" for 0x4033a0>, <DisassemblerInsn "mov" for 0x4033a3>, <DisassemblerInsn "test" for 0x4033aa>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "cmovne" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b5>, <DisassemblerInsn "test" for 0x4033bd>, <DisassemblerInsn "cmovne" for 0x4033c1>, <DisassemblerInsn "mov" for 0x4033c5>, <DisassemblerInsn "mov" for 0x4033cc>, <DisassemblerInsn "add" for 0x4033d0>, <DisassemblerInsn "mov" for 0x4033d3>, <DisassemblerInsn "cmp" for 0x4033db>, <DisassemblerInsn "mov" for 0x4033de>, <DisassemblerInsn "mov" for 0x4033e6>, <DisassemblerInsn "jl" for 0x4033ed>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dd0>, <DisassemblerInsn "mov" for 0x402dd8>, <DisassemblerInsn "mov" for 0x402de0>, <DisassemblerInsn "mov" for 0x402de7>, <DisassemblerInsn "sub" for 0x402dee>, <DisassemblerInsn "mov" for 0x402df1>, <DisassemblerInsn "sete" for 0x402df8>, <DisassemblerInsn "test" for 0x402dfb>, <DisassemblerInsn "setne" for 0x402dfe>, <DisassemblerInsn "and" for 0x402e01>, <DisassemblerInsn "mov" for 0x402e03>, <DisassemblerInsn "add" for 0x402e0a>, <DisassemblerInsn "mov" for 0x402e0e>, <DisassemblerInsn "test" for 0x402e16>, <DisassemblerInsn "mov" for 0x402e19>, <DisassemblerInsn "jne" for 0x402e21>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d82>, <DisassemblerInsn "mov" for 0x403d89>, <DisassemblerInsn "mov" for 0x403d91>, <DisassemblerInsn "mov" for 0x403d99>, <DisassemblerInsn "bswap" for 0x403d9b>, <DisassemblerInsn "mov" for 0x403d9d>, <DisassemblerInsn "mov" for 0x403d9f>, <DisassemblerInsn "sub" for 0x403da4>, <DisassemblerInsn "mov" for 0x403da6>, <DisassemblerInsn "shl" for 0x403da8>, <DisassemblerInsn "mov" for 0x403dab>, <DisassemblerInsn "or" for 0x403db2>, <DisassemblerInsn "add" for 0x403db5>, <DisassemblerInsn "add" for 0x403db9>, <DisassemblerInsn "mov" for 0x403dbc>, <DisassemblerInsn "mov" for 0x403dc4>, <DisassemblerInsn "mov" for 0x403dcb>, <DisassemblerInsn "mov" for 0x403dd3>, <DisassemblerInsn "mov" for 0x403ddb>, <DisassemblerInsn "mov" for 0x403de3>, <DisassemblerInsn "mov" for 0x403dea>, <DisassemblerInsn "mov" for 0x403df2>, <DisassemblerInsn "mov" for 0x403df9>, <DisassemblerInsn "mov" for 0x403e01>, <DisassemblerInsn "mov" for 0x403e09>, <DisassemblerInsn "mov" for 0x403e10>, <DisassemblerInsn "add" for 0x403e18>, <DisassemblerInsn "mov" for 0x403e1b>, <DisassemblerInsn "mov" for 0x403e1d>, <DisassemblerInsn "shr" for 0x403e20>, <DisassemblerInsn "mov" for 0x403e23>, <DisassemblerInsn "add" for 0x403e26>, <DisassemblerInsn "mov" for 0x403e29>, <DisassemblerInsn "mov" for 0x403e2b>, <DisassemblerInsn "mov" for 0x403e2e>, <DisassemblerInsn "movsx" for 0x403e34>, <DisassemblerInsn "mov" for 0x403e38>, <DisassemblerInsn "movsx" for 0x403e3f>, <DisassemblerInsn "mov" for 0x403e44>, <DisassemblerInsn "cmp" for 0x403e4b>, <DisassemblerInsn "mov" for 0x403e50>, <DisassemblerInsn "mov" for 0x403e58>, <DisassemblerInsn "mov" for 0x403e5f>, <DisassemblerInsn "mov" for 0x403e67>, <DisassemblerInsn "mov" for 0x403e6e>, <DisassemblerInsn "jge" for 0x403e75>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403cfc>, <DisassemblerInsn "mov" for 0x403d04>, <DisassemblerInsn "mov" for 0x403d0c>, <DisassemblerInsn "mov" for 0x403d13>, <DisassemblerInsn "mov" for 0x403d1a>, <DisassemblerInsn "mov" for 0x403d22>, <DisassemblerInsn "shl" for 0x403d2a>, <DisassemblerInsn "mov" for 0x403d2d>, <DisassemblerInsn "mov" for 0x403d34>, <DisassemblerInsn "sub" for 0x403d3c>, <DisassemblerInsn "mov" for 0x403d3e>, <DisassemblerInsn "neg" for 0x403d45>, <DisassemblerInsn "mov" for 0x403d47>, <DisassemblerInsn "mov" for 0x403d4e>, <DisassemblerInsn "sub" for 0x403d50>, <DisassemblerInsn "setb" for 0x403d52>, <DisassemblerInsn "mov" for 0x403d56>, <DisassemblerInsn "sub" for 0x403d59>, <DisassemblerInsn "setb" for 0x403d5c>, <DisassemblerInsn "and" for 0x403d60>, <DisassemblerInsn "test" for 0x403d63>, <DisassemblerInsn "mov" for 0x403d67>, <DisassemblerInsn "mov" for 0x403d6f>, <DisassemblerInsn "mov" for 0x403d76>, <DisassemblerInsn "jne" for 0x403d7e>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403051>, <DisassemblerInsn "movzx" for 0x403059>, <DisassemblerInsn "mov" for 0x403061>, <DisassemblerInsn "mov" for 0x403068>, <DisassemblerInsn "add" for 0x40306b>, <DisassemblerInsn "mov" for 0x40306f>, <DisassemblerInsn "mov" for 0x403077>, <DisassemblerInsn "mov" for 0x40307a>, <DisassemblerInsn "xor" for 0x403081>, <DisassemblerInsn "cmp" for 0x403083>, <DisassemblerInsn "mov" for 0x403086>, <DisassemblerInsn "jle" for 0x40308d>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ad0>, <DisassemblerInsn "mov" for 0x403ad8>, <DisassemblerInsn "mov" for 0x403ae0>, <DisassemblerInsn "mov" for 0x403ae7>, <DisassemblerInsn "mov" for 0x403aef>, <DisassemblerInsn "mov" for 0x403af7>, <DisassemblerInsn "mov" for 0x403afe>, <DisassemblerInsn "mov" for 0x403b06>, <DisassemblerInsn "xor" for 0x403b0e>, <DisassemblerInsn "mov" for 0x403b10>, <DisassemblerInsn "mov" for 0x403b18>, <DisassemblerInsn "mov" for 0x403b1f>, <DisassemblerInsn "mov" for 0x403b27>, <DisassemblerInsn "mov" for 0x403b2f>, <DisassemblerInsn "mov" for 0x403b36>, <DisassemblerInsn "mov" for 0x403b3d>, <DisassemblerInsn "mov" for 0x403b45>, <DisassemblerInsn "mov" for 0x403b4d>, <DisassemblerInsn "mov" for 0x403b55>, <DisassemblerInsn "mov" for 0x403b5d>, <DisassemblerInsn "mov" for 0x403b65>, <DisassemblerInsn "mov" for 0x403b6c>, <DisassemblerInsn "mov" for 0x403b73>, <DisassemblerInsn "mov" for 0x403b7b>, <DisassemblerInsn "mov" for 0x403b83>, <DisassemblerInsn "mov" for 0x403b8b>, <DisassemblerInsn "sub" for 0x403b93>, <DisassemblerInsn "shl" for 0x403b96>, <DisassemblerInsn "add" for 0x403b99>, <DisassemblerInsn "add" for 0x403b9b>, <DisassemblerInsn "lea" for 0x403b9d>, <DisassemblerInsn "cmp" for 0x403ba4>, <DisassemblerInsn "mov" for 0x403ba7>, <DisassemblerInsn "jl" for 0x403baf>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "mov" for 0x4030d8>, <DisassemblerInsn "mov" for 0x4030df>, <DisassemblerInsn "movsxd" for 0x4030e6>, <DisassemblerInsn "mov" for 0x4030e9>, <DisassemblerInsn "mov" for 0x4030f1>, <DisassemblerInsn "mov" for 0x4030f3>, <DisassemblerInsn "xor" for 0x4030fb>, <DisassemblerInsn "mov" for 0x4030fd>, <DisassemblerInsn "mov" for 0x403104>, <DisassemblerInsn "mov" for 0x403106>, <DisassemblerInsn "mov" for 0x40310d>, <DisassemblerInsn "mov" for 0x403114>, <DisassemblerInsn "mov" for 0x40311b>, <DisassemblerInsn "mov" for 0x403122>, <DisassemblerInsn "mov" for 0x403129>, <DisassemblerInsn "mov" for 0x403130>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "add" for 0x403145>, <DisassemblerInsn "mov" for 0x403148>, <DisassemblerInsn "imul" for 0x40314f>, <DisassemblerInsn "cdq" for 0x403152>, <DisassemblerInsn "idiv" for 0x403153>, <DisassemblerInsn "mov" for 0x403155>, <DisassemblerInsn "mov" for 0x40315c>, <DisassemblerInsn "mov" for 0x40315e>, <DisassemblerInsn "and" for 0x403165>, <DisassemblerInsn "mov" for 0x403167>, <DisassemblerInsn "cmp" for 0x40316e>, <DisassemblerInsn "mov" for 0x403170>, <DisassemblerInsn "jle" for 0x403177>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40376e>, <DisassemblerInsn "mov" for 0x403776>, <DisassemblerInsn "mov" for 0x40377e>, <DisassemblerInsn "mov" for 0x403785>, <DisassemblerInsn "mov" for 0x40378c>, <DisassemblerInsn "sub" for 0x40378f>, <DisassemblerInsn "mov" for 0x403791>, <DisassemblerInsn "lea" for 0x403798>, <DisassemblerInsn "cmp" for 0x40379f>, <DisassemblerInsn "mov" for 0x4037a2>, <DisassemblerInsn "je" for 0x4037aa>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f92>, <DisassemblerInsn "mov" for 0x402f99>, <DisassemblerInsn "mov" for 0x402fa0>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "mov" for 0x402fb0>, <DisassemblerInsn "mov" for 0x402fb8>, <DisassemblerInsn "mov" for 0x402fbf>, <DisassemblerInsn "movzx" for 0x402fc7>, <DisassemblerInsn "add" for 0x402fcb>, <DisassemblerInsn "lea" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd6>, <DisassemblerInsn "xor" for 0x402fdc>, <DisassemblerInsn "mov" for 0x402fdf>, <DisassemblerInsn "mov" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fe6>, <DisassemblerInsn "mov" for 0x402fee>, <DisassemblerInsn "mov" for 0x402ff6>, <DisassemblerInsn "mov" for 0x402ffb>, <DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300b>, <DisassemblerInsn "call" for 0x403013>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403e7b>, <DisassemblerInsn "mov" for 0x403e83>, <DisassemblerInsn "mov" for 0x403e8b>, <DisassemblerInsn "mov" for 0x403e92>, <DisassemblerInsn "mov" for 0x403e99>, <DisassemblerInsn "mov" for 0x403ea1>, <DisassemblerInsn "shl" for 0x403ea8>, <DisassemblerInsn "mov" for 0x403eab>, <DisassemblerInsn "mov" for 0x403eb2>, <DisassemblerInsn "add" for 0x403eba>, <DisassemblerInsn "mov" for 0x403ebc>, <DisassemblerInsn "neg" for 0x403ec3>, <DisassemblerInsn "mov" for 0x403ec5>, <DisassemblerInsn "sub" for 0x403ec7>, <DisassemblerInsn "setb" for 0x403ec9>, <DisassemblerInsn "mov" for 0x403ecd>, <DisassemblerInsn "sub" for 0x403ed0>, <DisassemblerInsn "setb" for 0x403ed3>, <DisassemblerInsn "and" for 0x403ed7>, <DisassemblerInsn "test" for 0x403eda>, <DisassemblerInsn "mov" for 0x403ede>, <DisassemblerInsn "mov" for 0x403ee6>, <DisassemblerInsn "mov" for 0x403eed>, <DisassemblerInsn "jne" for 0x403ef5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403218>, <DisassemblerInsn "mov" for 0x40321f>, <DisassemblerInsn "mov" for 0x403227>, <DisassemblerInsn "mov" for 0x40322e>, <DisassemblerInsn "xor" for 0x403236>, <DisassemblerInsn "cmp" for 0x403238>, <DisassemblerInsn "mov" for 0x40323b>, <DisassemblerInsn "mov" for 0x403243>, <DisassemblerInsn "je" for 0x40324a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404014>, <DisassemblerInsn "mov" for 0x40401c>, <DisassemblerInsn "mov" for 0x404024>, <DisassemblerInsn "mov" for 0x40402c>, <DisassemblerInsn "mov" for 0x404034>, <DisassemblerInsn "mov" for 0x40403b>, <DisassemblerInsn "mov" for 0x404043>, <DisassemblerInsn "mov" for 0x404048>, <DisassemblerInsn "mov" for 0x40404d>, <DisassemblerInsn "mov" for 0x404051>, <DisassemblerInsn "sub" for 0x404055>, <DisassemblerInsn "mov" for 0x404057>, <DisassemblerInsn "mov" for 0x40405b>, <DisassemblerInsn "shl" for 0x40405d>, <DisassemblerInsn "mov" for 0x404060>, <DisassemblerInsn "mov" for 0x404068>, <DisassemblerInsn "mov" for 0x40406d>, <DisassemblerInsn "add" for 0x404070>, <DisassemblerInsn "test" for 0x404072>, <DisassemblerInsn "mov" for 0x404076>, <DisassemblerInsn "cmovne" for 0x404079>, <DisassemblerInsn "test" for 0x40407d>, <DisassemblerInsn "cmovne" for 0x404081>, <DisassemblerInsn "mov" for 0x404084>, <DisassemblerInsn "mov" for 0x404088>, <DisassemblerInsn "add" for 0x40408c>, <DisassemblerInsn "cmp" for 0x40408f>, <DisassemblerInsn "mov" for 0x404092>, <DisassemblerInsn "mov" for 0x40409a>, <DisassemblerInsn "mov" for 0x4040a1>, <DisassemblerInsn "mov" for 0x4040a9>, <DisassemblerInsn "mov" for 0x4040b1>, <DisassemblerInsn "jl" for 0x4040b8>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403250>, <DisassemblerInsn "mov" for 0x403258>, <DisassemblerInsn "mov" for 0x403260>, <DisassemblerInsn "mov" for 0x403268>, <DisassemblerInsn "mov" for 0x403270>, <DisassemblerInsn "mov" for 0x403278>, <DisassemblerInsn "mov" for 0x403280>, <DisassemblerInsn "mov" for 0x403288>, <DisassemblerInsn "add" for 0x40328b>, <DisassemblerInsn "mov" for 0x40328e>, <DisassemblerInsn "test" for 0x403295>, <DisassemblerInsn "mov" for 0x403299>, <DisassemblerInsn "cmovne" for 0x40329c>, <DisassemblerInsn "mov" for 0x4032a0>, <DisassemblerInsn "test" for 0x4032a8>, <DisassemblerInsn "cmovne" for 0x4032ac>, <DisassemblerInsn "mov" for 0x4032b0>, <DisassemblerInsn "mov" for 0x4032b7>, <DisassemblerInsn "add" for 0x4032bb>, <DisassemblerInsn "mov" for 0x4032be>, <DisassemblerInsn "cmp" for 0x4032c6>, <DisassemblerInsn "mov" for 0x4032c9>, <DisassemblerInsn "mov" for 0x4032d1>, <DisassemblerInsn "jl" for 0x4032d8>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404260>, <DisassemblerInsn "mov" for 0x404268>, <DisassemblerInsn "mov" for 0x404270>, <DisassemblerInsn "mov" for 0x404273>, <DisassemblerInsn "mov" for 0x404278>, <DisassemblerInsn "call" for 0x40427a>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041b6>, <DisassemblerInsn "mov" for 0x4041bd>, <DisassemblerInsn "mov" for 0x4041c1>, <DisassemblerInsn "mov" for 0x4041c6>, <DisassemblerInsn "mov" for 0x4041ce>, <DisassemblerInsn "mov" for 0x4041d6>, <DisassemblerInsn "mov" for 0x4041db>, <DisassemblerInsn "mov" for 0x4041e3>, <DisassemblerInsn "mov" for 0x4041eb>, <DisassemblerInsn "mov" for 0x4041f3>, <DisassemblerInsn "movsxd" for 0x4041f6>, <DisassemblerInsn "cmp" for 0x4041f9>, <DisassemblerInsn "mov" for 0x4041fc>, <DisassemblerInsn "mov" for 0x404204>, <DisassemblerInsn "mov" for 0x40420c>, <DisassemblerInsn "mov" for 0x404214>, <DisassemblerInsn "mov" for 0x40421c>, <DisassemblerInsn "mov" for 0x404224>, <DisassemblerInsn "mov" for 0x40422c>, <DisassemblerInsn "mov" for 0x404234>, <DisassemblerInsn "mov" for 0x40423b>, <DisassemblerInsn "jl" for 0x404242>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c0f>, <DisassemblerInsn "mov" for 0x403c16>, <DisassemblerInsn "mov" for 0x403c1e>, <DisassemblerInsn "mov" for 0x403c26>, <DisassemblerInsn "bswap" for 0x403c28>, <DisassemblerInsn "mov" for 0x403c2a>, <DisassemblerInsn "mov" for 0x403c2c>, <DisassemblerInsn "mov" for 0x403c2e>, <DisassemblerInsn "sub" for 0x403c33>, <DisassemblerInsn "mov" for 0x403c35>, <DisassemblerInsn "shl" for 0x403c37>, <DisassemblerInsn "mov" for 0x403c3a>, <DisassemblerInsn "or" for 0x403c3d>, <DisassemblerInsn "add" for 0x403c40>, <DisassemblerInsn "add" for 0x403c44>, <DisassemblerInsn "mov" for 0x403c47>, <DisassemblerInsn "mov" for 0x403c4f>, <DisassemblerInsn "mov" for 0x403c57>, <DisassemblerInsn "mov" for 0x403c5e>, <DisassemblerInsn "mov" for 0x403c66>, <DisassemblerInsn "mov" for 0x403c6e>, <DisassemblerInsn "mov" for 0x403c76>, <DisassemblerInsn "mov" for 0x403c7d>, <DisassemblerInsn "mov" for 0x403c84>, <DisassemblerInsn "mov" for 0x403c8c>, <DisassemblerInsn "mov" for 0x403c94>, <DisassemblerInsn "shr" for 0x403c97>, <DisassemblerInsn "mov" for 0x403c9a>, <DisassemblerInsn "movabs" for 0x403ca2>, <DisassemblerInsn "and" for 0x403cac>, <DisassemblerInsn "movsx" for 0x403caf>, <DisassemblerInsn "mov" for 0x403cb4>, <DisassemblerInsn "mov" for 0x403cbb>, <DisassemblerInsn "movsx" for 0x403cc1>, <DisassemblerInsn "mov" for 0x403cc5>, <DisassemblerInsn "cmp" for 0x403ccc>, <DisassemblerInsn "mov" for 0x403cd1>, <DisassemblerInsn "mov" for 0x403cd9>, <DisassemblerInsn "mov" for 0x403ce0>, <DisassemblerInsn "mov" for 0x403ce8>, <DisassemblerInsn "mov" for 0x403cef>, <DisassemblerInsn "jge" for 0x403cf6>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403021>, <DisassemblerInsn "mov" for 0x403029>, <DisassemblerInsn "mov" for 0x40302d>, <DisassemblerInsn "lea" for 0x403032>, <DisassemblerInsn "mov" for 0x403039>, <DisassemblerInsn "call" for 0x40303b>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb4>, <DisassemblerInsn "mov" for 0x402cbc>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc7>, <DisassemblerInsn "mov" for 0x402ccf>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "or" for 0x402cdb>, <DisassemblerInsn "mov" for 0x402cdf>, <DisassemblerInsn "mov" for 0x402ce7>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "mov" for 0x402cf2>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "or" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0e>, <DisassemblerInsn "mov" for 0x402d16>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d20>, <DisassemblerInsn "or" for 0x402d23>, <DisassemblerInsn "mov" for 0x402d27>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d32>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "add" for 0x402d3d>, <DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4d>, <DisassemblerInsn "add" for 0x402d55>, <DisassemblerInsn "mov" for 0x402d59>, <DisassemblerInsn "cmp" for 0x402d61>, <DisassemblerInsn "mov" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "jne" for 0x402d78>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "mov" for 0x402db9>, <DisassemblerInsn "cmp" for 0x402dbe>, <DisassemblerInsn "mov" for 0x402dc1>, <DisassemblerInsn "jbe" for 0x402dc9>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403114>, <DisassemblerInsn "mov" for 0x40311b>, <DisassemblerInsn "mov" for 0x403122>, <DisassemblerInsn "mov" for 0x403129>, <DisassemblerInsn "mov" for 0x403130>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "add" for 0x403145>, <DisassemblerInsn "mov" for 0x403148>, <DisassemblerInsn "imul" for 0x40314f>, <DisassemblerInsn "cdq" for 0x403152>, <DisassemblerInsn "idiv" for 0x403153>, <DisassemblerInsn "mov" for 0x403155>, <DisassemblerInsn "mov" for 0x40315c>, <DisassemblerInsn "mov" for 0x40315e>, <DisassemblerInsn "and" for 0x403165>, <DisassemblerInsn "mov" for 0x403167>, <DisassemblerInsn "cmp" for 0x40316e>, <DisassemblerInsn "mov" for 0x403170>, <DisassemblerInsn "jle" for 0x403177>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403365>, <DisassemblerInsn "mov" for 0x40336d>, <DisassemblerInsn "mov" for 0x403375>, <DisassemblerInsn "mov" for 0x40337d>, <DisassemblerInsn "mov" for 0x403385>, <DisassemblerInsn "mov" for 0x40338d>, <DisassemblerInsn "mov" for 0x403395>, <DisassemblerInsn "mov" for 0x40339d>, <DisassemblerInsn "add" for 0x4033a0>, <DisassemblerInsn "mov" for 0x4033a3>, <DisassemblerInsn "test" for 0x4033aa>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "cmovne" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b5>, <DisassemblerInsn "test" for 0x4033bd>, <DisassemblerInsn "cmovne" for 0x4033c1>, <DisassemblerInsn "mov" for 0x4033c5>, <DisassemblerInsn "mov" for 0x4033cc>, <DisassemblerInsn "add" for 0x4033d0>, <DisassemblerInsn "mov" for 0x4033d3>, <DisassemblerInsn "cmp" for 0x4033db>, <DisassemblerInsn "mov" for 0x4033de>, <DisassemblerInsn "mov" for 0x4033e6>, <DisassemblerInsn "jl" for 0x4033ed>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x402bb0>, <DisassemblerInsn "push" for 0x402bb1>, <DisassemblerInsn "push" for 0x402bb3>, <DisassemblerInsn "sub" for 0x402bb4>, <DisassemblerInsn "mov" for 0x402bbb>, <DisassemblerInsn "mov" for 0x402bc3>, <DisassemblerInsn "mov" for 0x402bcb>, <DisassemblerInsn "mov" for 0x402bd2>, <DisassemblerInsn "mov" for 0x402bda>, <DisassemblerInsn "mov" for 0x402be2>, <DisassemblerInsn "mov" for 0x402be9>, <DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c07>, <DisassemblerInsn "lea" for 0x402c0e>, <DisassemblerInsn "mov" for 0x402c16>, <DisassemblerInsn "cmp" for 0x402c1b>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "jne" for 0x402c25>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403093>, <DisassemblerInsn "mov" for 0x40309a>, <DisassemblerInsn "mov" for 0x4030a1>, <DisassemblerInsn "imul" for 0x4030a8>, <DisassemblerInsn "mov" for 0x4030ab>, <DisassemblerInsn "cmp" for 0x4030b2>, <DisassemblerInsn "sete" for 0x4030b5>, <DisassemblerInsn "mov" for 0x4030b8>, <DisassemblerInsn "xor" for 0x4030bf>, <DisassemblerInsn "cmp" for 0x4030c1>, <DisassemblerInsn "mov" for 0x4030c4>, <DisassemblerInsn "jle" for 0x4030cb>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403516>, <DisassemblerInsn "mov" for 0x40351e>, <DisassemblerInsn "add" for 0x403526>, <DisassemblerInsn "mov" for 0x40352d>, <DisassemblerInsn "mov" for 0x403535>, <DisassemblerInsn "add" for 0x403538>, <DisassemblerInsn "mov" for 0x40353c>, <DisassemblerInsn "mov" for 0x403544>, <DisassemblerInsn "mov" for 0x403547>, <DisassemblerInsn "cmp" for 0x40354e>, <DisassemblerInsn "jle" for 0x403551>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f4a>, <DisassemblerInsn "mov" for 0x403f52>, <DisassemblerInsn "mov" for 0x403f5a>, <DisassemblerInsn "mov" for 0x403f61>, <DisassemblerInsn "mov" for 0x403f69>, <DisassemblerInsn "mov" for 0x403f70>, <DisassemblerInsn "add" for 0x403f78>, <DisassemblerInsn "mov" for 0x403f7b>, <DisassemblerInsn "mov" for 0x403f7d>, <DisassemblerInsn "shr" for 0x403f80>, <DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "add" for 0x403f86>, <DisassemblerInsn "mov" for 0x403f89>, <DisassemblerInsn "mov" for 0x403f8b>, <DisassemblerInsn "movsx" for 0x403f8e>, <DisassemblerInsn "movsx" for 0x403f94>, <DisassemblerInsn "mov" for 0x403f99>, <DisassemblerInsn "mov" for 0x403fa1>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "mov" for 0x403fb0>, <DisassemblerInsn "mov" for 0x403fb7>, <DisassemblerInsn "mov" for 0x403fbe>, <DisassemblerInsn "mov" for 0x403fc6>, <DisassemblerInsn "mov" for 0x403fcd>, <DisassemblerInsn "mov" for 0x403fd5>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403feb>, <DisassemblerInsn "mov" for 0x403ff0>, <DisassemblerInsn "mov" for 0x403ff4>, <DisassemblerInsn "lea" for 0x403ffc>, <DisassemblerInsn "cmp" for 0x404003>, <DisassemblerInsn "mov" for 0x404006>, <DisassemblerInsn "jl" for 0x40400e>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4037b0>, <DisassemblerInsn "mov" for 0x4037b7>, <DisassemblerInsn "mov" for 0x4037bf>, <DisassemblerInsn "mov" for 0x4037c6>, <DisassemblerInsn "mov" for 0x4037ce>, <DisassemblerInsn "mov" for 0x4037d5>, <DisassemblerInsn "movsxd" for 0x4037d8>, <DisassemblerInsn "add" for 0x4037db>, <DisassemblerInsn "shl" for 0x4037de>, <DisassemblerInsn "movsxd" for 0x4037e1>, <DisassemblerInsn "add" for 0x4037e4>, <DisassemblerInsn "movsxd" for 0x4037e7>, <DisassemblerInsn "mov" for 0x4037ea>, <DisassemblerInsn "call" for 0x4037f2>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403979>, <DisassemblerInsn "mov" for 0x403980>, <DisassemblerInsn "mov" for 0x403987>, <DisassemblerInsn "mov" for 0x40398f>, <DisassemblerInsn "mov" for 0x403996>, <DisassemblerInsn "mov" for 0x40399e>, <DisassemblerInsn "mov" for 0x4039a6>, <DisassemblerInsn "mov" for 0x4039ae>, <DisassemblerInsn "mov" for 0x4039b6>, <DisassemblerInsn "mov" for 0x4039be>, <DisassemblerInsn "mov" for 0x4039c6>, <DisassemblerInsn "mov" for 0x4039ce>, <DisassemblerInsn "mov" for 0x4039d6>, <DisassemblerInsn "mov" for 0x4039dd>, <DisassemblerInsn "cmp" for 0x4039e5>, <DisassemblerInsn "mov" for 0x4039e7>, <DisassemblerInsn "mov" for 0x4039ee>, <DisassemblerInsn "mov" for 0x4039f6>, <DisassemblerInsn "jge" for 0x4039fe>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e3b>, <DisassemblerInsn "mov" for 0x402e43>, <DisassemblerInsn "movzx" for 0x402e4a>, <DisassemblerInsn "mov" for 0x402e4d>, <DisassemblerInsn "mov" for 0x402e54>, <DisassemblerInsn "sub" for 0x402e59>, <DisassemblerInsn "mov" for 0x402e5b>, <DisassemblerInsn "shr" for 0x402e60>, <DisassemblerInsn "mov" for 0x402e62>, <DisassemblerInsn "mov" for 0x402e69>, <DisassemblerInsn "mov" for 0x402e70>, <DisassemblerInsn "mov" for 0x402e77>, <DisassemblerInsn "mov" for 0x402e7f>, <DisassemblerInsn "mov" for 0x402e86>, <DisassemblerInsn "cmp" for 0x402e8b>, <DisassemblerInsn "mov" for 0x402e8f>, <DisassemblerInsn "mov" for 0x402e97>, <DisassemblerInsn "mov" for 0x402e9e>, <DisassemblerInsn "jle" for 0x402ea5>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "je" for 0x40301b>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4036e4>, <DisassemblerInsn "imul" for 0x4036ec>, <DisassemblerInsn "cdq" for 0x4036ef>, <DisassemblerInsn "idiv" for 0x4036f0>, <DisassemblerInsn "mov" for 0x4036f2>, <DisassemblerInsn "mov" for 0x4036fa>, <DisassemblerInsn "mov" for 0x4036fc>, <DisassemblerInsn "and" for 0x403704>, <DisassemblerInsn "mov" for 0x403707>, <DisassemblerInsn "movsxd" for 0x40370e>, <DisassemblerInsn "imul" for 0x403711>, <DisassemblerInsn "add" for 0x403715>, <DisassemblerInsn "mov" for 0x403718>, <DisassemblerInsn "xor" for 0x403720>, <DisassemblerInsn "mov" for 0x403722>, <DisassemblerInsn "xor" for 0x403724>, <DisassemblerInsn "cmp" for 0x403726>, <DisassemblerInsn "mov" for 0x40372a>, <DisassemblerInsn "mov" for 0x403732>, <DisassemblerInsn "je" for 0x403739>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fbe>, <DisassemblerInsn "mov" for 0x403fc6>, <DisassemblerInsn "mov" for 0x403fcd>, <DisassemblerInsn "mov" for 0x403fd5>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "mov" for 0x403feb>, <DisassemblerInsn "mov" for 0x403ff0>, <DisassemblerInsn "mov" for 0x403ff4>, <DisassemblerInsn "lea" for 0x403ffc>, <DisassemblerInsn "cmp" for 0x404003>, <DisassemblerInsn "mov" for 0x404006>, <DisassemblerInsn "jl" for 0x40400e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 41, 'blockInsts': ['<lea~~rdi, [rsp + 0x588]>', '<call~~0x500080>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x218]>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~r8d, dword ptr [rsp + 0x18c]>', '<mov~~r9, qword ptr [rsp + 0x190]>', '<mov~~rsi, qword ptr [rsp + 0x198]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<mov~~qword ptr [rsp + 0x158], r9>', '<mov~~dword ptr [rsp + 0x164], r8d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x56ec]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x270], rax>', '<jl~~0x404260>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x438]>', '<mov~~esi, dword ptr [rsp + 0x430]>', '<mov~~rcx, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rsp + 0x550]>', '<movsxd~~rax, esi>', '<imul~~rax, rdi>', '<add~~rcx, rax>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~eax, edx>', '<sub~~eax, esi>', '<mov~~dword ptr [rsp + 0x418], eax>', '<add~~esi, 1>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<mov~~eax, 0x80>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x420], rcx>', '<mov~~dword ptr [rsp + 0x428], eax>', '<je~~0x403218>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jmp~~0x404298>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x240], r8d>', '<mov~~dword ptr [rsp + 0x244], edi>', '<mov~~qword ptr [rsp + 0x248], rsi>', '<mov~~qword ptr [rsp + 0x250], rdx>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<mov~~qword ptr [rsp + 0x260], rax>', '<mov~~esi, dword ptr [rsp + 0x2c8]>', '<mov~~edi, dword ptr [rsp + 0x2e4]>', '<mov~~r8d, dword ptr [rsp + 0x240]>', '<mov~~edx, dword ptr [rsp + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~r9, qword ptr [rsp + 0x250]>', '<mov~~r10, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<mov~~qword ptr [rsp + 0x1f8], r10>', '<mov~~qword ptr [rsp + 0x200], r9>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<mov~~qword ptr [rsp + 0x228], rax>', '<jge~~0x40414d>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x403f4a>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x404298>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~rdx, qword ptr [rsp + 0x2b0]>', '<mov~~edi, dword ptr [rsp + 0x2a0]>', '<mov~~r8, qword ptr [rsp + 0x238]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x240], edi>', '<mov~~dword ptr [rsp + 0x244], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x248], rsi>', '<mov~~qword ptr [rsp + 0x250], rdx>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<mov~~qword ptr [rsp + 0x260], rax>', '<je~~0x403979>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~eax, dword ptr [rsp + 0x418]>', '<and~~eax, 0xfffffffe>', '<mov~~dword ptr [rsp + 0x3fc], eax>', '<mov~~ecx, 0x80>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x400], rdx>', '<mov~~dword ptr [rsp + 0x408], ecx>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<jmp~~0x40332f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~ecx, dword ptr [rsp + 0x584]>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~r8, qword ptr [rsp + 0x200]>', '<mov~~edi, dword ptr [rsp + 0x1b4]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~dword ptr [rsp + 0x148], eax>', '<jne~~0x403c0f>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~sil, byte ptr [rsp + 0x47f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x40414d>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x42c]>', '<mov~~edx, dword ptr [rsp + 0x438]>', '<mov~~esi, dword ptr [rsp + 0x43c]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x450], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jl~~0x403114>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~r8d, dword ptr [rsp + 0x514]>', '<mov~~edx, dword ptr [rsp + 0x580]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x360]>', '<mov~~ecx, dword ptr [rsp + 0x364]>', '<mov~~r9, qword ptr [rsp + 0x298]>', '<mov~~r10, qword ptr [rsp + 0x290]>', '<mov~~r11, qword ptr [rsp + 0x288]>', '<mov~~rbx, qword ptr [rsp + 0x280]>', '<mov~~ebp, dword ptr [rsp + 0x27c]>', '<mov~~r14d, dword ptr [rsp + 0x278]>', '<mov~~dword ptr [rsp + 0x2a0], r14d>', '<mov~~dword ptr [rsp + 0x2a4], ebp>', '<mov~~qword ptr [rsp + 0x2a8], rbx>', '<mov~~qword ptr [rsp + 0x2b0], r11>', '<mov~~qword ptr [rsp + 0x2b8], r10>', '<mov~~qword ptr [rsp + 0x2c0], r9>', '<mov~~dword ptr [rsp + 0x2c8], ecx>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<mov~~dword ptr [rsp + 0x2fc], eax>', '<je~~0x40376e>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4cd]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x47e], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x47f], al>', '<jb~~0x402fa0>']}, {'block_Idx': 52, 'blockInsts': ['<lea~~rdi, [rsp + 0x588]>', '<call~~0x500080>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x43c], eax>', '<mov~~ecx, dword ptr [rsp + 0x42c]>', '<mov~~edx, dword ptr [rsp + 0x438]>', '<mov~~esi, dword ptr [rsp + 0x43c]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x450], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~dword ptr [rsp + 0x458], ecx>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jl~~0x403114>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r8d, dword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~qword ptr [rsp + 0xc0], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jge~~0x403fbe>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~edx, dword ptr [rsp + 0x214]>', '<mov~~edi, dword ptr [rsp + 0x2c8]>', '<mov~~r8, qword ptr [rsp + 0x2e8]>', '<mov~~r9b, byte ptr [rsp + 0x31f]>', '<mov~~rsi, qword ptr [rsp + 0x328]>', '<mov~~r10, qword ptr [rsp + 0x320]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x1a8], r10>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x1b4], esi>', '<mov~~r10d, 0x40>', '<sub~~r10d, esi>', '<mov~~r10d, r10d>', '<mov~~qword ptr [rsp + 0x1b8], r10>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1c0], rsi>', '<mov~~esi, 0x80>', '<test~~r9b, 1>', '<mov~~qword ptr [rsp + 0x1c8], r8>', '<mov~~dword ptr [rsp + 0x1d0], edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1ec], esi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<mov~~qword ptr [rsp + 0x228], rax>', '<jne~~0x403ad0>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x403021>']}, {'block_Idx': 69, 'blockInsts': ['<jmp~~0x403c5e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x584], eax>', '<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~ecx, dword ptr [rsp + 0x584]>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<lea~~rcx, [rsp + 0xba0]>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<lea~~rcx, [rsp + 0x7a0]>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<lea~~rcx, [rsp + 0x6a0]>', '<mov~~qword ptr [rsp + 0x528], rcx>', '<lea~~rcx, [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x300]>', '<mov~~r9d, dword ptr [rsp + 0x26c]>', '<mov~~r8d, dword ptr [rsp + 0x2a0]>', '<mov~~edi, dword ptr [rsp + 0x2a4]>', '<mov~~rsi, qword ptr [rsp + 0x2a8]>', '<mov~~rdx, qword ptr [rsp + 0x2b0]>', '<mov~~rcx, qword ptr [rsp + 0x2b8]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x238], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x240], r8d>', '<mov~~dword ptr [rsp + 0x244], edi>', '<mov~~qword ptr [rsp + 0x248], rsi>', '<mov~~qword ptr [rsp + 0x250], rdx>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<mov~~qword ptr [rsp + 0x260], rax>', '<ja~~0x403979>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x5111]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~dword ptr [rsp + 0x4bc], eax>', '<cmp~~eax, -1>', '<jle~~0x402f77>']}, {'block_Idx': 45, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jmp~~0x404298>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xba2]>', '<mov~~byte ptr [rsp + 0x4e7], al>', '<cmp~~al, 0>', '<je~~0x403051>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x40332f>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x350]>', '<mov~~rcx, qword ptr [rsp + 0x2d8]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<mov~~dword ptr [rsp + 0x2fc], eax>', '<mov~~rcx, qword ptr [rsp + 0x368]>', '<mov~~rdx, qword ptr [rsp + 0x2f0]>', '<mov~~eax, dword ptr [rsp + 0x2fc]>', '<mov~~dword ptr [rsp + 0x268], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x26c], ecx>', '<lea~~rax, [rip + 0x5aaf]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x404260>']}, {'block_Idx': 74, 'blockInsts': ['<jmp~~0x403dd3>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x378]>', '<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~esi, dword ptr [rsp + 0x55c]>', '<mov~~rdi, qword ptr [rsp + 0x568]>', '<mov~~r8d, dword ptr [rsp + 0x574]>', '<mov~~edx, dword ptr [rsp + 0x54c]>', '<mov~~r9, rdi>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x300], r9>', '<mov~~r10, rdi>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x308], r10>', '<mov~~qword ptr [rsp + 0x310], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x31f], r9b>', '<lea~~r9, [rsp + 0x588]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x320], r9>', '<lea~~r9, [rsp + 0x588]>', '<mov~~qword ptr [rsp + 0x328], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x337], r8b>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x338], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x340], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x348], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x350], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x358], rdx>', '<mov~~dword ptr [rsp + 0x360], ecx>', '<mov~~dword ptr [rsp + 0x364], eax>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~r8d, dword ptr [rsp + 0x514]>', '<mov~~edx, dword ptr [rsp + 0x580]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x360]>', '<mov~~ecx, dword ptr [rsp + 0x364]>', '<mov~~r9, qword ptr [rsp + 0x298]>', '<mov~~r10, qword ptr [rsp + 0x290]>', '<mov~~r11, qword ptr [rsp + 0x288]>', '<mov~~rbx, qword ptr [rsp + 0x280]>', '<mov~~ebp, dword ptr [rsp + 0x27c]>', '<mov~~r14d, dword ptr [rsp + 0x278]>', '<mov~~dword ptr [rsp + 0x2a0], r14d>', '<mov~~dword ptr [rsp + 0x2a4], ebp>', '<mov~~qword ptr [rsp + 0x2a8], rbx>', '<mov~~qword ptr [rsp + 0x2b0], r11>', '<mov~~qword ptr [rsp + 0x2b8], r10>', '<mov~~qword ptr [rsp + 0x2c0], r9>', '<mov~~dword ptr [rsp + 0x2c8], ecx>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<mov~~qword ptr [rsp + 0x2d8], rax>', '<add~~rax, 1>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x518]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfd2c9]>', '<call~~0x500068>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~r9d, dword ptr [rsp + 0x2e4]>', '<mov~~edi, dword ptr [rsp + 0x174]>', '<mov~~r10, qword ptr [rsp + 0x550]>', '<mov~~r8, qword ptr [rsp + 0x178]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1c8], r8>', '<mov~~dword ptr [rsp + 0x1d0], edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1ec], esi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<mov~~qword ptr [rsp + 0x228], rax>', '<jne~~0x403ad0>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x384]>', '<mov~~esi, dword ptr [rsp + 0x3fc]>', '<mov~~eax, dword ptr [rsp + 0x3bc]>', '<mov~~rdi, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x390]>', '<add~~rdx, rdi>', '<add~~eax, 2>', '<cmp~~eax, esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x420], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x428], esi>', '<mov~~qword ptr [rsp + 0x400], rdx>', '<mov~~dword ptr [rsp + 0x408], ecx>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<je~~0x403218>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x478], eax>', '<mov~~eax, dword ptr [rsp + 0x478]>', '<add~~rsp, 0x13a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3a0]>', '<mov~~rcx, qword ptr [rsp + 0x398]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x390]>', '<mov~~r10b, byte ptr [rsp + 0x463]>', '<mov~~r11d, dword ptr [rsp + 0x464]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x37c], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x380], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x384], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<mov~~dword ptr [rsp + 0x3a0], eax>', '<jl~~0x403426>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0x3c0]>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<mov~~dword ptr [rsp + 0x3a0], eax>', '<mov~~r9d, dword ptr [rsp + 0x3a0]>', '<mov~~rcx, qword ptr [rsp + 0x398]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x390]>', '<mov~~r10b, byte ptr [rsp + 0x463]>', '<mov~~r11d, dword ptr [rsp + 0x464]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x37c], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x380], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x384], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<mov~~dword ptr [rsp + 0x3a0], eax>', '<jl~~0x403426>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4b8]>', '<mov~~ecx, dword ptr [rsp + 0x4b4]>', '<mov~~rsi, qword ptr [rsp + 0x4a8]>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x480], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x488], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x48c]>', '<mov~~dword ptr [rsp + 0x490], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x494], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xb9a]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x49c], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x498], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x49c]>', '<mov~~dword ptr [rsp + 0x4a0], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x79c], r8d>', '<mov~~byte ptr [rsp + rsi + 0x69f], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xb98]>', '<mov~~byte ptr [rsp + rsi + 0x59f], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x4a8], rdx>', '<mov~~dword ptr [rsp + 0x4b4], ecx>', '<mov~~dword ptr [rsp + 0x4b8], eax>', '<ja~~0x402eab>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~esi, dword ptr [rsp + 0x148]>', '<mov~~dword ptr [rsp + 0xfc], esi>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x110], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x114], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jge~~0x403fbe>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x1f8]>', '<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~rsi, qword ptr [rsp + 0x220]>', '<mov~~rdi, qword ptr [rsp + 0x228]>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x50], eax>', '<cmp~~eax, 0x20>', '<jle~~0x4041b6>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x94]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~edi, dword ptr [rsp + 0x130]>', '<mov~~ecx, dword ptr [rsp + 0x134]>', '<mov~~dword ptr [rsp + 0x68], ecx>', '<mov~~dword ptr [rsp + 0x6c], edi>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<lea~~rax, [rip + 0x52ad]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x270], rax>', '<jl~~0x404260>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x478]>', '<add~~rsp, 0x13a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~eax, dword ptr [rsp + 0x408]>', '<mov~~edx, dword ptr [rsp + 0x40c]>', '<mov~~dword ptr [rsp + 0x3bc], edx>', '<mov~~qword ptr [rsp + 0x3c0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~dword ptr [rsp + 0x3d0], eax>', '<mov~~r9d, dword ptr [rsp + 0x3d0]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x3c0]>', '<mov~~r10b, byte ptr [rsp + 0x463]>', '<mov~~r11d, dword ptr [rsp + 0x464]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3a4], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3a8], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~dword ptr [rsp + 0x3d0], eax>', '<jl~~0x403365>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~qword ptr [rsp + 0x4c0], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xba2]>', '<mov~~byte ptr [rsp + 0x4cd], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x4ce], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x4cf], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jne~~0x402dd0>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xd8]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0xe0], rdx>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r8d, dword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0xec]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~qword ptr [rsp + 0xc0], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jge~~0x403fbe>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~r8, qword ptr [rsp + 0x200]>', '<mov~~edi, dword ptr [rsp + 0x114]>', '<mov~~esi, dword ptr [rsp + 0x1b4]>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xdc], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xe0], rdx>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<jne~~0x403d82>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<movzx~~ecx, word ptr [rsp + 0xba0]>', '<mov~~dword ptr [rsp + 0x464], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jle~~0x404298>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c8]>', '<mov~~r8d, dword ptr [rsp + 0x1d0]>', '<mov~~esi, dword ptr [rsp + 0x1d4]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x1ec]>', '<mov~~dword ptr [rsp + 0x174], r8d>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<xor~~edi, edi>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~dword ptr [rsp + 0x18c], esi>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<mov~~edx, dword ptr [rsp + 0x218]>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~r8d, dword ptr [rsp + 0x18c]>', '<mov~~r9, qword ptr [rsp + 0x190]>', '<mov~~rsi, qword ptr [rsp + 0x198]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<mov~~qword ptr [rsp + 0x158], r9>', '<mov~~dword ptr [rsp + 0x164], r8d>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x56ec]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x270], rax>', '<jl~~0x404260>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x474]>', '<mov~~eax, dword ptr [rsp + 0x45c]>', '<mov~~edx, dword ptr [rsp + 0x55c]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x440], rdx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x448], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x454], ecx>', '<mov~~dword ptr [rsp + 0x458], eax>', '<mov~~esi, dword ptr [rsp + 0x514]>', '<mov~~edx, dword ptr [rsp + 0x580]>', '<mov~~ecx, dword ptr [rsp + 0x450]>', '<mov~~edi, dword ptr [rsp + 0x454]>', '<mov~~eax, dword ptr [rsp + 0x458]>', '<mov~~dword ptr [rsp + 0x430], edi>', '<mov~~dword ptr [rsp + 0x434], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x42c], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x430]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x434]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x438], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x43c], eax>', '<jle~~0x4032ef>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x368]>', '<mov~~rdx, qword ptr [rsp + 0x2f0]>', '<mov~~eax, dword ptr [rsp + 0x2fc]>', '<mov~~dword ptr [rsp + 0x268], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x26c], ecx>', '<lea~~rax, [rip + 0x5aaf]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x404260>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x47e]>', '<mov~~byte ptr [rsp + 0x47f], al>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~r10, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~sil, byte ptr [rsp + 0x47f]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x588]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~r8, qword ptr [rsp + 0x200]>', '<mov~~edi, dword ptr [rsp + 0xc8]>', '<mov~~esi, dword ptr [rsp + 0x114]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xbc]>', '<mov~~qword ptr [rsp + 0x88], rax>', '<add~~ecx, esi>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<neg~~edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<jne~~0x403ef9>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x41c]>', '<mov~~rcx, qword ptr [rsp + 0x420]>', '<mov~~eax, dword ptr [rsp + 0x428]>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x3f0], rcx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<je~~0x4032de>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x348]>', '<mov~~r9, qword ptr [rsp + 0x340]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~r10, qword ptr [rsp + 0x178]>', '<mov~~ebx, dword ptr [rsp + 0x164]>', '<mov~~bpl, byte ptr [rsp + 0x337]>', '<mov~~r14d, dword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~ecx, dword ptr [rsp + 0x6c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~dword ptr [rsp + 0x64], esi>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~dword ptr [rsp + 0x18c], esi>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jl~~0x403b36>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3f8]>', '<mov~~rcx, qword ptr [rsp + 0x3f0]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x3e8]>', '<mov~~r10b, byte ptr [rsp + 0x463]>', '<mov~~r11d, dword ptr [rsp + 0x464]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3d8], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3f0], rcx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jl~~0x403250>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x218]>', '<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rsi, qword ptr [rsp + 0x200]>', '<mov~~rdi, qword ptr [rsp + 0x1f8]>', '<mov~~r8, qword ptr [rsp + 0x38]>', '<mov~~r9d, dword ptr [rsp + 0x2e4]>', '<mov~~r11, qword ptr [rsp + 0x2d0]>', '<mov~~r10, qword ptr [rsp + 0x370]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x358], r11>', '<mov~~dword ptr [rsp + 0x360], r10d>', '<mov~~dword ptr [rsp + 0x364], r9d>', '<mov~~qword ptr [rsp + 0x298], r8>', '<mov~~qword ptr [rsp + 0x290], rdi>', '<mov~~qword ptr [rsp + 0x288], rsi>', '<mov~~qword ptr [rsp + 0x280], rdx>', '<mov~~dword ptr [rsp + 0x27c], ecx>', '<mov~~dword ptr [rsp + 0x278], eax>', '<jl~~0x40363f>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~dword ptr [rsp + 0x148], eax>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~esi, dword ptr [rsp + 0x148]>', '<mov~~dword ptr [rsp + 0xfc], esi>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0x110], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0x114], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jge~~0x403fbe>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x61f9]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xba0], ax>', '<mov~~al, byte ptr [rsi]>', '<mov~~byte ptr [rsp + rcx*8 + 0xba2], al>', '<mov~~rax, rcx>', '<or~~rax, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 1]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rax, rcx>', '<or~~rax, 2>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~dx, ax>', '<mov~~word ptr [rsp + rax*8 + 0xba0], dx>', '<mov~~dl, byte ptr [rsi + 2]>', '<mov~~byte ptr [rsp + rax*8 + 0xba2], dl>', '<mov~~rdx, rcx>', '<or~~rdx, 3>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~ax, dx>', '<mov~~word ptr [rsp + rdx*8 + 0xba0], ax>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~sil, byte ptr [rsi + 3]>', '<mov~~byte ptr [rsp + rdx*8 + 0xba2], sil>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x538], rcx>', '<mov~~qword ptr [rsp + 0x540], rax>', '<jne~~0x402cb4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4e7]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jbe~~0x402dd0>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x514]>', '<mov~~edx, dword ptr [rsp + 0x580]>', '<mov~~ecx, dword ptr [rsp + 0x450]>', '<mov~~edi, dword ptr [rsp + 0x454]>', '<mov~~eax, dword ptr [rsp + 0x458]>', '<mov~~dword ptr [rsp + 0x430], edi>', '<mov~~dword ptr [rsp + 0x434], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x42c], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x430]>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x434]>', '<and~~ecx, esi>', '<mov~~dword ptr [rsp + 0x438], ecx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x43c], eax>', '<jle~~0x4032ef>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x3d0]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<mov~~rdi, qword ptr [rsp + 0x3c0]>', '<mov~~r10b, byte ptr [rsp + 0x463]>', '<mov~~r11d, dword ptr [rsp + 0x464]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x3a4], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x3a8], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~dword ptr [rsp + 0x3d0], eax>', '<jl~~0x403365>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x13a0>', '<mov~~dword ptr [rsp + 0x54c], r9d>', '<mov~~qword ptr [rsp + 0x550], r8>', '<mov~~dword ptr [rsp + 0x55c], ecx>', '<mov~~qword ptr [rsp + 0x560], rdx>', '<mov~~qword ptr [rsp + 0x568], rdi>', '<mov~~eax, dword ptr [rsp + 0x13d0]>', '<mov~~dword ptr [rsp + 0x574], eax>', '<mov~~rax, qword ptr [rsp + 0x13c8]>', '<mov~~qword ptr [rsp + 0x578], rax>', '<mov~~eax, dword ptr [rsp + 0x13c0]>', '<mov~~dword ptr [rsp + 0x580], eax>', '<lea~~rax, [rsp + 0x588]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x584], eax>', '<jne~~0x402c4c>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x574]>', '<mov~~edx, dword ptr [rsp + 0x55c]>', '<mov~~ecx, dword ptr [rsp + 0x54c]>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x45c], ecx>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x463], al>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x478], eax>', '<jle~~0x404298>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x368], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x378], eax>', '<cmp~~eax, 0>', '<jle~~0x404248>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~dword ptr [rsp + 0x124], esi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~dword ptr [rsp + 0x130], ecx>', '<mov~~dword ptr [rsp + 0x134], eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~edi, dword ptr [rsp + 0x130]>', '<mov~~ecx, dword ptr [rsp + 0x134]>', '<mov~~dword ptr [rsp + 0x68], ecx>', '<mov~~dword ptr [rsp + 0x6c], edi>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<lea~~rax, [rip + 0x52ad]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x270], rax>', '<jl~~0x404260>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~rdi, qword ptr [rsp + 0x300]>', '<mov~~ecx, dword ptr [rsp + 0x2cc]>', '<mov~~rsi, qword ptr [rsp + 0x368]>', '<mov~~edx, dword ptr [rsp + 0x268]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x230], rdx>', '<call~~0x500078>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2c8]>', '<mov~~edi, dword ptr [rsp + 0x2e4]>', '<mov~~r8d, dword ptr [rsp + 0x240]>', '<mov~~edx, dword ptr [rsp + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~r9, qword ptr [rsp + 0x250]>', '<mov~~r10, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<mov~~qword ptr [rsp + 0x1f8], r10>', '<mov~~qword ptr [rsp + 0x200], r9>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<mov~~qword ptr [rsp + 0x228], rax>', '<jge~~0x40414d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~al, byte ptr [rsp + 0x4cd]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x4a4], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x4a4]>', '<mov~~dword ptr [rsp + rdx*4 + 0x7a0], esi>', '<mov~~byte ptr [rsp + rdx + 0x6a0], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xba0]>', '<mov~~byte ptr [rsp + rdx + 0x5a0], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x4a8], rdx>', '<mov~~dword ptr [rsp + 0x4b4], ecx>', '<mov~~dword ptr [rsp + 0x4b8], eax>', '<jle~~0x402f77>']}, {'block_Idx': 36, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x403516>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2d0], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<mov~~dword ptr [rsp + 0x2fc], eax>', '<je~~0x40376e>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~edi, dword ptr [rsp + 0x130]>', '<mov~~ecx, dword ptr [rsp + 0x134]>', '<mov~~dword ptr [rsp + 0x68], ecx>', '<mov~~dword ptr [rsp + 0x6c], edi>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<lea~~rax, [rip + 0x52ad]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x270], rax>', '<jl~~0x404260>']}], 'cfg_edge_info': [(38, 23), (21, 16), (70, 73), (46, 48), (39, 42), (64, 41), (83, 76), (11, 14), (66, 69), (76, 79), (13, 17), (7, 10), (72, 75), (25, 25), (18, 19), (44, 47), (8, 11), (57, 59), (17, 23), (2, 4), (27, 36), (47, 48), (73, 76), (35, 37), (23, 29), (74, 77), (67, 47), (71, 72), (59, 61), (60, 62), (28, 9), (77, 78), (14, 19), (31, 35), (0, 2), (75, 78), (1, 3), (19, 27), (83, 48), (45, 9), (3, 3), (29, 22), (12, 15), (40, 31), (39, 41), (13, 16), (30, 29), (7, 9), (72, 74), (16, 21), (82, 76), (56, 57), (22, 9), (58, 60), (77, 73), (46, 49), (61, 65), (78, 81), (57, 58), (75, 73), (66, 70), (73, 48), (37, 37), (4, 6), (26, 36), (69, 71), (79, 48), (34, 34), (79, 66), (67, 46), (11, 11), (25, 19), (47, 49), (6, 8), (18, 25), (38, 40), (14, 18), (70, 72), (36, 15), (23, 30), (19, 26), (62, 61), (71, 73), (29, 21), (21, 17), (60, 63), (44, 46), (82, 48), (1, 4), (2, 3), (76, 80), (3, 4), (61, 64), (8, 12), (10, 9), (65, 64), (17, 24), (30, 30), (56, 58), (41, 45), (80, 61), (58, 61), (59, 60), (35, 38), (52, 54), (42, 44), (78, 82), (0, 1), (31, 34), (63, 48), (36, 39), (37, 38), (63, 66), (6, 7), (24, 31), (15, 28), (64, 67), (80, 63), (81, 83), (48, 52), (10, 13), (34, 35)], 'cdg_edge_info': [(59, 64), (46, 48), (8, 9), (39, 42), (64, 41), (83, 76), (63, 52), (76, 79), (13, 17), (7, 10), (25, 25), (72, 75), (44, 47), (36, 9), (8, 11), (39, 44), (57, 59), (66, 71), (63, 54), (47, 48), (72, 77), (64, 9), (35, 37), (46, 52), (57, 61), (67, 47), (71, 72), (59, 61), (77, 78), (0, 2), (46, 54), (75, 78), (1, 3), (19, 27), (13, 23), (8, 36), (47, 52), (56, 64), (83, 48), (3, 3), (60, 64), (39, 41), (82, 76), (47, 54), (56, 57), (46, 49), (61, 65), (21, 29), (66, 70), (64, 45), (37, 37), (39, 9), (83, 52), (38, 38), (78, 83), (79, 48), (49, 56), (8, 15), (34, 34), (79, 66), (67, 46), (11, 11), (47, 49), (56, 61), (6, 8), (83, 54), (38, 31), (80, 64), (60, 61), (18, 25), (14, 18), (70, 72), (36, 15), (23, 30), (19, 26), (17, 38), (29, 21), (21, 17), (60, 63), (44, 46), (79, 52), (82, 48), (2, 3), (8, 19), (17, 31), (8, 28), (76, 80), (38, 35), (79, 54), (8, 12), (36, 28), (39, 45), (17, 24), (30, 30), (13, 29), (80, 61), (59, 60), (78, 82), (0, 1), (31, 34), (8, 14), (82, 52), (63, 48), (36, 39), (17, 35), (63, 66), (6, 7), (64, 67), (80, 63), (21, 23), (82, 54), (10, 13), (57, 64), (6, 9)], 'ddg_edge_info': [(38, 23), (10, 34), (42, 48), (70, 64), (59, 64), (1, 49), (70, 82), (71, 47), (39, 42), (83, 76), (31, 38), (76, 70), (11, 14), (60, 83), (4, 30), (76, 79), (3, 49), (1, 15), (70, 48), (72, 75), (80, 67), (59, 66), (3, 6), (7, 37), (10, 54), (70, 75), (3, 15), (77, 83), (71, 49), (8, 11), (0, 7), (2, 4), (4, 23), (17, 23), (57, 59), (66, 71), (27, 36), (18, 67), (47, 48), (72, 77), (13, 37), (35, 37), (7, 30), (76, 47), (65, 47), (70, 77), (76, 65), (83, 80), (4, 25), (29, 54), (4, 34), (64, 48), (67, 47), (13, 21), (79, 76), (71, 72), (13, 30), (27, 47), (2, 27), (59, 61), (0, 39), (65, 49), (76, 49), (77, 78), (0, 2), (31, 35), (60, 71), (4, 18), (65, 67), (4, 27), (1, 3), (67, 49), (19, 27), (71, 65), (4, 54), (19, 36), (27, 49), (71, 83), (83, 48), (1, 39), (63, 79), (42, 47), (82, 83), (3, 67), (4, 11), (27, 15), (4, 29), (4, 38), (30, 29), (70, 47), (27, 42), (56, 57), (42, 49), (60, 66), (4, 13), (21, 29), (61, 65), (77, 82), (4, 31), (1, 7), (11, 18), (70, 49), (76, 83), (56, 59), (10, 37), (71, 78), (3, 7), (4, 6), (0, 54), (4, 15), (78, 83), (79, 48), (60, 77), (59, 79), (4, 24), (15, 54), (64, 47), (79, 66), (47, 49), (10, 30), (6, 8), (0, 38), (28, 54), (63, 76), (65, 48), (76, 48), (38, 31), (60, 61), (18, 25), (4, 8), (4, 17), (1, 48), (59, 72), (27, 67), (7, 34), (23, 30), (75, 77), (1, 2), (0, 4), (4, 35), (64, 49), (0, 13), (25, 67), (71, 64), (27, 39), (3, 39), (45, 54), (3, 48), (71, 82), (65, 41), (29, 21), (21, 17), (13, 34), (60, 63), (70, 65), (4, 10), (60, 72), (18, 36), (4, 19), (42, 67), (70, 83), (34, 29), (71, 48), (2, 3), (7, 54), (76, 71), (79, 70), (2, 67), (0, 15), (76, 80), (2, 21), (71, 75), (63, 80), (0, 42), (7, 29), (61, 64), (4, 21), (19, 67), (65, 64), (76, 64), (17, 24), (0, 17), (56, 49), (76, 82), (71, 77), (0, 35), (7, 13), (41, 45), (80, 61), (72, 78), (59, 60), (35, 38), (41, 54), (52, 54), (24, 38), (4, 14), (78, 82), (59, 78), (0, 1), (31, 34), (39, 47), (0, 10), (37, 29), (14, 27), (76, 75), (3, 36), (37, 38), (11, 19), (71, 70), (27, 48), (15, 28), (80, 63), (24, 31), (64, 67), (1, 29), (4, 7), (70, 71), (1, 47), (59, 80), (0, 3), (34, 35), (39, 49), (0, 67), (3, 29), (48, 52), (10, 13), (76, 77), (11, 67), (0, 21), (4, 37), (3, 47), (27, 41)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x588(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x584(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x584(%rsp)                # 4-byte Spill'}, {'instIndex': 92, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 193, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 194, 'instruction': 'je\t.LBB3_28'}, {'instIndex': 196, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 197, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 198, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 199, 'instruction': 'movb\t$0, %al'}, {'instIndex': 200, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utvideodec.c
Patched function: 1---static int decode_plane 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/Os/utvideodec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/Os/utvideodec.s---decode_plane---before
function id: 3
function flag: True
There are 905 instructions for function: decode_plane in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '248', 'end': 254}, 'before': {'start': '238', 'end': 244}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x4e8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x4e4(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x4e4(%rsp)                # 4-byte Spill'}, {'instIndex': 71, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 172, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 173, 'instruction': 'je\t.LBB3_22'}, {'instIndex': 175, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 176, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 177, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 178, 'instruction': 'movb\t$0, %al'}, {'instIndex': 179, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/Os/utvideodec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/Os/utvideodec.o---before
The extraction of function: decode_plane
Analyzing the binaries to generate subCFGs from patched function ...
It has 519 nodes and 909 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 905 instructions in binary file.
[4201834, 4201953, 4202259, 4202848, 4202857]
The execution time of patched subCFG information extraction via angr: 0:00:02.064856
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401d6a>, <DisassemblerInsn "push" for 0x401d6b>, <DisassemblerInsn "push" for 0x401d6d>, <DisassemblerInsn "sub" for 0x401d6e>, <DisassemblerInsn "mov" for 0x401d75>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8c>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da3>, <DisassemblerInsn "mov" for 0x401daa>, <DisassemblerInsn "mov" for 0x401db2>, <DisassemblerInsn "mov" for 0x401dba>, <DisassemblerInsn "mov" for 0x401dc1>, <DisassemblerInsn "lea" for 0x401dc8>, <DisassemblerInsn "mov" for 0x401dd0>, <DisassemblerInsn "cmp" for 0x401dd5>, <DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "jne" for 0x401ddf>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de1>, <DisassemblerInsn "mov" for 0x401de9>, <DisassemblerInsn "cmp" for 0x401ded>, <DisassemblerInsn "sete" for 0x401df4>, <DisassemblerInsn "and" for 0x401df7>, <DisassemblerInsn "movzx" for 0x401df9>, <DisassemblerInsn "xor" for 0x401dfc>, <DisassemblerInsn "mov" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e06>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "mov" for 0x401e15>, <DisassemblerInsn "lea" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "lea" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e34>, <DisassemblerInsn "lea" for 0x401e3c>, <DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "lea" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "xor" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402188>, <DisassemblerInsn "mov" for 0x40218d>, <DisassemblerInsn "jmp" for 0x402194>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e06>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "mov" for 0x401e15>, <DisassemblerInsn "lea" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "lea" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e34>, <DisassemblerInsn "lea" for 0x401e3c>, <DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "lea" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "xor" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f13>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "mov" for 0x401f01>, <DisassemblerInsn "cmp" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "jbe" for 0x401f11>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "mov" for 0x402175>, <DisassemblerInsn "lea" for 0x40217a>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "call" for 0x402183>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x402100>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "movzx" for 0x40210f>, <DisassemblerInsn "add" for 0x402113>, <DisassemblerInsn "lea" for 0x402116>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "xor" for 0x402124>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "mov" for 0x402136>, <DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "call" for 0x40215b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402160>, <DisassemblerInsn "je" for 0x402163>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "mov" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x402100>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "movzx" for 0x40210f>, <DisassemblerInsn "add" for 0x402113>, <DisassemblerInsn "lea" for 0x402116>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "xor" for 0x402124>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "mov" for 0x402136>, <DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "call" for 0x40215b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402455>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "add" for 0x402465>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "add" for 0x402477>, <DisassemblerInsn "mov" for 0x40247b>, <DisassemblerInsn "mov" for 0x402483>, <DisassemblerInsn "mov" for 0x402486>, <DisassemblerInsn "cmp" for 0x40248d>, <DisassemblerInsn "jle" for 0x402490>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401ed8>, <DisassemblerInsn "call" for 0x401edf>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1300>', '<mov~~dword ptr [rsp + 0x4ac], r9d>', '<mov~~qword ptr [rsp + 0x4b0], r8>', '<mov~~dword ptr [rsp + 0x4bc], ecx>', '<mov~~qword ptr [rsp + 0x4c0], rdx>', '<mov~~qword ptr [rsp + 0x4c8], rdi>', '<mov~~eax, dword ptr [rsp + 0x1330]>', '<mov~~dword ptr [rsp + 0x4d4], eax>', '<mov~~rax, qword ptr [rsp + 0x1328]>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~eax, dword ptr [rsp + 0x1320]>', '<mov~~dword ptr [rsp + 0x4e0], eax>', '<lea~~rax, [rsp + 0x4e8]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x4e4], eax>', '<jne~~0x401e06>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4e4], eax>', '<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~ecx, dword ptr [rsp + 0x4e4]>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<lea~~rcx, [rsp + 0xb00]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<lea~~rcx, [rsp + 0x700]>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<lea~~rcx, [rsp + 0x600]>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<lea~~rcx, [rsp + 0x500]>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jmp~~0x40319f>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~ecx, dword ptr [rsp + 0x4e4]>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<lea~~rcx, [rsp + 0xb00]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<lea~~rcx, [rsp + 0x700]>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<lea~~rcx, [rsp + 0x600]>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<lea~~rcx, [rsp + 0x500]>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x402169>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x45f]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x450], rax>', '<jbe~~0x401f18>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x49e2]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r10, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x434]>', '<mov~~sil, byte ptr [rsp + 0x3f7]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4e8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x402455>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3f6]>', '<mov~~byte ptr [rsp + 0x3f7], al>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r10, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x434]>', '<mov~~sil, byte ptr [rsp + 0x3f7]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4e8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x360], eax>', '<cmp~~eax, 0>', '<jle~~0x40314f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x478]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe181]>', '<call~~0x500068>']}], 'cfg_edge_info': [(0, 1), (26, 14), (23, 26), (1, 4), (7, 11), (0, 2), (22, 26), (26, 29), (14, 19), (11, 14), (1, 3)]}]}
{'decode_plane': [4201834, 4201953, 4202259, 4202848, 4202857]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7c25523cc8e618e77dc84d960e41e9644eaf8c33/clang_before/Os/utvideodec.o---before
The extraction of function: decode_plane
[4201834, 4201953, 4202259, 4202848, 4202857]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 79 nodes and 131 edges in CFGEmulated.
It has 77 nodes and 143 edges in CDG.
It has 4021 nodes and 5073 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201834, 4201953, 4202259, 4202848, 4202857]
{4202371, 4201990, 4203527, 4202888, 4206982, 4202259, 4206995, 4203156, 4203670, 4204154, 4202264, 4202905, 4206099, 4206747, 4205596, 4205979, 4207007, 4206370, 4204067, 4205730, 4204205, 4205359, 4203314, 4204342, 4206524, 4206781, 4202687, 4204867, 4202182, 4203080, 4206927, 4205438, 4206676, 4203605, 4205142, 4205269, 4204633, 4202714, 4202971, 4206940, 4206171, 4205021, 4202848, 4201953, 4202212, 4203385, 4206951, 4202728, 4202857, 4201834, 4202347, 4202094, 4204271, 4202483, 4205811, 4203254, 4204409, 4202234, 4203902, 4204543}
[1, 8, 58, 50, 34, 22, 68, 14, 52, 67, 64, 70, 25, 16, 75, 57, 43, 11, 7, 71, 56, 12, 74, 65, 2, 62, 76, 13, 51, 23, 72, 35, 53, 77, 42, 0, 6, 46, 54, 21, 3, 30, 41, 10, 59, 17, 69, 40, 33, 27, 4, 55, 18, 19, 31, 15, 36, 38, 60, 24, 26, 39, 9, 61, 32, 66, 48, 73]
The execution time of patched slicing information extraction via angr: 0:00:07.553010
{'decode_plane': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de1>, <DisassemblerInsn "mov" for 0x401de9>, <DisassemblerInsn "cmp" for 0x401ded>, <DisassemblerInsn "sete" for 0x401df4>, <DisassemblerInsn "and" for 0x401df7>, <DisassemblerInsn "movzx" for 0x401df9>, <DisassemblerInsn "xor" for 0x401dfc>, <DisassemblerInsn "mov" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e06>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "mov" for 0x401e15>, <DisassemblerInsn "lea" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "lea" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e34>, <DisassemblerInsn "lea" for 0x401e3c>, <DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "lea" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "xor" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "mov" for 0x401f01>, <DisassemblerInsn "cmp" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "jbe" for 0x401f11>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030bd>, <DisassemblerInsn "mov" for 0x4030c4>, <DisassemblerInsn "mov" for 0x4030c8>, <DisassemblerInsn "mov" for 0x4030cd>, <DisassemblerInsn "mov" for 0x4030d5>, <DisassemblerInsn "mov" for 0x4030dd>, <DisassemblerInsn "mov" for 0x4030e2>, <DisassemblerInsn "mov" for 0x4030ea>, <DisassemblerInsn "mov" for 0x4030f2>, <DisassemblerInsn "mov" for 0x4030fa>, <DisassemblerInsn "movsxd" for 0x4030fd>, <DisassemblerInsn "cmp" for 0x403100>, <DisassemblerInsn "mov" for 0x403103>, <DisassemblerInsn "mov" for 0x40310b>, <DisassemblerInsn "mov" for 0x403113>, <DisassemblerInsn "mov" for 0x40311b>, <DisassemblerInsn "mov" for 0x403123>, <DisassemblerInsn "mov" for 0x40312b>, <DisassemblerInsn "mov" for 0x403133>, <DisassemblerInsn "mov" for 0x40313b>, <DisassemblerInsn "mov" for 0x403142>, <DisassemblerInsn "jl" for 0x403149>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402779>, <DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "mov" for 0x402789>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402798>, <DisassemblerInsn "mov" for 0x4027a0>, <DisassemblerInsn "mov" for 0x4027a8>, <DisassemblerInsn "mov" for 0x4027b0>, <DisassemblerInsn "mov" for 0x4027b8>, <DisassemblerInsn "mov" for 0x4027bb>, <DisassemblerInsn "cmp" for 0x4027c3>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "mov" for 0x4027d9>, <DisassemblerInsn "mov" for 0x4027e1>, <DisassemblerInsn "mov" for 0x4027e9>, <DisassemblerInsn "mov" for 0x4027f1>, <DisassemblerInsn "ja" for 0x4027f9>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402455>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "add" for 0x402465>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "add" for 0x402477>, <DisassemblerInsn "mov" for 0x40247b>, <DisassemblerInsn "mov" for 0x402483>, <DisassemblerInsn "mov" for 0x402486>, <DisassemblerInsn "cmp" for 0x40248d>, <DisassemblerInsn "jle" for 0x402490>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402379>, <DisassemblerInsn "mov" for 0x402381>, <DisassemblerInsn "mov" for 0x402389>, <DisassemblerInsn "mov" for 0x402391>, <DisassemblerInsn "mov" for 0x402399>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a9>, <DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "add" for 0x4023b4>, <DisassemblerInsn "mov" for 0x4023b7>, <DisassemblerInsn "test" for 0x4023be>, <DisassemblerInsn "mov" for 0x4023c2>, <DisassemblerInsn "cmovne" for 0x4023c5>, <DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "test" for 0x4023d1>, <DisassemblerInsn "cmovne" for 0x4023d5>, <DisassemblerInsn "mov" for 0x4023d9>, <DisassemblerInsn "mov" for 0x4023e0>, <DisassemblerInsn "add" for 0x4023e4>, <DisassemblerInsn "mov" for 0x4023e7>, <DisassemblerInsn "cmp" for 0x4023ef>, <DisassemblerInsn "mov" for 0x4023f2>, <DisassemblerInsn "mov" for 0x4023fa>, <DisassemblerInsn "jl" for 0x402401>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c1c>, <DisassemblerInsn "mov" for 0x402c24>, <DisassemblerInsn "mov" for 0x402c2c>, <DisassemblerInsn "mov" for 0x402c33>, <DisassemblerInsn "mov" for 0x402c3a>, <DisassemblerInsn "mov" for 0x402c42>, <DisassemblerInsn "shl" for 0x402c4a>, <DisassemblerInsn "mov" for 0x402c4d>, <DisassemblerInsn "mov" for 0x402c54>, <DisassemblerInsn "sub" for 0x402c5c>, <DisassemblerInsn "mov" for 0x402c5e>, <DisassemblerInsn "neg" for 0x402c65>, <DisassemblerInsn "mov" for 0x402c67>, <DisassemblerInsn "mov" for 0x402c6e>, <DisassemblerInsn "sub" for 0x402c70>, <DisassemblerInsn "setb" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c76>, <DisassemblerInsn "sub" for 0x402c79>, <DisassemblerInsn "setb" for 0x402c7c>, <DisassemblerInsn "and" for 0x402c80>, <DisassemblerInsn "test" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c87>, <DisassemblerInsn "mov" for 0x402c8f>, <DisassemblerInsn "mov" for 0x402c96>, <DisassemblerInsn "jne" for 0x402c9e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "cmp" for 0x401f7a>, <DisassemblerInsn "jle" for 0x401f7d>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028b8>, <DisassemblerInsn "mov" for 0x4028bf>, <DisassemblerInsn "mov" for 0x4028c6>, <DisassemblerInsn "mov" for 0x4028ce>, <DisassemblerInsn "mov" for 0x4028d5>, <DisassemblerInsn "mov" for 0x4028dd>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "mov" for 0x4028ed>, <DisassemblerInsn "mov" for 0x4028f5>, <DisassemblerInsn "mov" for 0x4028fd>, <DisassemblerInsn "mov" for 0x402905>, <DisassemblerInsn "mov" for 0x40290d>, <DisassemblerInsn "mov" for 0x402915>, <DisassemblerInsn "mov" for 0x40291c>, <DisassemblerInsn "cmp" for 0x402924>, <DisassemblerInsn "mov" for 0x402926>, <DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "jge" for 0x40293d>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b7e>, <DisassemblerInsn "mov" for 0x402b86>, <DisassemblerInsn "mov" for 0x402b8e>, <DisassemblerInsn "mov" for 0x402b96>, <DisassemblerInsn "mov" for 0x402b9d>, <DisassemblerInsn "mov" for 0x402ba4>, <DisassemblerInsn "mov" for 0x402bac>, <DisassemblerInsn "mov" for 0x402bb4>, <DisassemblerInsn "shr" for 0x402bb7>, <DisassemblerInsn "mov" for 0x402bba>, <DisassemblerInsn "movabs" for 0x402bc2>, <DisassemblerInsn "and" for 0x402bcc>, <DisassemblerInsn "movsx" for 0x402bcf>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdb>, <DisassemblerInsn "movsx" for 0x402be1>, <DisassemblerInsn "mov" for 0x402be5>, <DisassemblerInsn "cmp" for 0x402bec>, <DisassemblerInsn "mov" for 0x402bf1>, <DisassemblerInsn "mov" for 0x402bf9>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c0f>, <DisassemblerInsn "jge" for 0x402c16>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ed>, <DisassemblerInsn "mov" for 0x4029f5>, <DisassemblerInsn "mov" for 0x4029fc>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a0c>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "xor" for 0x402a23>, <DisassemblerInsn "test" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a31>, <DisassemblerInsn "mov" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "jne" for 0x402a4f>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ca0>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "mov" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x402100>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "movzx" for 0x40210f>, <DisassemblerInsn "add" for 0x402113>, <DisassemblerInsn "lea" for 0x402116>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "xor" for 0x402124>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "mov" for 0x402136>, <DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "call" for 0x40215b>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f6>, <DisassemblerInsn "mov" for 0x4022fd>, <DisassemblerInsn "mov" for 0x402305>, <DisassemblerInsn "movsxd" for 0x40230d>, <DisassemblerInsn "imul" for 0x402310>, <DisassemblerInsn "add" for 0x402314>, <DisassemblerInsn "mov" for 0x402317>, <DisassemblerInsn "mov" for 0x40231c>, <DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232b>, <DisassemblerInsn "mov" for 0x402332>, <DisassemblerInsn "mov" for 0x402339>, <DisassemblerInsn "mov" for 0x402341>, <DisassemblerInsn "mov" for 0x402348>, <DisassemblerInsn "mov" for 0x40234f>, <DisassemblerInsn "mov" for 0x402356>, <DisassemblerInsn "xor" for 0x40235e>, <DisassemblerInsn "test" for 0x402360>, <DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "jne" for 0x402372>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402e11>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a56>, <DisassemblerInsn "mov" for 0x402a5d>, <DisassemblerInsn "mov" for 0x402a65>, <DisassemblerInsn "mov" for 0x402a6d>, <DisassemblerInsn "mov" for 0x402a75>, <DisassemblerInsn "mov" for 0x402a7d>, <DisassemblerInsn "mov" for 0x402a85>, <DisassemblerInsn "mov" for 0x402a8c>, <DisassemblerInsn "mov" for 0x402a93>, <DisassemblerInsn "mov" for 0x402a9b>, <DisassemblerInsn "mov" for 0x402aa3>, <DisassemblerInsn "mov" for 0x402aab>, <DisassemblerInsn "sub" for 0x402ab3>, <DisassemblerInsn "shl" for 0x402ab6>, <DisassemblerInsn "add" for 0x402ab9>, <DisassemblerInsn "add" for 0x402abb>, <DisassemblerInsn "lea" for 0x402abd>, <DisassemblerInsn "cmp" for 0x402ac4>, <DisassemblerInsn "mov" for 0x402ac7>, <DisassemblerInsn "jl" for 0x402acf>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f6>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402705>, <DisassemblerInsn "mov" for 0x40270d>, <DisassemblerInsn "mov" for 0x402714>, <DisassemblerInsn "movsxd" for 0x402717>, <DisassemblerInsn "add" for 0x40271a>, <DisassemblerInsn "shl" for 0x40271d>, <DisassemblerInsn "movsxd" for 0x402720>, <DisassemblerInsn "add" for 0x402723>, <DisassemblerInsn "movsxd" for 0x402726>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "call" for 0x402731>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "mov" for 0x401f20>, <DisassemblerInsn "mov" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2f>, <DisassemblerInsn "sub" for 0x401f36>, <DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "sete" for 0x401f40>, <DisassemblerInsn "test" for 0x401f43>, <DisassemblerInsn "setne" for 0x401f46>, <DisassemblerInsn "and" for 0x401f49>, <DisassemblerInsn "mov" for 0x401f4b>, <DisassemblerInsn "add" for 0x401f52>, <DisassemblerInsn "mov" for 0x401f56>, <DisassemblerInsn "test" for 0x401f5e>, <DisassemblerInsn "mov" for 0x401f61>, <DisassemblerInsn "jne" for 0x401f69>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402199>, <DisassemblerInsn "movzx" for 0x4021a1>, <DisassemblerInsn "mov" for 0x4021a9>, <DisassemblerInsn "mov" for 0x4021b0>, <DisassemblerInsn "add" for 0x4021b3>, <DisassemblerInsn "mov" for 0x4021b7>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "mov" for 0x4021c2>, <DisassemblerInsn "xor" for 0x4021c9>, <DisassemblerInsn "cmp" for 0x4021cb>, <DisassemblerInsn "mov" for 0x4021ce>, <DisassemblerInsn "jle" for 0x4021d5>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ca2>, <DisassemblerInsn "mov" for 0x402ca9>, <DisassemblerInsn "mov" for 0x402cb1>, <DisassemblerInsn "mov" for 0x402cb9>, <DisassemblerInsn "bswap" for 0x402cbb>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "mov" for 0x402cbf>, <DisassemblerInsn "sub" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc6>, <DisassemblerInsn "shl" for 0x402cc8>, <DisassemblerInsn "mov" for 0x402ccb>, <DisassemblerInsn "or" for 0x402cd2>, <DisassemblerInsn "add" for 0x402cd5>, <DisassemblerInsn "add" for 0x402cd9>, <DisassemblerInsn "mov" for 0x402cdc>, <DisassemblerInsn "mov" for 0x402ce4>, <DisassemblerInsn "mov" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cfb>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0a>, <DisassemblerInsn "mov" for 0x402d12>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "mov" for 0x402d29>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "add" for 0x402d38>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "mov" for 0x402d3d>, <DisassemblerInsn "shr" for 0x402d40>, <DisassemblerInsn "mov" for 0x402d43>, <DisassemblerInsn "add" for 0x402d46>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4b>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "movsx" for 0x402d54>, <DisassemblerInsn "mov" for 0x402d58>, <DisassemblerInsn "movsx" for 0x402d5f>, <DisassemblerInsn "mov" for 0x402d64>, <DisassemblerInsn "cmp" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "mov" for 0x402d78>, <DisassemblerInsn "mov" for 0x402d7f>, <DisassemblerInsn "mov" for 0x402d87>, <DisassemblerInsn "mov" for 0x402d8e>, <DisassemblerInsn "jge" for 0x402d95>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a51>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f13>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d9b>, <DisassemblerInsn "mov" for 0x402da3>, <DisassemblerInsn "mov" for 0x402dab>, <DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "mov" for 0x402db9>, <DisassemblerInsn "mov" for 0x402dc1>, <DisassemblerInsn "shl" for 0x402dc8>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "mov" for 0x402dd2>, <DisassemblerInsn "add" for 0x402dd7>, <DisassemblerInsn "mov" for 0x402dd9>, <DisassemblerInsn "neg" for 0x402ddd>, <DisassemblerInsn "mov" for 0x402ddf>, <DisassemblerInsn "sub" for 0x402de1>, <DisassemblerInsn "setb" for 0x402de3>, <DisassemblerInsn "mov" for 0x402de7>, <DisassemblerInsn "sub" for 0x402dea>, <DisassemblerInsn "setb" for 0x402ded>, <DisassemblerInsn "and" for 0x402df1>, <DisassemblerInsn "test" for 0x402df4>, <DisassemblerInsn "mov" for 0x402df8>, <DisassemblerInsn "mov" for 0x402e00>, <DisassemblerInsn "mov" for 0x402e07>, <DisassemblerInsn "jne" for 0x402e0f>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402b2d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e06>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "mov" for 0x401e15>, <DisassemblerInsn "lea" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e24>, <DisassemblerInsn "lea" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e34>, <DisassemblerInsn "lea" for 0x401e3c>, <DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "lea" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e54>, <DisassemblerInsn "xor" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40257e>, <DisassemblerInsn "mov" for 0x402586>, <DisassemblerInsn "mov" for 0x40258e>, <DisassemblerInsn "mov" for 0x402595>, <DisassemblerInsn "mov" for 0x40259d>, <DisassemblerInsn "mov" for 0x4025a4>, <DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025cb>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025da>, <DisassemblerInsn "mov" for 0x4025e2>, <DisassemblerInsn "mov" for 0x4025e9>, <DisassemblerInsn "mov" for 0x4025f1>, <DisassemblerInsn "mov" for 0x4025f9>, <DisassemblerInsn "mov" for 0x402601>, <DisassemblerInsn "mov" for 0x402609>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "mov" for 0x402617>, <DisassemblerInsn "add" for 0x40261f>, <DisassemblerInsn "mov" for 0x402623>, <DisassemblerInsn "imul" for 0x40262b>, <DisassemblerInsn "cdq" for 0x40262e>, <DisassemblerInsn "idiv" for 0x40262f>, <DisassemblerInsn "mov" for 0x402631>, <DisassemblerInsn "mov" for 0x402639>, <DisassemblerInsn "mov" for 0x40263b>, <DisassemblerInsn "and" for 0x402643>, <DisassemblerInsn "mov" for 0x402646>, <DisassemblerInsn "movsxd" for 0x40264d>, <DisassemblerInsn "imul" for 0x402650>, <DisassemblerInsn "add" for 0x402654>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "xor" for 0x40265f>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "xor" for 0x402663>, <DisassemblerInsn "cmp" for 0x402665>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "je" for 0x402678>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e13>, <DisassemblerInsn "mov" for 0x402e17>, <DisassemblerInsn "mov" for 0x402e1f>, <DisassemblerInsn "mov" for 0x402e24>, <DisassemblerInsn "bswap" for 0x402e26>, <DisassemblerInsn "mov" for 0x402e28>, <DisassemblerInsn "mov" for 0x402e2a>, <DisassemblerInsn "sub" for 0x402e2f>, <DisassemblerInsn "mov" for 0x402e31>, <DisassemblerInsn "shl" for 0x402e33>, <DisassemblerInsn "mov" for 0x402e36>, <DisassemblerInsn "or" for 0x402e3a>, <DisassemblerInsn "add" for 0x402e3d>, <DisassemblerInsn "add" for 0x402e41>, <DisassemblerInsn "mov" for 0x402e44>, <DisassemblerInsn "mov" for 0x402e4c>, <DisassemblerInsn "mov" for 0x402e53>, <DisassemblerInsn "mov" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e63>, <DisassemblerInsn "mov" for 0x402e6b>, <DisassemblerInsn "mov" for 0x402e72>, <DisassemblerInsn "mov" for 0x402e7a>, <DisassemblerInsn "mov" for 0x402e81>, <DisassemblerInsn "add" for 0x402e89>, <DisassemblerInsn "mov" for 0x402e8c>, <DisassemblerInsn "mov" for 0x402e8e>, <DisassemblerInsn "shr" for 0x402e91>, <DisassemblerInsn "mov" for 0x402e94>, <DisassemblerInsn "add" for 0x402e97>, <DisassemblerInsn "mov" for 0x402e9a>, <DisassemblerInsn "mov" for 0x402e9c>, <DisassemblerInsn "movsx" for 0x402e9f>, <DisassemblerInsn "movsx" for 0x402ea5>, <DisassemblerInsn "mov" for 0x402eaa>, <DisassemblerInsn "mov" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb9>, <DisassemblerInsn "mov" for 0x402ec1>, <DisassemblerInsn "mov" for 0x402ec8>, <DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "mov" for 0x402ed7>, <DisassemblerInsn "mov" for 0x402ede>, <DisassemblerInsn "mov" for 0x402ee6>, <DisassemblerInsn "mov" for 0x402eed>, <DisassemblerInsn "mov" for 0x402ef4>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f05>, <DisassemblerInsn "lea" for 0x402f0a>, <DisassemblerInsn "cmp" for 0x402f11>, <DisassemblerInsn "mov" for 0x402f14>, <DisassemblerInsn "jl" for 0x402f1c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402294>, <DisassemblerInsn "mov" for 0x40229b>, <DisassemblerInsn "mov" for 0x4022a2>, <DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "mov" for 0x4022b0>, <DisassemblerInsn "mov" for 0x4022b7>, <DisassemblerInsn "mov" for 0x4022be>, <DisassemblerInsn "add" for 0x4022c5>, <DisassemblerInsn "mov" for 0x4022c8>, <DisassemblerInsn "imul" for 0x4022cf>, <DisassemblerInsn "cdq" for 0x4022d2>, <DisassemblerInsn "idiv" for 0x4022d3>, <DisassemblerInsn "mov" for 0x4022d5>, <DisassemblerInsn "mov" for 0x4022d7>, <DisassemblerInsn "and" for 0x4022de>, <DisassemblerInsn "mov" for 0x4022e0>, <DisassemblerInsn "cmp" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022e9>, <DisassemblerInsn "jge" for 0x4022f0>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027ff>, <DisassemblerInsn "mov" for 0x402807>, <DisassemblerInsn "mov" for 0x40280f>, <DisassemblerInsn "mov" for 0x402816>, <DisassemblerInsn "xor" for 0x40281e>, <DisassemblerInsn "xor" for 0x402820>, <DisassemblerInsn "cmp" for 0x402822>, <DisassemblerInsn "mov" for 0x402826>, <DisassemblerInsn "mov" for 0x40282d>, <DisassemblerInsn "mov" for 0x402834>, <DisassemblerInsn "mov" for 0x402837>, <DisassemblerInsn "mov" for 0x40283f>, <DisassemblerInsn "mov" for 0x402847>, <DisassemblerInsn "mov" for 0x40284f>, <DisassemblerInsn "je" for 0x402857>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff3>, <DisassemblerInsn "mov" for 0x401ffa>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "mov" for 0x402009>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "add" for 0x402013>, <DisassemblerInsn "mov" for 0x402017>, <DisassemblerInsn "add" for 0x40201f>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "shr" for 0x40202e>, <DisassemblerInsn "mov" for 0x402030>, <DisassemblerInsn "mov" for 0x402037>, <DisassemblerInsn "add" for 0x40203e>, <DisassemblerInsn "mov" for 0x402040>, <DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "movzx" for 0x40204f>, <DisassemblerInsn "mov" for 0x402053>, <DisassemblerInsn "mov" for 0x40205b>, <DisassemblerInsn "sub" for 0x402060>, <DisassemblerInsn "mov" for 0x402063>, <DisassemblerInsn "mov" for 0x40206a>, <DisassemblerInsn "shr" for 0x40206d>, <DisassemblerInsn "mov" for 0x402070>, <DisassemblerInsn "mov" for 0x402077>, <DisassemblerInsn "mov" for 0x40207f>, <DisassemblerInsn "mov" for 0x402087>, <DisassemblerInsn "mov" for 0x40208f>, <DisassemblerInsn "mov" for 0x402097>, <DisassemblerInsn "cmp" for 0x40209f>, <DisassemblerInsn "mov" for 0x4020a3>, <DisassemblerInsn "mov" for 0x4020ab>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "ja" for 0x4020b9>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f22>, <DisassemblerInsn "mov" for 0x402f2a>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "mov" for 0x402f3a>, <DisassemblerInsn "mov" for 0x402f42>, <DisassemblerInsn "mov" for 0x402f49>, <DisassemblerInsn "mov" for 0x402f51>, <DisassemblerInsn "mov" for 0x402f56>, <DisassemblerInsn "mov" for 0x402f5b>, <DisassemblerInsn "mov" for 0x402f5f>, <DisassemblerInsn "sub" for 0x402f63>, <DisassemblerInsn "mov" for 0x402f65>, <DisassemblerInsn "shl" for 0x402f67>, <DisassemblerInsn "mov" for 0x402f6a>, <DisassemblerInsn "mov" for 0x402f6f>, <DisassemblerInsn "add" for 0x402f72>, <DisassemblerInsn "test" for 0x402f74>, <DisassemblerInsn "mov" for 0x402f78>, <DisassemblerInsn "cmovne" for 0x402f7b>, <DisassemblerInsn "test" for 0x402f7f>, <DisassemblerInsn "cmovne" for 0x402f83>, <DisassemblerInsn "mov" for 0x402f86>, <DisassemblerInsn "add" for 0x402f8a>, <DisassemblerInsn "cmp" for 0x402f8d>, <DisassemblerInsn "mov" for 0x402f90>, <DisassemblerInsn "mov" for 0x402f98>, <DisassemblerInsn "mov" for 0x402f9f>, <DisassemblerInsn "mov" for 0x402fa7>, <DisassemblerInsn "mov" for 0x402faf>, <DisassemblerInsn "jl" for 0x402fb6>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40314f>, <DisassemblerInsn "call" for 0x403157>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402859>, <DisassemblerInsn "mov" for 0x402861>, <DisassemblerInsn "mov" for 0x402868>, <DisassemblerInsn "shl" for 0x40286b>, <DisassemblerInsn "mov" for 0x40286f>, <DisassemblerInsn "mov" for 0x402871>, <DisassemblerInsn "add" for 0x402874>, <DisassemblerInsn "mov" for 0x402877>, <DisassemblerInsn "bswap" for 0x40287a>, <DisassemblerInsn "mov" for 0x40287d>, <DisassemblerInsn "add" for 0x402880>, <DisassemblerInsn "mov" for 0x402884>, <DisassemblerInsn "mov" for 0x402889>, <DisassemblerInsn "mov" for 0x402891>, <DisassemblerInsn "mov" for 0x402898>, <DisassemblerInsn "mov" for 0x4028a0>, <DisassemblerInsn "mov" for 0x4028a8>, <DisassemblerInsn "mov" for 0x4028b0>, <DisassemblerInsn "mov" for 0x4028b8>, <DisassemblerInsn "mov" for 0x4028bf>, <DisassemblerInsn "mov" for 0x4028c6>, <DisassemblerInsn "mov" for 0x4028ce>, <DisassemblerInsn "mov" for 0x4028d5>, <DisassemblerInsn "mov" for 0x4028dd>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "mov" for 0x4028ed>, <DisassemblerInsn "mov" for 0x4028f5>, <DisassemblerInsn "mov" for 0x4028fd>, <DisassemblerInsn "mov" for 0x402905>, <DisassemblerInsn "mov" for 0x40290d>, <DisassemblerInsn "mov" for 0x402915>, <DisassemblerInsn "mov" for 0x40291c>, <DisassemblerInsn "cmp" for 0x402924>, <DisassemblerInsn "mov" for 0x402926>, <DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "jge" for 0x40293d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e63>, <DisassemblerInsn "mov" for 0x402e6b>, <DisassemblerInsn "mov" for 0x402e72>, <DisassemblerInsn "mov" for 0x402e7a>, <DisassemblerInsn "mov" for 0x402e81>, <DisassemblerInsn "add" for 0x402e89>, <DisassemblerInsn "mov" for 0x402e8c>, <DisassemblerInsn "mov" for 0x402e8e>, <DisassemblerInsn "shr" for 0x402e91>, <DisassemblerInsn "mov" for 0x402e94>, <DisassemblerInsn "add" for 0x402e97>, <DisassemblerInsn "mov" for 0x402e9a>, <DisassemblerInsn "mov" for 0x402e9c>, <DisassemblerInsn "movsx" for 0x402e9f>, <DisassemblerInsn "movsx" for 0x402ea5>, <DisassemblerInsn "mov" for 0x402eaa>, <DisassemblerInsn "mov" for 0x402eb2>, <DisassemblerInsn "mov" for 0x402eb9>, <DisassemblerInsn "mov" for 0x402ec1>, <DisassemblerInsn "mov" for 0x402ec8>, <DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "mov" for 0x402ed7>, <DisassemblerInsn "mov" for 0x402ede>, <DisassemblerInsn "mov" for 0x402ee6>, <DisassemblerInsn "mov" for 0x402eed>, <DisassemblerInsn "mov" for 0x402ef4>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f05>, <DisassemblerInsn "lea" for 0x402f0a>, <DisassemblerInsn "cmp" for 0x402f11>, <DisassemblerInsn "mov" for 0x402f14>, <DisassemblerInsn "jl" for 0x402f1c>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403167>, <DisassemblerInsn "mov" for 0x40316f>, <DisassemblerInsn "mov" for 0x403177>, <DisassemblerInsn "mov" for 0x40317a>, <DisassemblerInsn "mov" for 0x40317f>, <DisassemblerInsn "call" for 0x403181>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401d6a>, <DisassemblerInsn "push" for 0x401d6b>, <DisassemblerInsn "push" for 0x401d6d>, <DisassemblerInsn "sub" for 0x401d6e>, <DisassemblerInsn "mov" for 0x401d75>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8c>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da3>, <DisassemblerInsn "mov" for 0x401daa>, <DisassemblerInsn "mov" for 0x401db2>, <DisassemblerInsn "mov" for 0x401dba>, <DisassemblerInsn "mov" for 0x401dc1>, <DisassemblerInsn "lea" for 0x401dc8>, <DisassemblerInsn "mov" for 0x401dd0>, <DisassemblerInsn "cmp" for 0x401dd5>, <DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "jne" for 0x401ddf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401eeb>, <DisassemblerInsn "cmp" for 0x401ef2>, <DisassemblerInsn "je" for 0x401ef4>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403186>, <DisassemblerInsn "call" for 0x40318e>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402943>, <DisassemblerInsn "mov" for 0x40294a>, <DisassemblerInsn "mov" for 0x402952>, <DisassemblerInsn "mov" for 0x40295a>, <DisassemblerInsn "mov" for 0x402961>, <DisassemblerInsn "mov" for 0x402969>, <DisassemblerInsn "mov" for 0x402971>, <DisassemblerInsn "mov" for 0x402979>, <DisassemblerInsn "mov" for 0x40297c>, <DisassemblerInsn "mov" for 0x402984>, <DisassemblerInsn "mov" for 0x402986>, <DisassemblerInsn "mov" for 0x40298d>, <DisassemblerInsn "sub" for 0x402993>, <DisassemblerInsn "mov" for 0x402996>, <DisassemblerInsn "mov" for 0x402999>, <DisassemblerInsn "mov" for 0x4029a1>, <DisassemblerInsn "mov" for 0x4029a3>, <DisassemblerInsn "mov" for 0x4029ab>, <DisassemblerInsn "mov" for 0x4029b0>, <DisassemblerInsn "mov" for 0x4029b8>, <DisassemblerInsn "mov" for 0x4029bf>, <DisassemblerInsn "mov" for 0x4029c6>, <DisassemblerInsn "mov" for 0x4029ce>, <DisassemblerInsn "mov" for 0x4029d6>, <DisassemblerInsn "mov" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ed>, <DisassemblerInsn "mov" for 0x4029f5>, <DisassemblerInsn "mov" for 0x4029fc>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a0c>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "xor" for 0x402a23>, <DisassemblerInsn "test" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a31>, <DisassemblerInsn "mov" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a40>, <DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "jne" for 0x402a4f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402374>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9a>, <DisassemblerInsn "add" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "cmp" for 0x401ead>, <DisassemblerInsn "mov" for 0x401eb4>, <DisassemblerInsn "mov" for 0x401ebc>, <DisassemblerInsn "jne" for 0x401ec4>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402248>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "mov" for 0x402252>, <DisassemblerInsn "mov" for 0x402259>, <DisassemblerInsn "mov" for 0x402260>, <DisassemblerInsn "mov" for 0x402267>, <DisassemblerInsn "xor" for 0x40226e>, <DisassemblerInsn "cmp" for 0x402270>, <DisassemblerInsn "mov" for 0x402272>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "jge" for 0x40228e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40267a>, <DisassemblerInsn "mov" for 0x402682>, <DisassemblerInsn "shl" for 0x40268a>, <DisassemblerInsn "movabs" for 0x40268e>, <DisassemblerInsn "and" for 0x402698>, <DisassemblerInsn "mov" for 0x40269b>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a6>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b5>, <DisassemblerInsn "mov" for 0x4026bd>, <DisassemblerInsn "mov" for 0x4026c4>, <DisassemblerInsn "mov" for 0x4026cb>, <DisassemblerInsn "sub" for 0x4026ce>, <DisassemblerInsn "mov" for 0x4026d0>, <DisassemblerInsn "lea" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026de>, <DisassemblerInsn "mov" for 0x4026e1>, <DisassemblerInsn "je" for 0x4026e9>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021db>, <DisassemblerInsn "mov" for 0x4021e2>, <DisassemblerInsn "mov" for 0x4021e9>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "imul" for 0x4021f7>, <DisassemblerInsn "cmp" for 0x4021fa>, <DisassemblerInsn "setg" for 0x4021fd>, <DisassemblerInsn "mov" for 0x402201>, <DisassemblerInsn "cmp" for 0x402209>, <DisassemblerInsn "sete" for 0x40220c>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "movsxd" for 0x402218>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "cdqe" for 0x402223>, <DisassemblerInsn "mov" for 0x402225>, <DisassemblerInsn "xor" for 0x40222d>, <DisassemblerInsn "mov" for 0x40222f>, <DisassemblerInsn "mov" for 0x402236>, <DisassemblerInsn "mov" for 0x402238>, <DisassemblerInsn "mov" for 0x40223f>, <DisassemblerInsn "jmp" for 0x402246>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40309b>, <DisassemblerInsn "mov" for 0x40309f>, <DisassemblerInsn "mov" for 0x4030a7>, <DisassemblerInsn "mov" for 0x4030aa>, <DisassemblerInsn "lea" for 0x4030af>, <DisassemblerInsn "mov" for 0x4030b6>, <DisassemblerInsn "call" for 0x4030b8>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402259>, <DisassemblerInsn "mov" for 0x402260>, <DisassemblerInsn "mov" for 0x402267>, <DisassemblerInsn "xor" for 0x40226e>, <DisassemblerInsn "cmp" for 0x402270>, <DisassemblerInsn "mov" for 0x402272>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402287>, <DisassemblerInsn "jge" for 0x40228e>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "mov" for 0x402ed7>, <DisassemblerInsn "mov" for 0x402ede>, <DisassemblerInsn "mov" for 0x402ee6>, <DisassemblerInsn "mov" for 0x402eed>, <DisassemblerInsn "mov" for 0x402ef4>, <DisassemblerInsn "mov" for 0x402ef8>, <DisassemblerInsn "mov" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "mov" for 0x402f05>, <DisassemblerInsn "lea" for 0x402f0a>, <DisassemblerInsn "cmp" for 0x402f11>, <DisassemblerInsn "mov" for 0x402f14>, <DisassemblerInsn "jl" for 0x402f1c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b5>, <DisassemblerInsn "mov" for 0x4026bd>, <DisassemblerInsn "mov" for 0x4026c4>, <DisassemblerInsn "mov" for 0x4026cb>, <DisassemblerInsn "sub" for 0x4026ce>, <DisassemblerInsn "mov" for 0x4026d0>, <DisassemblerInsn "lea" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026de>, <DisassemblerInsn "mov" for 0x4026e1>, <DisassemblerInsn "je" for 0x4026e9>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402332>, <DisassemblerInsn "mov" for 0x402339>, <DisassemblerInsn "mov" for 0x402341>, <DisassemblerInsn "mov" for 0x402348>, <DisassemblerInsn "mov" for 0x40234f>, <DisassemblerInsn "mov" for 0x402356>, <DisassemblerInsn "xor" for 0x40235e>, <DisassemblerInsn "test" for 0x402360>, <DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "jne" for 0x402372>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402407>, <DisassemblerInsn "mov" for 0x40240e>, <DisassemblerInsn "mov" for 0x402415>, <DisassemblerInsn "mov" for 0x40241d>, <DisassemblerInsn "mov" for 0x402425>, <DisassemblerInsn "add" for 0x40242c>, <DisassemblerInsn "add" for 0x40242f>, <DisassemblerInsn "cmp" for 0x402432>, <DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "mov" for 0x40243c>, <DisassemblerInsn "mov" for 0x402443>, <DisassemblerInsn "je" for 0x40244a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed3>, <DisassemblerInsn "mov" for 0x401ed8>, <DisassemblerInsn "call" for 0x401edf>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403054>, <DisassemblerInsn "mov" for 0x40305b>, <DisassemblerInsn "mov" for 0x403063>, <DisassemblerInsn "mov" for 0x40306a>, <DisassemblerInsn "mov" for 0x403072>, <DisassemblerInsn "mov" for 0x40307a>, <DisassemblerInsn "mov" for 0x40307f>, <DisassemblerInsn "mov" for 0x403084>, <DisassemblerInsn "sub" for 0x403088>, <DisassemblerInsn "shl" for 0x40308b>, <DisassemblerInsn "add" for 0x40308e>, <DisassemblerInsn "add" for 0x403090>, <DisassemblerInsn "mov" for 0x403092>, <DisassemblerInsn "cmp" for 0x403096>, <DisassemblerInsn "jle" for 0x403099>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "mov" for 0x401f8b>, <DisassemblerInsn "movzx" for 0x401f92>, <DisassemblerInsn "mov" for 0x401f95>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "sub" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa3>, <DisassemblerInsn "shr" for 0x401fa8>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "mov" for 0x401fb1>, <DisassemblerInsn "mov" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fbf>, <DisassemblerInsn "mov" for 0x401fc7>, <DisassemblerInsn "mov" for 0x401fce>, <DisassemblerInsn "cmp" for 0x401fd3>, <DisassemblerInsn "mov" for 0x401fd7>, <DisassemblerInsn "mov" for 0x401fdf>, <DisassemblerInsn "mov" for 0x401fe6>, <DisassemblerInsn "jle" for 0x401fed>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020bf>, <DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020c8>, <DisassemblerInsn "cmp" for 0x4020cf>, <DisassemblerInsn "mov" for 0x4020d1>, <DisassemblerInsn "jb" for 0x4020d8>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402450>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402169>, <DisassemblerInsn "mov" for 0x402171>, <DisassemblerInsn "mov" for 0x402175>, <DisassemblerInsn "lea" for 0x40217a>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "call" for 0x402183>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402496>, <DisassemblerInsn "mov" for 0x40249d>, <DisassemblerInsn "mov" for 0x4024a5>, <DisassemblerInsn "mov" for 0x4024ac>, <DisassemblerInsn "mov" for 0x4024b4>, <DisassemblerInsn "mov" for 0x4024bc>, <DisassemblerInsn "mov" for 0x4024c3>, <DisassemblerInsn "add" for 0x4024c6>, <DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d5>, <DisassemblerInsn "add" for 0x4024d8>, <DisassemblerInsn "mov" for 0x4024dc>, <DisassemblerInsn "mov" for 0x4024e4>, <DisassemblerInsn "imul" for 0x4024ec>, <DisassemblerInsn "cmp" for 0x4024ef>, <DisassemblerInsn "setg" for 0x4024f2>, <DisassemblerInsn "mov" for 0x4024f6>, <DisassemblerInsn "lea" for 0x4024fe>, <DisassemblerInsn "add" for 0x402506>, <DisassemblerInsn "mov" for 0x40250a>, <DisassemblerInsn "lea" for 0x402512>, <DisassemblerInsn "mov" for 0x40251a>, <DisassemblerInsn "cmp" for 0x402522>, <DisassemblerInsn "sete" for 0x402526>, <DisassemblerInsn "mov" for 0x40252a>, <DisassemblerInsn "add" for 0x402532>, <DisassemblerInsn "mov" for 0x402536>, <DisassemblerInsn "movsxd" for 0x40253e>, <DisassemblerInsn "mov" for 0x402541>, <DisassemblerInsn "movsxd" for 0x402549>, <DisassemblerInsn "mov" for 0x40254c>, <DisassemblerInsn "add" for 0x402554>, <DisassemblerInsn "mov" for 0x40255a>, <DisassemblerInsn "xor" for 0x402562>, <DisassemblerInsn "mov" for 0x402564>, <DisassemblerInsn "xor" for 0x402566>, <DisassemblerInsn "mov" for 0x402568>, <DisassemblerInsn "mov" for 0x402570>, <DisassemblerInsn "mov" for 0x402577>, <DisassemblerInsn "mov" for 0x40257e>, <DisassemblerInsn "mov" for 0x402586>, <DisassemblerInsn "mov" for 0x40258e>, <DisassemblerInsn "mov" for 0x402595>, <DisassemblerInsn "mov" for 0x40259d>, <DisassemblerInsn "mov" for 0x4025a4>, <DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025cb>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025da>, <DisassemblerInsn "mov" for 0x4025e2>, <DisassemblerInsn "mov" for 0x4025e9>, <DisassemblerInsn "mov" for 0x4025f1>, <DisassemblerInsn "mov" for 0x4025f9>, <DisassemblerInsn "mov" for 0x402601>, <DisassemblerInsn "mov" for 0x402609>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "mov" for 0x402617>, <DisassemblerInsn "add" for 0x40261f>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402623>, <DisassemblerInsn "imul" for 0x40262b>, <DisassemblerInsn "cdq" for 0x40262e>, <DisassemblerInsn "idiv" for 0x40262f>, <DisassemblerInsn "mov" for 0x402631>, <DisassemblerInsn "mov" for 0x402639>, <DisassemblerInsn "mov" for 0x40263b>, <DisassemblerInsn "and" for 0x402643>, <DisassemblerInsn "mov" for 0x402646>, <DisassemblerInsn "movsxd" for 0x40264d>, <DisassemblerInsn "imul" for 0x402650>, <DisassemblerInsn "add" for 0x402654>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "xor" for 0x40265f>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "xor" for 0x402663>, <DisassemblerInsn "cmp" for 0x402665>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "je" for 0x402678>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fbc>, <DisassemblerInsn "mov" for 0x402fc4>, <DisassemblerInsn "mov" for 0x402fcb>, <DisassemblerInsn "mov" for 0x402fd3>, <DisassemblerInsn "mov" for 0x402fdb>, <DisassemblerInsn "mov" for 0x402fe2>, <DisassemblerInsn "mov" for 0x402fea>, <DisassemblerInsn "mov" for 0x402ff2>, <DisassemblerInsn "add" for 0x402ff9>, <DisassemblerInsn "add" for 0x402ffc>, <DisassemblerInsn "cmp" for 0x402fff>, <DisassemblerInsn "mov" for 0x403002>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "mov" for 0x403011>, <DisassemblerInsn "mov" for 0x403018>, <DisassemblerInsn "mov" for 0x40301b>, <DisassemblerInsn "mov" for 0x403023>, <DisassemblerInsn "mov" for 0x403026>, <DisassemblerInsn "mov" for 0x40302e>, <DisassemblerInsn "mov" for 0x403030>, <DisassemblerInsn "mov" for 0x403037>, <DisassemblerInsn "mov" for 0x40303e>, <DisassemblerInsn "mov" for 0x403046>, <DisassemblerInsn "jne" for 0x40304e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "mov" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x402100>, <DisassemblerInsn "mov" for 0x402107>, <DisassemblerInsn "movzx" for 0x40210f>, <DisassemblerInsn "add" for 0x402113>, <DisassemblerInsn "lea" for 0x402116>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "xor" for 0x402124>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212a>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "mov" for 0x402136>, <DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "mov" for 0x40214b>, <DisassemblerInsn "mov" for 0x402153>, <DisassemblerInsn "call" for 0x40215b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402188>, <DisassemblerInsn "mov" for 0x40218d>, <DisassemblerInsn "jmp" for 0x402194>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40315c>, <DisassemblerInsn "mov" for 0x40315e>, <DisassemblerInsn "jmp" for 0x403165>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40319f>, <DisassemblerInsn "add" for 0x4031a6>, <DisassemblerInsn "pop" for 0x4031ad>, <DisassemblerInsn "pop" for 0x4031ae>, <DisassemblerInsn "pop" for 0x4031b0>, <DisassemblerInsn "ret" for 0x4031b1>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ad5>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "mov" for 0x402ae4>, <DisassemblerInsn "mov" for 0x402aec>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "mov" for 0x402afb>, <DisassemblerInsn "sub" for 0x402afd>, <DisassemblerInsn "setb" for 0x402aff>, <DisassemblerInsn "mov" for 0x402b03>, <DisassemblerInsn "sub" for 0x402b06>, <DisassemblerInsn "setb" for 0x402b09>, <DisassemblerInsn "and" for 0x402b0d>, <DisassemblerInsn "test" for 0x402b10>, <DisassemblerInsn "mov" for 0x402b14>, <DisassemblerInsn "mov" for 0x402b1c>, <DisassemblerInsn "mov" for 0x402b24>, <DisassemblerInsn "jne" for 0x402b2b>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402160>, <DisassemblerInsn "je" for 0x402163>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b2f>, <DisassemblerInsn "mov" for 0x402b36>, <DisassemblerInsn "mov" for 0x402b3e>, <DisassemblerInsn "mov" for 0x402b46>, <DisassemblerInsn "bswap" for 0x402b48>, <DisassemblerInsn "mov" for 0x402b4a>, <DisassemblerInsn "mov" for 0x402b4c>, <DisassemblerInsn "mov" for 0x402b4e>, <DisassemblerInsn "sub" for 0x402b53>, <DisassemblerInsn "mov" for 0x402b55>, <DisassemblerInsn "shl" for 0x402b57>, <DisassemblerInsn "mov" for 0x402b5a>, <DisassemblerInsn "or" for 0x402b5d>, <DisassemblerInsn "add" for 0x402b60>, <DisassemblerInsn "add" for 0x402b64>, <DisassemblerInsn "mov" for 0x402b67>, <DisassemblerInsn "mov" for 0x402b6f>, <DisassemblerInsn "mov" for 0x402b77>, <DisassemblerInsn "mov" for 0x402b7e>, <DisassemblerInsn "mov" for 0x402b86>, <DisassemblerInsn "mov" for 0x402b8e>, <DisassemblerInsn "mov" for 0x402b96>, <DisassemblerInsn "mov" for 0x402b9d>, <DisassemblerInsn "mov" for 0x402ba4>, <DisassemblerInsn "mov" for 0x402bac>, <DisassemblerInsn "mov" for 0x402bb4>, <DisassemblerInsn "shr" for 0x402bb7>, <DisassemblerInsn "mov" for 0x402bba>, <DisassemblerInsn "movabs" for 0x402bc2>, <DisassemblerInsn "and" for 0x402bcc>, <DisassemblerInsn "movsx" for 0x402bcf>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdb>, <DisassemblerInsn "movsx" for 0x402be1>, <DisassemblerInsn "mov" for 0x402be5>, <DisassemblerInsn "cmp" for 0x402bec>, <DisassemblerInsn "mov" for 0x402bf1>, <DisassemblerInsn "mov" for 0x402bf9>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c0f>, <DisassemblerInsn "jge" for 0x402c16>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403193>, <DisassemblerInsn "mov" for 0x403198>, <DisassemblerInsn "mov" for 0x40319f>, <DisassemblerInsn "add" for 0x4031a6>, <DisassemblerInsn "pop" for 0x4031ad>, <DisassemblerInsn "pop" for 0x4031ae>, <DisassemblerInsn "pop" for 0x4031b0>, <DisassemblerInsn "ret" for 0x4031b1>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cf3>, <DisassemblerInsn "mov" for 0x402cfb>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d0a>, <DisassemblerInsn "mov" for 0x402d12>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "mov" for 0x402d29>, <DisassemblerInsn "mov" for 0x402d30>, <DisassemblerInsn "add" for 0x402d38>, <DisassemblerInsn "mov" for 0x402d3b>, <DisassemblerInsn "mov" for 0x402d3d>, <DisassemblerInsn "shr" for 0x402d40>, <DisassemblerInsn "mov" for 0x402d43>, <DisassemblerInsn "add" for 0x402d46>, <DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4b>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "movsx" for 0x402d54>, <DisassemblerInsn "mov" for 0x402d58>, <DisassemblerInsn "movsx" for 0x402d5f>, <DisassemblerInsn "mov" for 0x402d64>, <DisassemblerInsn "cmp" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d70>, <DisassemblerInsn "mov" for 0x402d78>, <DisassemblerInsn "mov" for 0x402d7f>, <DisassemblerInsn "mov" for 0x402d87>, <DisassemblerInsn "mov" for 0x402d8e>, <DisassemblerInsn "jge" for 0x402d95>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x80], 0>', '<sete~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<xor~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x4e4], eax>', '<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~ecx, dword ptr [rsp + 0x4e4]>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<lea~~rcx, [rsp + 0xb00]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<lea~~rcx, [rsp + 0x700]>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<lea~~rcx, [rsp + 0x600]>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<lea~~rcx, [rsp + 0x500]>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x45f]>', '<mov~~eax, 0xff>', '<cmp~~cl, 0x20>', '<mov~~qword ptr [rsp + 0x450], rax>', '<jbe~~0x401f18>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x200]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rsi, qword ptr [rsp + 0x1e8]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~r8, qword ptr [rsp + 0x38]>', '<mov~~r9d, dword ptr [rsp + 0x2cc]>', '<mov~~r11, qword ptr [rsp + 0x2b8]>', '<mov~~r10, qword ptr [rsp + 0x358]>', '<mov~~r10d, dword ptr [r10]>', '<movsxd~~rbx, r10d>', '<cmp~~r11, rbx>', '<mov~~qword ptr [rsp + 0x340], r11>', '<mov~~dword ptr [rsp + 0x348], r10d>', '<mov~~dword ptr [rsp + 0x34c], r9d>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<mov~~qword ptr [rsp + 0x270], rsi>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~dword ptr [rsp + 0x264], ecx>', '<mov~~dword ptr [rsp + 0x260], eax>', '<jl~~0x40257e>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~r10, qword ptr [rsp + 0x2e8]>', '<mov~~r9d, dword ptr [rsp + 0x254]>', '<mov~~r8d, dword ptr [rsp + 0x288]>', '<mov~~edi, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x298]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~r10, qword ptr [r10]>', '<mov~~qword ptr [rsp + 0x220], r10>', '<cmp~~r9d, 0xfffffff>', '<mov~~dword ptr [rsp + 0x228], r8d>', '<mov~~dword ptr [rsp + 0x22c], edi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<ja~~0x4028b8>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x358], rcx>', '<mov~~eax, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x360], eax>', '<cmp~~eax, 0>', '<jle~~0x40314f>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x394]>', '<mov~~rcx, qword ptr [rsp + 0x388]>', '<mov~~rdx, qword ptr [rsp + 0x3c8]>', '<mov~~rsi, qword ptr [rsp + 0x3c0]>', '<mov~~rdi, qword ptr [rsp + 0x380]>', '<mov~~r10b, byte ptr [rsp + 0x3bf]>', '<mov~~r11d, dword ptr [rsp + 0x3dc]>', '<mov~~eax, r9d>', '<add~~eax, r11d>', '<mov~~dword ptr [rsp + 0x364], eax>', '<test~~r10b, 1>', '<mov~~r8d, eax>', '<cmovne~~r8d, r11d>', '<mov~~dword ptr [rsp + 0x368], r8d>', '<test~~r10b, 1>', '<cmovne~~eax, r9d>', '<mov~~dword ptr [rsp + 0x36c], eax>', '<mov~~byte ptr [rdi + rcx], r8b>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x370], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x394], eax>', '<jl~~0x402379>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xc0], ecx>', '<neg~~edi>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rsp + 0xd4], ecx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<jne~~0x402ca2>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x438]>', '<mov~~dword ptr [rsp + 0x434], eax>', '<cmp~~eax, -1>', '<jle~~0x4020bf>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x2b0]>', '<mov~~edi, dword ptr [rsp + 0x2cc]>', '<mov~~r8d, dword ptr [rsp + 0x228]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rcx, qword ptr [rsp + 0x230]>', '<mov~~r9, qword ptr [rsp + 0x238]>', '<mov~~r10, qword ptr [rsp + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~qword ptr [rsp + 0x1e0], r10>', '<mov~~qword ptr [rsp + 0x1e8], r9>', '<mov~~qword ptr [rsp + 0x1f0], rcx>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jge~~0x403054>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~esi, dword ptr [rsp + 0x130]>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x402ecf>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~r8b, byte ptr [rsp + 0x307]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~r9d, dword ptr [rsp + 0x1b8]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~dword ptr [rsp + 0x15c], r9d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402a56>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x402cf3>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3f6]>', '<mov~~byte ptr [rsp + 0x3f7], al>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r10, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x434]>', '<mov~~sil, byte ptr [rsp + 0x3f7]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4e8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3a8]>', '<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<movsxd~~rax, ecx>', '<imul~~rax, rsi>', '<add~~rdx, rax>', '<mov~~eax, 0x80>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<mov~~dword ptr [rsp + 0x3a0], ecx>', '<mov~~dword ptr [rsp + 0x3a4], eax>', '<mov~~dl, byte ptr [rsp + 0x3be]>', '<mov~~rcx, qword ptr [rsp + 0x398]>', '<mov~~esi, dword ptr [rsp + 0x3a0]>', '<mov~~eax, dword ptr [rsp + 0x3a4]>', '<mov~~dword ptr [rsp + 0x37c], esi>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x394], eax>', '<jne~~0x402379>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x402e5b>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~r8d, dword ptr [rsp + 0x174]>', '<mov~~r9, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~qword ptr [rsp + 0x140], r9>', '<mov~~dword ptr [rsp + 0x14c], r8d>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<sub~~rax, rsi>', '<shl~~eax, 3>', '<add~~ecx, edx>', '<add~~ecx, eax>', '<lea~~rax, [rip + 0x40fd]>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x403167>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~rdi, qword ptr [rsp + 0x2e8]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~rsi, qword ptr [rsp + 0x350]>', '<mov~~edx, dword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rdi]>', '<movsxd~~rdx, edx>', '<add~~rsi, rdx>', '<shl~~ecx, 2>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x218], rdx>', '<call~~0x500078>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x450]>', '<mov~~qword ptr [rsp + 0x438], rax>', '<mov~~cl, byte ptr [rsp + rax*8 + 0xb02]>', '<mov~~byte ptr [rsp + 0x445], cl>', '<sub~~cl, 0xff>', '<mov~~byte ptr [rsp + 0x446], cl>', '<sete~~cl>', '<test~~rax, rax>', '<setne~~dl>', '<and~~cl, dl>', '<mov~~byte ptr [rsp + 0x447], cl>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x448], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x450], rax>', '<jne~~0x401f18>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<movzx~~ecx, word ptr [rsp + 0xb00]>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x60>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~ecx, dword ptr [rax + 0x60]>', '<mov~~dword ptr [rsp + 0x3ec], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jle~~0x40319f>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc0]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rsp + 0xd4], ecx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~rdi, qword ptr [rsp + 0xc8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x402ecf>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x402fbc>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x402169>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0xb0]>', '<mov~~esi, dword ptr [rsp + 0xfc]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0xc4]>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<add~~ecx, esi>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<neg~~edi>', '<mov~~esi, ecx>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~qword ptr [rsp + 0x90], rax>', '<jne~~0x402e13>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x402b7e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~ecx, dword ptr [rsp + 0x4e4]>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<lea~~rcx, [rsp + 0xb00]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<lea~~rcx, [rsp + 0x700]>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<lea~~rcx, [rsp + 0x600]>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<lea~~rcx, [rsp + 0x500]>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~r8d, dword ptr [rsp + 0x474]>', '<mov~~edx, dword ptr [rsp + 0x4e0]>', '<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~edi, dword ptr [rsp + 0x348]>', '<mov~~ecx, dword ptr [rsp + 0x34c]>', '<mov~~r9, qword ptr [rsp + 0x280]>', '<mov~~r10, qword ptr [rsp + 0x278]>', '<mov~~r11, qword ptr [rsp + 0x270]>', '<mov~~rbx, qword ptr [rsp + 0x268]>', '<mov~~ebp, dword ptr [rsp + 0x264]>', '<mov~~r14d, dword ptr [rsp + 0x260]>', '<mov~~dword ptr [rsp + 0x288], r14d>', '<mov~~dword ptr [rsp + 0x28c], ebp>', '<mov~~qword ptr [rsp + 0x290], rbx>', '<mov~~qword ptr [rsp + 0x298], r11>', '<mov~~qword ptr [rsp + 0x2a0], r10>', '<mov~~qword ptr [rsp + 0x2a8], r9>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x2b8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x4c0]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<je~~0x4026ad>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x7c]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rdx]>', '<bswap~~eax>', '<mov~~eax, eax>', '<mov~~ecx, 0x20>', '<sub~~ecx, edi>', '<mov~~ecx, ecx>', '<shl~~rax, cl>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<or~~rax, rsi>', '<add~~rdx, 4>', '<add~~ecx, 0x20>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xb4]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x8c]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x403167>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x474]>', '<mov~~edx, dword ptr [rsp + 0x4e0]>', '<mov~~edi, dword ptr [rsp + 0x3d0]>', '<mov~~ecx, dword ptr [rsp + 0x3d4]>', '<mov~~eax, dword ptr [rsp + 0x3d8]>', '<mov~~dword ptr [rsp + 0x3a8], ecx>', '<mov~~dword ptr [rsp + 0x3ac], edi>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x3b4], eax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x3ac]>', '<and~~edx, esi>', '<mov~~dword ptr [rsp + 0x3b0], edx>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<jge~~0x402259>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rdx, qword ptr [rsp + 0x298]>', '<mov~~edi, dword ptr [rsp + 0x288]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<xor~~esi, esi>', '<xor~~ecx, ecx>', '<cmp~~r8, 0>', '<mov~~dword ptr [rsp + 0x228], edi>', '<mov~~dword ptr [rsp + 0x22c], esi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<je~~0x4028b8>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x430]>', '<mov~~ecx, dword ptr [rsp + 0x42c]>', '<mov~~rsi, qword ptr [rsp + 0x420]>', '<mov~~dword ptr [rsp + 0x404], eax>', '<mov~~rdx, rsi>', '<add~~rdx, -1>', '<mov~~qword ptr [rsp + 0x3f8], rdx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x400], ecx>', '<mov~~eax, 0x80000000>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x404]>', '<mov~~dword ptr [rsp + 0x408], eax>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<mov~~dil, byte ptr [rsp + rsi*8 + 0xafa]>', '<movzx~~r8d, dil>', '<mov~~dword ptr [rsp + 0x414], r8d>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x410], ecx>', '<mov~~r8d, eax>', '<shr~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x414]>', '<mov~~dword ptr [rsp + 0x418], r8d>', '<mov~~dword ptr [rsp + rsi*4 + 0x6fc], r8d>', '<mov~~byte ptr [rsp + rsi + 0x5ff], dil>', '<mov~~di, word ptr [rsp + rsi*8 + 0xaf8]>', '<mov~~byte ptr [rsp + rsi + 0x4ff], dil>', '<cmp~~rsi, 1>', '<mov~~qword ptr [rsp + 0x420], rdx>', '<mov~~dword ptr [rsp + 0x42c], ecx>', '<mov~~dword ptr [rsp + 0x430], eax>', '<ja~~0x401ff3>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x330]>', '<mov~~r9, qword ptr [rsp + 0x328]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~r10, qword ptr [rsp + 0x160]>', '<mov~~ebx, dword ptr [rsp + 0x14c]>', '<mov~~bpl, byte ptr [rsp + 0x31f]>', '<mov~~r14d, dword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, ecx>', '<mov~~ecx, ecx>', '<shl~~rdx, cl>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, r14d>', '<add~~esi, ebx>', '<test~~bpl, 1>', '<mov~~r11d, esi>', '<cmovne~~r11d, r14d>', '<test~~bpl, 1>', '<cmovne~~esi, ebx>', '<mov~~byte ptr [r10 + rdi], r11b>', '<add~~rdi, r9>', '<cmp~~rdi, r8>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jl~~0x402a56>']}, {'block_Idx': 35, 'blockInsts': ['<lea~~rdi, [rsp + 0x4e8]>', '<call~~0x500080>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~r8d, eax>', '<shl~~r8d, 3>', '<mov~~eax, eax>', '<mov~~rdx, rcx>', '<add~~rdx, rax>', '<mov~~rax, qword ptr [rcx]>', '<bswap~~rax>', '<mov~~rsi, rcx>', '<add~~rsi, 8>', '<mov~~edi, 0x40>', '<mov~~dword ptr [rsp + 0x228], r8d>', '<mov~~dword ptr [rsp + 0x22c], edi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~qword ptr [rsp + 0x248], rax>', '<mov~~esi, dword ptr [rsp + 0x2b0]>', '<mov~~edi, dword ptr [rsp + 0x2cc]>', '<mov~~r8d, dword ptr [rsp + 0x228]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rcx, qword ptr [rsp + 0x230]>', '<mov~~r9, qword ptr [rsp + 0x238]>', '<mov~~r10, qword ptr [rsp + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~qword ptr [rsp + 0x1e0], r10>', '<mov~~qword ptr [rsp + 0x1e8], r9>', '<mov~~qword ptr [rsp + 0x1f0], rcx>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<cmp~~esi, edi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jge~~0x403054>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xb4]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x8c]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r8d, ecx>', '<movsx~~ecx, word ptr [rax + r8*4 + 2]>', '<movsx~~eax, word ptr [rax + r8*4]>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x403167>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1300>', '<mov~~dword ptr [rsp + 0x4ac], r9d>', '<mov~~qword ptr [rsp + 0x4b0], r8>', '<mov~~dword ptr [rsp + 0x4bc], ecx>', '<mov~~qword ptr [rsp + 0x4c0], rdx>', '<mov~~qword ptr [rsp + 0x4c8], rdi>', '<mov~~eax, dword ptr [rsp + 0x1330]>', '<mov~~dword ptr [rsp + 0x4d4], eax>', '<mov~~rax, qword ptr [rsp + 0x1328]>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<mov~~eax, dword ptr [rsp + 0x1320]>', '<mov~~dword ptr [rsp + 0x4e0], eax>', '<lea~~rax, [rsp + 0x4e8]>', '<mov~~eax, 0xffffffff>', '<cmp~~esi, 0>', '<mov~~dword ptr [rsp + 0x4e4], eax>', '<jne~~0x401e06>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xb02]>', '<mov~~byte ptr [rsp + 0x45f], al>', '<cmp~~al, 0>', '<je~~0x402199>']}, {'block_Idx': 46, 'blockInsts': ['<lea~~rdi, [rsp + 0x4e8]>', '<call~~0x500080>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~edi, dword ptr [rsp + 0x2b0]>', '<mov~~r8, qword ptr [rsp + 0x2d0]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~r9, qword ptr [rsp + 0x308]>', '<mov~~r9, qword ptr [r9]>', '<mov~~qword ptr [rsp + 0x190], r9>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x19c], esi>', '<mov~~r9d, 0x40>', '<sub~~r9d, esi>', '<mov~~r9d, r9d>', '<mov~~qword ptr [rsp + 0x1a0], r9>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~esi, 0x80>', '<mov~~qword ptr [rsp + 0x1b0], r8>', '<mov~~dword ptr [rsp + 0x1b8], edi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<mov~~r8b, byte ptr [rsp + 0x307]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~r9d, dword ptr [rsp + 0x1b8]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~dword ptr [rsp + 0x15c], r9d>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<xor~~edi, edi>', '<test~~r8b, 1>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~dword ptr [rsp + 0x174], esi>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402a56>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x402407>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~ax, cx>', '<mov~~word ptr [rsp + rcx*8 + 0xb00], ax>', '<mov~~rax, rdx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~dl, byte ptr [rdx]>', '<mov~~byte ptr [rsp + rcx*8 + 0xb02], dl>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<cmp~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<jne~~0x401e6e>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<mov~~ecx, dword ptr [rsp + 0x3b4]>', '<mov~~edx, dword ptr [rsp + 0x3b0]>', '<mov~~esi, dword ptr [rsp + 0x3b8]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3d0], esi>', '<mov~~dword ptr [rsp + 0x3d4], edx>', '<mov~~dword ptr [rsp + 0x3d8], ecx>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jge~~0x40319f>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<shl~~rcx, 2>', '<movabs~~rdx, 0xfffffffc>', '<and~~rcx, rdx>', '<mov~~eax, dword ptr [rax + rcx]>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<mov~~rcx, qword ptr [rsp + 0x350]>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~eax, dword ptr [rsp + 0x2e4]>', '<mov~~dword ptr [rsp + 0x250], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x254], ecx>', '<lea~~rax, [rip + 0x44a1]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<je~~0x403167>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3ec]>', '<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~esi, dword ptr [rsp + 0x4d4]>', '<mov~~eax, dword ptr [rsp + 0x4ac]>', '<imul~~eax, edx>', '<cmp~~eax, 0>', '<setg~~dil>', '<mov~~byte ptr [rsp + 0x3be], dil>', '<cmp~~esi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x3bf], sil>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x3c0], rdx>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x3c8], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3d0], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3d4], ecx>', '<mov~~dword ptr [rsp + 0x3d8], eax>', '<jmp~~0x402294>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3b3b]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3b4]>', '<mov~~edx, dword ptr [rsp + 0x3b0]>', '<mov~~esi, dword ptr [rsp + 0x3b8]>', '<xor~~eax, eax>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x3d0], esi>', '<mov~~dword ptr [rsp + 0x3d4], edx>', '<mov~~dword ptr [rsp + 0x3d8], ecx>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jge~~0x40319f>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~dword ptr [rsp + 0x64], edx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<lea~~rax, [rip + 0x3cd0]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<jl~~0x403167>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x350]>', '<mov~~rdx, qword ptr [rsp + 0x2d8]>', '<mov~~eax, dword ptr [rsp + 0x2e4]>', '<mov~~dword ptr [rsp + 0x250], eax>', '<mov~~ecx, dword ptr [rcx + rdx]>', '<sub~~ecx, eax>', '<mov~~dword ptr [rsp + 0x254], ecx>', '<lea~~rax, [rip + 0x44a1]>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x258], rax>', '<je~~0x403167>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x3be]>', '<mov~~rcx, qword ptr [rsp + 0x398]>', '<mov~~esi, dword ptr [rsp + 0x3a0]>', '<mov~~eax, dword ptr [rsp + 0x3a4]>', '<mov~~dword ptr [rsp + 0x37c], esi>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x394], eax>', '<jne~~0x402379>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3b0]>', '<mov~~ecx, dword ptr [rsp + 0x37c]>', '<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x380]>', '<mov~~eax, dword ptr [rsp + 0x394]>', '<add~~rdx, rdi>', '<add~~ecx, 1>', '<cmp~~ecx, esi>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<mov~~dword ptr [rsp + 0x3a0], ecx>', '<mov~~dword ptr [rsp + 0x3a4], eax>', '<je~~0x402248>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x478]>', '<mov~~esi, 0x100>', '<mov~~edx, 8>', '<mov~~rcx, qword ptr [rip + 0xfe181]>', '<call~~0x500068>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x200]>', '<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rsi, qword ptr [rsp + 0x208]>', '<mov~~rdi, qword ptr [rsp + 0x210]>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~dword ptr [rsp + 0x48], eax>', '<sub~~rcx, rsi>', '<shl~~ecx, 3>', '<add~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<cmp~~eax, 0x20>', '<jle~~0x4030bd>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x438]>', '<mov~~al, byte ptr [rsp + 0x445]>', '<movzx~~esi, al>', '<mov~~dword ptr [rsp + 0x41c], esi>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 1>', '<shr~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x41c]>', '<mov~~dword ptr [rsp + rdx*4 + 0x700], esi>', '<mov~~byte ptr [rsp + rdx + 0x600], al>', '<mov~~ax, word ptr [rsp + rdx*8 + 0xb00]>', '<mov~~byte ptr [rsp + rdx + 0x500], al>', '<mov~~eax, 1>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x420], rdx>', '<mov~~dword ptr [rsp + 0x42c], ecx>', '<mov~~dword ptr [rsp + 0x430], eax>', '<jle~~0x4020bf>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x445]>', '<mov~~cl, 9>', '<mov~~byte ptr [rsp + 0x3f6], cl>', '<cmp~~al, 9>', '<mov~~byte ptr [rsp + 0x3f7], al>', '<jb~~0x4020e8>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x402332>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x49e2]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x360]>', '<mov~~rax, qword ptr [rsp + 0x4d8]>', '<mov~~esi, dword ptr [rsp + 0x4bc]>', '<mov~~rdi, qword ptr [rsp + 0x4c8]>', '<mov~~r8d, dword ptr [rsp + 0x4d4]>', '<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~r9, rdi>', '<add~~r9, 0x80>', '<mov~~qword ptr [rsp + 0x2e8], r9>', '<mov~~r10, rdi>', '<add~~r10, 0x10>', '<mov~~qword ptr [rsp + 0x2f0], r10>', '<mov~~qword ptr [rsp + 0x2f8], r9>', '<imul~~edx, esi>', '<cmp~~edx, 0>', '<setg~~r9b>', '<mov~~byte ptr [rsp + 0x307], r9b>', '<lea~~r9, [rsp + 0x4e8]>', '<add~~r9, 8>', '<mov~~qword ptr [rsp + 0x308], r9>', '<lea~~r9, [rsp + 0x4e8]>', '<mov~~qword ptr [rsp + 0x310], r9>', '<cmp~~r8d, 0>', '<sete~~r8b>', '<mov~~byte ptr [rsp + 0x31f], r8b>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 0x320], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x328], rsi>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<add~~rax, 0xfc>', '<mov~~qword ptr [rsp + 0x338], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x340], rdx>', '<mov~~dword ptr [rsp + 0x348], ecx>', '<mov~~dword ptr [rsp + 0x34c], eax>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~r8d, dword ptr [rsp + 0x474]>', '<mov~~edx, dword ptr [rsp + 0x4e0]>', '<mov~~rax, qword ptr [rsp + 0x340]>', '<mov~~edi, dword ptr [rsp + 0x348]>', '<mov~~ecx, dword ptr [rsp + 0x34c]>', '<mov~~r9, qword ptr [rsp + 0x280]>', '<mov~~r10, qword ptr [rsp + 0x278]>', '<mov~~r11, qword ptr [rsp + 0x270]>', '<mov~~rbx, qword ptr [rsp + 0x268]>', '<mov~~ebp, dword ptr [rsp + 0x264]>', '<mov~~r14d, dword ptr [rsp + 0x260]>', '<mov~~dword ptr [rsp + 0x288], r14d>', '<mov~~dword ptr [rsp + 0x28c], ebp>', '<mov~~qword ptr [rsp + 0x290], rbx>', '<mov~~qword ptr [rsp + 0x298], r11>', '<mov~~qword ptr [rsp + 0x2a0], r10>', '<mov~~qword ptr [rsp + 0x2a8], r9>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], edi>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rax, 1>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~qword ptr [rsp + 0x2b8], rax>', '<imul~~eax, edx>', '<cdq~~>', '<idiv~~edi>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0x4c0]>', '<and~~edi, r8d>', '<mov~~dword ptr [rsp + 0x2cc], edi>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rsi>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~dword ptr [rsp + 0x2e4], eax>', '<je~~0x4026ad>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x2cc]>', '<mov~~edi, dword ptr [rsp + 0x15c]>', '<mov~~r10, qword ptr [rsp + 0x4b0]>', '<mov~~r8, qword ptr [rsp + 0x160]>', '<mov~~edx, dword ptr [rsp + 0x18c]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~esi, dword ptr [rsp + 0x174]>', '<add~~r8, r10>', '<add~~edi, 1>', '<cmp~~edi, r9d>', '<mov~~qword ptr [rsp + 0x1b0], r8>', '<mov~~dword ptr [rsp + 0x1b8], edi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c0], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~qword ptr [rsp + 0x210], rax>', '<jne~~0x4029dd>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r10, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x434]>', '<mov~~sil, byte ptr [rsp + 0x3f7]>', '<movzx~~esi, sil>', '<add~~edx, 1>', '<lea~~rdi, [rsp + 0x4e8]>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], r10>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x20], 1>', '<mov~~dword ptr [rsp + 0x28], 1>', '<mov~~dword ptr [rsp + 0x30], 0>', '<call~~0x500070>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jmp~~0x40319f>']}, {'block_Idx': 39, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<jmp~~0x40319f>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3f0]>', '<add~~rsp, 0x1300>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~r8, qword ptr [rsp + 0x1e8]>', '<mov~~edi, dword ptr [rsp + 0x19c]>', '<mov~~esi, eax>', '<sub~~esi, edi>', '<setb~~sil>', '<mov~~rdi, rdx>', '<sub~~rdi, r8>', '<setb~~dil>', '<and~~sil, dil>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jne~~0x402b2f>']}, {'block_Idx': 32, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x402455>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~ecx, dword ptr [rdx]>', '<bswap~~ecx>', '<mov~~ecx, ecx>', '<mov~~edi, ecx>', '<mov~~ecx, 0x20>', '<sub~~ecx, eax>', '<mov~~ecx, ecx>', '<shl~~rdi, cl>', '<mov~~rcx, rdi>', '<or~~rcx, rsi>', '<add~~rdx, 4>', '<add~~eax, 0x20>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~esi, dword ptr [rsp + 0x130]>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<mov~~r8, rdx>', '<shr~~r8, cl>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<movabs~~rax, 0xffffffff>', '<and~~r8, rax>', '<movsx~~eax, word ptr [rcx + r8*4]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<mov~~r8w, word ptr [rcx + r8*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x402ecf>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x3f0], eax>', '<mov~~eax, dword ptr [rsp + 0x3f0]>', '<add~~rsp, 0x1300>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~rdi, qword ptr [rsp + 0xc8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~dword ptr [rsp + 0xa4], esi>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<add~~ecx, 0x40>', '<mov~~ecx, ecx>', '<mov~~r9, rdx>', '<shr~~r9, cl>', '<mov~~rcx, r9>', '<add~~ecx, r8d>', '<mov~~ecx, ecx>', '<mov~~r9d, ecx>', '<mov~~r8w, word ptr [rax + r9*4 + 2]>', '<movsx~~ecx, r8w>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<movsx~~eax, word ptr [rax + r9*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~r8w, 0>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~dword ptr [rsp + 0x10c], esi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rsp + 0x118], ecx>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<jge~~0x402ecf>']}], 'cfg_edge_info': [(50, 52), (67, 68), (25, 32), (70, 73), (46, 48), (30, 9), (11, 14), (66, 69), (72, 57), (13, 17), (7, 10), (41, 42), (55, 59), (16, 22), (18, 19), (73, 74), (8, 11), (40, 43), (2, 4), (74, 75), (76, 72), (69, 42), (33, 22), (53, 55), (56, 60), (31, 33), (30, 13), (57, 61), (68, 70), (58, 35), (26, 9), (64, 57), (73, 69), (18, 23), (17, 9), (38, 41), (0, 2), (14, 19), (65, 67), (1, 3), (27, 31), (71, 74), (50, 51), (76, 42), (3, 3), (60, 55), (51, 52), (12, 15), (60, 64), (21, 27), (66, 68), (13, 16), (7, 9), (55, 58), (16, 21), (22, 27), (61, 65), (40, 42), (36, 38), (53, 54), (33, 21), (71, 69), (39, 9), (32, 34), (58, 62), (57, 42), (4, 6), (35, 39), (23, 19), (52, 55), (62, 41), (11, 11), (72, 60), (19, 24), (64, 56), (6, 8), (24, 32), (38, 40), (14, 18), (75, 77), (34, 36), (27, 30), (54, 57), (67, 69), (23, 23), (17, 13), (1, 4), (2, 3), (41, 43), (3, 4), (59, 58), (77, 72), (51, 53), (8, 12), (74, 76), (32, 15), (15, 26), (52, 54), (61, 66), (22, 22), (62, 40), (0, 1), (68, 71), (6, 7), (42, 46), (69, 72), (34, 35), (10, 13), (19, 25), (77, 42), (54, 56)], 'cdg_edge_info': [(67, 68), (57, 48), (8, 9), (72, 57), (7, 10), (55, 59), (41, 42), (16, 22), (73, 74), (8, 11), (40, 43), (76, 72), (77, 46), (33, 22), (53, 55), (8, 32), (30, 13), (57, 61), (74, 77), (58, 35), (77, 48), (64, 57), (13, 30), (18, 23), (38, 41), (0, 2), (32, 9), (1, 3), (71, 74), (50, 51), (34, 9), (76, 42), (3, 3), (60, 55), (60, 64), (66, 68), (58, 39), (34, 39), (13, 16), (27, 33), (54, 60), (43, 50), (40, 42), (53, 54), (32, 34), (76, 46), (41, 46), (58, 62), (57, 42), (50, 58), (61, 67), (62, 41), (8, 15), (11, 11), (72, 60), (19, 24), (6, 8), (76, 48), (41, 48), (58, 9), (51, 58), (38, 40), (14, 18), (34, 36), (8, 26), (53, 58), (54, 57), (57, 46), (23, 23), (2, 3), (34, 38), (8, 19), (64, 60), (13, 27), (41, 43), (77, 72), (51, 53), (50, 55), (8, 12), (74, 76), (32, 15), (7, 13), (60, 58), (51, 55), (61, 66), (22, 22), (62, 40), (0, 1), (8, 14), (27, 27), (40, 46), (68, 71), (6, 7), (32, 26), (34, 35), (40, 48), (19, 25), (77, 42), (68, 73), (6, 9)], 'ddg_edge_info': [(67, 59), (72, 73), (67, 68), (25, 32), (36, 62), (67, 77), (54, 77), (25, 41), (46, 48), (11, 14), (57, 66), (4, 30), (67, 43), (72, 57), (1, 15), (4, 48), (72, 66), (7, 10), (55, 59), (41, 42), (73, 74), (25, 34), (30, 48), (1, 42), (25, 43), (3, 6), (3, 15), (8, 11), (11, 62), (0, 62), (0, 7), (2, 4), (4, 23), (66, 71), (0, 16), (3, 42), (58, 42), (72, 59), (59, 41), (53, 55), (33, 22), (19, 32), (72, 77), (2, 25), (73, 76), (25, 36), (16, 33), (7, 30), (30, 13), (22, 30), (57, 61), (74, 77), (72, 43), (4, 25), (66, 73), (59, 43), (53, 57), (36, 41), (64, 57), (10, 22), (13, 30), (18, 23), (0, 48), (60, 62), (0, 2), (4, 18), (26, 48), (15, 48), (4, 27), (1, 3), (57, 72), (18, 62), (36, 43), (67, 58), (10, 33), (1, 30), (50, 51), (53, 68), (54, 67), (66, 41), (60, 55), (60, 64), (4, 11), (66, 59), (3, 30), (66, 77), (67, 42), (13, 16), (27, 33), (25, 15), (2, 13), (53, 61), (55, 58), (0, 34), (25, 42), (66, 43), (22, 27), (4, 13), (4, 22), (7, 48), (1, 7), (72, 58), (34, 41), (53, 54), (11, 18), (72, 67), (0, 27), (64, 72), (0, 36), (25, 35), (3, 62), (3, 7), (57, 42), (4, 6), (35, 39), (67, 74), (58, 62), (18, 32), (61, 67), (4, 15), (35, 48), (14, 25), (72, 42), (62, 41), (4, 33), (39, 48), (72, 60), (34, 43), (59, 42), (54, 64), (6, 8), (73, 77), (54, 73), (4, 8), (67, 76), (62, 43), (1, 2), (0, 4), (34, 36), (59, 35), (0, 13), (36, 42), (53, 58), (68, 74), (71, 73), (50, 53), (4, 10), (1, 41), (66, 58), (4, 19), (2, 3), (3, 32), (0, 15), (64, 60), (3, 41), (58, 41), (54, 68), (23, 62), (13, 27), (41, 43), (66, 42), (72, 76), (59, 58), (77, 72), (67, 71), (51, 53), (50, 43), (1, 34), (1, 43), (25, 62), (74, 76), (3, 34), (3, 43), (54, 61), (58, 43), (15, 26), (7, 22), (53, 74), (67, 73), (4, 14), (72, 41), (0, 1), (2, 62), (0, 10), (11, 19), (68, 71), (72, 71), (67, 66), (42, 46), (4, 7), (59, 62), (4, 16), (19, 62), (0, 3), (10, 13), (66, 67), (19, 25), (76, 77), (77, 42), (66, 76), (67, 41), (68, 73), (33, 27), (53, 60)]}]}
{'decode_plane': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'leaq\t0x4e8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, %esi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, 0x4e4(%rsp)                # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_2'}, {'instIndex': 21, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0, 0x80(%rax)'}, {'instIndex': 23, 'instruction': 'sete\t%al'}, {'instIndex': 24, 'instruction': 'andb\t$1, %al'}, {'instIndex': 25, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 26, 'instruction': 'xorl\t$-1, %eax'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x4e4(%rsp)                # 4-byte Spill'}, {'instIndex': 71, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 172, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 173, 'instruction': 'je\t.LBB3_22'}, {'instIndex': 175, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 176, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 177, 'instruction': 'leaq\t.L.str.14(%rip), %rdx'}, {'instIndex': 178, 'instruction': 'movb\t$0, %al'}, {'instIndex': 179, 'instruction': 'callq\tav_log@PLT'}]}]}
The analysis of 22 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/patch_info.txt
{'1': {'before': 'a/libavformat/flvdec.c', 'after': 'b/libavformat/flvdec.c'}}
{'1': [{'before': '-281,7', 'after': '+281,7', 'function': 'static int flv_read_header'}, {'before': '-289,9', 'after': '+289,9', 'function': 'static int flv_read_packet'}, {'before': '-337,7', 'after': '+337,7', 'function': 'static int flv_read_packet'}, {'before': '-376,7', 'after': '+376,7', 'function': 'static int flv_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017---b/libavformat/flvdec.c
The case of compiler gcc with optimization no.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/no/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/no/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O0.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O0/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O0/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O1.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O1/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O1/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O2.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O2/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O2/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O3.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O3/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/O3/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization Os.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/Os/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_after/Os/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization no.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/no/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/no/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O0.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O0/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O0/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O1.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O1/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O1/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O2.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O2/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O2/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O3.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O3/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/O3/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization Os.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/Os/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_after/Os/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017---a/libavformat/flvdec.c
The case of compiler gcc with optimization no.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/no/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/no/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/no/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O0.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O0/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O0/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O0/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O1.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O1/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O1/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O1/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O2.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O2/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O2/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O2/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization O3.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O3/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O3/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/O3/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler gcc with optimization Os.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/Os/flvdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/Os/flvdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/gcc_before/Os/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization no.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/no/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/no/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/no/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O0.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O0/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O0/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O0/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O1.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O1/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O1/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O1/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O2.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O2/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O2/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O2/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization O3.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O3/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O3/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/O3/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The case of compiler clang with optimization Os.
Patched source code file: flvdec.c
Patched function: 1---static int flv_read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/Os/flvdec.s
Assembly file does not exist.
Patched function: 1---static int flv_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/Os/flvdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7ef94d221bf3fa7ae893c034d8d388542f63e017/clang_before/Os/flvdec.o
Binary file does not exist.
{'flv_read_header': [], 'flv_read_packet': []}
The analysis of 23 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/patch_info.txt
{'1': {'before': 'a/libavformat/mxf.c', 'after': 'b/libavformat/mxf.c'}}
{'1': [{'before': '-353,6', 'after': '+353,8', 'function': 'static int mxf_read_packet'}, {'before': '-365,6', 'after': '+367,7', 'function': 'static int mxf_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085---b/libavformat/mxf.c
The case of compiler gcc with optimization no.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/no/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/no/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/no/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O0.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O0/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O0/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O0/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O1.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O1/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O1/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O1/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O2.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O2/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O2/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O2/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O3.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O3/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O3/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/O3/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization Os.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/Os/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/Os/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_after/Os/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization no.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/no/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/no/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/no/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O0.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O0/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O0/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O0/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O1.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O1/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O1/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O1/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O2.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O2/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O2/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O2/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O3.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O3/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O3/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/O3/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization Os.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/Os/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/Os/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_after/Os/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085---a/libavformat/mxf.c
The case of compiler gcc with optimization no.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/no/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/no/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/no/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O0.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O0/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O0/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O0/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O1.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O1/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O1/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O1/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O2.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O2/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O2/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O2/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization O3.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O3/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O3/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/O3/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler gcc with optimization Os.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/Os/mxf_gcc.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/Os/mxf_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/gcc_before/Os/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization no.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/no/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/no/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/no/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O0.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O0/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O0/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O0/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O1.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O1/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O1/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O1/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O2.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O2/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O2/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O2/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization O3.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O3/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O3/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/O3/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The case of compiler clang with optimization Os.
Patched source code file: mxf.c
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/Os/mxf.s
Assembly file does not exist.
Patched function: 1---static int mxf_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/Os/mxf.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/72d334cab448864de018aa569c1b82c212362085/clang_before/Os/mxf.o
Binary file does not exist.
{'mxf_read_packet': []}
The analysis of 24 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/patch_info.txt
{'1': {'before': 'a/libavformat/asf-enc.c', 'after': 'b/libavformat/asf-enc.c'}}
{'1': [{'before': '-428,8', 'after': '+428,17', 'function': 'static int asf_write_header1'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d---b/libavformat/asf-enc.c
The case of compiler gcc with optimization no.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d---a/libavformat/asf-enc.c
The case of compiler gcc with optimization no.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: asf-enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7205395b683c05dbc99dc7148817f2cff74be96d/clang_before/Os: directory not exists.
The analysis of 25 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/patch_info.txt
{'1': {'before': 'a/libavcodec/ac3enc.c', 'after': 'b/libavcodec/ac3enc.c'}}
{'1': [{'before': '-1028,10', 'after': '+1028,18', 'function': 'static int bit_alloc'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800---b/libavcodec/ac3enc.c
The case of compiler gcc with optimization no.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/no/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/no/ac3enc_gcc.s---bit_alloc---after
function id: 75
function flag: True
There are 145 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 38, 'instruction': 'cltq'}, {'instIndex': 39, 'instruction': 'movzbl\t0x40(%rdx,%rax), %eax'}, {'instIndex': 40, 'instruction': 'testb\t%al, %al'}, {'instIndex': 41, 'instruction': 'jne\t.L214'}, {'instIndex': 42, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 45, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 46, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 47, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 48, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 49, 'instruction': 'salq\t$4, %rax'}, {'instIndex': 50, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x2030, %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 57, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 60, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 61, 'instruction': 'cltq'}, {'instIndex': 62, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 63, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 65, 'instruction': 'movl\t$0x100, %edx'}, {'instIndex': 66, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tmemcpy@PLT'}, {'instIndex': 69, 'instruction': 'jmp\t.L215'}, {'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 72, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 73, 'instruction': 'cltq'}, {'instIndex': 74, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 75, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 77, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 79, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 81, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 82, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 83, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 84, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 86, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 87, 'instruction': 'cltq'}, {'instIndex': 88, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 92, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 93, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 94, 'instruction': 'cltq'}, {'instIndex': 95, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 96, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 97, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 98, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 99, 'instruction': 'pushq\t%rcx'}, {'instIndex': 100, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 101, 'instruction': 'pushq\t%rcx'}, {'instIndex': 102, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 103, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 104, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 105, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 106, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 107, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 109, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 110, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 111, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 112, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 113, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 116, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 117, 'instruction': 'cltq'}, {'instIndex': 118, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 119, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 120, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 121, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 123, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 124, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 125, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 126, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 129, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 130, 'instruction': 'jl\t.L216'}, {'instIndex': 131, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 134, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/no/ac3enc.o
Binary file does not exist.
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 38, 'instruction': 'cltq'}, {'instIndex': 39, 'instruction': 'movzbl\t0x40(%rdx,%rax), %eax'}, {'instIndex': 40, 'instruction': 'testb\t%al, %al'}, {'instIndex': 41, 'instruction': 'jne\t.L214'}, {'instIndex': 42, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 45, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 46, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 47, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 48, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 49, 'instruction': 'salq\t$4, %rax'}, {'instIndex': 50, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x2030, %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 57, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 60, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 61, 'instruction': 'cltq'}, {'instIndex': 62, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 63, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 65, 'instruction': 'movl\t$0x100, %edx'}, {'instIndex': 66, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tmemcpy@PLT'}, {'instIndex': 69, 'instruction': 'jmp\t.L215'}, {'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 72, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 73, 'instruction': 'cltq'}, {'instIndex': 74, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 75, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 77, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 79, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 81, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 82, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 83, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 84, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 86, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 87, 'instruction': 'cltq'}, {'instIndex': 88, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 92, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 93, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 94, 'instruction': 'cltq'}, {'instIndex': 95, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 96, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 97, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 98, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 99, 'instruction': 'pushq\t%rcx'}, {'instIndex': 100, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 101, 'instruction': 'pushq\t%rcx'}, {'instIndex': 102, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 103, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 104, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 105, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 106, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 107, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 109, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 110, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 111, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 112, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 113, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 116, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 117, 'instruction': 'cltq'}, {'instIndex': 118, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 119, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 120, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 121, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 123, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 124, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 125, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 126, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 129, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 130, 'instruction': 'jl\t.L216'}, {'instIndex': 131, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 134, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O0/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O0/ac3enc_gcc.s---bit_alloc---after
function id: 75
function flag: True
There are 145 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 38, 'instruction': 'cltq'}, {'instIndex': 39, 'instruction': 'movzbl\t0x40(%rdx,%rax), %eax'}, {'instIndex': 40, 'instruction': 'testb\t%al, %al'}, {'instIndex': 41, 'instruction': 'jne\t.L214'}, {'instIndex': 42, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 45, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 46, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 47, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 48, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 49, 'instruction': 'salq\t$4, %rax'}, {'instIndex': 50, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x2030, %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 57, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 60, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 61, 'instruction': 'cltq'}, {'instIndex': 62, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 63, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 65, 'instruction': 'movl\t$0x100, %edx'}, {'instIndex': 66, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tmemcpy@PLT'}, {'instIndex': 69, 'instruction': 'jmp\t.L215'}, {'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 72, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 73, 'instruction': 'cltq'}, {'instIndex': 74, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 75, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 77, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 79, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 81, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 82, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 83, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 84, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 86, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 87, 'instruction': 'cltq'}, {'instIndex': 88, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 92, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 93, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 94, 'instruction': 'cltq'}, {'instIndex': 95, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 96, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 97, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 98, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 99, 'instruction': 'pushq\t%rcx'}, {'instIndex': 100, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 101, 'instruction': 'pushq\t%rcx'}, {'instIndex': 102, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 103, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 104, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 105, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 106, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 107, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 109, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 110, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 111, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 112, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 113, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 116, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 117, 'instruction': 'cltq'}, {'instIndex': 118, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 119, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 120, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 121, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 123, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 124, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 125, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 126, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 129, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 130, 'instruction': 'jl\t.L216'}, {'instIndex': 131, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 134, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O0/ac3enc.o
Binary file does not exist.
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 38, 'instruction': 'cltq'}, {'instIndex': 39, 'instruction': 'movzbl\t0x40(%rdx,%rax), %eax'}, {'instIndex': 40, 'instruction': 'testb\t%al, %al'}, {'instIndex': 41, 'instruction': 'jne\t.L214'}, {'instIndex': 42, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 45, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 46, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 47, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 48, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 49, 'instruction': 'salq\t$4, %rax'}, {'instIndex': 50, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x2030, %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 57, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 60, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 61, 'instruction': 'cltq'}, {'instIndex': 62, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 63, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 65, 'instruction': 'movl\t$0x100, %edx'}, {'instIndex': 66, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tmemcpy@PLT'}, {'instIndex': 69, 'instruction': 'jmp\t.L215'}, {'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 72, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 73, 'instruction': 'cltq'}, {'instIndex': 74, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 75, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 77, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 79, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 81, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 82, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 83, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 84, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 86, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 87, 'instruction': 'cltq'}, {'instIndex': 88, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 92, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 93, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 94, 'instruction': 'cltq'}, {'instIndex': 95, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 96, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 97, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 98, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 99, 'instruction': 'pushq\t%rcx'}, {'instIndex': 100, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 101, 'instruction': 'pushq\t%rcx'}, {'instIndex': 102, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 103, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 104, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 105, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 106, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 107, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 109, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 110, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 111, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 112, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 113, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 114, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 116, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 117, 'instruction': 'cltq'}, {'instIndex': 118, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 119, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 120, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 121, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 122, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 123, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 124, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 125, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 126, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 127, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 128, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 129, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 130, 'instruction': 'jl\t.L216'}, {'instIndex': 131, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 134, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O1/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O1/ac3enc_gcc.s---bit_alloc---after
function id: 84
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O1/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization O2.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O2/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O2/ac3enc_gcc.s---bit_alloc---after
function id: 80
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O2/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization O3.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O3/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O3/ac3enc_gcc.s---bit_alloc---after
function id: 208
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/O3/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization Os.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/Os/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/Os/ac3enc_gcc.s---bit_alloc---after
function id: 102
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_after/Os/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler clang with optimization no.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/no/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/no/ac3enc.s---bit_alloc---after
function id: 37
function flag: True
There are 100 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_9'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'movzbl\t0x40(%rax,%rcx), %eax'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.LBB37_6'}, {'instIndex': 34, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 37, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 38, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 40, 'instruction': 'movl\t0x48(%rsp), %ecx'}, {'instIndex': 41, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 42, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 43, 'instruction': 'imulq\t$0x50, %rcx, %rcx'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 48, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 49, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 50, 'instruction': 'jmp\t.LBB37_7'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 54, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 55, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 57, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 59, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 61, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 62, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 63, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 65, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 67, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 69, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 70, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 71, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 73, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 75, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 78, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 81, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 82, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 83, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 85, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 87, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 89, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 90, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 91, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 92, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/no/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/no/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 959 nodes and 1731 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 100 instructions in binary file.
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
The execution time of patched subCFG information extraction via angr: 0:00:01.656669
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "add" for 0x404076>, <DisassemblerInsn "mov" for 0x40407a>, <DisassemblerInsn "mov" for 0x40407e>, <DisassemblerInsn "add" for 0x404082>, <DisassemblerInsn "mov" for 0x404085>, <DisassemblerInsn "jmp" for 0x404089>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403fda>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe1>, <DisassemblerInsn "movsxd" for 0x403fe5>, <DisassemblerInsn "mov" for 0x403fea>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff3>, <DisassemblerInsn "movsxd" for 0x403ff7>, <DisassemblerInsn "mov" for 0x403ffc>, <DisassemblerInsn "mov" for 0x404000>, <DisassemblerInsn "movsxd" for 0x404005>, <DisassemblerInsn "mov" for 0x40400a>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "mov" for 0x404016>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "mov" for 0x404022>, <DisassemblerInsn "mov" for 0x404027>, <DisassemblerInsn "movsxd" for 0x40402a>, <DisassemblerInsn "mov" for 0x40402f>, <DisassemblerInsn "xor" for 0x404033>, <DisassemblerInsn "mov" for 0x404035>, <DisassemblerInsn "mov" for 0x40403c>, <DisassemblerInsn "mov" for 0x404040>, <DisassemblerInsn "call" for 0x404045>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40408e>, <DisassemblerInsn "call" for 0x404093>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "movsxd" for 0x403f88>, <DisassemblerInsn "movzx" for 0x403f8d>, <DisassemblerInsn "cmp" for 0x403f92>, <DisassemblerInsn "jne" for 0x403f95>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "add" for 0x404098>, <DisassemblerInsn "mov" for 0x40409c>, <DisassemblerInsn "mov" for 0x4040a0>, <DisassemblerInsn "add" for 0x4040a4>, <DisassemblerInsn "mov" for 0x4040a7>, <DisassemblerInsn "jmp" for 0x4040ab>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f97>, <DisassemblerInsn "mov" for 0x403f9c>, <DisassemblerInsn "movsxd" for 0x403f9f>, <DisassemblerInsn "mov" for 0x403fa4>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "add" for 0x403fad>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "sub" for 0x403fb7>, <DisassemblerInsn "movsxd" for 0x403fba>, <DisassemblerInsn "imul" for 0x403fbd>, <DisassemblerInsn "add" for 0x403fc1>, <DisassemblerInsn "mov" for 0x403fc4>, <DisassemblerInsn "movsxd" for 0x403fc7>, <DisassemblerInsn "mov" for 0x403fcc>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "call" for 0x403fd5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40404a>, <DisassemblerInsn "mov" for 0x40404f>, <DisassemblerInsn "mov" for 0x404054>, <DisassemblerInsn "movsxd" for 0x404057>, <DisassemblerInsn "mov" for 0x40405c>, <DisassemblerInsn "mov" for 0x404060>, <DisassemblerInsn "movsxd" for 0x404065>, <DisassemblerInsn "mov" for 0x40406a>, <DisassemblerInsn "call" for 0x404071>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 12, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40404a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc10c]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 5, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x404220>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<movzx~~eax, byte ptr [rax + rcx + 0x40]>', '<cmp~~eax, 0>', '<jne~~0x403fdc>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}, {'block_Idx': 8, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000f0>']}, {'block_Idx': 10, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404180>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}], 'cfg_edge_info': [(9, 10), (2, 4), (1, 2), (13, 4), (6, 9), (5, 8), (7, 10), (4, 6), (12, 13), (11, 2), (10, 12), (2, 5), (13, 5), (4, 7), (8, 11)]}]}
{'bit_alloc': [4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/no/ac3enc.o---after
The extraction of function: bit_alloc
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 56 edges in CFGEmulated.
It has 35 nodes and 54 edges in CDG.
It has 866 nodes and 1122 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
{4210466, 4210563, 4210439, 4210762, 4210542, 4210830, 4210583, 4210864, 4210806, 4210455, 4210840, 4210650, 4210652}
[34, 6, 4, 16, 21, 30, 24, 17, 23, 0, 13, 14, 18, 10, 22, 25, 27, 9]
The execution time of patched slicing information extraction via angr: 0:00:04.596122
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40417d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f97>, <DisassemblerInsn "mov" for 0x403f9c>, <DisassemblerInsn "movsxd" for 0x403f9f>, <DisassemblerInsn "mov" for 0x403fa4>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "add" for 0x403fad>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "sub" for 0x403fb7>, <DisassemblerInsn "movsxd" for 0x403fba>, <DisassemblerInsn "imul" for 0x403fbd>, <DisassemblerInsn "add" for 0x403fc1>, <DisassemblerInsn "mov" for 0x403fc4>, <DisassemblerInsn "movsxd" for 0x403fc7>, <DisassemblerInsn "mov" for 0x403fcc>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "call" for 0x403fd5>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "add" for 0x404098>, <DisassemblerInsn "mov" for 0x40409c>, <DisassemblerInsn "mov" for 0x4040a0>, <DisassemblerInsn "add" for 0x4040a4>, <DisassemblerInsn "mov" for 0x4040a7>, <DisassemblerInsn "jmp" for 0x4040ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "add" for 0x404076>, <DisassemblerInsn "mov" for 0x40407a>, <DisassemblerInsn "mov" for 0x40407e>, <DisassemblerInsn "add" for 0x404082>, <DisassemblerInsn "mov" for 0x404085>, <DisassemblerInsn "jmp" for 0x404089>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe1>, <DisassemblerInsn "movsxd" for 0x403fe5>, <DisassemblerInsn "mov" for 0x403fea>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff3>, <DisassemblerInsn "movsxd" for 0x403ff7>, <DisassemblerInsn "mov" for 0x403ffc>, <DisassemblerInsn "mov" for 0x404000>, <DisassemblerInsn "movsxd" for 0x404005>, <DisassemblerInsn "mov" for 0x40400a>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "mov" for 0x404016>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "mov" for 0x404022>, <DisassemblerInsn "mov" for 0x404027>, <DisassemblerInsn "movsxd" for 0x40402a>, <DisassemblerInsn "mov" for 0x40402f>, <DisassemblerInsn "xor" for 0x404033>, <DisassemblerInsn "mov" for 0x404035>, <DisassemblerInsn "mov" for 0x40403c>, <DisassemblerInsn "mov" for 0x404040>, <DisassemblerInsn "call" for 0x404045>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40404a>, <DisassemblerInsn "mov" for 0x40404f>, <DisassemblerInsn "mov" for 0x404054>, <DisassemblerInsn "movsxd" for 0x404057>, <DisassemblerInsn "mov" for 0x40405c>, <DisassemblerInsn "mov" for 0x404060>, <DisassemblerInsn "movsxd" for 0x404065>, <DisassemblerInsn "mov" for 0x40406a>, <DisassemblerInsn "call" for 0x404071>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403ee0>, <DisassemblerInsn "mov" for 0x403ee4>, <DisassemblerInsn "mov" for 0x403ee9>, <DisassemblerInsn "mov" for 0x403eed>, <DisassemblerInsn "sub" for 0x403ef1>, <DisassemblerInsn "shl" for 0x403ef6>, <DisassemblerInsn "mov" for 0x403ef9>, <DisassemblerInsn "mov" for 0x403efd>, <DisassemblerInsn "call" for 0x403f02>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "movsxd" for 0x403f88>, <DisassemblerInsn "movzx" for 0x403f8d>, <DisassemblerInsn "cmp" for 0x403f92>, <DisassemblerInsn "jne" for 0x403f95>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40408e>, <DisassemblerInsn "call" for 0x404093>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404220>, <DisassemblerInsn "mov" for 0x404225>, <DisassemblerInsn "mov" for 0x40422a>, <DisassemblerInsn "mov" for 0x40422d>, <DisassemblerInsn "cdq" for 0x404232>, <DisassemblerInsn "idiv" for 0x404233>, <DisassemblerInsn "imul" for 0x404235>, <DisassemblerInsn "mov" for 0x404238>, <DisassemblerInsn "mov" for 0x40423c>, <DisassemblerInsn "mov" for 0x404241>, <DisassemblerInsn "mov" for 0x404244>, <DisassemblerInsn "cdq" for 0x404249>, <DisassemblerInsn "idiv" for 0x40424a>, <DisassemblerInsn "mov" for 0x40424c>, <DisassemblerInsn "mov" for 0x404251>, <DisassemblerInsn "sar" for 0x404254>, <DisassemblerInsn "add" for 0x404256>, <DisassemblerInsn "imul" for 0x404258>, <DisassemblerInsn "add" for 0x40425b>, <DisassemblerInsn "mov" for 0x40425f>, <DisassemblerInsn "mov" for 0x404263>, <DisassemblerInsn "imul" for 0x404268>, <DisassemblerInsn "add" for 0x40426c>, <DisassemblerInsn "mov" for 0x404270>, <DisassemblerInsn "mov" for 0x404274>, <DisassemblerInsn "ret" for 0x404278>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4040b0>, <DisassemblerInsn "add" for 0x4040b4>, <DisassemblerInsn "ret" for 0x4040b8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403fda>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404180>, <DisassemblerInsn "mov" for 0x404185>, <DisassemblerInsn "mov" for 0x40418a>, <DisassemblerInsn "mov" for 0x40418e>, <DisassemblerInsn "mov" for 0x404196>, <DisassemblerInsn "mov" for 0x40419e>, <DisassemblerInsn "cmp" for 0x4041a2>, <DisassemblerInsn "jge" for 0x4041a6>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40421b>, <DisassemblerInsn "ret" for 0x40421f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 4, 'blockInsts': ['<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000f0>']}, {'block_Idx': 21, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 30, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc10c]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 23, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404180>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<sub~~eax, 0xf0>', '<shl~~eax, 2>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<call~~0x4040c0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<movzx~~eax, byte ptr [rax + rcx + 0x40]>', '<cmp~~eax, 0>', '<jne~~0x403fdc>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x404220>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 4]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 8]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<sar~~ecx, 1>', '<add~~eax, ecx>', '<imul~~eax, eax, 7>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<imul~~eax, dword ptr [rax + 0xc], 3>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~eax, dword ptr [rsp - 0xc]>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x40404a>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~dword ptr [rsp - 0x20], 0>', '<mov~~eax, dword ptr [rsp - 0x20]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jge~~0x40421b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x18]>', '<ret~~>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}], 'cfg_edge_info': [(4, 6), (34, 13), (22, 23), (23, 25), (9, 14), (13, 17), (16, 22), (21, 24), (14, 18), (14, 21), (23, 30), (17, 23), (9, 13), (27, 30), (24, 10), (13, 16), (6, 10), (18, 21), (34, 14), (0, 6), (24, 9), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 21), (6, 24), (34, 13), (34, 34), (24, 14), (9, 23), (13, 17), (6, 14), (9, 30), (34, 30), (9, 13), (13, 16), (9, 34), (13, 22), (34, 23), (24, 9), (24, 21), (6, 9), (24, 24)], 'ddg_edge_info': [(21, 10), (21, 16), (6, 21), (23, 16), (6, 24), (6, 30), (23, 13), (16, 17), (34, 16), (9, 17), (30, 21), (9, 23), (16, 13), (21, 9), (6, 14), (6, 17), (34, 9), (21, 24), (21, 30), (6, 9), (9, 16), (30, 14), (17, 23), (9, 13), (30, 17), (30, 23), (6, 13), (9, 34), (6, 10), (6, 16), (23, 17), (34, 17), (34, 23), (17, 16), (30, 13), (17, 13), (30, 16), (9, 30), (30, 34), (16, 23)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_9'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'movzbl\t0x40(%rax,%rcx), %eax'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.LBB37_6'}, {'instIndex': 34, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 37, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 38, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 40, 'instruction': 'movl\t0x48(%rsp), %ecx'}, {'instIndex': 41, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 42, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 43, 'instruction': 'imulq\t$0x50, %rcx, %rcx'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 48, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 49, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 50, 'instruction': 'jmp\t.LBB37_7'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 54, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 55, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 57, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 59, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 61, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 62, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 63, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 65, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 67, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 69, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 70, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 71, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 73, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 75, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 78, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 81, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 82, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 83, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 85, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 87, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 89, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 90, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 91, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 92, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O0/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O0/ac3enc.s---bit_alloc---after
function id: 37
function flag: True
There are 100 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_9'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'movzbl\t0x40(%rax,%rcx), %eax'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.LBB37_6'}, {'instIndex': 34, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 37, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 38, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 40, 'instruction': 'movl\t0x48(%rsp), %ecx'}, {'instIndex': 41, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 42, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 43, 'instruction': 'imulq\t$0x50, %rcx, %rcx'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 48, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 49, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 50, 'instruction': 'jmp\t.LBB37_7'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 54, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 55, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 57, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 59, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 61, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 62, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 63, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 65, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 67, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 69, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 70, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 71, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 73, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 75, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 78, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 81, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 82, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 83, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 85, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 87, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 89, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 90, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 91, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 92, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O0/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O0/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 959 nodes and 1731 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 100 instructions in binary file.
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
The execution time of patched subCFG information extraction via angr: 0:00:01.424452
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "add" for 0x404076>, <DisassemblerInsn "mov" for 0x40407a>, <DisassemblerInsn "mov" for 0x40407e>, <DisassemblerInsn "add" for 0x404082>, <DisassemblerInsn "mov" for 0x404085>, <DisassemblerInsn "jmp" for 0x404089>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403fda>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe1>, <DisassemblerInsn "movsxd" for 0x403fe5>, <DisassemblerInsn "mov" for 0x403fea>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff3>, <DisassemblerInsn "movsxd" for 0x403ff7>, <DisassemblerInsn "mov" for 0x403ffc>, <DisassemblerInsn "mov" for 0x404000>, <DisassemblerInsn "movsxd" for 0x404005>, <DisassemblerInsn "mov" for 0x40400a>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "mov" for 0x404016>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "mov" for 0x404022>, <DisassemblerInsn "mov" for 0x404027>, <DisassemblerInsn "movsxd" for 0x40402a>, <DisassemblerInsn "mov" for 0x40402f>, <DisassemblerInsn "xor" for 0x404033>, <DisassemblerInsn "mov" for 0x404035>, <DisassemblerInsn "mov" for 0x40403c>, <DisassemblerInsn "mov" for 0x404040>, <DisassemblerInsn "call" for 0x404045>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40408e>, <DisassemblerInsn "call" for 0x404093>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "movsxd" for 0x403f88>, <DisassemblerInsn "movzx" for 0x403f8d>, <DisassemblerInsn "cmp" for 0x403f92>, <DisassemblerInsn "jne" for 0x403f95>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "add" for 0x404098>, <DisassemblerInsn "mov" for 0x40409c>, <DisassemblerInsn "mov" for 0x4040a0>, <DisassemblerInsn "add" for 0x4040a4>, <DisassemblerInsn "mov" for 0x4040a7>, <DisassemblerInsn "jmp" for 0x4040ab>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f97>, <DisassemblerInsn "mov" for 0x403f9c>, <DisassemblerInsn "movsxd" for 0x403f9f>, <DisassemblerInsn "mov" for 0x403fa4>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "add" for 0x403fad>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "sub" for 0x403fb7>, <DisassemblerInsn "movsxd" for 0x403fba>, <DisassemblerInsn "imul" for 0x403fbd>, <DisassemblerInsn "add" for 0x403fc1>, <DisassemblerInsn "mov" for 0x403fc4>, <DisassemblerInsn "movsxd" for 0x403fc7>, <DisassemblerInsn "mov" for 0x403fcc>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "call" for 0x403fd5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40404a>, <DisassemblerInsn "mov" for 0x40404f>, <DisassemblerInsn "mov" for 0x404054>, <DisassemblerInsn "movsxd" for 0x404057>, <DisassemblerInsn "mov" for 0x40405c>, <DisassemblerInsn "mov" for 0x404060>, <DisassemblerInsn "movsxd" for 0x404065>, <DisassemblerInsn "mov" for 0x40406a>, <DisassemblerInsn "call" for 0x404071>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 12, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40404a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc10c]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 5, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x404220>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<movzx~~eax, byte ptr [rax + rcx + 0x40]>', '<cmp~~eax, 0>', '<jne~~0x403fdc>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}, {'block_Idx': 8, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000f0>']}, {'block_Idx': 10, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404180>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}], 'cfg_edge_info': [(9, 10), (2, 4), (1, 2), (13, 4), (6, 9), (5, 8), (7, 10), (4, 6), (12, 13), (11, 2), (10, 12), (2, 5), (13, 5), (4, 7), (8, 11)]}]}
{'bit_alloc': [4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O0/ac3enc.o---after
The extraction of function: bit_alloc
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 56 edges in CFGEmulated.
It has 35 nodes and 54 edges in CDG.
It has 866 nodes and 1122 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4210466, 4210542, 4210563, 4210583, 4210650, 4210652, 4210762, 4210806, 4210830, 4210840]
{4210466, 4210563, 4210439, 4210762, 4210542, 4210830, 4210583, 4210864, 4210806, 4210455, 4210840, 4210650, 4210652}
[34, 6, 4, 16, 21, 30, 24, 17, 23, 0, 13, 14, 18, 10, 22, 25, 27, 9]
The execution time of patched slicing information extraction via angr: 0:00:04.548717
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40417d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f97>, <DisassemblerInsn "mov" for 0x403f9c>, <DisassemblerInsn "movsxd" for 0x403f9f>, <DisassemblerInsn "mov" for 0x403fa4>, <DisassemblerInsn "mov" for 0x403fa8>, <DisassemblerInsn "add" for 0x403fad>, <DisassemblerInsn "mov" for 0x403fb3>, <DisassemblerInsn "sub" for 0x403fb7>, <DisassemblerInsn "movsxd" for 0x403fba>, <DisassemblerInsn "imul" for 0x403fbd>, <DisassemblerInsn "add" for 0x403fc1>, <DisassemblerInsn "mov" for 0x403fc4>, <DisassemblerInsn "movsxd" for 0x403fc7>, <DisassemblerInsn "mov" for 0x403fcc>, <DisassemblerInsn "mov" for 0x403fd0>, <DisassemblerInsn "call" for 0x403fd5>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "add" for 0x404098>, <DisassemblerInsn "mov" for 0x40409c>, <DisassemblerInsn "mov" for 0x4040a0>, <DisassemblerInsn "add" for 0x4040a4>, <DisassemblerInsn "mov" for 0x4040a7>, <DisassemblerInsn "jmp" for 0x4040ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "add" for 0x404076>, <DisassemblerInsn "mov" for 0x40407a>, <DisassemblerInsn "mov" for 0x40407e>, <DisassemblerInsn "add" for 0x404082>, <DisassemblerInsn "mov" for 0x404085>, <DisassemblerInsn "jmp" for 0x404089>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe1>, <DisassemblerInsn "movsxd" for 0x403fe5>, <DisassemblerInsn "mov" for 0x403fea>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff3>, <DisassemblerInsn "movsxd" for 0x403ff7>, <DisassemblerInsn "mov" for 0x403ffc>, <DisassemblerInsn "mov" for 0x404000>, <DisassemblerInsn "movsxd" for 0x404005>, <DisassemblerInsn "mov" for 0x40400a>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "mov" for 0x404016>, <DisassemblerInsn "mov" for 0x40401b>, <DisassemblerInsn "mov" for 0x404022>, <DisassemblerInsn "mov" for 0x404027>, <DisassemblerInsn "movsxd" for 0x40402a>, <DisassemblerInsn "mov" for 0x40402f>, <DisassemblerInsn "xor" for 0x404033>, <DisassemblerInsn "mov" for 0x404035>, <DisassemblerInsn "mov" for 0x40403c>, <DisassemblerInsn "mov" for 0x404040>, <DisassemblerInsn "call" for 0x404045>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40404a>, <DisassemblerInsn "mov" for 0x40404f>, <DisassemblerInsn "mov" for 0x404054>, <DisassemblerInsn "movsxd" for 0x404057>, <DisassemblerInsn "mov" for 0x40405c>, <DisassemblerInsn "mov" for 0x404060>, <DisassemblerInsn "movsxd" for 0x404065>, <DisassemblerInsn "mov" for 0x40406a>, <DisassemblerInsn "call" for 0x404071>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403ee0>, <DisassemblerInsn "mov" for 0x403ee4>, <DisassemblerInsn "mov" for 0x403ee9>, <DisassemblerInsn "mov" for 0x403eed>, <DisassemblerInsn "sub" for 0x403ef1>, <DisassemblerInsn "shl" for 0x403ef6>, <DisassemblerInsn "mov" for 0x403ef9>, <DisassemblerInsn "mov" for 0x403efd>, <DisassemblerInsn "call" for 0x403f02>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "movsxd" for 0x403f88>, <DisassemblerInsn "movzx" for 0x403f8d>, <DisassemblerInsn "cmp" for 0x403f92>, <DisassemblerInsn "jne" for 0x403f95>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40408e>, <DisassemblerInsn "call" for 0x404093>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404220>, <DisassemblerInsn "mov" for 0x404225>, <DisassemblerInsn "mov" for 0x40422a>, <DisassemblerInsn "mov" for 0x40422d>, <DisassemblerInsn "cdq" for 0x404232>, <DisassemblerInsn "idiv" for 0x404233>, <DisassemblerInsn "imul" for 0x404235>, <DisassemblerInsn "mov" for 0x404238>, <DisassemblerInsn "mov" for 0x40423c>, <DisassemblerInsn "mov" for 0x404241>, <DisassemblerInsn "mov" for 0x404244>, <DisassemblerInsn "cdq" for 0x404249>, <DisassemblerInsn "idiv" for 0x40424a>, <DisassemblerInsn "mov" for 0x40424c>, <DisassemblerInsn "mov" for 0x404251>, <DisassemblerInsn "sar" for 0x404254>, <DisassemblerInsn "add" for 0x404256>, <DisassemblerInsn "imul" for 0x404258>, <DisassemblerInsn "add" for 0x40425b>, <DisassemblerInsn "mov" for 0x40425f>, <DisassemblerInsn "mov" for 0x404263>, <DisassemblerInsn "imul" for 0x404268>, <DisassemblerInsn "add" for 0x40426c>, <DisassemblerInsn "mov" for 0x404270>, <DisassemblerInsn "mov" for 0x404274>, <DisassemblerInsn "ret" for 0x404278>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4040b0>, <DisassemblerInsn "add" for 0x4040b4>, <DisassemblerInsn "ret" for 0x4040b8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403fda>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404180>, <DisassemblerInsn "mov" for 0x404185>, <DisassemblerInsn "mov" for 0x40418a>, <DisassemblerInsn "mov" for 0x40418e>, <DisassemblerInsn "mov" for 0x404196>, <DisassemblerInsn "mov" for 0x40419e>, <DisassemblerInsn "cmp" for 0x4041a2>, <DisassemblerInsn "jge" for 0x4041a6>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40421b>, <DisassemblerInsn "ret" for 0x40421f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 4, 'blockInsts': ['<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000f0>']}, {'block_Idx': 21, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 30, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x4040b0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc10c]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 23, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404180>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<sub~~eax, 0xf0>', '<shl~~eax, 2>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<call~~0x4040c0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<movzx~~eax, byte ptr [rax + rcx + 0x40]>', '<cmp~~eax, 0>', '<jne~~0x403fdc>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x404220>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 4]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 8]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<sar~~ecx, 1>', '<add~~eax, ecx>', '<imul~~eax, eax, 7>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<imul~~eax, dword ptr [rax + 0xc], 3>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~eax, dword ptr [rsp - 0xc]>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x40404a>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~dword ptr [rsp - 0x20], 0>', '<mov~~eax, dword ptr [rsp - 0x20]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jge~~0x40421b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x18]>', '<ret~~>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x40408e>']}], 'cfg_edge_info': [(4, 6), (34, 13), (22, 23), (23, 25), (9, 14), (13, 17), (16, 22), (21, 24), (14, 18), (14, 21), (23, 30), (17, 23), (9, 13), (27, 30), (24, 10), (13, 16), (6, 10), (18, 21), (34, 14), (0, 6), (24, 9), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 21), (6, 24), (34, 13), (34, 34), (24, 14), (9, 23), (13, 17), (6, 14), (9, 30), (34, 30), (9, 13), (13, 16), (9, 34), (13, 22), (34, 23), (24, 9), (24, 21), (6, 9), (24, 24)], 'ddg_edge_info': [(21, 10), (21, 16), (6, 21), (23, 16), (6, 24), (6, 30), (23, 13), (16, 17), (34, 16), (9, 17), (30, 21), (9, 23), (16, 13), (21, 9), (6, 14), (6, 17), (34, 9), (21, 24), (21, 30), (6, 9), (9, 16), (30, 14), (17, 23), (9, 13), (30, 17), (30, 23), (6, 13), (9, 34), (6, 10), (6, 16), (23, 17), (34, 17), (34, 23), (17, 16), (30, 13), (17, 13), (30, 16), (9, 30), (30, 34), (16, 23)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_9'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'movzbl\t0x40(%rax,%rcx), %eax'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'jne\t.LBB37_6'}, {'instIndex': 34, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 37, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 38, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 40, 'instruction': 'movl\t0x48(%rsp), %ecx'}, {'instIndex': 41, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 42, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 43, 'instruction': 'imulq\t$0x50, %rcx, %rcx'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 48, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 49, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 50, 'instruction': 'jmp\t.LBB37_7'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 54, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 55, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 57, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 58, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 59, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 61, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 62, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 63, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 65, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 67, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 69, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 70, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 71, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 73, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 75, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 78, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 81, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 82, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 83, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 85, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 87, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 89, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 90, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 91, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 92, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O1/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O1/ac3enc.s---bit_alloc---after
function id: 3
function flag: True
There are 309 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 122, 'instruction': 'movl\t$2, (%rdi)'}, {'instIndex': 123, 'instruction': 'movl\t$2, (%rsi)'}, {'instIndex': 124, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 125, 'instruction': 'cmpl\t$0, (%rcx)'}, {'instIndex': 126, 'instruction': 'movl\t%eax, 0xa4(%rsp)                 # 4-byte Spill'}, {'instIndex': 127, 'instruction': 'jle\t.LBB3_21'}, {'instIndex': 157, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 158, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 159, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 160, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 161, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 162, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 163, 'instruction': 'jne\t.LBB3_11'}, {'instIndex': 167, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 168, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 169, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 170, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 171, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 172, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 173, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 181, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 182, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 183, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 184, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 185, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 186, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 187, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 188, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 189, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 190, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 191, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 192, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 193, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 197, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 198, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 199, 'instruction': 'movq\t%rdx, 0x48(%rsp)                  # 8-byte Spill'}, {'instIndex': 200, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 201, 'instruction': 'movl\t%ecx, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 264, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 265, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 266, 'instruction': 'movslq\t(%rdx), %rdx'}, {'instIndex': 267, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 268, 'instruction': 'movq\t%rcx, 0x80(%rsp)                 # 8-byte Spill'}, {'instIndex': 272, 'instruction': 'jl\t.LBB3_9'}, {'instIndex': 299, 'instruction': 'addl\t%edx, %eax'}, {'instIndex': 300, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O1/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O1/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 703 nodes and 1294 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 309 instructions in binary file.
[4228437, 4228678, 4228834, 4228949, 4229014, 4229056, 4229058, 4229159, 4229420, 4229483]
The execution time of patched subCFG information extraction via angr: 0:00:06.344710
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408827>, <DisassemblerInsn "mov" for 0x40882f>, <DisassemblerInsn "mov" for 0x408834>, <DisassemblerInsn "mov" for 0x40883c>, <DisassemblerInsn "mov" for 0x40883f>, <DisassemblerInsn "mov" for 0x408843>, <DisassemblerInsn "mov" for 0x408848>, <DisassemblerInsn "mov" for 0x40884f>, <DisassemblerInsn "xor" for 0x408853>, <DisassemblerInsn "cmp" for 0x408855>, <DisassemblerInsn "mov" for 0x408858>, <DisassemblerInsn "jle" for 0x40885c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4087c0>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408537>, <DisassemblerInsn "add" for 0x40853f>, <DisassemblerInsn "cmp" for 0x408543>, <DisassemblerInsn "mov" for 0x408547>, <DisassemblerInsn "jne" for 0x40854f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087c2>, <DisassemblerInsn "mov" for 0x4087ca>, <DisassemblerInsn "mov" for 0x4087cf>, <DisassemblerInsn "mov" for 0x4087d7>, <DisassemblerInsn "mov" for 0x4087df>, <DisassemblerInsn "mov" for 0x4087e7>, <DisassemblerInsn "mov" for 0x4087ec>, <DisassemblerInsn "mov" for 0x4087f1>, <DisassemblerInsn "mov" for 0x4087f4>, <DisassemblerInsn "mov" for 0x4087f8>, <DisassemblerInsn "mov" for 0x4087fb>, <DisassemblerInsn "mov" for 0x4087ff>, <DisassemblerInsn "mov" for 0x408806>, <DisassemblerInsn "mov" for 0x408809>, <DisassemblerInsn "mov" for 0x40880c>, <DisassemblerInsn "xor" for 0x408810>, <DisassemblerInsn "mov" for 0x408812>, <DisassemblerInsn "mov" for 0x408819>, <DisassemblerInsn "mov" for 0x40881d>, <DisassemblerInsn "call" for 0x408822>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408686>, <DisassemblerInsn "mov" for 0x40868d>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "add" for 0x40869c>, <DisassemblerInsn "imul" for 0x4086a3>, <DisassemblerInsn "add" for 0x4086a7>, <DisassemblerInsn "mov" for 0x4086aa>, <DisassemblerInsn "mov" for 0x4086b2>, <DisassemblerInsn "mov" for 0x4086b9>, <DisassemblerInsn "mov" for 0x4086c0>, <DisassemblerInsn "mov" for 0x4086c6>, <DisassemblerInsn "mov" for 0x4086cc>, <DisassemblerInsn "cmp" for 0x4086d2>, <DisassemblerInsn "mov" for 0x4086d5>, <DisassemblerInsn "jle" for 0x4086dc>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408755>, <DisassemblerInsn "mov" for 0x40875d>, <DisassemblerInsn "mov" for 0x408765>, <DisassemblerInsn "mov" for 0x40876d>, <DisassemblerInsn "mov" for 0x408774>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "add" for 0x40877d>, <DisassemblerInsn "imul" for 0x408783>, <DisassemblerInsn "add" for 0x408787>, <DisassemblerInsn "add" for 0x40878a>, <DisassemblerInsn "add" for 0x40878e>, <DisassemblerInsn "cmp" for 0x408791>, <DisassemblerInsn "jne" for 0x408794>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40896b>, <DisassemblerInsn "mov" for 0x408973>, <DisassemblerInsn "mov" for 0x40897b>, <DisassemblerInsn "mov" for 0x408983>, <DisassemblerInsn "mov" for 0x40898a>, <DisassemblerInsn "mov" for 0x40898c>, <DisassemblerInsn "cdq" for 0x408992>, <DisassemblerInsn "idiv" for 0x408993>, <DisassemblerInsn "mov" for 0x408996>, <DisassemblerInsn "mov" for 0x408998>, <DisassemblerInsn "imul" for 0x4089a0>, <DisassemblerInsn "mov" for 0x4089a3>, <DisassemblerInsn "mov" for 0x4089a7>, <DisassemblerInsn "mov" for 0x4089a9>, <DisassemblerInsn "cdq" for 0x4089af>, <DisassemblerInsn "idiv" for 0x4089b0>, <DisassemblerInsn "mov" for 0x4089b3>, <DisassemblerInsn "mov" for 0x4089bb>, <DisassemblerInsn "mov" for 0x4089be>, <DisassemblerInsn "mov" for 0x4089c2>, <DisassemblerInsn "sar" for 0x4089c4>, <DisassemblerInsn "add" for 0x4089c6>, <DisassemblerInsn "imul" for 0x4089c9>, <DisassemblerInsn "imul" for 0x4089cc>, <DisassemblerInsn "add" for 0x4089cf>, <DisassemblerInsn "add" for 0x4089d1>, <DisassemblerInsn "add" for 0x4089d3>, <DisassemblerInsn "mov" for 0x4089d5>, <DisassemblerInsn "add" for 0x4089d9>, <DisassemblerInsn "cmp" for 0x4089dd>, <DisassemblerInsn "mov" for 0x4089e1>, <DisassemblerInsn "mov" for 0x4089e9>, <DisassemblerInsn "jne" for 0x4089f0>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40892c>, <DisassemblerInsn "mov" for 0x408934>, <DisassemblerInsn "mov" for 0x408939>, <DisassemblerInsn "mov" for 0x40893d>, <DisassemblerInsn "add" for 0x408941>, <DisassemblerInsn "add" for 0x408943>, <DisassemblerInsn "movsxd" for 0x408947>, <DisassemblerInsn "cmp" for 0x40894a>, <DisassemblerInsn "mov" for 0x40894d>, <DisassemblerInsn "mov" for 0x408955>, <DisassemblerInsn "mov" for 0x408957>, <DisassemblerInsn "mov" for 0x40895e>, <DisassemblerInsn "jl" for 0x408965>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408862>, <DisassemblerInsn "mov" for 0x408866>, <DisassemblerInsn "mov" for 0x408868>, <DisassemblerInsn "xor" for 0x40886d>, <DisassemblerInsn "mov" for 0x40886f>, <DisassemblerInsn "xor" for 0x408871>, <DisassemblerInsn "mov" for 0x408873>, <DisassemblerInsn "mov" for 0x408878>, <DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "mov" for 0x40888a>, <DisassemblerInsn "mov" for 0x40888e>, <DisassemblerInsn "mov" for 0x408893>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "movzx" for 0x40889a>, <DisassemblerInsn "mov" for 0x40889d>, <DisassemblerInsn "cmp" for 0x4088a1>, <DisassemblerInsn "jae" for 0x4088a3>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4089f6>, <DisassemblerInsn "add" for 0x4089fa>, <DisassemblerInsn "ret" for 0x408a01>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4086e2>, <DisassemblerInsn "mov" for 0x4086e9>, <DisassemblerInsn "mov" for 0x4086f1>, <DisassemblerInsn "mov" for 0x4086f9>, <DisassemblerInsn "add" for 0x4086fc>, <DisassemblerInsn "imul" for 0x408703>, <DisassemblerInsn "add" for 0x408707>, <DisassemblerInsn "add" for 0x40870a>, <DisassemblerInsn "mov" for 0x40870e>, <DisassemblerInsn "mov" for 0x408713>, <DisassemblerInsn "add" for 0x408716>, <DisassemblerInsn "imul" for 0x40871d>, <DisassemblerInsn "add" for 0x408721>, <DisassemblerInsn "add" for 0x408724>, <DisassemblerInsn "mov" for 0x408728>, <DisassemblerInsn "add" for 0x40872d>, <DisassemblerInsn "add" for 0x408731>, <DisassemblerInsn "imul" for 0x408738>, <DisassemblerInsn "add" for 0x40873c>, <DisassemblerInsn "mov" for 0x40873f>, <DisassemblerInsn "xor" for 0x408744>, <DisassemblerInsn "mov" for 0x408746>, <DisassemblerInsn "mov" for 0x40874e>, <DisassemblerInsn "mov" for 0x408755>, <DisassemblerInsn "mov" for 0x40875d>, <DisassemblerInsn "mov" for 0x408765>, <DisassemblerInsn "mov" for 0x40876d>, <DisassemblerInsn "mov" for 0x408774>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "add" for 0x40877d>, <DisassemblerInsn "imul" for 0x408783>, <DisassemblerInsn "add" for 0x408787>, <DisassemblerInsn "add" for 0x40878a>, <DisassemblerInsn "add" for 0x40878e>, <DisassemblerInsn "cmp" for 0x408791>, <DisassemblerInsn "jne" for 0x408794>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408902>, <DisassemblerInsn "mov" for 0x408907>, <DisassemblerInsn "mov" for 0x40890c>, <DisassemblerInsn "add" for 0x408910>, <DisassemblerInsn "cmp" for 0x408914>, <DisassemblerInsn "mov" for 0x408917>, <DisassemblerInsn "mov" for 0x40891c>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408922>, <DisassemblerInsn "jne" for 0x408926>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4083e0>, <DisassemblerInsn "mov" for 0x4083e7>, <DisassemblerInsn "mov" for 0x4083e9>, <DisassemblerInsn "lea" for 0x4083f1>, <DisassemblerInsn "shl" for 0x4083f9>, <DisassemblerInsn "add" for 0x4083fc>, <DisassemblerInsn "mov" for 0x408401>, <DisassemblerInsn "mov" for 0x408408>, <DisassemblerInsn "mov" for 0x40840f>, <DisassemblerInsn "mov" for 0x408412>, <DisassemblerInsn "add" for 0x408415>, <DisassemblerInsn "mov" for 0x40841c>, <DisassemblerInsn "cmp" for 0x408424>, <DisassemblerInsn "je" for 0x40842b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088e2>, <DisassemblerInsn "mov" for 0x4088e6>, <DisassemblerInsn "mov" for 0x4088eb>, <DisassemblerInsn "mov" for 0x4088f0>, <DisassemblerInsn "cmp" for 0x4088f5>, <DisassemblerInsn "cmove" for 0x4088f9>, <DisassemblerInsn "add" for 0x4088fc>, <DisassemblerInsn "mov" for 0x4088fe>, <DisassemblerInsn "mov" for 0x408902>, <DisassemblerInsn "mov" for 0x408907>, <DisassemblerInsn "mov" for 0x40890c>, <DisassemblerInsn "add" for 0x408910>, <DisassemblerInsn "cmp" for 0x408914>, <DisassemblerInsn "mov" for 0x408917>, <DisassemblerInsn "mov" for 0x40891c>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408922>, <DisassemblerInsn "jne" for 0x408926>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408555>, <DisassemblerInsn "lea" for 0x40855d>, <DisassemblerInsn "add" for 0x408565>, <DisassemblerInsn "mov" for 0x408569>, <DisassemblerInsn "lea" for 0x408571>, <DisassemblerInsn "mov" for 0x408579>, <DisassemblerInsn "lea" for 0x408581>, <DisassemblerInsn "add" for 0x408589>, <DisassemblerInsn "mov" for 0x40858d>, <DisassemblerInsn "lea" for 0x408595>, <DisassemblerInsn "add" for 0x40859d>, <DisassemblerInsn "mov" for 0x4085a1>, <DisassemblerInsn "lea" for 0x4085a9>, <DisassemblerInsn "add" for 0x4085b1>, <DisassemblerInsn "mov" for 0x4085b5>, <DisassemblerInsn "mov" for 0x4085bd>, <DisassemblerInsn "add" for 0x4085c0>, <DisassemblerInsn "mov" for 0x4085c7>, <DisassemblerInsn "add" for 0x4085cf>, <DisassemblerInsn "add" for 0x4085d5>, <DisassemblerInsn "mov" for 0x4085d9>, <DisassemblerInsn "lea" for 0x4085e1>, <DisassemblerInsn "add" for 0x4085e9>, <DisassemblerInsn "mov" for 0x4085ed>, <DisassemblerInsn "lea" for 0x4085f5>, <DisassemblerInsn "add" for 0x4085fd>, <DisassemblerInsn "mov" for 0x408601>, <DisassemblerInsn "lea" for 0x408609>, <DisassemblerInsn "add" for 0x408611>, <DisassemblerInsn "mov" for 0x408615>, <DisassemblerInsn "lea" for 0x40861d>, <DisassemblerInsn "add" for 0x408625>, <DisassemblerInsn "mov" for 0x408629>, <DisassemblerInsn "xor" for 0x408631>, <DisassemblerInsn "mov" for 0x408633>, <DisassemblerInsn "xor" for 0x408635>, <DisassemblerInsn "mov" for 0x408637>, <DisassemblerInsn "mov" for 0x40863f>, <DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408686>, <DisassemblerInsn "mov" for 0x40868d>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "add" for 0x40869c>, <DisassemblerInsn "imul" for 0x4086a3>, <DisassemblerInsn "add" for 0x4086a7>, <DisassemblerInsn "mov" for 0x4086aa>, <DisassemblerInsn "mov" for 0x4086b2>, <DisassemblerInsn "mov" for 0x4086b9>, <DisassemblerInsn "mov" for 0x4086c0>, <DisassemblerInsn "mov" for 0x4086c6>, <DisassemblerInsn "mov" for 0x4086cc>, <DisassemblerInsn "cmp" for 0x4086d2>, <DisassemblerInsn "mov" for 0x4086d5>, <DisassemblerInsn "jle" for 0x4086dc>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879b>, <DisassemblerInsn "mov" for 0x4087a0>, <DisassemblerInsn "mov" for 0x4087a8>, <DisassemblerInsn "mov" for 0x4087ab>, <DisassemblerInsn "mov" for 0x4087af>, <DisassemblerInsn "mov" for 0x4087b2>, <DisassemblerInsn "mov" for 0x4087b6>, <DisassemblerInsn "call" for 0x4087bb>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jle~~0x40892c>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x408827>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<add~~rax, 1>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x160], rax>', '<jne~~0x408460>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0x174]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~r9, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf793f]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r8, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0xa8]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], r11>', '<add~~r10, 0x2030>', '<imul~~r11, r11, 0x50>', '<add~~r10, r11>', '<mov~~qword ptr [rsp + 0x98], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jle~~0x40896b>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x4087c2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~edi, dword ptr [rsp + 0xa4]>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x10], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rdx]>', '<sar~~edx, 1>', '<add~~edx, r8d>', '<imul~~edx, edx, 7>', '<imul~~esi, dword ptr [rsi], 3>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x14], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jne~~0x408646>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x58]>', '<add~~eax, esi>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rdx]>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x88], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jl~~0x408755>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x30], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x4088c7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~rsp, 0x198>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x4087c2>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jne~~0x40887c>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x198>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<lea~~rcx, [rsp + 0x180]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0x174], eax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x178], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x408555>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~sil, byte ptr [rsp + 0x2b]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jne~~0x40887c>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 0xc>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2238>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r8, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0xa8]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], r11>', '<add~~r10, 0x2030>', '<imul~~r11, r11, 0x50>', '<add~~r10, r11>', '<mov~~qword ptr [rsp + 0x98], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jle~~0x40896b>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}], 'cfg_edge_info': [(21, 16), (4, 9), (23, 16), (3, 7), (14, 16), (8, 3), (1, 3), (13, 14), (18, 10), (0, 1), (11, 1), (9, 13), (10, 14), (16, 3), (18, 9), (16, 18), (4, 10), (3, 8), (8, 4), (14, 17), (1, 4)]}]}
{'bit_alloc': [4228437, 4228678, 4228834, 4228949, 4229014, 4229056, 4229058, 4229159, 4229420, 4229483]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O1/ac3enc.o---after
The extraction of function: bit_alloc
[4228437, 4228678, 4228834, 4228949, 4229014, 4229056, 4229058, 4229159, 4229420, 4229483]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 27 nodes and 46 edges in CFGEmulated.
It has 26 nodes and 43 edges in CDG.
It has 1136 nodes and 1452 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4228437, 4228678, 4228834, 4228949, 4229014, 4229056, 4229058, 4229159, 4229420, 4229483]
{4228224, 4229378, 4229014, 4229285, 4229159, 4229420, 4228145, 4228407, 4229056, 4229058, 4228678, 4229319, 4228294, 4229327, 4228437, 4228949, 4228064, 4228192, 4228834, 4229218, 4229346, 4229483, 4229622, 4229244}
[8, 22, 26, 10, 11, 9, 17, 4, 6, 12, 15, 7, 24, 20, 2, 18, 25, 21, 3, 5, 23, 1, 0, 16, 19]
The execution time of patched slicing information extraction via angr: 0:00:05.873089
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4089f6>, <DisassemblerInsn "add" for 0x4089fa>, <DisassemblerInsn "ret" for 0x408a01>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088c7>, <DisassemblerInsn "cmp" for 0x4088cb>, <DisassemblerInsn "jae" for 0x4088cd>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "mov" for 0x40888a>, <DisassemblerInsn "mov" for 0x40888e>, <DisassemblerInsn "mov" for 0x408893>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "movzx" for 0x40889a>, <DisassemblerInsn "mov" for 0x40889d>, <DisassemblerInsn "cmp" for 0x4088a1>, <DisassemblerInsn "jae" for 0x4088a3>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087c2>, <DisassemblerInsn "mov" for 0x4087ca>, <DisassemblerInsn "mov" for 0x4087cf>, <DisassemblerInsn "mov" for 0x4087d7>, <DisassemblerInsn "mov" for 0x4087df>, <DisassemblerInsn "mov" for 0x4087e7>, <DisassemblerInsn "mov" for 0x4087ec>, <DisassemblerInsn "mov" for 0x4087f1>, <DisassemblerInsn "mov" for 0x4087f4>, <DisassemblerInsn "mov" for 0x4087f8>, <DisassemblerInsn "mov" for 0x4087fb>, <DisassemblerInsn "mov" for 0x4087ff>, <DisassemblerInsn "mov" for 0x408806>, <DisassemblerInsn "mov" for 0x408809>, <DisassemblerInsn "mov" for 0x40880c>, <DisassemblerInsn "xor" for 0x408810>, <DisassemblerInsn "mov" for 0x408812>, <DisassemblerInsn "mov" for 0x408819>, <DisassemblerInsn "mov" for 0x40881d>, <DisassemblerInsn "call" for 0x408822>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408537>, <DisassemblerInsn "add" for 0x40853f>, <DisassemblerInsn "cmp" for 0x408543>, <DisassemblerInsn "mov" for 0x408547>, <DisassemblerInsn "jne" for 0x40854f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879b>, <DisassemblerInsn "mov" for 0x4087a0>, <DisassemblerInsn "mov" for 0x4087a8>, <DisassemblerInsn "mov" for 0x4087ab>, <DisassemblerInsn "mov" for 0x4087af>, <DisassemblerInsn "mov" for 0x4087b2>, <DisassemblerInsn "mov" for 0x4087b6>, <DisassemblerInsn "call" for 0x4087bb>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408827>, <DisassemblerInsn "mov" for 0x40882f>, <DisassemblerInsn "mov" for 0x408834>, <DisassemblerInsn "mov" for 0x40883c>, <DisassemblerInsn "mov" for 0x40883f>, <DisassemblerInsn "mov" for 0x408843>, <DisassemblerInsn "mov" for 0x408848>, <DisassemblerInsn "mov" for 0x40884f>, <DisassemblerInsn "xor" for 0x408853>, <DisassemblerInsn "cmp" for 0x408855>, <DisassemblerInsn "mov" for 0x408858>, <DisassemblerInsn "jle" for 0x40885c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4086e2>, <DisassemblerInsn "mov" for 0x4086e9>, <DisassemblerInsn "mov" for 0x4086f1>, <DisassemblerInsn "mov" for 0x4086f9>, <DisassemblerInsn "add" for 0x4086fc>, <DisassemblerInsn "imul" for 0x408703>, <DisassemblerInsn "add" for 0x408707>, <DisassemblerInsn "add" for 0x40870a>, <DisassemblerInsn "mov" for 0x40870e>, <DisassemblerInsn "mov" for 0x408713>, <DisassemblerInsn "add" for 0x408716>, <DisassemblerInsn "imul" for 0x40871d>, <DisassemblerInsn "add" for 0x408721>, <DisassemblerInsn "add" for 0x408724>, <DisassemblerInsn "mov" for 0x408728>, <DisassemblerInsn "add" for 0x40872d>, <DisassemblerInsn "add" for 0x408731>, <DisassemblerInsn "imul" for 0x408738>, <DisassemblerInsn "add" for 0x40873c>, <DisassemblerInsn "mov" for 0x40873f>, <DisassemblerInsn "xor" for 0x408744>, <DisassemblerInsn "mov" for 0x408746>, <DisassemblerInsn "mov" for 0x40874e>, <DisassemblerInsn "mov" for 0x408755>, <DisassemblerInsn "mov" for 0x40875d>, <DisassemblerInsn "mov" for 0x408765>, <DisassemblerInsn "mov" for 0x40876d>, <DisassemblerInsn "mov" for 0x408774>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "add" for 0x40877d>, <DisassemblerInsn "imul" for 0x408783>, <DisassemblerInsn "add" for 0x408787>, <DisassemblerInsn "add" for 0x40878a>, <DisassemblerInsn "add" for 0x40878e>, <DisassemblerInsn "cmp" for 0x408791>, <DisassemblerInsn "jne" for 0x408794>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408480>, <DisassemblerInsn "mov" for 0x408488>, <DisassemblerInsn "mov" for 0x408490>, <DisassemblerInsn "mov" for 0x408498>, <DisassemblerInsn "imul" for 0x40849b>, <DisassemblerInsn "mov" for 0x40849f>, <DisassemblerInsn "add" for 0x4084a7>, <DisassemblerInsn "imul" for 0x4084ad>, <DisassemblerInsn "add" for 0x4084b1>, <DisassemblerInsn "mov" for 0x4084b4>, <DisassemblerInsn "xor" for 0x4084bc>, <DisassemblerInsn "mov" for 0x4084be>, <DisassemblerInsn "mov" for 0x4084c6>, <DisassemblerInsn "mov" for 0x4084ce>, <DisassemblerInsn "mov" for 0x4084d6>, <DisassemblerInsn "mov" for 0x4084de>, <DisassemblerInsn "mov" for 0x4084e6>, <DisassemblerInsn "mov" for 0x4084ee>, <DisassemblerInsn "mov" for 0x4084f1>, <DisassemblerInsn "add" for 0x4084f4>, <DisassemblerInsn "mov" for 0x4084f7>, <DisassemblerInsn "shl" for 0x4084ff>, <DisassemblerInsn "mov" for 0x408502>, <DisassemblerInsn "movsxd" for 0x408509>, <DisassemblerInsn "add" for 0x40850c>, <DisassemblerInsn "mov" for 0x40850f>, <DisassemblerInsn "mov" for 0x408517>, <DisassemblerInsn "mov" for 0x40851a>, <DisassemblerInsn "add" for 0x40851e>, <DisassemblerInsn "mov" for 0x408522>, <DisassemblerInsn "cmp" for 0x40852a>, <DisassemblerInsn "mov" for 0x40852d>, <DisassemblerInsn "jne" for 0x408535>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4084c6>, <DisassemblerInsn "mov" for 0x4084ce>, <DisassemblerInsn "mov" for 0x4084d6>, <DisassemblerInsn "mov" for 0x4084de>, <DisassemblerInsn "mov" for 0x4084e6>, <DisassemblerInsn "mov" for 0x4084ee>, <DisassemblerInsn "mov" for 0x4084f1>, <DisassemblerInsn "add" for 0x4084f4>, <DisassemblerInsn "mov" for 0x4084f7>, <DisassemblerInsn "shl" for 0x4084ff>, <DisassemblerInsn "mov" for 0x408502>, <DisassemblerInsn "movsxd" for 0x408509>, <DisassemblerInsn "add" for 0x40850c>, <DisassemblerInsn "mov" for 0x40850f>, <DisassemblerInsn "mov" for 0x408517>, <DisassemblerInsn "mov" for 0x40851a>, <DisassemblerInsn "add" for 0x40851e>, <DisassemblerInsn "mov" for 0x408522>, <DisassemblerInsn "cmp" for 0x40852a>, <DisassemblerInsn "mov" for 0x40852d>, <DisassemblerInsn "jne" for 0x408535>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408460>, <DisassemblerInsn "mov" for 0x408467>, <DisassemblerInsn "mov" for 0x40846f>, <DisassemblerInsn "test" for 0x408477>, <DisassemblerInsn "jne" for 0x408479>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408686>, <DisassemblerInsn "mov" for 0x40868d>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "add" for 0x40869c>, <DisassemblerInsn "imul" for 0x4086a3>, <DisassemblerInsn "add" for 0x4086a7>, <DisassemblerInsn "mov" for 0x4086aa>, <DisassemblerInsn "mov" for 0x4086b2>, <DisassemblerInsn "mov" for 0x4086b9>, <DisassemblerInsn "mov" for 0x4086c0>, <DisassemblerInsn "mov" for 0x4086c6>, <DisassemblerInsn "mov" for 0x4086cc>, <DisassemblerInsn "cmp" for 0x4086d2>, <DisassemblerInsn "mov" for 0x4086d5>, <DisassemblerInsn "jle" for 0x4086dc>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088cf>, <DisassemblerInsn "mov" for 0x4088d3>, <DisassemblerInsn "add" for 0x4088d7>, <DisassemblerInsn "add" for 0x4088da>, <DisassemblerInsn "mov" for 0x4088dc>, <DisassemblerInsn "jmp" for 0x4088e0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408755>, <DisassemblerInsn "mov" for 0x40875d>, <DisassemblerInsn "mov" for 0x408765>, <DisassemblerInsn "mov" for 0x40876d>, <DisassemblerInsn "mov" for 0x408774>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "add" for 0x40877d>, <DisassemblerInsn "imul" for 0x408783>, <DisassemblerInsn "add" for 0x408787>, <DisassemblerInsn "add" for 0x40878a>, <DisassemblerInsn "add" for 0x40878e>, <DisassemblerInsn "cmp" for 0x408791>, <DisassemblerInsn "jne" for 0x408794>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408431>, <DisassemblerInsn "mov" for 0x408439>, <DisassemblerInsn "cmp" for 0x40843f>, <DisassemblerInsn "setg" for 0x408442>, <DisassemblerInsn "mov" for 0x408445>, <DisassemblerInsn "mov" for 0x40844c>, <DisassemblerInsn "mov" for 0x40844e>, <DisassemblerInsn "xor" for 0x408456>, <DisassemblerInsn "mov" for 0x408458>, <DisassemblerInsn "mov" for 0x408460>, <DisassemblerInsn "mov" for 0x408467>, <DisassemblerInsn "mov" for 0x40846f>, <DisassemblerInsn "test" for 0x408477>, <DisassemblerInsn "jne" for 0x408479>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40892c>, <DisassemblerInsn "mov" for 0x408934>, <DisassemblerInsn "mov" for 0x408939>, <DisassemblerInsn "mov" for 0x40893d>, <DisassemblerInsn "add" for 0x408941>, <DisassemblerInsn "add" for 0x408943>, <DisassemblerInsn "movsxd" for 0x408947>, <DisassemblerInsn "cmp" for 0x40894a>, <DisassemblerInsn "mov" for 0x40894d>, <DisassemblerInsn "mov" for 0x408955>, <DisassemblerInsn "mov" for 0x408957>, <DisassemblerInsn "mov" for 0x40895e>, <DisassemblerInsn "jl" for 0x408965>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088e2>, <DisassemblerInsn "mov" for 0x4088e6>, <DisassemblerInsn "mov" for 0x4088eb>, <DisassemblerInsn "mov" for 0x4088f0>, <DisassemblerInsn "cmp" for 0x4088f5>, <DisassemblerInsn "cmove" for 0x4088f9>, <DisassemblerInsn "add" for 0x4088fc>, <DisassemblerInsn "mov" for 0x4088fe>, <DisassemblerInsn "mov" for 0x408902>, <DisassemblerInsn "mov" for 0x408907>, <DisassemblerInsn "mov" for 0x40890c>, <DisassemblerInsn "add" for 0x408910>, <DisassemblerInsn "cmp" for 0x408914>, <DisassemblerInsn "mov" for 0x408917>, <DisassemblerInsn "mov" for 0x40891c>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408922>, <DisassemblerInsn "jne" for 0x408926>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088a5>, <DisassemblerInsn "mov" for 0x4088a9>, <DisassemblerInsn "movzx" for 0x4088ad>, <DisassemblerInsn "mov" for 0x4088b0>, <DisassemblerInsn "add" for 0x4088b7>, <DisassemblerInsn "mov" for 0x4088ba>, <DisassemblerInsn "mov" for 0x4088c1>, <DisassemblerInsn "jmp" for 0x4088c5>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40896b>, <DisassemblerInsn "mov" for 0x408973>, <DisassemblerInsn "mov" for 0x40897b>, <DisassemblerInsn "mov" for 0x408983>, <DisassemblerInsn "mov" for 0x40898a>, <DisassemblerInsn "mov" for 0x40898c>, <DisassemblerInsn "cdq" for 0x408992>, <DisassemblerInsn "idiv" for 0x408993>, <DisassemblerInsn "mov" for 0x408996>, <DisassemblerInsn "mov" for 0x408998>, <DisassemblerInsn "imul" for 0x4089a0>, <DisassemblerInsn "mov" for 0x4089a3>, <DisassemblerInsn "mov" for 0x4089a7>, <DisassemblerInsn "mov" for 0x4089a9>, <DisassemblerInsn "cdq" for 0x4089af>, <DisassemblerInsn "idiv" for 0x4089b0>, <DisassemblerInsn "mov" for 0x4089b3>, <DisassemblerInsn "mov" for 0x4089bb>, <DisassemblerInsn "mov" for 0x4089be>, <DisassemblerInsn "mov" for 0x4089c2>, <DisassemblerInsn "sar" for 0x4089c4>, <DisassemblerInsn "add" for 0x4089c6>, <DisassemblerInsn "imul" for 0x4089c9>, <DisassemblerInsn "imul" for 0x4089cc>, <DisassemblerInsn "add" for 0x4089cf>, <DisassemblerInsn "add" for 0x4089d1>, <DisassemblerInsn "add" for 0x4089d3>, <DisassemblerInsn "mov" for 0x4089d5>, <DisassemblerInsn "add" for 0x4089d9>, <DisassemblerInsn "cmp" for 0x4089dd>, <DisassemblerInsn "mov" for 0x4089e1>, <DisassemblerInsn "mov" for 0x4089e9>, <DisassemblerInsn "jne" for 0x4089f0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40847b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408902>, <DisassemblerInsn "mov" for 0x408907>, <DisassemblerInsn "mov" for 0x40890c>, <DisassemblerInsn "add" for 0x408910>, <DisassemblerInsn "cmp" for 0x408914>, <DisassemblerInsn "mov" for 0x408917>, <DisassemblerInsn "mov" for 0x40891c>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408922>, <DisassemblerInsn "jne" for 0x408926>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408555>, <DisassemblerInsn "lea" for 0x40855d>, <DisassemblerInsn "add" for 0x408565>, <DisassemblerInsn "mov" for 0x408569>, <DisassemblerInsn "lea" for 0x408571>, <DisassemblerInsn "mov" for 0x408579>, <DisassemblerInsn "lea" for 0x408581>, <DisassemblerInsn "add" for 0x408589>, <DisassemblerInsn "mov" for 0x40858d>, <DisassemblerInsn "lea" for 0x408595>, <DisassemblerInsn "add" for 0x40859d>, <DisassemblerInsn "mov" for 0x4085a1>, <DisassemblerInsn "lea" for 0x4085a9>, <DisassemblerInsn "add" for 0x4085b1>, <DisassemblerInsn "mov" for 0x4085b5>, <DisassemblerInsn "mov" for 0x4085bd>, <DisassemblerInsn "add" for 0x4085c0>, <DisassemblerInsn "mov" for 0x4085c7>, <DisassemblerInsn "add" for 0x4085cf>, <DisassemblerInsn "add" for 0x4085d5>, <DisassemblerInsn "mov" for 0x4085d9>, <DisassemblerInsn "lea" for 0x4085e1>, <DisassemblerInsn "add" for 0x4085e9>, <DisassemblerInsn "mov" for 0x4085ed>, <DisassemblerInsn "lea" for 0x4085f5>, <DisassemblerInsn "add" for 0x4085fd>, <DisassemblerInsn "mov" for 0x408601>, <DisassemblerInsn "lea" for 0x408609>, <DisassemblerInsn "add" for 0x408611>, <DisassemblerInsn "mov" for 0x408615>, <DisassemblerInsn "lea" for 0x40861d>, <DisassemblerInsn "add" for 0x408625>, <DisassemblerInsn "mov" for 0x408629>, <DisassemblerInsn "xor" for 0x408631>, <DisassemblerInsn "mov" for 0x408633>, <DisassemblerInsn "xor" for 0x408635>, <DisassemblerInsn "mov" for 0x408637>, <DisassemblerInsn "mov" for 0x40863f>, <DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408686>, <DisassemblerInsn "mov" for 0x40868d>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "add" for 0x40869c>, <DisassemblerInsn "imul" for 0x4086a3>, <DisassemblerInsn "add" for 0x4086a7>, <DisassemblerInsn "mov" for 0x4086aa>, <DisassemblerInsn "mov" for 0x4086b2>, <DisassemblerInsn "mov" for 0x4086b9>, <DisassemblerInsn "mov" for 0x4086c0>, <DisassemblerInsn "mov" for 0x4086c6>, <DisassemblerInsn "mov" for 0x4086cc>, <DisassemblerInsn "cmp" for 0x4086d2>, <DisassemblerInsn "mov" for 0x4086d5>, <DisassemblerInsn "jle" for 0x4086dc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4083e0>, <DisassemblerInsn "mov" for 0x4083e7>, <DisassemblerInsn "mov" for 0x4083e9>, <DisassemblerInsn "lea" for 0x4083f1>, <DisassemblerInsn "shl" for 0x4083f9>, <DisassemblerInsn "add" for 0x4083fc>, <DisassemblerInsn "mov" for 0x408401>, <DisassemblerInsn "mov" for 0x408408>, <DisassemblerInsn "mov" for 0x40840f>, <DisassemblerInsn "mov" for 0x408412>, <DisassemblerInsn "add" for 0x408415>, <DisassemblerInsn "mov" for 0x40841c>, <DisassemblerInsn "cmp" for 0x408424>, <DisassemblerInsn "je" for 0x40842b>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4087c0>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408862>, <DisassemblerInsn "mov" for 0x408866>, <DisassemblerInsn "mov" for 0x408868>, <DisassemblerInsn "xor" for 0x40886d>, <DisassemblerInsn "mov" for 0x40886f>, <DisassemblerInsn "xor" for 0x408871>, <DisassemblerInsn "mov" for 0x408873>, <DisassemblerInsn "mov" for 0x408878>, <DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "mov" for 0x40888a>, <DisassemblerInsn "mov" for 0x40888e>, <DisassemblerInsn "mov" for 0x408893>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "movzx" for 0x40889a>, <DisassemblerInsn "mov" for 0x40889d>, <DisassemblerInsn "cmp" for 0x4088a1>, <DisassemblerInsn "jae" for 0x4088a3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~rsp, 0x198>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x2b]>', '<cmp~~al, 0xe>', '<jae~~0x4088e2>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x4088c7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0x174]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~r9, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf793f]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<add~~rax, 1>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x160], rax>', '<jne~~0x408460>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jle~~0x40892c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x4087c2>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdx, rcx>', '<imul~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<add~~rax, 0x2030>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rdi, rax>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<shl~~edi, 8>', '<mov~~dword ptr [rsp + 0x11c], edi>', '<movsxd~~rdi, edi>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x120], rsi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rdx + rax*8], rsi>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x128], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jne~~0x4084c6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rdi, rax>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<shl~~edi, 8>', '<mov~~dword ptr [rsp + 0x11c], edi>', '<movsxd~~rdi, edi>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x120], rsi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rdx + rax*8], rsi>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x128], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jne~~0x4084c6>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x157]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<test~~al, 1>', '<jne~~0x408480>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r8, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0xa8]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], r11>', '<add~~r10, 0x2030>', '<imul~~r11, r11, 0x50>', '<add~~r10, r11>', '<mov~~qword ptr [rsp + 0x98], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jle~~0x40896b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x408902>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x4087c2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax + 0x2238]>', '<cmp~~eax, 0>', '<setg~~cl>', '<mov~~byte ptr [rsp + 0x157], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~al, byte ptr [rsp + 0x157]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<test~~al, 1>', '<jne~~0x408480>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x58]>', '<add~~eax, esi>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rdx]>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x88], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jl~~0x408755>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~sil, byte ptr [rsp + 0x2b]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jne~~0x40887c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~cl, byte ptr [rsp + 0x2b]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x180]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x180], edx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x408902>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~edi, dword ptr [rsp + 0xa4]>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x10], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rdx]>', '<sar~~edx, 1>', '<add~~edx, r8d>', '<imul~~edx, edx, 7>', '<imul~~esi, dword ptr [rsi], 3>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x14], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jne~~0x408646>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x408537>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<jne~~0x40887c>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 0xc>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<lea~~rcx, [rsp + 0x180]>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2238>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x180]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r8, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0xa8]>', '<mov~~r10, qword ptr [rsp + 0x168]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], r11>', '<add~~r10, 0x2030>', '<imul~~r11, r11, 0x50>', '<add~~r10, r11>', '<mov~~qword ptr [rsp + 0x98], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jle~~0x40896b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x198>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<lea~~rcx, [rsp + 0x180]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0x174], eax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x178], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x408555>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x408827>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x30], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x4088c7>']}], 'cfg_edge_info': [(6, 12), (26, 21), (18, 20), (4, 9), (3, 7), (0, 2), (17, 18), (2, 5), (19, 21), (1, 3), (25, 26), (7, 4), (15, 5), (24, 23), (6, 11), (20, 10), (12, 12), (23, 18), (22, 25), (11, 1), (9, 16), (0, 1), (10, 17), (18, 3), (7, 3), (25, 18), (20, 9), (26, 22), (12, 11), (21, 23), (4, 10), (3, 8), (5, 11), (23, 26), (22, 24), (17, 19), (1, 4), (15, 6), (2, 6), (11, 15), (19, 22), (16, 17)], 'cdg_edge_info': [(26, 21), (6, 12), (18, 17), (7, 17), (18, 20), (4, 9), (3, 7), (22, 23), (0, 2), (19, 21), (0, 11), (11, 11), (7, 4), (1, 18), (26, 23), (20, 10), (20, 16), (12, 12), (3, 3), (22, 25), (19, 23), (1, 17), (18, 18), (20, 9), (26, 22), (7, 18), (4, 10), (4, 16), (23, 26), (22, 24), (17, 19), (1, 4), (15, 6), (11, 15), (19, 22), (2, 6), (25, 26)], 'ddg_edge_info': [(26, 21), (7, 17), (4, 9), (9, 8), (9, 17), (9, 26), (7, 10), (9, 10), (0, 7), (9, 19), (7, 3), (10, 20), (18, 3), (25, 18), (26, 25), (7, 21), (3, 8), (9, 3), (0, 9), (9, 21), (1, 10), (26, 9), (10, 22), (20, 17), (21, 25), (0, 2), (1, 3), (15, 11), (10, 24), (20, 10), (9, 7), (4, 20), (10, 8), (10, 17), (10, 26), (24, 25), (7, 9), (1, 7), (15, 6), (2, 6), (10, 19), (2, 15), (25, 26), (3, 7), (10, 3), (17, 18), (0, 11), (7, 4), (1, 18), (0, 20), (10, 21), (0, 4), (19, 26), (9, 25), (20, 9), (26, 22), (20, 18), (7, 18), (4, 10), (10, 7), (0, 6), (9, 18), (0, 15), (2, 12), (11, 15), (10, 25), (6, 12), (26, 24), (18, 20), (7, 20), (10, 9), (0, 8), (10, 18), (9, 20), (0, 17), (26, 17), (9, 4), (0, 1), (0, 10), (17, 26), (9, 22), (26, 10), (10, 4), (0, 3), (17, 19), (0, 12), (19, 25), (9, 24)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 122, 'instruction': 'movl\t$2, (%rdi)'}, {'instIndex': 123, 'instruction': 'movl\t$2, (%rsi)'}, {'instIndex': 124, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 125, 'instruction': 'cmpl\t$0, (%rcx)'}, {'instIndex': 126, 'instruction': 'movl\t%eax, 0xa4(%rsp)                 # 4-byte Spill'}, {'instIndex': 127, 'instruction': 'jle\t.LBB3_21'}, {'instIndex': 157, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 158, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 159, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 160, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 161, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 162, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 163, 'instruction': 'jne\t.LBB3_11'}, {'instIndex': 167, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 168, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 169, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 170, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 171, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 172, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 173, 'instruction': 'jmp\t.LBB3_12'}, {'instIndex': 181, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 182, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 183, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 184, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 185, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 186, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 187, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 188, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 189, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 190, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 191, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 192, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 193, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 197, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 198, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 199, 'instruction': 'movq\t%rdx, 0x48(%rsp)                  # 8-byte Spill'}, {'instIndex': 200, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 201, 'instruction': 'movl\t%ecx, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 264, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 265, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 266, 'instruction': 'movslq\t(%rdx), %rdx'}, {'instIndex': 267, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 268, 'instruction': 'movq\t%rcx, 0x80(%rsp)                 # 8-byte Spill'}, {'instIndex': 272, 'instruction': 'jl\t.LBB3_9'}, {'instIndex': 299, 'instruction': 'addl\t%edx, %eax'}, {'instIndex': 300, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O2/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O2/ac3enc.s---bit_alloc---after
function id: 3
function flag: True
There are 265 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_16'}, {'instIndex': 93, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 94, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 95, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 96, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 97, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 98, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 99, 'instruction': 'jne\t.LBB3_5'}, {'instIndex': 103, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 104, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 105, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 106, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 107, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 108, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 109, 'instruction': 'jmp\t.LBB3_6'}, {'instIndex': 117, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 118, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 119, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 120, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 121, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 123, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 124, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 125, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 126, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 127, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 128, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 129, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 133, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 137, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 200, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 201, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 202, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 203, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 204, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 205, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 206, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 207, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 209, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 254, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 255, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O2/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O2/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 890 nodes and 1615 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 265 instructions in binary file.
[4255261, 4255437, 4255571, 4255720, 4255785, 4255830, 4255832, 4255939, 4256200, 4256264, 4256356]
The execution time of patched subCFG information extraction via angr: 0:00:10.695122
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40edf0>, <DisassemblerInsn "mov" for 0x40edf7>, <DisassemblerInsn "mov" for 0x40edf9>, <DisassemblerInsn "lea" for 0x40ee01>, <DisassemblerInsn "shl" for 0x40ee09>, <DisassemblerInsn "add" for 0x40ee0c>, <DisassemblerInsn "mov" for 0x40ee11>, <DisassemblerInsn "call" for 0x40ee18>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f19e>, <DisassemblerInsn "mov" for 0x40f1a3>, <DisassemblerInsn "mov" for 0x40f1a8>, <DisassemblerInsn "add" for 0x40f1ac>, <DisassemblerInsn "cmp" for 0x40f1b0>, <DisassemblerInsn "mov" for 0x40f1b3>, <DisassemblerInsn "mov" for 0x40f1b8>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1be>, <DisassemblerInsn "jne" for 0x40f1c2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f029>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f036>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f041>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f048>, <DisassemblerInsn "mov" for 0x40f04c>, <DisassemblerInsn "call" for 0x40f051>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f1c8>, <DisassemblerInsn "mov" for 0x40f1d0>, <DisassemblerInsn "mov" for 0x40f1d5>, <DisassemblerInsn "mov" for 0x40f1d9>, <DisassemblerInsn "add" for 0x40f1dd>, <DisassemblerInsn "mov" for 0x40f1df>, <DisassemblerInsn "add" for 0x40f1e3>, <DisassemblerInsn "mov" for 0x40f1e7>, <DisassemblerInsn "mov" for 0x40f1e9>, <DisassemblerInsn "movsxd" for 0x40f1ed>, <DisassemblerInsn "cmp" for 0x40f1f0>, <DisassemblerInsn "mov" for 0x40f1f3>, <DisassemblerInsn "mov" for 0x40f1fb>, <DisassemblerInsn "jl" for 0x40f202>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40f056>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f208>, <DisassemblerInsn "mov" for 0x40f20c>, <DisassemblerInsn "mov" for 0x40f210>, <DisassemblerInsn "mov" for 0x40f218>, <DisassemblerInsn "mov" for 0x40f220>, <DisassemblerInsn "mov" for 0x40f228>, <DisassemblerInsn "mov" for 0x40f230>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f234>, <DisassemblerInsn "mov" for 0x40f236>, <DisassemblerInsn "mov" for 0x40f239>, <DisassemblerInsn "mov" for 0x40f241>, <DisassemblerInsn "mov" for 0x40f248>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25d>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f26c>, <DisassemblerInsn "mov" for 0x40f273>, <DisassemblerInsn "mov" for 0x40f27a>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "mov" for 0x40f288>, <DisassemblerInsn "mov" for 0x40f290>, <DisassemblerInsn "mov" for 0x40f298>, <DisassemblerInsn "mov" for 0x40f29d>, <DisassemblerInsn "mov" for 0x40f2a1>, <DisassemblerInsn "cdq" for 0x40f2a7>, <DisassemblerInsn "idiv" for 0x40f2a8>, <DisassemblerInsn "mov" for 0x40f2ab>, <DisassemblerInsn "mov" for 0x40f2ad>, <DisassemblerInsn "imul" for 0x40f2b1>, <DisassemblerInsn "mov" for 0x40f2b4>, <DisassemblerInsn "mov" for 0x40f2b8>, <DisassemblerInsn "cdq" for 0x40f2be>, <DisassemblerInsn "idiv" for 0x40f2bf>, <DisassemblerInsn "mov" for 0x40f2c2>, <DisassemblerInsn "mov" for 0x40f2c6>, <DisassemblerInsn "mov" for 0x40f2c9>, <DisassemblerInsn "sar" for 0x40f2cd>, <DisassemblerInsn "add" for 0x40f2cf>, <DisassemblerInsn "imul" for 0x40f2d2>, <DisassemblerInsn "imul" for 0x40f2d5>, <DisassemblerInsn "add" for 0x40f2d8>, <DisassemblerInsn "add" for 0x40f2db>, <DisassemblerInsn "add" for 0x40f2dd>, <DisassemblerInsn "mov" for 0x40f2df>, <DisassemblerInsn "add" for 0x40f2e3>, <DisassemblerInsn "cmp" for 0x40f2e7>, <DisassemblerInsn "mov" for 0x40f2eb>, <DisassemblerInsn "mov" for 0x40f2f2>, <DisassemblerInsn "mov" for 0x40f2fa>, <DisassemblerInsn "jne" for 0x40f301>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40efe8>, <DisassemblerInsn "mov" for 0x40eff0>, <DisassemblerInsn "mov" for 0x40eff8>, <DisassemblerInsn "mov" for 0x40f000>, <DisassemblerInsn "mov" for 0x40f007>, <DisassemblerInsn "mov" for 0x40f00b>, <DisassemblerInsn "add" for 0x40f010>, <DisassemblerInsn "imul" for 0x40f016>, <DisassemblerInsn "add" for 0x40f01a>, <DisassemblerInsn "add" for 0x40f01d>, <DisassemblerInsn "add" for 0x40f021>, <DisassemblerInsn "cmp" for 0x40f024>, <DisassemblerInsn "jne" for 0x40f027>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f17e>, <DisassemblerInsn "mov" for 0x40f182>, <DisassemblerInsn "mov" for 0x40f187>, <DisassemblerInsn "mov" for 0x40f18c>, <DisassemblerInsn "cmp" for 0x40f191>, <DisassemblerInsn "cmove" for 0x40f195>, <DisassemblerInsn "add" for 0x40f198>, <DisassemblerInsn "mov" for 0x40f19a>, <DisassemblerInsn "mov" for 0x40f19e>, <DisassemblerInsn "mov" for 0x40f1a3>, <DisassemblerInsn "mov" for 0x40f1a8>, <DisassemblerInsn "add" for 0x40f1ac>, <DisassemblerInsn "cmp" for 0x40f1b0>, <DisassemblerInsn "mov" for 0x40f1b3>, <DisassemblerInsn "mov" for 0x40f1b8>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1be>, <DisassemblerInsn "jne" for 0x40f1c2>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0fe>, <DisassemblerInsn "mov" for 0x40f102>, <DisassemblerInsn "mov" for 0x40f104>, <DisassemblerInsn "xor" for 0x40f109>, <DisassemblerInsn "mov" for 0x40f10b>, <DisassemblerInsn "xor" for 0x40f10d>, <DisassemblerInsn "mov" for 0x40f10f>, <DisassemblerInsn "mov" for 0x40f114>, <DisassemblerInsn "mov" for 0x40f118>, <DisassemblerInsn "mov" for 0x40f11d>, <DisassemblerInsn "mov" for 0x40f122>, <DisassemblerInsn "mov" for 0x40f126>, <DisassemblerInsn "mov" for 0x40f12a>, <DisassemblerInsn "mov" for 0x40f12f>, <DisassemblerInsn "mov" for 0x40f132>, <DisassemblerInsn "movzx" for 0x40f136>, <DisassemblerInsn "mov" for 0x40f139>, <DisassemblerInsn "cmp" for 0x40f13d>, <DisassemblerInsn "jae" for 0x40f13f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f26c>, <DisassemblerInsn "mov" for 0x40f273>, <DisassemblerInsn "mov" for 0x40f27a>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "mov" for 0x40f288>, <DisassemblerInsn "mov" for 0x40f290>, <DisassemblerInsn "mov" for 0x40f298>, <DisassemblerInsn "mov" for 0x40f29d>, <DisassemblerInsn "mov" for 0x40f2a1>, <DisassemblerInsn "cdq" for 0x40f2a7>, <DisassemblerInsn "idiv" for 0x40f2a8>, <DisassemblerInsn "mov" for 0x40f2ab>, <DisassemblerInsn "mov" for 0x40f2ad>, <DisassemblerInsn "imul" for 0x40f2b1>, <DisassemblerInsn "mov" for 0x40f2b4>, <DisassemblerInsn "mov" for 0x40f2b8>, <DisassemblerInsn "cdq" for 0x40f2be>, <DisassemblerInsn "idiv" for 0x40f2bf>, <DisassemblerInsn "mov" for 0x40f2c2>, <DisassemblerInsn "mov" for 0x40f2c6>, <DisassemblerInsn "mov" for 0x40f2c9>, <DisassemblerInsn "sar" for 0x40f2cd>, <DisassemblerInsn "add" for 0x40f2cf>, <DisassemblerInsn "imul" for 0x40f2d2>, <DisassemblerInsn "imul" for 0x40f2d5>, <DisassemblerInsn "add" for 0x40f2d8>, <DisassemblerInsn "add" for 0x40f2db>, <DisassemblerInsn "add" for 0x40f2dd>, <DisassemblerInsn "mov" for 0x40f2df>, <DisassemblerInsn "add" for 0x40f2e3>, <DisassemblerInsn "cmp" for 0x40f2e7>, <DisassemblerInsn "mov" for 0x40f2eb>, <DisassemblerInsn "mov" for 0x40f2f2>, <DisassemblerInsn "mov" for 0x40f2fa>, <DisassemblerInsn "jne" for 0x40f301>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f307>, <DisassemblerInsn "add" for 0x40f30b>, <DisassemblerInsn "ret" for 0x40f312>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f058>, <DisassemblerInsn "mov" for 0x40f060>, <DisassemblerInsn "mov" for 0x40f065>, <DisassemblerInsn "mov" for 0x40f06d>, <DisassemblerInsn "mov" for 0x40f075>, <DisassemblerInsn "mov" for 0x40f07d>, <DisassemblerInsn "mov" for 0x40f085>, <DisassemblerInsn "mov" for 0x40f08d>, <DisassemblerInsn "mov" for 0x40f090>, <DisassemblerInsn "mov" for 0x40f094>, <DisassemblerInsn "mov" for 0x40f097>, <DisassemblerInsn "mov" for 0x40f09b>, <DisassemblerInsn "mov" for 0x40f0a2>, <DisassemblerInsn "mov" for 0x40f0a5>, <DisassemblerInsn "mov" for 0x40f0a8>, <DisassemblerInsn "xor" for 0x40f0ac>, <DisassemblerInsn "mov" for 0x40f0ae>, <DisassemblerInsn "mov" for 0x40f0b5>, <DisassemblerInsn "mov" for 0x40f0b9>, <DisassemblerInsn "call" for 0x40f0be>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0c3>, <DisassemblerInsn "mov" for 0x40f0cb>, <DisassemblerInsn "mov" for 0x40f0d0>, <DisassemblerInsn "mov" for 0x40f0d8>, <DisassemblerInsn "mov" for 0x40f0db>, <DisassemblerInsn "mov" for 0x40f0df>, <DisassemblerInsn "mov" for 0x40f0e4>, <DisassemblerInsn "mov" for 0x40f0eb>, <DisassemblerInsn "xor" for 0x40f0ef>, <DisassemblerInsn "cmp" for 0x40f0f1>, <DisassemblerInsn "mov" for 0x40f0f4>, <DisassemblerInsn "jle" for 0x40f0f8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ee1d>, <DisassemblerInsn "lea" for 0x40ee25>, <DisassemblerInsn "add" for 0x40ee2d>, <DisassemblerInsn "mov" for 0x40ee31>, <DisassemblerInsn "lea" for 0x40ee39>, <DisassemblerInsn "add" for 0x40ee41>, <DisassemblerInsn "mov" for 0x40ee45>, <DisassemblerInsn "lea" for 0x40ee4d>, <DisassemblerInsn "add" for 0x40ee55>, <DisassemblerInsn "mov" for 0x40ee59>, <DisassemblerInsn "lea" for 0x40ee61>, <DisassemblerInsn "add" for 0x40ee69>, <DisassemblerInsn "mov" for 0x40ee6d>, <DisassemblerInsn "mov" for 0x40ee75>, <DisassemblerInsn "add" for 0x40ee78>, <DisassemblerInsn "mov" for 0x40ee7e>, <DisassemblerInsn "mov" for 0x40ee86>, <DisassemblerInsn "add" for 0x40ee89>, <DisassemblerInsn "add" for 0x40ee8f>, <DisassemblerInsn "mov" for 0x40ee93>, <DisassemblerInsn "mov" for 0x40ee9b>, <DisassemblerInsn "lea" for 0x40eea1>, <DisassemblerInsn "mov" for 0x40eea9>, <DisassemblerInsn "xor" for 0x40eeb1>, <DisassemblerInsn "mov" for 0x40eeb3>, <DisassemblerInsn "xor" for 0x40eeb5>, <DisassemblerInsn "mov" for 0x40eeb7>, <DisassemblerInsn "mov" for 0x40eebe>, <DisassemblerInsn "mov" for 0x40eec6>, <DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef53>, <DisassemblerInsn "mov" for 0x40ef5a>, <DisassemblerInsn "mov" for 0x40ef62>, <DisassemblerInsn "mov" for 0x40ef6a>, <DisassemblerInsn "add" for 0x40ef6d>, <DisassemblerInsn "imul" for 0x40ef74>, <DisassemblerInsn "add" for 0x40ef78>, <DisassemblerInsn "add" for 0x40ef7b>, <DisassemblerInsn "mov" for 0x40ef7f>, <DisassemblerInsn "mov" for 0x40ef87>, <DisassemblerInsn "add" for 0x40ef8a>, <DisassemblerInsn "imul" for 0x40ef91>, <DisassemblerInsn "add" for 0x40ef95>, <DisassemblerInsn "add" for 0x40ef98>, <DisassemblerInsn "mov" for 0x40ef9c>, <DisassemblerInsn "mov" for 0x40efa4>, <DisassemblerInsn "add" for 0x40efa7>, <DisassemblerInsn "imul" for 0x40efae>, <DisassemblerInsn "add" for 0x40efb2>, <DisassemblerInsn "mov" for 0x40efb5>, <DisassemblerInsn "add" for 0x40efbd>, <DisassemblerInsn "add" for 0x40efc1>, <DisassemblerInsn "imul" for 0x40efc8>, <DisassemblerInsn "add" for 0x40efcc>, <DisassemblerInsn "mov" for 0x40efcf>, <DisassemblerInsn "xor" for 0x40efd7>, <DisassemblerInsn "mov" for 0x40efd9>, <DisassemblerInsn "mov" for 0x40efe1>, <DisassemblerInsn "mov" for 0x40efe8>, <DisassemblerInsn "mov" for 0x40eff0>, <DisassemblerInsn "mov" for 0x40eff8>, <DisassemblerInsn "mov" for 0x40f000>, <DisassemblerInsn "mov" for 0x40f007>, <DisassemblerInsn "mov" for 0x40f00b>, <DisassemblerInsn "add" for 0x40f010>, <DisassemblerInsn "imul" for 0x40f016>, <DisassemblerInsn "add" for 0x40f01a>, <DisassemblerInsn "add" for 0x40f01d>, <DisassemblerInsn "add" for 0x40f021>, <DisassemblerInsn "cmp" for 0x40f024>, <DisassemblerInsn "jne" for 0x40f027>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40f320>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf97]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f264>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40f118>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40efe8>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40f0c3>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40f058>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40f118>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f163>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf10a3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x40f1c8>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf97]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f264>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40f058>']}], 'cfg_edge_info': [(12, 7), (3, 7), (8, 9), (9, 11), (2, 5), (13, 5), (10, 12), (1, 3), (16, 10), (18, 10), (6, 8), (12, 6), (3, 6), (5, 3), (0, 1), (9, 10), (2, 4), (1, 2), (13, 4), (7, 9), (5, 2), (10, 13)]}]}
{'bit_alloc': [4255261, 4255437, 4255571, 4255720, 4255785, 4255830, 4255832, 4255939, 4256200, 4256264, 4256356]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O2/ac3enc.o---after
The extraction of function: bit_alloc
[4255261, 4255437, 4255571, 4255720, 4255785, 4255830, 4255832, 4255939, 4256200, 4256264, 4256356]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 68 nodes and 119 edges in CFGEmulated.
It has 67 nodes and 117 edges in CDG.
It has 3186 nodes and 4211 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4255261, 4255437, 4255571, 4255720, 4255785, 4255830, 4255832, 4255939, 4256200, 4256264, 4256356]
{4256519, 4256264, 4255500, 4256024, 4255261, 4256158, 4255785, 4255998, 4256065, 4255939, 4256200, 4255437, 4255571, 4255830, 4255832, 4256099, 4256356, 4255720, 4256107, 4255216, 4256126}
[34, 4, 0, 2, 49, 11, 33, 30, 39, 16, 7, 37, 66, 45, 44, 46, 18, 40, 10, 29, 1, 19, 17, 38]
The execution time of patched slicing information extraction via angr: 0:00:12.535022
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0fe>, <DisassemblerInsn "mov" for 0x40f102>, <DisassemblerInsn "mov" for 0x40f104>, <DisassemblerInsn "xor" for 0x40f109>, <DisassemblerInsn "mov" for 0x40f10b>, <DisassemblerInsn "xor" for 0x40f10d>, <DisassemblerInsn "mov" for 0x40f10f>, <DisassemblerInsn "mov" for 0x40f114>, <DisassemblerInsn "mov" for 0x40f118>, <DisassemblerInsn "mov" for 0x40f11d>, <DisassemblerInsn "mov" for 0x40f122>, <DisassemblerInsn "mov" for 0x40f126>, <DisassemblerInsn "mov" for 0x40f12a>, <DisassemblerInsn "mov" for 0x40f12f>, <DisassemblerInsn "mov" for 0x40f132>, <DisassemblerInsn "movzx" for 0x40f136>, <DisassemblerInsn "mov" for 0x40f139>, <DisassemblerInsn "cmp" for 0x40f13d>, <DisassemblerInsn "jae" for 0x40f13f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ee1d>, <DisassemblerInsn "lea" for 0x40ee25>, <DisassemblerInsn "add" for 0x40ee2d>, <DisassemblerInsn "mov" for 0x40ee31>, <DisassemblerInsn "lea" for 0x40ee39>, <DisassemblerInsn "add" for 0x40ee41>, <DisassemblerInsn "mov" for 0x40ee45>, <DisassemblerInsn "lea" for 0x40ee4d>, <DisassemblerInsn "add" for 0x40ee55>, <DisassemblerInsn "mov" for 0x40ee59>, <DisassemblerInsn "lea" for 0x40ee61>, <DisassemblerInsn "add" for 0x40ee69>, <DisassemblerInsn "mov" for 0x40ee6d>, <DisassemblerInsn "mov" for 0x40ee75>, <DisassemblerInsn "add" for 0x40ee78>, <DisassemblerInsn "mov" for 0x40ee7e>, <DisassemblerInsn "mov" for 0x40ee86>, <DisassemblerInsn "add" for 0x40ee89>, <DisassemblerInsn "add" for 0x40ee8f>, <DisassemblerInsn "mov" for 0x40ee93>, <DisassemblerInsn "mov" for 0x40ee9b>, <DisassemblerInsn "lea" for 0x40eea1>, <DisassemblerInsn "mov" for 0x40eea9>, <DisassemblerInsn "xor" for 0x40eeb1>, <DisassemblerInsn "mov" for 0x40eeb3>, <DisassemblerInsn "xor" for 0x40eeb5>, <DisassemblerInsn "mov" for 0x40eeb7>, <DisassemblerInsn "mov" for 0x40eebe>, <DisassemblerInsn "mov" for 0x40eec6>, <DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40edf0>, <DisassemblerInsn "mov" for 0x40edf7>, <DisassemblerInsn "mov" for 0x40edf9>, <DisassemblerInsn "lea" for 0x40ee01>, <DisassemblerInsn "shl" for 0x40ee09>, <DisassemblerInsn "add" for 0x40ee0c>, <DisassemblerInsn "mov" for 0x40ee11>, <DisassemblerInsn "call" for 0x40ee18>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40fdb6>, <DisassemblerInsn "ret" for 0x40fdbd>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f118>, <DisassemblerInsn "mov" for 0x40f11d>, <DisassemblerInsn "mov" for 0x40f122>, <DisassemblerInsn "mov" for 0x40f126>, <DisassemblerInsn "mov" for 0x40f12a>, <DisassemblerInsn "mov" for 0x40f12f>, <DisassemblerInsn "mov" for 0x40f132>, <DisassemblerInsn "movzx" for 0x40f136>, <DisassemblerInsn "mov" for 0x40f139>, <DisassemblerInsn "cmp" for 0x40f13d>, <DisassemblerInsn "jae" for 0x40f13f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef53>, <DisassemblerInsn "mov" for 0x40ef5a>, <DisassemblerInsn "mov" for 0x40ef62>, <DisassemblerInsn "mov" for 0x40ef6a>, <DisassemblerInsn "add" for 0x40ef6d>, <DisassemblerInsn "imul" for 0x40ef74>, <DisassemblerInsn "add" for 0x40ef78>, <DisassemblerInsn "add" for 0x40ef7b>, <DisassemblerInsn "mov" for 0x40ef7f>, <DisassemblerInsn "mov" for 0x40ef87>, <DisassemblerInsn "add" for 0x40ef8a>, <DisassemblerInsn "imul" for 0x40ef91>, <DisassemblerInsn "add" for 0x40ef95>, <DisassemblerInsn "add" for 0x40ef98>, <DisassemblerInsn "mov" for 0x40ef9c>, <DisassemblerInsn "mov" for 0x40efa4>, <DisassemblerInsn "add" for 0x40efa7>, <DisassemblerInsn "imul" for 0x40efae>, <DisassemblerInsn "add" for 0x40efb2>, <DisassemblerInsn "mov" for 0x40efb5>, <DisassemblerInsn "add" for 0x40efbd>, <DisassemblerInsn "add" for 0x40efc1>, <DisassemblerInsn "imul" for 0x40efc8>, <DisassemblerInsn "add" for 0x40efcc>, <DisassemblerInsn "mov" for 0x40efcf>, <DisassemblerInsn "xor" for 0x40efd7>, <DisassemblerInsn "mov" for 0x40efd9>, <DisassemblerInsn "mov" for 0x40efe1>, <DisassemblerInsn "mov" for 0x40efe8>, <DisassemblerInsn "mov" for 0x40eff0>, <DisassemblerInsn "mov" for 0x40eff8>, <DisassemblerInsn "mov" for 0x40f000>, <DisassemblerInsn "mov" for 0x40f007>, <DisassemblerInsn "mov" for 0x40f00b>, <DisassemblerInsn "add" for 0x40f010>, <DisassemblerInsn "imul" for 0x40f016>, <DisassemblerInsn "add" for 0x40f01a>, <DisassemblerInsn "add" for 0x40f01d>, <DisassemblerInsn "add" for 0x40f021>, <DisassemblerInsn "cmp" for 0x40f024>, <DisassemblerInsn "jne" for 0x40f027>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f1c8>, <DisassemblerInsn "mov" for 0x40f1d0>, <DisassemblerInsn "mov" for 0x40f1d5>, <DisassemblerInsn "mov" for 0x40f1d9>, <DisassemblerInsn "add" for 0x40f1dd>, <DisassemblerInsn "mov" for 0x40f1df>, <DisassemblerInsn "add" for 0x40f1e3>, <DisassemblerInsn "mov" for 0x40f1e7>, <DisassemblerInsn "mov" for 0x40f1e9>, <DisassemblerInsn "movsxd" for 0x40f1ed>, <DisassemblerInsn "cmp" for 0x40f1f0>, <DisassemblerInsn "mov" for 0x40f1f3>, <DisassemblerInsn "mov" for 0x40f1fb>, <DisassemblerInsn "jl" for 0x40f202>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0c3>, <DisassemblerInsn "mov" for 0x40f0cb>, <DisassemblerInsn "mov" for 0x40f0d0>, <DisassemblerInsn "mov" for 0x40f0d8>, <DisassemblerInsn "mov" for 0x40f0db>, <DisassemblerInsn "mov" for 0x40f0df>, <DisassemblerInsn "mov" for 0x40f0e4>, <DisassemblerInsn "mov" for 0x40f0eb>, <DisassemblerInsn "xor" for 0x40f0ef>, <DisassemblerInsn "cmp" for 0x40f0f1>, <DisassemblerInsn "mov" for 0x40f0f4>, <DisassemblerInsn "jle" for 0x40f0f8>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f141>, <DisassemblerInsn "mov" for 0x40f145>, <DisassemblerInsn "movzx" for 0x40f149>, <DisassemblerInsn "mov" for 0x40f14c>, <DisassemblerInsn "add" for 0x40f153>, <DisassemblerInsn "mov" for 0x40f156>, <DisassemblerInsn "mov" for 0x40f15d>, <DisassemblerInsn "jmp" for 0x40f161>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40efe8>, <DisassemblerInsn "mov" for 0x40eff0>, <DisassemblerInsn "mov" for 0x40eff8>, <DisassemblerInsn "mov" for 0x40f000>, <DisassemblerInsn "mov" for 0x40f007>, <DisassemblerInsn "mov" for 0x40f00b>, <DisassemblerInsn "add" for 0x40f010>, <DisassemblerInsn "imul" for 0x40f016>, <DisassemblerInsn "add" for 0x40f01a>, <DisassemblerInsn "add" for 0x40f01d>, <DisassemblerInsn "add" for 0x40f021>, <DisassemblerInsn "cmp" for 0x40f024>, <DisassemblerInsn "jne" for 0x40f027>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40fd89>, <DisassemblerInsn "mov" for 0x40fd8e>, <DisassemblerInsn "mov" for 0x40fd93>, <DisassemblerInsn "mov" for 0x40fd98>, <DisassemblerInsn "mov" for 0x40fda0>, <DisassemblerInsn "add" for 0x40fda3>, <DisassemblerInsn "shl" for 0x40fda6>, <DisassemblerInsn "movsxd" for 0x40fda9>, <DisassemblerInsn "add" for 0x40fdac>, <DisassemblerInsn "mov" for 0x40fdaf>, <DisassemblerInsn "mov" for 0x40fdb2>, <DisassemblerInsn "add" for 0x40fdb6>, <DisassemblerInsn "ret" for 0x40fdbd>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f16b>, <DisassemblerInsn "mov" for 0x40f16f>, <DisassemblerInsn "add" for 0x40f173>, <DisassemblerInsn "add" for 0x40f176>, <DisassemblerInsn "mov" for 0x40f178>, <DisassemblerInsn "jmp" for 0x40f17c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f19e>, <DisassemblerInsn "mov" for 0x40f1a3>, <DisassemblerInsn "mov" for 0x40f1a8>, <DisassemblerInsn "add" for 0x40f1ac>, <DisassemblerInsn "cmp" for 0x40f1b0>, <DisassemblerInsn "mov" for 0x40f1b3>, <DisassemblerInsn "mov" for 0x40f1b8>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1be>, <DisassemblerInsn "jne" for 0x40f1c2>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f17e>, <DisassemblerInsn "mov" for 0x40f182>, <DisassemblerInsn "mov" for 0x40f187>, <DisassemblerInsn "mov" for 0x40f18c>, <DisassemblerInsn "cmp" for 0x40f191>, <DisassemblerInsn "cmove" for 0x40f195>, <DisassemblerInsn "add" for 0x40f198>, <DisassemblerInsn "mov" for 0x40f19a>, <DisassemblerInsn "mov" for 0x40f19e>, <DisassemblerInsn "mov" for 0x40f1a3>, <DisassemblerInsn "mov" for 0x40f1a8>, <DisassemblerInsn "add" for 0x40f1ac>, <DisassemblerInsn "cmp" for 0x40f1b0>, <DisassemblerInsn "mov" for 0x40f1b3>, <DisassemblerInsn "mov" for 0x40f1b8>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1be>, <DisassemblerInsn "jne" for 0x40f1c2>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f029>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f036>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f041>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f048>, <DisassemblerInsn "mov" for 0x40f04c>, <DisassemblerInsn "call" for 0x40f051>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f163>, <DisassemblerInsn "cmp" for 0x40f167>, <DisassemblerInsn "jae" for 0x40f169>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f26c>, <DisassemblerInsn "mov" for 0x40f273>, <DisassemblerInsn "mov" for 0x40f27a>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "mov" for 0x40f288>, <DisassemblerInsn "mov" for 0x40f290>, <DisassemblerInsn "mov" for 0x40f298>, <DisassemblerInsn "mov" for 0x40f29d>, <DisassemblerInsn "mov" for 0x40f2a1>, <DisassemblerInsn "cdq" for 0x40f2a7>, <DisassemblerInsn "idiv" for 0x40f2a8>, <DisassemblerInsn "mov" for 0x40f2ab>, <DisassemblerInsn "mov" for 0x40f2ad>, <DisassemblerInsn "imul" for 0x40f2b1>, <DisassemblerInsn "mov" for 0x40f2b4>, <DisassemblerInsn "mov" for 0x40f2b8>, <DisassemblerInsn "cdq" for 0x40f2be>, <DisassemblerInsn "idiv" for 0x40f2bf>, <DisassemblerInsn "mov" for 0x40f2c2>, <DisassemblerInsn "mov" for 0x40f2c6>, <DisassemblerInsn "mov" for 0x40f2c9>, <DisassemblerInsn "sar" for 0x40f2cd>, <DisassemblerInsn "add" for 0x40f2cf>, <DisassemblerInsn "imul" for 0x40f2d2>, <DisassemblerInsn "imul" for 0x40f2d5>, <DisassemblerInsn "add" for 0x40f2d8>, <DisassemblerInsn "add" for 0x40f2db>, <DisassemblerInsn "add" for 0x40f2dd>, <DisassemblerInsn "mov" for 0x40f2df>, <DisassemblerInsn "add" for 0x40f2e3>, <DisassemblerInsn "cmp" for 0x40f2e7>, <DisassemblerInsn "mov" for 0x40f2eb>, <DisassemblerInsn "mov" for 0x40f2f2>, <DisassemblerInsn "mov" for 0x40f2fa>, <DisassemblerInsn "jne" for 0x40f301>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40f056>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40f320>, <DisassemblerInsn "mov" for 0x40f327>, <DisassemblerInsn "mov" for 0x40f32f>, <DisassemblerInsn "add" for 0x40f332>, <DisassemblerInsn "mov" for 0x40f338>, <DisassemblerInsn "mov" for 0x40f340>, <DisassemblerInsn "mov" for 0x40f347>, <DisassemblerInsn "mov" for 0x40f34f>, <DisassemblerInsn "mov" for 0x40f352>, <DisassemblerInsn "add" for 0x40f355>, <DisassemblerInsn "mov" for 0x40f35c>, <DisassemblerInsn "mov" for 0x40f364>, <DisassemblerInsn "mov" for 0x40f36b>, <DisassemblerInsn "cmp" for 0x40f373>, <DisassemblerInsn "je" for 0x40f376>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f058>, <DisassemblerInsn "mov" for 0x40f060>, <DisassemblerInsn "mov" for 0x40f065>, <DisassemblerInsn "mov" for 0x40f06d>, <DisassemblerInsn "mov" for 0x40f075>, <DisassemblerInsn "mov" for 0x40f07d>, <DisassemblerInsn "mov" for 0x40f085>, <DisassemblerInsn "mov" for 0x40f08d>, <DisassemblerInsn "mov" for 0x40f090>, <DisassemblerInsn "mov" for 0x40f094>, <DisassemblerInsn "mov" for 0x40f097>, <DisassemblerInsn "mov" for 0x40f09b>, <DisassemblerInsn "mov" for 0x40f0a2>, <DisassemblerInsn "mov" for 0x40f0a5>, <DisassemblerInsn "mov" for 0x40f0a8>, <DisassemblerInsn "xor" for 0x40f0ac>, <DisassemblerInsn "mov" for 0x40f0ae>, <DisassemblerInsn "mov" for 0x40f0b5>, <DisassemblerInsn "mov" for 0x40f0b9>, <DisassemblerInsn "call" for 0x40f0be>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f307>, <DisassemblerInsn "add" for 0x40f30b>, <DisassemblerInsn "ret" for 0x40f312>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f208>, <DisassemblerInsn "mov" for 0x40f20c>, <DisassemblerInsn "mov" for 0x40f210>, <DisassemblerInsn "mov" for 0x40f218>, <DisassemblerInsn "mov" for 0x40f220>, <DisassemblerInsn "mov" for 0x40f228>, <DisassemblerInsn "mov" for 0x40f230>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f234>, <DisassemblerInsn "mov" for 0x40f236>, <DisassemblerInsn "mov" for 0x40f239>, <DisassemblerInsn "mov" for 0x40f241>, <DisassemblerInsn "mov" for 0x40f248>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25d>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f26c>, <DisassemblerInsn "mov" for 0x40f273>, <DisassemblerInsn "mov" for 0x40f27a>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "mov" for 0x40f288>, <DisassemblerInsn "mov" for 0x40f290>, <DisassemblerInsn "mov" for 0x40f298>, <DisassemblerInsn "mov" for 0x40f29d>, <DisassemblerInsn "mov" for 0x40f2a1>, <DisassemblerInsn "cdq" for 0x40f2a7>, <DisassemblerInsn "idiv" for 0x40f2a8>, <DisassemblerInsn "mov" for 0x40f2ab>, <DisassemblerInsn "mov" for 0x40f2ad>, <DisassemblerInsn "imul" for 0x40f2b1>, <DisassemblerInsn "mov" for 0x40f2b4>, <DisassemblerInsn "mov" for 0x40f2b8>, <DisassemblerInsn "cdq" for 0x40f2be>, <DisassemblerInsn "idiv" for 0x40f2bf>, <DisassemblerInsn "mov" for 0x40f2c2>, <DisassemblerInsn "mov" for 0x40f2c6>, <DisassemblerInsn "mov" for 0x40f2c9>, <DisassemblerInsn "sar" for 0x40f2cd>, <DisassemblerInsn "add" for 0x40f2cf>, <DisassemblerInsn "imul" for 0x40f2d2>, <DisassemblerInsn "imul" for 0x40f2d5>, <DisassemblerInsn "add" for 0x40f2d8>, <DisassemblerInsn "add" for 0x40f2db>, <DisassemblerInsn "add" for 0x40f2dd>, <DisassemblerInsn "mov" for 0x40f2df>, <DisassemblerInsn "add" for 0x40f2e3>, <DisassemblerInsn "cmp" for 0x40f2e7>, <DisassemblerInsn "mov" for 0x40f2eb>, <DisassemblerInsn "mov" for 0x40f2f2>, <DisassemblerInsn "mov" for 0x40f2fa>, <DisassemblerInsn "jne" for 0x40f301>]'}], 'cfg_block_detailed_info': [{'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f163>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf97]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f264>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40f320>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f163>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40f058>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40efe8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x40f1c8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40f19e>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf97]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f264>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f264>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40f058>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x80]>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rsi, qword ptr [rsp - 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~rdx, qword ptr [rdx]>', '<add~~rsi, rcx>', '<shl~~esi, 8>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rax + rcx*8], rdx>', '<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40f19e>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40f118>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40f118>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x40f17e>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 29, 'blockInsts': ['<jmp~~0x40f0c3>']}, {'block_Idx': 1, 'blockInsts': ['<sub~~rsp, 0x2c8>', '<mov~~qword ptr [rsp + 0x2a0], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x2030>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rcx, qword ptr [rdi + 0x2328]>', '<mov~~qword ptr [rsp + 0x2c0], rcx>', '<cmp~~rax, rcx>', '<je~~0x40fdb6>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf10a3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}], 'cfg_edge_info': [(46, 33), (18, 29), (37, 18), (34, 40), (16, 7), (19, 30), (30, 33), (38, 16), (7, 10), (33, 38), (49, 40), (39, 44), (66, 4), (0, 1), (2, 4), (0, 4), (40, 46), (34, 39), (10, 17), (11, 19), (33, 37), (38, 17), (4, 7), (44, 49), (29, 30), (46, 49), (49, 39), (37, 19), (40, 45), (45, 44), (10, 16), (11, 18), (7, 11), (30, 34), (44, 33)], 'cdg_edge_info': [(49, 44), (33, 30), (7, 38), (40, 44), (37, 18), (34, 40), (38, 7), (38, 16), (11, 29), (7, 10), (49, 40), (40, 46), (37, 29), (34, 39), (11, 19), (33, 37), (7, 30), (44, 49), (7, 33), (46, 49), (49, 39), (37, 19), (40, 45), (10, 7), (10, 16), (34, 44), (11, 18), (7, 11), (30, 34), (33, 33)], 'ddg_edge_info': [(18, 17), (19, 46), (16, 38), (39, 33), (19, 18), (37, 33), (4, 30), (38, 16), (49, 16), (19, 39), (18, 19), (33, 38), (18, 37), (19, 11), (49, 46), (11, 30), (11, 37), (39, 19), (0, 37), (18, 30), (39, 37), (49, 39), (37, 19), (39, 46), (19, 34), (30, 34), (0, 30), (39, 30), (4, 18), (37, 30), (34, 46), (45, 46), (18, 16), (19, 45), (4, 11), (18, 46), (4, 38), (19, 38), (33, 37), (39, 16), (46, 49), (49, 45), (18, 39), (11, 18), (18, 11), (19, 40), (39, 18), (19, 49), (46, 33), (30, 49), (4, 33), (0, 11), (37, 39), (19, 33), (30, 33), (49, 40), (16, 37), (4, 17), (18, 34), (0, 4), (19, 17), (4, 19), (18, 45), (19, 37), (38, 17), (18, 38), (37, 18), (34, 49), (19, 30), (40, 16), (18, 40), (18, 49), (11, 19), (0, 19), (4, 16), (18, 33), (19, 16), (39, 49), (4, 37), (37, 49), (16, 11)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_16'}, {'instIndex': 93, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 94, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 95, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 96, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 97, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 98, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 99, 'instruction': 'jne\t.LBB3_5'}, {'instIndex': 103, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 104, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 105, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 106, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 107, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 108, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 109, 'instruction': 'jmp\t.LBB3_6'}, {'instIndex': 117, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 118, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 119, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 120, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 121, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 123, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 124, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 125, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 126, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 127, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 128, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 129, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 133, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 137, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 200, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 201, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 202, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 203, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 204, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 205, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 206, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 207, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 209, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 254, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 255, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O3/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O3/ac3enc.s---bit_alloc---after
function id: 3
function flag: True
There are 272 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %ecx'}, {'instIndex': 29, 'instruction': 'movl\t%ecx, 0x128(%rsp)                 # 4-byte Spill'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 53, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 57, 'instruction': 'movl\t%edi, 0xb8(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%esi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 59, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 60, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 61, 'instruction': 'movl\t%edx, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 63, 'instruction': 'movl\t%eax, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 64, 'instruction': 'jle\t.LBB3_17'}, {'instIndex': 99, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 100, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 101, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 102, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 103, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 104, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 105, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 109, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 111, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 112, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 113, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 114, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 123, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 124, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 125, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 126, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 128, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 129, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 130, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 131, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 132, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 133, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 134, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 135, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 139, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 140, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 141, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 142, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 143, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 206, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 207, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 208, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 209, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 210, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 211, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 212, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 213, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 215, 'instruction': 'jl\t.LBB3_4'}, {'instIndex': 260, 'instruction': 'addl\t%esi, %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O3/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O3/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 980 nodes and 1814 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 272 instructions in binary file.
[4267053, 4267210, 4267261, 4267395, 4267544, 4267609, 4267654, 4267656, 4267763, 4268024, 4268088, 4268180]
The execution time of patched subCFG information extraction via angr: 0:00:12.653795
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412038>, <DisassemblerInsn "mov" for 0x41203c>, <DisassemblerInsn "mov" for 0x412040>, <DisassemblerInsn "mov" for 0x412048>, <DisassemblerInsn "mov" for 0x412050>, <DisassemblerInsn "mov" for 0x412058>, <DisassemblerInsn "mov" for 0x412060>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x412064>, <DisassemblerInsn "mov" for 0x412066>, <DisassemblerInsn "mov" for 0x412069>, <DisassemblerInsn "mov" for 0x412071>, <DisassemblerInsn "mov" for 0x412078>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208d>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x41209c>, <DisassemblerInsn "mov" for 0x4120a3>, <DisassemblerInsn "mov" for 0x4120aa>, <DisassemblerInsn "mov" for 0x4120b1>, <DisassemblerInsn "mov" for 0x4120b8>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120cd>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "cdq" for 0x4120d7>, <DisassemblerInsn "idiv" for 0x4120d8>, <DisassemblerInsn "mov" for 0x4120db>, <DisassemblerInsn "mov" for 0x4120dd>, <DisassemblerInsn "imul" for 0x4120e1>, <DisassemblerInsn "mov" for 0x4120e4>, <DisassemblerInsn "mov" for 0x4120e8>, <DisassemblerInsn "cdq" for 0x4120ee>, <DisassemblerInsn "idiv" for 0x4120ef>, <DisassemblerInsn "mov" for 0x4120f2>, <DisassemblerInsn "mov" for 0x4120f6>, <DisassemblerInsn "mov" for 0x4120f9>, <DisassemblerInsn "sar" for 0x4120fd>, <DisassemblerInsn "add" for 0x4120ff>, <DisassemblerInsn "imul" for 0x412102>, <DisassemblerInsn "imul" for 0x412105>, <DisassemblerInsn "add" for 0x412108>, <DisassemblerInsn "add" for 0x41210b>, <DisassemblerInsn "add" for 0x41210d>, <DisassemblerInsn "add" for 0x41210f>, <DisassemblerInsn "cmp" for 0x412113>, <DisassemblerInsn "mov" for 0x412117>, <DisassemblerInsn "mov" for 0x41211e>, <DisassemblerInsn "mov" for 0x412126>, <DisassemblerInsn "mov" for 0x412128>, <DisassemblerInsn "mov" for 0x41212f>, <DisassemblerInsn "jne" for 0x412136>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e59>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e66>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e71>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e78>, <DisassemblerInsn "mov" for 0x411e7c>, <DisassemblerInsn "call" for 0x411e81>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x41209c>, <DisassemblerInsn "mov" for 0x4120a3>, <DisassemblerInsn "mov" for 0x4120aa>, <DisassemblerInsn "mov" for 0x4120b1>, <DisassemblerInsn "mov" for 0x4120b8>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120cd>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "cdq" for 0x4120d7>, <DisassemblerInsn "idiv" for 0x4120d8>, <DisassemblerInsn "mov" for 0x4120db>, <DisassemblerInsn "mov" for 0x4120dd>, <DisassemblerInsn "imul" for 0x4120e1>, <DisassemblerInsn "mov" for 0x4120e4>, <DisassemblerInsn "mov" for 0x4120e8>, <DisassemblerInsn "cdq" for 0x4120ee>, <DisassemblerInsn "idiv" for 0x4120ef>, <DisassemblerInsn "mov" for 0x4120f2>, <DisassemblerInsn "mov" for 0x4120f6>, <DisassemblerInsn "mov" for 0x4120f9>, <DisassemblerInsn "sar" for 0x4120fd>, <DisassemblerInsn "add" for 0x4120ff>, <DisassemblerInsn "imul" for 0x412102>, <DisassemblerInsn "imul" for 0x412105>, <DisassemblerInsn "add" for 0x412108>, <DisassemblerInsn "add" for 0x41210b>, <DisassemblerInsn "add" for 0x41210d>, <DisassemblerInsn "add" for 0x41210f>, <DisassemblerInsn "cmp" for 0x412113>, <DisassemblerInsn "mov" for 0x412117>, <DisassemblerInsn "mov" for 0x41211e>, <DisassemblerInsn "mov" for 0x412126>, <DisassemblerInsn "mov" for 0x412128>, <DisassemblerInsn "mov" for 0x41212f>, <DisassemblerInsn "jne" for 0x412136>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fce>, <DisassemblerInsn "mov" for 0x411fd3>, <DisassemblerInsn "mov" for 0x411fd8>, <DisassemblerInsn "add" for 0x411fdc>, <DisassemblerInsn "cmp" for 0x411fe0>, <DisassemblerInsn "mov" for 0x411fe3>, <DisassemblerInsn "mov" for 0x411fe8>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411fee>, <DisassemblerInsn "jne" for 0x411ff2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x411c00>, <DisassemblerInsn "mov" for 0x411c07>, <DisassemblerInsn "mov" for 0x411c09>, <DisassemblerInsn "lea" for 0x411c11>, <DisassemblerInsn "shl" for 0x411c19>, <DisassemblerInsn "add" for 0x411c1c>, <DisassemblerInsn "mov" for 0x411c21>, <DisassemblerInsn "call" for 0x411c28>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e18>, <DisassemblerInsn "mov" for 0x411e20>, <DisassemblerInsn "mov" for 0x411e28>, <DisassemblerInsn "mov" for 0x411e30>, <DisassemblerInsn "mov" for 0x411e37>, <DisassemblerInsn "mov" for 0x411e3b>, <DisassemblerInsn "add" for 0x411e40>, <DisassemblerInsn "imul" for 0x411e46>, <DisassemblerInsn "add" for 0x411e4a>, <DisassemblerInsn "add" for 0x411e4d>, <DisassemblerInsn "add" for 0x411e51>, <DisassemblerInsn "cmp" for 0x411e54>, <DisassemblerInsn "jne" for 0x411e57>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ef3>, <DisassemblerInsn "mov" for 0x411efb>, <DisassemblerInsn "mov" for 0x411f00>, <DisassemblerInsn "mov" for 0x411f08>, <DisassemblerInsn "mov" for 0x411f0b>, <DisassemblerInsn "mov" for 0x411f0f>, <DisassemblerInsn "mov" for 0x411f14>, <DisassemblerInsn "mov" for 0x411f1b>, <DisassemblerInsn "xor" for 0x411f1f>, <DisassemblerInsn "cmp" for 0x411f21>, <DisassemblerInsn "mov" for 0x411f24>, <DisassemblerInsn "jle" for 0x411f28>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411c2d>, <DisassemblerInsn "lea" for 0x411c35>, <DisassemblerInsn "add" for 0x411c3d>, <DisassemblerInsn "mov" for 0x411c41>, <DisassemblerInsn "lea" for 0x411c49>, <DisassemblerInsn "add" for 0x411c51>, <DisassemblerInsn "mov" for 0x411c55>, <DisassemblerInsn "lea" for 0x411c5d>, <DisassemblerInsn "add" for 0x411c65>, <DisassemblerInsn "mov" for 0x411c69>, <DisassemblerInsn "lea" for 0x411c71>, <DisassemblerInsn "add" for 0x411c79>, <DisassemblerInsn "mov" for 0x411c7d>, <DisassemblerInsn "mov" for 0x411c85>, <DisassemblerInsn "add" for 0x411c88>, <DisassemblerInsn "mov" for 0x411c8e>, <DisassemblerInsn "mov" for 0x411c96>, <DisassemblerInsn "add" for 0x411c99>, <DisassemblerInsn "add" for 0x411c9f>, <DisassemblerInsn "mov" for 0x411ca3>, <DisassemblerInsn "mov" for 0x411cab>, <DisassemblerInsn "mov" for 0x411cb1>, <DisassemblerInsn "xor" for 0x411cb8>, <DisassemblerInsn "cmp" for 0x411cba>, <DisassemblerInsn "mov" for 0x411cbd>, <DisassemblerInsn "jle" for 0x411cc4>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x411e86>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fae>, <DisassemblerInsn "mov" for 0x411fb2>, <DisassemblerInsn "mov" for 0x411fb7>, <DisassemblerInsn "mov" for 0x411fbc>, <DisassemblerInsn "cmp" for 0x411fc1>, <DisassemblerInsn "cmove" for 0x411fc5>, <DisassemblerInsn "add" for 0x411fc8>, <DisassemblerInsn "mov" for 0x411fca>, <DisassemblerInsn "mov" for 0x411fce>, <DisassemblerInsn "mov" for 0x411fd3>, <DisassemblerInsn "mov" for 0x411fd8>, <DisassemblerInsn "add" for 0x411fdc>, <DisassemblerInsn "cmp" for 0x411fe0>, <DisassemblerInsn "mov" for 0x411fe3>, <DisassemblerInsn "mov" for 0x411fe8>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411fee>, <DisassemblerInsn "jne" for 0x411ff2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d83>, <DisassemblerInsn "mov" for 0x411d8a>, <DisassemblerInsn "mov" for 0x411d92>, <DisassemblerInsn "mov" for 0x411d9a>, <DisassemblerInsn "add" for 0x411d9d>, <DisassemblerInsn "imul" for 0x411da4>, <DisassemblerInsn "add" for 0x411da8>, <DisassemblerInsn "add" for 0x411dab>, <DisassemblerInsn "mov" for 0x411daf>, <DisassemblerInsn "mov" for 0x411db7>, <DisassemblerInsn "add" for 0x411dba>, <DisassemblerInsn "imul" for 0x411dc1>, <DisassemblerInsn "add" for 0x411dc5>, <DisassemblerInsn "add" for 0x411dc8>, <DisassemblerInsn "mov" for 0x411dcc>, <DisassemblerInsn "mov" for 0x411dd4>, <DisassemblerInsn "add" for 0x411dd7>, <DisassemblerInsn "imul" for 0x411dde>, <DisassemblerInsn "add" for 0x411de2>, <DisassemblerInsn "mov" for 0x411de5>, <DisassemblerInsn "add" for 0x411ded>, <DisassemblerInsn "add" for 0x411df1>, <DisassemblerInsn "imul" for 0x411df8>, <DisassemblerInsn "add" for 0x411dfc>, <DisassemblerInsn "mov" for 0x411dff>, <DisassemblerInsn "xor" for 0x411e07>, <DisassemblerInsn "mov" for 0x411e09>, <DisassemblerInsn "mov" for 0x411e11>, <DisassemblerInsn "mov" for 0x411e18>, <DisassemblerInsn "mov" for 0x411e20>, <DisassemblerInsn "mov" for 0x411e28>, <DisassemblerInsn "mov" for 0x411e30>, <DisassemblerInsn "mov" for 0x411e37>, <DisassemblerInsn "mov" for 0x411e3b>, <DisassemblerInsn "add" for 0x411e40>, <DisassemblerInsn "imul" for 0x411e46>, <DisassemblerInsn "add" for 0x411e4a>, <DisassemblerInsn "add" for 0x411e4d>, <DisassemblerInsn "add" for 0x411e51>, <DisassemblerInsn "cmp" for 0x411e54>, <DisassemblerInsn "jne" for 0x411e57>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e88>, <DisassemblerInsn "mov" for 0x411e90>, <DisassemblerInsn "mov" for 0x411e95>, <DisassemblerInsn "mov" for 0x411e9d>, <DisassemblerInsn "mov" for 0x411ea5>, <DisassemblerInsn "mov" for 0x411ead>, <DisassemblerInsn "mov" for 0x411eb5>, <DisassemblerInsn "mov" for 0x411ebd>, <DisassemblerInsn "mov" for 0x411ec0>, <DisassemblerInsn "mov" for 0x411ec4>, <DisassemblerInsn "mov" for 0x411ec7>, <DisassemblerInsn "mov" for 0x411ecb>, <DisassemblerInsn "mov" for 0x411ed2>, <DisassemblerInsn "mov" for 0x411ed5>, <DisassemblerInsn "mov" for 0x411ed8>, <DisassemblerInsn "xor" for 0x411edc>, <DisassemblerInsn "mov" for 0x411ede>, <DisassemblerInsn "mov" for 0x411ee5>, <DisassemblerInsn "mov" for 0x411ee9>, <DisassemblerInsn "call" for 0x411eee>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f2e>, <DisassemblerInsn "mov" for 0x411f32>, <DisassemblerInsn "mov" for 0x411f34>, <DisassemblerInsn "xor" for 0x411f39>, <DisassemblerInsn "mov" for 0x411f3b>, <DisassemblerInsn "xor" for 0x411f3d>, <DisassemblerInsn "mov" for 0x411f3f>, <DisassemblerInsn "mov" for 0x411f44>, <DisassemblerInsn "mov" for 0x411f48>, <DisassemblerInsn "mov" for 0x411f4d>, <DisassemblerInsn "mov" for 0x411f52>, <DisassemblerInsn "mov" for 0x411f56>, <DisassemblerInsn "mov" for 0x411f5a>, <DisassemblerInsn "mov" for 0x411f5f>, <DisassemblerInsn "mov" for 0x411f62>, <DisassemblerInsn "movzx" for 0x411f66>, <DisassemblerInsn "mov" for 0x411f69>, <DisassemblerInsn "cmp" for 0x411f6d>, <DisassemblerInsn "jae" for 0x411f6f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41213c>, <DisassemblerInsn "add" for 0x412143>, <DisassemblerInsn "ret" for 0x41214a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ff8>, <DisassemblerInsn "mov" for 0x412000>, <DisassemblerInsn "mov" for 0x412005>, <DisassemblerInsn "mov" for 0x412009>, <DisassemblerInsn "add" for 0x41200d>, <DisassemblerInsn "mov" for 0x41200f>, <DisassemblerInsn "add" for 0x412013>, <DisassemblerInsn "mov" for 0x412017>, <DisassemblerInsn "mov" for 0x412019>, <DisassemblerInsn "movsxd" for 0x41201d>, <DisassemblerInsn "cmp" for 0x412020>, <DisassemblerInsn "mov" for 0x412023>, <DisassemblerInsn "mov" for 0x41202b>, <DisassemblerInsn "jl" for 0x412032>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cca>, <DisassemblerInsn "lea" for 0x411cd1>, <DisassemblerInsn "mov" for 0x411cd9>, <DisassemblerInsn "xor" for 0x411ce1>, <DisassemblerInsn "mov" for 0x411ce3>, <DisassemblerInsn "xor" for 0x411ce5>, <DisassemblerInsn "mov" for 0x411ce7>, <DisassemblerInsn "mov" for 0x411cee>, <DisassemblerInsn "mov" for 0x411cf6>, <DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xb8], r8d>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x411f48>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x10d7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412094>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xec], eax>', '<call~~0x412150>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x411e88>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x411ff8>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x100], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ecx, dword ptr [rdi + 0x2238]>', '<mov~~dword ptr [rsp + 0x128], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jle~~0x41213c>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x411ef3>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x411f48>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x411e88>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee273]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f93>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x411e18>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x128]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x10d7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412094>']}], 'cfg_edge_info': [(3, 4), (4, 6), (5, 7), (11, 14), (10, 12), (1, 3), (13, 8), (6, 5), (4, 2), (14, 6), (17, 11), (19, 11), (0, 1), (9, 10), (1, 2), (10, 11), (13, 7), (11, 13), (6, 4), (7, 9), (14, 2), (3, 5), (5, 8), (8, 10)]}]}
{'bit_alloc': [4267053, 4267210, 4267261, 4267395, 4267544, 4267609, 4267654, 4267656, 4267763, 4268024, 4268088, 4268180]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/O3/ac3enc.o---after
The extraction of function: bit_alloc
[4267053, 4267210, 4267261, 4267395, 4267544, 4267609, 4267654, 4267656, 4267763, 4268024, 4268088, 4268180]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 58 nodes and 105 edges in CFGEmulated.
It has 57 nodes and 90 edges in CDG.
It has 3185 nodes and 4193 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4267053, 4267210, 4267261, 4267395, 4267544, 4267609, 4267654, 4267656, 4267763, 4268024, 4268088, 4268180]
{4267008, 4267395, 4267654, 4267656, 4267923, 4268180, 4267544, 4267931, 4267053, 4267822, 4267950, 4268088, 4267324, 4268348, 4267848, 4267210, 4267982, 4267609, 4267889, 4267763, 4268024, 4267261}
[24, 56, 36, 6, 7, 15, 22, 23, 37, 43, 48, 42, 16, 33, 41, 4, 2, 10, 53, 47, 0, 1, 49, 44, 32]
The execution time of patched slicing information extraction via angr: 0:00:12.999441
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e88>, <DisassemblerInsn "mov" for 0x411e90>, <DisassemblerInsn "mov" for 0x411e95>, <DisassemblerInsn "mov" for 0x411e9d>, <DisassemblerInsn "mov" for 0x411ea5>, <DisassemblerInsn "mov" for 0x411ead>, <DisassemblerInsn "mov" for 0x411eb5>, <DisassemblerInsn "mov" for 0x411ebd>, <DisassemblerInsn "mov" for 0x411ec0>, <DisassemblerInsn "mov" for 0x411ec4>, <DisassemblerInsn "mov" for 0x411ec7>, <DisassemblerInsn "mov" for 0x411ecb>, <DisassemblerInsn "mov" for 0x411ed2>, <DisassemblerInsn "mov" for 0x411ed5>, <DisassemblerInsn "mov" for 0x411ed8>, <DisassemblerInsn "xor" for 0x411edc>, <DisassemblerInsn "mov" for 0x411ede>, <DisassemblerInsn "mov" for 0x411ee5>, <DisassemblerInsn "mov" for 0x411ee9>, <DisassemblerInsn "call" for 0x411eee>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412b5c>, <DisassemblerInsn "mov" for 0x412b61>, <DisassemblerInsn "mov" for 0x412b66>, <DisassemblerInsn "mov" for 0x412b6b>, <DisassemblerInsn "mov" for 0x412b73>, <DisassemblerInsn "add" for 0x412b76>, <DisassemblerInsn "shl" for 0x412b79>, <DisassemblerInsn "movsxd" for 0x412b7c>, <DisassemblerInsn "add" for 0x412b7f>, <DisassemblerInsn "mov" for 0x412b82>, <DisassemblerInsn "mov" for 0x412b85>, <DisassemblerInsn "add" for 0x412b89>, <DisassemblerInsn "ret" for 0x412b90>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ff8>, <DisassemblerInsn "mov" for 0x412000>, <DisassemblerInsn "mov" for 0x412005>, <DisassemblerInsn "mov" for 0x412009>, <DisassemblerInsn "add" for 0x41200d>, <DisassemblerInsn "mov" for 0x41200f>, <DisassemblerInsn "add" for 0x412013>, <DisassemblerInsn "mov" for 0x412017>, <DisassemblerInsn "mov" for 0x412019>, <DisassemblerInsn "movsxd" for 0x41201d>, <DisassemblerInsn "cmp" for 0x412020>, <DisassemblerInsn "mov" for 0x412023>, <DisassemblerInsn "mov" for 0x41202b>, <DisassemblerInsn "jl" for 0x412032>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41213c>, <DisassemblerInsn "add" for 0x412143>, <DisassemblerInsn "ret" for 0x41214a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cca>, <DisassemblerInsn "lea" for 0x411cd1>, <DisassemblerInsn "mov" for 0x411cd9>, <DisassemblerInsn "xor" for 0x411ce1>, <DisassemblerInsn "mov" for 0x411ce3>, <DisassemblerInsn "xor" for 0x411ce5>, <DisassemblerInsn "mov" for 0x411ce7>, <DisassemblerInsn "mov" for 0x411cee>, <DisassemblerInsn "mov" for 0x411cf6>, <DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x41209c>, <DisassemblerInsn "mov" for 0x4120a3>, <DisassemblerInsn "mov" for 0x4120aa>, <DisassemblerInsn "mov" for 0x4120b1>, <DisassemblerInsn "mov" for 0x4120b8>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120cd>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "cdq" for 0x4120d7>, <DisassemblerInsn "idiv" for 0x4120d8>, <DisassemblerInsn "mov" for 0x4120db>, <DisassemblerInsn "mov" for 0x4120dd>, <DisassemblerInsn "imul" for 0x4120e1>, <DisassemblerInsn "mov" for 0x4120e4>, <DisassemblerInsn "mov" for 0x4120e8>, <DisassemblerInsn "cdq" for 0x4120ee>, <DisassemblerInsn "idiv" for 0x4120ef>, <DisassemblerInsn "mov" for 0x4120f2>, <DisassemblerInsn "mov" for 0x4120f6>, <DisassemblerInsn "mov" for 0x4120f9>, <DisassemblerInsn "sar" for 0x4120fd>, <DisassemblerInsn "add" for 0x4120ff>, <DisassemblerInsn "imul" for 0x412102>, <DisassemblerInsn "imul" for 0x412105>, <DisassemblerInsn "add" for 0x412108>, <DisassemblerInsn "add" for 0x41210b>, <DisassemblerInsn "add" for 0x41210d>, <DisassemblerInsn "add" for 0x41210f>, <DisassemblerInsn "cmp" for 0x412113>, <DisassemblerInsn "mov" for 0x412117>, <DisassemblerInsn "mov" for 0x41211e>, <DisassemblerInsn "mov" for 0x412126>, <DisassemblerInsn "mov" for 0x412128>, <DisassemblerInsn "mov" for 0x41212f>, <DisassemblerInsn "jne" for 0x412136>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e59>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e66>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e71>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e78>, <DisassemblerInsn "mov" for 0x411e7c>, <DisassemblerInsn "call" for 0x411e81>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f2e>, <DisassemblerInsn "mov" for 0x411f32>, <DisassemblerInsn "mov" for 0x411f34>, <DisassemblerInsn "xor" for 0x411f39>, <DisassemblerInsn "mov" for 0x411f3b>, <DisassemblerInsn "xor" for 0x411f3d>, <DisassemblerInsn "mov" for 0x411f3f>, <DisassemblerInsn "mov" for 0x411f44>, <DisassemblerInsn "mov" for 0x411f48>, <DisassemblerInsn "mov" for 0x411f4d>, <DisassemblerInsn "mov" for 0x411f52>, <DisassemblerInsn "mov" for 0x411f56>, <DisassemblerInsn "mov" for 0x411f5a>, <DisassemblerInsn "mov" for 0x411f5f>, <DisassemblerInsn "mov" for 0x411f62>, <DisassemblerInsn "movzx" for 0x411f66>, <DisassemblerInsn "mov" for 0x411f69>, <DisassemblerInsn "cmp" for 0x411f6d>, <DisassemblerInsn "jae" for 0x411f6f>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f71>, <DisassemblerInsn "mov" for 0x411f75>, <DisassemblerInsn "movzx" for 0x411f79>, <DisassemblerInsn "mov" for 0x411f7c>, <DisassemblerInsn "add" for 0x411f83>, <DisassemblerInsn "mov" for 0x411f86>, <DisassemblerInsn "mov" for 0x411f8d>, <DisassemblerInsn "jmp" for 0x411f91>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f9b>, <DisassemblerInsn "mov" for 0x411f9f>, <DisassemblerInsn "add" for 0x411fa3>, <DisassemblerInsn "add" for 0x411fa6>, <DisassemblerInsn "mov" for 0x411fa8>, <DisassemblerInsn "jmp" for 0x411fac>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412038>, <DisassemblerInsn "mov" for 0x41203c>, <DisassemblerInsn "mov" for 0x412040>, <DisassemblerInsn "mov" for 0x412048>, <DisassemblerInsn "mov" for 0x412050>, <DisassemblerInsn "mov" for 0x412058>, <DisassemblerInsn "mov" for 0x412060>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x412064>, <DisassemblerInsn "mov" for 0x412066>, <DisassemblerInsn "mov" for 0x412069>, <DisassemblerInsn "mov" for 0x412071>, <DisassemblerInsn "mov" for 0x412078>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208d>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x41209c>, <DisassemblerInsn "mov" for 0x4120a3>, <DisassemblerInsn "mov" for 0x4120aa>, <DisassemblerInsn "mov" for 0x4120b1>, <DisassemblerInsn "mov" for 0x4120b8>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120cd>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "cdq" for 0x4120d7>, <DisassemblerInsn "idiv" for 0x4120d8>, <DisassemblerInsn "mov" for 0x4120db>, <DisassemblerInsn "mov" for 0x4120dd>, <DisassemblerInsn "imul" for 0x4120e1>, <DisassemblerInsn "mov" for 0x4120e4>, <DisassemblerInsn "mov" for 0x4120e8>, <DisassemblerInsn "cdq" for 0x4120ee>, <DisassemblerInsn "idiv" for 0x4120ef>, <DisassemblerInsn "mov" for 0x4120f2>, <DisassemblerInsn "mov" for 0x4120f6>, <DisassemblerInsn "mov" for 0x4120f9>, <DisassemblerInsn "sar" for 0x4120fd>, <DisassemblerInsn "add" for 0x4120ff>, <DisassemblerInsn "imul" for 0x412102>, <DisassemblerInsn "imul" for 0x412105>, <DisassemblerInsn "add" for 0x412108>, <DisassemblerInsn "add" for 0x41210b>, <DisassemblerInsn "add" for 0x41210d>, <DisassemblerInsn "add" for 0x41210f>, <DisassemblerInsn "cmp" for 0x412113>, <DisassemblerInsn "mov" for 0x412117>, <DisassemblerInsn "mov" for 0x41211e>, <DisassemblerInsn "mov" for 0x412126>, <DisassemblerInsn "mov" for 0x412128>, <DisassemblerInsn "mov" for 0x41212f>, <DisassemblerInsn "jne" for 0x412136>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d83>, <DisassemblerInsn "mov" for 0x411d8a>, <DisassemblerInsn "mov" for 0x411d92>, <DisassemblerInsn "mov" for 0x411d9a>, <DisassemblerInsn "add" for 0x411d9d>, <DisassemblerInsn "imul" for 0x411da4>, <DisassemblerInsn "add" for 0x411da8>, <DisassemblerInsn "add" for 0x411dab>, <DisassemblerInsn "mov" for 0x411daf>, <DisassemblerInsn "mov" for 0x411db7>, <DisassemblerInsn "add" for 0x411dba>, <DisassemblerInsn "imul" for 0x411dc1>, <DisassemblerInsn "add" for 0x411dc5>, <DisassemblerInsn "add" for 0x411dc8>, <DisassemblerInsn "mov" for 0x411dcc>, <DisassemblerInsn "mov" for 0x411dd4>, <DisassemblerInsn "add" for 0x411dd7>, <DisassemblerInsn "imul" for 0x411dde>, <DisassemblerInsn "add" for 0x411de2>, <DisassemblerInsn "mov" for 0x411de5>, <DisassemblerInsn "add" for 0x411ded>, <DisassemblerInsn "add" for 0x411df1>, <DisassemblerInsn "imul" for 0x411df8>, <DisassemblerInsn "add" for 0x411dfc>, <DisassemblerInsn "mov" for 0x411dff>, <DisassemblerInsn "xor" for 0x411e07>, <DisassemblerInsn "mov" for 0x411e09>, <DisassemblerInsn "mov" for 0x411e11>, <DisassemblerInsn "mov" for 0x411e18>, <DisassemblerInsn "mov" for 0x411e20>, <DisassemblerInsn "mov" for 0x411e28>, <DisassemblerInsn "mov" for 0x411e30>, <DisassemblerInsn "mov" for 0x411e37>, <DisassemblerInsn "mov" for 0x411e3b>, <DisassemblerInsn "add" for 0x411e40>, <DisassemblerInsn "imul" for 0x411e46>, <DisassemblerInsn "add" for 0x411e4a>, <DisassemblerInsn "add" for 0x411e4d>, <DisassemblerInsn "add" for 0x411e51>, <DisassemblerInsn "cmp" for 0x411e54>, <DisassemblerInsn "jne" for 0x411e57>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ef3>, <DisassemblerInsn "mov" for 0x411efb>, <DisassemblerInsn "mov" for 0x411f00>, <DisassemblerInsn "mov" for 0x411f08>, <DisassemblerInsn "mov" for 0x411f0b>, <DisassemblerInsn "mov" for 0x411f0f>, <DisassemblerInsn "mov" for 0x411f14>, <DisassemblerInsn "mov" for 0x411f1b>, <DisassemblerInsn "xor" for 0x411f1f>, <DisassemblerInsn "cmp" for 0x411f21>, <DisassemblerInsn "mov" for 0x411f24>, <DisassemblerInsn "jle" for 0x411f28>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e18>, <DisassemblerInsn "mov" for 0x411e20>, <DisassemblerInsn "mov" for 0x411e28>, <DisassemblerInsn "mov" for 0x411e30>, <DisassemblerInsn "mov" for 0x411e37>, <DisassemblerInsn "mov" for 0x411e3b>, <DisassemblerInsn "add" for 0x411e40>, <DisassemblerInsn "imul" for 0x411e46>, <DisassemblerInsn "add" for 0x411e4a>, <DisassemblerInsn "add" for 0x411e4d>, <DisassemblerInsn "add" for 0x411e51>, <DisassemblerInsn "cmp" for 0x411e54>, <DisassemblerInsn "jne" for 0x411e57>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411c2d>, <DisassemblerInsn "lea" for 0x411c35>, <DisassemblerInsn "add" for 0x411c3d>, <DisassemblerInsn "mov" for 0x411c41>, <DisassemblerInsn "lea" for 0x411c49>, <DisassemblerInsn "add" for 0x411c51>, <DisassemblerInsn "mov" for 0x411c55>, <DisassemblerInsn "lea" for 0x411c5d>, <DisassemblerInsn "add" for 0x411c65>, <DisassemblerInsn "mov" for 0x411c69>, <DisassemblerInsn "lea" for 0x411c71>, <DisassemblerInsn "add" for 0x411c79>, <DisassemblerInsn "mov" for 0x411c7d>, <DisassemblerInsn "mov" for 0x411c85>, <DisassemblerInsn "add" for 0x411c88>, <DisassemblerInsn "mov" for 0x411c8e>, <DisassemblerInsn "mov" for 0x411c96>, <DisassemblerInsn "add" for 0x411c99>, <DisassemblerInsn "add" for 0x411c9f>, <DisassemblerInsn "mov" for 0x411ca3>, <DisassemblerInsn "mov" for 0x411cab>, <DisassemblerInsn "mov" for 0x411cb1>, <DisassemblerInsn "xor" for 0x411cb8>, <DisassemblerInsn "cmp" for 0x411cba>, <DisassemblerInsn "mov" for 0x411cbd>, <DisassemblerInsn "jle" for 0x411cc4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x412b89>, <DisassemblerInsn "ret" for 0x412b90>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f48>, <DisassemblerInsn "mov" for 0x411f4d>, <DisassemblerInsn "mov" for 0x411f52>, <DisassemblerInsn "mov" for 0x411f56>, <DisassemblerInsn "mov" for 0x411f5a>, <DisassemblerInsn "mov" for 0x411f5f>, <DisassemblerInsn "mov" for 0x411f62>, <DisassemblerInsn "movzx" for 0x411f66>, <DisassemblerInsn "mov" for 0x411f69>, <DisassemblerInsn "cmp" for 0x411f6d>, <DisassemblerInsn "jae" for 0x411f6f>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fce>, <DisassemblerInsn "mov" for 0x411fd3>, <DisassemblerInsn "mov" for 0x411fd8>, <DisassemblerInsn "add" for 0x411fdc>, <DisassemblerInsn "cmp" for 0x411fe0>, <DisassemblerInsn "mov" for 0x411fe3>, <DisassemblerInsn "mov" for 0x411fe8>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411fee>, <DisassemblerInsn "jne" for 0x411ff2>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x411c00>, <DisassemblerInsn "mov" for 0x411c07>, <DisassemblerInsn "mov" for 0x411c09>, <DisassemblerInsn "lea" for 0x411c11>, <DisassemblerInsn "shl" for 0x411c19>, <DisassemblerInsn "add" for 0x411c1c>, <DisassemblerInsn "mov" for 0x411c21>, <DisassemblerInsn "call" for 0x411c28>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "sub" for 0x412150>, <DisassemblerInsn "mov" for 0x412157>, <DisassemblerInsn "mov" for 0x41215f>, <DisassemblerInsn "add" for 0x412162>, <DisassemblerInsn "mov" for 0x412168>, <DisassemblerInsn "mov" for 0x412170>, <DisassemblerInsn "mov" for 0x412177>, <DisassemblerInsn "mov" for 0x41217f>, <DisassemblerInsn "mov" for 0x412182>, <DisassemblerInsn "add" for 0x412185>, <DisassemblerInsn "mov" for 0x41218c>, <DisassemblerInsn "mov" for 0x412194>, <DisassemblerInsn "mov" for 0x41219b>, <DisassemblerInsn "cmp" for 0x4121a3>, <DisassemblerInsn "je" for 0x4121a6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fae>, <DisassemblerInsn "mov" for 0x411fb2>, <DisassemblerInsn "mov" for 0x411fb7>, <DisassemblerInsn "mov" for 0x411fbc>, <DisassemblerInsn "cmp" for 0x411fc1>, <DisassemblerInsn "cmove" for 0x411fc5>, <DisassemblerInsn "add" for 0x411fc8>, <DisassemblerInsn "mov" for 0x411fca>, <DisassemblerInsn "mov" for 0x411fce>, <DisassemblerInsn "mov" for 0x411fd3>, <DisassemblerInsn "mov" for 0x411fd8>, <DisassemblerInsn "add" for 0x411fdc>, <DisassemblerInsn "cmp" for 0x411fe0>, <DisassemblerInsn "mov" for 0x411fe3>, <DisassemblerInsn "mov" for 0x411fe8>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411fee>, <DisassemblerInsn "jne" for 0x411ff2>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f93>, <DisassemblerInsn "cmp" for 0x411f97>, <DisassemblerInsn "jae" for 0x411f99>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x411e86>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee273]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x80]>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rsi, qword ptr [rsp - 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~rdx, qword ptr [rdx]>', '<add~~rsi, rcx>', '<shl~~esi, 8>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rax + rcx*8], rdx>', '<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x411e18>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x128]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x10d7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412094>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x10d7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412094>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f93>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x411fce>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x411fce>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xb8], r8d>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x411e88>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x411ff8>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x411e88>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x100], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ecx, dword ptr [rdi + 0x2238]>', '<mov~~dword ptr [rsp + 0x128], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jle~~0x41213c>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412094>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f93>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x411f48>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xec], eax>', '<call~~0x412150>']}, {'block_Idx': 1, 'blockInsts': ['<sub~~rsp, 0x2c8>', '<mov~~qword ptr [rsp + 0x2a0], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x2030>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rcx, qword ptr [rdi + 0x2328]>', '<mov~~qword ptr [rsp + 0x2c0], rcx>', '<cmp~~rax, rcx>', '<je~~0x412b89>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x411f48>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x411fae>']}, {'block_Idx': 32, 'blockInsts': ['<jmp~~0x411ef3>']}], 'cfg_edge_info': [(56, 4), (47, 53), (24, 33), (33, 36), (4, 6), (44, 48), (53, 44), (49, 53), (10, 15), (41, 24), (7, 10), (32, 33), (22, 10), (48, 47), (0, 1), (2, 4), (0, 4), (53, 43), (41, 23), (42, 22), (47, 36), (36, 42), (37, 44), (33, 37), (16, 24), (15, 22), (4, 7), (44, 49), (43, 47), (49, 36), (42, 6), (23, 32), (10, 16), (15, 6), (37, 43), (36, 41), (16, 23)], 'cdg_edge_info': [(47, 53), (16, 32), (44, 48), (53, 44), (49, 53), (53, 47), (10, 15), (41, 24), (10, 33), (10, 36), (10, 42), (44, 47), (42, 10), (53, 43), (36, 33), (41, 23), (42, 22), (36, 36), (41, 32), (37, 47), (15, 10), (37, 44), (33, 37), (16, 24), (15, 22), (4, 7), (44, 49), (4, 10), (10, 16), (37, 43), (36, 41), (16, 23)], 'ddg_edge_info': [(33, 36), (24, 33), (24, 42), (49, 53), (23, 43), (41, 24), (41, 33), (24, 44), (4, 23), (23, 36), (0, 16), (43, 23), (4, 41), (44, 22), (16, 24), (24, 37), (16, 33), (48, 49), (53, 48), (36, 41), (23, 22), (4, 36), (23, 49), (24, 23), (0, 41), (23, 6), (22, 16), (23, 24), (24, 53), (23, 33), (23, 42), (53, 43), (41, 23), (42, 22), (24, 16), (33, 37), (37, 53), (43, 41), (49, 36), (41, 53), (4, 22), (42, 6), (23, 44), (16, 23), (4, 6), (24, 48), (4, 24), (23, 37), (4, 33), (22, 41), (43, 36), (24, 41), (53, 22), (33, 53), (0, 4), (53, 49), (36, 42), (24, 43), (24, 6), (0, 24), (43, 22), (23, 53), (0, 33), (41, 43), (24, 36), (23, 16), (43, 49), (16, 41), (53, 44), (43, 24), (4, 42), (41, 36), (43, 33), (7, 22), (23, 48), (24, 22), (4, 7), (43, 53), (4, 16), (24, 49), (22, 42), (23, 41), (37, 49)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %ecx'}, {'instIndex': 29, 'instruction': 'movl\t%ecx, 0x128(%rsp)                 # 4-byte Spill'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 53, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 57, 'instruction': 'movl\t%edi, 0xb8(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%esi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 59, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 60, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 61, 'instruction': 'movl\t%edx, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 63, 'instruction': 'movl\t%eax, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 64, 'instruction': 'jle\t.LBB3_17'}, {'instIndex': 99, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 100, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 101, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 102, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 103, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 104, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 105, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 109, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 111, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 112, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 113, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 114, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 115, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 123, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 124, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 125, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 126, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 128, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 129, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 130, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 131, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 132, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 133, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 134, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 135, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 139, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 140, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 141, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 142, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 143, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 206, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 207, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 208, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 209, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 210, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 211, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 212, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 213, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 215, 'instruction': 'jl\t.LBB3_4'}, {'instIndex': 260, 'instruction': 'addl\t%esi, %eax'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/Os/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/Os/ac3enc.s---bit_alloc---after
function id: 3
function flag: True
There are 265 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_16'}, {'instIndex': 93, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 94, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 95, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 96, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 97, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 98, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 99, 'instruction': 'jne\t.LBB3_5'}, {'instIndex': 103, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 104, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 105, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 106, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 107, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 108, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 109, 'instruction': 'jmp\t.LBB3_6'}, {'instIndex': 117, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 118, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 119, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 120, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 121, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 123, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 124, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 125, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 126, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 127, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 128, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 129, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 133, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 137, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 200, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 201, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 202, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 203, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 204, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 205, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 206, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 207, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 209, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 254, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 255, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/Os/ac3enc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/Os/ac3enc.o---after
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 682 nodes and 1239 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 265 instructions in binary file.
[4239469, 4239645, 4239779, 4239928, 4239993, 4240038, 4240040, 4240147, 4240408, 4240472, 4240564]
The execution time of patched subCFG information extraction via angr: 0:00:08.323703
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b458>, <DisassemblerInsn "mov" for 0x40b45c>, <DisassemblerInsn "mov" for 0x40b460>, <DisassemblerInsn "mov" for 0x40b468>, <DisassemblerInsn "mov" for 0x40b470>, <DisassemblerInsn "mov" for 0x40b478>, <DisassemblerInsn "mov" for 0x40b480>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b484>, <DisassemblerInsn "mov" for 0x40b486>, <DisassemblerInsn "mov" for 0x40b489>, <DisassemblerInsn "mov" for 0x40b491>, <DisassemblerInsn "mov" for 0x40b498>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4ad>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4bc>, <DisassemblerInsn "mov" for 0x40b4c3>, <DisassemblerInsn "mov" for 0x40b4ca>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "mov" for 0x40b4d8>, <DisassemblerInsn "mov" for 0x40b4e0>, <DisassemblerInsn "mov" for 0x40b4e8>, <DisassemblerInsn "mov" for 0x40b4ed>, <DisassemblerInsn "mov" for 0x40b4f1>, <DisassemblerInsn "cdq" for 0x40b4f7>, <DisassemblerInsn "idiv" for 0x40b4f8>, <DisassemblerInsn "mov" for 0x40b4fb>, <DisassemblerInsn "mov" for 0x40b4fd>, <DisassemblerInsn "imul" for 0x40b501>, <DisassemblerInsn "mov" for 0x40b504>, <DisassemblerInsn "mov" for 0x40b508>, <DisassemblerInsn "cdq" for 0x40b50e>, <DisassemblerInsn "idiv" for 0x40b50f>, <DisassemblerInsn "mov" for 0x40b512>, <DisassemblerInsn "mov" for 0x40b516>, <DisassemblerInsn "mov" for 0x40b519>, <DisassemblerInsn "sar" for 0x40b51d>, <DisassemblerInsn "add" for 0x40b51f>, <DisassemblerInsn "imul" for 0x40b522>, <DisassemblerInsn "imul" for 0x40b525>, <DisassemblerInsn "add" for 0x40b528>, <DisassemblerInsn "add" for 0x40b52b>, <DisassemblerInsn "add" for 0x40b52d>, <DisassemblerInsn "mov" for 0x40b52f>, <DisassemblerInsn "add" for 0x40b533>, <DisassemblerInsn "cmp" for 0x40b537>, <DisassemblerInsn "mov" for 0x40b53b>, <DisassemblerInsn "mov" for 0x40b542>, <DisassemblerInsn "mov" for 0x40b54a>, <DisassemblerInsn "jne" for 0x40b551>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2a8>, <DisassemblerInsn "mov" for 0x40b2b0>, <DisassemblerInsn "mov" for 0x40b2b5>, <DisassemblerInsn "mov" for 0x40b2bd>, <DisassemblerInsn "mov" for 0x40b2c5>, <DisassemblerInsn "mov" for 0x40b2cd>, <DisassemblerInsn "mov" for 0x40b2d5>, <DisassemblerInsn "mov" for 0x40b2dd>, <DisassemblerInsn "mov" for 0x40b2e0>, <DisassemblerInsn "mov" for 0x40b2e4>, <DisassemblerInsn "mov" for 0x40b2e7>, <DisassemblerInsn "mov" for 0x40b2eb>, <DisassemblerInsn "mov" for 0x40b2f2>, <DisassemblerInsn "mov" for 0x40b2f5>, <DisassemblerInsn "mov" for 0x40b2f8>, <DisassemblerInsn "xor" for 0x40b2fc>, <DisassemblerInsn "mov" for 0x40b2fe>, <DisassemblerInsn "mov" for 0x40b305>, <DisassemblerInsn "mov" for 0x40b309>, <DisassemblerInsn "call" for 0x40b30e>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b1a3>, <DisassemblerInsn "mov" for 0x40b1aa>, <DisassemblerInsn "mov" for 0x40b1b2>, <DisassemblerInsn "mov" for 0x40b1ba>, <DisassemblerInsn "add" for 0x40b1bd>, <DisassemblerInsn "imul" for 0x40b1c4>, <DisassemblerInsn "add" for 0x40b1c8>, <DisassemblerInsn "add" for 0x40b1cb>, <DisassemblerInsn "mov" for 0x40b1cf>, <DisassemblerInsn "mov" for 0x40b1d7>, <DisassemblerInsn "add" for 0x40b1da>, <DisassemblerInsn "imul" for 0x40b1e1>, <DisassemblerInsn "add" for 0x40b1e5>, <DisassemblerInsn "add" for 0x40b1e8>, <DisassemblerInsn "mov" for 0x40b1ec>, <DisassemblerInsn "mov" for 0x40b1f4>, <DisassemblerInsn "add" for 0x40b1f7>, <DisassemblerInsn "imul" for 0x40b1fe>, <DisassemblerInsn "add" for 0x40b202>, <DisassemblerInsn "mov" for 0x40b205>, <DisassemblerInsn "add" for 0x40b20d>, <DisassemblerInsn "add" for 0x40b211>, <DisassemblerInsn "imul" for 0x40b218>, <DisassemblerInsn "add" for 0x40b21c>, <DisassemblerInsn "mov" for 0x40b21f>, <DisassemblerInsn "xor" for 0x40b227>, <DisassemblerInsn "mov" for 0x40b229>, <DisassemblerInsn "mov" for 0x40b231>, <DisassemblerInsn "mov" for 0x40b238>, <DisassemblerInsn "mov" for 0x40b240>, <DisassemblerInsn "mov" for 0x40b248>, <DisassemblerInsn "mov" for 0x40b250>, <DisassemblerInsn "mov" for 0x40b257>, <DisassemblerInsn "mov" for 0x40b25b>, <DisassemblerInsn "add" for 0x40b260>, <DisassemblerInsn "imul" for 0x40b266>, <DisassemblerInsn "add" for 0x40b26a>, <DisassemblerInsn "add" for 0x40b26d>, <DisassemblerInsn "add" for 0x40b271>, <DisassemblerInsn "cmp" for 0x40b274>, <DisassemblerInsn "jne" for 0x40b277>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b313>, <DisassemblerInsn "mov" for 0x40b31b>, <DisassemblerInsn "mov" for 0x40b320>, <DisassemblerInsn "mov" for 0x40b328>, <DisassemblerInsn "mov" for 0x40b32b>, <DisassemblerInsn "mov" for 0x40b32f>, <DisassemblerInsn "mov" for 0x40b334>, <DisassemblerInsn "mov" for 0x40b33b>, <DisassemblerInsn "xor" for 0x40b33f>, <DisassemblerInsn "cmp" for 0x40b341>, <DisassemblerInsn "mov" for 0x40b344>, <DisassemblerInsn "jle" for 0x40b348>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ce>, <DisassemblerInsn "mov" for 0x40b3d2>, <DisassemblerInsn "mov" for 0x40b3d7>, <DisassemblerInsn "mov" for 0x40b3dc>, <DisassemblerInsn "cmp" for 0x40b3e1>, <DisassemblerInsn "cmove" for 0x40b3e5>, <DisassemblerInsn "add" for 0x40b3e8>, <DisassemblerInsn "mov" for 0x40b3ea>, <DisassemblerInsn "mov" for 0x40b3ee>, <DisassemblerInsn "mov" for 0x40b3f3>, <DisassemblerInsn "mov" for 0x40b3f8>, <DisassemblerInsn "add" for 0x40b3fc>, <DisassemblerInsn "cmp" for 0x40b400>, <DisassemblerInsn "mov" for 0x40b403>, <DisassemblerInsn "mov" for 0x40b408>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b40e>, <DisassemblerInsn "jne" for 0x40b412>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ee>, <DisassemblerInsn "mov" for 0x40b3f3>, <DisassemblerInsn "mov" for 0x40b3f8>, <DisassemblerInsn "add" for 0x40b3fc>, <DisassemblerInsn "cmp" for 0x40b400>, <DisassemblerInsn "mov" for 0x40b403>, <DisassemblerInsn "mov" for 0x40b408>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b40e>, <DisassemblerInsn "jne" for 0x40b412>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40b2a6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4bc>, <DisassemblerInsn "mov" for 0x40b4c3>, <DisassemblerInsn "mov" for 0x40b4ca>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "mov" for 0x40b4d8>, <DisassemblerInsn "mov" for 0x40b4e0>, <DisassemblerInsn "mov" for 0x40b4e8>, <DisassemblerInsn "mov" for 0x40b4ed>, <DisassemblerInsn "mov" for 0x40b4f1>, <DisassemblerInsn "cdq" for 0x40b4f7>, <DisassemblerInsn "idiv" for 0x40b4f8>, <DisassemblerInsn "mov" for 0x40b4fb>, <DisassemblerInsn "mov" for 0x40b4fd>, <DisassemblerInsn "imul" for 0x40b501>, <DisassemblerInsn "mov" for 0x40b504>, <DisassemblerInsn "mov" for 0x40b508>, <DisassemblerInsn "cdq" for 0x40b50e>, <DisassemblerInsn "idiv" for 0x40b50f>, <DisassemblerInsn "mov" for 0x40b512>, <DisassemblerInsn "mov" for 0x40b516>, <DisassemblerInsn "mov" for 0x40b519>, <DisassemblerInsn "sar" for 0x40b51d>, <DisassemblerInsn "add" for 0x40b51f>, <DisassemblerInsn "imul" for 0x40b522>, <DisassemblerInsn "imul" for 0x40b525>, <DisassemblerInsn "add" for 0x40b528>, <DisassemblerInsn "add" for 0x40b52b>, <DisassemblerInsn "add" for 0x40b52d>, <DisassemblerInsn "mov" for 0x40b52f>, <DisassemblerInsn "add" for 0x40b533>, <DisassemblerInsn "cmp" for 0x40b537>, <DisassemblerInsn "mov" for 0x40b53b>, <DisassemblerInsn "mov" for 0x40b542>, <DisassemblerInsn "mov" for 0x40b54a>, <DisassemblerInsn "jne" for 0x40b551>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b238>, <DisassemblerInsn "mov" for 0x40b240>, <DisassemblerInsn "mov" for 0x40b248>, <DisassemblerInsn "mov" for 0x40b250>, <DisassemblerInsn "mov" for 0x40b257>, <DisassemblerInsn "mov" for 0x40b25b>, <DisassemblerInsn "add" for 0x40b260>, <DisassemblerInsn "imul" for 0x40b266>, <DisassemblerInsn "add" for 0x40b26a>, <DisassemblerInsn "add" for 0x40b26d>, <DisassemblerInsn "add" for 0x40b271>, <DisassemblerInsn "cmp" for 0x40b274>, <DisassemblerInsn "jne" for 0x40b277>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b040>, <DisassemblerInsn "mov" for 0x40b047>, <DisassemblerInsn "mov" for 0x40b049>, <DisassemblerInsn "lea" for 0x40b051>, <DisassemblerInsn "shl" for 0x40b059>, <DisassemblerInsn "add" for 0x40b05c>, <DisassemblerInsn "mov" for 0x40b061>, <DisassemblerInsn "call" for 0x40b068>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b279>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b286>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b291>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b298>, <DisassemblerInsn "mov" for 0x40b29c>, <DisassemblerInsn "call" for 0x40b2a1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b418>, <DisassemblerInsn "mov" for 0x40b420>, <DisassemblerInsn "mov" for 0x40b425>, <DisassemblerInsn "mov" for 0x40b429>, <DisassemblerInsn "add" for 0x40b42d>, <DisassemblerInsn "mov" for 0x40b42f>, <DisassemblerInsn "add" for 0x40b433>, <DisassemblerInsn "mov" for 0x40b437>, <DisassemblerInsn "mov" for 0x40b439>, <DisassemblerInsn "movsxd" for 0x40b43d>, <DisassemblerInsn "cmp" for 0x40b440>, <DisassemblerInsn "mov" for 0x40b443>, <DisassemblerInsn "mov" for 0x40b44b>, <DisassemblerInsn "jl" for 0x40b452>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b06d>, <DisassemblerInsn "lea" for 0x40b075>, <DisassemblerInsn "add" for 0x40b07d>, <DisassemblerInsn "mov" for 0x40b081>, <DisassemblerInsn "lea" for 0x40b089>, <DisassemblerInsn "add" for 0x40b091>, <DisassemblerInsn "mov" for 0x40b095>, <DisassemblerInsn "lea" for 0x40b09d>, <DisassemblerInsn "add" for 0x40b0a5>, <DisassemblerInsn "mov" for 0x40b0a9>, <DisassemblerInsn "lea" for 0x40b0b1>, <DisassemblerInsn "add" for 0x40b0b9>, <DisassemblerInsn "mov" for 0x40b0bd>, <DisassemblerInsn "mov" for 0x40b0c5>, <DisassemblerInsn "add" for 0x40b0c8>, <DisassemblerInsn "mov" for 0x40b0ce>, <DisassemblerInsn "mov" for 0x40b0d6>, <DisassemblerInsn "add" for 0x40b0d9>, <DisassemblerInsn "add" for 0x40b0df>, <DisassemblerInsn "mov" for 0x40b0e3>, <DisassemblerInsn "mov" for 0x40b0eb>, <DisassemblerInsn "lea" for 0x40b0f1>, <DisassemblerInsn "mov" for 0x40b0f9>, <DisassemblerInsn "xor" for 0x40b101>, <DisassemblerInsn "mov" for 0x40b103>, <DisassemblerInsn "xor" for 0x40b105>, <DisassemblerInsn "mov" for 0x40b107>, <DisassemblerInsn "mov" for 0x40b10e>, <DisassemblerInsn "mov" for 0x40b116>, <DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b34e>, <DisassemblerInsn "mov" for 0x40b352>, <DisassemblerInsn "mov" for 0x40b354>, <DisassemblerInsn "xor" for 0x40b359>, <DisassemblerInsn "mov" for 0x40b35b>, <DisassemblerInsn "xor" for 0x40b35d>, <DisassemblerInsn "mov" for 0x40b35f>, <DisassemblerInsn "mov" for 0x40b364>, <DisassemblerInsn "mov" for 0x40b368>, <DisassemblerInsn "mov" for 0x40b36d>, <DisassemblerInsn "mov" for 0x40b372>, <DisassemblerInsn "mov" for 0x40b376>, <DisassemblerInsn "mov" for 0x40b37a>, <DisassemblerInsn "mov" for 0x40b37f>, <DisassemblerInsn "mov" for 0x40b382>, <DisassemblerInsn "movzx" for 0x40b386>, <DisassemblerInsn "mov" for 0x40b389>, <DisassemblerInsn "cmp" for 0x40b38d>, <DisassemblerInsn "jae" for 0x40b38f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b557>, <DisassemblerInsn "add" for 0x40b55b>, <DisassemblerInsn "ret" for 0x40b562>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4e53]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40b2a8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x557]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b4b4>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x40b418>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40b368>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40b368>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40b313>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40b2a8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40b563>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40b238>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x557]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b4b4>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b3b3>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}], 'cfg_edge_info': [(12, 7), (3, 7), (8, 9), (9, 11), (2, 5), (13, 5), (10, 12), (1, 3), (16, 10), (18, 10), (6, 8), (12, 6), (3, 6), (5, 3), (0, 1), (9, 10), (2, 4), (1, 2), (13, 4), (7, 9), (5, 2), (10, 13)]}]}
{'bit_alloc': [4239469, 4239645, 4239779, 4239928, 4239993, 4240038, 4240040, 4240147, 4240408, 4240472, 4240564]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_after/Os/ac3enc.o---after
The extraction of function: bit_alloc
[4239469, 4239645, 4239779, 4239928, 4239993, 4240038, 4240040, 4240147, 4240408, 4240472, 4240564]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 31 nodes and 51 edges in CFGEmulated.
It has 27 nodes and 44 edges in CDG.
It has 1376 nodes and 1764 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4239469, 4239645, 4239779, 4239928, 4239993, 4240038, 4240040, 4240147, 4240408, 4240472, 4240564]
{4240273, 4240147, 4240408, 4239645, 4239779, 4240038, 4240040, 4240307, 4240564, 4239928, 4240315, 4239424, 4240206, 4240334, 4240727, 4240472, 4239708, 4240232, 4239469, 4240366, 4239993}
[14, 7, 27, 22, 29, 0, 26, 2, 10, 20, 4, 1, 15, 13, 23, 28, 16, 24, 11, 19, 25, 30, 21]
The execution time of patched slicing information extraction via angr: 0:00:04.339007
{'bit_alloc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b557>, <DisassemblerInsn "add" for 0x40b55b>, <DisassemblerInsn "ret" for 0x40b562>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ee>, <DisassemblerInsn "mov" for 0x40b3f3>, <DisassemblerInsn "mov" for 0x40b3f8>, <DisassemblerInsn "add" for 0x40b3fc>, <DisassemblerInsn "cmp" for 0x40b400>, <DisassemblerInsn "mov" for 0x40b403>, <DisassemblerInsn "mov" for 0x40b408>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b40e>, <DisassemblerInsn "jne" for 0x40b412>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b34e>, <DisassemblerInsn "mov" for 0x40b352>, <DisassemblerInsn "mov" for 0x40b354>, <DisassemblerInsn "xor" for 0x40b359>, <DisassemblerInsn "mov" for 0x40b35b>, <DisassemblerInsn "xor" for 0x40b35d>, <DisassemblerInsn "mov" for 0x40b35f>, <DisassemblerInsn "mov" for 0x40b364>, <DisassemblerInsn "mov" for 0x40b368>, <DisassemblerInsn "mov" for 0x40b36d>, <DisassemblerInsn "mov" for 0x40b372>, <DisassemblerInsn "mov" for 0x40b376>, <DisassemblerInsn "mov" for 0x40b37a>, <DisassemblerInsn "mov" for 0x40b37f>, <DisassemblerInsn "mov" for 0x40b382>, <DisassemblerInsn "movzx" for 0x40b386>, <DisassemblerInsn "mov" for 0x40b389>, <DisassemblerInsn "cmp" for 0x40b38d>, <DisassemblerInsn "jae" for 0x40b38f>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ce>, <DisassemblerInsn "mov" for 0x40b3d2>, <DisassemblerInsn "mov" for 0x40b3d7>, <DisassemblerInsn "mov" for 0x40b3dc>, <DisassemblerInsn "cmp" for 0x40b3e1>, <DisassemblerInsn "cmove" for 0x40b3e5>, <DisassemblerInsn "add" for 0x40b3e8>, <DisassemblerInsn "mov" for 0x40b3ea>, <DisassemblerInsn "mov" for 0x40b3ee>, <DisassemblerInsn "mov" for 0x40b3f3>, <DisassemblerInsn "mov" for 0x40b3f8>, <DisassemblerInsn "add" for 0x40b3fc>, <DisassemblerInsn "cmp" for 0x40b400>, <DisassemblerInsn "mov" for 0x40b403>, <DisassemblerInsn "mov" for 0x40b408>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b40e>, <DisassemblerInsn "jne" for 0x40b412>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b040>, <DisassemblerInsn "mov" for 0x40b047>, <DisassemblerInsn "mov" for 0x40b049>, <DisassemblerInsn "lea" for 0x40b051>, <DisassemblerInsn "shl" for 0x40b059>, <DisassemblerInsn "add" for 0x40b05c>, <DisassemblerInsn "mov" for 0x40b061>, <DisassemblerInsn "call" for 0x40b068>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3b3>, <DisassemblerInsn "cmp" for 0x40b3b7>, <DisassemblerInsn "jae" for 0x40b3b9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40b66b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4bc>, <DisassemblerInsn "mov" for 0x40b4c3>, <DisassemblerInsn "mov" for 0x40b4ca>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "mov" for 0x40b4d8>, <DisassemblerInsn "mov" for 0x40b4e0>, <DisassemblerInsn "mov" for 0x40b4e8>, <DisassemblerInsn "mov" for 0x40b4ed>, <DisassemblerInsn "mov" for 0x40b4f1>, <DisassemblerInsn "cdq" for 0x40b4f7>, <DisassemblerInsn "idiv" for 0x40b4f8>, <DisassemblerInsn "mov" for 0x40b4fb>, <DisassemblerInsn "mov" for 0x40b4fd>, <DisassemblerInsn "imul" for 0x40b501>, <DisassemblerInsn "mov" for 0x40b504>, <DisassemblerInsn "mov" for 0x40b508>, <DisassemblerInsn "cdq" for 0x40b50e>, <DisassemblerInsn "idiv" for 0x40b50f>, <DisassemblerInsn "mov" for 0x40b512>, <DisassemblerInsn "mov" for 0x40b516>, <DisassemblerInsn "mov" for 0x40b519>, <DisassemblerInsn "sar" for 0x40b51d>, <DisassemblerInsn "add" for 0x40b51f>, <DisassemblerInsn "imul" for 0x40b522>, <DisassemblerInsn "imul" for 0x40b525>, <DisassemblerInsn "add" for 0x40b528>, <DisassemblerInsn "add" for 0x40b52b>, <DisassemblerInsn "add" for 0x40b52d>, <DisassemblerInsn "mov" for 0x40b52f>, <DisassemblerInsn "add" for 0x40b533>, <DisassemblerInsn "cmp" for 0x40b537>, <DisassemblerInsn "mov" for 0x40b53b>, <DisassemblerInsn "mov" for 0x40b542>, <DisassemblerInsn "mov" for 0x40b54a>, <DisassemblerInsn "jne" for 0x40b551>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b313>, <DisassemblerInsn "mov" for 0x40b31b>, <DisassemblerInsn "mov" for 0x40b320>, <DisassemblerInsn "mov" for 0x40b328>, <DisassemblerInsn "mov" for 0x40b32b>, <DisassemblerInsn "mov" for 0x40b32f>, <DisassemblerInsn "mov" for 0x40b334>, <DisassemblerInsn "mov" for 0x40b33b>, <DisassemblerInsn "xor" for 0x40b33f>, <DisassemblerInsn "cmp" for 0x40b341>, <DisassemblerInsn "mov" for 0x40b344>, <DisassemblerInsn "jle" for 0x40b348>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b06d>, <DisassemblerInsn "lea" for 0x40b075>, <DisassemblerInsn "add" for 0x40b07d>, <DisassemblerInsn "mov" for 0x40b081>, <DisassemblerInsn "lea" for 0x40b089>, <DisassemblerInsn "add" for 0x40b091>, <DisassemblerInsn "mov" for 0x40b095>, <DisassemblerInsn "lea" for 0x40b09d>, <DisassemblerInsn "add" for 0x40b0a5>, <DisassemblerInsn "mov" for 0x40b0a9>, <DisassemblerInsn "lea" for 0x40b0b1>, <DisassemblerInsn "add" for 0x40b0b9>, <DisassemblerInsn "mov" for 0x40b0bd>, <DisassemblerInsn "mov" for 0x40b0c5>, <DisassemblerInsn "add" for 0x40b0c8>, <DisassemblerInsn "mov" for 0x40b0ce>, <DisassemblerInsn "mov" for 0x40b0d6>, <DisassemblerInsn "add" for 0x40b0d9>, <DisassemblerInsn "add" for 0x40b0df>, <DisassemblerInsn "mov" for 0x40b0e3>, <DisassemblerInsn "mov" for 0x40b0eb>, <DisassemblerInsn "lea" for 0x40b0f1>, <DisassemblerInsn "mov" for 0x40b0f9>, <DisassemblerInsn "xor" for 0x40b101>, <DisassemblerInsn "mov" for 0x40b103>, <DisassemblerInsn "xor" for 0x40b105>, <DisassemblerInsn "mov" for 0x40b107>, <DisassemblerInsn "mov" for 0x40b10e>, <DisassemblerInsn "mov" for 0x40b116>, <DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b563>, <DisassemblerInsn "mov" for 0x40b568>, <DisassemblerInsn "mov" for 0x40b56f>, <DisassemblerInsn "mov" for 0x40b572>, <DisassemblerInsn "add" for 0x40b575>, <DisassemblerInsn "mov" for 0x40b57c>, <DisassemblerInsn "cmp" for 0x40b581>, <DisassemblerInsn "je" for 0x40b588>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b279>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b286>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b291>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b298>, <DisassemblerInsn "mov" for 0x40b29c>, <DisassemblerInsn "call" for 0x40b2a1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b238>, <DisassemblerInsn "mov" for 0x40b240>, <DisassemblerInsn "mov" for 0x40b248>, <DisassemblerInsn "mov" for 0x40b250>, <DisassemblerInsn "mov" for 0x40b257>, <DisassemblerInsn "mov" for 0x40b25b>, <DisassemblerInsn "add" for 0x40b260>, <DisassemblerInsn "imul" for 0x40b266>, <DisassemblerInsn "add" for 0x40b26a>, <DisassemblerInsn "add" for 0x40b26d>, <DisassemblerInsn "add" for 0x40b271>, <DisassemblerInsn "cmp" for 0x40b274>, <DisassemblerInsn "jne" for 0x40b277>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3bb>, <DisassemblerInsn "mov" for 0x40b3bf>, <DisassemblerInsn "add" for 0x40b3c3>, <DisassemblerInsn "add" for 0x40b3c6>, <DisassemblerInsn "mov" for 0x40b3c8>, <DisassemblerInsn "jmp" for 0x40b3cc>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2a8>, <DisassemblerInsn "mov" for 0x40b2b0>, <DisassemblerInsn "mov" for 0x40b2b5>, <DisassemblerInsn "mov" for 0x40b2bd>, <DisassemblerInsn "mov" for 0x40b2c5>, <DisassemblerInsn "mov" for 0x40b2cd>, <DisassemblerInsn "mov" for 0x40b2d5>, <DisassemblerInsn "mov" for 0x40b2dd>, <DisassemblerInsn "mov" for 0x40b2e0>, <DisassemblerInsn "mov" for 0x40b2e4>, <DisassemblerInsn "mov" for 0x40b2e7>, <DisassemblerInsn "mov" for 0x40b2eb>, <DisassemblerInsn "mov" for 0x40b2f2>, <DisassemblerInsn "mov" for 0x40b2f5>, <DisassemblerInsn "mov" for 0x40b2f8>, <DisassemblerInsn "xor" for 0x40b2fc>, <DisassemblerInsn "mov" for 0x40b2fe>, <DisassemblerInsn "mov" for 0x40b305>, <DisassemblerInsn "mov" for 0x40b309>, <DisassemblerInsn "call" for 0x40b30e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b458>, <DisassemblerInsn "mov" for 0x40b45c>, <DisassemblerInsn "mov" for 0x40b460>, <DisassemblerInsn "mov" for 0x40b468>, <DisassemblerInsn "mov" for 0x40b470>, <DisassemblerInsn "mov" for 0x40b478>, <DisassemblerInsn "mov" for 0x40b480>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b484>, <DisassemblerInsn "mov" for 0x40b486>, <DisassemblerInsn "mov" for 0x40b489>, <DisassemblerInsn "mov" for 0x40b491>, <DisassemblerInsn "mov" for 0x40b498>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4ad>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4bc>, <DisassemblerInsn "mov" for 0x40b4c3>, <DisassemblerInsn "mov" for 0x40b4ca>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "mov" for 0x40b4d8>, <DisassemblerInsn "mov" for 0x40b4e0>, <DisassemblerInsn "mov" for 0x40b4e8>, <DisassemblerInsn "mov" for 0x40b4ed>, <DisassemblerInsn "mov" for 0x40b4f1>, <DisassemblerInsn "cdq" for 0x40b4f7>, <DisassemblerInsn "idiv" for 0x40b4f8>, <DisassemblerInsn "mov" for 0x40b4fb>, <DisassemblerInsn "mov" for 0x40b4fd>, <DisassemblerInsn "imul" for 0x40b501>, <DisassemblerInsn "mov" for 0x40b504>, <DisassemblerInsn "mov" for 0x40b508>, <DisassemblerInsn "cdq" for 0x40b50e>, <DisassemblerInsn "idiv" for 0x40b50f>, <DisassemblerInsn "mov" for 0x40b512>, <DisassemblerInsn "mov" for 0x40b516>, <DisassemblerInsn "mov" for 0x40b519>, <DisassemblerInsn "sar" for 0x40b51d>, <DisassemblerInsn "add" for 0x40b51f>, <DisassemblerInsn "imul" for 0x40b522>, <DisassemblerInsn "imul" for 0x40b525>, <DisassemblerInsn "add" for 0x40b528>, <DisassemblerInsn "add" for 0x40b52b>, <DisassemblerInsn "add" for 0x40b52d>, <DisassemblerInsn "mov" for 0x40b52f>, <DisassemblerInsn "add" for 0x40b533>, <DisassemblerInsn "cmp" for 0x40b537>, <DisassemblerInsn "mov" for 0x40b53b>, <DisassemblerInsn "mov" for 0x40b542>, <DisassemblerInsn "mov" for 0x40b54a>, <DisassemblerInsn "jne" for 0x40b551>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b1a3>, <DisassemblerInsn "mov" for 0x40b1aa>, <DisassemblerInsn "mov" for 0x40b1b2>, <DisassemblerInsn "mov" for 0x40b1ba>, <DisassemblerInsn "add" for 0x40b1bd>, <DisassemblerInsn "imul" for 0x40b1c4>, <DisassemblerInsn "add" for 0x40b1c8>, <DisassemblerInsn "add" for 0x40b1cb>, <DisassemblerInsn "mov" for 0x40b1cf>, <DisassemblerInsn "mov" for 0x40b1d7>, <DisassemblerInsn "add" for 0x40b1da>, <DisassemblerInsn "imul" for 0x40b1e1>, <DisassemblerInsn "add" for 0x40b1e5>, <DisassemblerInsn "add" for 0x40b1e8>, <DisassemblerInsn "mov" for 0x40b1ec>, <DisassemblerInsn "mov" for 0x40b1f4>, <DisassemblerInsn "add" for 0x40b1f7>, <DisassemblerInsn "imul" for 0x40b1fe>, <DisassemblerInsn "add" for 0x40b202>, <DisassemblerInsn "mov" for 0x40b205>, <DisassemblerInsn "add" for 0x40b20d>, <DisassemblerInsn "add" for 0x40b211>, <DisassemblerInsn "imul" for 0x40b218>, <DisassemblerInsn "add" for 0x40b21c>, <DisassemblerInsn "mov" for 0x40b21f>, <DisassemblerInsn "xor" for 0x40b227>, <DisassemblerInsn "mov" for 0x40b229>, <DisassemblerInsn "mov" for 0x40b231>, <DisassemblerInsn "mov" for 0x40b238>, <DisassemblerInsn "mov" for 0x40b240>, <DisassemblerInsn "mov" for 0x40b248>, <DisassemblerInsn "mov" for 0x40b250>, <DisassemblerInsn "mov" for 0x40b257>, <DisassemblerInsn "mov" for 0x40b25b>, <DisassemblerInsn "add" for 0x40b260>, <DisassemblerInsn "imul" for 0x40b266>, <DisassemblerInsn "add" for 0x40b26a>, <DisassemblerInsn "add" for 0x40b26d>, <DisassemblerInsn "add" for 0x40b271>, <DisassemblerInsn "cmp" for 0x40b274>, <DisassemblerInsn "jne" for 0x40b277>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40b2a6>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b391>, <DisassemblerInsn "mov" for 0x40b395>, <DisassemblerInsn "movzx" for 0x40b399>, <DisassemblerInsn "mov" for 0x40b39c>, <DisassemblerInsn "add" for 0x40b3a3>, <DisassemblerInsn "mov" for 0x40b3a6>, <DisassemblerInsn "mov" for 0x40b3ad>, <DisassemblerInsn "jmp" for 0x40b3b1>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b368>, <DisassemblerInsn "mov" for 0x40b36d>, <DisassemblerInsn "mov" for 0x40b372>, <DisassemblerInsn "mov" for 0x40b376>, <DisassemblerInsn "mov" for 0x40b37a>, <DisassemblerInsn "mov" for 0x40b37f>, <DisassemblerInsn "mov" for 0x40b382>, <DisassemblerInsn "movzx" for 0x40b386>, <DisassemblerInsn "mov" for 0x40b389>, <DisassemblerInsn "cmp" for 0x40b38d>, <DisassemblerInsn "jae" for 0x40b38f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b418>, <DisassemblerInsn "mov" for 0x40b420>, <DisassemblerInsn "mov" for 0x40b425>, <DisassemblerInsn "mov" for 0x40b429>, <DisassemblerInsn "add" for 0x40b42d>, <DisassemblerInsn "mov" for 0x40b42f>, <DisassemblerInsn "add" for 0x40b433>, <DisassemblerInsn "mov" for 0x40b437>, <DisassemblerInsn "mov" for 0x40b439>, <DisassemblerInsn "movsxd" for 0x40b43d>, <DisassemblerInsn "cmp" for 0x40b440>, <DisassemblerInsn "mov" for 0x40b443>, <DisassemblerInsn "mov" for 0x40b44b>, <DisassemblerInsn "jl" for 0x40b452>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b4b4>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40b368>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b3b3>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jne~~0x40b368>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40b563>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x40b3ce>']}, {'block_Idx': 2, 'blockInsts': ['<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x6c], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], eax>', '<jle~~0x40b418>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x557]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b4b4>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp - 8], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x40b66b>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx + rcx*8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~edx, 0x100>', '<call~~0x5000e8>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x557]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b4b4>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40b2a8>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40b3ee>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4e53]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, -1>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<add~~rax, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rax, rdx>', '<add~~rax, 0x40>', '<add~~rax, rcx>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x40b2a8>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40b313>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40b3ee>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b3b3>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x2c], edx>', '<movsxd~~rdx, edx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40b238>']}], 'cfg_edge_info': [(16, 20), (23, 16), (22, 26), (28, 27), (24, 14), (7, 10), (26, 29), (21, 24), (20, 22), (23, 15), (22, 25), (0, 1), (2, 4), (27, 21), (0, 4), (11, 16), (13, 7), (10, 14), (27, 30), (19, 20), (30, 26), (24, 13), (15, 19), (25, 27), (29, 21), (26, 28), (4, 7), (21, 23), (20, 21), (29, 30), (10, 13), (30, 25), (11, 15), (7, 11)], 'cdg_edge_info': [(7, 20), (26, 27), (23, 16), (23, 19), (22, 26), (30, 27), (7, 10), (21, 21), (26, 29), (23, 15), (20, 22), (22, 25), (11, 16), (24, 7), (27, 30), (11, 19), (30, 26), (24, 13), (7, 21), (26, 28), (7, 24), (21, 23), (29, 30), (21, 20), (22, 27), (10, 7), (10, 13), (30, 25), (11, 15), (7, 11)], 'ddg_edge_info': [(15, 21), (25, 23), (16, 20), (15, 30), (16, 29), (23, 25), (11, 23), (0, 23), (15, 14), (16, 13), (15, 23), (16, 22), (20, 22), (4, 23), (11, 16), (0, 16), (15, 16), (16, 15), (15, 25), (16, 24), (23, 20), (30, 13), (22, 30), (25, 20), (25, 29), (16, 26), (24, 14), (15, 11), (25, 13), (13, 23), (16, 28), (23, 15), (4, 11), (4, 20), (26, 13), (25, 15), (30, 29), (15, 13), (16, 21), (16, 30), (20, 21), (20, 30), (4, 13), (16, 14), (16, 23), (4, 15), (4, 24), (13, 11), (0, 11), (11, 20), (0, 20), (15, 20), (15, 29), (21, 24), (23, 21), (23, 30), (0, 4), (28, 29), (30, 26), (25, 21), (15, 22), (29, 21), (29, 30), (11, 15), (30, 28), (15, 24), (23, 16), (4, 21), (22, 29), (25, 16), (15, 26), (16, 25), (4, 14), (24, 13), (15, 28), (25, 30), (21, 23), (4, 16), (30, 25), (16, 11), (13, 24)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_16'}, {'instIndex': 93, 'instruction': 'addq\t$0x2030, %rax                     # imm = 0x0x7ee'}, {'instIndex': 94, 'instruction': 'imulq\t$0x50, %rdx, %rdx'}, {'instIndex': 95, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 96, 'instruction': 'addq\t$0x40, %rax'}, {'instIndex': 97, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 98, 'instruction': 'cmpb\t$0, (%rax)'}, {'instIndex': 99, 'instruction': 'jne\t.LBB3_5'}, {'instIndex': 103, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 104, 'instruction': 'movq\t(%rdx,%rcx,8), %rdi'}, {'instIndex': 105, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 106, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 107, 'instruction': 'movl\t$0x100, %edx                      # imm = 0x0x64'}, {'instIndex': 108, 'instruction': 'callq\tmemcpy@PLT'}, {'instIndex': 109, 'instruction': 'jmp\t.LBB3_6'}, {'instIndex': 117, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 118, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 119, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 120, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 121, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 123, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 124, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 125, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 126, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 127, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 128, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 129, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 133, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 134, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x60(%rsp)                  # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 137, 'instruction': 'movl\t%ecx, 0x6c(%rsp)                 # 4-byte Spill'}, {'instIndex': 200, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 201, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 202, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 203, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 204, 'instruction': 'movl\t%edx, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 205, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 206, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 207, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 209, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 254, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 255, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800---a/libavcodec/ac3enc.c
The case of compiler gcc with optimization no.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/no/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/no/ac3enc_gcc.s---bit_alloc---before
function id: 75
function flag: True
There are 111 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 38, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 39, 'instruction': 'cltq'}, {'instIndex': 40, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 41, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 43, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 47, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 48, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 49, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'cltq'}, {'instIndex': 54, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 55, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 56, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 59, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'cltq'}, {'instIndex': 61, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 63, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 64, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 65, 'instruction': 'pushq\t%rcx'}, {'instIndex': 66, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 67, 'instruction': 'pushq\t%rcx'}, {'instIndex': 68, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 69, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 70, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 71, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 77, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 78, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 79, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 80, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 82, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 83, 'instruction': 'cltq'}, {'instIndex': 84, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 85, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 86, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 87, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 89, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 90, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 91, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 92, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 93, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 94, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 95, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 96, 'instruction': 'jl\t.L214'}, {'instIndex': 97, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 99, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 100, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/no/ac3enc.o
Binary file does not exist.
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 38, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 39, 'instruction': 'cltq'}, {'instIndex': 40, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 41, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 43, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 47, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 48, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 49, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'cltq'}, {'instIndex': 54, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 55, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 56, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 59, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'cltq'}, {'instIndex': 61, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 63, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 64, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 65, 'instruction': 'pushq\t%rcx'}, {'instIndex': 66, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 67, 'instruction': 'pushq\t%rcx'}, {'instIndex': 68, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 69, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 70, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 71, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 77, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 78, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 79, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 80, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 82, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 83, 'instruction': 'cltq'}, {'instIndex': 84, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 85, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 86, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 87, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 89, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 90, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 91, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 92, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 93, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 94, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 95, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 96, 'instruction': 'jl\t.L214'}, {'instIndex': 97, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 99, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 100, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O0/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O0/ac3enc_gcc.s---bit_alloc---before
function id: 75
function flag: True
There are 111 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 38, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 39, 'instruction': 'cltq'}, {'instIndex': 40, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 41, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 43, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 47, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 48, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 49, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'cltq'}, {'instIndex': 54, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 55, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 56, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 59, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'cltq'}, {'instIndex': 61, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 63, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 64, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 65, 'instruction': 'pushq\t%rcx'}, {'instIndex': 66, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 67, 'instruction': 'pushq\t%rcx'}, {'instIndex': 68, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 69, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 70, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 71, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 77, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 78, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 79, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 80, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 82, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 83, 'instruction': 'cltq'}, {'instIndex': 84, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 85, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 86, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 87, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 89, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 90, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 91, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 92, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 93, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 94, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 95, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 96, 'instruction': 'jl\t.L214'}, {'instIndex': 97, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 99, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 100, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O0/ac3enc.o
Binary file does not exist.
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t$2, 0x38(%rsp)'}, {'instIndex': 31, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 33, 'instruction': 'movl\t$1, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L213'}, {'instIndex': 36, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movq\t(%rax), %rdx'}, {'instIndex': 38, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 39, 'instruction': 'cltq'}, {'instIndex': 40, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 41, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 43, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x22ac(%rax), %r8d'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 47, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 48, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 49, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'cltq'}, {'instIndex': 54, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 55, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 56, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movq\t0x30(%rax), %rdi'}, {'instIndex': 59, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'cltq'}, {'instIndex': 61, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rdi, %rax'}, {'instIndex': 63, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 64, 'instruction': 'movl\t4(%rsp), %edi'}, {'instIndex': 65, 'instruction': 'pushq\t%rcx'}, {'instIndex': 66, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %rcx'}, {'instIndex': 67, 'instruction': 'pushq\t%rcx'}, {'instIndex': 68, 'instruction': 'movl\t%r8d, %r9d'}, {'instIndex': 69, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 70, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 71, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 74, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 77, 'instruction': 'movslq\t%edx, %rdx'}, {'instIndex': 78, 'instruction': 'addq\t$0x898, %rdx'}, {'instIndex': 79, 'instruction': 'movl\t8(%rax,%rdx,4), %edx'}, {'instIndex': 80, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 82, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 83, 'instruction': 'cltq'}, {'instIndex': 84, 'instruction': 'salq\t$3, %rax'}, {'instIndex': 85, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 86, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 87, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 89, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 90, 'instruction': 'call\tcompute_mantissa_size'}, {'instIndex': 91, 'instruction': 'addl\t%eax, 0x24(%rsp)'}, {'instIndex': 92, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 93, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 94, 'instruction': 'movl\t0x2238(%rax), %eax'}, {'instIndex': 95, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 96, 'instruction': 'jl\t.L214'}, {'instIndex': 97, 'instruction': 'leaq\t0x30(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 99, 'instruction': 'call\tcompute_mantissa_size_final'}, {'instIndex': 100, 'instruction': 'addl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O1/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O1/ac3enc_gcc.s---bit_alloc---before
function id: 84
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O1/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization O2.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O2/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O2/ac3enc_gcc.s---bit_alloc---before
function id: 80
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O2/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization O3.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O3/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O3/ac3enc_gcc.s---bit_alloc---before
function id: 208
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/O3/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler gcc with optimization Os.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/Os/ac3enc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/Os/ac3enc_gcc.s---bit_alloc---before
function id: 102
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/gcc_before/Os/ac3enc.o
Binary file does not exist.
{'bit_alloc': []}
The case of compiler clang with optimization no.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/no/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/no/ac3enc.s---bit_alloc---before
function id: 37
function flag: True
There are 78 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_6'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 36, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 37, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 40, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 41, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 47, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 48, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 49, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 51, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 56, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 59, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 60, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 61, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 63, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 64, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 65, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 67, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 69, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 70, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/no/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/no/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 955 nodes and 1724 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 78 instructions in binary file.
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
The execution time of patched subCFG information extraction via angr: 0:00:01.601817
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403ff1>, <DisassemblerInsn "mov" for 0x403ff6>, <DisassemblerInsn "mov" for 0x403ffb>, <DisassemblerInsn "movsxd" for 0x403ffe>, <DisassemblerInsn "mov" for 0x404003>, <DisassemblerInsn "mov" for 0x404007>, <DisassemblerInsn "movsxd" for 0x40400c>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "call" for 0x404018>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "add" for 0x40403f>, <DisassemblerInsn "mov" for 0x404043>, <DisassemblerInsn "mov" for 0x404047>, <DisassemblerInsn "add" for 0x40404b>, <DisassemblerInsn "mov" for 0x40404e>, <DisassemblerInsn "jmp" for 0x404052>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404035>, <DisassemblerInsn "call" for 0x40403a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "add" for 0x40401d>, <DisassemblerInsn "mov" for 0x404021>, <DisassemblerInsn "mov" for 0x404025>, <DisassemblerInsn "add" for 0x404029>, <DisassemblerInsn "mov" for 0x40402c>, <DisassemblerInsn "jmp" for 0x404030>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "mov" for 0x403f88>, <DisassemblerInsn "movsxd" for 0x403f8c>, <DisassemblerInsn "mov" for 0x403f91>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "mov" for 0x403f9a>, <DisassemblerInsn "movsxd" for 0x403f9e>, <DisassemblerInsn "mov" for 0x403fa3>, <DisassemblerInsn "mov" for 0x403fa7>, <DisassemblerInsn "movsxd" for 0x403fac>, <DisassemblerInsn "mov" for 0x403fb1>, <DisassemblerInsn "mov" for 0x403fb8>, <DisassemblerInsn "mov" for 0x403fbd>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fce>, <DisassemblerInsn "movsxd" for 0x403fd1>, <DisassemblerInsn "mov" for 0x403fd6>, <DisassemblerInsn "xor" for 0x403fda>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "call" for 0x403fec>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 6, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404120>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 7, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 5, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x4041c0>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 8, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc165]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 5), (10, 4), (6, 8), (4, 6), (8, 10), (9, 2), (5, 7), (7, 9), (2, 5)]}]}
{'bit_alloc': [4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/no/ac3enc.o---before
The extraction of function: bit_alloc
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 34 nodes and 50 edges in CFGEmulated.
It has 31 nodes and 51 edges in CDG.
It has 797 nodes and 1007 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
{4210466, 4210563, 4210439, 4210542, 4210673, 4210741, 4210775, 4210455, 4210717, 4210751}
[30, 6, 21, 17, 0, 13, 18, 4, 10, 19, 23, 14, 26, 9, 20]
The execution time of patched slicing information extraction via angr: 0:00:03.952927
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041c0>, <DisassemblerInsn "mov" for 0x4041c5>, <DisassemblerInsn "mov" for 0x4041ca>, <DisassemblerInsn "mov" for 0x4041cd>, <DisassemblerInsn "cdq" for 0x4041d2>, <DisassemblerInsn "idiv" for 0x4041d3>, <DisassemblerInsn "imul" for 0x4041d5>, <DisassemblerInsn "mov" for 0x4041d8>, <DisassemblerInsn "mov" for 0x4041dc>, <DisassemblerInsn "mov" for 0x4041e1>, <DisassemblerInsn "mov" for 0x4041e4>, <DisassemblerInsn "cdq" for 0x4041e9>, <DisassemblerInsn "idiv" for 0x4041ea>, <DisassemblerInsn "mov" for 0x4041ec>, <DisassemblerInsn "mov" for 0x4041f1>, <DisassemblerInsn "sar" for 0x4041f4>, <DisassemblerInsn "add" for 0x4041f6>, <DisassemblerInsn "imul" for 0x4041f8>, <DisassemblerInsn "add" for 0x4041fb>, <DisassemblerInsn "mov" for 0x4041ff>, <DisassemblerInsn "mov" for 0x404203>, <DisassemblerInsn "imul" for 0x404208>, <DisassemblerInsn "add" for 0x40420c>, <DisassemblerInsn "mov" for 0x404210>, <DisassemblerInsn "mov" for 0x404214>, <DisassemblerInsn "ret" for 0x404218>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403ee0>, <DisassemblerInsn "mov" for 0x403ee4>, <DisassemblerInsn "mov" for 0x403ee9>, <DisassemblerInsn "mov" for 0x403eed>, <DisassemblerInsn "sub" for 0x403ef1>, <DisassemblerInsn "shl" for 0x403ef6>, <DisassemblerInsn "mov" for 0x403ef9>, <DisassemblerInsn "mov" for 0x403efd>, <DisassemblerInsn "call" for 0x403f02>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "mov" for 0x403f88>, <DisassemblerInsn "movsxd" for 0x403f8c>, <DisassemblerInsn "mov" for 0x403f91>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "mov" for 0x403f9a>, <DisassemblerInsn "movsxd" for 0x403f9e>, <DisassemblerInsn "mov" for 0x403fa3>, <DisassemblerInsn "mov" for 0x403fa7>, <DisassemblerInsn "movsxd" for 0x403fac>, <DisassemblerInsn "mov" for 0x403fb1>, <DisassemblerInsn "mov" for 0x403fb8>, <DisassemblerInsn "mov" for 0x403fbd>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fce>, <DisassemblerInsn "movsxd" for 0x403fd1>, <DisassemblerInsn "mov" for 0x403fd6>, <DisassemblerInsn "xor" for 0x403fda>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "call" for 0x403fec>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403ff1>, <DisassemblerInsn "mov" for 0x403ff6>, <DisassemblerInsn "mov" for 0x403ffb>, <DisassemblerInsn "movsxd" for 0x403ffe>, <DisassemblerInsn "mov" for 0x404003>, <DisassemblerInsn "mov" for 0x404007>, <DisassemblerInsn "movsxd" for 0x40400c>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "call" for 0x404018>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40411d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404057>, <DisassemblerInsn "add" for 0x40405b>, <DisassemblerInsn "ret" for 0x40405f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "add" for 0x40403f>, <DisassemblerInsn "mov" for 0x404043>, <DisassemblerInsn "mov" for 0x404047>, <DisassemblerInsn "add" for 0x40404b>, <DisassemblerInsn "mov" for 0x40404e>, <DisassemblerInsn "jmp" for 0x404052>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041bb>, <DisassemblerInsn "ret" for 0x4041bf>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404035>, <DisassemblerInsn "call" for 0x40403a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "add" for 0x40401d>, <DisassemblerInsn "mov" for 0x404021>, <DisassemblerInsn "mov" for 0x404025>, <DisassemblerInsn "add" for 0x404029>, <DisassemblerInsn "mov" for 0x40402c>, <DisassemblerInsn "jmp" for 0x404030>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404120>, <DisassemblerInsn "mov" for 0x404125>, <DisassemblerInsn "mov" for 0x40412a>, <DisassemblerInsn "mov" for 0x40412e>, <DisassemblerInsn "mov" for 0x404136>, <DisassemblerInsn "mov" for 0x40413e>, <DisassemblerInsn "cmp" for 0x404142>, <DisassemblerInsn "jge" for 0x404146>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 4]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 8]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<sar~~ecx, 1>', '<add~~eax, ecx>', '<imul~~eax, eax, 7>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<imul~~eax, dword ptr [rax + 0xc], 3>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~eax, dword ptr [rsp - 0xc]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<sub~~eax, 0xf0>', '<shl~~eax, 2>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<call~~0x404060>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc165]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 18, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404120>']}, {'block_Idx': 4, 'blockInsts': ['<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x18]>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x4041c0>']}, {'block_Idx': 26, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~dword ptr [rsp - 0x20], 0>', '<mov~~eax, dword ptr [rsp - 0x20]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jge~~0x4041bb>']}], 'cfg_edge_info': [(21, 10), (26, 30), (18, 20), (18, 26), (4, 6), (14, 19), (9, 14), (19, 21), (21, 9), (30, 14), (9, 13), (6, 10), (14, 17), (23, 26), (30, 13), (17, 19), (0, 6), (13, 18), (6, 9)], 'cdg_edge_info': [(30, 30), (9, 13), (6, 21), (21, 19), (30, 13), (21, 9), (30, 26), (6, 14), (21, 21), (9, 30), (9, 18), (30, 18), (21, 14), (6, 19), (6, 9), (9, 26)], 'ddg_edge_info': [(26, 30), (6, 21), (26, 18), (30, 9), (19, 9), (30, 18), (19, 21), (9, 26), (26, 14), (6, 14), (18, 13), (9, 30), (6, 26), (9, 13), (19, 26), (26, 13), (6, 13), (6, 10), (26, 19), (6, 19), (30, 13), (19, 10), (9, 18), (13, 18), (6, 9)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_6'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 36, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 37, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 40, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 41, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 47, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 48, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 49, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 51, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 56, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 59, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 60, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 61, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 63, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 64, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 65, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 67, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 69, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 70, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O0/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O0/ac3enc.s---bit_alloc---before
function id: 37
function flag: True
There are 78 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_6'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 36, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 37, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 40, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 41, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 47, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 48, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 49, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 51, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 56, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 59, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 60, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 61, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 63, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 64, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 65, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 67, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 69, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 70, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O0/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O0/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 955 nodes and 1724 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 78 instructions in binary file.
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
The execution time of patched subCFG information extraction via angr: 0:00:01.540195
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403ff1>, <DisassemblerInsn "mov" for 0x403ff6>, <DisassemblerInsn "mov" for 0x403ffb>, <DisassemblerInsn "movsxd" for 0x403ffe>, <DisassemblerInsn "mov" for 0x404003>, <DisassemblerInsn "mov" for 0x404007>, <DisassemblerInsn "movsxd" for 0x40400c>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "call" for 0x404018>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "add" for 0x40403f>, <DisassemblerInsn "mov" for 0x404043>, <DisassemblerInsn "mov" for 0x404047>, <DisassemblerInsn "add" for 0x40404b>, <DisassemblerInsn "mov" for 0x40404e>, <DisassemblerInsn "jmp" for 0x404052>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404035>, <DisassemblerInsn "call" for 0x40403a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "add" for 0x40401d>, <DisassemblerInsn "mov" for 0x404021>, <DisassemblerInsn "mov" for 0x404025>, <DisassemblerInsn "add" for 0x404029>, <DisassemblerInsn "mov" for 0x40402c>, <DisassemblerInsn "jmp" for 0x404030>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "mov" for 0x403f88>, <DisassemblerInsn "movsxd" for 0x403f8c>, <DisassemblerInsn "mov" for 0x403f91>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "mov" for 0x403f9a>, <DisassemblerInsn "movsxd" for 0x403f9e>, <DisassemblerInsn "mov" for 0x403fa3>, <DisassemblerInsn "mov" for 0x403fa7>, <DisassemblerInsn "movsxd" for 0x403fac>, <DisassemblerInsn "mov" for 0x403fb1>, <DisassemblerInsn "mov" for 0x403fb8>, <DisassemblerInsn "mov" for 0x403fbd>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fce>, <DisassemblerInsn "movsxd" for 0x403fd1>, <DisassemblerInsn "mov" for 0x403fd6>, <DisassemblerInsn "xor" for 0x403fda>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "call" for 0x403fec>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 6, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404120>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 7, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 5, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x4041c0>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 8, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc165]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 5), (10, 4), (6, 8), (4, 6), (8, 10), (9, 2), (5, 7), (7, 9), (2, 5)]}]}
{'bit_alloc': [4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O0/ac3enc.o---before
The extraction of function: bit_alloc
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 34 nodes and 50 edges in CFGEmulated.
It has 31 nodes and 51 edges in CDG.
It has 797 nodes and 1007 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4210466, 4210542, 4210563, 4210673, 4210717, 4210741, 4210751]
{4210466, 4210563, 4210439, 4210542, 4210673, 4210741, 4210775, 4210455, 4210717, 4210751}
[30, 6, 21, 17, 0, 13, 18, 4, 10, 19, 23, 14, 26, 9, 20]
The execution time of patched slicing information extraction via angr: 0:00:03.967251
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f07>, <DisassemblerInsn "mov" for 0x403f0f>, <DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403f17>, <DisassemblerInsn "jge" for 0x403f1c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041c0>, <DisassemblerInsn "mov" for 0x4041c5>, <DisassemblerInsn "mov" for 0x4041ca>, <DisassemblerInsn "mov" for 0x4041cd>, <DisassemblerInsn "cdq" for 0x4041d2>, <DisassemblerInsn "idiv" for 0x4041d3>, <DisassemblerInsn "imul" for 0x4041d5>, <DisassemblerInsn "mov" for 0x4041d8>, <DisassemblerInsn "mov" for 0x4041dc>, <DisassemblerInsn "mov" for 0x4041e1>, <DisassemblerInsn "mov" for 0x4041e4>, <DisassemblerInsn "cdq" for 0x4041e9>, <DisassemblerInsn "idiv" for 0x4041ea>, <DisassemblerInsn "mov" for 0x4041ec>, <DisassemblerInsn "mov" for 0x4041f1>, <DisassemblerInsn "sar" for 0x4041f4>, <DisassemblerInsn "add" for 0x4041f6>, <DisassemblerInsn "imul" for 0x4041f8>, <DisassemblerInsn "add" for 0x4041fb>, <DisassemblerInsn "mov" for 0x4041ff>, <DisassemblerInsn "mov" for 0x404203>, <DisassemblerInsn "imul" for 0x404208>, <DisassemblerInsn "add" for 0x40420c>, <DisassemblerInsn "mov" for 0x404210>, <DisassemblerInsn "mov" for 0x404214>, <DisassemblerInsn "ret" for 0x404218>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403ee0>, <DisassemblerInsn "mov" for 0x403ee4>, <DisassemblerInsn "mov" for 0x403ee9>, <DisassemblerInsn "mov" for 0x403eed>, <DisassemblerInsn "sub" for 0x403ef1>, <DisassemblerInsn "shl" for 0x403ef6>, <DisassemblerInsn "mov" for 0x403ef9>, <DisassemblerInsn "mov" for 0x403efd>, <DisassemblerInsn "call" for 0x403f02>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f83>, <DisassemblerInsn "mov" for 0x403f88>, <DisassemblerInsn "movsxd" for 0x403f8c>, <DisassemblerInsn "mov" for 0x403f91>, <DisassemblerInsn "mov" for 0x403f95>, <DisassemblerInsn "mov" for 0x403f9a>, <DisassemblerInsn "movsxd" for 0x403f9e>, <DisassemblerInsn "mov" for 0x403fa3>, <DisassemblerInsn "mov" for 0x403fa7>, <DisassemblerInsn "movsxd" for 0x403fac>, <DisassemblerInsn "mov" for 0x403fb1>, <DisassemblerInsn "mov" for 0x403fb8>, <DisassemblerInsn "mov" for 0x403fbd>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fce>, <DisassemblerInsn "movsxd" for 0x403fd1>, <DisassemblerInsn "mov" for 0x403fd6>, <DisassemblerInsn "xor" for 0x403fda>, <DisassemblerInsn "mov" for 0x403fdc>, <DisassemblerInsn "mov" for 0x403fe3>, <DisassemblerInsn "mov" for 0x403fe7>, <DisassemblerInsn "call" for 0x403fec>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403ff1>, <DisassemblerInsn "mov" for 0x403ff6>, <DisassemblerInsn "mov" for 0x403ffb>, <DisassemblerInsn "movsxd" for 0x403ffe>, <DisassemblerInsn "mov" for 0x404003>, <DisassemblerInsn "mov" for 0x404007>, <DisassemblerInsn "movsxd" for 0x40400c>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "call" for 0x404018>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40411d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404057>, <DisassemblerInsn "add" for 0x40405b>, <DisassemblerInsn "ret" for 0x40405f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "add" for 0x40403f>, <DisassemblerInsn "mov" for 0x404043>, <DisassemblerInsn "mov" for 0x404047>, <DisassemblerInsn "add" for 0x40404b>, <DisassemblerInsn "mov" for 0x40404e>, <DisassemblerInsn "jmp" for 0x404052>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041bb>, <DisassemblerInsn "ret" for 0x4041bf>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x404035>, <DisassemblerInsn "call" for 0x40403a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "add" for 0x40401d>, <DisassemblerInsn "mov" for 0x404021>, <DisassemblerInsn "mov" for 0x404025>, <DisassemblerInsn "add" for 0x404029>, <DisassemblerInsn "mov" for 0x40402c>, <DisassemblerInsn "jmp" for 0x404030>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f22>, <DisassemblerInsn "add" for 0x403f27>, <DisassemblerInsn "movsxd" for 0x403f2d>, <DisassemblerInsn "imul" for 0x403f32>, <DisassemblerInsn "add" for 0x403f36>, <DisassemblerInsn "mov" for 0x403f39>, <DisassemblerInsn "mov" for 0x403f3e>, <DisassemblerInsn "mov" for 0x403f46>, <DisassemblerInsn "mov" for 0x403f4e>, <DisassemblerInsn "mov" for 0x403f56>, <DisassemblerInsn "mov" for 0x403f5e>, <DisassemblerInsn "mov" for 0x403f66>, <DisassemblerInsn "mov" for 0x403f6e>, <DisassemblerInsn "mov" for 0x403f72>, <DisassemblerInsn "cmp" for 0x403f77>, <DisassemblerInsn "jge" for 0x403f7d>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404120>, <DisassemblerInsn "mov" for 0x404125>, <DisassemblerInsn "mov" for 0x40412a>, <DisassemblerInsn "mov" for 0x40412e>, <DisassemblerInsn "mov" for 0x404136>, <DisassemblerInsn "mov" for 0x40413e>, <DisassemblerInsn "cmp" for 0x404142>, <DisassemblerInsn "jge" for 0x404146>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~dword ptr [rsp + 0x48], 0>', '<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x48], 6>', '<jge~~0x404057>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 4]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~eax, dword ptr [rax + 8]>', '<mov~~ecx, 3>', '<cdq~~>', '<idiv~~ecx>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<sar~~ecx, 1>', '<add~~eax, ecx>', '<imul~~eax, eax, 7>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<imul~~eax, dword ptr [rax + 0xc], 3>', '<add~~eax, dword ptr [rsp - 0xc]>', '<mov~~dword ptr [rsp - 0xc], eax>', '<mov~~eax, dword ptr [rsp - 0xc]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<sub~~eax, 0xf0>', '<shl~~eax, 2>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<call~~0x404060>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~r8d, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~r9d, dword ptr [rax + 0x22ac]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xfc165]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500150>']}, {'block_Idx': 18, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~rsi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<movsxd~~rcx, dword ptr [rsp + 0x44]>', '<mov~~edx, dword ptr [rax + rcx*4 + 0x2268]>', '<call~~0x404120>']}, {'block_Idx': 4, 'blockInsts': ['<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x48], eax>', '<jmp~~0x403f17>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x18]>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rsp + 0x20]>', '<call~~0x4041c0>']}, {'block_Idx': 26, 'blockInsts': ['<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x403f6e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 0x2030>', '<movsxd~~rcx, dword ptr [rsp + 0x48]>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 2>', '<mov~~dword ptr [rsp + 0x24], 2>', '<mov~~dword ptr [rsp + 0x30], 1>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<cmp~~eax, dword ptr [rcx + 0x2238]>', '<jge~~0x404035>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~dword ptr [rsp - 0x20], 0>', '<mov~~eax, dword ptr [rsp - 0x20]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jge~~0x4041bb>']}], 'cfg_edge_info': [(21, 10), (26, 30), (18, 20), (18, 26), (4, 6), (14, 19), (9, 14), (19, 21), (21, 9), (30, 14), (9, 13), (6, 10), (14, 17), (23, 26), (30, 13), (17, 19), (0, 6), (13, 18), (6, 9)], 'cdg_edge_info': [(30, 30), (9, 13), (6, 21), (21, 19), (30, 13), (21, 9), (30, 26), (6, 14), (21, 21), (9, 30), (9, 18), (30, 18), (21, 14), (6, 19), (6, 9), (9, 26)], 'ddg_edge_info': [(26, 30), (6, 21), (26, 18), (30, 9), (19, 9), (30, 18), (19, 21), (9, 26), (26, 14), (6, 14), (18, 13), (9, 30), (6, 26), (9, 13), (19, 26), (26, 13), (6, 13), (6, 10), (26, 19), (6, 19), (30, 13), (19, 10), (9, 18), (13, 18), (6, 9)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movl\t$2, 0x28(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t$2, 0x24(%rsp)'}, {'instIndex': 23, 'instruction': 'movl\t$1, 0x30(%rsp)'}, {'instIndex': 24, 'instruction': 'movl\t$0, 0x44(%rsp)'}, {'instIndex': 25, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 26, 'instruction': 'movq\t0x50(%rsp), %rcx'}, {'instIndex': 27, 'instruction': 'cmpl\t0x2238(%rcx), %eax'}, {'instIndex': 28, 'instruction': 'jge\t.LBB37_6'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x30(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 36, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 37, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 40, 'instruction': 'movl\t0x4c(%rsp), %r8d'}, {'instIndex': 41, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x22ac(%rax), %r9d'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movslq\t0x44(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 47, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 48, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 49, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 51, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 56, 'instruction': 'movq\t(%rax,%rcx,8), %rsi'}, {'instIndex': 57, 'instruction': 'movq\t0x50(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movslq\t0x44(%rsp), %rcx'}, {'instIndex': 59, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %edx'}, {'instIndex': 60, 'instruction': 'callq\tcompute_mantissa_size'}, {'instIndex': 61, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'movl\t%eax, 0x40(%rsp)'}, {'instIndex': 63, 'instruction': 'movl\t0x44(%rsp), %eax'}, {'instIndex': 64, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 65, 'instruction': 'movl\t%eax, 0x44(%rsp)'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB37_3'}, {'instIndex': 67, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tcompute_mantissa_size_final'}, {'instIndex': 69, 'instruction': 'addl\t0x40(%rsp), %eax'}, {'instIndex': 70, 'instruction': 'movl\t%eax, 0x40(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O1/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O1/ac3enc.s---bit_alloc---before
function id: 3
function flag: True
There are 283 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'movl\t$2, (%rdi)'}, {'instIndex': 118, 'instruction': 'movl\t$2, (%rsi)'}, {'instIndex': 119, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 120, 'instruction': 'cmpl\t$0, (%rcx)'}, {'instIndex': 121, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 122, 'instruction': 'jle\t.LBB3_18'}, {'instIndex': 155, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 156, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 157, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 158, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 159, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 160, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 161, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 162, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 163, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 164, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 165, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 166, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 167, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 171, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 172, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 173, 'instruction': 'movq\t%rdx, 0x50(%rsp)                  # 8-byte Spill'}, {'instIndex': 174, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 175, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 238, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 239, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 240, 'instruction': 'movslq\t(%rdx), %rdx'}, {'instIndex': 241, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 242, 'instruction': 'movq\t%rcx, 0x78(%rsp)                 # 8-byte Spill'}, {'instIndex': 246, 'instruction': 'jl\t.LBB3_9'}, {'instIndex': 273, 'instruction': 'addl\t%edx, %eax'}, {'instIndex': 274, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O1/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O1/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 700 nodes and 1288 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 283 instructions in binary file.
[4228437, 4228678, 4228804, 4228912, 4229028, 4229286, 4229346]
The execution time of patched subCFG information extraction via angr: 0:00:06.650900
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40896d>, <DisassemblerInsn "add" for 0x408971>, <DisassemblerInsn "ret" for 0x408978>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408555>, <DisassemblerInsn "lea" for 0x40855d>, <DisassemblerInsn "add" for 0x408565>, <DisassemblerInsn "mov" for 0x408569>, <DisassemblerInsn "lea" for 0x408571>, <DisassemblerInsn "mov" for 0x408579>, <DisassemblerInsn "lea" for 0x408581>, <DisassemblerInsn "add" for 0x408589>, <DisassemblerInsn "mov" for 0x40858d>, <DisassemblerInsn "lea" for 0x408595>, <DisassemblerInsn "add" for 0x40859d>, <DisassemblerInsn "mov" for 0x4085a1>, <DisassemblerInsn "lea" for 0x4085a9>, <DisassemblerInsn "add" for 0x4085b1>, <DisassemblerInsn "mov" for 0x4085b5>, <DisassemblerInsn "mov" for 0x4085bd>, <DisassemblerInsn "add" for 0x4085c0>, <DisassemblerInsn "mov" for 0x4085c7>, <DisassemblerInsn "add" for 0x4085cf>, <DisassemblerInsn "add" for 0x4085d5>, <DisassemblerInsn "mov" for 0x4085d9>, <DisassemblerInsn "lea" for 0x4085e1>, <DisassemblerInsn "add" for 0x4085e9>, <DisassemblerInsn "mov" for 0x4085ed>, <DisassemblerInsn "lea" for 0x4085f5>, <DisassemblerInsn "add" for 0x4085fd>, <DisassemblerInsn "mov" for 0x408601>, <DisassemblerInsn "lea" for 0x408609>, <DisassemblerInsn "add" for 0x408611>, <DisassemblerInsn "mov" for 0x408615>, <DisassemblerInsn "lea" for 0x40861d>, <DisassemblerInsn "add" for 0x408625>, <DisassemblerInsn "mov" for 0x408629>, <DisassemblerInsn "xor" for 0x408631>, <DisassemblerInsn "mov" for 0x408633>, <DisassemblerInsn "xor" for 0x408635>, <DisassemblerInsn "mov" for 0x408637>, <DisassemblerInsn "mov" for 0x40863f>, <DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408685>, <DisassemblerInsn "mov" for 0x40868c>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "mov" for 0x40869b>, <DisassemblerInsn "mov" for 0x4086a2>, <DisassemblerInsn "mov" for 0x4086a8>, <DisassemblerInsn "mov" for 0x4086ae>, <DisassemblerInsn "cmp" for 0x4086b4>, <DisassemblerInsn "mov" for 0x4086b7>, <DisassemblerInsn "jle" for 0x4086be>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408685>, <DisassemblerInsn "mov" for 0x40868c>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "mov" for 0x40869b>, <DisassemblerInsn "mov" for 0x4086a2>, <DisassemblerInsn "mov" for 0x4086a8>, <DisassemblerInsn "mov" for 0x4086ae>, <DisassemblerInsn "cmp" for 0x4086b4>, <DisassemblerInsn "mov" for 0x4086b7>, <DisassemblerInsn "jle" for 0x4086be>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088e2>, <DisassemblerInsn "mov" for 0x4088ea>, <DisassemblerInsn "mov" for 0x4088f2>, <DisassemblerInsn "mov" for 0x4088fa>, <DisassemblerInsn "mov" for 0x408901>, <DisassemblerInsn "mov" for 0x408903>, <DisassemblerInsn "cdq" for 0x408909>, <DisassemblerInsn "idiv" for 0x40890a>, <DisassemblerInsn "mov" for 0x40890d>, <DisassemblerInsn "mov" for 0x40890f>, <DisassemblerInsn "imul" for 0x408917>, <DisassemblerInsn "mov" for 0x40891a>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408920>, <DisassemblerInsn "cdq" for 0x408926>, <DisassemblerInsn "idiv" for 0x408927>, <DisassemblerInsn "mov" for 0x40892a>, <DisassemblerInsn "mov" for 0x408932>, <DisassemblerInsn "mov" for 0x408935>, <DisassemblerInsn "mov" for 0x408939>, <DisassemblerInsn "sar" for 0x40893b>, <DisassemblerInsn "add" for 0x40893d>, <DisassemblerInsn "imul" for 0x408940>, <DisassemblerInsn "imul" for 0x408943>, <DisassemblerInsn "add" for 0x408946>, <DisassemblerInsn "add" for 0x408948>, <DisassemblerInsn "add" for 0x40894a>, <DisassemblerInsn "mov" for 0x40894c>, <DisassemblerInsn "add" for 0x408950>, <DisassemblerInsn "cmp" for 0x408954>, <DisassemblerInsn "mov" for 0x408958>, <DisassemblerInsn "mov" for 0x408960>, <DisassemblerInsn "jne" for 0x408967>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4086c4>, <DisassemblerInsn "mov" for 0x4086cb>, <DisassemblerInsn "mov" for 0x4086d3>, <DisassemblerInsn "mov" for 0x4086db>, <DisassemblerInsn "add" for 0x4086de>, <DisassemblerInsn "imul" for 0x4086e5>, <DisassemblerInsn "add" for 0x4086e9>, <DisassemblerInsn "add" for 0x4086ec>, <DisassemblerInsn "mov" for 0x4086f0>, <DisassemblerInsn "mov" for 0x4086f5>, <DisassemblerInsn "add" for 0x4086f8>, <DisassemblerInsn "imul" for 0x4086ff>, <DisassemblerInsn "add" for 0x408703>, <DisassemblerInsn "add" for 0x408706>, <DisassemblerInsn "mov" for 0x40870a>, <DisassemblerInsn "add" for 0x40870f>, <DisassemblerInsn "imul" for 0x408716>, <DisassemblerInsn "add" for 0x40871a>, <DisassemblerInsn "mov" for 0x40871d>, <DisassemblerInsn "xor" for 0x408722>, <DisassemblerInsn "mov" for 0x408724>, <DisassemblerInsn "mov" for 0x408729>, <DisassemblerInsn "mov" for 0x408730>, <DisassemblerInsn "mov" for 0x408738>, <DisassemblerInsn "mov" for 0x40873d>, <DisassemblerInsn "mov" for 0x408745>, <DisassemblerInsn "mov" for 0x40874d>, <DisassemblerInsn "mov" for 0x408752>, <DisassemblerInsn "mov" for 0x408757>, <DisassemblerInsn "mov" for 0x40875c>, <DisassemblerInsn "mov" for 0x408764>, <DisassemblerInsn "mov" for 0x408769>, <DisassemblerInsn "mov" for 0x40876e>, <DisassemblerInsn "mov" for 0x408771>, <DisassemblerInsn "mov" for 0x408775>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "mov" for 0x40877c>, <DisassemblerInsn "mov" for 0x408783>, <DisassemblerInsn "mov" for 0x408786>, <DisassemblerInsn "mov" for 0x408789>, <DisassemblerInsn "xor" for 0x40878d>, <DisassemblerInsn "mov" for 0x40878f>, <DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879a>, <DisassemblerInsn "call" for 0x40879f>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "add" for 0x40888a>, <DisassemblerInsn "cmp" for 0x40888e>, <DisassemblerInsn "mov" for 0x408891>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "mov" for 0x408898>, <DisassemblerInsn "mov" for 0x40889c>, <DisassemblerInsn "jne" for 0x4088a0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40885c>, <DisassemblerInsn "mov" for 0x408860>, <DisassemblerInsn "mov" for 0x408865>, <DisassemblerInsn "mov" for 0x40886a>, <DisassemblerInsn "cmp" for 0x40886f>, <DisassemblerInsn "cmove" for 0x408873>, <DisassemblerInsn "add" for 0x408876>, <DisassemblerInsn "mov" for 0x408878>, <DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "add" for 0x40888a>, <DisassemblerInsn "cmp" for 0x40888e>, <DisassemblerInsn "mov" for 0x408891>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "mov" for 0x408898>, <DisassemblerInsn "mov" for 0x40889c>, <DisassemblerInsn "jne" for 0x4088a0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087dc>, <DisassemblerInsn "mov" for 0x4087e0>, <DisassemblerInsn "mov" for 0x4087e2>, <DisassemblerInsn "xor" for 0x4087e7>, <DisassemblerInsn "mov" for 0x4087e9>, <DisassemblerInsn "xor" for 0x4087eb>, <DisassemblerInsn "mov" for 0x4087ed>, <DisassemblerInsn "mov" for 0x4087f2>, <DisassemblerInsn "mov" for 0x4087f6>, <DisassemblerInsn "mov" for 0x4087fb>, <DisassemblerInsn "mov" for 0x408800>, <DisassemblerInsn "mov" for 0x408804>, <DisassemblerInsn "mov" for 0x408808>, <DisassemblerInsn "mov" for 0x40880d>, <DisassemblerInsn "mov" for 0x408810>, <DisassemblerInsn "movzx" for 0x408814>, <DisassemblerInsn "mov" for 0x408817>, <DisassemblerInsn "cmp" for 0x40881b>, <DisassemblerInsn "jae" for 0x40881d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408730>, <DisassemblerInsn "mov" for 0x408738>, <DisassemblerInsn "mov" for 0x40873d>, <DisassemblerInsn "mov" for 0x408745>, <DisassemblerInsn "mov" for 0x40874d>, <DisassemblerInsn "mov" for 0x408752>, <DisassemblerInsn "mov" for 0x408757>, <DisassemblerInsn "mov" for 0x40875c>, <DisassemblerInsn "mov" for 0x408764>, <DisassemblerInsn "mov" for 0x408769>, <DisassemblerInsn "mov" for 0x40876e>, <DisassemblerInsn "mov" for 0x408771>, <DisassemblerInsn "mov" for 0x408775>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "mov" for 0x40877c>, <DisassemblerInsn "mov" for 0x408783>, <DisassemblerInsn "mov" for 0x408786>, <DisassemblerInsn "mov" for 0x408789>, <DisassemblerInsn "xor" for 0x40878d>, <DisassemblerInsn "mov" for 0x40878f>, <DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879a>, <DisassemblerInsn "call" for 0x40879f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088a6>, <DisassemblerInsn "mov" for 0x4088ae>, <DisassemblerInsn "mov" for 0x4088b3>, <DisassemblerInsn "mov" for 0x4088b7>, <DisassemblerInsn "add" for 0x4088bb>, <DisassemblerInsn "add" for 0x4088bd>, <DisassemblerInsn "movsxd" for 0x4088c1>, <DisassemblerInsn "cmp" for 0x4088c4>, <DisassemblerInsn "mov" for 0x4088c7>, <DisassemblerInsn "mov" for 0x4088cc>, <DisassemblerInsn "mov" for 0x4088ce>, <DisassemblerInsn "mov" for 0x4088d5>, <DisassemblerInsn "jl" for 0x4088dc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4083e0>, <DisassemblerInsn "mov" for 0x4083e7>, <DisassemblerInsn "mov" for 0x4083e9>, <DisassemblerInsn "lea" for 0x4083f1>, <DisassemblerInsn "shl" for 0x4083f9>, <DisassemblerInsn "add" for 0x4083fc>, <DisassemblerInsn "mov" for 0x408401>, <DisassemblerInsn "mov" for 0x408408>, <DisassemblerInsn "mov" for 0x40840f>, <DisassemblerInsn "mov" for 0x408412>, <DisassemblerInsn "add" for 0x408415>, <DisassemblerInsn "mov" for 0x40841c>, <DisassemblerInsn "cmp" for 0x408424>, <DisassemblerInsn "je" for 0x40842b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408537>, <DisassemblerInsn "add" for 0x40853f>, <DisassemblerInsn "cmp" for 0x408543>, <DisassemblerInsn "mov" for 0x408547>, <DisassemblerInsn "jne" for 0x40854f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087a4>, <DisassemblerInsn "mov" for 0x4087a9>, <DisassemblerInsn "mov" for 0x4087ae>, <DisassemblerInsn "mov" for 0x4087b6>, <DisassemblerInsn "mov" for 0x4087b9>, <DisassemblerInsn "mov" for 0x4087bd>, <DisassemblerInsn "mov" for 0x4087c2>, <DisassemblerInsn "mov" for 0x4087c9>, <DisassemblerInsn "xor" for 0x4087cd>, <DisassemblerInsn "cmp" for 0x4087cf>, <DisassemblerInsn "mov" for 0x4087d2>, <DisassemblerInsn "jle" for 0x4087d6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 0xc>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2238>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r9, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x4088e2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r9, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x4088e2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x10], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~r8d, eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rdx]>', '<sar~~edx, 1>', '<add~~edx, r8d>', '<imul~~edx, edx, 7>', '<imul~~esi, dword ptr [rsi], 3>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x14], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x408646>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x164]>', '<mov~~r9, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r10d, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x44], r10d>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf79c2]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jne~~0x4087f6>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~sil, byte ptr [rsp + 0x2b]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jne~~0x4087f6>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x30], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x408841>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x164]>', '<mov~~r9, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r10d, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x44], r10d>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf79c2]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~eax, esi>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rdx]>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jl~~0x408730>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rcx, [rsp + 0x170]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0x164], eax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x168], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x408555>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<add~~rax, 1>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x150], rax>', '<jne~~0x408460>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x4088a6>']}], 'cfg_edge_info': [(0, 1), (3, 8), (8, 4), (9, 13), (4, 9), (3, 7), (9, 12), (10, 1), (1, 4), (12, 3), (15, 9), (8, 3), (18, 12), (12, 15), (20, 12), (1, 3)]}]}
{'bit_alloc': [4228437, 4228678, 4228804, 4228912, 4229028, 4229286, 4229346]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O1/ac3enc.o---before
The extraction of function: bit_alloc
[4228437, 4228678, 4228804, 4228912, 4229028, 4229286, 4229346]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 24 nodes and 41 edges in CFGEmulated.
It has 23 nodes and 36 edges in CDG.
It has 1083 nodes and 1374 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4228437, 4228678, 4228804, 4228912, 4229028, 4229286, 4229346]
{4228224, 4229151, 4229028, 4229286, 4228912, 4228145, 4228407, 4229185, 4228804, 4228678, 4228294, 4229193, 4228437, 4229212, 4229084, 4228064, 4228192, 4229346, 4229485, 4229110, 4229244}
[21, 14, 20, 10, 4, 8, 15, 16, 6, 18, 11, 23, 13, 12, 7, 2, 17, 3, 22, 5, 1, 0]
The execution time of patched slicing information extraction via angr: 0:00:06.044967
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408849>, <DisassemblerInsn "mov" for 0x40884d>, <DisassemblerInsn "add" for 0x408851>, <DisassemblerInsn "add" for 0x408854>, <DisassemblerInsn "mov" for 0x408856>, <DisassemblerInsn "jmp" for 0x40885a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088a6>, <DisassemblerInsn "mov" for 0x4088ae>, <DisassemblerInsn "mov" for 0x4088b3>, <DisassemblerInsn "mov" for 0x4088b7>, <DisassemblerInsn "add" for 0x4088bb>, <DisassemblerInsn "add" for 0x4088bd>, <DisassemblerInsn "movsxd" for 0x4088c1>, <DisassemblerInsn "cmp" for 0x4088c4>, <DisassemblerInsn "mov" for 0x4088c7>, <DisassemblerInsn "mov" for 0x4088cc>, <DisassemblerInsn "mov" for 0x4088ce>, <DisassemblerInsn "mov" for 0x4088d5>, <DisassemblerInsn "jl" for 0x4088dc>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "add" for 0x40888a>, <DisassemblerInsn "cmp" for 0x40888e>, <DisassemblerInsn "mov" for 0x408891>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "mov" for 0x408898>, <DisassemblerInsn "mov" for 0x40889c>, <DisassemblerInsn "jne" for 0x4088a0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408537>, <DisassemblerInsn "add" for 0x40853f>, <DisassemblerInsn "cmp" for 0x408543>, <DisassemblerInsn "mov" for 0x408547>, <DisassemblerInsn "jne" for 0x40854f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4086c4>, <DisassemblerInsn "mov" for 0x4086cb>, <DisassemblerInsn "mov" for 0x4086d3>, <DisassemblerInsn "mov" for 0x4086db>, <DisassemblerInsn "add" for 0x4086de>, <DisassemblerInsn "imul" for 0x4086e5>, <DisassemblerInsn "add" for 0x4086e9>, <DisassemblerInsn "add" for 0x4086ec>, <DisassemblerInsn "mov" for 0x4086f0>, <DisassemblerInsn "mov" for 0x4086f5>, <DisassemblerInsn "add" for 0x4086f8>, <DisassemblerInsn "imul" for 0x4086ff>, <DisassemblerInsn "add" for 0x408703>, <DisassemblerInsn "add" for 0x408706>, <DisassemblerInsn "mov" for 0x40870a>, <DisassemblerInsn "add" for 0x40870f>, <DisassemblerInsn "imul" for 0x408716>, <DisassemblerInsn "add" for 0x40871a>, <DisassemblerInsn "mov" for 0x40871d>, <DisassemblerInsn "xor" for 0x408722>, <DisassemblerInsn "mov" for 0x408724>, <DisassemblerInsn "mov" for 0x408729>, <DisassemblerInsn "mov" for 0x408730>, <DisassemblerInsn "mov" for 0x408738>, <DisassemblerInsn "mov" for 0x40873d>, <DisassemblerInsn "mov" for 0x408745>, <DisassemblerInsn "mov" for 0x40874d>, <DisassemblerInsn "mov" for 0x408752>, <DisassemblerInsn "mov" for 0x408757>, <DisassemblerInsn "mov" for 0x40875c>, <DisassemblerInsn "mov" for 0x408764>, <DisassemblerInsn "mov" for 0x408769>, <DisassemblerInsn "mov" for 0x40876e>, <DisassemblerInsn "mov" for 0x408771>, <DisassemblerInsn "mov" for 0x408775>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "mov" for 0x40877c>, <DisassemblerInsn "mov" for 0x408783>, <DisassemblerInsn "mov" for 0x408786>, <DisassemblerInsn "mov" for 0x408789>, <DisassemblerInsn "xor" for 0x40878d>, <DisassemblerInsn "mov" for 0x40878f>, <DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879a>, <DisassemblerInsn "call" for 0x40879f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40896d>, <DisassemblerInsn "add" for 0x408971>, <DisassemblerInsn "ret" for 0x408978>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087dc>, <DisassemblerInsn "mov" for 0x4087e0>, <DisassemblerInsn "mov" for 0x4087e2>, <DisassemblerInsn "xor" for 0x4087e7>, <DisassemblerInsn "mov" for 0x4087e9>, <DisassemblerInsn "xor" for 0x4087eb>, <DisassemblerInsn "mov" for 0x4087ed>, <DisassemblerInsn "mov" for 0x4087f2>, <DisassemblerInsn "mov" for 0x4087f6>, <DisassemblerInsn "mov" for 0x4087fb>, <DisassemblerInsn "mov" for 0x408800>, <DisassemblerInsn "mov" for 0x408804>, <DisassemblerInsn "mov" for 0x408808>, <DisassemblerInsn "mov" for 0x40880d>, <DisassemblerInsn "mov" for 0x408810>, <DisassemblerInsn "movzx" for 0x408814>, <DisassemblerInsn "mov" for 0x408817>, <DisassemblerInsn "cmp" for 0x40881b>, <DisassemblerInsn "jae" for 0x40881d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408730>, <DisassemblerInsn "mov" for 0x408738>, <DisassemblerInsn "mov" for 0x40873d>, <DisassemblerInsn "mov" for 0x408745>, <DisassemblerInsn "mov" for 0x40874d>, <DisassemblerInsn "mov" for 0x408752>, <DisassemblerInsn "mov" for 0x408757>, <DisassemblerInsn "mov" for 0x40875c>, <DisassemblerInsn "mov" for 0x408764>, <DisassemblerInsn "mov" for 0x408769>, <DisassemblerInsn "mov" for 0x40876e>, <DisassemblerInsn "mov" for 0x408771>, <DisassemblerInsn "mov" for 0x408775>, <DisassemblerInsn "mov" for 0x408778>, <DisassemblerInsn "mov" for 0x40877c>, <DisassemblerInsn "mov" for 0x408783>, <DisassemblerInsn "mov" for 0x408786>, <DisassemblerInsn "mov" for 0x408789>, <DisassemblerInsn "xor" for 0x40878d>, <DisassemblerInsn "mov" for 0x40878f>, <DisassemblerInsn "mov" for 0x408796>, <DisassemblerInsn "mov" for 0x40879a>, <DisassemblerInsn "call" for 0x40879f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408480>, <DisassemblerInsn "mov" for 0x408488>, <DisassemblerInsn "mov" for 0x408490>, <DisassemblerInsn "mov" for 0x408498>, <DisassemblerInsn "imul" for 0x40849b>, <DisassemblerInsn "mov" for 0x40849f>, <DisassemblerInsn "add" for 0x4084a7>, <DisassemblerInsn "imul" for 0x4084ad>, <DisassemblerInsn "add" for 0x4084b1>, <DisassemblerInsn "mov" for 0x4084b4>, <DisassemblerInsn "xor" for 0x4084bc>, <DisassemblerInsn "mov" for 0x4084be>, <DisassemblerInsn "mov" for 0x4084c6>, <DisassemblerInsn "mov" for 0x4084ce>, <DisassemblerInsn "mov" for 0x4084d6>, <DisassemblerInsn "mov" for 0x4084de>, <DisassemblerInsn "mov" for 0x4084e6>, <DisassemblerInsn "mov" for 0x4084ee>, <DisassemblerInsn "mov" for 0x4084f1>, <DisassemblerInsn "add" for 0x4084f4>, <DisassemblerInsn "mov" for 0x4084f7>, <DisassemblerInsn "shl" for 0x4084ff>, <DisassemblerInsn "mov" for 0x408502>, <DisassemblerInsn "movsxd" for 0x408509>, <DisassemblerInsn "add" for 0x40850c>, <DisassemblerInsn "mov" for 0x40850f>, <DisassemblerInsn "mov" for 0x408517>, <DisassemblerInsn "mov" for 0x40851a>, <DisassemblerInsn "add" for 0x40851e>, <DisassemblerInsn "mov" for 0x408522>, <DisassemblerInsn "cmp" for 0x40852a>, <DisassemblerInsn "mov" for 0x40852d>, <DisassemblerInsn "jne" for 0x408535>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408841>, <DisassemblerInsn "cmp" for 0x408845>, <DisassemblerInsn "jae" for 0x408847>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4084c6>, <DisassemblerInsn "mov" for 0x4084ce>, <DisassemblerInsn "mov" for 0x4084d6>, <DisassemblerInsn "mov" for 0x4084de>, <DisassemblerInsn "mov" for 0x4084e6>, <DisassemblerInsn "mov" for 0x4084ee>, <DisassemblerInsn "mov" for 0x4084f1>, <DisassemblerInsn "add" for 0x4084f4>, <DisassemblerInsn "mov" for 0x4084f7>, <DisassemblerInsn "shl" for 0x4084ff>, <DisassemblerInsn "mov" for 0x408502>, <DisassemblerInsn "movsxd" for 0x408509>, <DisassemblerInsn "add" for 0x40850c>, <DisassemblerInsn "mov" for 0x40850f>, <DisassemblerInsn "mov" for 0x408517>, <DisassemblerInsn "mov" for 0x40851a>, <DisassemblerInsn "add" for 0x40851e>, <DisassemblerInsn "mov" for 0x408522>, <DisassemblerInsn "cmp" for 0x40852a>, <DisassemblerInsn "mov" for 0x40852d>, <DisassemblerInsn "jne" for 0x408535>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087f6>, <DisassemblerInsn "mov" for 0x4087fb>, <DisassemblerInsn "mov" for 0x408800>, <DisassemblerInsn "mov" for 0x408804>, <DisassemblerInsn "mov" for 0x408808>, <DisassemblerInsn "mov" for 0x40880d>, <DisassemblerInsn "mov" for 0x408810>, <DisassemblerInsn "movzx" for 0x408814>, <DisassemblerInsn "mov" for 0x408817>, <DisassemblerInsn "cmp" for 0x40881b>, <DisassemblerInsn "jae" for 0x40881d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408460>, <DisassemblerInsn "mov" for 0x408467>, <DisassemblerInsn "mov" for 0x40846f>, <DisassemblerInsn "test" for 0x408477>, <DisassemblerInsn "jne" for 0x408479>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4087a4>, <DisassemblerInsn "mov" for 0x4087a9>, <DisassemblerInsn "mov" for 0x4087ae>, <DisassemblerInsn "mov" for 0x4087b6>, <DisassemblerInsn "mov" for 0x4087b9>, <DisassemblerInsn "mov" for 0x4087bd>, <DisassemblerInsn "mov" for 0x4087c2>, <DisassemblerInsn "mov" for 0x4087c9>, <DisassemblerInsn "xor" for 0x4087cd>, <DisassemblerInsn "cmp" for 0x4087cf>, <DisassemblerInsn "mov" for 0x4087d2>, <DisassemblerInsn "jle" for 0x4087d6>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408685>, <DisassemblerInsn "mov" for 0x40868c>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "mov" for 0x40869b>, <DisassemblerInsn "mov" for 0x4086a2>, <DisassemblerInsn "mov" for 0x4086a8>, <DisassemblerInsn "mov" for 0x4086ae>, <DisassemblerInsn "cmp" for 0x4086b4>, <DisassemblerInsn "mov" for 0x4086b7>, <DisassemblerInsn "jle" for 0x4086be>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408431>, <DisassemblerInsn "mov" for 0x408439>, <DisassemblerInsn "cmp" for 0x40843f>, <DisassemblerInsn "setg" for 0x408442>, <DisassemblerInsn "mov" for 0x408445>, <DisassemblerInsn "mov" for 0x40844c>, <DisassemblerInsn "mov" for 0x40844e>, <DisassemblerInsn "xor" for 0x408456>, <DisassemblerInsn "mov" for 0x408458>, <DisassemblerInsn "mov" for 0x408460>, <DisassemblerInsn "mov" for 0x408467>, <DisassemblerInsn "mov" for 0x40846f>, <DisassemblerInsn "test" for 0x408477>, <DisassemblerInsn "jne" for 0x408479>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40881f>, <DisassemblerInsn "mov" for 0x408823>, <DisassemblerInsn "movzx" for 0x408827>, <DisassemblerInsn "mov" for 0x40882a>, <DisassemblerInsn "add" for 0x408831>, <DisassemblerInsn "mov" for 0x408834>, <DisassemblerInsn "mov" for 0x40883b>, <DisassemblerInsn "jmp" for 0x40883f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4088e2>, <DisassemblerInsn "mov" for 0x4088ea>, <DisassemblerInsn "mov" for 0x4088f2>, <DisassemblerInsn "mov" for 0x4088fa>, <DisassemblerInsn "mov" for 0x408901>, <DisassemblerInsn "mov" for 0x408903>, <DisassemblerInsn "cdq" for 0x408909>, <DisassemblerInsn "idiv" for 0x40890a>, <DisassemblerInsn "mov" for 0x40890d>, <DisassemblerInsn "mov" for 0x40890f>, <DisassemblerInsn "imul" for 0x408917>, <DisassemblerInsn "mov" for 0x40891a>, <DisassemblerInsn "mov" for 0x40891e>, <DisassemblerInsn "mov" for 0x408920>, <DisassemblerInsn "cdq" for 0x408926>, <DisassemblerInsn "idiv" for 0x408927>, <DisassemblerInsn "mov" for 0x40892a>, <DisassemblerInsn "mov" for 0x408932>, <DisassemblerInsn "mov" for 0x408935>, <DisassemblerInsn "mov" for 0x408939>, <DisassemblerInsn "sar" for 0x40893b>, <DisassemblerInsn "add" for 0x40893d>, <DisassemblerInsn "imul" for 0x408940>, <DisassemblerInsn "imul" for 0x408943>, <DisassemblerInsn "add" for 0x408946>, <DisassemblerInsn "add" for 0x408948>, <DisassemblerInsn "add" for 0x40894a>, <DisassemblerInsn "mov" for 0x40894c>, <DisassemblerInsn "add" for 0x408950>, <DisassemblerInsn "cmp" for 0x408954>, <DisassemblerInsn "mov" for 0x408958>, <DisassemblerInsn "mov" for 0x408960>, <DisassemblerInsn "jne" for 0x408967>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40885c>, <DisassemblerInsn "mov" for 0x408860>, <DisassemblerInsn "mov" for 0x408865>, <DisassemblerInsn "mov" for 0x40886a>, <DisassemblerInsn "cmp" for 0x40886f>, <DisassemblerInsn "cmove" for 0x408873>, <DisassemblerInsn "add" for 0x408876>, <DisassemblerInsn "mov" for 0x408878>, <DisassemblerInsn "mov" for 0x40887c>, <DisassemblerInsn "mov" for 0x408881>, <DisassemblerInsn "mov" for 0x408886>, <DisassemblerInsn "add" for 0x40888a>, <DisassemblerInsn "cmp" for 0x40888e>, <DisassemblerInsn "mov" for 0x408891>, <DisassemblerInsn "mov" for 0x408896>, <DisassemblerInsn "mov" for 0x408898>, <DisassemblerInsn "mov" for 0x40889c>, <DisassemblerInsn "jne" for 0x4088a0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40847b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x408555>, <DisassemblerInsn "lea" for 0x40855d>, <DisassemblerInsn "add" for 0x408565>, <DisassemblerInsn "mov" for 0x408569>, <DisassemblerInsn "lea" for 0x408571>, <DisassemblerInsn "mov" for 0x408579>, <DisassemblerInsn "lea" for 0x408581>, <DisassemblerInsn "add" for 0x408589>, <DisassemblerInsn "mov" for 0x40858d>, <DisassemblerInsn "lea" for 0x408595>, <DisassemblerInsn "add" for 0x40859d>, <DisassemblerInsn "mov" for 0x4085a1>, <DisassemblerInsn "lea" for 0x4085a9>, <DisassemblerInsn "add" for 0x4085b1>, <DisassemblerInsn "mov" for 0x4085b5>, <DisassemblerInsn "mov" for 0x4085bd>, <DisassemblerInsn "add" for 0x4085c0>, <DisassemblerInsn "mov" for 0x4085c7>, <DisassemblerInsn "add" for 0x4085cf>, <DisassemblerInsn "add" for 0x4085d5>, <DisassemblerInsn "mov" for 0x4085d9>, <DisassemblerInsn "lea" for 0x4085e1>, <DisassemblerInsn "add" for 0x4085e9>, <DisassemblerInsn "mov" for 0x4085ed>, <DisassemblerInsn "lea" for 0x4085f5>, <DisassemblerInsn "add" for 0x4085fd>, <DisassemblerInsn "mov" for 0x408601>, <DisassemblerInsn "lea" for 0x408609>, <DisassemblerInsn "add" for 0x408611>, <DisassemblerInsn "mov" for 0x408615>, <DisassemblerInsn "lea" for 0x40861d>, <DisassemblerInsn "add" for 0x408625>, <DisassemblerInsn "mov" for 0x408629>, <DisassemblerInsn "xor" for 0x408631>, <DisassemblerInsn "mov" for 0x408633>, <DisassemblerInsn "xor" for 0x408635>, <DisassemblerInsn "mov" for 0x408637>, <DisassemblerInsn "mov" for 0x40863f>, <DisassemblerInsn "mov" for 0x408646>, <DisassemblerInsn "mov" for 0x40864e>, <DisassemblerInsn "mov" for 0x408656>, <DisassemblerInsn "mov" for 0x40865e>, <DisassemblerInsn "mov" for 0x408666>, <DisassemblerInsn "mov" for 0x40866e>, <DisassemblerInsn "mov" for 0x408676>, <DisassemblerInsn "mov" for 0x40867e>, <DisassemblerInsn "mov" for 0x408685>, <DisassemblerInsn "mov" for 0x40868c>, <DisassemblerInsn "mov" for 0x408694>, <DisassemblerInsn "mov" for 0x40869b>, <DisassemblerInsn "mov" for 0x4086a2>, <DisassemblerInsn "mov" for 0x4086a8>, <DisassemblerInsn "mov" for 0x4086ae>, <DisassemblerInsn "cmp" for 0x4086b4>, <DisassemblerInsn "mov" for 0x4086b7>, <DisassemblerInsn "jle" for 0x4086be>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4083e0>, <DisassemblerInsn "mov" for 0x4083e7>, <DisassemblerInsn "mov" for 0x4083e9>, <DisassemblerInsn "lea" for 0x4083f1>, <DisassemblerInsn "shl" for 0x4083f9>, <DisassemblerInsn "add" for 0x4083fc>, <DisassemblerInsn "mov" for 0x408401>, <DisassemblerInsn "mov" for 0x408408>, <DisassemblerInsn "mov" for 0x40840f>, <DisassemblerInsn "mov" for 0x408412>, <DisassemblerInsn "add" for 0x408415>, <DisassemblerInsn "mov" for 0x40841c>, <DisassemblerInsn "cmp" for 0x408424>, <DisassemblerInsn "je" for 0x40842b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x40887c>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~eax, esi>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rdx]>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jl~~0x408730>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jne~~0x4087f6>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<add~~rax, 1>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x150], rax>', '<jne~~0x408460>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x164]>', '<mov~~r9, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r10d, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x44], r10d>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf79c2]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x30], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x408841>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x164]>', '<mov~~r9, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r10d, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x44], r10d>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf79c2]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdx, rcx>', '<imul~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<add~~rax, 0x2030>', '<imul~~rcx, rcx, 0x50>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x128], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~r8, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rdi, rax>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<shl~~edi, 8>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<movsxd~~rdi, edi>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rdx + rax*8], rsi>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jne~~0x4084c6>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x2b]>', '<cmp~~al, 0xe>', '<jae~~0x40885c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~r8, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rdi, rax>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<shl~~edi, 8>', '<mov~~dword ptr [rsp + 0x10c], edi>', '<movsxd~~rdi, edi>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rdx + rax*8], rsi>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jne~~0x4084c6>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x2b], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<cmp~~al, 5>', '<jae~~0x408841>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x147]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<test~~al, 1>', '<jne~~0x408480>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x4088a6>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r9, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x4088e2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~eax, dword ptr [rax + 0x2238]>', '<cmp~~eax, 0>', '<setg~~cl>', '<mov~~byte ptr [rsp + 0x147], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~al, byte ptr [rsp + 0x147]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<test~~al, 1>', '<jne~~0x408480>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~cl, byte ptr [rsp + 0x2b]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x170]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x170], edx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x40887c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rsp + 0x94]>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x10], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 3>', '<cdq~~>', '<idiv~~r8d>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~r8d, eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rdx]>', '<sar~~edx, 1>', '<add~~edx, r8d>', '<imul~~edx, edx, 7>', '<imul~~esi, dword ptr [rsi], 3>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x14], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x408646>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~sil, byte ptr [rsp + 0x2b]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jne~~0x4087f6>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x408537>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 0xc>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<lea~~rcx, [rsp + 0x170]>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2238>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x170]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r9, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], r10>', '<mov~~dword ptr [r9], 0>', '<mov~~dword ptr [r8], 0>', '<mov~~dword ptr [rdi], 2>', '<mov~~dword ptr [rsi], 2>', '<mov~~dword ptr [rdx], 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x4088e2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rcx, [rsp + 0x170]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0x164], eax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x168], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x408555>']}], 'cfg_edge_info': [(20, 14), (3, 7), (22, 14), (20, 23), (4, 12), (14, 16), (22, 23), (0, 2), (5, 10), (2, 5), (1, 3), (13, 5), (11, 11), (7, 4), (6, 11), (15, 17), (18, 22), (14, 3), (23, 18), (12, 15), (0, 1), (17, 20), (11, 10), (16, 12), (7, 3), (6, 10), (18, 21), (12, 14), (21, 20), (23, 17), (3, 8), (10, 1), (10, 13), (1, 4), (2, 6), (13, 6), (15, 18)], 'cdg_edge_info': [(18, 20), (3, 7), (20, 23), (14, 16), (22, 23), (0, 2), (11, 11), (7, 4), (1, 12), (6, 11), (15, 17), (15, 20), (18, 22), (3, 3), (23, 18), (12, 15), (14, 12), (0, 10), (1, 14), (7, 12), (18, 21), (23, 17), (14, 14), (23, 20), (10, 13), (1, 4), (10, 10), (2, 6), (13, 6), (15, 18), (7, 14)], 'ddg_edge_info': [(7, 17), (23, 16), (22, 14), (3, 7), (4, 12), (17, 3), (14, 16), (22, 23), (21, 22), (23, 22), (0, 2), (0, 8), (16, 4), (1, 3), (2, 11), (0, 11), (16, 7), (7, 4), (6, 11), (15, 23), (16, 22), (23, 12), (23, 18), (14, 3), (12, 15), (23, 21), (0, 1), (0, 7), (0, 4), (0, 10), (0, 16), (0, 13), (16, 3), (13, 10), (1, 14), (2, 13), (7, 3), (16, 12), (16, 15), (16, 21), (16, 18), (15, 22), (12, 14), (7, 14), (4, 16), (3, 8), (23, 17), (12, 23), (0, 3), (10, 13), (0, 6), (17, 22), (0, 12), (1, 7), (2, 6), (13, 6), (1, 16), (16, 8), (16, 14), (16, 17), (16, 23)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'movl\t$2, (%rdi)'}, {'instIndex': 118, 'instruction': 'movl\t$2, (%rsi)'}, {'instIndex': 119, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 120, 'instruction': 'cmpl\t$0, (%rcx)'}, {'instIndex': 121, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 122, 'instruction': 'jle\t.LBB3_18'}, {'instIndex': 155, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 156, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 157, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 158, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 159, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 160, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 161, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 162, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 163, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 164, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 165, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 166, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 167, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 171, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 172, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 173, 'instruction': 'movq\t%rdx, 0x50(%rsp)                  # 8-byte Spill'}, {'instIndex': 174, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 175, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 238, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 239, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 240, 'instruction': 'movslq\t(%rdx), %rdx'}, {'instIndex': 241, 'instruction': 'cmpq\t%rdx, %rcx'}, {'instIndex': 242, 'instruction': 'movq\t%rcx, 0x78(%rsp)                 # 8-byte Spill'}, {'instIndex': 246, 'instruction': 'jl\t.LBB3_9'}, {'instIndex': 273, 'instruction': 'addl\t%edx, %eax'}, {'instIndex': 274, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O2/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O2/ac3enc.s---bit_alloc---before
function id: 3
function flag: True
There are 243 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_13'}, {'instIndex': 78, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 79, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 80, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 93, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 94, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 95, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 96, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 97, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 98, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 99, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 100, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 101, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 102, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 103, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 104, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 109, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 111, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 112, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 113, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 177, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 178, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 179, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 180, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 181, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 182, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 183, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 184, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 185, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 187, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 232, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O2/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O2/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 887 nodes and 1609 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 243 instructions in binary file.
[4255261, 4255437, 4255571, 4255702, 4255827, 4256093, 4256170, 4256262]
The execution time of patched subCFG information extraction via angr: 0:00:10.672990
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f15d>, <DisassemblerInsn "mov" for 0x40f162>, <DisassemblerInsn "mov" for 0x40f16a>, <DisassemblerInsn "mov" for 0x40f16f>, <DisassemblerInsn "mov" for 0x40f173>, <DisassemblerInsn "add" for 0x40f177>, <DisassemblerInsn "mov" for 0x40f179>, <DisassemblerInsn "add" for 0x40f17d>, <DisassemblerInsn "mov" for 0x40f181>, <DisassemblerInsn "mov" for 0x40f183>, <DisassemblerInsn "movsxd" for 0x40f187>, <DisassemblerInsn "cmp" for 0x40f18a>, <DisassemblerInsn "mov" for 0x40f18d>, <DisassemblerInsn "mov" for 0x40f195>, <DisassemblerInsn "mov" for 0x40f19d>, <DisassemblerInsn "jl" for 0x40f1a4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ee1d>, <DisassemblerInsn "lea" for 0x40ee25>, <DisassemblerInsn "add" for 0x40ee2d>, <DisassemblerInsn "mov" for 0x40ee31>, <DisassemblerInsn "lea" for 0x40ee39>, <DisassemblerInsn "add" for 0x40ee41>, <DisassemblerInsn "mov" for 0x40ee45>, <DisassemblerInsn "lea" for 0x40ee4d>, <DisassemblerInsn "add" for 0x40ee55>, <DisassemblerInsn "mov" for 0x40ee59>, <DisassemblerInsn "lea" for 0x40ee61>, <DisassemblerInsn "add" for 0x40ee69>, <DisassemblerInsn "mov" for 0x40ee6d>, <DisassemblerInsn "mov" for 0x40ee75>, <DisassemblerInsn "add" for 0x40ee78>, <DisassemblerInsn "mov" for 0x40ee7e>, <DisassemblerInsn "mov" for 0x40ee86>, <DisassemblerInsn "add" for 0x40ee89>, <DisassemblerInsn "add" for 0x40ee8f>, <DisassemblerInsn "mov" for 0x40ee93>, <DisassemblerInsn "mov" for 0x40ee9b>, <DisassemblerInsn "lea" for 0x40eea1>, <DisassemblerInsn "mov" for 0x40eea9>, <DisassemblerInsn "xor" for 0x40eeb1>, <DisassemblerInsn "mov" for 0x40eeb3>, <DisassemblerInsn "xor" for 0x40eeb5>, <DisassemblerInsn "mov" for 0x40eeb7>, <DisassemblerInsn "mov" for 0x40eebe>, <DisassemblerInsn "mov" for 0x40eec6>, <DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f113>, <DisassemblerInsn "mov" for 0x40f117>, <DisassemblerInsn "mov" for 0x40f11c>, <DisassemblerInsn "mov" for 0x40f121>, <DisassemblerInsn "cmp" for 0x40f126>, <DisassemblerInsn "cmove" for 0x40f12a>, <DisassemblerInsn "add" for 0x40f12d>, <DisassemblerInsn "mov" for 0x40f12f>, <DisassemblerInsn "mov" for 0x40f133>, <DisassemblerInsn "mov" for 0x40f138>, <DisassemblerInsn "mov" for 0x40f13d>, <DisassemblerInsn "add" for 0x40f141>, <DisassemblerInsn "cmp" for 0x40f145>, <DisassemblerInsn "mov" for 0x40f148>, <DisassemblerInsn "mov" for 0x40f14d>, <DisassemblerInsn "mov" for 0x40f14f>, <DisassemblerInsn "mov" for 0x40f153>, <DisassemblerInsn "jne" for 0x40f157>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f2a9>, <DisassemblerInsn "add" for 0x40f2ad>, <DisassemblerInsn "ret" for 0x40f2b4>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f1aa>, <DisassemblerInsn "mov" for 0x40f1ae>, <DisassemblerInsn "mov" for 0x40f1b2>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1c2>, <DisassemblerInsn "mov" for 0x40f1ca>, <DisassemblerInsn "mov" for 0x40f1d2>, <DisassemblerInsn "mov" for 0x40f1d4>, <DisassemblerInsn "mov" for 0x40f1d6>, <DisassemblerInsn "mov" for 0x40f1d8>, <DisassemblerInsn "mov" for 0x40f1db>, <DisassemblerInsn "mov" for 0x40f1e3>, <DisassemblerInsn "mov" for 0x40f1ea>, <DisassemblerInsn "mov" for 0x40f1f1>, <DisassemblerInsn "mov" for 0x40f1f8>, <DisassemblerInsn "mov" for 0x40f1ff>, <DisassemblerInsn "mov" for 0x40f206>, <DisassemblerInsn "mov" for 0x40f20e>, <DisassemblerInsn "mov" for 0x40f215>, <DisassemblerInsn "mov" for 0x40f21c>, <DisassemblerInsn "mov" for 0x40f223>, <DisassemblerInsn "mov" for 0x40f22a>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f23a>, <DisassemblerInsn "mov" for 0x40f23f>, <DisassemblerInsn "mov" for 0x40f243>, <DisassemblerInsn "cdq" for 0x40f249>, <DisassemblerInsn "idiv" for 0x40f24a>, <DisassemblerInsn "mov" for 0x40f24d>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "imul" for 0x40f253>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25a>, <DisassemblerInsn "cdq" for 0x40f260>, <DisassemblerInsn "idiv" for 0x40f261>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f268>, <DisassemblerInsn "mov" for 0x40f26b>, <DisassemblerInsn "sar" for 0x40f26f>, <DisassemblerInsn "add" for 0x40f271>, <DisassemblerInsn "imul" for 0x40f274>, <DisassemblerInsn "imul" for 0x40f277>, <DisassemblerInsn "add" for 0x40f27a>, <DisassemblerInsn "add" for 0x40f27d>, <DisassemblerInsn "add" for 0x40f27f>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "add" for 0x40f285>, <DisassemblerInsn "cmp" for 0x40f289>, <DisassemblerInsn "mov" for 0x40f28d>, <DisassemblerInsn "mov" for 0x40f294>, <DisassemblerInsn "mov" for 0x40f29c>, <DisassemblerInsn "jne" for 0x40f2a3>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef53>, <DisassemblerInsn "mov" for 0x40ef5a>, <DisassemblerInsn "mov" for 0x40ef62>, <DisassemblerInsn "mov" for 0x40ef6a>, <DisassemblerInsn "add" for 0x40ef6d>, <DisassemblerInsn "imul" for 0x40ef74>, <DisassemblerInsn "add" for 0x40ef78>, <DisassemblerInsn "add" for 0x40ef7b>, <DisassemblerInsn "mov" for 0x40ef7f>, <DisassemblerInsn "mov" for 0x40ef87>, <DisassemblerInsn "add" for 0x40ef8a>, <DisassemblerInsn "imul" for 0x40ef91>, <DisassemblerInsn "add" for 0x40ef95>, <DisassemblerInsn "add" for 0x40ef98>, <DisassemblerInsn "mov" for 0x40ef9c>, <DisassemblerInsn "add" for 0x40efa4>, <DisassemblerInsn "imul" for 0x40efab>, <DisassemblerInsn "add" for 0x40efaf>, <DisassemblerInsn "mov" for 0x40efb2>, <DisassemblerInsn "mov" for 0x40efba>, <DisassemblerInsn "xor" for 0x40efbd>, <DisassemblerInsn "mov" for 0x40efbf>, <DisassemblerInsn "mov" for 0x40efc7>, <DisassemblerInsn "mov" for 0x40efcf>, <DisassemblerInsn "mov" for 0x40efd6>, <DisassemblerInsn "mov" for 0x40efde>, <DisassemblerInsn "mov" for 0x40efe6>, <DisassemblerInsn "mov" for 0x40efee>, <DisassemblerInsn "mov" for 0x40eff6>, <DisassemblerInsn "mov" for 0x40effe>, <DisassemblerInsn "mov" for 0x40f006>, <DisassemblerInsn "mov" for 0x40f00e>, <DisassemblerInsn "mov" for 0x40f016>, <DisassemblerInsn "mov" for 0x40f01b>, <DisassemblerInsn "mov" for 0x40f020>, <DisassemblerInsn "mov" for 0x40f023>, <DisassemblerInsn "mov" for 0x40f027>, <DisassemblerInsn "mov" for 0x40f02a>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f035>, <DisassemblerInsn "mov" for 0x40f038>, <DisassemblerInsn "xor" for 0x40f03c>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f049>, <DisassemblerInsn "call" for 0x40f04e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40efd6>, <DisassemblerInsn "mov" for 0x40efde>, <DisassemblerInsn "mov" for 0x40efe6>, <DisassemblerInsn "mov" for 0x40efee>, <DisassemblerInsn "mov" for 0x40eff6>, <DisassemblerInsn "mov" for 0x40effe>, <DisassemblerInsn "mov" for 0x40f006>, <DisassemblerInsn "mov" for 0x40f00e>, <DisassemblerInsn "mov" for 0x40f016>, <DisassemblerInsn "mov" for 0x40f01b>, <DisassemblerInsn "mov" for 0x40f020>, <DisassemblerInsn "mov" for 0x40f023>, <DisassemblerInsn "mov" for 0x40f027>, <DisassemblerInsn "mov" for 0x40f02a>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f035>, <DisassemblerInsn "mov" for 0x40f038>, <DisassemblerInsn "xor" for 0x40f03c>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f049>, <DisassemblerInsn "call" for 0x40f04e>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f133>, <DisassemblerInsn "mov" for 0x40f138>, <DisassemblerInsn "mov" for 0x40f13d>, <DisassemblerInsn "add" for 0x40f141>, <DisassemblerInsn "cmp" for 0x40f145>, <DisassemblerInsn "mov" for 0x40f148>, <DisassemblerInsn "mov" for 0x40f14d>, <DisassemblerInsn "mov" for 0x40f14f>, <DisassemblerInsn "mov" for 0x40f153>, <DisassemblerInsn "jne" for 0x40f157>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f093>, <DisassemblerInsn "mov" for 0x40f097>, <DisassemblerInsn "mov" for 0x40f099>, <DisassemblerInsn "xor" for 0x40f09e>, <DisassemblerInsn "mov" for 0x40f0a0>, <DisassemblerInsn "xor" for 0x40f0a2>, <DisassemblerInsn "mov" for 0x40f0a4>, <DisassemblerInsn "mov" for 0x40f0a9>, <DisassemblerInsn "mov" for 0x40f0ad>, <DisassemblerInsn "mov" for 0x40f0b2>, <DisassemblerInsn "mov" for 0x40f0b7>, <DisassemblerInsn "mov" for 0x40f0bb>, <DisassemblerInsn "mov" for 0x40f0bf>, <DisassemblerInsn "mov" for 0x40f0c4>, <DisassemblerInsn "mov" for 0x40f0c7>, <DisassemblerInsn "movzx" for 0x40f0cb>, <DisassemblerInsn "mov" for 0x40f0ce>, <DisassemblerInsn "cmp" for 0x40f0d2>, <DisassemblerInsn "jae" for 0x40f0d4>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40edf0>, <DisassemblerInsn "mov" for 0x40edf7>, <DisassemblerInsn "mov" for 0x40edf9>, <DisassemblerInsn "lea" for 0x40ee01>, <DisassemblerInsn "shl" for 0x40ee09>, <DisassemblerInsn "add" for 0x40ee0c>, <DisassemblerInsn "mov" for 0x40ee11>, <DisassemblerInsn "call" for 0x40ee18>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f206>, <DisassemblerInsn "mov" for 0x40f20e>, <DisassemblerInsn "mov" for 0x40f215>, <DisassemblerInsn "mov" for 0x40f21c>, <DisassemblerInsn "mov" for 0x40f223>, <DisassemblerInsn "mov" for 0x40f22a>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f23a>, <DisassemblerInsn "mov" for 0x40f23f>, <DisassemblerInsn "mov" for 0x40f243>, <DisassemblerInsn "cdq" for 0x40f249>, <DisassemblerInsn "idiv" for 0x40f24a>, <DisassemblerInsn "mov" for 0x40f24d>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "imul" for 0x40f253>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25a>, <DisassemblerInsn "cdq" for 0x40f260>, <DisassemblerInsn "idiv" for 0x40f261>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f268>, <DisassemblerInsn "mov" for 0x40f26b>, <DisassemblerInsn "sar" for 0x40f26f>, <DisassemblerInsn "add" for 0x40f271>, <DisassemblerInsn "imul" for 0x40f274>, <DisassemblerInsn "imul" for 0x40f277>, <DisassemblerInsn "add" for 0x40f27a>, <DisassemblerInsn "add" for 0x40f27d>, <DisassemblerInsn "add" for 0x40f27f>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "add" for 0x40f285>, <DisassemblerInsn "cmp" for 0x40f289>, <DisassemblerInsn "mov" for 0x40f28d>, <DisassemblerInsn "mov" for 0x40f294>, <DisassemblerInsn "mov" for 0x40f29c>, <DisassemblerInsn "jne" for 0x40f2a3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f053>, <DisassemblerInsn "mov" for 0x40f05b>, <DisassemblerInsn "mov" for 0x40f060>, <DisassemblerInsn "mov" for 0x40f068>, <DisassemblerInsn "mov" for 0x40f06b>, <DisassemblerInsn "mov" for 0x40f070>, <DisassemblerInsn "mov" for 0x40f074>, <DisassemblerInsn "mov" for 0x40f079>, <DisassemblerInsn "mov" for 0x40f080>, <DisassemblerInsn "xor" for 0x40f084>, <DisassemblerInsn "cmp" for 0x40f086>, <DisassemblerInsn "mov" for 0x40f089>, <DisassemblerInsn "jle" for 0x40f08d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40efd6>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf37]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f206>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40f0ad>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf1113]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf1113]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf37]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f206>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40f0ad>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f0f8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40f2c0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x40f15d>']}], 'cfg_edge_info': [(0, 1), (10, 5), (1, 2), (2, 4), (13, 7), (7, 10), (9, 6), (6, 8), (15, 7), (10, 4), (7, 9), (6, 7), (3, 6), (5, 3), (2, 5), (1, 3), (5, 2)]}]}
{'bit_alloc': [4255261, 4255437, 4255571, 4255702, 4255827, 4256093, 4256170, 4256262]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O2/ac3enc.o---before
The extraction of function: bit_alloc
[4255261, 4255437, 4255571, 4255702, 4255827, 4256093, 4256170, 4256262]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 65 nodes and 114 edges in CFGEmulated.
It has 64 nodes and 109 edges in CDG.
It has 3152 nodes and 4203 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4255261, 4255437, 4255571, 4255702, 4255827, 4256093, 4256170, 4256262]
{4256000, 4256262, 4256425, 4256170, 4255500, 4255437, 4255917, 4255216, 4255571, 4255827, 4255891, 4255702, 4255958, 4255992, 4256051, 4256019, 4256093, 4255261}
[10, 4, 0, 39, 11, 34, 31, 38, 17, 16, 23, 32, 7, 27, 1, 2, 44, 40, 33, 63, 28]
The execution time of patched slicing information extraction via angr: 0:00:11.561448
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f206>, <DisassemblerInsn "mov" for 0x40f20e>, <DisassemblerInsn "mov" for 0x40f215>, <DisassemblerInsn "mov" for 0x40f21c>, <DisassemblerInsn "mov" for 0x40f223>, <DisassemblerInsn "mov" for 0x40f22a>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f23a>, <DisassemblerInsn "mov" for 0x40f23f>, <DisassemblerInsn "mov" for 0x40f243>, <DisassemblerInsn "cdq" for 0x40f249>, <DisassemblerInsn "idiv" for 0x40f24a>, <DisassemblerInsn "mov" for 0x40f24d>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "imul" for 0x40f253>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25a>, <DisassemblerInsn "cdq" for 0x40f260>, <DisassemblerInsn "idiv" for 0x40f261>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f268>, <DisassemblerInsn "mov" for 0x40f26b>, <DisassemblerInsn "sar" for 0x40f26f>, <DisassemblerInsn "add" for 0x40f271>, <DisassemblerInsn "imul" for 0x40f274>, <DisassemblerInsn "imul" for 0x40f277>, <DisassemblerInsn "add" for 0x40f27a>, <DisassemblerInsn "add" for 0x40f27d>, <DisassemblerInsn "add" for 0x40f27f>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "add" for 0x40f285>, <DisassemblerInsn "cmp" for 0x40f289>, <DisassemblerInsn "mov" for 0x40f28d>, <DisassemblerInsn "mov" for 0x40f294>, <DisassemblerInsn "mov" for 0x40f29c>, <DisassemblerInsn "jne" for 0x40f2a3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ee1d>, <DisassemblerInsn "lea" for 0x40ee25>, <DisassemblerInsn "add" for 0x40ee2d>, <DisassemblerInsn "mov" for 0x40ee31>, <DisassemblerInsn "lea" for 0x40ee39>, <DisassemblerInsn "add" for 0x40ee41>, <DisassemblerInsn "mov" for 0x40ee45>, <DisassemblerInsn "lea" for 0x40ee4d>, <DisassemblerInsn "add" for 0x40ee55>, <DisassemblerInsn "mov" for 0x40ee59>, <DisassemblerInsn "lea" for 0x40ee61>, <DisassemblerInsn "add" for 0x40ee69>, <DisassemblerInsn "mov" for 0x40ee6d>, <DisassemblerInsn "mov" for 0x40ee75>, <DisassemblerInsn "add" for 0x40ee78>, <DisassemblerInsn "mov" for 0x40ee7e>, <DisassemblerInsn "mov" for 0x40ee86>, <DisassemblerInsn "add" for 0x40ee89>, <DisassemblerInsn "add" for 0x40ee8f>, <DisassemblerInsn "mov" for 0x40ee93>, <DisassemblerInsn "mov" for 0x40ee9b>, <DisassemblerInsn "lea" for 0x40eea1>, <DisassemblerInsn "mov" for 0x40eea9>, <DisassemblerInsn "xor" for 0x40eeb1>, <DisassemblerInsn "mov" for 0x40eeb3>, <DisassemblerInsn "xor" for 0x40eeb5>, <DisassemblerInsn "mov" for 0x40eeb7>, <DisassemblerInsn "mov" for 0x40eebe>, <DisassemblerInsn "mov" for 0x40eec6>, <DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40edf0>, <DisassemblerInsn "mov" for 0x40edf7>, <DisassemblerInsn "mov" for 0x40edf9>, <DisassemblerInsn "lea" for 0x40ee01>, <DisassemblerInsn "shl" for 0x40ee09>, <DisassemblerInsn "add" for 0x40ee0c>, <DisassemblerInsn "mov" for 0x40ee11>, <DisassemblerInsn "call" for 0x40ee18>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f100>, <DisassemblerInsn "mov" for 0x40f104>, <DisassemblerInsn "add" for 0x40f108>, <DisassemblerInsn "add" for 0x40f10b>, <DisassemblerInsn "mov" for 0x40f10d>, <DisassemblerInsn "jmp" for 0x40f111>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef53>, <DisassemblerInsn "mov" for 0x40ef5a>, <DisassemblerInsn "mov" for 0x40ef62>, <DisassemblerInsn "mov" for 0x40ef6a>, <DisassemblerInsn "add" for 0x40ef6d>, <DisassemblerInsn "imul" for 0x40ef74>, <DisassemblerInsn "add" for 0x40ef78>, <DisassemblerInsn "add" for 0x40ef7b>, <DisassemblerInsn "mov" for 0x40ef7f>, <DisassemblerInsn "mov" for 0x40ef87>, <DisassemblerInsn "add" for 0x40ef8a>, <DisassemblerInsn "imul" for 0x40ef91>, <DisassemblerInsn "add" for 0x40ef95>, <DisassemblerInsn "add" for 0x40ef98>, <DisassemblerInsn "mov" for 0x40ef9c>, <DisassemblerInsn "add" for 0x40efa4>, <DisassemblerInsn "imul" for 0x40efab>, <DisassemblerInsn "add" for 0x40efaf>, <DisassemblerInsn "mov" for 0x40efb2>, <DisassemblerInsn "mov" for 0x40efba>, <DisassemblerInsn "xor" for 0x40efbd>, <DisassemblerInsn "mov" for 0x40efbf>, <DisassemblerInsn "mov" for 0x40efc7>, <DisassemblerInsn "mov" for 0x40efcf>, <DisassemblerInsn "mov" for 0x40efd6>, <DisassemblerInsn "mov" for 0x40efde>, <DisassemblerInsn "mov" for 0x40efe6>, <DisassemblerInsn "mov" for 0x40efee>, <DisassemblerInsn "mov" for 0x40eff6>, <DisassemblerInsn "mov" for 0x40effe>, <DisassemblerInsn "mov" for 0x40f006>, <DisassemblerInsn "mov" for 0x40f00e>, <DisassemblerInsn "mov" for 0x40f016>, <DisassemblerInsn "mov" for 0x40f01b>, <DisassemblerInsn "mov" for 0x40f020>, <DisassemblerInsn "mov" for 0x40f023>, <DisassemblerInsn "mov" for 0x40f027>, <DisassemblerInsn "mov" for 0x40f02a>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f035>, <DisassemblerInsn "mov" for 0x40f038>, <DisassemblerInsn "xor" for 0x40f03c>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f049>, <DisassemblerInsn "call" for 0x40f04e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0f8>, <DisassemblerInsn "cmp" for 0x40f0fc>, <DisassemblerInsn "jae" for 0x40f0fe>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40efd6>, <DisassemblerInsn "mov" for 0x40efde>, <DisassemblerInsn "mov" for 0x40efe6>, <DisassemblerInsn "mov" for 0x40efee>, <DisassemblerInsn "mov" for 0x40eff6>, <DisassemblerInsn "mov" for 0x40effe>, <DisassemblerInsn "mov" for 0x40f006>, <DisassemblerInsn "mov" for 0x40f00e>, <DisassemblerInsn "mov" for 0x40f016>, <DisassemblerInsn "mov" for 0x40f01b>, <DisassemblerInsn "mov" for 0x40f020>, <DisassemblerInsn "mov" for 0x40f023>, <DisassemblerInsn "mov" for 0x40f027>, <DisassemblerInsn "mov" for 0x40f02a>, <DisassemblerInsn "mov" for 0x40f02e>, <DisassemblerInsn "mov" for 0x40f035>, <DisassemblerInsn "mov" for 0x40f038>, <DisassemblerInsn "xor" for 0x40f03c>, <DisassemblerInsn "mov" for 0x40f03e>, <DisassemblerInsn "mov" for 0x40f045>, <DisassemblerInsn "mov" for 0x40f049>, <DisassemblerInsn "call" for 0x40f04e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f133>, <DisassemblerInsn "mov" for 0x40f138>, <DisassemblerInsn "mov" for 0x40f13d>, <DisassemblerInsn "add" for 0x40f141>, <DisassemblerInsn "cmp" for 0x40f145>, <DisassemblerInsn "mov" for 0x40f148>, <DisassemblerInsn "mov" for 0x40f14d>, <DisassemblerInsn "mov" for 0x40f14f>, <DisassemblerInsn "mov" for 0x40f153>, <DisassemblerInsn "jne" for 0x40f157>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f2a9>, <DisassemblerInsn "add" for 0x40f2ad>, <DisassemblerInsn "ret" for 0x40f2b4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40eecd>, <DisassemblerInsn "mov" for 0x40eed5>, <DisassemblerInsn "mov" for 0x40eedd>, <DisassemblerInsn "mov" for 0x40eee4>, <DisassemblerInsn "mov" for 0x40eeec>, <DisassemblerInsn "mov" for 0x40eef3>, <DisassemblerInsn "mov" for 0x40eefa>, <DisassemblerInsn "movaps" for 0x40ef02>, <DisassemblerInsn "movaps" for 0x40ef09>, <DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f053>, <DisassemblerInsn "mov" for 0x40f05b>, <DisassemblerInsn "mov" for 0x40f060>, <DisassemblerInsn "mov" for 0x40f068>, <DisassemblerInsn "mov" for 0x40f06b>, <DisassemblerInsn "mov" for 0x40f070>, <DisassemblerInsn "mov" for 0x40f074>, <DisassemblerInsn "mov" for 0x40f079>, <DisassemblerInsn "mov" for 0x40f080>, <DisassemblerInsn "xor" for 0x40f084>, <DisassemblerInsn "cmp" for 0x40f086>, <DisassemblerInsn "mov" for 0x40f089>, <DisassemblerInsn "jle" for 0x40f08d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f1aa>, <DisassemblerInsn "mov" for 0x40f1ae>, <DisassemblerInsn "mov" for 0x40f1b2>, <DisassemblerInsn "mov" for 0x40f1ba>, <DisassemblerInsn "mov" for 0x40f1c2>, <DisassemblerInsn "mov" for 0x40f1ca>, <DisassemblerInsn "mov" for 0x40f1d2>, <DisassemblerInsn "mov" for 0x40f1d4>, <DisassemblerInsn "mov" for 0x40f1d6>, <DisassemblerInsn "mov" for 0x40f1d8>, <DisassemblerInsn "mov" for 0x40f1db>, <DisassemblerInsn "mov" for 0x40f1e3>, <DisassemblerInsn "mov" for 0x40f1ea>, <DisassemblerInsn "mov" for 0x40f1f1>, <DisassemblerInsn "mov" for 0x40f1f8>, <DisassemblerInsn "mov" for 0x40f1ff>, <DisassemblerInsn "mov" for 0x40f206>, <DisassemblerInsn "mov" for 0x40f20e>, <DisassemblerInsn "mov" for 0x40f215>, <DisassemblerInsn "mov" for 0x40f21c>, <DisassemblerInsn "mov" for 0x40f223>, <DisassemblerInsn "mov" for 0x40f22a>, <DisassemblerInsn "mov" for 0x40f232>, <DisassemblerInsn "mov" for 0x40f23a>, <DisassemblerInsn "mov" for 0x40f23f>, <DisassemblerInsn "mov" for 0x40f243>, <DisassemblerInsn "cdq" for 0x40f249>, <DisassemblerInsn "idiv" for 0x40f24a>, <DisassemblerInsn "mov" for 0x40f24d>, <DisassemblerInsn "mov" for 0x40f24f>, <DisassemblerInsn "imul" for 0x40f253>, <DisassemblerInsn "mov" for 0x40f256>, <DisassemblerInsn "mov" for 0x40f25a>, <DisassemblerInsn "cdq" for 0x40f260>, <DisassemblerInsn "idiv" for 0x40f261>, <DisassemblerInsn "mov" for 0x40f264>, <DisassemblerInsn "mov" for 0x40f268>, <DisassemblerInsn "mov" for 0x40f26b>, <DisassemblerInsn "sar" for 0x40f26f>, <DisassemblerInsn "add" for 0x40f271>, <DisassemblerInsn "imul" for 0x40f274>, <DisassemblerInsn "imul" for 0x40f277>, <DisassemblerInsn "add" for 0x40f27a>, <DisassemblerInsn "add" for 0x40f27d>, <DisassemblerInsn "add" for 0x40f27f>, <DisassemblerInsn "mov" for 0x40f281>, <DisassemblerInsn "add" for 0x40f285>, <DisassemblerInsn "cmp" for 0x40f289>, <DisassemblerInsn "mov" for 0x40f28d>, <DisassemblerInsn "mov" for 0x40f294>, <DisassemblerInsn "mov" for 0x40f29c>, <DisassemblerInsn "jne" for 0x40f2a3>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ef0c>, <DisassemblerInsn "xor" for 0x40ef12>, <DisassemblerInsn "mov" for 0x40ef14>, <DisassemblerInsn "mov" for 0x40ef19>, <DisassemblerInsn "cmp" for 0x40ef1e>, <DisassemblerInsn "mov" for 0x40ef21>, <DisassemblerInsn "mov" for 0x40ef28>, <DisassemblerInsn "mov" for 0x40ef2f>, <DisassemblerInsn "mov" for 0x40ef31>, <DisassemblerInsn "mov" for 0x40ef38>, <DisassemblerInsn "mov" for 0x40ef3f>, <DisassemblerInsn "mov" for 0x40ef46>, <DisassemblerInsn "jle" for 0x40ef4d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f15d>, <DisassemblerInsn "mov" for 0x40f162>, <DisassemblerInsn "mov" for 0x40f16a>, <DisassemblerInsn "mov" for 0x40f16f>, <DisassemblerInsn "mov" for 0x40f173>, <DisassemblerInsn "add" for 0x40f177>, <DisassemblerInsn "mov" for 0x40f179>, <DisassemblerInsn "add" for 0x40f17d>, <DisassemblerInsn "mov" for 0x40f181>, <DisassemblerInsn "mov" for 0x40f183>, <DisassemblerInsn "movsxd" for 0x40f187>, <DisassemblerInsn "cmp" for 0x40f18a>, <DisassemblerInsn "mov" for 0x40f18d>, <DisassemblerInsn "mov" for 0x40f195>, <DisassemblerInsn "mov" for 0x40f19d>, <DisassemblerInsn "jl" for 0x40f1a4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40f2c0>, <DisassemblerInsn "mov" for 0x40f2c7>, <DisassemblerInsn "mov" for 0x40f2cf>, <DisassemblerInsn "add" for 0x40f2d2>, <DisassemblerInsn "mov" for 0x40f2d8>, <DisassemblerInsn "mov" for 0x40f2e0>, <DisassemblerInsn "mov" for 0x40f2e7>, <DisassemblerInsn "mov" for 0x40f2ef>, <DisassemblerInsn "mov" for 0x40f2f2>, <DisassemblerInsn "add" for 0x40f2f5>, <DisassemblerInsn "mov" for 0x40f2fc>, <DisassemblerInsn "mov" for 0x40f304>, <DisassemblerInsn "mov" for 0x40f30b>, <DisassemblerInsn "cmp" for 0x40f313>, <DisassemblerInsn "je" for 0x40f316>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40fd56>, <DisassemblerInsn "ret" for 0x40fd5d>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0ad>, <DisassemblerInsn "mov" for 0x40f0b2>, <DisassemblerInsn "mov" for 0x40f0b7>, <DisassemblerInsn "mov" for 0x40f0bb>, <DisassemblerInsn "mov" for 0x40f0bf>, <DisassemblerInsn "mov" for 0x40f0c4>, <DisassemblerInsn "mov" for 0x40f0c7>, <DisassemblerInsn "movzx" for 0x40f0cb>, <DisassemblerInsn "mov" for 0x40f0ce>, <DisassemblerInsn "cmp" for 0x40f0d2>, <DisassemblerInsn "jae" for 0x40f0d4>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f113>, <DisassemblerInsn "mov" for 0x40f117>, <DisassemblerInsn "mov" for 0x40f11c>, <DisassemblerInsn "mov" for 0x40f121>, <DisassemblerInsn "cmp" for 0x40f126>, <DisassemblerInsn "cmove" for 0x40f12a>, <DisassemblerInsn "add" for 0x40f12d>, <DisassemblerInsn "mov" for 0x40f12f>, <DisassemblerInsn "mov" for 0x40f133>, <DisassemblerInsn "mov" for 0x40f138>, <DisassemblerInsn "mov" for 0x40f13d>, <DisassemblerInsn "add" for 0x40f141>, <DisassemblerInsn "cmp" for 0x40f145>, <DisassemblerInsn "mov" for 0x40f148>, <DisassemblerInsn "mov" for 0x40f14d>, <DisassemblerInsn "mov" for 0x40f14f>, <DisassemblerInsn "mov" for 0x40f153>, <DisassemblerInsn "jne" for 0x40f157>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f0d6>, <DisassemblerInsn "mov" for 0x40f0da>, <DisassemblerInsn "movzx" for 0x40f0de>, <DisassemblerInsn "mov" for 0x40f0e1>, <DisassemblerInsn "add" for 0x40f0e8>, <DisassemblerInsn "mov" for 0x40f0eb>, <DisassemblerInsn "mov" for 0x40f0f2>, <DisassemblerInsn "jmp" for 0x40f0f6>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40fd29>, <DisassemblerInsn "mov" for 0x40fd2e>, <DisassemblerInsn "mov" for 0x40fd33>, <DisassemblerInsn "mov" for 0x40fd38>, <DisassemblerInsn "mov" for 0x40fd40>, <DisassemblerInsn "add" for 0x40fd43>, <DisassemblerInsn "shl" for 0x40fd46>, <DisassemblerInsn "movsxd" for 0x40fd49>, <DisassemblerInsn "add" for 0x40fd4c>, <DisassemblerInsn "mov" for 0x40fd4f>, <DisassemblerInsn "mov" for 0x40fd52>, <DisassemblerInsn "add" for 0x40fd56>, <DisassemblerInsn "ret" for 0x40fd5d>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40f093>, <DisassemblerInsn "mov" for 0x40f097>, <DisassemblerInsn "mov" for 0x40f099>, <DisassemblerInsn "xor" for 0x40f09e>, <DisassemblerInsn "mov" for 0x40f0a0>, <DisassemblerInsn "xor" for 0x40f0a2>, <DisassemblerInsn "mov" for 0x40f0a4>, <DisassemblerInsn "mov" for 0x40f0a9>, <DisassemblerInsn "mov" for 0x40f0ad>, <DisassemblerInsn "mov" for 0x40f0b2>, <DisassemblerInsn "mov" for 0x40f0b7>, <DisassemblerInsn "mov" for 0x40f0bb>, <DisassemblerInsn "mov" for 0x40f0bf>, <DisassemblerInsn "mov" for 0x40f0c4>, <DisassemblerInsn "mov" for 0x40f0c7>, <DisassemblerInsn "movzx" for 0x40f0cb>, <DisassemblerInsn "mov" for 0x40f0ce>, <DisassemblerInsn "cmp" for 0x40f0d2>, <DisassemblerInsn "jae" for 0x40f0d4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf37]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f206>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40f2c0>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40f133>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf1113]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x40f113>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf1113]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40f0ad>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0xf37]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f206>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x40f15d>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40eecd>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40f206>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40efd6>']}, {'block_Idx': 1, 'blockInsts': ['<sub~~rsp, 0x2c8>', '<mov~~qword ptr [rsp + 0x2a0], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x2030>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rcx, qword ptr [rdi + 0x2328]>', '<mov~~qword ptr [rsp + 0x2c0], rcx>', '<cmp~~rax, rcx>', '<je~~0x40fd56>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f0f8>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40f0ad>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40f133>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x80]>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rsi, qword ptr [rsp - 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~rdx, qword ptr [rdx]>', '<add~~rsi, rcx>', '<shl~~esi, 8>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rax + rcx*8], rdx>', '<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40f0f8>']}], 'cfg_edge_info': [(31, 23), (23, 28), (40, 44), (38, 44), (34, 40), (16, 7), (11, 23), (28, 33), (27, 31), (7, 10), (33, 38), (39, 38), (0, 1), (23, 27), (2, 4), (0, 4), (34, 39), (10, 17), (32, 17), (44, 34), (4, 7), (38, 27), (40, 27), (10, 16), (27, 32), (32, 16), (63, 4), (28, 34), (7, 11), (44, 33)], 'cdg_edge_info': [(7, 23), (7, 32), (23, 28), (40, 44), (38, 44), (34, 40), (28, 33), (27, 31), (7, 10), (44, 38), (27, 27), (34, 39), (28, 38), (44, 34), (7, 27), (10, 7), (27, 23), (32, 7), (34, 38), (10, 16), (32, 16), (28, 34), (7, 11), (44, 33)], 'ddg_edge_info': [(31, 11), (44, 39), (31, 17), (34, 16), (31, 23), (16, 32), (31, 32), (23, 28), (40, 44), (44, 11), (33, 11), (4, 27), (31, 44), (0, 11), (11, 23), (44, 23), (33, 23), (0, 23), (27, 31), (11, 32), (33, 44), (31, 16), (31, 28), (4, 11), (4, 17), (23, 27), (31, 34), (31, 40), (4, 23), (0, 4), (33, 16), (4, 32), (44, 16), (32, 17), (27, 33), (28, 44), (11, 31), (33, 31), (0, 31), (44, 27), (44, 31), (44, 34), (44, 40), (33, 40), (40, 27), (4, 16), (27, 11), (31, 27), (31, 33), (39, 40), (31, 39), (27, 23), (4, 31), (23, 44), (27, 32), (32, 16), (28, 40), (27, 44), (16, 11), (33, 27), (44, 33)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_13'}, {'instIndex': 78, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 79, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 80, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 93, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 94, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 95, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 96, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 97, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 98, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 99, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 100, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 101, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 102, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 103, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 104, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 109, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 111, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 112, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 113, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 177, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 178, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 179, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 180, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 181, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 182, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 183, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 184, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 185, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 187, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 232, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O3/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O3/ac3enc.s---bit_alloc---before
function id: 3
function flag: True
There are 250 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %ecx'}, {'instIndex': 29, 'instruction': 'movl\t%ecx, 0x128(%rsp)                 # 4-byte Spill'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 53, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 57, 'instruction': 'movl\t%edi, 0xb8(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%esi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 59, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 60, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 61, 'instruction': 'movl\t%edx, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 63, 'instruction': 'movl\t%eax, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 64, 'instruction': 'jle\t.LBB3_14'}, {'instIndex': 84, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 85, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 86, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 87, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 88, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 99, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 100, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 101, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 102, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 103, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 104, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 105, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 106, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 107, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 108, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 109, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 110, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 114, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 115, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 116, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 118, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 119, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 183, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 185, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 186, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 187, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 188, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 189, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 190, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 191, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 193, 'instruction': 'jl\t.LBB3_4'}, {'instIndex': 238, 'instruction': 'addl\t%esi, %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O3/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O3/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 977 nodes and 1808 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 250 instructions in binary file.
[4267053, 4267210, 4267261, 4267395, 4267526, 4267651, 4267917, 4267994, 4268086]
The execution time of patched subCFG information extraction via angr: 0:00:12.569190
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d83>, <DisassemblerInsn "mov" for 0x411d8a>, <DisassemblerInsn "mov" for 0x411d92>, <DisassemblerInsn "mov" for 0x411d9a>, <DisassemblerInsn "add" for 0x411d9d>, <DisassemblerInsn "imul" for 0x411da4>, <DisassemblerInsn "add" for 0x411da8>, <DisassemblerInsn "add" for 0x411dab>, <DisassemblerInsn "mov" for 0x411daf>, <DisassemblerInsn "mov" for 0x411db7>, <DisassemblerInsn "add" for 0x411dba>, <DisassemblerInsn "imul" for 0x411dc1>, <DisassemblerInsn "add" for 0x411dc5>, <DisassemblerInsn "add" for 0x411dc8>, <DisassemblerInsn "mov" for 0x411dcc>, <DisassemblerInsn "add" for 0x411dd4>, <DisassemblerInsn "imul" for 0x411ddb>, <DisassemblerInsn "add" for 0x411ddf>, <DisassemblerInsn "mov" for 0x411de2>, <DisassemblerInsn "mov" for 0x411dea>, <DisassemblerInsn "xor" for 0x411ded>, <DisassemblerInsn "mov" for 0x411def>, <DisassemblerInsn "mov" for 0x411df7>, <DisassemblerInsn "mov" for 0x411dff>, <DisassemblerInsn "mov" for 0x411e06>, <DisassemblerInsn "mov" for 0x411e0e>, <DisassemblerInsn "mov" for 0x411e16>, <DisassemblerInsn "mov" for 0x411e1e>, <DisassemblerInsn "mov" for 0x411e26>, <DisassemblerInsn "mov" for 0x411e2e>, <DisassemblerInsn "mov" for 0x411e36>, <DisassemblerInsn "mov" for 0x411e3e>, <DisassemblerInsn "mov" for 0x411e46>, <DisassemblerInsn "mov" for 0x411e4b>, <DisassemblerInsn "mov" for 0x411e50>, <DisassemblerInsn "mov" for 0x411e53>, <DisassemblerInsn "mov" for 0x411e57>, <DisassemblerInsn "mov" for 0x411e5a>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e65>, <DisassemblerInsn "mov" for 0x411e68>, <DisassemblerInsn "xor" for 0x411e6c>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e79>, <DisassemblerInsn "call" for 0x411e7e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412036>, <DisassemblerInsn "mov" for 0x41203e>, <DisassemblerInsn "mov" for 0x412045>, <DisassemblerInsn "mov" for 0x41204c>, <DisassemblerInsn "mov" for 0x412053>, <DisassemblerInsn "mov" for 0x41205a>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x41206a>, <DisassemblerInsn "mov" for 0x41206f>, <DisassemblerInsn "mov" for 0x412073>, <DisassemblerInsn "cdq" for 0x412079>, <DisassemblerInsn "idiv" for 0x41207a>, <DisassemblerInsn "mov" for 0x41207d>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "imul" for 0x412083>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208a>, <DisassemblerInsn "cdq" for 0x412090>, <DisassemblerInsn "idiv" for 0x412091>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x412098>, <DisassemblerInsn "mov" for 0x41209b>, <DisassemblerInsn "sar" for 0x41209f>, <DisassemblerInsn "add" for 0x4120a1>, <DisassemblerInsn "imul" for 0x4120a4>, <DisassemblerInsn "imul" for 0x4120a7>, <DisassemblerInsn "add" for 0x4120aa>, <DisassemblerInsn "add" for 0x4120ad>, <DisassemblerInsn "add" for 0x4120af>, <DisassemblerInsn "add" for 0x4120b1>, <DisassemblerInsn "cmp" for 0x4120b5>, <DisassemblerInsn "mov" for 0x4120b9>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120ca>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "jne" for 0x4120d8>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x411c00>, <DisassemblerInsn "mov" for 0x411c07>, <DisassemblerInsn "mov" for 0x411c09>, <DisassemblerInsn "lea" for 0x411c11>, <DisassemblerInsn "shl" for 0x411c19>, <DisassemblerInsn "add" for 0x411c1c>, <DisassemblerInsn "mov" for 0x411c21>, <DisassemblerInsn "call" for 0x411c28>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cca>, <DisassemblerInsn "lea" for 0x411cd1>, <DisassemblerInsn "mov" for 0x411cd9>, <DisassemblerInsn "xor" for 0x411ce1>, <DisassemblerInsn "mov" for 0x411ce3>, <DisassemblerInsn "xor" for 0x411ce5>, <DisassemblerInsn "mov" for 0x411ce7>, <DisassemblerInsn "mov" for 0x411cee>, <DisassemblerInsn "mov" for 0x411cf6>, <DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f8d>, <DisassemblerInsn "mov" for 0x411f92>, <DisassemblerInsn "mov" for 0x411f9a>, <DisassemblerInsn "mov" for 0x411f9f>, <DisassemblerInsn "mov" for 0x411fa3>, <DisassemblerInsn "add" for 0x411fa7>, <DisassemblerInsn "mov" for 0x411fa9>, <DisassemblerInsn "add" for 0x411fad>, <DisassemblerInsn "mov" for 0x411fb1>, <DisassemblerInsn "mov" for 0x411fb3>, <DisassemblerInsn "movsxd" for 0x411fb7>, <DisassemblerInsn "cmp" for 0x411fba>, <DisassemblerInsn "mov" for 0x411fbd>, <DisassemblerInsn "mov" for 0x411fc5>, <DisassemblerInsn "mov" for 0x411fcd>, <DisassemblerInsn "jl" for 0x411fd4>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ec3>, <DisassemblerInsn "mov" for 0x411ec7>, <DisassemblerInsn "mov" for 0x411ec9>, <DisassemblerInsn "xor" for 0x411ece>, <DisassemblerInsn "mov" for 0x411ed0>, <DisassemblerInsn "xor" for 0x411ed2>, <DisassemblerInsn "mov" for 0x411ed4>, <DisassemblerInsn "mov" for 0x411ed9>, <DisassemblerInsn "mov" for 0x411edd>, <DisassemblerInsn "mov" for 0x411ee2>, <DisassemblerInsn "mov" for 0x411ee7>, <DisassemblerInsn "mov" for 0x411eeb>, <DisassemblerInsn "mov" for 0x411eef>, <DisassemblerInsn "mov" for 0x411ef4>, <DisassemblerInsn "mov" for 0x411ef7>, <DisassemblerInsn "movzx" for 0x411efb>, <DisassemblerInsn "mov" for 0x411efe>, <DisassemblerInsn "cmp" for 0x411f02>, <DisassemblerInsn "jae" for 0x411f04>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f63>, <DisassemblerInsn "mov" for 0x411f68>, <DisassemblerInsn "mov" for 0x411f6d>, <DisassemblerInsn "add" for 0x411f71>, <DisassemblerInsn "cmp" for 0x411f75>, <DisassemblerInsn "mov" for 0x411f78>, <DisassemblerInsn "mov" for 0x411f7d>, <DisassemblerInsn "mov" for 0x411f7f>, <DisassemblerInsn "mov" for 0x411f83>, <DisassemblerInsn "jne" for 0x411f87>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4120de>, <DisassemblerInsn "add" for 0x4120e5>, <DisassemblerInsn "ret" for 0x4120ec>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f43>, <DisassemblerInsn "mov" for 0x411f47>, <DisassemblerInsn "mov" for 0x411f4c>, <DisassemblerInsn "mov" for 0x411f51>, <DisassemblerInsn "cmp" for 0x411f56>, <DisassemblerInsn "cmove" for 0x411f5a>, <DisassemblerInsn "add" for 0x411f5d>, <DisassemblerInsn "mov" for 0x411f5f>, <DisassemblerInsn "mov" for 0x411f63>, <DisassemblerInsn "mov" for 0x411f68>, <DisassemblerInsn "mov" for 0x411f6d>, <DisassemblerInsn "add" for 0x411f71>, <DisassemblerInsn "cmp" for 0x411f75>, <DisassemblerInsn "mov" for 0x411f78>, <DisassemblerInsn "mov" for 0x411f7d>, <DisassemblerInsn "mov" for 0x411f7f>, <DisassemblerInsn "mov" for 0x411f83>, <DisassemblerInsn "jne" for 0x411f87>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e83>, <DisassemblerInsn "mov" for 0x411e8b>, <DisassemblerInsn "mov" for 0x411e90>, <DisassemblerInsn "mov" for 0x411e98>, <DisassemblerInsn "mov" for 0x411e9b>, <DisassemblerInsn "mov" for 0x411ea0>, <DisassemblerInsn "mov" for 0x411ea4>, <DisassemblerInsn "mov" for 0x411ea9>, <DisassemblerInsn "mov" for 0x411eb0>, <DisassemblerInsn "xor" for 0x411eb4>, <DisassemblerInsn "cmp" for 0x411eb6>, <DisassemblerInsn "mov" for 0x411eb9>, <DisassemblerInsn "jle" for 0x411ebd>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fda>, <DisassemblerInsn "mov" for 0x411fde>, <DisassemblerInsn "mov" for 0x411fe2>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411ff2>, <DisassemblerInsn "mov" for 0x411ffa>, <DisassemblerInsn "mov" for 0x412002>, <DisassemblerInsn "mov" for 0x412004>, <DisassemblerInsn "mov" for 0x412006>, <DisassemblerInsn "mov" for 0x412008>, <DisassemblerInsn "mov" for 0x41200b>, <DisassemblerInsn "mov" for 0x412013>, <DisassemblerInsn "mov" for 0x41201a>, <DisassemblerInsn "mov" for 0x412021>, <DisassemblerInsn "mov" for 0x412028>, <DisassemblerInsn "mov" for 0x41202f>, <DisassemblerInsn "mov" for 0x412036>, <DisassemblerInsn "mov" for 0x41203e>, <DisassemblerInsn "mov" for 0x412045>, <DisassemblerInsn "mov" for 0x41204c>, <DisassemblerInsn "mov" for 0x412053>, <DisassemblerInsn "mov" for 0x41205a>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x41206a>, <DisassemblerInsn "mov" for 0x41206f>, <DisassemblerInsn "mov" for 0x412073>, <DisassemblerInsn "cdq" for 0x412079>, <DisassemblerInsn "idiv" for 0x41207a>, <DisassemblerInsn "mov" for 0x41207d>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "imul" for 0x412083>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208a>, <DisassemblerInsn "cdq" for 0x412090>, <DisassemblerInsn "idiv" for 0x412091>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x412098>, <DisassemblerInsn "mov" for 0x41209b>, <DisassemblerInsn "sar" for 0x41209f>, <DisassemblerInsn "add" for 0x4120a1>, <DisassemblerInsn "imul" for 0x4120a4>, <DisassemblerInsn "imul" for 0x4120a7>, <DisassemblerInsn "add" for 0x4120aa>, <DisassemblerInsn "add" for 0x4120ad>, <DisassemblerInsn "add" for 0x4120af>, <DisassemblerInsn "add" for 0x4120b1>, <DisassemblerInsn "cmp" for 0x4120b5>, <DisassemblerInsn "mov" for 0x4120b9>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120ca>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "jne" for 0x4120d8>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e06>, <DisassemblerInsn "mov" for 0x411e0e>, <DisassemblerInsn "mov" for 0x411e16>, <DisassemblerInsn "mov" for 0x411e1e>, <DisassemblerInsn "mov" for 0x411e26>, <DisassemblerInsn "mov" for 0x411e2e>, <DisassemblerInsn "mov" for 0x411e36>, <DisassemblerInsn "mov" for 0x411e3e>, <DisassemblerInsn "mov" for 0x411e46>, <DisassemblerInsn "mov" for 0x411e4b>, <DisassemblerInsn "mov" for 0x411e50>, <DisassemblerInsn "mov" for 0x411e53>, <DisassemblerInsn "mov" for 0x411e57>, <DisassemblerInsn "mov" for 0x411e5a>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e65>, <DisassemblerInsn "mov" for 0x411e68>, <DisassemblerInsn "xor" for 0x411e6c>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e79>, <DisassemblerInsn "call" for 0x411e7e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411c2d>, <DisassemblerInsn "lea" for 0x411c35>, <DisassemblerInsn "add" for 0x411c3d>, <DisassemblerInsn "mov" for 0x411c41>, <DisassemblerInsn "lea" for 0x411c49>, <DisassemblerInsn "add" for 0x411c51>, <DisassemblerInsn "mov" for 0x411c55>, <DisassemblerInsn "lea" for 0x411c5d>, <DisassemblerInsn "add" for 0x411c65>, <DisassemblerInsn "mov" for 0x411c69>, <DisassemblerInsn "lea" for 0x411c71>, <DisassemblerInsn "add" for 0x411c79>, <DisassemblerInsn "mov" for 0x411c7d>, <DisassemblerInsn "mov" for 0x411c85>, <DisassemblerInsn "add" for 0x411c88>, <DisassemblerInsn "mov" for 0x411c8e>, <DisassemblerInsn "mov" for 0x411c96>, <DisassemblerInsn "add" for 0x411c99>, <DisassemblerInsn "add" for 0x411c9f>, <DisassemblerInsn "mov" for 0x411ca3>, <DisassemblerInsn "mov" for 0x411cab>, <DisassemblerInsn "mov" for 0x411cb1>, <DisassemblerInsn "xor" for 0x411cb8>, <DisassemblerInsn "cmp" for 0x411cba>, <DisassemblerInsn "mov" for 0x411cbd>, <DisassemblerInsn "jle" for 0x411cc4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee2e3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x1077]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412036>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xec], eax>', '<call~~0x4120f0>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x128]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x1077]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412036>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x411e06>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f28>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x411edd>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x411edd>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x411f8d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xb8], r8d>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee2e3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x100], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ecx, dword ptr [rdi + 0x2238]>', '<mov~~dword ptr [rsp + 0x128], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jle~~0x4120de>']}], 'cfg_edge_info': [(3, 4), (4, 6), (5, 7), (11, 2), (1, 3), (6, 5), (4, 2), (8, 11), (0, 1), (1, 2), (6, 4), (7, 9), (3, 5), (14, 8), (8, 10), (10, 7), (11, 6), (16, 8), (7, 8)]}]}
{'bit_alloc': [4267053, 4267210, 4267261, 4267395, 4267526, 4267651, 4267917, 4267994, 4268086]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/O3/ac3enc.o---before
The extraction of function: bit_alloc
[4267053, 4267210, 4267261, 4267395, 4267526, 4267651, 4267917, 4267994, 4268086]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 55 nodes and 100 edges in CFGEmulated.
It has 54 nodes and 82 edges in CDG.
It has 3151 nodes and 4180 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4267053, 4267210, 4267261, 4267395, 4267526, 4267651, 4267917, 4267994, 4268086]
{4267008, 4267395, 4267651, 4267526, 4267782, 4267917, 4267816, 4267053, 4267824, 4268086, 4267324, 4267715, 4267843, 4267210, 4267994, 4267741, 4268254, 4267875, 4267261}
[30, 36, 47, 7, 22, 35, 42, 16, 34, 6, 26, 4, 53, 10, 2, 0, 43, 15, 1, 31, 44, 37]
The execution time of patched slicing information extraction via angr: 0:00:11.472346
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f8d>, <DisassemblerInsn "mov" for 0x411f92>, <DisassemblerInsn "mov" for 0x411f9a>, <DisassemblerInsn "mov" for 0x411f9f>, <DisassemblerInsn "mov" for 0x411fa3>, <DisassemblerInsn "add" for 0x411fa7>, <DisassemblerInsn "mov" for 0x411fa9>, <DisassemblerInsn "add" for 0x411fad>, <DisassemblerInsn "mov" for 0x411fb1>, <DisassemblerInsn "mov" for 0x411fb3>, <DisassemblerInsn "movsxd" for 0x411fb7>, <DisassemblerInsn "cmp" for 0x411fba>, <DisassemblerInsn "mov" for 0x411fbd>, <DisassemblerInsn "mov" for 0x411fc5>, <DisassemblerInsn "mov" for 0x411fcd>, <DisassemblerInsn "jl" for 0x411fd4>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f06>, <DisassemblerInsn "mov" for 0x411f0a>, <DisassemblerInsn "movzx" for 0x411f0e>, <DisassemblerInsn "mov" for 0x411f11>, <DisassemblerInsn "add" for 0x411f18>, <DisassemblerInsn "mov" for 0x411f1b>, <DisassemblerInsn "mov" for 0x411f22>, <DisassemblerInsn "jmp" for 0x411f26>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411edd>, <DisassemblerInsn "mov" for 0x411ee2>, <DisassemblerInsn "mov" for 0x411ee7>, <DisassemblerInsn "mov" for 0x411eeb>, <DisassemblerInsn "mov" for 0x411eef>, <DisassemblerInsn "mov" for 0x411ef4>, <DisassemblerInsn "mov" for 0x411ef7>, <DisassemblerInsn "movzx" for 0x411efb>, <DisassemblerInsn "mov" for 0x411efe>, <DisassemblerInsn "cmp" for 0x411f02>, <DisassemblerInsn "jae" for 0x411f04>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cca>, <DisassemblerInsn "lea" for 0x411cd1>, <DisassemblerInsn "mov" for 0x411cd9>, <DisassemblerInsn "xor" for 0x411ce1>, <DisassemblerInsn "mov" for 0x411ce3>, <DisassemblerInsn "xor" for 0x411ce5>, <DisassemblerInsn "mov" for 0x411ce7>, <DisassemblerInsn "mov" for 0x411cee>, <DisassemblerInsn "mov" for 0x411cf6>, <DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411cfd>, <DisassemblerInsn "mov" for 0x411d05>, <DisassemblerInsn "mov" for 0x411d0d>, <DisassemblerInsn "mov" for 0x411d14>, <DisassemblerInsn "mov" for 0x411d1c>, <DisassemblerInsn "mov" for 0x411d23>, <DisassemblerInsn "mov" for 0x411d2a>, <DisassemblerInsn "movaps" for 0x411d32>, <DisassemblerInsn "movaps" for 0x411d39>, <DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411fda>, <DisassemblerInsn "mov" for 0x411fde>, <DisassemblerInsn "mov" for 0x411fe2>, <DisassemblerInsn "mov" for 0x411fea>, <DisassemblerInsn "mov" for 0x411ff2>, <DisassemblerInsn "mov" for 0x411ffa>, <DisassemblerInsn "mov" for 0x412002>, <DisassemblerInsn "mov" for 0x412004>, <DisassemblerInsn "mov" for 0x412006>, <DisassemblerInsn "mov" for 0x412008>, <DisassemblerInsn "mov" for 0x41200b>, <DisassemblerInsn "mov" for 0x412013>, <DisassemblerInsn "mov" for 0x41201a>, <DisassemblerInsn "mov" for 0x412021>, <DisassemblerInsn "mov" for 0x412028>, <DisassemblerInsn "mov" for 0x41202f>, <DisassemblerInsn "mov" for 0x412036>, <DisassemblerInsn "mov" for 0x41203e>, <DisassemblerInsn "mov" for 0x412045>, <DisassemblerInsn "mov" for 0x41204c>, <DisassemblerInsn "mov" for 0x412053>, <DisassemblerInsn "mov" for 0x41205a>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x41206a>, <DisassemblerInsn "mov" for 0x41206f>, <DisassemblerInsn "mov" for 0x412073>, <DisassemblerInsn "cdq" for 0x412079>, <DisassemblerInsn "idiv" for 0x41207a>, <DisassemblerInsn "mov" for 0x41207d>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "imul" for 0x412083>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208a>, <DisassemblerInsn "cdq" for 0x412090>, <DisassemblerInsn "idiv" for 0x412091>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x412098>, <DisassemblerInsn "mov" for 0x41209b>, <DisassemblerInsn "sar" for 0x41209f>, <DisassemblerInsn "add" for 0x4120a1>, <DisassemblerInsn "imul" for 0x4120a4>, <DisassemblerInsn "imul" for 0x4120a7>, <DisassemblerInsn "add" for 0x4120aa>, <DisassemblerInsn "add" for 0x4120ad>, <DisassemblerInsn "add" for 0x4120af>, <DisassemblerInsn "add" for 0x4120b1>, <DisassemblerInsn "cmp" for 0x4120b5>, <DisassemblerInsn "mov" for 0x4120b9>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120ca>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "jne" for 0x4120d8>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f63>, <DisassemblerInsn "mov" for 0x411f68>, <DisassemblerInsn "mov" for 0x411f6d>, <DisassemblerInsn "add" for 0x411f71>, <DisassemblerInsn "cmp" for 0x411f75>, <DisassemblerInsn "mov" for 0x411f78>, <DisassemblerInsn "mov" for 0x411f7d>, <DisassemblerInsn "mov" for 0x411f7f>, <DisassemblerInsn "mov" for 0x411f83>, <DisassemblerInsn "jne" for 0x411f87>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d83>, <DisassemblerInsn "mov" for 0x411d8a>, <DisassemblerInsn "mov" for 0x411d92>, <DisassemblerInsn "mov" for 0x411d9a>, <DisassemblerInsn "add" for 0x411d9d>, <DisassemblerInsn "imul" for 0x411da4>, <DisassemblerInsn "add" for 0x411da8>, <DisassemblerInsn "add" for 0x411dab>, <DisassemblerInsn "mov" for 0x411daf>, <DisassemblerInsn "mov" for 0x411db7>, <DisassemblerInsn "add" for 0x411dba>, <DisassemblerInsn "imul" for 0x411dc1>, <DisassemblerInsn "add" for 0x411dc5>, <DisassemblerInsn "add" for 0x411dc8>, <DisassemblerInsn "mov" for 0x411dcc>, <DisassemblerInsn "add" for 0x411dd4>, <DisassemblerInsn "imul" for 0x411ddb>, <DisassemblerInsn "add" for 0x411ddf>, <DisassemblerInsn "mov" for 0x411de2>, <DisassemblerInsn "mov" for 0x411dea>, <DisassemblerInsn "xor" for 0x411ded>, <DisassemblerInsn "mov" for 0x411def>, <DisassemblerInsn "mov" for 0x411df7>, <DisassemblerInsn "mov" for 0x411dff>, <DisassemblerInsn "mov" for 0x411e06>, <DisassemblerInsn "mov" for 0x411e0e>, <DisassemblerInsn "mov" for 0x411e16>, <DisassemblerInsn "mov" for 0x411e1e>, <DisassemblerInsn "mov" for 0x411e26>, <DisassemblerInsn "mov" for 0x411e2e>, <DisassemblerInsn "mov" for 0x411e36>, <DisassemblerInsn "mov" for 0x411e3e>, <DisassemblerInsn "mov" for 0x411e46>, <DisassemblerInsn "mov" for 0x411e4b>, <DisassemblerInsn "mov" for 0x411e50>, <DisassemblerInsn "mov" for 0x411e53>, <DisassemblerInsn "mov" for 0x411e57>, <DisassemblerInsn "mov" for 0x411e5a>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e65>, <DisassemblerInsn "mov" for 0x411e68>, <DisassemblerInsn "xor" for 0x411e6c>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e79>, <DisassemblerInsn "call" for 0x411e7e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e06>, <DisassemblerInsn "mov" for 0x411e0e>, <DisassemblerInsn "mov" for 0x411e16>, <DisassemblerInsn "mov" for 0x411e1e>, <DisassemblerInsn "mov" for 0x411e26>, <DisassemblerInsn "mov" for 0x411e2e>, <DisassemblerInsn "mov" for 0x411e36>, <DisassemblerInsn "mov" for 0x411e3e>, <DisassemblerInsn "mov" for 0x411e46>, <DisassemblerInsn "mov" for 0x411e4b>, <DisassemblerInsn "mov" for 0x411e50>, <DisassemblerInsn "mov" for 0x411e53>, <DisassemblerInsn "mov" for 0x411e57>, <DisassemblerInsn "mov" for 0x411e5a>, <DisassemblerInsn "mov" for 0x411e5e>, <DisassemblerInsn "mov" for 0x411e65>, <DisassemblerInsn "mov" for 0x411e68>, <DisassemblerInsn "xor" for 0x411e6c>, <DisassemblerInsn "mov" for 0x411e6e>, <DisassemblerInsn "mov" for 0x411e75>, <DisassemblerInsn "mov" for 0x411e79>, <DisassemblerInsn "call" for 0x411e7e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4120de>, <DisassemblerInsn "add" for 0x4120e5>, <DisassemblerInsn "ret" for 0x4120ec>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411e83>, <DisassemblerInsn "mov" for 0x411e8b>, <DisassemblerInsn "mov" for 0x411e90>, <DisassemblerInsn "mov" for 0x411e98>, <DisassemblerInsn "mov" for 0x411e9b>, <DisassemblerInsn "mov" for 0x411ea0>, <DisassemblerInsn "mov" for 0x411ea4>, <DisassemblerInsn "mov" for 0x411ea9>, <DisassemblerInsn "mov" for 0x411eb0>, <DisassemblerInsn "xor" for 0x411eb4>, <DisassemblerInsn "cmp" for 0x411eb6>, <DisassemblerInsn "mov" for 0x411eb9>, <DisassemblerInsn "jle" for 0x411ebd>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411c2d>, <DisassemblerInsn "lea" for 0x411c35>, <DisassemblerInsn "add" for 0x411c3d>, <DisassemblerInsn "mov" for 0x411c41>, <DisassemblerInsn "lea" for 0x411c49>, <DisassemblerInsn "add" for 0x411c51>, <DisassemblerInsn "mov" for 0x411c55>, <DisassemblerInsn "lea" for 0x411c5d>, <DisassemblerInsn "add" for 0x411c65>, <DisassemblerInsn "mov" for 0x411c69>, <DisassemblerInsn "lea" for 0x411c71>, <DisassemblerInsn "add" for 0x411c79>, <DisassemblerInsn "mov" for 0x411c7d>, <DisassemblerInsn "mov" for 0x411c85>, <DisassemblerInsn "add" for 0x411c88>, <DisassemblerInsn "mov" for 0x411c8e>, <DisassemblerInsn "mov" for 0x411c96>, <DisassemblerInsn "add" for 0x411c99>, <DisassemblerInsn "add" for 0x411c9f>, <DisassemblerInsn "mov" for 0x411ca3>, <DisassemblerInsn "mov" for 0x411cab>, <DisassemblerInsn "mov" for 0x411cb1>, <DisassemblerInsn "xor" for 0x411cb8>, <DisassemblerInsn "cmp" for 0x411cba>, <DisassemblerInsn "mov" for 0x411cbd>, <DisassemblerInsn "jle" for 0x411cc4>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412afc>, <DisassemblerInsn "mov" for 0x412b01>, <DisassemblerInsn "mov" for 0x412b06>, <DisassemblerInsn "mov" for 0x412b0b>, <DisassemblerInsn "mov" for 0x412b13>, <DisassemblerInsn "add" for 0x412b16>, <DisassemblerInsn "shl" for 0x412b19>, <DisassemblerInsn "movsxd" for 0x412b1c>, <DisassemblerInsn "add" for 0x412b1f>, <DisassemblerInsn "mov" for 0x412b22>, <DisassemblerInsn "mov" for 0x412b25>, <DisassemblerInsn "add" for 0x412b29>, <DisassemblerInsn "ret" for 0x412b30>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411d3c>, <DisassemblerInsn "xor" for 0x411d42>, <DisassemblerInsn "mov" for 0x411d44>, <DisassemblerInsn "mov" for 0x411d49>, <DisassemblerInsn "cmp" for 0x411d4e>, <DisassemblerInsn "mov" for 0x411d51>, <DisassemblerInsn "mov" for 0x411d58>, <DisassemblerInsn "mov" for 0x411d5f>, <DisassemblerInsn "mov" for 0x411d61>, <DisassemblerInsn "mov" for 0x411d68>, <DisassemblerInsn "mov" for 0x411d6f>, <DisassemblerInsn "mov" for 0x411d76>, <DisassemblerInsn "jle" for 0x411d7d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x412b29>, <DisassemblerInsn "ret" for 0x412b30>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x411c00>, <DisassemblerInsn "mov" for 0x411c07>, <DisassemblerInsn "mov" for 0x411c09>, <DisassemblerInsn "lea" for 0x411c11>, <DisassemblerInsn "shl" for 0x411c19>, <DisassemblerInsn "add" for 0x411c1c>, <DisassemblerInsn "mov" for 0x411c21>, <DisassemblerInsn "call" for 0x411c28>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f30>, <DisassemblerInsn "mov" for 0x411f34>, <DisassemblerInsn "add" for 0x411f38>, <DisassemblerInsn "add" for 0x411f3b>, <DisassemblerInsn "mov" for 0x411f3d>, <DisassemblerInsn "jmp" for 0x411f41>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412036>, <DisassemblerInsn "mov" for 0x41203e>, <DisassemblerInsn "mov" for 0x412045>, <DisassemblerInsn "mov" for 0x41204c>, <DisassemblerInsn "mov" for 0x412053>, <DisassemblerInsn "mov" for 0x41205a>, <DisassemblerInsn "mov" for 0x412062>, <DisassemblerInsn "mov" for 0x41206a>, <DisassemblerInsn "mov" for 0x41206f>, <DisassemblerInsn "mov" for 0x412073>, <DisassemblerInsn "cdq" for 0x412079>, <DisassemblerInsn "idiv" for 0x41207a>, <DisassemblerInsn "mov" for 0x41207d>, <DisassemblerInsn "mov" for 0x41207f>, <DisassemblerInsn "imul" for 0x412083>, <DisassemblerInsn "mov" for 0x412086>, <DisassemblerInsn "mov" for 0x41208a>, <DisassemblerInsn "cdq" for 0x412090>, <DisassemblerInsn "idiv" for 0x412091>, <DisassemblerInsn "mov" for 0x412094>, <DisassemblerInsn "mov" for 0x412098>, <DisassemblerInsn "mov" for 0x41209b>, <DisassemblerInsn "sar" for 0x41209f>, <DisassemblerInsn "add" for 0x4120a1>, <DisassemblerInsn "imul" for 0x4120a4>, <DisassemblerInsn "imul" for 0x4120a7>, <DisassemblerInsn "add" for 0x4120aa>, <DisassemblerInsn "add" for 0x4120ad>, <DisassemblerInsn "add" for 0x4120af>, <DisassemblerInsn "add" for 0x4120b1>, <DisassemblerInsn "cmp" for 0x4120b5>, <DisassemblerInsn "mov" for 0x4120b9>, <DisassemblerInsn "mov" for 0x4120c0>, <DisassemblerInsn "mov" for 0x4120c8>, <DisassemblerInsn "mov" for 0x4120ca>, <DisassemblerInsn "mov" for 0x4120d1>, <DisassemblerInsn "jne" for 0x4120d8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4120f0>, <DisassemblerInsn "mov" for 0x4120f7>, <DisassemblerInsn "mov" for 0x4120ff>, <DisassemblerInsn "add" for 0x412102>, <DisassemblerInsn "mov" for 0x412108>, <DisassemblerInsn "mov" for 0x412110>, <DisassemblerInsn "mov" for 0x412117>, <DisassemblerInsn "mov" for 0x41211f>, <DisassemblerInsn "mov" for 0x412122>, <DisassemblerInsn "add" for 0x412125>, <DisassemblerInsn "mov" for 0x41212c>, <DisassemblerInsn "mov" for 0x412134>, <DisassemblerInsn "mov" for 0x41213b>, <DisassemblerInsn "cmp" for 0x412143>, <DisassemblerInsn "je" for 0x412146>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411ec3>, <DisassemblerInsn "mov" for 0x411ec7>, <DisassemblerInsn "mov" for 0x411ec9>, <DisassemblerInsn "xor" for 0x411ece>, <DisassemblerInsn "mov" for 0x411ed0>, <DisassemblerInsn "xor" for 0x411ed2>, <DisassemblerInsn "mov" for 0x411ed4>, <DisassemblerInsn "mov" for 0x411ed9>, <DisassemblerInsn "mov" for 0x411edd>, <DisassemblerInsn "mov" for 0x411ee2>, <DisassemblerInsn "mov" for 0x411ee7>, <DisassemblerInsn "mov" for 0x411eeb>, <DisassemblerInsn "mov" for 0x411eef>, <DisassemblerInsn "mov" for 0x411ef4>, <DisassemblerInsn "mov" for 0x411ef7>, <DisassemblerInsn "movzx" for 0x411efb>, <DisassemblerInsn "mov" for 0x411efe>, <DisassemblerInsn "cmp" for 0x411f02>, <DisassemblerInsn "jae" for 0x411f04>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f43>, <DisassemblerInsn "mov" for 0x411f47>, <DisassemblerInsn "mov" for 0x411f4c>, <DisassemblerInsn "mov" for 0x411f51>, <DisassemblerInsn "cmp" for 0x411f56>, <DisassemblerInsn "cmove" for 0x411f5a>, <DisassemblerInsn "add" for 0x411f5d>, <DisassemblerInsn "mov" for 0x411f5f>, <DisassemblerInsn "mov" for 0x411f63>, <DisassemblerInsn "mov" for 0x411f68>, <DisassemblerInsn "mov" for 0x411f6d>, <DisassemblerInsn "add" for 0x411f71>, <DisassemblerInsn "cmp" for 0x411f75>, <DisassemblerInsn "mov" for 0x411f78>, <DisassemblerInsn "mov" for 0x411f7d>, <DisassemblerInsn "mov" for 0x411f7f>, <DisassemblerInsn "mov" for 0x411f83>, <DisassemblerInsn "jne" for 0x411f87>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411f28>, <DisassemblerInsn "cmp" for 0x411f2c>, <DisassemblerInsn "jae" for 0x411f2e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x411e06>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x411f63>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f28>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x128]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x1077]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412036>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x1077]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412036>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xb8], r8d>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x411edd>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee2e3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xec]>', '<mov~~r9, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xee2e3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x411f8d>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x100], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x108], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ecx, dword ptr [rdi + 0x2238]>', '<mov~~dword ptr [rsp + 0x128], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jle~~0x4120de>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x80]>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rsi, qword ptr [rsp - 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x2b8]>', '<mov~~rdx, qword ptr [rdx]>', '<add~~rsi, rcx>', '<shl~~esi, 8>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rax + rcx*8], rdx>', '<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xb8], edi>', '<mov~~dword ptr [rsp + 0xbc], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jle~~0x412036>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x2c8>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xec], eax>', '<call~~0x4120f0>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x411f63>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~r9d, dword ptr [rsp + 0xc8]>', '<mov~~r8d, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0xdc], edx>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xe8], ecx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x411cfd>']}, {'block_Idx': 1, 'blockInsts': ['<sub~~rsp, 0x2c8>', '<mov~~qword ptr [rsp + 0x2a0], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x2030>', '<mov~~qword ptr [rsp + 0x2a8], rax>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rcx, qword ptr [rdi + 0x2328]>', '<mov~~qword ptr [rsp + 0x2c0], rcx>', '<cmp~~rax, rcx>', '<je~~0x412b29>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x411f28>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x411edd>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x411f43>']}], 'cfg_edge_info': [(16, 26), (26, 30), (4, 6), (47, 37), (10, 15), (53, 4), (7, 10), (42, 47), (43, 42), (44, 47), (22, 10), (31, 37), (0, 1), (2, 4), (0, 4), (47, 36), (36, 42), (30, 35), (37, 44), (35, 22), (15, 22), (4, 7), (26, 31), (34, 26), (31, 36), (35, 6), (10, 16), (15, 6), (42, 30), (37, 43), (44, 30), (30, 34)], 'cdg_edge_info': [(47, 37), (37, 42), (30, 30), (10, 15), (10, 30), (42, 47), (44, 47), (31, 37), (30, 26), (47, 42), (47, 36), (35, 10), (15, 10), (10, 26), (37, 44), (35, 22), (10, 35), (15, 22), (4, 7), (26, 31), (4, 10), (31, 36), (31, 42), (10, 16), (37, 43), (30, 34)], 'ddg_edge_info': [(16, 26), (26, 30), (16, 35), (34, 16), (4, 6), (47, 16), (36, 16), (34, 22), (34, 31), (22, 35), (34, 37), (31, 44), (47, 22), (31, 47), (4, 30), (47, 37), (36, 22), (36, 34), (34, 43), (47, 34), (0, 26), (47, 43), (30, 36), (34, 6), (7, 22), (44, 47), (22, 16), (16, 34), (26, 47), (34, 30), (36, 44), (4, 26), (36, 30), (0, 4), (47, 30), (0, 16), (34, 36), (4, 35), (30, 26), (47, 36), (44, 30), (30, 35), (35, 22), (0, 34), (30, 47), (43, 44), (4, 7), (26, 31), (4, 16), (34, 26), (4, 22), (37, 22), (30, 16), (47, 26), (35, 6), (36, 26), (34, 35), (34, 44), (4, 34), (34, 47), (47, 44), (36, 47), (30, 34)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %ecx'}, {'instIndex': 29, 'instruction': 'movl\t%ecx, 0x128(%rsp)                 # 4-byte Spill'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 53, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 57, 'instruction': 'movl\t%edi, 0xb8(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%esi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 59, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 60, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 61, 'instruction': 'movl\t%edx, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 63, 'instruction': 'movl\t%eax, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 64, 'instruction': 'jle\t.LBB3_14'}, {'instIndex': 84, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 85, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 86, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 87, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 88, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 99, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 100, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 101, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 102, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 103, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 104, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 105, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 106, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 107, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 108, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 109, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 110, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 114, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 115, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 116, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 118, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 119, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 183, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 185, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 186, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 187, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 188, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 189, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 190, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 191, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 193, 'instruction': 'jl\t.LBB3_4'}, {'instIndex': 238, 'instruction': 'addl\t%esi, %eax'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: ac3enc.c
Patched function: 1---static int bit_alloc 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/Os/ac3enc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/Os/ac3enc.s---bit_alloc---before
function id: 3
function flag: True
There are 243 instructions for function: bit_alloc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1028', 'end': 1045}, 'before': {'start': '1028', 'end': 1037}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_13'}, {'instIndex': 78, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 79, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 80, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 93, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 94, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 95, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 96, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 97, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 98, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 99, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 100, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 101, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 102, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 103, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 104, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 109, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 111, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 112, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 113, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 177, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 178, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 179, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 180, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 181, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 182, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 183, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 184, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 185, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 187, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 232, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/Os/ac3enc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/Os/ac3enc.o---before
The extraction of function: bit_alloc
Analyzing the binaries to generate subCFGs from patched function ...
It has 679 nodes and 1233 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 243 instructions in binary file.
[4239469, 4239645, 4239779, 4239910, 4240035, 4240301, 4240378, 4240470]
The execution time of patched subCFG information extraction via angr: 0:00:08.309020
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b1a3>, <DisassemblerInsn "mov" for 0x40b1aa>, <DisassemblerInsn "mov" for 0x40b1b2>, <DisassemblerInsn "mov" for 0x40b1ba>, <DisassemblerInsn "add" for 0x40b1bd>, <DisassemblerInsn "imul" for 0x40b1c4>, <DisassemblerInsn "add" for 0x40b1c8>, <DisassemblerInsn "add" for 0x40b1cb>, <DisassemblerInsn "mov" for 0x40b1cf>, <DisassemblerInsn "mov" for 0x40b1d7>, <DisassemblerInsn "add" for 0x40b1da>, <DisassemblerInsn "imul" for 0x40b1e1>, <DisassemblerInsn "add" for 0x40b1e5>, <DisassemblerInsn "add" for 0x40b1e8>, <DisassemblerInsn "mov" for 0x40b1ec>, <DisassemblerInsn "add" for 0x40b1f4>, <DisassemblerInsn "imul" for 0x40b1fb>, <DisassemblerInsn "add" for 0x40b1ff>, <DisassemblerInsn "mov" for 0x40b202>, <DisassemblerInsn "mov" for 0x40b20a>, <DisassemblerInsn "xor" for 0x40b20d>, <DisassemblerInsn "mov" for 0x40b20f>, <DisassemblerInsn "mov" for 0x40b217>, <DisassemblerInsn "mov" for 0x40b21f>, <DisassemblerInsn "mov" for 0x40b226>, <DisassemblerInsn "mov" for 0x40b22e>, <DisassemblerInsn "mov" for 0x40b236>, <DisassemblerInsn "mov" for 0x40b23e>, <DisassemblerInsn "mov" for 0x40b246>, <DisassemblerInsn "mov" for 0x40b24e>, <DisassemblerInsn "mov" for 0x40b256>, <DisassemblerInsn "mov" for 0x40b25e>, <DisassemblerInsn "mov" for 0x40b266>, <DisassemblerInsn "mov" for 0x40b26b>, <DisassemblerInsn "mov" for 0x40b270>, <DisassemblerInsn "mov" for 0x40b273>, <DisassemblerInsn "mov" for 0x40b277>, <DisassemblerInsn "mov" for 0x40b27a>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b285>, <DisassemblerInsn "mov" for 0x40b288>, <DisassemblerInsn "xor" for 0x40b28c>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b299>, <DisassemblerInsn "call" for 0x40b29e>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b383>, <DisassemblerInsn "mov" for 0x40b388>, <DisassemblerInsn "mov" for 0x40b38d>, <DisassemblerInsn "add" for 0x40b391>, <DisassemblerInsn "cmp" for 0x40b395>, <DisassemblerInsn "mov" for 0x40b398>, <DisassemblerInsn "mov" for 0x40b39d>, <DisassemblerInsn "mov" for 0x40b39f>, <DisassemblerInsn "mov" for 0x40b3a3>, <DisassemblerInsn "jne" for 0x40b3a7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b4f9>, <DisassemblerInsn "add" for 0x40b4fd>, <DisassemblerInsn "ret" for 0x40b504>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b456>, <DisassemblerInsn "mov" for 0x40b45e>, <DisassemblerInsn "mov" for 0x40b465>, <DisassemblerInsn "mov" for 0x40b46c>, <DisassemblerInsn "mov" for 0x40b473>, <DisassemblerInsn "mov" for 0x40b47a>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b48a>, <DisassemblerInsn "mov" for 0x40b48f>, <DisassemblerInsn "mov" for 0x40b493>, <DisassemblerInsn "cdq" for 0x40b499>, <DisassemblerInsn "idiv" for 0x40b49a>, <DisassemblerInsn "mov" for 0x40b49d>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "imul" for 0x40b4a3>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4aa>, <DisassemblerInsn "cdq" for 0x40b4b0>, <DisassemblerInsn "idiv" for 0x40b4b1>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4b8>, <DisassemblerInsn "mov" for 0x40b4bb>, <DisassemblerInsn "sar" for 0x40b4bf>, <DisassemblerInsn "add" for 0x40b4c1>, <DisassemblerInsn "imul" for 0x40b4c4>, <DisassemblerInsn "imul" for 0x40b4c7>, <DisassemblerInsn "add" for 0x40b4ca>, <DisassemblerInsn "add" for 0x40b4cd>, <DisassemblerInsn "add" for 0x40b4cf>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "add" for 0x40b4d5>, <DisassemblerInsn "cmp" for 0x40b4d9>, <DisassemblerInsn "mov" for 0x40b4dd>, <DisassemblerInsn "mov" for 0x40b4e4>, <DisassemblerInsn "mov" for 0x40b4ec>, <DisassemblerInsn "jne" for 0x40b4f3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b226>, <DisassemblerInsn "mov" for 0x40b22e>, <DisassemblerInsn "mov" for 0x40b236>, <DisassemblerInsn "mov" for 0x40b23e>, <DisassemblerInsn "mov" for 0x40b246>, <DisassemblerInsn "mov" for 0x40b24e>, <DisassemblerInsn "mov" for 0x40b256>, <DisassemblerInsn "mov" for 0x40b25e>, <DisassemblerInsn "mov" for 0x40b266>, <DisassemblerInsn "mov" for 0x40b26b>, <DisassemblerInsn "mov" for 0x40b270>, <DisassemblerInsn "mov" for 0x40b273>, <DisassemblerInsn "mov" for 0x40b277>, <DisassemblerInsn "mov" for 0x40b27a>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b285>, <DisassemblerInsn "mov" for 0x40b288>, <DisassemblerInsn "xor" for 0x40b28c>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b299>, <DisassemblerInsn "call" for 0x40b29e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2a3>, <DisassemblerInsn "mov" for 0x40b2ab>, <DisassemblerInsn "mov" for 0x40b2b0>, <DisassemblerInsn "mov" for 0x40b2b8>, <DisassemblerInsn "mov" for 0x40b2bb>, <DisassemblerInsn "mov" for 0x40b2c0>, <DisassemblerInsn "mov" for 0x40b2c4>, <DisassemblerInsn "mov" for 0x40b2c9>, <DisassemblerInsn "mov" for 0x40b2d0>, <DisassemblerInsn "xor" for 0x40b2d4>, <DisassemblerInsn "cmp" for 0x40b2d6>, <DisassemblerInsn "mov" for 0x40b2d9>, <DisassemblerInsn "jle" for 0x40b2dd>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ad>, <DisassemblerInsn "mov" for 0x40b3b2>, <DisassemblerInsn "mov" for 0x40b3ba>, <DisassemblerInsn "mov" for 0x40b3bf>, <DisassemblerInsn "mov" for 0x40b3c3>, <DisassemblerInsn "add" for 0x40b3c7>, <DisassemblerInsn "mov" for 0x40b3c9>, <DisassemblerInsn "add" for 0x40b3cd>, <DisassemblerInsn "mov" for 0x40b3d1>, <DisassemblerInsn "mov" for 0x40b3d3>, <DisassemblerInsn "movsxd" for 0x40b3d7>, <DisassemblerInsn "cmp" for 0x40b3da>, <DisassemblerInsn "mov" for 0x40b3dd>, <DisassemblerInsn "mov" for 0x40b3e5>, <DisassemblerInsn "mov" for 0x40b3ed>, <DisassemblerInsn "jl" for 0x40b3f4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b363>, <DisassemblerInsn "mov" for 0x40b367>, <DisassemblerInsn "mov" for 0x40b36c>, <DisassemblerInsn "mov" for 0x40b371>, <DisassemblerInsn "cmp" for 0x40b376>, <DisassemblerInsn "cmove" for 0x40b37a>, <DisassemblerInsn "add" for 0x40b37d>, <DisassemblerInsn "mov" for 0x40b37f>, <DisassemblerInsn "mov" for 0x40b383>, <DisassemblerInsn "mov" for 0x40b388>, <DisassemblerInsn "mov" for 0x40b38d>, <DisassemblerInsn "add" for 0x40b391>, <DisassemblerInsn "cmp" for 0x40b395>, <DisassemblerInsn "mov" for 0x40b398>, <DisassemblerInsn "mov" for 0x40b39d>, <DisassemblerInsn "mov" for 0x40b39f>, <DisassemblerInsn "mov" for 0x40b3a3>, <DisassemblerInsn "jne" for 0x40b3a7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b040>, <DisassemblerInsn "mov" for 0x40b047>, <DisassemblerInsn "mov" for 0x40b049>, <DisassemblerInsn "lea" for 0x40b051>, <DisassemblerInsn "shl" for 0x40b059>, <DisassemblerInsn "add" for 0x40b05c>, <DisassemblerInsn "mov" for 0x40b061>, <DisassemblerInsn "call" for 0x40b068>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2e3>, <DisassemblerInsn "mov" for 0x40b2e7>, <DisassemblerInsn "mov" for 0x40b2e9>, <DisassemblerInsn "xor" for 0x40b2ee>, <DisassemblerInsn "mov" for 0x40b2f0>, <DisassemblerInsn "xor" for 0x40b2f2>, <DisassemblerInsn "mov" for 0x40b2f4>, <DisassemblerInsn "mov" for 0x40b2f9>, <DisassemblerInsn "mov" for 0x40b2fd>, <DisassemblerInsn "mov" for 0x40b302>, <DisassemblerInsn "mov" for 0x40b307>, <DisassemblerInsn "mov" for 0x40b30b>, <DisassemblerInsn "mov" for 0x40b30f>, <DisassemblerInsn "mov" for 0x40b314>, <DisassemblerInsn "mov" for 0x40b317>, <DisassemblerInsn "movzx" for 0x40b31b>, <DisassemblerInsn "mov" for 0x40b31e>, <DisassemblerInsn "cmp" for 0x40b322>, <DisassemblerInsn "jae" for 0x40b324>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3fa>, <DisassemblerInsn "mov" for 0x40b3fe>, <DisassemblerInsn "mov" for 0x40b402>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b412>, <DisassemblerInsn "mov" for 0x40b41a>, <DisassemblerInsn "mov" for 0x40b422>, <DisassemblerInsn "mov" for 0x40b424>, <DisassemblerInsn "mov" for 0x40b426>, <DisassemblerInsn "mov" for 0x40b428>, <DisassemblerInsn "mov" for 0x40b42b>, <DisassemblerInsn "mov" for 0x40b433>, <DisassemblerInsn "mov" for 0x40b43a>, <DisassemblerInsn "mov" for 0x40b441>, <DisassemblerInsn "mov" for 0x40b448>, <DisassemblerInsn "mov" for 0x40b44f>, <DisassemblerInsn "mov" for 0x40b456>, <DisassemblerInsn "mov" for 0x40b45e>, <DisassemblerInsn "mov" for 0x40b465>, <DisassemblerInsn "mov" for 0x40b46c>, <DisassemblerInsn "mov" for 0x40b473>, <DisassemblerInsn "mov" for 0x40b47a>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b48a>, <DisassemblerInsn "mov" for 0x40b48f>, <DisassemblerInsn "mov" for 0x40b493>, <DisassemblerInsn "cdq" for 0x40b499>, <DisassemblerInsn "idiv" for 0x40b49a>, <DisassemblerInsn "mov" for 0x40b49d>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "imul" for 0x40b4a3>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4aa>, <DisassemblerInsn "cdq" for 0x40b4b0>, <DisassemblerInsn "idiv" for 0x40b4b1>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4b8>, <DisassemblerInsn "mov" for 0x40b4bb>, <DisassemblerInsn "sar" for 0x40b4bf>, <DisassemblerInsn "add" for 0x40b4c1>, <DisassemblerInsn "imul" for 0x40b4c4>, <DisassemblerInsn "imul" for 0x40b4c7>, <DisassemblerInsn "add" for 0x40b4ca>, <DisassemblerInsn "add" for 0x40b4cd>, <DisassemblerInsn "add" for 0x40b4cf>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "add" for 0x40b4d5>, <DisassemblerInsn "cmp" for 0x40b4d9>, <DisassemblerInsn "mov" for 0x40b4dd>, <DisassemblerInsn "mov" for 0x40b4e4>, <DisassemblerInsn "mov" for 0x40b4ec>, <DisassemblerInsn "jne" for 0x40b4f3>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b06d>, <DisassemblerInsn "lea" for 0x40b075>, <DisassemblerInsn "add" for 0x40b07d>, <DisassemblerInsn "mov" for 0x40b081>, <DisassemblerInsn "lea" for 0x40b089>, <DisassemblerInsn "add" for 0x40b091>, <DisassemblerInsn "mov" for 0x40b095>, <DisassemblerInsn "lea" for 0x40b09d>, <DisassemblerInsn "add" for 0x40b0a5>, <DisassemblerInsn "mov" for 0x40b0a9>, <DisassemblerInsn "lea" for 0x40b0b1>, <DisassemblerInsn "add" for 0x40b0b9>, <DisassemblerInsn "mov" for 0x40b0bd>, <DisassemblerInsn "mov" for 0x40b0c5>, <DisassemblerInsn "add" for 0x40b0c8>, <DisassemblerInsn "mov" for 0x40b0ce>, <DisassemblerInsn "mov" for 0x40b0d6>, <DisassemblerInsn "add" for 0x40b0d9>, <DisassemblerInsn "add" for 0x40b0df>, <DisassemblerInsn "mov" for 0x40b0e3>, <DisassemblerInsn "mov" for 0x40b0eb>, <DisassemblerInsn "lea" for 0x40b0f1>, <DisassemblerInsn "mov" for 0x40b0f9>, <DisassemblerInsn "xor" for 0x40b101>, <DisassemblerInsn "mov" for 0x40b103>, <DisassemblerInsn "xor" for 0x40b105>, <DisassemblerInsn "mov" for 0x40b107>, <DisassemblerInsn "mov" for 0x40b10e>, <DisassemblerInsn "mov" for 0x40b116>, <DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4ec3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40b2fd>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4ec3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x40b3ad>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40b226>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40b2fd>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40b505>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b348>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x4f7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b456>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x4f7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b456>']}], 'cfg_edge_info': [(0, 1), (10, 5), (1, 2), (2, 4), (13, 7), (7, 10), (9, 6), (6, 8), (15, 7), (10, 4), (7, 9), (6, 7), (3, 6), (5, 3), (2, 5), (1, 3), (5, 2)]}]}
{'bit_alloc': [4239469, 4239645, 4239779, 4239910, 4240035, 4240301, 4240378, 4240470]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/795063db3b9f62e9ebf47d0ee99932bf4aea6800/clang_before/Os/ac3enc.o---before
The extraction of function: bit_alloc
[4239469, 4239645, 4239779, 4239910, 4240035, 4240301, 4240378, 4240470]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 46 edges in CFGEmulated.
It has 24 nodes and 36 edges in CDG.
It has 1342 nodes and 1753 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4239469, 4239645, 4239779, 4239910, 4240035, 4240301, 4240378, 4240470]
{4239424, 4239779, 4240035, 4240099, 4239910, 4240166, 4240200, 4240259, 4240125, 4240227, 4239469, 4240301, 4240208, 4240470, 4240633, 4240378, 4239708, 4239645}
[7, 17, 10, 25, 0, 18, 21, 19, 16, 4, 27, 13, 20, 2, 26, 11, 24, 22, 1, 14]
The execution time of patched slicing information extraction via angr: 0:00:04.199726
{'bit_alloc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3ad>, <DisassemblerInsn "mov" for 0x40b3b2>, <DisassemblerInsn "mov" for 0x40b3ba>, <DisassemblerInsn "mov" for 0x40b3bf>, <DisassemblerInsn "mov" for 0x40b3c3>, <DisassemblerInsn "add" for 0x40b3c7>, <DisassemblerInsn "mov" for 0x40b3c9>, <DisassemblerInsn "add" for 0x40b3cd>, <DisassemblerInsn "mov" for 0x40b3d1>, <DisassemblerInsn "mov" for 0x40b3d3>, <DisassemblerInsn "movsxd" for 0x40b3d7>, <DisassemblerInsn "cmp" for 0x40b3da>, <DisassemblerInsn "mov" for 0x40b3dd>, <DisassemblerInsn "mov" for 0x40b3e5>, <DisassemblerInsn "mov" for 0x40b3ed>, <DisassemblerInsn "jl" for 0x40b3f4>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b456>, <DisassemblerInsn "mov" for 0x40b45e>, <DisassemblerInsn "mov" for 0x40b465>, <DisassemblerInsn "mov" for 0x40b46c>, <DisassemblerInsn "mov" for 0x40b473>, <DisassemblerInsn "mov" for 0x40b47a>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b48a>, <DisassemblerInsn "mov" for 0x40b48f>, <DisassemblerInsn "mov" for 0x40b493>, <DisassemblerInsn "cdq" for 0x40b499>, <DisassemblerInsn "idiv" for 0x40b49a>, <DisassemblerInsn "mov" for 0x40b49d>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "imul" for 0x40b4a3>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4aa>, <DisassemblerInsn "cdq" for 0x40b4b0>, <DisassemblerInsn "idiv" for 0x40b4b1>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4b8>, <DisassemblerInsn "mov" for 0x40b4bb>, <DisassemblerInsn "sar" for 0x40b4bf>, <DisassemblerInsn "add" for 0x40b4c1>, <DisassemblerInsn "imul" for 0x40b4c4>, <DisassemblerInsn "imul" for 0x40b4c7>, <DisassemblerInsn "add" for 0x40b4ca>, <DisassemblerInsn "add" for 0x40b4cd>, <DisassemblerInsn "add" for 0x40b4cf>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "add" for 0x40b4d5>, <DisassemblerInsn "cmp" for 0x40b4d9>, <DisassemblerInsn "mov" for 0x40b4dd>, <DisassemblerInsn "mov" for 0x40b4e4>, <DisassemblerInsn "mov" for 0x40b4ec>, <DisassemblerInsn "jne" for 0x40b4f3>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b350>, <DisassemblerInsn "mov" for 0x40b354>, <DisassemblerInsn "add" for 0x40b358>, <DisassemblerInsn "add" for 0x40b35b>, <DisassemblerInsn "mov" for 0x40b35d>, <DisassemblerInsn "jmp" for 0x40b361>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b040>, <DisassemblerInsn "mov" for 0x40b047>, <DisassemblerInsn "mov" for 0x40b049>, <DisassemblerInsn "lea" for 0x40b051>, <DisassemblerInsn "shl" for 0x40b059>, <DisassemblerInsn "add" for 0x40b05c>, <DisassemblerInsn "mov" for 0x40b061>, <DisassemblerInsn "call" for 0x40b068>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2e3>, <DisassemblerInsn "mov" for 0x40b2e7>, <DisassemblerInsn "mov" for 0x40b2e9>, <DisassemblerInsn "xor" for 0x40b2ee>, <DisassemblerInsn "mov" for 0x40b2f0>, <DisassemblerInsn "xor" for 0x40b2f2>, <DisassemblerInsn "mov" for 0x40b2f4>, <DisassemblerInsn "mov" for 0x40b2f9>, <DisassemblerInsn "mov" for 0x40b2fd>, <DisassemblerInsn "mov" for 0x40b302>, <DisassemblerInsn "mov" for 0x40b307>, <DisassemblerInsn "mov" for 0x40b30b>, <DisassemblerInsn "mov" for 0x40b30f>, <DisassemblerInsn "mov" for 0x40b314>, <DisassemblerInsn "mov" for 0x40b317>, <DisassemblerInsn "movzx" for 0x40b31b>, <DisassemblerInsn "mov" for 0x40b31e>, <DisassemblerInsn "cmp" for 0x40b322>, <DisassemblerInsn "jae" for 0x40b324>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b326>, <DisassemblerInsn "mov" for 0x40b32a>, <DisassemblerInsn "movzx" for 0x40b32e>, <DisassemblerInsn "mov" for 0x40b331>, <DisassemblerInsn "add" for 0x40b338>, <DisassemblerInsn "mov" for 0x40b33b>, <DisassemblerInsn "mov" for 0x40b342>, <DisassemblerInsn "jmp" for 0x40b346>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b226>, <DisassemblerInsn "mov" for 0x40b22e>, <DisassemblerInsn "mov" for 0x40b236>, <DisassemblerInsn "mov" for 0x40b23e>, <DisassemblerInsn "mov" for 0x40b246>, <DisassemblerInsn "mov" for 0x40b24e>, <DisassemblerInsn "mov" for 0x40b256>, <DisassemblerInsn "mov" for 0x40b25e>, <DisassemblerInsn "mov" for 0x40b266>, <DisassemblerInsn "mov" for 0x40b26b>, <DisassemblerInsn "mov" for 0x40b270>, <DisassemblerInsn "mov" for 0x40b273>, <DisassemblerInsn "mov" for 0x40b277>, <DisassemblerInsn "mov" for 0x40b27a>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b285>, <DisassemblerInsn "mov" for 0x40b288>, <DisassemblerInsn "xor" for 0x40b28c>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b299>, <DisassemblerInsn "call" for 0x40b29e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2a3>, <DisassemblerInsn "mov" for 0x40b2ab>, <DisassemblerInsn "mov" for 0x40b2b0>, <DisassemblerInsn "mov" for 0x40b2b8>, <DisassemblerInsn "mov" for 0x40b2bb>, <DisassemblerInsn "mov" for 0x40b2c0>, <DisassemblerInsn "mov" for 0x40b2c4>, <DisassemblerInsn "mov" for 0x40b2c9>, <DisassemblerInsn "mov" for 0x40b2d0>, <DisassemblerInsn "xor" for 0x40b2d4>, <DisassemblerInsn "cmp" for 0x40b2d6>, <DisassemblerInsn "mov" for 0x40b2d9>, <DisassemblerInsn "jle" for 0x40b2dd>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b06d>, <DisassemblerInsn "lea" for 0x40b075>, <DisassemblerInsn "add" for 0x40b07d>, <DisassemblerInsn "mov" for 0x40b081>, <DisassemblerInsn "lea" for 0x40b089>, <DisassemblerInsn "add" for 0x40b091>, <DisassemblerInsn "mov" for 0x40b095>, <DisassemblerInsn "lea" for 0x40b09d>, <DisassemblerInsn "add" for 0x40b0a5>, <DisassemblerInsn "mov" for 0x40b0a9>, <DisassemblerInsn "lea" for 0x40b0b1>, <DisassemblerInsn "add" for 0x40b0b9>, <DisassemblerInsn "mov" for 0x40b0bd>, <DisassemblerInsn "mov" for 0x40b0c5>, <DisassemblerInsn "add" for 0x40b0c8>, <DisassemblerInsn "mov" for 0x40b0ce>, <DisassemblerInsn "mov" for 0x40b0d6>, <DisassemblerInsn "add" for 0x40b0d9>, <DisassemblerInsn "add" for 0x40b0df>, <DisassemblerInsn "mov" for 0x40b0e3>, <DisassemblerInsn "mov" for 0x40b0eb>, <DisassemblerInsn "lea" for 0x40b0f1>, <DisassemblerInsn "mov" for 0x40b0f9>, <DisassemblerInsn "xor" for 0x40b101>, <DisassemblerInsn "mov" for 0x40b103>, <DisassemblerInsn "xor" for 0x40b105>, <DisassemblerInsn "mov" for 0x40b107>, <DisassemblerInsn "mov" for 0x40b10e>, <DisassemblerInsn "mov" for 0x40b116>, <DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b2fd>, <DisassemblerInsn "mov" for 0x40b302>, <DisassemblerInsn "mov" for 0x40b307>, <DisassemblerInsn "mov" for 0x40b30b>, <DisassemblerInsn "mov" for 0x40b30f>, <DisassemblerInsn "mov" for 0x40b314>, <DisassemblerInsn "mov" for 0x40b317>, <DisassemblerInsn "movzx" for 0x40b31b>, <DisassemblerInsn "mov" for 0x40b31e>, <DisassemblerInsn "cmp" for 0x40b322>, <DisassemblerInsn "jae" for 0x40b324>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b11d>, <DisassemblerInsn "mov" for 0x40b125>, <DisassemblerInsn "mov" for 0x40b12d>, <DisassemblerInsn "mov" for 0x40b134>, <DisassemblerInsn "mov" for 0x40b13c>, <DisassemblerInsn "mov" for 0x40b143>, <DisassemblerInsn "mov" for 0x40b14a>, <DisassemblerInsn "movaps" for 0x40b152>, <DisassemblerInsn "movaps" for 0x40b159>, <DisassemblerInsn "mov" for 0x40b15c>, <DisassemblerInsn "xor" for 0x40b162>, <DisassemblerInsn "mov" for 0x40b164>, <DisassemblerInsn "mov" for 0x40b169>, <DisassemblerInsn "cmp" for 0x40b16e>, <DisassemblerInsn "mov" for 0x40b171>, <DisassemblerInsn "mov" for 0x40b178>, <DisassemblerInsn "mov" for 0x40b17f>, <DisassemblerInsn "mov" for 0x40b181>, <DisassemblerInsn "mov" for 0x40b188>, <DisassemblerInsn "mov" for 0x40b18f>, <DisassemblerInsn "mov" for 0x40b196>, <DisassemblerInsn "jle" for 0x40b19d>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b3fa>, <DisassemblerInsn "mov" for 0x40b3fe>, <DisassemblerInsn "mov" for 0x40b402>, <DisassemblerInsn "mov" for 0x40b40a>, <DisassemblerInsn "mov" for 0x40b412>, <DisassemblerInsn "mov" for 0x40b41a>, <DisassemblerInsn "mov" for 0x40b422>, <DisassemblerInsn "mov" for 0x40b424>, <DisassemblerInsn "mov" for 0x40b426>, <DisassemblerInsn "mov" for 0x40b428>, <DisassemblerInsn "mov" for 0x40b42b>, <DisassemblerInsn "mov" for 0x40b433>, <DisassemblerInsn "mov" for 0x40b43a>, <DisassemblerInsn "mov" for 0x40b441>, <DisassemblerInsn "mov" for 0x40b448>, <DisassemblerInsn "mov" for 0x40b44f>, <DisassemblerInsn "mov" for 0x40b456>, <DisassemblerInsn "mov" for 0x40b45e>, <DisassemblerInsn "mov" for 0x40b465>, <DisassemblerInsn "mov" for 0x40b46c>, <DisassemblerInsn "mov" for 0x40b473>, <DisassemblerInsn "mov" for 0x40b47a>, <DisassemblerInsn "mov" for 0x40b482>, <DisassemblerInsn "mov" for 0x40b48a>, <DisassemblerInsn "mov" for 0x40b48f>, <DisassemblerInsn "mov" for 0x40b493>, <DisassemblerInsn "cdq" for 0x40b499>, <DisassemblerInsn "idiv" for 0x40b49a>, <DisassemblerInsn "mov" for 0x40b49d>, <DisassemblerInsn "mov" for 0x40b49f>, <DisassemblerInsn "imul" for 0x40b4a3>, <DisassemblerInsn "mov" for 0x40b4a6>, <DisassemblerInsn "mov" for 0x40b4aa>, <DisassemblerInsn "cdq" for 0x40b4b0>, <DisassemblerInsn "idiv" for 0x40b4b1>, <DisassemblerInsn "mov" for 0x40b4b4>, <DisassemblerInsn "mov" for 0x40b4b8>, <DisassemblerInsn "mov" for 0x40b4bb>, <DisassemblerInsn "sar" for 0x40b4bf>, <DisassemblerInsn "add" for 0x40b4c1>, <DisassemblerInsn "imul" for 0x40b4c4>, <DisassemblerInsn "imul" for 0x40b4c7>, <DisassemblerInsn "add" for 0x40b4ca>, <DisassemblerInsn "add" for 0x40b4cd>, <DisassemblerInsn "add" for 0x40b4cf>, <DisassemblerInsn "mov" for 0x40b4d1>, <DisassemblerInsn "add" for 0x40b4d5>, <DisassemblerInsn "cmp" for 0x40b4d9>, <DisassemblerInsn "mov" for 0x40b4dd>, <DisassemblerInsn "mov" for 0x40b4e4>, <DisassemblerInsn "mov" for 0x40b4ec>, <DisassemblerInsn "jne" for 0x40b4f3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "ret" for 0x40b60d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b363>, <DisassemblerInsn "mov" for 0x40b367>, <DisassemblerInsn "mov" for 0x40b36c>, <DisassemblerInsn "mov" for 0x40b371>, <DisassemblerInsn "cmp" for 0x40b376>, <DisassemblerInsn "cmove" for 0x40b37a>, <DisassemblerInsn "add" for 0x40b37d>, <DisassemblerInsn "mov" for 0x40b37f>, <DisassemblerInsn "mov" for 0x40b383>, <DisassemblerInsn "mov" for 0x40b388>, <DisassemblerInsn "mov" for 0x40b38d>, <DisassemblerInsn "add" for 0x40b391>, <DisassemblerInsn "cmp" for 0x40b395>, <DisassemblerInsn "mov" for 0x40b398>, <DisassemblerInsn "mov" for 0x40b39d>, <DisassemblerInsn "mov" for 0x40b39f>, <DisassemblerInsn "mov" for 0x40b3a3>, <DisassemblerInsn "jne" for 0x40b3a7>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b1a3>, <DisassemblerInsn "mov" for 0x40b1aa>, <DisassemblerInsn "mov" for 0x40b1b2>, <DisassemblerInsn "mov" for 0x40b1ba>, <DisassemblerInsn "add" for 0x40b1bd>, <DisassemblerInsn "imul" for 0x40b1c4>, <DisassemblerInsn "add" for 0x40b1c8>, <DisassemblerInsn "add" for 0x40b1cb>, <DisassemblerInsn "mov" for 0x40b1cf>, <DisassemblerInsn "mov" for 0x40b1d7>, <DisassemblerInsn "add" for 0x40b1da>, <DisassemblerInsn "imul" for 0x40b1e1>, <DisassemblerInsn "add" for 0x40b1e5>, <DisassemblerInsn "add" for 0x40b1e8>, <DisassemblerInsn "mov" for 0x40b1ec>, <DisassemblerInsn "add" for 0x40b1f4>, <DisassemblerInsn "imul" for 0x40b1fb>, <DisassemblerInsn "add" for 0x40b1ff>, <DisassemblerInsn "mov" for 0x40b202>, <DisassemblerInsn "mov" for 0x40b20a>, <DisassemblerInsn "xor" for 0x40b20d>, <DisassemblerInsn "mov" for 0x40b20f>, <DisassemblerInsn "mov" for 0x40b217>, <DisassemblerInsn "mov" for 0x40b21f>, <DisassemblerInsn "mov" for 0x40b226>, <DisassemblerInsn "mov" for 0x40b22e>, <DisassemblerInsn "mov" for 0x40b236>, <DisassemblerInsn "mov" for 0x40b23e>, <DisassemblerInsn "mov" for 0x40b246>, <DisassemblerInsn "mov" for 0x40b24e>, <DisassemblerInsn "mov" for 0x40b256>, <DisassemblerInsn "mov" for 0x40b25e>, <DisassemblerInsn "mov" for 0x40b266>, <DisassemblerInsn "mov" for 0x40b26b>, <DisassemblerInsn "mov" for 0x40b270>, <DisassemblerInsn "mov" for 0x40b273>, <DisassemblerInsn "mov" for 0x40b277>, <DisassemblerInsn "mov" for 0x40b27a>, <DisassemblerInsn "mov" for 0x40b27e>, <DisassemblerInsn "mov" for 0x40b285>, <DisassemblerInsn "mov" for 0x40b288>, <DisassemblerInsn "xor" for 0x40b28c>, <DisassemblerInsn "mov" for 0x40b28e>, <DisassemblerInsn "mov" for 0x40b295>, <DisassemblerInsn "mov" for 0x40b299>, <DisassemblerInsn "call" for 0x40b29e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b383>, <DisassemblerInsn "mov" for 0x40b388>, <DisassemblerInsn "mov" for 0x40b38d>, <DisassemblerInsn "add" for 0x40b391>, <DisassemblerInsn "cmp" for 0x40b395>, <DisassemblerInsn "mov" for 0x40b398>, <DisassemblerInsn "mov" for 0x40b39d>, <DisassemblerInsn "mov" for 0x40b39f>, <DisassemblerInsn "mov" for 0x40b3a3>, <DisassemblerInsn "jne" for 0x40b3a7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b348>, <DisassemblerInsn "cmp" for 0x40b34c>, <DisassemblerInsn "jae" for 0x40b34e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b505>, <DisassemblerInsn "mov" for 0x40b50a>, <DisassemblerInsn "mov" for 0x40b511>, <DisassemblerInsn "mov" for 0x40b514>, <DisassemblerInsn "add" for 0x40b517>, <DisassemblerInsn "mov" for 0x40b51e>, <DisassemblerInsn "cmp" for 0x40b523>, <DisassemblerInsn "je" for 0x40b52a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b4f9>, <DisassemblerInsn "add" for 0x40b4fd>, <DisassemblerInsn "ret" for 0x40b504>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b456>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edi, dword ptr [rsp + 0x5c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~eax, edi>', '<mov~~dword ptr [rsp + 0x28], eax>', '<add~~rcx, 1>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2c], esi>', '<movsxd~~rsi, esi>', '<cmp~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jl~~0x40b226>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~eax, -1>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40b383>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x148>', '<mov~~eax, esi>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<lea~~rcx, [rsp + 0x130]>', '<shl~~eax, 2>', '<add~~eax, 0xfffffc40>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<call~~0x40b505>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~dword ptr [rsp + 0x58], eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b348>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~cl, byte ptr [rsp + 0x43]>', '<movzx~~ecx, cl>', '<mov~~edx, dword ptr [rsp + rcx*4 + 0x130]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + rcx*4 + 0x130], edx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x40b383>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4ec3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rdx, qword ptr [rdx + rcx*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~ecx, dword ptr [rax + rcx*4 + 0x2268]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jle~~0x40b3ad>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<lea~~rax, [rsp + 0x130]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2238>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x2294>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0x108], rax>', '<mov~~edx, dword ptr [rdi + 0x2238]>', '<lea~~rax, [rsp + 0x130]>', '<mov~~qword ptr [rsp + 0x110], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x4f7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b456>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~byte ptr [rsp + 0x43], al>', '<movzx~~ecx, al>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~al, 5>', '<jae~~0x40b348>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x11c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<movaps~~xmm0, xmmword ptr [rip + 0x4f7]>', '<movaps~~xmmword ptr [rsi], xmm0>', '<mov~~dword ptr [rdx], 1>', '<xor~~edi, edi>', '<mov~~esi, 1>', '<mov~~edx, 2>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xbc], edi>', '<mov~~dword ptr [rsp + 0xc0], esi>', '<mov~~esi, edx>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<jle~~0x40b456>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0xbc], r8d>', '<mov~~dword ptr [rsp + 0xc0], edi>', '<mov~~dword ptr [rsp + 0xc4], esi>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<mov~~dword ptr [rsp + 0xcc], ecx>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~r9d, dword ptr [rsp + 0xcc]>', '<mov~~r8d, dword ptr [rsp + 0xd0]>', '<mov~~dword ptr [rsp + 0x1c], r9d>', '<mov~~dword ptr [rsp + 0x18], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<imul~~edx, edx, 5>', '<mov~~dword ptr [rsp + 0x20], edx>', '<mov~~r9d, 3>', '<cdq~~>', '<idiv~~r9d>', '<mov~~edx, dword ptr [rsp + 0x1c]>', '<mov~~r9d, eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<sar~~esi, 1>', '<add~~esi, r9d>', '<imul~~esi, esi, 7>', '<imul~~edi, edi, 3>', '<add~~eax, r8d>', '<add~~eax, edi>', '<add~~eax, esi>', '<mov~~dword ptr [rsp + 0x24], eax>', '<add~~rcx, 1>', '<cmp~~rcx, 6>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<jne~~0x40b11d>']}, {'block_Idx': 2, 'blockInsts': ['<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~sil, byte ptr [rsp + 0x43]>', '<mov~~eax, 0x10>', '<mov~~edx, 0xe>', '<cmp~~sil, 0xe>', '<cmove~~eax, edx>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40b2fd>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x2030>', '<imul~~rdi, rdx, 0x50>', '<add~~rsi, rdi>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<add~~rcx, 0x2030>', '<imul~~rdx, rdx, 0x50>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rdx, qword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~r8d, dword ptr [rsp + 0xd4]>', '<mov~~r9, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~r10d, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x5c], r10d>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~rdi, qword ptr [rdi + rdx*8]>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdx*8]>', '<mov~~ecx, dword ptr [rcx + rdx*4 + 0x2268]>', '<mov~~r9d, dword ptr [r9]>', '<mov~~rax, qword ptr [rax + rdx*8]>', '<xor~~edx, edx>', '<mov~~r10, qword ptr [rip + 0xf4ec3]>', '<mov~~qword ptr [rsp], r10>', '<mov~~qword ptr [rsp + 8], rax>', '<call~~0x500160>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jne~~0x40b2fd>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x43]>', '<cmp~~al, 0xe>', '<jae~~0x40b363>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~rax, qword ptr [rdi + 0x2030]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x2328>', '<mov~~qword ptr [rsp - 8], rcx>', '<cmp~~rax, qword ptr [rdi + 0x2328]>', '<je~~0x40b60d>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x148>', '<ret~~>']}], 'cfg_edge_info': [(24, 27), (20, 14), (26, 27), (22, 26), (27, 22), (24, 17), (7, 10), (26, 17), (20, 13), (18, 22), (21, 24), (22, 25), (0, 1), (2, 4), (27, 21), (0, 4), (17, 20), (11, 16), (10, 14), (13, 7), (25, 24), (16, 18), (18, 21), (4, 7), (17, 19), (19, 16), (10, 13), (7, 11), (16, 17)], 'cdg_edge_info': [(7, 17), (24, 27), (7, 20), (26, 27), (22, 26), (27, 22), (7, 10), (7, 16), (20, 7), (20, 13), (18, 22), (22, 25), (17, 17), (27, 21), (27, 24), (16, 18), (18, 21), (18, 24), (17, 16), (22, 24), (17, 19), (10, 7), (10, 13), (7, 11)], 'ddg_edge_info': [(21, 16), (20, 14), (21, 13), (21, 19), (26, 27), (16, 17), (18, 26), (27, 13), (27, 16), (17, 21), (19, 18), (27, 25), (27, 19), (27, 22), (13, 11), (19, 21), (17, 27), (0, 11), (11, 20), (19, 27), (13, 20), (26, 17), (20, 13), (22, 13), (4, 14), (17, 11), (4, 11), (4, 17), (21, 27), (19, 11), (4, 20), (19, 14), (27, 21), (0, 4), (17, 20), (19, 17), (11, 16), (0, 16), (11, 19), (0, 19), (19, 20), (19, 26), (16, 18), (21, 11), (21, 17), (16, 27), (18, 27), (4, 16), (21, 26), (27, 11), (4, 13), (4, 19), (17, 16), (17, 19), (19, 16), (27, 17), (19, 13), (19, 25), (27, 26), (19, 22), (25, 26)]}]}
{'bit_alloc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movl\t0x2238(%rdi), %edx'}, {'instIndex': 29, 'instruction': 'leaq\t0x130(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 33, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 34, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x12c(%rsp)                 # 4-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t$1, (%rdx)'}, {'instIndex': 47, 'instruction': 'xorl\t%edi, %edi'}, {'instIndex': 50, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 51, 'instruction': 'movl\t%edi, 0xbc(%rsp)                 # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%esi, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, %esi'}, {'instIndex': 54, 'instruction': 'movl\t%esi, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movl\t%edx, 0xc8(%rsp)                 # 4-byte Spill'}, {'instIndex': 56, 'instruction': 'movl\t%ecx, 0xcc(%rsp)                 # 4-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%eax, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 58, 'instruction': 'jle\t.LBB3_13'}, {'instIndex': 78, 'instruction': 'movq\t(%rcx), %rdx'}, {'instIndex': 79, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 80, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0xa8(%rsp)                 # 4-byte Spill'}, {'instIndex': 93, 'instruction': 'movq\t(%rdi), %rdi'}, {'instIndex': 94, 'instruction': 'movq\t(%rdi,%rdx,8), %rdi'}, {'instIndex': 95, 'instruction': 'movq\t(%rsi), %rsi'}, {'instIndex': 96, 'instruction': 'movq\t(%rsi,%rdx,8), %rsi'}, {'instIndex': 97, 'instruction': 'movl\t0x2268(%rcx,%rdx,4), %ecx'}, {'instIndex': 98, 'instruction': 'movl\t(%r9), %r9d'}, {'instIndex': 99, 'instruction': 'movq\t(%rax,%rdx,8), %rax'}, {'instIndex': 100, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 101, 'instruction': 'movq\tff_ac3_bap_tab@GOTPCREL(%rip), %r10'}, {'instIndex': 102, 'instruction': 'movq\t%r10, (%rsp)'}, {'instIndex': 103, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 104, 'instruction': 'callq\tff_ac3_bit_alloc_calc_bap@PLT'}, {'instIndex': 108, 'instruction': 'movq\t(%rdx), %rdx'}, {'instIndex': 109, 'instruction': 'movq\t%rdx, 0x68(%rsp)                 # 8-byte Spill'}, {'instIndex': 110, 'instruction': 'movq\t(%rdx,%rcx,8), %rdx'}, {'instIndex': 111, 'instruction': 'movq\t%rdx, 0x70(%rsp)                 # 8-byte Spill'}, {'instIndex': 112, 'instruction': 'movl\t0x2268(%rax,%rcx,4), %ecx'}, {'instIndex': 113, 'instruction': 'movl\t%ecx, 0x78(%rsp)                 # 4-byte Spill'}, {'instIndex': 177, 'instruction': 'addl\t%edi, %eax'}, {'instIndex': 178, 'instruction': 'movl\t%eax, 0x28(%rsp)                  # 4-byte Spill'}, {'instIndex': 179, 'instruction': 'addq\t$1, %rcx'}, {'instIndex': 180, 'instruction': 'movl\t(%rsi), %esi'}, {'instIndex': 181, 'instruction': 'movl\t%esi, 0x2c(%rsp)                  # 4-byte Spill'}, {'instIndex': 182, 'instruction': 'movslq\t%esi, %rsi'}, {'instIndex': 183, 'instruction': 'cmpq\t%rsi, %rcx'}, {'instIndex': 184, 'instruction': 'movq\t%rdx, 0x98(%rsp)                 # 8-byte Spill'}, {'instIndex': 185, 'instruction': 'movq\t%rcx, 0xa0(%rsp)                 # 8-byte Spill'}, {'instIndex': 187, 'instruction': 'jl\t.LBB3_3'}, {'instIndex': 232, 'instruction': 'addl\t%esi, %eax'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}]}]}
The analysis of 26 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/patch_info.txt
{'1': {'before': 'a/libavformat/http.c', 'after': 'b/libavformat/http.c'}}
{'1': [{'before': '-169,6', 'after': '+169,9', 'function': 'static int process_line'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544---b/libavformat/http.c
The case of compiler gcc with optimization no.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/no/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/no/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O0.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O0/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O0/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O1.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O1/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O1/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O2.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O2/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O2/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O3.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O3/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/O3/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization Os.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/Os/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_after/Os/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization no.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/no/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/no/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O0.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O0/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O0/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O1.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O1/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O1/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O2.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O2/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O2/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O3.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O3/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/O3/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization Os.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/Os/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_after/Os/http.o
Binary file does not exist.
{'process_line': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544---a/libavformat/http.c
The case of compiler gcc with optimization no.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/no/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/no/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O0.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O0/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O0/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O1.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O1/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O1/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O2.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O2/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O2/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization O3.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O3/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/O3/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler gcc with optimization Os.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/Os/http_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/gcc_before/Os/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization no.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/no/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/no/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O0.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O0/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O0/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O1.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O1/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O1/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O2.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O2/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O2/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization O3.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O3/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/O3/http.o
Binary file does not exist.
{'process_line': []}
The case of compiler clang with optimization Os.
Patched source code file: http.c
Patched function: 1---static int process_line 
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/Os/http.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/7b19aa64dc2d41cce478445a47e700839b399544/clang_before/Os/http.o
Binary file does not exist.
{'process_line': []}
The analysis of 27 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/patch_info.txt
{'1': {'before': 'a/libswscale/swscale_template.c', 'after': 'b/libswscale/swscale_template.c'}}
{'1': [{'before': '-2148,8', 'after': '+2148,8', 'function': 'static inline void RENAME'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1---b/libswscale/swscale_template.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1---a/libswscale/swscale_template.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: swscale_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/7/libav.libav/78454dfc017af59f92ad30fc46e25a5a846f90c1/clang_before/Os: directory not exists.

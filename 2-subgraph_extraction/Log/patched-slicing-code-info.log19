The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e29378ff886b574aba7402f885d0a62a9d728091/patch_info.txt
{'1': {'before': 'a/libavformat/rmdec.c', 'after': 'b/libavformat/rmdec.c'}}
{'1': [{'before': '-615,6', 'after': '+615,7', 'function': 'ff_rm_parse_packet '}, {'before': '-707,6', 'after': '+708,7', 'function': 'static int rm_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e29378ff886b574aba7402f885d0a62a9d728091---b/libavformat/rmdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e29378ff886b574aba7402f885d0a62a9d728091---a/libavformat/rmdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/patch_info.txt
{'1': {'before': 'a/libavformat/ffmdec.c', 'after': 'b/libavformat/ffmdec.c'}}
{'1': [{'before': '-359,6', 'after': '+359,9', 'function': 'static int ffm_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac---b/libavformat/ffmdec.c
The case of compiler gcc with optimization no.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac---a/libavformat/ffmdec.c
The case of compiler gcc with optimization no.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmdec.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eee99eb3e8f4481ee5e669e60a0fd6be891af5ac/clang_before/Os: directory not exists.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ef4c8bbfb77e1c9eb8e8212c5820344ea31dd1d9/patch_info.txt
{'1': {'before': 'a/libavformat/mov.c', 'after': 'b/libavformat/mov.c'}}
{'1': [{'before': '-1733,6', 'after': '+1733,7', 'function': 'static int mov_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ef4c8bbfb77e1c9eb8e8212c5820344ea31dd1d9---b/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ef4c8bbfb77e1c9eb8e8212c5820344ea31dd1d9---a/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/patch_info.txt
{'1': {'before': 'a/libavcodec/libvorbis.c', 'after': 'b/libavcodec/libvorbis.c'}}
{'1': [{'before': '-60,9', 'after': '+60,12', 'function': 'static av_cold int oggvorbis_init_encoder'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396---b/libavcodec/libvorbis.c
The case of compiler gcc with optimization no.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396---a/libavcodec/libvorbis.c
The case of compiler gcc with optimization no.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: libvorbis.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e5a5ea9e894c23f6224fceaef89e105f2c672396/clang_before/Os: directory not exists.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/patch_info.txt
{'1': {'before': 'a/libavcodec/ivi_common.c', 'after': 'b/libavcodec/ivi_common.c'}}
{'1': [{'before': '-404,6', 'after': '+404,10', 'function': 'int ff_ivi_decode_blocks'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d---b/libavcodec/ivi_common.c
The case of compiler gcc with optimization no.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d---a/libavcodec/ivi_common.c
The case of compiler gcc with optimization no.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ivi_common.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eb40d7ffa7d455697849a0a505ca42836b30aa6d/clang_before/Os: directory not exists.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ec524ed12aa1aeb37125203f1adf5aa10dfcb0de/patch_info.txt
{'1': {'before': 'a/libavformat/tta.c', 'after': 'b/libavformat/tta.c'}}
{'1': [{'before': '-45,12', 'after': '+45,14', 'function': 'static int tta_read_header'}, {'before': '-91,7', 'after': '+93,10', 'function': 'static int tta_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ec524ed12aa1aeb37125203f1adf5aa10dfcb0de---b/libavformat/tta.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ec524ed12aa1aeb37125203f1adf5aa10dfcb0de---a/libavformat/tta.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e84dab5f57acd210ed6b8dd4c044a278cfadee29/patch_info.txt
{'1': {'before': 'a/libavformat/avidec.c', 'after': 'b/libavformat/avidec.c'}}
{'1': [{'before': '-403,6', 'after': '+403,8', 'function': 'static int avi_read_header'}, {'before': '-850,7', 'after': '+852,7', 'function': 'static int avi_read_seek'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e84dab5f57acd210ed6b8dd4c044a278cfadee29---b/libavformat/avidec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e84dab5f57acd210ed6b8dd4c044a278cfadee29---a/libavformat/avidec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e76c7b856f7aab9d8e3a42f61142eda30fc0749e/patch_info.txt
{'1': {'before': 'a/libavcodec/alac.c', 'after': 'b/libavcodec/alac.c'}}
{'1': [{'before': '-574,7', 'after': '+570,7', 'function': 'static int alac_set_info'}, {'before': '-583,15', 'after': '+579,15', 'function': 'static int alac_set_info'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e76c7b856f7aab9d8e3a42f61142eda30fc0749e---b/libavcodec/alac.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e76c7b856f7aab9d8e3a42f61142eda30fc0749e---a/libavcodec/alac.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/patch_info.txt
{'1': {'before': 'a/libavcodec/qsvenc_hevc.c', 'after': 'b/libavcodec/qsvenc_hevc.c'}}
{'1': [{'before': '-160,7', 'after': '+160,7', 'function': 'static av_cold int qsv_enc_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c---b/libavcodec/qsvenc_hevc.c
The case of compiler gcc with optimization no.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c---a/libavcodec/qsvenc_hevc.c
The case of compiler gcc with optimization no.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: qsvenc_hevc.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecee1148af4989e1f9e16f0cdc9f98ad2045538c/clang_before/Os: directory not exists.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/patch_info.txt
{'1': {'before': 'a/libavcodec/bfin/dsputil_bfin.c', 'after': 'b/libavcodec/bfin/dsputil_bfin.c'}}
{'1': [{'before': '-285,6', 'after': '+285,7', 'function': 'void dsputil_init_bfin'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe---b/libavcodec/bfin/dsputil_bfin.c
The case of compiler gcc with optimization no.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe---a/libavcodec/bfin/dsputil_bfin.c
The case of compiler gcc with optimization no.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: dsputil_bfin.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ea6ad30ce9f1a5dbdb18748f4c3c24745f6513fe/clang_before/Os: directory not exists.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/patch_info.txt
{'1': {'before': 'a/libavcodec/ac3dec.c', 'after': 'b/libavcodec/ac3dec.c'}}
{'1': [{'before': '-1154,8', 'after': '+1154,8', 'function': 'static int ac3_decode_frame'}, {'before': '-1172,7', 'after': '+1172,6', 'function': 'static int ac3_decode_frame'}, {'before': '-1185,11', 'after': '+1184,12', 'function': 'static int ac3_decode_frame'}, {'before': '-1207,13', 'after': '+1207,12', 'function': 'static int ac3_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6---b/libavcodec/ac3dec.c
The case of compiler gcc with optimization no.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/no/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/no/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O0/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O0/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O1/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O1/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O2/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O2/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O3/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/O3/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/Os/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_after/Os/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/no/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/no/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O0/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O0/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O1/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O1/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O2/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O2/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O3/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/O3/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/Os/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_after/Os/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6---a/libavcodec/ac3dec.c
The case of compiler gcc with optimization no.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/no/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/no/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/no/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O0/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O0/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O0/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O1/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O1/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O1/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O2/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O2/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O2/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O3/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O3/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/O3/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/Os/ac3dec_gcc.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/Os/ac3dec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/gcc_before/Os/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/no/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/no/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/no/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O0/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O0/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O0/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O1/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O1/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O1/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O2/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O2/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O2/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O3/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O3/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/O3/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: ac3dec.c
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/Os/ac3dec.s
Assembly file does not exist.
Patched function: 1---static int ac3_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/Os/ac3dec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ecfe94b2944700723f5a287c10b29a2d4f2ad5d6/clang_before/Os/ac3dec.o
Binary file does not exist.
{'ac3_decode_frame': []}
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/patch_info.txt
{'1': {'before': 'a/libavcodec/jpeg2000dec.c', 'after': 'b/libavcodec/jpeg2000dec.c'}}
{'1': [{'before': '-362,6', 'after': '+362,13', 'function': 'static int get_coc'}, {'before': '-440,7', 'after': '+447,15', 'function': 'static int get_qcc'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14---b/libavcodec/jpeg2000dec.c
The case of compiler gcc with optimization no.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/no/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/no/jpeg2000dec_gcc.s---get_coc---after
function id: 124
function flag: True
There are 95 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 37, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 38, 'instruction': 'jl\t.L173'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 45, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 51, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 52, 'instruction': 'jmp\t.L170'}, {'instIndex': 53, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 73, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 74, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 76, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 77, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'call\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/no/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/no/jpeg2000dec_gcc.s---get_qcc---after
function id: 127
function flag: True
There are 78 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L217'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L218'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 38, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 39, 'instruction': 'jl\t.L221'}, {'instIndex': 40, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 42, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 45, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 52, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 53, 'instruction': 'jmp\t.L218'}, {'instIndex': 54, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 55, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 56, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 58, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 59, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 63, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 64, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 65, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'cltq'}, {'instIndex': 67, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 68, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 69, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 71, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 72, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 75, 'instruction': 'call\tget_qcx'}, {'instIndex': 76, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/no/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 37, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 38, 'instruction': 'jl\t.L173'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 45, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 51, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 52, 'instruction': 'jmp\t.L170'}, {'instIndex': 53, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 73, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 74, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 76, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 77, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'call\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L217'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L218'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 38, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 39, 'instruction': 'jl\t.L221'}, {'instIndex': 40, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 42, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 45, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 52, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 53, 'instruction': 'jmp\t.L218'}, {'instIndex': 54, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 55, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 56, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 58, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 59, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 63, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 64, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 65, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'cltq'}, {'instIndex': 67, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 68, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 69, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 71, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 72, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 75, 'instruction': 'call\tget_qcx'}, {'instIndex': 76, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O0/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O0/jpeg2000dec_gcc.s---get_coc---after
function id: 124
function flag: True
There are 95 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 37, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 38, 'instruction': 'jl\t.L173'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 45, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 51, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 52, 'instruction': 'jmp\t.L170'}, {'instIndex': 53, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 73, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 74, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 76, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 77, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'call\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O0/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O0/jpeg2000dec_gcc.s---get_qcc---after
function id: 127
function flag: True
There are 78 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L217'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L218'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 38, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 39, 'instruction': 'jl\t.L221'}, {'instIndex': 40, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 42, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 45, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 52, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 53, 'instruction': 'jmp\t.L218'}, {'instIndex': 54, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 55, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 56, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 58, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 59, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 63, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 64, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 65, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'cltq'}, {'instIndex': 67, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 68, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 69, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 71, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 72, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 75, 'instruction': 'call\tget_qcx'}, {'instIndex': 76, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O0/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 37, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 38, 'instruction': 'jl\t.L173'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 45, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 51, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 52, 'instruction': 'jmp\t.L170'}, {'instIndex': 53, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'cltq'}, {'instIndex': 55, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 56, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 73, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 74, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 76, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 77, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'call\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L217'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L218'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %eax'}, {'instIndex': 38, 'instruction': 'cmpl\t%eax, 0x24(%rsp)'}, {'instIndex': 39, 'instruction': 'jl\t.L221'}, {'instIndex': 40, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t0x70(%rax), %ecx'}, {'instIndex': 42, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x24(%rsp), %edx'}, {'instIndex': 45, 'instruction': 'movl\t%ecx, %r8d'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 52, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 53, 'instruction': 'jmp\t.L218'}, {'instIndex': 54, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 55, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 56, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 58, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 59, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 63, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 64, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 65, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'cltq'}, {'instIndex': 67, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 68, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 69, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 71, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 72, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 75, 'instruction': 'call\tget_qcx'}, {'instIndex': 76, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O1/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O1/jpeg2000dec_gcc.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O1/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O1/jpeg2000dec_gcc.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O1/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O2/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O2/jpeg2000dec_gcc.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O2/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O2/jpeg2000dec_gcc.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O2/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O3/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O3/jpeg2000dec_gcc.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O3/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O3/jpeg2000dec_gcc.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/O3/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/Os/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/Os/jpeg2000dec_gcc.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/Os/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/Os/jpeg2000dec_gcc.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_after/Os/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.s---get_coc---after
function id: 8
function flag: True
There are 77 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jl\t.LBB8_4'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 36, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 42, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 43, 'instruction': 'jmp\t.LBB8_5'}, {'instIndex': 44, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 47, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 48, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 62, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 65, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 67, 'instruction': 'callq\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.s---get_qcc---after
function id: 10
function flag: True
There are 62 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 33, 'instruction': 'jl\t.LBB10_4'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t4(%rsp), %ecx'}, {'instIndex': 37, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 48, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 49, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 52, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 53, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 54, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 56, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 57, 'instruction': 'callq\tget_qcx'}, {'instIndex': 58, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 61, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.o---after
The extraction of function: get_coc
Analyzing the binaries to generate subCFGs from patched function ...
It has 931 nodes and 1482 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 77 instructions in binary file.
[4204247, 4204316, 4204357, 4204370]
The extraction of function: get_qcc
Analyzing the binaries to generate subCFGs from patched function ...
It has 931 nodes and 1482 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 62 instructions in binary file.
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
The execution time of patched subCFG information extraction via angr: 0:00:02.296795
{'get_coc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402745>, <DisassemblerInsn "jmp" for 0x40274d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402725>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "mov" for 0x40272e>, <DisassemblerInsn "mov" for 0x402732>, <DisassemblerInsn "lea" for 0x402737>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "call" for 0x402740>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "movsxd" for 0x4027bb>, <DisassemblerInsn "movzx" for 0x4027c0>, <DisassemblerInsn "or" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "cmp" for 0x402717>, <DisassemblerInsn "jl" for 0x40271a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "movsxd" for 0x40275b>, <DisassemblerInsn "imul" for 0x40275e>, <DisassemblerInsn "add" for 0x402762>, <DisassemblerInsn "mov" for 0x402765>, <DisassemblerInsn "mov" for 0x40276a>, <DisassemblerInsn "add" for 0x40276f>, <DisassemblerInsn "mov" for 0x402773>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402782>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "add" for 0x40278a>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402796>, <DisassemblerInsn "movzx" for 0x402799>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x40279f>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "mov" for 0x4027a7>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "call" for 0x4027b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4420]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402752>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403590>']}], 'cfg_edge_info': [(2, 4), (4, 6), (5, 7), (7, 3), (0, 2), (2, 5)]}], 'get_qcc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ab9>, <DisassemblerInsn "jmp" for 0x402ac1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402a00>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a09>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a12>, <DisassemblerInsn "mov" for 0x402a17>, <DisassemblerInsn "add" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "mov" for 0x402a33>, <DisassemblerInsn "sub" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a39>, <DisassemblerInsn "jae" for 0x402a3c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "add" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a54>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "add" for 0x402a6b>, <DisassemblerInsn "mov" for 0x402a6f>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a77>, <DisassemblerInsn "movzx" for 0x402a7a>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "cmp" for 0x402a8b>, <DisassemblerInsn "jl" for 0x402a8e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402afc>, <DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jmp" for 0x402a46>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a95>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "mov" for 0x402a9d>, <DisassemblerInsn "mov" for 0x402aa2>, <DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "lea" for 0x402aab>, <DisassemblerInsn "mov" for 0x402ab2>, <DisassemblerInsn "call" for 0x402ab4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "movsxd" for 0x402ac8>, <DisassemblerInsn "movzx" for 0x402acd>, <DisassemblerInsn "or" for 0x402ad1>, <DisassemblerInsn "mov" for 0x402ad4>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "sub" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae3>, <DisassemblerInsn "movsxd" for 0x402ae8>, <DisassemblerInsn "imul" for 0x402aed>, <DisassemblerInsn "add" for 0x402af4>, <DisassemblerInsn "call" for 0x402af7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a4b>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402ac3>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x40ac]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x403940>']}], 'cfg_edge_info': [(0, 1), (2, 4), (4, 6), (5, 7), (7, 3), (0, 2), (2, 5), (1, 3)]}]}
{'get_coc': [4204247, 4204316, 4204357, 4204370], 'get_qcc': [4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/no/jpeg2000dec.o---after
The extraction of function: get_coc
[4204247, 4204316, 4204357, 4204370]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 39 nodes and 58 edges in CFGEmulated.
It has 39 nodes and 60 edges in CDG.
It has 1115 nodes and 1369 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204247, 4204316, 4204357, 4204370]
{4204357, 4204234, 4204176, 4204498, 4204370, 4204470, 4204247, 4204316}
[4, 6, 14, 3, 11, 0, 1, 29, 2, 10, 5]
The extraction of function: get_qcc
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 39 nodes and 56 edges in CFGEmulated.
It has 39 nodes and 55 edges in CDG.
It has 1154 nodes and 1408 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
{4205056, 4205312, 4205251, 4205131, 4205200, 4205241, 4205308, 4205118}
[1, 0, 3, 10, 30, 11, 6, 5, 4, 14, 2]
The execution time of patched slicing information extraction via angr: 0:00:09.251808
{'get_coc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "movsxd" for 0x40275b>, <DisassemblerInsn "imul" for 0x40275e>, <DisassemblerInsn "add" for 0x402762>, <DisassemblerInsn "mov" for 0x402765>, <DisassemblerInsn "mov" for 0x40276a>, <DisassemblerInsn "add" for 0x40276f>, <DisassemblerInsn "mov" for 0x402773>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402782>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "add" for 0x40278a>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402796>, <DisassemblerInsn "movzx" for 0x402799>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x40279f>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "mov" for 0x4027a7>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "call" for 0x4027b1>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403590>, <DisassemblerInsn "mov" for 0x403597>, <DisassemblerInsn "mov" for 0x40359c>, <DisassemblerInsn "mov" for 0x4035a1>, <DisassemblerInsn "add" for 0x4035a6>, <DisassemblerInsn "mov" for 0x4035aa>, <DisassemblerInsn "mov" for 0x4035af>, <DisassemblerInsn "mov" for 0x4035b4>, <DisassemblerInsn "mov" for 0x4035b8>, <DisassemblerInsn "mov" for 0x4035bd>, <DisassemblerInsn "sub" for 0x4035c0>, <DisassemblerInsn "cmp" for 0x4035c3>, <DisassemblerInsn "jae" for 0x4035c6>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "movsxd" for 0x4027bb>, <DisassemblerInsn "movzx" for 0x4027c0>, <DisassemblerInsn "or" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403925>, <DisassemblerInsn "add" for 0x403929>, <DisassemblerInsn "ret" for 0x403930>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ca>, <DisassemblerInsn "jmp" for 0x4026d2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40391d>, <DisassemblerInsn "mov" for 0x403925>, <DisassemblerInsn "add" for 0x403929>, <DisassemblerInsn "ret" for 0x403930>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "cmp" for 0x402717>, <DisassemblerInsn "jl" for 0x40271a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402745>, <DisassemblerInsn "jmp" for 0x40274d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402725>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "mov" for 0x40272e>, <DisassemblerInsn "mov" for 0x402732>, <DisassemblerInsn "lea" for 0x402737>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "call" for 0x402740>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403590>']}, {'block_Idx': 6, 'blockInsts': ['<sub~~rsp, 0x98>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 5>', '<jae~~0x4035d5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402752>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4420]>', '<mov~~al, 0>', '<call~~0x500008>']}], 'cfg_edge_info': [(0, 1), (29, 14), (2, 4), (4, 6), (4, 14), (0, 2), (5, 10), (2, 5), (10, 3), (11, 14), (1, 3)], 'cdg_edge_info': [(0, 1), (2, 14), (2, 4), (2, 10), (0, 3), (2, 3), (0, 2), (2, 5)], 'ddg_edge_info': [(0, 1), (2, 14), (2, 4), (0, 4), (10, 14), (5, 14), (1, 14), (5, 10), (0, 2), (2, 5), (0, 5), (0, 14)]}], 'get_qcc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jmp" for 0x402a46>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402a00>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a09>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a12>, <DisassemblerInsn "mov" for 0x402a17>, <DisassemblerInsn "add" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "mov" for 0x402a33>, <DisassemblerInsn "sub" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a39>, <DisassemblerInsn "jae" for 0x402a3c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ab9>, <DisassemblerInsn "jmp" for 0x402ac1>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d11>, <DisassemblerInsn "mov" for 0x403d19>, <DisassemblerInsn "add" for 0x403d1d>, <DisassemblerInsn "ret" for 0x403d21>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d19>, <DisassemblerInsn "add" for 0x403d1d>, <DisassemblerInsn "ret" for 0x403d21>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403940>, <DisassemblerInsn "mov" for 0x403944>, <DisassemblerInsn "mov" for 0x403949>, <DisassemblerInsn "mov" for 0x40394d>, <DisassemblerInsn "mov" for 0x403952>, <DisassemblerInsn "add" for 0x403957>, <DisassemblerInsn "mov" for 0x40395b>, <DisassemblerInsn "mov" for 0x403960>, <DisassemblerInsn "mov" for 0x403965>, <DisassemblerInsn "mov" for 0x403969>, <DisassemblerInsn "mov" for 0x40396e>, <DisassemblerInsn "sub" for 0x403971>, <DisassemblerInsn "cmp" for 0x403974>, <DisassemblerInsn "jae" for 0x403977>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a95>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "mov" for 0x402a9d>, <DisassemblerInsn "mov" for 0x402aa2>, <DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "lea" for 0x402aab>, <DisassemblerInsn "mov" for 0x402ab2>, <DisassemblerInsn "call" for 0x402ab4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "movsxd" for 0x402ac8>, <DisassemblerInsn "movzx" for 0x402acd>, <DisassemblerInsn "or" for 0x402ad1>, <DisassemblerInsn "mov" for 0x402ad4>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "sub" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae3>, <DisassemblerInsn "movsxd" for 0x402ae8>, <DisassemblerInsn "imul" for 0x402aed>, <DisassemblerInsn "add" for 0x402af4>, <DisassemblerInsn "call" for 0x402af7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402afc>, <DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "add" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a54>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "add" for 0x402a6b>, <DisassemblerInsn "mov" for 0x402a6f>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a77>, <DisassemblerInsn "movzx" for 0x402a7a>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "cmp" for 0x402a8b>, <DisassemblerInsn "jl" for 0x402a8e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a4b>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x4c], 0>', '<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp - 0x58], rdi>', '<mov~~dword ptr [rsp - 0x5c], esi>', '<mov~~qword ptr [rsp - 0x68], rdx>', '<mov~~rax, qword ptr [rsp - 0x58]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp - 0x30], rax>', '<mov~~rax, qword ptr [rsp - 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x403986>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x40ac]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x403940>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402ac3>']}], 'cfg_edge_info': [(0, 1), (2, 4), (30, 14), (11, 14), (4, 6), (4, 14), (0, 2), (5, 10), (10, 3), (2, 5), (1, 3)], 'cdg_edge_info': [(2, 14), (0, 1), (2, 4), (2, 10), (0, 3), (2, 3), (0, 2), (2, 5)], 'ddg_edge_info': [(0, 1), (2, 4), (0, 4), (10, 14), (5, 14), (0, 14), (1, 14), (0, 2), (5, 10), (0, 5), (2, 5)]}]}
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jl\t.LBB8_4'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 36, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 42, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 43, 'instruction': 'jmp\t.LBB8_5'}, {'instIndex': 44, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 47, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 48, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 62, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 65, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 67, 'instruction': 'callq\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 33, 'instruction': 'jl\t.LBB10_4'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t4(%rsp), %ecx'}, {'instIndex': 37, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 48, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 49, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 52, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 53, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 54, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 56, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 57, 'instruction': 'callq\tget_qcx'}, {'instIndex': 58, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 61, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.s---get_coc---after
function id: 8
function flag: True
There are 77 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jl\t.LBB8_4'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 36, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 42, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 43, 'instruction': 'jmp\t.LBB8_5'}, {'instIndex': 44, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 47, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 48, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 62, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 65, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 67, 'instruction': 'callq\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.s---get_qcc---after
function id: 10
function flag: True
There are 62 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 33, 'instruction': 'jl\t.LBB10_4'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t4(%rsp), %ecx'}, {'instIndex': 37, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 48, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 49, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 52, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 53, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 54, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 56, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 57, 'instruction': 'callq\tget_qcx'}, {'instIndex': 58, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 61, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.o---after
The extraction of function: get_coc
Analyzing the binaries to generate subCFGs from patched function ...
It has 931 nodes and 1482 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 77 instructions in binary file.
[4204247, 4204316, 4204357, 4204370]
The extraction of function: get_qcc
Analyzing the binaries to generate subCFGs from patched function ...
It has 931 nodes and 1482 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 62 instructions in binary file.
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
The execution time of patched subCFG information extraction via angr: 0:00:02.326427
{'get_coc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402745>, <DisassemblerInsn "jmp" for 0x40274d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402725>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "mov" for 0x40272e>, <DisassemblerInsn "mov" for 0x402732>, <DisassemblerInsn "lea" for 0x402737>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "call" for 0x402740>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "movsxd" for 0x4027bb>, <DisassemblerInsn "movzx" for 0x4027c0>, <DisassemblerInsn "or" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "cmp" for 0x402717>, <DisassemblerInsn "jl" for 0x40271a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "movsxd" for 0x40275b>, <DisassemblerInsn "imul" for 0x40275e>, <DisassemblerInsn "add" for 0x402762>, <DisassemblerInsn "mov" for 0x402765>, <DisassemblerInsn "mov" for 0x40276a>, <DisassemblerInsn "add" for 0x40276f>, <DisassemblerInsn "mov" for 0x402773>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402782>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "add" for 0x40278a>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402796>, <DisassemblerInsn "movzx" for 0x402799>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x40279f>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "mov" for 0x4027a7>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "call" for 0x4027b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4420]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402752>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403590>']}], 'cfg_edge_info': [(2, 4), (4, 6), (5, 7), (7, 3), (0, 2), (2, 5)]}], 'get_qcc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ab9>, <DisassemblerInsn "jmp" for 0x402ac1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402a00>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a09>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a12>, <DisassemblerInsn "mov" for 0x402a17>, <DisassemblerInsn "add" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "mov" for 0x402a33>, <DisassemblerInsn "sub" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a39>, <DisassemblerInsn "jae" for 0x402a3c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "add" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a54>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "add" for 0x402a6b>, <DisassemblerInsn "mov" for 0x402a6f>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a77>, <DisassemblerInsn "movzx" for 0x402a7a>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "cmp" for 0x402a8b>, <DisassemblerInsn "jl" for 0x402a8e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402afc>, <DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jmp" for 0x402a46>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a95>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "mov" for 0x402a9d>, <DisassemblerInsn "mov" for 0x402aa2>, <DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "lea" for 0x402aab>, <DisassemblerInsn "mov" for 0x402ab2>, <DisassemblerInsn "call" for 0x402ab4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "movsxd" for 0x402ac8>, <DisassemblerInsn "movzx" for 0x402acd>, <DisassemblerInsn "or" for 0x402ad1>, <DisassemblerInsn "mov" for 0x402ad4>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "sub" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae3>, <DisassemblerInsn "movsxd" for 0x402ae8>, <DisassemblerInsn "imul" for 0x402aed>, <DisassemblerInsn "add" for 0x402af4>, <DisassemblerInsn "call" for 0x402af7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a4b>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402ac3>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x40ac]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x403940>']}], 'cfg_edge_info': [(0, 1), (2, 4), (4, 6), (5, 7), (7, 3), (0, 2), (2, 5), (1, 3)]}]}
{'get_coc': [4204247, 4204316, 4204357, 4204370], 'get_qcc': [4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O0/jpeg2000dec.o---after
The extraction of function: get_coc
[4204247, 4204316, 4204357, 4204370]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 39 nodes and 58 edges in CFGEmulated.
It has 39 nodes and 60 edges in CDG.
It has 1115 nodes and 1369 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204247, 4204316, 4204357, 4204370]
{4204357, 4204234, 4204176, 4204498, 4204370, 4204470, 4204247, 4204316}
[4, 6, 14, 3, 11, 0, 1, 29, 2, 10, 5]
The extraction of function: get_qcc
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 39 nodes and 56 edges in CFGEmulated.
It has 39 nodes and 55 edges in CDG.
It has 1154 nodes and 1408 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205056, 4205118, 4205131, 4205200, 4205241, 4205251, 4205308, 4205312]
{4205056, 4205312, 4205251, 4205131, 4205200, 4205241, 4205308, 4205118}
[1, 0, 3, 10, 30, 11, 6, 5, 4, 14, 2]
The execution time of patched slicing information extraction via angr: 0:00:09.283270
{'get_coc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "movsxd" for 0x40275b>, <DisassemblerInsn "imul" for 0x40275e>, <DisassemblerInsn "add" for 0x402762>, <DisassemblerInsn "mov" for 0x402765>, <DisassemblerInsn "mov" for 0x40276a>, <DisassemblerInsn "add" for 0x40276f>, <DisassemblerInsn "mov" for 0x402773>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402782>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "add" for 0x40278a>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402796>, <DisassemblerInsn "movzx" for 0x402799>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x40279f>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "mov" for 0x4027a7>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "call" for 0x4027b1>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403590>, <DisassemblerInsn "mov" for 0x403597>, <DisassemblerInsn "mov" for 0x40359c>, <DisassemblerInsn "mov" for 0x4035a1>, <DisassemblerInsn "add" for 0x4035a6>, <DisassemblerInsn "mov" for 0x4035aa>, <DisassemblerInsn "mov" for 0x4035af>, <DisassemblerInsn "mov" for 0x4035b4>, <DisassemblerInsn "mov" for 0x4035b8>, <DisassemblerInsn "mov" for 0x4035bd>, <DisassemblerInsn "sub" for 0x4035c0>, <DisassemblerInsn "cmp" for 0x4035c3>, <DisassemblerInsn "jae" for 0x4035c6>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "movsxd" for 0x4027bb>, <DisassemblerInsn "movzx" for 0x4027c0>, <DisassemblerInsn "or" for 0x4027c4>, <DisassemblerInsn "mov" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "add" for 0x4027d6>, <DisassemblerInsn "ret" for 0x4027da>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403925>, <DisassemblerInsn "add" for 0x403929>, <DisassemblerInsn "ret" for 0x403930>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ca>, <DisassemblerInsn "jmp" for 0x4026d2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40391d>, <DisassemblerInsn "mov" for 0x403925>, <DisassemblerInsn "add" for 0x403929>, <DisassemblerInsn "ret" for 0x403930>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "cmp" for 0x402717>, <DisassemblerInsn "jl" for 0x40271a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402745>, <DisassemblerInsn "jmp" for 0x40274d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271c>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402725>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "mov" for 0x40272e>, <DisassemblerInsn "mov" for 0x402732>, <DisassemblerInsn "lea" for 0x402737>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "call" for 0x402740>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403590>']}, {'block_Idx': 6, 'blockInsts': ['<sub~~rsp, 0x98>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 5>', '<jae~~0x4035d5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402752>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x4027d2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x4420]>', '<mov~~al, 0>', '<call~~0x500008>']}], 'cfg_edge_info': [(0, 1), (29, 14), (2, 4), (4, 6), (4, 14), (0, 2), (5, 10), (2, 5), (10, 3), (11, 14), (1, 3)], 'cdg_edge_info': [(0, 1), (2, 14), (2, 4), (2, 10), (0, 3), (2, 3), (0, 2), (2, 5)], 'ddg_edge_info': [(0, 1), (2, 14), (2, 4), (0, 4), (10, 14), (5, 14), (1, 14), (5, 10), (0, 2), (2, 5), (0, 5), (0, 14)]}], 'get_qcc': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jmp" for 0x402a46>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402a00>, <DisassemblerInsn "mov" for 0x402a04>, <DisassemblerInsn "mov" for 0x402a09>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a12>, <DisassemblerInsn "mov" for 0x402a17>, <DisassemblerInsn "add" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "mov" for 0x402a2e>, <DisassemblerInsn "mov" for 0x402a33>, <DisassemblerInsn "sub" for 0x402a36>, <DisassemblerInsn "cmp" for 0x402a39>, <DisassemblerInsn "jae" for 0x402a3c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ab9>, <DisassemblerInsn "jmp" for 0x402ac1>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d11>, <DisassemblerInsn "mov" for 0x403d19>, <DisassemblerInsn "add" for 0x403d1d>, <DisassemblerInsn "ret" for 0x403d21>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d19>, <DisassemblerInsn "add" for 0x403d1d>, <DisassemblerInsn "ret" for 0x403d21>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403940>, <DisassemblerInsn "mov" for 0x403944>, <DisassemblerInsn "mov" for 0x403949>, <DisassemblerInsn "mov" for 0x40394d>, <DisassemblerInsn "mov" for 0x403952>, <DisassemblerInsn "add" for 0x403957>, <DisassemblerInsn "mov" for 0x40395b>, <DisassemblerInsn "mov" for 0x403960>, <DisassemblerInsn "mov" for 0x403965>, <DisassemblerInsn "mov" for 0x403969>, <DisassemblerInsn "mov" for 0x40396e>, <DisassemblerInsn "sub" for 0x403971>, <DisassemblerInsn "cmp" for 0x403974>, <DisassemblerInsn "jae" for 0x403977>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a90>, <DisassemblerInsn "mov" for 0x402a95>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "mov" for 0x402a9d>, <DisassemblerInsn "mov" for 0x402aa2>, <DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "lea" for 0x402aab>, <DisassemblerInsn "mov" for 0x402ab2>, <DisassemblerInsn "call" for 0x402ab4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "movsxd" for 0x402ac8>, <DisassemblerInsn "movzx" for 0x402acd>, <DisassemblerInsn "or" for 0x402ad1>, <DisassemblerInsn "mov" for 0x402ad4>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402adc>, <DisassemblerInsn "sub" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae3>, <DisassemblerInsn "movsxd" for 0x402ae8>, <DisassemblerInsn "imul" for 0x402aed>, <DisassemblerInsn "add" for 0x402af4>, <DisassemblerInsn "call" for 0x402af7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402afc>, <DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "add" for 0x402b04>, <DisassemblerInsn "ret" for 0x402b08>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "add" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a54>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "mov" for 0x402a68>, <DisassemblerInsn "add" for 0x402a6b>, <DisassemblerInsn "mov" for 0x402a6f>, <DisassemblerInsn "mov" for 0x402a72>, <DisassemblerInsn "mov" for 0x402a77>, <DisassemblerInsn "movzx" for 0x402a7a>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "cmp" for 0x402a8b>, <DisassemblerInsn "jl" for 0x402a8e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a4b>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402b00>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x4c], 0>', '<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp - 0x58], rdi>', '<mov~~dword ptr [rsp - 0x5c], esi>', '<mov~~qword ptr [rsp - 0x68], rdx>', '<mov~~rax, qword ptr [rsp - 0x58]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp - 0x30], rax>', '<mov~~rax, qword ptr [rsp - 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x403986>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rax + 0x70]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x40ac]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x403940>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0x70]>', '<jl~~0x402ac3>']}], 'cfg_edge_info': [(0, 1), (2, 4), (30, 14), (11, 14), (4, 6), (4, 14), (0, 2), (5, 10), (10, 3), (2, 5), (1, 3)], 'cdg_edge_info': [(2, 14), (0, 1), (2, 4), (2, 10), (0, 3), (2, 3), (0, 2), (2, 5)], 'ddg_edge_info': [(0, 1), (2, 4), (0, 4), (10, 14), (5, 14), (0, 14), (1, 14), (0, 2), (5, 10), (0, 5), (2, 5)]}]}
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jl\t.LBB8_4'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 36, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 42, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 43, 'instruction': 'jmp\t.LBB8_5'}, {'instIndex': 44, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 47, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 48, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 62, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 65, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 67, 'instruction': 'callq\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movq\t0x20(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'cmpl\t0x70(%rcx), %eax'}, {'instIndex': 33, 'instruction': 'jl\t.LBB10_4'}, {'instIndex': 34, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 35, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t4(%rsp), %ecx'}, {'instIndex': 37, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movl\t0x70(%rax), %r8d'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x13(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB10_5'}, {'instIndex': 45, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 47, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 48, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 49, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 52, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 53, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 54, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 56, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 57, 'instruction': 'callq\tget_qcx'}, {'instIndex': 58, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 60, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 61, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o---after
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.232474
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.107218
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O1/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o---after
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.157936
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.132809
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O2/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o---after
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.134188
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.130830
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/O3/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.s---get_coc---after
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.s---get_qcc---after
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o---after
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.103038
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.113350
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_after/Os/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14---a/libavcodec/jpeg2000dec.c
The case of compiler gcc with optimization no.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/no/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/no/jpeg2000dec_gcc.s---get_coc---before
function id: 124
function flag: True
There are 77 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'cltq'}, {'instIndex': 37, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 38, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 55, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 56, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 59, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 62, 'instruction': 'call\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/no/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/no/jpeg2000dec_gcc.s---get_qcc---before
function id: 127
function flag: True
There are 60 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L216'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L217'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 40, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 42, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 43, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 46, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 47, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 48, 'instruction': 'cltq'}, {'instIndex': 49, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 52, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\tget_qcx'}, {'instIndex': 58, 'instruction': 'addq\t$0x40, %rsp'}, {'instIndex': 59, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/no/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'cltq'}, {'instIndex': 37, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 38, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 55, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 56, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 59, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 62, 'instruction': 'call\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L216'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L217'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 40, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 42, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 43, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 46, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 47, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 48, 'instruction': 'cltq'}, {'instIndex': 49, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 52, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\tget_qcx'}, {'instIndex': 58, 'instruction': 'addq\t$0x40, %rsp'}, {'instIndex': 59, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O0/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O0/jpeg2000dec_gcc.s---get_coc---before
function id: 124
function flag: True
There are 77 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'cltq'}, {'instIndex': 37, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 38, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 55, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 56, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 59, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 62, 'instruction': 'call\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O0/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O0/jpeg2000dec_gcc.s---get_qcc---before
function id: 127
function flag: True
There are 60 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L216'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L217'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 40, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 42, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 43, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 46, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 47, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 48, 'instruction': 'cltq'}, {'instIndex': 49, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 52, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\tget_qcx'}, {'instIndex': 58, 'instruction': 'addq\t$0x40, %rsp'}, {'instIndex': 59, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O0/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 20, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'cltq'}, {'instIndex': 37, 'instruction': 'imulq\t$0x4e, %rax, %rax'}, {'instIndex': 38, 'instruction': 'addq\t%rax, 0x10(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 55, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 56, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movb\t%dl, 5(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 59, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 62, 'instruction': 'call\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 8, 'instruction': 'movq\t%rax, 0x28(%rsp)'}, {'instIndex': 15, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 16, 'instruction': 'jne\t.L216'}, {'instIndex': 17, 'instruction': 'movl\t$-0x3ebbb1b7, %eax'}, {'instIndex': 18, 'instruction': 'jmp\t.L217'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 35, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 36, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movslq\t%eax, %rdx'}, {'instIndex': 38, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 40, 'instruction': 'movzbl\t(%rax), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 42, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 43, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 45, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 46, 'instruction': 'movb\t%dl, (%rax)'}, {'instIndex': 47, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 48, 'instruction': 'cltq'}, {'instIndex': 49, 'instruction': 'imulq\t$0x1e4, %rax, %rdx'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 52, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 53, 'instruction': 'leal\t-1(%rax), %ecx'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\tget_qcx'}, {'instIndex': 58, 'instruction': 'addq\t$0x40, %rsp'}, {'instIndex': 59, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O1/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O1/jpeg2000dec_gcc.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O1/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O1/jpeg2000dec_gcc.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O1/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O2/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O2/jpeg2000dec_gcc.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O2/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O2/jpeg2000dec_gcc.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O2/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O3/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O3/jpeg2000dec_gcc.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O3/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O3/jpeg2000dec_gcc.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/O3/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/Os/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/Os/jpeg2000dec_gcc.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/Os/jpeg2000dec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/Os/jpeg2000dec_gcc.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/gcc_before/Os/jpeg2000dec.o
Binary file does not exist.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.s---get_coc---before
function id: 8
function flag: True
There are 62 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 32, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 33, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 47, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 52, 'instruction': 'callq\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.s---get_qcc---before
function id: 10
function flag: True
There are 47 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_3'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 33, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 37, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 38, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 39, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 41, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 42, 'instruction': 'callq\tget_qcx'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 46, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.o---before
The extraction of function: get_coc
Analyzing the binaries to generate subCFGs from patched function ...
It has 925 nodes and 1470 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 62 instructions in binary file.
[4204247]
The extraction of function: get_qcc
Analyzing the binaries to generate subCFGs from patched function ...
It has 925 nodes and 1470 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 47 instructions in binary file.
[4204992, 4205054, 4205064, 4205176, 4205180]
The execution time of patched subCFG information extraction via angr: 0:00:02.270546
{'get_coc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402772>, <DisassemblerInsn "movsxd" for 0x402777>, <DisassemblerInsn "movzx" for 0x40277c>, <DisassemblerInsn "or" for 0x402780>, <DisassemblerInsn "mov" for 0x402783>, <DisassemblerInsn "mov" for 0x402786>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "movsxd" for 0x402717>, <DisassemblerInsn "imul" for 0x40271a>, <DisassemblerInsn "add" for 0x40271e>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "add" for 0x40272b>, <DisassemblerInsn "mov" for 0x40272f>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "add" for 0x402746>, <DisassemblerInsn "mov" for 0x40274a>, <DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "movzx" for 0x402755>, <DisassemblerInsn "mov" for 0x402759>, <DisassemblerInsn "mov" for 0x40275b>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402763>, <DisassemblerInsn "mov" for 0x402768>, <DisassemblerInsn "call" for 0x40276d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403510>']}], 'cfg_edge_info': [(0, 2), (2, 4)]}], 'get_qcc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c9>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d2>, <DisassemblerInsn "mov" for 0x4029d7>, <DisassemblerInsn "add" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ea>, <DisassemblerInsn "mov" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "sub" for 0x4029f6>, <DisassemblerInsn "cmp" for 0x4029f9>, <DisassemblerInsn "jae" for 0x4029fc>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fe>, <DisassemblerInsn "jmp" for 0x402a06>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a08>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "add" for 0x402a28>, <DisassemblerInsn "mov" for 0x402a2c>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "movzx" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3f>, <DisassemblerInsn "movsxd" for 0x402a44>, <DisassemblerInsn "movzx" for 0x402a49>, <DisassemblerInsn "or" for 0x402a4d>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "sub" for 0x402a5c>, <DisassemblerInsn "mov" for 0x402a5f>, <DisassemblerInsn "movsxd" for 0x402a64>, <DisassemblerInsn "imul" for 0x402a69>, <DisassemblerInsn "add" for 0x402a70>, <DisassemblerInsn "call" for 0x402a73>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a08>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402a7c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x4038c0>']}], 'cfg_edge_info': [(0, 1), (0, 2), (1, 3), (2, 4)]}]}
{'get_coc': [4204247], 'get_qcc': [4204992, 4205054, 4205064, 4205176, 4205180]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/no/jpeg2000dec.o---before
The extraction of function: get_coc
[4204247]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 52 edges in CFGEmulated.
It has 35 nodes and 55 edges in CDG.
It has 1061 nodes and 1306 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204247]
{4204234, 4204430, 4204176, 4204402, 4204247}
[3, 7, 4, 10, 0, 1, 2, 25]
The extraction of function: get_qcc
[4204992, 4205054, 4205064, 4205176, 4205180]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 50 edges in CFGEmulated.
It has 35 nodes and 50 edges in CDG.
It has 1100 nodes and 1345 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204992, 4205054, 4205064, 4205176, 4205180]
{4204992, 4205064, 4205176, 4205180, 4205054}
[0, 3, 2, 10, 26, 4, 1, 7]
The execution time of patched slicing information extraction via angr: 0:00:10.462545
{'get_coc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4038a5>, <DisassemblerInsn "add" for 0x4038a9>, <DisassemblerInsn "ret" for 0x4038b0>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403510>, <DisassemblerInsn "mov" for 0x403517>, <DisassemblerInsn "mov" for 0x40351c>, <DisassemblerInsn "mov" for 0x403521>, <DisassemblerInsn "add" for 0x403526>, <DisassemblerInsn "mov" for 0x40352a>, <DisassemblerInsn "mov" for 0x40352f>, <DisassemblerInsn "mov" for 0x403534>, <DisassemblerInsn "mov" for 0x403538>, <DisassemblerInsn "mov" for 0x40353d>, <DisassemblerInsn "sub" for 0x403540>, <DisassemblerInsn "cmp" for 0x403543>, <DisassemblerInsn "jae" for 0x403546>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402772>, <DisassemblerInsn "movsxd" for 0x402777>, <DisassemblerInsn "movzx" for 0x40277c>, <DisassemblerInsn "or" for 0x402780>, <DisassemblerInsn "mov" for 0x402783>, <DisassemblerInsn "mov" for 0x402786>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ca>, <DisassemblerInsn "jmp" for 0x4026d2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "movsxd" for 0x402717>, <DisassemblerInsn "imul" for 0x40271a>, <DisassemblerInsn "add" for 0x40271e>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "add" for 0x40272b>, <DisassemblerInsn "mov" for 0x40272f>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "add" for 0x402746>, <DisassemblerInsn "mov" for 0x40274a>, <DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "movzx" for 0x402755>, <DisassemblerInsn "mov" for 0x402759>, <DisassemblerInsn "mov" for 0x40275b>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402763>, <DisassemblerInsn "mov" for 0x402768>, <DisassemblerInsn "call" for 0x40276d>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40389d>, <DisassemblerInsn "mov" for 0x4038a5>, <DisassemblerInsn "add" for 0x4038a9>, <DisassemblerInsn "ret" for 0x4038b0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x98>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 5>', '<jae~~0x403555>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x40278e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403510>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (7, 10), (2, 10), (0, 2), (1, 3), (25, 10)], 'cdg_edge_info': [(0, 1), (0, 2), (0, 3), (0, 10)], 'ddg_edge_info': [(0, 1), (0, 10), (2, 10), (0, 2), (1, 10)]}], 'get_qcc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c9>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d2>, <DisassemblerInsn "mov" for 0x4029d7>, <DisassemblerInsn "add" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ea>, <DisassemblerInsn "mov" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "sub" for 0x4029f6>, <DisassemblerInsn "cmp" for 0x4029f9>, <DisassemblerInsn "jae" for 0x4029fc>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a08>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "add" for 0x402a28>, <DisassemblerInsn "mov" for 0x402a2c>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "movzx" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3f>, <DisassemblerInsn "movsxd" for 0x402a44>, <DisassemblerInsn "movzx" for 0x402a49>, <DisassemblerInsn "or" for 0x402a4d>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "sub" for 0x402a5c>, <DisassemblerInsn "mov" for 0x402a5f>, <DisassemblerInsn "movsxd" for 0x402a64>, <DisassemblerInsn "imul" for 0x402a69>, <DisassemblerInsn "add" for 0x402a70>, <DisassemblerInsn "call" for 0x402a73>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c91>, <DisassemblerInsn "mov" for 0x403c99>, <DisassemblerInsn "add" for 0x403c9d>, <DisassemblerInsn "ret" for 0x403ca1>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4038c0>, <DisassemblerInsn "mov" for 0x4038c4>, <DisassemblerInsn "mov" for 0x4038c9>, <DisassemblerInsn "mov" for 0x4038cd>, <DisassemblerInsn "mov" for 0x4038d2>, <DisassemblerInsn "add" for 0x4038d7>, <DisassemblerInsn "mov" for 0x4038db>, <DisassemblerInsn "mov" for 0x4038e0>, <DisassemblerInsn "mov" for 0x4038e5>, <DisassemblerInsn "mov" for 0x4038e9>, <DisassemblerInsn "mov" for 0x4038ee>, <DisassemblerInsn "sub" for 0x4038f1>, <DisassemblerInsn "cmp" for 0x4038f4>, <DisassemblerInsn "jae" for 0x4038f7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fe>, <DisassemblerInsn "jmp" for 0x402a06>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c99>, <DisassemblerInsn "add" for 0x403c9d>, <DisassemblerInsn "ret" for 0x403ca1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a08>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x4038c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp - 0x4c], 0>', '<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp - 0x58], rdi>', '<mov~~dword ptr [rsp - 0x5c], esi>', '<mov~~qword ptr [rsp - 0x68], rdx>', '<mov~~rax, qword ptr [rsp - 0x58]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp - 0x30], rax>', '<mov~~rax, qword ptr [rsp - 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x403906>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402a7c>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (7, 10), (2, 10), (26, 10), (0, 2), (1, 3)], 'cdg_edge_info': [(0, 1), (0, 2), (0, 3), (0, 10)], 'ddg_edge_info': [(0, 1), (0, 2), (0, 10), (1, 10)]}]}
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 32, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 33, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 47, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 52, 'instruction': 'callq\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_3'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 33, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 37, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 38, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 39, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 41, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 42, 'instruction': 'callq\tget_qcx'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 46, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.s---get_coc---before
function id: 8
function flag: True
There are 62 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 32, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 33, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 47, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 52, 'instruction': 'callq\tget_cox'}]}]
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.s---get_qcc---before
function id: 10
function flag: True
There are 47 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_3'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 33, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 37, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 38, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 39, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 41, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 42, 'instruction': 'callq\tget_qcx'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 46, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.o---before
The extraction of function: get_coc
Analyzing the binaries to generate subCFGs from patched function ...
It has 925 nodes and 1470 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 62 instructions in binary file.
[4204247]
The extraction of function: get_qcc
Analyzing the binaries to generate subCFGs from patched function ...
It has 925 nodes and 1470 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 47 instructions in binary file.
[4204992, 4205054, 4205064, 4205176, 4205180]
The execution time of patched subCFG information extraction via angr: 0:00:02.308265
{'get_coc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402772>, <DisassemblerInsn "movsxd" for 0x402777>, <DisassemblerInsn "movzx" for 0x40277c>, <DisassemblerInsn "or" for 0x402780>, <DisassemblerInsn "mov" for 0x402783>, <DisassemblerInsn "mov" for 0x402786>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "movsxd" for 0x402717>, <DisassemblerInsn "imul" for 0x40271a>, <DisassemblerInsn "add" for 0x40271e>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "add" for 0x40272b>, <DisassemblerInsn "mov" for 0x40272f>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "add" for 0x402746>, <DisassemblerInsn "mov" for 0x40274a>, <DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "movzx" for 0x402755>, <DisassemblerInsn "mov" for 0x402759>, <DisassemblerInsn "mov" for 0x40275b>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402763>, <DisassemblerInsn "mov" for 0x402768>, <DisassemblerInsn "call" for 0x40276d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403510>']}], 'cfg_edge_info': [(0, 2), (2, 4)]}], 'get_qcc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c9>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d2>, <DisassemblerInsn "mov" for 0x4029d7>, <DisassemblerInsn "add" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ea>, <DisassemblerInsn "mov" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "sub" for 0x4029f6>, <DisassemblerInsn "cmp" for 0x4029f9>, <DisassemblerInsn "jae" for 0x4029fc>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fe>, <DisassemblerInsn "jmp" for 0x402a06>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a08>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "add" for 0x402a28>, <DisassemblerInsn "mov" for 0x402a2c>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "movzx" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3f>, <DisassemblerInsn "movsxd" for 0x402a44>, <DisassemblerInsn "movzx" for 0x402a49>, <DisassemblerInsn "or" for 0x402a4d>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "sub" for 0x402a5c>, <DisassemblerInsn "mov" for 0x402a5f>, <DisassemblerInsn "movsxd" for 0x402a64>, <DisassemblerInsn "imul" for 0x402a69>, <DisassemblerInsn "add" for 0x402a70>, <DisassemblerInsn "call" for 0x402a73>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a08>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402a7c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x4038c0>']}], 'cfg_edge_info': [(0, 1), (0, 2), (1, 3), (2, 4)]}]}
{'get_coc': [4204247], 'get_qcc': [4204992, 4205054, 4205064, 4205176, 4205180]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O0/jpeg2000dec.o---before
The extraction of function: get_coc
[4204247]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 52 edges in CFGEmulated.
It has 35 nodes and 55 edges in CDG.
It has 1061 nodes and 1306 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204247]
{4204234, 4204430, 4204176, 4204402, 4204247}
[3, 7, 4, 10, 0, 1, 2, 25]
The extraction of function: get_qcc
[4204992, 4205054, 4205064, 4205176, 4205180]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 50 edges in CFGEmulated.
It has 35 nodes and 50 edges in CDG.
It has 1100 nodes and 1345 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4204992, 4205054, 4205064, 4205176, 4205180]
{4204992, 4205064, 4205176, 4205180, 4205054}
[0, 3, 2, 10, 26, 4, 1, 7]
The execution time of patched slicing information extraction via angr: 0:00:10.589486
{'get_coc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4038a5>, <DisassemblerInsn "add" for 0x4038a9>, <DisassemblerInsn "ret" for 0x4038b0>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x403510>, <DisassemblerInsn "mov" for 0x403517>, <DisassemblerInsn "mov" for 0x40351c>, <DisassemblerInsn "mov" for 0x403521>, <DisassemblerInsn "add" for 0x403526>, <DisassemblerInsn "mov" for 0x40352a>, <DisassemblerInsn "mov" for 0x40352f>, <DisassemblerInsn "mov" for 0x403534>, <DisassemblerInsn "mov" for 0x403538>, <DisassemblerInsn "mov" for 0x40353d>, <DisassemblerInsn "sub" for 0x403540>, <DisassemblerInsn "cmp" for 0x403543>, <DisassemblerInsn "jae" for 0x403546>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402772>, <DisassemblerInsn "movsxd" for 0x402777>, <DisassemblerInsn "movzx" for 0x40277c>, <DisassemblerInsn "or" for 0x402780>, <DisassemblerInsn "mov" for 0x402783>, <DisassemblerInsn "mov" for 0x402786>, <DisassemblerInsn "mov" for 0x40278e>, <DisassemblerInsn "add" for 0x402792>, <DisassemblerInsn "ret" for 0x402796>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402690>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "add" for 0x4026a8>, <DisassemblerInsn "mov" for 0x4026ac>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bf>, <DisassemblerInsn "sub" for 0x4026c2>, <DisassemblerInsn "cmp" for 0x4026c5>, <DisassemblerInsn "jae" for 0x4026c8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ca>, <DisassemblerInsn "jmp" for 0x4026d2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "add" for 0x4026dc>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "mov" for 0x4026ef>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "add" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "mov" for 0x402703>, <DisassemblerInsn "movzx" for 0x402706>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270e>, <DisassemblerInsn "mov" for 0x402712>, <DisassemblerInsn "movsxd" for 0x402717>, <DisassemblerInsn "imul" for 0x40271a>, <DisassemblerInsn "add" for 0x40271e>, <DisassemblerInsn "mov" for 0x402721>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "add" for 0x40272b>, <DisassemblerInsn "mov" for 0x40272f>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "mov" for 0x402739>, <DisassemblerInsn "mov" for 0x40273e>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "add" for 0x402746>, <DisassemblerInsn "mov" for 0x40274a>, <DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402752>, <DisassemblerInsn "movzx" for 0x402755>, <DisassemblerInsn "mov" for 0x402759>, <DisassemblerInsn "mov" for 0x40275b>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402763>, <DisassemblerInsn "mov" for 0x402768>, <DisassemblerInsn "call" for 0x40276d>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40389d>, <DisassemblerInsn "mov" for 0x4038a5>, <DisassemblerInsn "add" for 0x4038a9>, <DisassemblerInsn "ret" for 0x4038b0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x98>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 5>', '<jae~~0x403555>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rsp + 0xc]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 1>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 2>', '<jae~~0x4026d7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x40278e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<imul~~rcx, rcx, 0x4e>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~cl, al>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~byte ptr [rax + 5], cl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x403510>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x98>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (7, 10), (2, 10), (0, 2), (1, 3), (25, 10)], 'cdg_edge_info': [(0, 1), (0, 2), (0, 3), (0, 10)], 'ddg_edge_info': [(0, 1), (0, 10), (2, 10), (0, 2), (1, 10)]}], 'get_qcc': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029c9>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d2>, <DisassemblerInsn "mov" for 0x4029d7>, <DisassemblerInsn "add" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "mov" for 0x4029e5>, <DisassemblerInsn "mov" for 0x4029ea>, <DisassemblerInsn "mov" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "sub" for 0x4029f6>, <DisassemblerInsn "cmp" for 0x4029f9>, <DisassemblerInsn "jae" for 0x4029fc>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a08>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a25>, <DisassemblerInsn "add" for 0x402a28>, <DisassemblerInsn "mov" for 0x402a2c>, <DisassemblerInsn "mov" for 0x402a2f>, <DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "movzx" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3f>, <DisassemblerInsn "movsxd" for 0x402a44>, <DisassemblerInsn "movzx" for 0x402a49>, <DisassemblerInsn "or" for 0x402a4d>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "sub" for 0x402a5c>, <DisassemblerInsn "mov" for 0x402a5f>, <DisassemblerInsn "movsxd" for 0x402a64>, <DisassemblerInsn "imul" for 0x402a69>, <DisassemblerInsn "add" for 0x402a70>, <DisassemblerInsn "call" for 0x402a73>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "add" for 0x402a80>, <DisassemblerInsn "ret" for 0x402a84>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c91>, <DisassemblerInsn "mov" for 0x403c99>, <DisassemblerInsn "add" for 0x403c9d>, <DisassemblerInsn "ret" for 0x403ca1>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4038c0>, <DisassemblerInsn "mov" for 0x4038c4>, <DisassemblerInsn "mov" for 0x4038c9>, <DisassemblerInsn "mov" for 0x4038cd>, <DisassemblerInsn "mov" for 0x4038d2>, <DisassemblerInsn "add" for 0x4038d7>, <DisassemblerInsn "mov" for 0x4038db>, <DisassemblerInsn "mov" for 0x4038e0>, <DisassemblerInsn "mov" for 0x4038e5>, <DisassemblerInsn "mov" for 0x4038e9>, <DisassemblerInsn "mov" for 0x4038ee>, <DisassemblerInsn "sub" for 0x4038f1>, <DisassemblerInsn "cmp" for 0x4038f4>, <DisassemblerInsn "jae" for 0x4038f7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fe>, <DisassemblerInsn "jmp" for 0x402a06>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403c99>, <DisassemblerInsn "add" for 0x403c9d>, <DisassemblerInsn "ret" for 0x403ca1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x402a08>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<add~~rcx, 1>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax]>', '<movzx~~eax, byte ptr [rax - 1]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<movzx~~edx, byte ptr [rax + rcx]>', '<or~~edx, 2>', '<mov~~byte ptr [rax + rcx], dl>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<sub~~esi, 1>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<movsxd~~rax, dword ptr [rsp + 4]>', '<imul~~rax, rax, 0x1e4>', '<add~~rdx, rax>', '<call~~0x4038c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp - 0x4c], 0>', '<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp - 0x58], rdi>', '<mov~~dword ptr [rsp - 0x5c], esi>', '<mov~~qword ptr [rsp - 0x68], rdx>', '<mov~~rax, qword ptr [rsp - 0x58]>', '<add~~rax, 0x10>', '<mov~~qword ptr [rsp - 0x30], rax>', '<mov~~rax, qword ptr [rsp - 0x30]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp - 0x30]>', '<mov~~rcx, qword ptr [rcx]>', '<sub~~rax, rcx>', '<cmp~~eax, 1>', '<jae~~0x403906>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xc1444e49>', '<jmp~~0x402a7c>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 0x4c]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (7, 10), (2, 10), (26, 10), (0, 2), (1, 3)], 'cdg_edge_info': [(0, 1), (0, 2), (0, 3), (0, 10)], 'ddg_edge_info': [(0, 1), (0, 2), (0, 10), (1, 10)]}]}
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 16, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x40(%rsp)'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t12(%rsp), %ecx'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 32, 'instruction': 'imulq\t$0x4e, %rcx, %rcx'}, {'instIndex': 33, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 47, 'instruction': 'movb\t%al, %cl'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movb\t%cl, 5(%rax)'}, {'instIndex': 50, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 52, 'instruction': 'callq\tget_cox'}]}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB10_2'}, {'instIndex': 15, 'instruction': 'movl\t$-0x3ebbb1b7, 0x2c(%rsp)          # imm = 0xC0x5a4E0x31'}, {'instIndex': 16, 'instruction': 'jmp\t.LBB10_3'}, {'instIndex': 17, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x10, %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t%eax, 4(%rsp)'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movslq\t4(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movzbl\t(%rax,%rcx), %edx'}, {'instIndex': 33, 'instruction': 'orl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movb\t%dl, (%rax,%rcx)'}, {'instIndex': 35, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 36, 'instruction': 'movl\t0x1c(%rsp), %esi'}, {'instIndex': 37, 'instruction': 'subl\t$1, %esi'}, {'instIndex': 38, 'instruction': 'movq\t0x10(%rsp), %rdx'}, {'instIndex': 39, 'instruction': 'movslq\t4(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'imulq\t$0x1e4, %rax, %rax                # imm = 0x1E4'}, {'instIndex': 41, 'instruction': 'addq\t%rax, %rdx'}, {'instIndex': 42, 'instruction': 'callq\tget_qcx'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 46, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o---before
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.214094
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.108849
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O1/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o---before
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.112144
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.115452
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O2/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o---before
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.113522
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.140092
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/O3/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: jpeg2000dec.c
Patched function: 1---static int get_coc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.s---get_coc---before
There are 0 instructions for function: get_coc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '362', 'end': 374}, 'before': {'start': '362', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_coc from assembly files.
Patched function: 1---static int get_qcc 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.s---get_qcc---before
There are 0 instructions for function: get_qcc in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '447', 'end': 461}, 'before': {'start': '440', 'end': 446}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: get_qcc from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o---before
The extraction of function: get_coc
There is no function: get_coc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o
The extraction of function: get_qcc
There is no function: get_qcc in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o
The execution time of patched subCFG information extraction via angr: 0:00:00.108100
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.100325
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eae63e3c156f784ee0612422f0c95131ea913c14/clang_before/Os/jpeg2000dec.o.
{'get_coc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'get_qcc': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/patch_info.txt
{'1': {'before': 'a/ffmpeg.c', 'after': 'b/ffmpeg.c'}, '2': {'before': 'a/libavformat/ffm.c', 'after': 'b/libavformat/ffm.c'}, '3': {'before': 'a/vhook/fish.c', 'after': 'b/vhook/fish.c'}, '4': {'before': 'a/vhook/imlib2.c', 'after': 'b/vhook/imlib2.c'}}
{'1': [{'before': '-1870,7', 'after': '+1870,7', 'function': 'void opt_audio_channels'}, {'before': '-1880,7', 'after': '+1880,7', 'function': 'void opt_video_channel'}, {'before': '-1916,7', 'after': '+1916,7', 'function': 'void add_frame_hooker'}, {'before': '-2812,7', 'after': '+2812,7', 'function': 'int main'}], '2': [{'before': '-421,7', 'after': '+421,7', 'function': 'static int ffm_read_header'}], '3': [{'before': '-134,7', 'after': '+134,7', 'function': 'int Configure'}], '4': [{'before': '-112,10', 'after': '+112,10', 'function': 'int Configure'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---b/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---a/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/Os: directory not exists.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---b/libavformat/ffm.c
The case of compiler gcc with optimization no.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---a/libavformat/ffm.c
The case of compiler gcc with optimization no.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffm.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/Os: directory not exists.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---b/vhook/fish.c
The case of compiler gcc with optimization no.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---a/vhook/fish.c
The case of compiler gcc with optimization no.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: fish.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/Os: directory not exists.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---b/vhook/imlib2.c
The case of compiler gcc with optimization no.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c---a/vhook/imlib2.c
The case of compiler gcc with optimization no.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: imlib2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e9a9e0c21090d18089d212c39e9249f9a7ed559c/clang_before/Os: directory not exists.
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/patch_info.txt
{'1': {'before': 'a/libavformat/daud.c', 'after': 'b/libavformat/daud.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46---b/libavformat/daud.c
The case of compiler gcc with optimization no.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46---a/libavformat/daud.c
The case of compiler gcc with optimization no.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: daud.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e8bd16a5e1d0df6cfe5900621a453a74c6540f46/clang_before/Os: directory not exists.
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/patch_info.txt
{'1': {'before': 'a/libavutil/hwcontext_dxva2.c', 'after': 'b/libavutil/hwcontext_dxva2.c'}}
{'1': [{'before': '-315,6', 'after': '+315,9', 'function': 'static int dxva2_transfer_data_to'}, {'before': '-339,6', 'after': '+342,9', 'function': 'static int dxva2_transfer_data_from'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423---b/libavutil/hwcontext_dxva2.c
The case of compiler gcc with optimization no.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423---a/libavutil/hwcontext_dxva2.c
The case of compiler gcc with optimization no.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: hwcontext_dxva2.c
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/e18ba2dfd2d19aedc8afccf011d5fd0833352423/clang_before/Os: directory not exists.
The analysis of 16 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/ee3509d94e0baf7c42095723e62dd35bb1054f91/patch_info.txt
{}
{}
The analysis of 17 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/patch_info.txt
{'1': {'before': 'a/libavformat/electronicarts.c', 'after': 'b/libavformat/electronicarts.c'}}
{'1': [{'before': '-352,6', 'after': '+354,10', 'function': 'static int process_ea_header'}, {'before': '-508,9', 'after': '+514,12', 'function': 'static int ea_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8---b/libavformat/electronicarts.c
The case of compiler gcc with optimization no.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/no/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/no/electronicarts_gcc.s---process_ea_header---after
function id: 20
function flag: True
There are 221 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 170, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 172, 'instruction': 'jmp\t.L69'}, {'instIndex': 173, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 175, 'instruction': 'jmp\t.L69'}, {'instIndex': 176, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 177, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 178, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 179, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 180, 'instruction': 'nop'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/no/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/no/electronicarts_gcc.s---ea_read_packet---after
function id: 23
function flag: True
There are 298 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 247, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 248, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 249, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 250, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 251, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 252, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 253, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 254, 'instruction': 'jmp\t.L111'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/no/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 170, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 172, 'instruction': 'jmp\t.L69'}, {'instIndex': 173, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 175, 'instruction': 'jmp\t.L69'}, {'instIndex': 176, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 177, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 178, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 179, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 180, 'instruction': 'nop'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 247, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 248, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 249, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 250, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 251, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 252, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 253, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 254, 'instruction': 'jmp\t.L111'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O0/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O0/electronicarts_gcc.s---process_ea_header---after
function id: 20
function flag: True
There are 221 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 170, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 172, 'instruction': 'jmp\t.L69'}, {'instIndex': 173, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 175, 'instruction': 'jmp\t.L69'}, {'instIndex': 176, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 177, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 178, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 179, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 180, 'instruction': 'nop'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O0/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O0/electronicarts_gcc.s---ea_read_packet---after
function id: 23
function flag: True
There are 298 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 247, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 248, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 249, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 250, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 251, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 252, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 253, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 254, 'instruction': 'jmp\t.L111'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O0/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 170, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 172, 'instruction': 'jmp\t.L69'}, {'instIndex': 173, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 175, 'instruction': 'jmp\t.L69'}, {'instIndex': 176, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 177, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 178, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 179, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 180, 'instruction': 'nop'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 247, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 248, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 249, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 250, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 251, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 252, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 253, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 254, 'instruction': 'jmp\t.L111'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O1/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O1/electronicarts_gcc.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O1/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O1/electronicarts_gcc.s---ea_read_packet---after
function id: 1
function flag: True
There are 788 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t%ebp, %edx'}, {'instIndex': 31, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 32, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 33, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 34, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 35, 'instruction': 'jmp\t.L24'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O1/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'movl\t%ebp, %edx'}, {'instIndex': 31, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 32, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 33, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 34, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 35, 'instruction': 'jmp\t.L24'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O2/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O2/electronicarts_gcc.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O2/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O2/electronicarts_gcc.s---ea_read_packet---after
function id: 1
function flag: True
There are 868 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 34, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 35, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 37, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 38, 'instruction': 'call\turl_fseek@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O2/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 34, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 35, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 37, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 38, 'instruction': 'call\turl_fseek@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O3/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O3/electronicarts_gcc.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O3/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O3/electronicarts_gcc.s---ea_read_packet---after
function id: 1
function flag: True
There are 871 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 36, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t%ebp, %r14d'}, {'instIndex': 39, 'instruction': 'call\turl_fseek@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/O3/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 36, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t%ebp, %r14d'}, {'instIndex': 39, 'instruction': 'call\turl_fseek@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/Os/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/Os/electronicarts_gcc.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/Os/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/Os/electronicarts_gcc.s---ea_read_packet---after
function id: 1
function flag: True
There are 681 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 147, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 148, 'instruction': 'movd\t%xmm0, 12(%rsp)'}, {'instIndex': 149, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 150, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 151, 'instruction': 'movd\t12(%rsp), %xmm0'}, {'instIndex': 152, 'instruction': 'jmp\t.L22'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_after/Os/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 147, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 148, 'instruction': 'movd\t%xmm0, 12(%rsp)'}, {'instIndex': 149, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 150, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 151, 'instruction': 'movd\t12(%rsp), %xmm0'}, {'instIndex': 152, 'instruction': 'jmp\t.L22'}]}]}
The case of compiler clang with optimization no.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.s---process_ea_header---after
function id: 3
function flag: True
There are 223 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 183, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 184, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 185, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 186, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 188, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 190, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 191, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 291 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 242, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 244, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 245, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 246, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 247, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 249, 'instruction': 'jmp\t.LBB2_26'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.o---after
The extraction of function: process_ea_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 364 nodes and 611 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 223 instructions in binary file.
[4197081, 4197095, 4197109, 4197119]
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 364 nodes and 611 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 291 instructions in binary file.
[4196047, 4196055, 4196077]
The execution time of patched subCFG information extraction via angr: 0:00:01.706929
{'process_ea_header': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "call" for 0x400afa>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b35>, <DisassemblerInsn "add" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3d>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "xor" for 0x400b41>, <DisassemblerInsn "call" for 0x400b43>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "lea" for 0x400b18>, <DisassemblerInsn "mov" for 0x400b1f>, <DisassemblerInsn "call" for 0x400b21>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ade>, <DisassemblerInsn "jmp" for 0x400ae5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400900>, <DisassemblerInsn "sub" for 0x400904>, <DisassemblerInsn "je" for 0x400909>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "sub" for 0x400955>, <DisassemblerInsn "je" for 0x40095a>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae7>, <DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "jmp" for 0x400af3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400af5>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401370>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e0]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400b03>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400ad9>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6b44414d>', '<je~~0x400ae7>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x87>', '<jmp~~0x400b03>']}], 'cfg_edge_info': [(49, 20), (68, 20), (48, 49), (65, 68), (52, 54), (51, 52), (54, 24), (54, 23)]}], 'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fd>, <DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "je" for 0x400506>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "sub" for 0x400512>, <DisassemblerInsn "je" for 0x400517>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "add" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "jmp" for 0x4006f8>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072f>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "sub" for 0x4004d2>, <DisassemblerInsn "je" for 0x4004d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x4006cf>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006d7>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4006d7>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6544414d>', '<je~~0x4006d7>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x4006cf>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x4006cf>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x4006cf>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006d7>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6b44414d>', '<je~~0x4006cf>']}], 'cfg_edge_info': [(63, 64), (92, 64), (64, 62), (62, 31), (60, 62), (94, 60), (59, 60), (66, 60), (80, 60), (76, 64), (86, 60), (72, 64)]}]}
{'process_ea_header': [4197081, 4197095, 4197109, 4197119], 'ea_read_packet': [4196047, 4196055, 4196077]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/no/electronicarts.o---after
The extraction of function: process_ea_header
[4197081, 4197095, 4197109, 4197119]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 323 nodes and 479 edges in CFGEmulated.
It has 323 nodes and 452 edges in CDG.
It has 2689 nodes and 5166 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197081, 4197095, 4197109, 4197119]
{4196608, 4196993, 4197123, 4196484, 4196739, 4196869, 4196355, 4197130, 4196749, 4196623, 4196625, 4196756, 4196373, 4196381, 4196893, 4196640, 4196642, 4196389, 4197158, 4196519, 4196906, 4196394, 4196908, 4196780, 4197168, 4196657, 4196272, 4196659, 4196404, 4196918, 4197047, 4196793, 4196540, 4197053, 4196803, 4196676, 4197192, 4196937, 4196426, 4196812, 4196687, 4196689, 4196946, 4196822, 4197208, 4197081, 4196440, 4196574, 4196704, 4196706, 4196451, 4196325, 4197095, 4197224, 4196717, 4196591, 4197232, 4196719, 4196338, 4197109, 4196853, 4196474, 4196606, 4197119}
[49, 11, 74, 70, 120, 65, 172, 170, 69, 76, 130, 48, 29, 300, 164, 33, 116, 71, 86, 18, 52, 107, 53, 43, 67, 15, 117, 162, 2, 190, 181, 80, 87, 55, 98, 64, 308, 4, 119, 148, 142, 150, 66, 25, 42, 13, 68, 156, 180, 37, 60, 17, 16, 155, 5, 133, 0, 99, 81, 46, 21, 45, 47, 75, 3, 41, 59, 157, 6, 54, 1, 19, 58, 10, 40, 163, 113, 7, 143, 23, 20, 26, 57, 32, 56, 154]
The extraction of function: ea_read_packet
[4196047, 4196055, 4196077]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 110 nodes and 158 edges in CFGEmulated.
It has 110 nodes and 258 edges in CDG.
It has 1313 nodes and 1633 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4196047, 4196055, 4196077]
{4195334, 4195349, 4195351, 4195366, 4195368, 4195383, 4195385, 4195898, 4195911, 4195400, 4195402, 4195924, 4195417, 4195419, 4195434, 4195436, 4195958, 4195451, 4195453, 4195975, 4195468, 4195470, 4195485, 4195487, 4195502, 4195504, 4196026, 4195519, 4195521, 4195532, 4195534, 4196047, 4196055, 4195549, 4195551, 4195562, 4195564, 4196077, 4195056, 4196090, 4195579, 4195581, 4195596, 4195598, 4196110, 4196123, 4195613, 4195618, 4196133, 4195633, 4196152, 4195130, 4195644, 4196163, 4195655, 4195144, 4195149, 4196173, 4195159, 4195676, 4195173, 4195690, 4195183, 4195189, 4196214, 4195704, 4195199, 4195714, 4195203, 4196235, 4196240, 4195733, 4196248, 4195232, 4195746, 4195249, 4195765, 4195776, 4195266, 4195789, 4195283, 4195300, 4195317}
[61, 83, 34, 105, 103, 72, 0, 68, 32, 87, 5, 53, 57, 90, 6, 89, 28, 82, 62, 65, 79, 16, 59, 75, 7, 54, 33, 100, 84, 108, 20, 27, 95, 107, 77, 40, 60, 80, 47, 78, 42, 19, 94, 13, 93, 63, 91, 30, 18, 104, 81, 46, 64, 69, 67, 92, 2, 101, 86, 56, 52, 36, 10, 99, 102, 48, 74, 49, 24, 25, 41, 17, 97, 73, 106, 14, 22, 1, 50, 66, 45, 55, 58, 12, 85, 35, 51, 88, 26, 15, 39, 44, 21, 70, 11, 4, 98]
The execution time of patched slicing information extraction via angr: 0:01:09.252247
{'process_ea_header': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a49>, <DisassemblerInsn "jmp" for 0x400a4d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b68>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "add" for 0x400b74>, <DisassemblerInsn "ret" for 0x400b78>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "add" for 0x400b74>, <DisassemblerInsn "ret" for 0x400b78>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ade>, <DisassemblerInsn "jmp" for 0x400ae5>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400942>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab7>, <DisassemblerInsn "jmp" for 0x400abb>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40096d>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b80>, <DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "mov" for 0x400b97>, <DisassemblerInsn "mov" for 0x400b9c>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "cmp" for 0x400baa>, <DisassemblerInsn "je" for 0x400bad>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b26>, <DisassemblerInsn "mov" for 0x400b2a>, <DisassemblerInsn "jmp" for 0x400b2e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "jmp" for 0x400a3a>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "sub" for 0x4008f3>, <DisassemblerInsn "je" for 0x4008f8>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "sub" for 0x4008d1>, <DisassemblerInsn "je" for 0x4008d6>]'}, {'block_Idx': 300, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cbe>, <DisassemblerInsn "add" for 0x400cc3>, <DisassemblerInsn "ret" for 0x400cc7>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "sub" for 0x400966>, <DisassemblerInsn "je" for 0x40096b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008dc>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401220>, <DisassemblerInsn "mov" for 0x401224>, <DisassemblerInsn "mov" for 0x401229>, <DisassemblerInsn "cmp" for 0x40122e>, <DisassemblerInsn "cmove" for 0x401231>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x401239>, <DisassemblerInsn "mov" for 0x40123c>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40090f>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401370>, <DisassemblerInsn "mov" for 0x401374>, <DisassemblerInsn "mov" for 0x401379>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401382>, <DisassemblerInsn "mov" for 0x401387>, <DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "call" for 0x40139d>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "sub" for 0x4008af>, <DisassemblerInsn "je" for 0x4008b4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400a2a>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "sub" for 0x400937>, <DisassemblerInsn "je" for 0x40093c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a05>, <DisassemblerInsn "mov" for 0x400a0a>, <DisassemblerInsn "lea" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a16>, <DisassemblerInsn "call" for 0x400a18>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012b3>, <DisassemblerInsn "mov" for 0x4012b5>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012c9>, <DisassemblerInsn "add" for 0x4012ce>, <DisassemblerInsn "ret" for 0x4012d2>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a1d>, <DisassemblerInsn "jmp" for 0x400a25>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400858>, <DisassemblerInsn "cmp" for 0x40085c>, <DisassemblerInsn "jne" for 0x400861>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40123c>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "call" for 0x4009be>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 190, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40097e>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "sub" for 0x400973>, <DisassemblerInsn "je" for 0x400978>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "call" for 0x400afa>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "sub" for 0x400926>, <DisassemblerInsn "je" for 0x40092b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "lea" for 0x400b18>, <DisassemblerInsn "mov" for 0x400b1f>, <DisassemblerInsn "call" for 0x400b21>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "jmp" for 0x400ac9>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400900>, <DisassemblerInsn "sub" for 0x400904>, <DisassemblerInsn "je" for 0x400909>]'}, {'block_Idx': 308, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "jmp" for 0x4009c7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "cmp" for 0x400808>, <DisassemblerInsn "setne" for 0x40080c>, <DisassemblerInsn "xor" for 0x40080f>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a52>, <DisassemblerInsn "mov" for 0x400a57>, <DisassemblerInsn "mov" for 0x400a5e>, <DisassemblerInsn "mov" for 0x400a63>, <DisassemblerInsn "mov" for 0x400a6b>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "jmp" for 0x400a7c>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c0>, <DisassemblerInsn "mov" for 0x4013c5>, <DisassemblerInsn "mov" for 0x4013c8>, <DisassemblerInsn "mov" for 0x4013cd>, <DisassemblerInsn "mov" for 0x4013d4>, <DisassemblerInsn "add" for 0x4013d9>, <DisassemblerInsn "ret" for 0x4013dd>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400983>, <DisassemblerInsn "call" for 0x400988>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "sub" for 0x400955>, <DisassemblerInsn "je" for 0x40095a>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cdc>, <DisassemblerInsn "mov" for 0x400ce4>, <DisassemblerInsn "mov" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf2>, <DisassemblerInsn "mov" for 0x400cf7>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "mov" for 0x400d00>, <DisassemblerInsn "mov" for 0x400d08>, <DisassemblerInsn "mov" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "mov" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "mov" for 0x400d29>, <DisassemblerInsn "mov" for 0x400d30>, <DisassemblerInsn "mov" for 0x400d35>, <DisassemblerInsn "cmp" for 0x400d3c>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "call" for 0x400ab2>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ed>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084e>, <DisassemblerInsn "call" for 0x400853>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b48>, <DisassemblerInsn "add" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b4f>, <DisassemblerInsn "jmp" for 0x400b53>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae7>, <DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "jmp" for 0x400af3>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "jmp" for 0x4009b4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008de>, <DisassemblerInsn "sub" for 0x4008e2>, <DisassemblerInsn "je" for 0x4008e7>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2c>, <DisassemblerInsn "call" for 0x400a31>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "cmp" for 0x40087f>, <DisassemblerInsn "je" for 0x400882>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400863>, <DisassemblerInsn "seta" for 0x40086b>, <DisassemblerInsn "and" for 0x40086e>, <DisassemblerInsn "movzx" for 0x400870>, <DisassemblerInsn "mov" for 0x400873>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "cmp" for 0x40087f>, <DisassemblerInsn "je" for 0x400882>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40098d>, <DisassemblerInsn "je" for 0x400992>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400825>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400944>, <DisassemblerInsn "sub" for 0x400948>, <DisassemblerInsn "je" for 0x40094d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4007b0>, <DisassemblerInsn "mov" for 0x4007b4>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c1>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "xor" for 0x4007e5>, <DisassemblerInsn "cmp" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "jge" for 0x4007f0>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400931>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400920>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f5>, <DisassemblerInsn "and" for 0x4009f9>, <DisassemblerInsn "cmp" for 0x4009fe>, <DisassemblerInsn "je" for 0x400a03>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ba>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009e9>, <DisassemblerInsn "call" for 0x4009ee>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4007e5>, <DisassemblerInsn "cmp" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "jge" for 0x4007f0>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400acb>, <DisassemblerInsn "mov" for 0x400ad0>, <DisassemblerInsn "jmp" for 0x400ad7>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009f3>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400960>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40082a>, <DisassemblerInsn "call" for 0x40082f>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b35>, <DisassemblerInsn "add" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3d>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "xor" for 0x400b41>, <DisassemblerInsn "call" for 0x400b43>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f2>, <DisassemblerInsn "mov" for 0x4007f7>, <DisassemblerInsn "cmp" for 0x4007f9>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "je" for 0x400801>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "mov" for 0x400888>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "ror" for 0x400890>, <DisassemblerInsn "ror" for 0x400894>, <DisassemblerInsn "ror" for 0x400897>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x40089f>, <DisassemblerInsn "mov" for 0x4008a3>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "sub" for 0x4008af>, <DisassemblerInsn "je" for 0x4008b4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "mov" for 0x401334>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "mov" for 0x40133c>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "mov" for 0x401349>, <DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x401356>, <DisassemblerInsn "mov" for 0x40135a>, <DisassemblerInsn "mov" for 0x40135f>, <DisassemblerInsn "mov" for 0x401366>, <DisassemblerInsn "add" for 0x40136b>, <DisassemblerInsn "ret" for 0x40136f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400834>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x400840>, <DisassemblerInsn "call" for 0x400845>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d6>, <DisassemblerInsn "cmp" for 0x4009da>, <DisassemblerInsn "jne" for 0x4009e2>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400994>, <DisassemblerInsn "mov" for 0x400999>, <DisassemblerInsn "lea" for 0x40099e>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "call" for 0x4009a7>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b58>, <DisassemblerInsn "xor" for 0x400b5d>, <DisassemblerInsn "mov" for 0x400b5f>, <DisassemblerInsn "xor" for 0x400b61>, <DisassemblerInsn "call" for 0x400b63>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40094f>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008bc>, <DisassemblerInsn "sub" for 0x4008c0>, <DisassemblerInsn "je" for 0x4008c5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "call" for 0x400a44>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008cb>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008fe>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009cc>, <DisassemblerInsn "call" for 0x4009d1>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a81>, <DisassemblerInsn "mov" for 0x400a86>, <DisassemblerInsn "mov" for 0x400a8d>, <DisassemblerInsn "mov" for 0x400a92>, <DisassemblerInsn "mov" for 0x400a9a>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa7>, <DisassemblerInsn "jmp" for 0x400aab>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}], 'cfg_block_detailed_info': [{'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 1>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400b03>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x400944>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 172, 'blockInsts': ['<jmp~~0x40096f>']}, {'block_Idx': 170, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400bbf>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x400b70>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400af5>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x5447566b>', '<je~~0x400a81>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4e454853>', '<je~~0x4009cc>']}, {'block_Idx': 300, 'blockInsts': ['<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6c484353>', '<je~~0x4009cc>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x4008de>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~ecx, 0x5622>', '<mov~~eax, 0xbb80>', '<cmp~~edx, 3>', '<cmove~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x400911>']}, {'block_Idx': 86, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rdi, qword ptr [rsp]>', '<mov~~esi, 0x10>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x400a3f>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x400a2c>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6849564d>', '<je~~0x400a52>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xad2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x1c], 0x11017>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b70>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jne~~0x40087a>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400b80>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 190, 'blockInsts': ['<jmp~~0x400b03>']}, {'block_Idx': 181, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x73514754>', '<je~~0x400acb>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401370>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6843504d>', '<je~~0x400abd>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e0]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 2>', '<jmp~~0x400b03>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400ad9>']}, {'block_Idx': 308, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 4], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 0xe], al>', '<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7c>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400b03>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 8], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 4], 0x5e>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6b44414d>', '<je~~0x400ae7>']}, {'block_Idx': 66, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~dword ptr [rsp + 0x74], 1>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~dword ptr [rsp + 0x5c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x58], 0xffffffff>', '<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x28], 2>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x30], 1>', '<cmp~~dword ptr [rsp + 0x74], 0>', '<je~~0x4010a6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x4012e0>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4008ef>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4007e5>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x87>', '<jmp~~0x400b03>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b70>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54475170>', '<je~~0x400acb>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400cd0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4008a7>']}, {'block_Idx': 16, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0xfffff>', '<seta~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4008a7>']}, {'block_Idx': 155, 'blockInsts': ['<cmp~~eax, 0x53434145>', '<je~~0x4009b9>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x400b58>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x684e5331>', '<je~~0x400983>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x40081d>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x400933>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x400922>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<and~~eax, 0xffff>', '<cmp~~eax, 0x5450>', '<je~~0x400a2a>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4008bc>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 4>', '<call~~0x500020>']}, {'block_Idx': 47, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 75, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x40081d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7f>', '<jmp~~0x400b03>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x400a2c>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x400962>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500038>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x1c], 0>', '<mov~~byte ptr [rsp + 0xe], al>', '<je~~0x400815>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x400a3f>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 4], 0x26>', '<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<cmp~~dword ptr [rsp + 0x44], 0x52545347>', '<jne~~0x4009f5>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xb2c]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<xor~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 143, 'blockInsts': ['<jmp~~0x400951>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4443546d>', '<je~~0x400aad>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401260>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x4008cd>']}, {'block_Idx': 57, 'blockInsts': ['<jmp~~0x400900>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7e>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400b03>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}], 'cfg_edge_info': [(190, 47), (58, 65), (42, 48), (150, 157), (154, 54), (29, 32), (181, 190), (23, 25), (37, 42), (68, 75), (47, 55), (64, 71), (81, 87), (162, 170), (3, 6), (133, 143), (75, 1), (142, 155), (48, 56), (20, 49), (157, 164), (15, 16), (164, 32), (18, 21), (65, 47), (163, 180), (46, 52), (40, 45), (80, 154), (148, 154), (181, 41), (107, 119), (5, 7), (0, 2), (69, 74), (87, 98), (1, 3), (155, 162), (16, 19), (308, 47), (52, 60), (300, 308), (19, 20), (70, 47), (76, 81), (71, 76), (47, 54), (64, 70), (33, 37), (120, 133), (3, 5), (154, 55), (60, 66), (180, 74), (60, 130), (23, 26), (2, 6), (113, 130), (7, 11), (117, 130), (4, 6), (67, 74), (75, 2), (49, 47), (162, 308), (17, 18), (25, 65), (119, 47), (172, 181), (150, 156), (143, 150), (37, 41), (6, 10), (98, 47), (133, 142), (87, 99), (1, 4), (56, 47), (76, 80), (54, 68), (32, 40), (18, 20), (55, 69), (43, 49), (80, 86), (2, 5), (19, 21), (48, 57), (15, 17), (130, 47), (4, 5), (59, 60), (156, 47), (116, 130), (0, 1), (46, 53), (40, 46), (16, 18), (53, 67), (41, 47), (21, 23), (99, 107), (107, 120), (164, 172), (17, 19), (10, 13), (57, 64), (155, 163), (13, 15)], 'cdg_edge_info': [(150, 157), (154, 54), (3, 13), (133, 150), (0, 5), (46, 130), (47, 55), (64, 71), (3, 6), (133, 143), (3, 15), (75, 1), (48, 47), (0, 7), (48, 56), (154, 74), (15, 16), (164, 32), (47, 75), (46, 52), (23, 47), (18, 23), (47, 68), (107, 119), (3, 10), (0, 2), (75, 5), (40, 47), (154, 69), (87, 98), (150, 47), (1, 3), (155, 162), (87, 107), (16, 19), (46, 47), (75, 7), (107, 133), (1, 5), (2, 13), (76, 81), (47, 54), (64, 70), (76, 154), (19, 47), (3, 5), (154, 55), (4, 13), (87, 47), (1, 7), (2, 6), (2, 15), (164, 40), (19, 49), (23, 65), (3, 7), (4, 6), (75, 2), (4, 15), (75, 11), (17, 18), (64, 47), (0, 11), (37, 48), (155, 180), (155, 308), (150, 156), (1, 11), (2, 10), (46, 74), (76, 87), (3, 11), (4, 10), (164, 47), (133, 142), (87, 99), (1, 4), (46, 67), (48, 64), (76, 80), (40, 60), (155, 47), (155, 74), (47, 74), (18, 47), (46, 60), (48, 57), (154, 75), (15, 17), (0, 1), (46, 53), (18, 49), (133, 155), (40, 46), (154, 68), (19, 23), (37, 47), (16, 18), (107, 47), (64, 76), (47, 69), (164, 172), (150, 164), (164, 181), (17, 19), (155, 163), (40, 130)], 'ddg_edge_info': [(32, 46), (19, 64), (154, 54), (0, 60), (142, 162), (0, 142), (68, 75), (13, 17), (130, 154), (54, 6), (13, 154), (19, 48), (4, 130), (16, 40), (10, 54), (65, 54), (0, 53), (16, 49), (19, 130), (32, 60), (75, 10), (0, 7), (49, 55), (0, 16), (0, 80), (13, 19), (15, 16), (13, 37), (13, 156), (0, 55), (32, 53), (163, 180), (0, 119), (13, 76), (16, 17), (54, 1), (19, 107), (16, 154), (4, 308), (308, 54), (69, 74), (19, 308), (154, 69), (130, 69), (4, 155), (16, 65), (13, 133), (13, 23), (13, 142), (13, 87), (19, 155), (0, 32), (19, 164), (19, 54), (0, 68), (163, 74), (13, 181), (13, 16), (13, 80), (10, 154), (65, 154), (0, 98), (0, 162), (180, 74), (154, 55), (4, 13), (130, 55), (13, 55), (49, 54), (13, 119), (13, 64), (19, 13), (4, 40), (7, 11), (68, 15), (19, 150), (19, 40), (54, 7), (164, 40), (19, 49), (119, 17), (0, 54), (67, 74), (4, 15), (13, 48), (15, 54), (19, 15), (0, 75), (308, 154), (13, 32), (55, 74), (75, 4), (0, 4), (10, 69), (4, 154), (65, 69), (0, 13), (19, 154), (6, 10), (54, 75), (4, 65), (13, 98), (4, 10), (13, 107), (19, 65), (19, 10), (1, 4), (0, 6), (142, 163), (0, 70), (0, 15), (16, 130), (19, 37), (54, 4), (54, 68), (4, 49), (32, 40), (55, 69), (49, 154), (130, 54), (13, 164), (10, 55), (13, 54), (65, 55), (19, 76), (308, 69), (0, 17), (0, 163), (53, 74), (13, 56), (0, 56), (0, 1), (133, 155), (19, 133), (40, 46), (75, 13), (19, 23), (11, 74), (0, 10), (0, 19), (19, 87), (16, 308), (0, 156), (15, 19), (53, 67), (13, 150), (16, 155), (56, 17), (19, 181), (308, 55), (17, 19), (10, 13), (75, 15), (13, 70), (49, 69), (13, 15)]}], 'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400645>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a2>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "call" for 0x4005b0>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40050c>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004fb>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f4>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x400336>, <DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "sub" for 0x4003c6>, <DisassemblerInsn "je" for 0x4003cb>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "cmp" for 0x400360>, <DisassemblerInsn "je" for 0x400363>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x400747>, <DisassemblerInsn "jmp" for 0x40074b>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ad>, <DisassemblerInsn "jmp" for 0x4006b5>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ae>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400557>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40046a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400404>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400652>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "sub" for 0x40044e>, <DisassemblerInsn "je" for 0x400453>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a4>, <DisassemblerInsn "je" for 0x4003a9>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "sub" for 0x4003f9>, <DisassemblerInsn "je" for 0x4003fe>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400437>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400365>, <DisassemblerInsn "call" for 0x40036a>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "or" for 0x400766>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "jmp" for 0x400774>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "mov" for 0x40058b>, <DisassemblerInsn "call" for 0x400590>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004df>, <DisassemblerInsn "sub" for 0x4004e3>, <DisassemblerInsn "je" for 0x4004e8>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40047b>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "call" for 0x400786>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "call" for 0x400552>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c0>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004cc>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40051d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "sub" for 0x4003d7>, <DisassemblerInsn "je" for 0x4003dc>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "sub" for 0x400658>, <DisassemblerInsn "shl" for 0x40065b>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "xor" for 0x400662>, <DisassemblerInsn "div" for 0x400664>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "mov" for 0x400671>, <DisassemblerInsn "jmp" for 0x400674>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400459>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005dd>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "movsxd" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "imul" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "movsxd" for 0x400606>, <DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "cqo" for 0x400616>, <DisassemblerInsn "idiv" for 0x400618>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "mov" for 0x40061e>, <DisassemblerInsn "mov" for 0x400622>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "sub" for 0x400631>, <DisassemblerInsn "je" for 0x400636>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400448>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005b9>, <DisassemblerInsn "jge" for 0x4005be>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003af>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400522>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "call" for 0x40052c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40039e>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "sub" for 0x4004c5>, <DisassemblerInsn "je" for 0x4004ca>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400647>, <DisassemblerInsn "sub" for 0x40064b>, <DisassemblerInsn "je" for 0x400650>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005a0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "cmp" for 0x400541>, <DisassemblerInsn "jne" for 0x400545>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fd>, <DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "je" for 0x400506>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "sub" for 0x40045f>, <DisassemblerInsn "je" for 0x400464>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c4>, <DisassemblerInsn "jmp" for 0x4005c8>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "sub" for 0x40040a>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400687>, <DisassemblerInsn "mov" for 0x40068b>, <DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "imul" for 0x400698>, <DisassemblerInsn "xor" for 0x40069c>, <DisassemblerInsn "div" for 0x40069e>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a2>, <DisassemblerInsn "add" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006aa>, <DisassemblerInsn "mov" for 0x4006ad>, <DisassemblerInsn "jmp" for 0x4006b5>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004bf>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ea>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f3>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400638>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003d1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004dd>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ec>, <DisassemblerInsn "sub" for 0x4004f0>, <DisassemblerInsn "je" for 0x4004f5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "cmp" for 0x40073c>, <DisassemblerInsn "jge" for 0x400741>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "sub" for 0x4003e8>, <DisassemblerInsn "je" for 0x4003ed>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "call" for 0x40057d>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "jne" for 0x400576>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "sub" for 0x400599>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "jmp" for 0x4005a0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "sub" for 0x4004d2>, <DisassemblerInsn "je" for 0x4004d7>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "add" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "jmp" for 0x4006f8>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "sub" for 0x400512>, <DisassemblerInsn "je" for 0x400517>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "sub" for 0x4003b5>, <DisassemblerInsn "je" for 0x4003ba>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "call" for 0x400352>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "add" for 0x40079c>, <DisassemblerInsn "ret" for 0x4007a0>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400415>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "jmp" for 0x400723>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "sub" for 0x40063e>, <DisassemblerInsn "je" for 0x400643>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "mov" for 0x4006c2>, <DisassemblerInsn "jmp" for 0x4006ca>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "sub" for 0x400712>, <DisassemblerInsn "mov" for 0x400715>, <DisassemblerInsn "jmp" for 0x400719>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400676>, <DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "add" for 0x40067f>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "jmp" for 0x400685>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fa>, <DisassemblerInsn "mov" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "call" for 0x400709>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40078b>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072f>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400723>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "cmp" for 0x400561>, <DisassemblerInsn "je" for 0x400568>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400426>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "jmp" for 0x400373>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "add" for 0x40079c>, <DisassemblerInsn "ret" for 0x4007a0>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "sub" for 0x400535>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "cmp" for 0x400541>, <DisassemblerInsn "jne" for 0x400545>]'}], 'cfg_block_detailed_info': [{'block_Idx': 61, 'blockInsts': ['<jmp~~0x400647>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6544414d>', '<je~~0x4006d7>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x40050e>']}, {'block_Idx': 103, 'blockInsts': ['<jmp~~0x4004fd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006d7>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x4006cf>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x444e4553>', '<je~~0x4006ba>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006d7>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400375>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400798>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4004b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6843504d>', '<je~~0x40071b>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40078b>']}, {'block_Idx': 82, 'blockInsts': ['<jmp~~0x40046c>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x400406>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x400687>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54514970>', '<je~~0x40071b>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x43444e53>', '<je~~0x40053c>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454453>', '<je~~0x40053c>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400439>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<or~~ecx, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<call~~0x500020>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c444353>', '<je~~0x40053c>']}, {'block_Idx': 84, 'blockInsts': ['<jmp~~0x40047d>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<call~~0x500020>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 95, 'blockInsts': ['<jmp~~0x4004ce>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x400776>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x4006cf>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4630564d>', '<je~~0x400723>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<shl~~eax, 1>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~edx, edx>', '<div~~dword ptr [rcx + 0x30]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x4006ad>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x40045b>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rax], 0x15f90>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rdx, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<imul~~rcx, rdx>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rax + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rax]>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x1c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<sub~~eax, 0x10012>', '<je~~0x400676>']}, {'block_Idx': 78, 'blockInsts': ['<jmp~~0x40044a>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x4005cd>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4003b1>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 0x20>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4003a0>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x684e5331>', '<je~~0x400522>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x15001>', '<je~~0x400676>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x4006cf>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4005a2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x40055c>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4006d7>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x644e5331>', '<je~~0x40053c>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400798>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454553>', '<je~~0x4006ba>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<imul~~ecx, dword ptr [rdx + 0x30]>', '<xor~~edx, edx>', '<div~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x4004c1>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400790>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x4004ec>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x40048e>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x4003f5>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x40063a>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4003d3>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x4006ba>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4004df>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c454353>', '<je~~0x4006ba>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40074d>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4b30564d>', '<je~~0x40071b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x15001>', '<jne~~0x4005a0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4005a2>']}, {'block_Idx': 17, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6b44414d>', '<je~~0x4006cf>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x4006cf>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x4006ba>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4443546d>', '<je~~0x4006fa>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 45, 'blockInsts': ['<jmp~~0x4003e4>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<jmp~~0x400725>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x1100a>', '<je~~0x400654>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xfffffffb>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x654e5331>', '<je~~0x4006ba>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x4006ad>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40049f>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40033a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x400725>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x10012>', '<je~~0x400578>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400428>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400383>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0x20>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x40055c>']}], 'cfg_edge_info': [(24, 33), (99, 100), (52, 58), (59, 18), (14, 13), (22, 26), (74, 73), (48, 54), (11, 14), (32, 12), (100, 101), (98, 21), (72, 75), (54, 15), (61, 63), (46, 50), (2, 4), (49, 55), (106, 107), (18, 21), (107, 108), (51, 57), (73, 39), (103, 104), (80, 81), (40, 45), (68, 70), (85, 86), (94, 98), (81, 18), (30, 34), (64, 66), (81, 82), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (65, 67), (104, 105), (97, 99), (53, 50), (93, 95), (16, 19), (47, 52), (105, 106), (82, 83), (42, 47), (17, 2), (12, 15), (14, 12), (67, 15), (100, 18), (20, 28), (78, 79), (48, 53), (66, 68), (83, 84), (1, 5), (98, 20), (13, 16), (62, 64), (79, 80), (72, 74), (25, 24), (58, 60), (60, 57), (22, 27), (95, 97), (89, 90), (79, 55), (108, 15), (19, 22), (7, 11), (57, 15), (63, 65), (56, 59), (90, 91), (97, 69), (35, 39), (86, 87), (40, 44), (49, 56), (10, 12), (39, 48), (36, 40), (32, 36), (5, 6), (21, 24), (69, 73), (70, 72), (87, 88), (75, 77), (63, 51), (93, 94), (47, 51), (88, 89), (6, 10), (84, 85), (55, 39), (27, 32), (41, 34), (106, 69), (44, 39), (87, 74), (18, 20), (28, 15), (85, 12), (91, 92), (68, 69), (45, 49), (89, 55), (104, 74), (15, 17), (58, 61), (33, 41), (26, 35), (101, 102), (102, 12), (0, 1), (34, 42), (92, 93), (102, 103), (16, 18), (64, 12), (25, 30), (42, 46), (59, 62), (17, 1), (91, 69), (83, 74), (10, 13)], 'cdg_edge_info': [(72, 73), (81, 21), (18, 17), (59, 64), (25, 41), (87, 89), (59, 18), (5, 10), (68, 48), (22, 26), (0, 5), (22, 35), (48, 54), (83, 85), (32, 12), (100, 101), (83, 39), (98, 21), (79, 81), (72, 75), (16, 22), (87, 73), (42, 50), (81, 41), (17, 5), (91, 73), (100, 21), (14, 15), (49, 55), (106, 107), (87, 48), (59, 41), (104, 73), (106, 15), (72, 77), (16, 24), (98, 41), (81, 34), (16, 33), (16, 42), (49, 39), (14, 17), (5, 14), (49, 48), (104, 48), (22, 39), (91, 93), (100, 41), (77, 39), (68, 70), (85, 86), (77, 48), (59, 34), (81, 18), (98, 34), (48, 15), (64, 66), (81, 82), (79, 39), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (83, 73), (22, 32), (21, 34), (85, 15), (100, 34), (97, 99), (5, 16), (104, 105), (49, 59), (68, 72), (10, 15), (93, 95), (64, 68), (48, 17), (42, 47), (83, 48), (17, 2), (100, 18), (102, 15), (14, 12), (48, 53), (40, 49), (83, 84), (10, 17), (98, 20), (93, 97), (79, 80), (72, 74), (16, 21), (25, 24), (64, 15), (25, 33), (58, 60), (17, 4), (77, 73), (5, 11), (97, 39), (89, 90), (79, 55), (97, 48), (42, 15), (22, 48), (97, 69), (106, 17), (79, 48), (59, 24), (106, 108), (42, 17), (59, 33), (10, 12), (98, 15), (59, 42), (102, 104), (63, 67), (47, 58), (5, 6), (87, 88), (21, 42), (89, 39), (0, 4), (98, 17), (85, 17), (63, 51), (93, 94), (47, 51), (97, 73), (77, 79), (106, 39), (104, 106), (97, 100), (106, 48), (102, 17), (10, 16), (100, 102), (106, 69), (32, 40), (81, 24), (68, 39), (87, 74), (18, 20), (64, 17), (81, 33), (16, 41), (72, 39), (81, 42), (59, 21), (72, 48), (85, 12), (91, 92), (68, 69), (32, 15), (93, 98), (98, 24), (104, 74), (89, 55), (98, 33), (98, 42), (16, 34), (102, 12), (89, 91), (87, 39), (0, 1), (100, 24), (48, 50), (100, 33), (100, 42), (91, 39), (85, 87), (102, 103), (32, 17), (91, 48), (89, 48), (106, 73), (16, 18), (18, 15), (81, 83), (64, 12), (58, 63), (42, 46), (104, 39), (17, 1), (91, 69), (40, 39), (83, 74), (40, 48), (68, 73)], 'ddg_edge_info': [(12, 4), (64, 5), (7, 72), (7, 17), (34, 1), (24, 33), (7, 81), (7, 26), (6, 91), (26, 39), (0, 51), (5, 10), (0, 60), (0, 5), (14, 22), (74, 73), (94, 21), (11, 14), (67, 98), (14, 40), (51, 25), (14, 104), (7, 1), (98, 21), (14, 49), (51, 98), (41, 42), (6, 20), (7, 74), (34, 58), (39, 17), (7, 83), (34, 67), (17, 5), (0, 108), (0, 53), (108, 4), (42, 4), (14, 79), (0, 7), (32, 5), (60, 21), (39, 53), (14, 97), (6, 59), (6, 4), (14, 106), (6, 68), (4, 50), (7, 12), (6, 77), (34, 60), (98, 41), (7, 21), (7, 85), (54, 17), (0, 46), (7, 94), (14, 72), (73, 39), (60, 5), (5, 14), (6, 34), (6, 98), (49, 48), (14, 81), (94, 25), (14, 35), (94, 34), (94, 98), (14, 108), (98, 25), (55, 54), (7, 69), (98, 34), (7, 14), (0, 94), (0, 39), (7, 87), (20, 17), (69, 74), (6, 100), (14, 83), (41, 67), (60, 25), (7, 108), (53, 50), (60, 98), (34, 46), (7, 16), (20, 1), (54, 67), (17, 48), (54, 21), (14, 67), (108, 1), (17, 11), (6, 93), (41, 60), (48, 53), (14, 85), (94, 20), (6, 102), (1, 5), (6, 1), (7, 55), (98, 20), (7, 64), (0, 25), (47, 54), (54, 5), (0, 34), (25, 33), (47, 63), (0, 98), (14, 60), (25, 42), (14, 5), (6, 22), (12, 17), (67, 17), (5, 11), (6, 40), (7, 39), (6, 104), (14, 87), (14, 32), (6, 49), (73, 48), (1, 7), (34, 50), (7, 11), (20, 5), (34, 4), (6, 79), (6, 24), (54, 25), (0, 54), (35, 39), (14, 16), (7, 32), (35, 48), (6, 97), (79, 48), (33, 51), (6, 106), (14, 89), (39, 48), (108, 17), (7, 59), (7, 4), (0, 20), (7, 68), (47, 58), (6, 72), (6, 17), (6, 81), (14, 64), (0, 47), (6, 26), (7, 25), (14, 73), (7, 89), (67, 21), (7, 34), (21, 33), (7, 98), (6, 108), (0, 4), (39, 50), (10, 14), (14, 39), (39, 4), (6, 10), (34, 63), (6, 74), (67, 60), (67, 5), (6, 83), (7, 91), (7, 100), (0, 6), (34, 47), (14, 41), (0, 24), (0, 33), (41, 34), (6, 12), (14, 59), (6, 21), (7, 20), (6, 85), (14, 68), (6, 94), (14, 77), (7, 93), (67, 25), (6, 39), (7, 102), (108, 5), (98, 67), (1, 6), (54, 98), (94, 24), (39, 54), (0, 17), (17, 33), (14, 34), (14, 98), (0, 26), (17, 42), (20, 4), (74, 39), (6, 69), (7, 77), (33, 41), (7, 22), (26, 35), (6, 32), (60, 67), (6, 87), (98, 60), (7, 40), (7, 104), (0, 1), (7, 49), (85, 5), (34, 42), (0, 74), (48, 4), (39, 1), (51, 21), (34, 51), (14, 100), (14, 91), (89, 48), (6, 16), (69, 54), (33, 34), (6, 25), (42, 46), (7, 24), (6, 89), (47, 5), (7, 79), (102, 5), (34, 17), (7, 97), (17, 10), (7, 106), (14, 20), (51, 5), (0, 67), (40, 48), (14, 93), (0, 21), (6, 55), (14, 102), (6, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 183, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 184, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 185, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 186, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 188, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 190, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 191, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 242, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 244, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 245, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 246, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 247, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 249, 'instruction': 'jmp\t.LBB2_26'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.s---process_ea_header---after
function id: 3
function flag: True
There are 223 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 183, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 184, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 185, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 186, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 188, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 190, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 191, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 291 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 242, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 244, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 245, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 246, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 247, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 249, 'instruction': 'jmp\t.LBB2_26'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.o---after
The extraction of function: process_ea_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 364 nodes and 611 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 223 instructions in binary file.
[4197081, 4197095, 4197109, 4197119]
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 364 nodes and 611 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 291 instructions in binary file.
[4196047, 4196055, 4196077]
The execution time of patched subCFG information extraction via angr: 0:00:02.007407
{'process_ea_header': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "call" for 0x400afa>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b35>, <DisassemblerInsn "add" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3d>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "xor" for 0x400b41>, <DisassemblerInsn "call" for 0x400b43>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "lea" for 0x400b18>, <DisassemblerInsn "mov" for 0x400b1f>, <DisassemblerInsn "call" for 0x400b21>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ade>, <DisassemblerInsn "jmp" for 0x400ae5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400900>, <DisassemblerInsn "sub" for 0x400904>, <DisassemblerInsn "je" for 0x400909>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "sub" for 0x400955>, <DisassemblerInsn "je" for 0x40095a>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae7>, <DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "jmp" for 0x400af3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400af5>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401370>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e0]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400b03>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400ad9>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6b44414d>', '<je~~0x400ae7>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x87>', '<jmp~~0x400b03>']}], 'cfg_edge_info': [(49, 20), (68, 20), (48, 49), (65, 68), (52, 54), (51, 52), (54, 24), (54, 23)]}], 'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fd>, <DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "je" for 0x400506>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "sub" for 0x400512>, <DisassemblerInsn "je" for 0x400517>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "add" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "jmp" for 0x4006f8>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072f>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "sub" for 0x4004d2>, <DisassemblerInsn "je" for 0x4004d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x4006cf>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006d7>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4006d7>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6544414d>', '<je~~0x4006d7>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x4006cf>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x4006cf>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x4006cf>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006d7>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6b44414d>', '<je~~0x4006cf>']}], 'cfg_edge_info': [(63, 64), (92, 64), (64, 62), (62, 31), (60, 62), (94, 60), (59, 60), (66, 60), (80, 60), (76, 64), (86, 60), (72, 64)]}]}
{'process_ea_header': [4197081, 4197095, 4197109, 4197119], 'ea_read_packet': [4196047, 4196055, 4196077]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O0/electronicarts.o---after
The extraction of function: process_ea_header
[4197081, 4197095, 4197109, 4197119]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 323 nodes and 479 edges in CFGEmulated.
It has 323 nodes and 452 edges in CDG.
It has 2689 nodes and 5166 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197081, 4197095, 4197109, 4197119]
{4196608, 4196993, 4197123, 4196484, 4196739, 4196869, 4196355, 4197130, 4196749, 4196623, 4196625, 4196756, 4196373, 4196381, 4196893, 4196640, 4196642, 4196389, 4197158, 4196519, 4196906, 4196394, 4196908, 4196780, 4197168, 4196657, 4196272, 4196659, 4196404, 4196918, 4197047, 4196793, 4196540, 4197053, 4196803, 4196676, 4197192, 4196937, 4196426, 4196812, 4196687, 4196689, 4196946, 4196822, 4197208, 4197081, 4196440, 4196574, 4196704, 4196706, 4196451, 4196325, 4197095, 4197224, 4196717, 4196591, 4197232, 4196719, 4196338, 4197109, 4196853, 4196474, 4196606, 4197119}
[49, 11, 74, 70, 120, 65, 172, 170, 69, 76, 130, 48, 29, 300, 164, 33, 116, 71, 86, 18, 52, 107, 53, 43, 67, 15, 117, 162, 2, 190, 181, 80, 87, 55, 98, 64, 308, 4, 119, 148, 142, 150, 66, 25, 42, 13, 68, 156, 180, 37, 60, 17, 16, 155, 5, 133, 0, 99, 81, 46, 21, 45, 47, 75, 3, 41, 59, 157, 6, 54, 1, 19, 58, 10, 40, 163, 113, 7, 143, 23, 20, 26, 57, 32, 56, 154]
The extraction of function: ea_read_packet
[4196047, 4196055, 4196077]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 110 nodes and 158 edges in CFGEmulated.
It has 110 nodes and 258 edges in CDG.
It has 1313 nodes and 1633 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4196047, 4196055, 4196077]
{4195334, 4195349, 4195351, 4195366, 4195368, 4195383, 4195385, 4195898, 4195911, 4195400, 4195402, 4195924, 4195417, 4195419, 4195434, 4195436, 4195958, 4195451, 4195453, 4195975, 4195468, 4195470, 4195485, 4195487, 4195502, 4195504, 4196026, 4195519, 4195521, 4195532, 4195534, 4196047, 4196055, 4195549, 4195551, 4195562, 4195564, 4196077, 4195056, 4196090, 4195579, 4195581, 4195596, 4195598, 4196110, 4196123, 4195613, 4195618, 4196133, 4195633, 4196152, 4195130, 4195644, 4196163, 4195655, 4195144, 4195149, 4196173, 4195159, 4195676, 4195173, 4195690, 4195183, 4195189, 4196214, 4195704, 4195199, 4195714, 4195203, 4196235, 4196240, 4195733, 4196248, 4195232, 4195746, 4195249, 4195765, 4195776, 4195266, 4195789, 4195283, 4195300, 4195317}
[61, 83, 34, 105, 103, 72, 0, 68, 32, 87, 5, 53, 57, 90, 6, 89, 28, 82, 62, 65, 79, 16, 59, 75, 7, 54, 33, 100, 84, 108, 20, 27, 95, 107, 77, 40, 60, 80, 47, 78, 42, 19, 94, 13, 93, 63, 91, 30, 18, 104, 81, 46, 64, 69, 67, 92, 2, 101, 86, 56, 52, 36, 10, 99, 102, 48, 74, 49, 24, 25, 41, 17, 97, 73, 106, 14, 22, 1, 50, 66, 45, 55, 58, 12, 85, 35, 51, 88, 26, 15, 39, 44, 21, 70, 11, 4, 98]
The execution time of patched slicing information extraction via angr: 0:01:09.704580
{'process_ea_header': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a49>, <DisassemblerInsn "jmp" for 0x400a4d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b68>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "add" for 0x400b74>, <DisassemblerInsn "ret" for 0x400b78>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "add" for 0x400b74>, <DisassemblerInsn "ret" for 0x400b78>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ade>, <DisassemblerInsn "jmp" for 0x400ae5>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400942>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab7>, <DisassemblerInsn "jmp" for 0x400abb>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40096d>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b80>, <DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "mov" for 0x400b97>, <DisassemblerInsn "mov" for 0x400b9c>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "cmp" for 0x400baa>, <DisassemblerInsn "je" for 0x400bad>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b26>, <DisassemblerInsn "mov" for 0x400b2a>, <DisassemblerInsn "jmp" for 0x400b2e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "jmp" for 0x400a3a>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "sub" for 0x4008f3>, <DisassemblerInsn "je" for 0x4008f8>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "sub" for 0x4008d1>, <DisassemblerInsn "je" for 0x4008d6>]'}, {'block_Idx': 300, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cbe>, <DisassemblerInsn "add" for 0x400cc3>, <DisassemblerInsn "ret" for 0x400cc7>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "sub" for 0x400966>, <DisassemblerInsn "je" for 0x40096b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008dc>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401220>, <DisassemblerInsn "mov" for 0x401224>, <DisassemblerInsn "mov" for 0x401229>, <DisassemblerInsn "cmp" for 0x40122e>, <DisassemblerInsn "cmove" for 0x401231>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x401239>, <DisassemblerInsn "mov" for 0x40123c>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40090f>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401370>, <DisassemblerInsn "mov" for 0x401374>, <DisassemblerInsn "mov" for 0x401379>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401382>, <DisassemblerInsn "mov" for 0x401387>, <DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "call" for 0x40139d>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "sub" for 0x4008af>, <DisassemblerInsn "je" for 0x4008b4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400a2a>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "sub" for 0x400937>, <DisassemblerInsn "je" for 0x40093c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a05>, <DisassemblerInsn "mov" for 0x400a0a>, <DisassemblerInsn "lea" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a16>, <DisassemblerInsn "call" for 0x400a18>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012b3>, <DisassemblerInsn "mov" for 0x4012b5>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012c9>, <DisassemblerInsn "add" for 0x4012ce>, <DisassemblerInsn "ret" for 0x4012d2>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a1d>, <DisassemblerInsn "jmp" for 0x400a25>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400858>, <DisassemblerInsn "cmp" for 0x40085c>, <DisassemblerInsn "jne" for 0x400861>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40123c>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "call" for 0x4009be>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 190, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40097e>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "sub" for 0x400973>, <DisassemblerInsn "je" for 0x400978>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "call" for 0x400afa>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "sub" for 0x400926>, <DisassemblerInsn "je" for 0x40092b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "lea" for 0x400b18>, <DisassemblerInsn "mov" for 0x400b1f>, <DisassemblerInsn "call" for 0x400b21>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "jmp" for 0x400ac9>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400900>, <DisassemblerInsn "sub" for 0x400904>, <DisassemblerInsn "je" for 0x400909>]'}, {'block_Idx': 308, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "jmp" for 0x4009c7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "cmp" for 0x400808>, <DisassemblerInsn "setne" for 0x40080c>, <DisassemblerInsn "xor" for 0x40080f>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a52>, <DisassemblerInsn "mov" for 0x400a57>, <DisassemblerInsn "mov" for 0x400a5e>, <DisassemblerInsn "mov" for 0x400a63>, <DisassemblerInsn "mov" for 0x400a6b>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "jmp" for 0x400a7c>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c0>, <DisassemblerInsn "mov" for 0x4013c5>, <DisassemblerInsn "mov" for 0x4013c8>, <DisassemblerInsn "mov" for 0x4013cd>, <DisassemblerInsn "mov" for 0x4013d4>, <DisassemblerInsn "add" for 0x4013d9>, <DisassemblerInsn "ret" for 0x4013dd>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400983>, <DisassemblerInsn "call" for 0x400988>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "sub" for 0x400955>, <DisassemblerInsn "je" for 0x40095a>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cdc>, <DisassemblerInsn "mov" for 0x400ce4>, <DisassemblerInsn "mov" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf2>, <DisassemblerInsn "mov" for 0x400cf7>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "mov" for 0x400d00>, <DisassemblerInsn "mov" for 0x400d08>, <DisassemblerInsn "mov" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "mov" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "mov" for 0x400d29>, <DisassemblerInsn "mov" for 0x400d30>, <DisassemblerInsn "mov" for 0x400d35>, <DisassemblerInsn "cmp" for 0x400d3c>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "call" for 0x400ab2>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ed>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084e>, <DisassemblerInsn "call" for 0x400853>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b48>, <DisassemblerInsn "add" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b4f>, <DisassemblerInsn "jmp" for 0x400b53>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae7>, <DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "jmp" for 0x400af3>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "jmp" for 0x4009b4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008de>, <DisassemblerInsn "sub" for 0x4008e2>, <DisassemblerInsn "je" for 0x4008e7>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2c>, <DisassemblerInsn "call" for 0x400a31>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "cmp" for 0x40087f>, <DisassemblerInsn "je" for 0x400882>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400863>, <DisassemblerInsn "seta" for 0x40086b>, <DisassemblerInsn "and" for 0x40086e>, <DisassemblerInsn "movzx" for 0x400870>, <DisassemblerInsn "mov" for 0x400873>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "cmp" for 0x40087f>, <DisassemblerInsn "je" for 0x400882>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40098d>, <DisassemblerInsn "je" for 0x400992>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400825>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400944>, <DisassemblerInsn "sub" for 0x400948>, <DisassemblerInsn "je" for 0x40094d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4007b0>, <DisassemblerInsn "mov" for 0x4007b4>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c1>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "xor" for 0x4007e5>, <DisassemblerInsn "cmp" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "jge" for 0x4007f0>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400931>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400920>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f5>, <DisassemblerInsn "and" for 0x4009f9>, <DisassemblerInsn "cmp" for 0x4009fe>, <DisassemblerInsn "je" for 0x400a03>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ba>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009e9>, <DisassemblerInsn "call" for 0x4009ee>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4007e5>, <DisassemblerInsn "cmp" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "jge" for 0x4007f0>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "test" for 0x400821>, <DisassemblerInsn "jne" for 0x400823>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400acb>, <DisassemblerInsn "mov" for 0x400ad0>, <DisassemblerInsn "jmp" for 0x400ad7>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009f3>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400960>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40082a>, <DisassemblerInsn "call" for 0x40082f>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b35>, <DisassemblerInsn "add" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3d>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "xor" for 0x400b41>, <DisassemblerInsn "call" for 0x400b43>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f2>, <DisassemblerInsn "mov" for 0x4007f7>, <DisassemblerInsn "cmp" for 0x4007f9>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "je" for 0x400801>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "mov" for 0x400888>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "ror" for 0x400890>, <DisassemblerInsn "ror" for 0x400894>, <DisassemblerInsn "ror" for 0x400897>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x40089f>, <DisassemblerInsn "mov" for 0x4008a3>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "sub" for 0x4008af>, <DisassemblerInsn "je" for 0x4008b4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "mov" for 0x401334>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "mov" for 0x40133c>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "mov" for 0x401349>, <DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x401356>, <DisassemblerInsn "mov" for 0x40135a>, <DisassemblerInsn "mov" for 0x40135f>, <DisassemblerInsn "mov" for 0x401366>, <DisassemblerInsn "add" for 0x40136b>, <DisassemblerInsn "ret" for 0x40136f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400834>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x400840>, <DisassemblerInsn "call" for 0x400845>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d6>, <DisassemblerInsn "cmp" for 0x4009da>, <DisassemblerInsn "jne" for 0x4009e2>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400994>, <DisassemblerInsn "mov" for 0x400999>, <DisassemblerInsn "lea" for 0x40099e>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "call" for 0x4009a7>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "add" for 0x40124e>, <DisassemblerInsn "ret" for 0x401255>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b58>, <DisassemblerInsn "xor" for 0x400b5d>, <DisassemblerInsn "mov" for 0x400b5f>, <DisassemblerInsn "xor" for 0x400b61>, <DisassemblerInsn "call" for 0x400b63>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40094f>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008bc>, <DisassemblerInsn "sub" for 0x4008c0>, <DisassemblerInsn "je" for 0x4008c5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "call" for 0x400a44>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008cb>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008fe>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009cc>, <DisassemblerInsn "call" for 0x4009d1>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a81>, <DisassemblerInsn "mov" for 0x400a86>, <DisassemblerInsn "mov" for 0x400a8d>, <DisassemblerInsn "mov" for 0x400a92>, <DisassemblerInsn "mov" for 0x400a9a>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa7>, <DisassemblerInsn "jmp" for 0x400aab>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "cmp" for 0x400b03>, <DisassemblerInsn "jge" for 0x400b08>]'}], 'cfg_block_detailed_info': [{'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 1>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400b03>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x400944>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 172, 'blockInsts': ['<jmp~~0x40096f>']}, {'block_Idx': 170, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400bbf>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x400b70>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400af5>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x5447566b>', '<je~~0x400a81>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4e454853>', '<je~~0x4009cc>']}, {'block_Idx': 300, 'blockInsts': ['<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6c484353>', '<je~~0x4009cc>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x4008de>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~ecx, 0x5622>', '<mov~~eax, 0xbb80>', '<cmp~~edx, 3>', '<cmove~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x400911>']}, {'block_Idx': 86, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rdi, qword ptr [rsp]>', '<mov~~esi, 0x10>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x400a3f>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x400a2c>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6849564d>', '<je~~0x400a52>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xad2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x1c], 0x11017>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b70>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jne~~0x40087a>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400b80>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 190, 'blockInsts': ['<jmp~~0x400b03>']}, {'block_Idx': 181, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x73514754>', '<je~~0x400acb>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401370>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6843504d>', '<je~~0x400abd>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e0]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 2>', '<jmp~~0x400b03>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400ad9>']}, {'block_Idx': 308, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400b03>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 4], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 0xe], al>', '<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7c>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400b03>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 8], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 4], 0x5e>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6b44414d>', '<je~~0x400ae7>']}, {'block_Idx': 66, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~dword ptr [rsp + 0x74], 1>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~dword ptr [rsp + 0x5c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x58], 0xffffffff>', '<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x28], 2>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x30], 1>', '<cmp~~dword ptr [rsp + 0x74], 0>', '<je~~0x4010a6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x4012e0>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4008ef>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4007e5>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x87>', '<jmp~~0x400b03>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b70>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54475170>', '<je~~0x400acb>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400cd0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4008a7>']}, {'block_Idx': 16, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0xfffff>', '<seta~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4008a7>']}, {'block_Idx': 155, 'blockInsts': ['<cmp~~eax, 0x53434145>', '<je~~0x4009b9>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x400b58>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x684e5331>', '<je~~0x400983>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x40081d>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x400933>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x400922>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<and~~eax, 0xffff>', '<cmp~~eax, 0x5450>', '<je~~0x400a2a>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4008bc>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 4>', '<call~~0x500020>']}, {'block_Idx': 47, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}, {'block_Idx': 75, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x40081d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x40082a>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7f>', '<jmp~~0x400b03>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x400a2c>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x400962>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500038>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x1c], 0>', '<mov~~byte ptr [rsp + 0xe], al>', '<je~~0x400815>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x400a3f>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 4], 0x26>', '<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<cmp~~dword ptr [rsp + 0x44], 0x52545347>', '<jne~~0x4009f5>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xb2c]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<xor~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 143, 'blockInsts': ['<jmp~~0x400951>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4443546d>', '<je~~0x400aad>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401260>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x4008cd>']}, {'block_Idx': 57, 'blockInsts': ['<jmp~~0x400900>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7e>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400b03>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400b30>']}], 'cfg_edge_info': [(190, 47), (58, 65), (42, 48), (150, 157), (154, 54), (29, 32), (181, 190), (23, 25), (37, 42), (68, 75), (47, 55), (64, 71), (81, 87), (162, 170), (3, 6), (133, 143), (75, 1), (142, 155), (48, 56), (20, 49), (157, 164), (15, 16), (164, 32), (18, 21), (65, 47), (163, 180), (46, 52), (40, 45), (80, 154), (148, 154), (181, 41), (107, 119), (5, 7), (0, 2), (69, 74), (87, 98), (1, 3), (155, 162), (16, 19), (308, 47), (52, 60), (300, 308), (19, 20), (70, 47), (76, 81), (71, 76), (47, 54), (64, 70), (33, 37), (120, 133), (3, 5), (154, 55), (60, 66), (180, 74), (60, 130), (23, 26), (2, 6), (113, 130), (7, 11), (117, 130), (4, 6), (67, 74), (75, 2), (49, 47), (162, 308), (17, 18), (25, 65), (119, 47), (172, 181), (150, 156), (143, 150), (37, 41), (6, 10), (98, 47), (133, 142), (87, 99), (1, 4), (56, 47), (76, 80), (54, 68), (32, 40), (18, 20), (55, 69), (43, 49), (80, 86), (2, 5), (19, 21), (48, 57), (15, 17), (130, 47), (4, 5), (59, 60), (156, 47), (116, 130), (0, 1), (46, 53), (40, 46), (16, 18), (53, 67), (41, 47), (21, 23), (99, 107), (107, 120), (164, 172), (17, 19), (10, 13), (57, 64), (155, 163), (13, 15)], 'cdg_edge_info': [(150, 157), (154, 54), (3, 13), (133, 150), (0, 5), (46, 130), (47, 55), (64, 71), (3, 6), (133, 143), (3, 15), (75, 1), (48, 47), (0, 7), (48, 56), (154, 74), (15, 16), (164, 32), (47, 75), (46, 52), (23, 47), (18, 23), (47, 68), (107, 119), (3, 10), (0, 2), (75, 5), (40, 47), (154, 69), (87, 98), (150, 47), (1, 3), (155, 162), (87, 107), (16, 19), (46, 47), (75, 7), (107, 133), (1, 5), (2, 13), (76, 81), (47, 54), (64, 70), (76, 154), (19, 47), (3, 5), (154, 55), (4, 13), (87, 47), (1, 7), (2, 6), (2, 15), (164, 40), (19, 49), (23, 65), (3, 7), (4, 6), (75, 2), (4, 15), (75, 11), (17, 18), (64, 47), (0, 11), (37, 48), (155, 180), (155, 308), (150, 156), (1, 11), (2, 10), (46, 74), (76, 87), (3, 11), (4, 10), (164, 47), (133, 142), (87, 99), (1, 4), (46, 67), (48, 64), (76, 80), (40, 60), (155, 47), (155, 74), (47, 74), (18, 47), (46, 60), (48, 57), (154, 75), (15, 17), (0, 1), (46, 53), (18, 49), (133, 155), (40, 46), (154, 68), (19, 23), (37, 47), (16, 18), (107, 47), (64, 76), (47, 69), (164, 172), (150, 164), (164, 181), (17, 19), (155, 163), (40, 130)], 'ddg_edge_info': [(32, 46), (19, 64), (154, 54), (0, 60), (142, 162), (0, 142), (68, 75), (13, 17), (130, 154), (54, 6), (13, 154), (19, 48), (4, 130), (16, 40), (10, 54), (65, 54), (0, 53), (16, 49), (19, 130), (32, 60), (75, 10), (0, 7), (49, 55), (0, 16), (0, 80), (13, 19), (15, 16), (13, 37), (13, 156), (0, 55), (32, 53), (163, 180), (0, 119), (13, 76), (16, 17), (54, 1), (19, 107), (16, 154), (4, 308), (308, 54), (69, 74), (19, 308), (154, 69), (130, 69), (4, 155), (16, 65), (13, 133), (13, 23), (13, 142), (13, 87), (19, 155), (0, 32), (19, 164), (19, 54), (0, 68), (163, 74), (13, 181), (13, 16), (13, 80), (10, 154), (65, 154), (0, 98), (0, 162), (180, 74), (154, 55), (4, 13), (130, 55), (13, 55), (49, 54), (13, 119), (13, 64), (19, 13), (4, 40), (7, 11), (68, 15), (19, 150), (19, 40), (54, 7), (164, 40), (19, 49), (119, 17), (0, 54), (67, 74), (4, 15), (13, 48), (15, 54), (19, 15), (0, 75), (308, 154), (13, 32), (55, 74), (75, 4), (0, 4), (10, 69), (4, 154), (65, 69), (0, 13), (19, 154), (6, 10), (54, 75), (4, 65), (13, 98), (4, 10), (13, 107), (19, 65), (19, 10), (1, 4), (0, 6), (142, 163), (0, 70), (0, 15), (16, 130), (19, 37), (54, 4), (54, 68), (4, 49), (32, 40), (55, 69), (49, 154), (130, 54), (13, 164), (10, 55), (13, 54), (65, 55), (19, 76), (308, 69), (0, 17), (0, 163), (53, 74), (13, 56), (0, 56), (0, 1), (133, 155), (19, 133), (40, 46), (75, 13), (19, 23), (11, 74), (0, 10), (0, 19), (19, 87), (16, 308), (0, 156), (15, 19), (53, 67), (13, 150), (16, 155), (56, 17), (19, 181), (308, 55), (17, 19), (10, 13), (75, 15), (13, 70), (49, 69), (13, 15)]}], 'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400645>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a2>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "call" for 0x4005b0>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40050c>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004fb>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f4>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x400336>, <DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "sub" for 0x4003c6>, <DisassemblerInsn "je" for 0x4003cb>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "cmp" for 0x400360>, <DisassemblerInsn "je" for 0x400363>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x400747>, <DisassemblerInsn "jmp" for 0x40074b>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ad>, <DisassemblerInsn "jmp" for 0x4006b5>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ae>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400557>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40046a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400404>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400652>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "sub" for 0x40044e>, <DisassemblerInsn "je" for 0x400453>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a4>, <DisassemblerInsn "je" for 0x4003a9>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "sub" for 0x4003f9>, <DisassemblerInsn "je" for 0x4003fe>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400437>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400365>, <DisassemblerInsn "call" for 0x40036a>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "or" for 0x400766>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "jmp" for 0x400774>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "mov" for 0x40058b>, <DisassemblerInsn "call" for 0x400590>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004df>, <DisassemblerInsn "sub" for 0x4004e3>, <DisassemblerInsn "je" for 0x4004e8>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40047b>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "call" for 0x400786>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "call" for 0x400552>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c0>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004cc>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40051d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "sub" for 0x4003d7>, <DisassemblerInsn "je" for 0x4003dc>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "sub" for 0x400658>, <DisassemblerInsn "shl" for 0x40065b>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "xor" for 0x400662>, <DisassemblerInsn "div" for 0x400664>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "mov" for 0x400671>, <DisassemblerInsn "jmp" for 0x400674>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400459>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005dd>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "movsxd" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "imul" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "movsxd" for 0x400606>, <DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "cqo" for 0x400616>, <DisassemblerInsn "idiv" for 0x400618>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "mov" for 0x40061e>, <DisassemblerInsn "mov" for 0x400622>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "sub" for 0x400631>, <DisassemblerInsn "je" for 0x400636>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400448>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005b9>, <DisassemblerInsn "jge" for 0x4005be>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003af>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400522>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "call" for 0x40052c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40039e>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "sub" for 0x4004c5>, <DisassemblerInsn "je" for 0x4004ca>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400647>, <DisassemblerInsn "sub" for 0x40064b>, <DisassemblerInsn "je" for 0x400650>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005a0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "cmp" for 0x400541>, <DisassemblerInsn "jne" for 0x400545>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fd>, <DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "je" for 0x400506>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "sub" for 0x40045f>, <DisassemblerInsn "je" for 0x400464>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c4>, <DisassemblerInsn "jmp" for 0x4005c8>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "sub" for 0x40040a>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400687>, <DisassemblerInsn "mov" for 0x40068b>, <DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "imul" for 0x400698>, <DisassemblerInsn "xor" for 0x40069c>, <DisassemblerInsn "div" for 0x40069e>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a2>, <DisassemblerInsn "add" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006aa>, <DisassemblerInsn "mov" for 0x4006ad>, <DisassemblerInsn "jmp" for 0x4006b5>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004bf>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ea>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f3>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400638>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003d1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004dd>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ec>, <DisassemblerInsn "sub" for 0x4004f0>, <DisassemblerInsn "je" for 0x4004f5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "cmp" for 0x40073c>, <DisassemblerInsn "jge" for 0x400741>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "call" for 0x4006e8>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "sub" for 0x4003e8>, <DisassemblerInsn "je" for 0x4003ed>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "call" for 0x40057d>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "jne" for 0x400576>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "sub" for 0x400599>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "jmp" for 0x4005a0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "sub" for 0x4004d2>, <DisassemblerInsn "je" for 0x4004d7>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "add" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "jmp" for 0x4006f8>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "sub" for 0x400512>, <DisassemblerInsn "je" for 0x400517>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "sub" for 0x4003b5>, <DisassemblerInsn "je" for 0x4003ba>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "call" for 0x400352>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "add" for 0x40079c>, <DisassemblerInsn "ret" for 0x4007a0>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400415>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "jmp" for 0x400723>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "sub" for 0x40063e>, <DisassemblerInsn "je" for 0x400643>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "mov" for 0x4006c2>, <DisassemblerInsn "jmp" for 0x4006ca>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "sub" for 0x400712>, <DisassemblerInsn "mov" for 0x400715>, <DisassemblerInsn "jmp" for 0x400719>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400676>, <DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "add" for 0x40067f>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "jmp" for 0x400685>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fa>, <DisassemblerInsn "mov" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "call" for 0x400709>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40078b>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072f>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400723>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "cmp" for 0x400561>, <DisassemblerInsn "je" for 0x400568>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400426>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "jmp" for 0x400373>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "add" for 0x40079c>, <DisassemblerInsn "ret" for 0x4007a0>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "sub" for 0x400535>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "cmp" for 0x400541>, <DisassemblerInsn "jne" for 0x400545>]'}], 'cfg_block_detailed_info': [{'block_Idx': 61, 'blockInsts': ['<jmp~~0x400647>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6544414d>', '<je~~0x4006d7>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x40050e>']}, {'block_Idx': 103, 'blockInsts': ['<jmp~~0x4004fd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006d7>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x4006cf>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x444e4553>', '<je~~0x4006ba>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006d7>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400375>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400798>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4004b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6843504d>', '<je~~0x40071b>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40078b>']}, {'block_Idx': 82, 'blockInsts': ['<jmp~~0x40046c>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x400406>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x400687>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54514970>', '<je~~0x40071b>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x43444e53>', '<je~~0x40053c>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454453>', '<je~~0x40053c>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400439>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<or~~ecx, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<call~~0x500020>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c444353>', '<je~~0x40053c>']}, {'block_Idx': 84, 'blockInsts': ['<jmp~~0x40047d>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<call~~0x500020>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 95, 'blockInsts': ['<jmp~~0x4004ce>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x400776>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x4006cf>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4630564d>', '<je~~0x400723>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<shl~~eax, 1>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~edx, edx>', '<div~~dword ptr [rcx + 0x30]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x4006ad>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x40045b>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rax], 0x15f90>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rdx, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<imul~~rcx, rdx>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rax + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rax]>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x1c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<sub~~eax, 0x10012>', '<je~~0x400676>']}, {'block_Idx': 78, 'blockInsts': ['<jmp~~0x40044a>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x4005cd>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4003b1>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 0x20>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4003a0>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x684e5331>', '<je~~0x400522>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x15001>', '<je~~0x400676>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x4006cf>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4005a2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x40055c>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4006d7>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x644e5331>', '<je~~0x40053c>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400798>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454553>', '<je~~0x4006ba>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<imul~~ecx, dword ptr [rdx + 0x30]>', '<xor~~edx, edx>', '<div~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x4004c1>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400790>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x4004ec>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x40048e>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x4003f5>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x40063a>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4003d3>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x4006ba>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4004df>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c454353>', '<je~~0x4006ba>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40074d>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4b30564d>', '<je~~0x40071b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x15001>', '<jne~~0x4005a0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4005a2>']}, {'block_Idx': 17, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6b44414d>', '<je~~0x4006cf>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x4006cf>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x4006ba>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4443546d>', '<je~~0x4006fa>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 45, 'blockInsts': ['<jmp~~0x4003e4>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<jmp~~0x400725>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x1100a>', '<je~~0x400654>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xfffffffb>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x40078b>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x654e5331>', '<je~~0x4006ba>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400725>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x4006ad>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40049f>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40033a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x400725>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x10012>', '<je~~0x400578>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400428>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400383>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0x20>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x40055c>']}], 'cfg_edge_info': [(24, 33), (99, 100), (52, 58), (59, 18), (14, 13), (22, 26), (74, 73), (48, 54), (11, 14), (32, 12), (100, 101), (98, 21), (72, 75), (54, 15), (61, 63), (46, 50), (2, 4), (49, 55), (106, 107), (18, 21), (107, 108), (51, 57), (73, 39), (103, 104), (80, 81), (40, 45), (68, 70), (85, 86), (94, 98), (81, 18), (30, 34), (64, 66), (81, 82), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (65, 67), (104, 105), (97, 99), (53, 50), (93, 95), (16, 19), (47, 52), (105, 106), (82, 83), (42, 47), (17, 2), (12, 15), (14, 12), (67, 15), (100, 18), (20, 28), (78, 79), (48, 53), (66, 68), (83, 84), (1, 5), (98, 20), (13, 16), (62, 64), (79, 80), (72, 74), (25, 24), (58, 60), (60, 57), (22, 27), (95, 97), (89, 90), (79, 55), (108, 15), (19, 22), (7, 11), (57, 15), (63, 65), (56, 59), (90, 91), (97, 69), (35, 39), (86, 87), (40, 44), (49, 56), (10, 12), (39, 48), (36, 40), (32, 36), (5, 6), (21, 24), (69, 73), (70, 72), (87, 88), (75, 77), (63, 51), (93, 94), (47, 51), (88, 89), (6, 10), (84, 85), (55, 39), (27, 32), (41, 34), (106, 69), (44, 39), (87, 74), (18, 20), (28, 15), (85, 12), (91, 92), (68, 69), (45, 49), (89, 55), (104, 74), (15, 17), (58, 61), (33, 41), (26, 35), (101, 102), (102, 12), (0, 1), (34, 42), (92, 93), (102, 103), (16, 18), (64, 12), (25, 30), (42, 46), (59, 62), (17, 1), (91, 69), (83, 74), (10, 13)], 'cdg_edge_info': [(72, 73), (81, 21), (18, 17), (59, 64), (25, 41), (87, 89), (59, 18), (5, 10), (68, 48), (22, 26), (0, 5), (22, 35), (48, 54), (83, 85), (32, 12), (100, 101), (83, 39), (98, 21), (79, 81), (72, 75), (16, 22), (87, 73), (42, 50), (81, 41), (17, 5), (91, 73), (100, 21), (14, 15), (49, 55), (106, 107), (87, 48), (59, 41), (104, 73), (106, 15), (72, 77), (16, 24), (98, 41), (81, 34), (16, 33), (16, 42), (49, 39), (14, 17), (5, 14), (49, 48), (104, 48), (22, 39), (91, 93), (100, 41), (77, 39), (68, 70), (85, 86), (77, 48), (59, 34), (81, 18), (98, 34), (48, 15), (64, 66), (81, 82), (79, 39), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (83, 73), (22, 32), (21, 34), (85, 15), (100, 34), (97, 99), (5, 16), (104, 105), (49, 59), (68, 72), (10, 15), (93, 95), (64, 68), (48, 17), (42, 47), (83, 48), (17, 2), (100, 18), (102, 15), (14, 12), (48, 53), (40, 49), (83, 84), (10, 17), (98, 20), (93, 97), (79, 80), (72, 74), (16, 21), (25, 24), (64, 15), (25, 33), (58, 60), (17, 4), (77, 73), (5, 11), (97, 39), (89, 90), (79, 55), (97, 48), (42, 15), (22, 48), (97, 69), (106, 17), (79, 48), (59, 24), (106, 108), (42, 17), (59, 33), (10, 12), (98, 15), (59, 42), (102, 104), (63, 67), (47, 58), (5, 6), (87, 88), (21, 42), (89, 39), (0, 4), (98, 17), (85, 17), (63, 51), (93, 94), (47, 51), (97, 73), (77, 79), (106, 39), (104, 106), (97, 100), (106, 48), (102, 17), (10, 16), (100, 102), (106, 69), (32, 40), (81, 24), (68, 39), (87, 74), (18, 20), (64, 17), (81, 33), (16, 41), (72, 39), (81, 42), (59, 21), (72, 48), (85, 12), (91, 92), (68, 69), (32, 15), (93, 98), (98, 24), (104, 74), (89, 55), (98, 33), (98, 42), (16, 34), (102, 12), (89, 91), (87, 39), (0, 1), (100, 24), (48, 50), (100, 33), (100, 42), (91, 39), (85, 87), (102, 103), (32, 17), (91, 48), (89, 48), (106, 73), (16, 18), (18, 15), (81, 83), (64, 12), (58, 63), (42, 46), (104, 39), (17, 1), (91, 69), (40, 39), (83, 74), (40, 48), (68, 73)], 'ddg_edge_info': [(12, 4), (64, 5), (7, 72), (7, 17), (34, 1), (24, 33), (7, 81), (7, 26), (6, 91), (26, 39), (0, 51), (5, 10), (0, 60), (0, 5), (14, 22), (74, 73), (94, 21), (11, 14), (67, 98), (14, 40), (51, 25), (14, 104), (7, 1), (98, 21), (14, 49), (51, 98), (41, 42), (6, 20), (7, 74), (34, 58), (39, 17), (7, 83), (34, 67), (17, 5), (0, 108), (0, 53), (108, 4), (42, 4), (14, 79), (0, 7), (32, 5), (60, 21), (39, 53), (14, 97), (6, 59), (6, 4), (14, 106), (6, 68), (4, 50), (7, 12), (6, 77), (34, 60), (98, 41), (7, 21), (7, 85), (54, 17), (0, 46), (7, 94), (14, 72), (73, 39), (60, 5), (5, 14), (6, 34), (6, 98), (49, 48), (14, 81), (94, 25), (14, 35), (94, 34), (94, 98), (14, 108), (98, 25), (55, 54), (7, 69), (98, 34), (7, 14), (0, 94), (0, 39), (7, 87), (20, 17), (69, 74), (6, 100), (14, 83), (41, 67), (60, 25), (7, 108), (53, 50), (60, 98), (34, 46), (7, 16), (20, 1), (54, 67), (17, 48), (54, 21), (14, 67), (108, 1), (17, 11), (6, 93), (41, 60), (48, 53), (14, 85), (94, 20), (6, 102), (1, 5), (6, 1), (7, 55), (98, 20), (7, 64), (0, 25), (47, 54), (54, 5), (0, 34), (25, 33), (47, 63), (0, 98), (14, 60), (25, 42), (14, 5), (6, 22), (12, 17), (67, 17), (5, 11), (6, 40), (7, 39), (6, 104), (14, 87), (14, 32), (6, 49), (73, 48), (1, 7), (34, 50), (7, 11), (20, 5), (34, 4), (6, 79), (6, 24), (54, 25), (0, 54), (35, 39), (14, 16), (7, 32), (35, 48), (6, 97), (79, 48), (33, 51), (6, 106), (14, 89), (39, 48), (108, 17), (7, 59), (7, 4), (0, 20), (7, 68), (47, 58), (6, 72), (6, 17), (6, 81), (14, 64), (0, 47), (6, 26), (7, 25), (14, 73), (7, 89), (67, 21), (7, 34), (21, 33), (7, 98), (6, 108), (0, 4), (39, 50), (10, 14), (14, 39), (39, 4), (6, 10), (34, 63), (6, 74), (67, 60), (67, 5), (6, 83), (7, 91), (7, 100), (0, 6), (34, 47), (14, 41), (0, 24), (0, 33), (41, 34), (6, 12), (14, 59), (6, 21), (7, 20), (6, 85), (14, 68), (6, 94), (14, 77), (7, 93), (67, 25), (6, 39), (7, 102), (108, 5), (98, 67), (1, 6), (54, 98), (94, 24), (39, 54), (0, 17), (17, 33), (14, 34), (14, 98), (0, 26), (17, 42), (20, 4), (74, 39), (6, 69), (7, 77), (33, 41), (7, 22), (26, 35), (6, 32), (60, 67), (6, 87), (98, 60), (7, 40), (7, 104), (0, 1), (7, 49), (85, 5), (34, 42), (0, 74), (48, 4), (39, 1), (51, 21), (34, 51), (14, 100), (14, 91), (89, 48), (6, 16), (69, 54), (33, 34), (6, 25), (42, 46), (7, 24), (6, 89), (47, 5), (7, 79), (102, 5), (34, 17), (7, 97), (17, 10), (7, 106), (14, 20), (51, 5), (0, 67), (40, 48), (14, 93), (0, 21), (6, 55), (14, 102), (6, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 183, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 184, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 185, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 186, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t$0x87, 4(%rax)'}, {'instIndex': 188, 'instruction': 'jmp\t.LBB3_29'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 190, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 191, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 242, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 244, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 245, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 246, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 247, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 249, 'instruction': 'jmp\t.LBB2_26'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 460 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 375, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 376, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 377, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 381, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 382, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 383, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 388, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.o---after
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 340 nodes and 614 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 460 instructions in binary file.
[4202397, 4202408, 4202441]
The execution time of patched subCFG information extraction via angr: 0:00:03.547250
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b7c>, <DisassemblerInsn "mov" for 0x401b80>, <DisassemblerInsn "sub" for 0x401b87>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "je" for 0x401b91>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bde>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "sub" for 0x401be9>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "je" for 0x401bf3>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "mov" for 0x401fb0>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fbf>, <DisassemblerInsn "call" for 0x401fc4>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b68>, <DisassemblerInsn "sub" for 0x401b6f>, <DisassemblerInsn "je" for 0x401b74>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "mov" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "jmp" for 0x401fd9>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "sub" for 0x401ba0>, <DisassemblerInsn "je" for 0x401ba5>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f9d>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "jmp" for 0x401fa6>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "sub" for 0x401d19>, <DisassemblerInsn "je" for 0x401d1e>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c8c>, <DisassemblerInsn "sub" for 0x401c93>, <DisassemblerInsn "je" for 0x401c98>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x40202e>, <DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "call" for 0x402036>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c33>, <DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "sub" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c44>, <DisassemblerInsn "je" for 0x401c48>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "sub" for 0x401c6b>, <DisassemblerInsn "je" for 0x401c70>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "mov" for 0x401cf9>, <DisassemblerInsn "sub" for 0x401d00>, <DisassemblerInsn "mov" for 0x401d06>, <DisassemblerInsn "je" for 0x401d0a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x54475666>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6544414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54475170>', '<je~~0x401f9d>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40201a>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x5447566b>', '<je~~0x401f9d>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401fa8>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x73514754>', '<je~~0x401f9d>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6b44414d>', '<je~~0x401f9d>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 4], eax>', '<call~~0x500050>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6649564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6849564d>', '<je~~0x401f9d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6d44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}], 'cfg_edge_info': [(58, 27), (86, 56), (56, 58), (66, 56), (88, 54), (74, 54), (80, 54), (53, 54), (54, 56), (70, 56), (60, 54), (57, 56)]}]}
{'ea_read_packet': [4202397, 4202408, 4202441]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O1/electronicarts.o---after
The extraction of function: ea_read_packet
[4202397, 4202408, 4202441]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 106 nodes and 156 edges in CFGEmulated.
It has 104 nodes and 211 edges in CDG.
It has 1967 nodes and 2476 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202397, 4202408, 4202441]
{4200960, 4202503, 4200973, 4200979, 4202522, 4200992, 4200996, 4202024, 4201521, 4201523, 4202041, 4202555, 4202572, 4201550, 4201552, 4201570, 4201572, 4201073, 4201590, 4201592, 4201610, 4201612, 4201102, 4202646, 4201630, 4201632, 4201122, 4202148, 4202672, 4202161, 4201659, 4201661, 4202177, 4200656, 4202707, 4201178, 4201715, 4201717, 4201215, 4202763, 4201744, 4202256, 4201746, 4201235, 4201764, 4201769, 4201264, 4201787, 4201798, 4202310, 4201826, 4201318, 4201320, 4201839, 4201338, 4201340, 4201872, 4201367, 4201369, 4202397, 4201893, 4202408, 4201387, 4201389, 4200881, 4201407, 4201409, 4202441, 4201933, 4201946, 4202459, 4201436, 4201438, 4200938, 4201968, 4202482, 4201465, 4201467}
[35, 50, 82, 78, 9, 18, 13, 64, 0, 80, 53, 85, 97, 48, 47, 14, 63, 49, 8, 16, 59, 86, 34, 98, 11, 10, 72, 96, 58, 4, 93, 84, 17, 52, 25, 67, 73, 61, 23, 54, 74, 81, 87, 75, 66, 83, 79, 41, 37, 33, 31, 44, 88, 32, 55, 68, 65, 71, 62, 22, 90, 100, 7, 42, 26, 24, 3, 51, 12, 89, 57, 76, 105, 2, 29, 36, 103, 95, 94, 39, 56, 60, 27, 92, 45, 19, 99, 20, 101, 77, 102, 70]
The execution time of patched slicing information extraction via angr: 0:00:07.463223
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d8e>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b11>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c33>, <DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "sub" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c44>, <DisassemblerInsn "je" for 0x401c48>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bde>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "sub" for 0x401be9>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "je" for 0x401bf3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020d3>, <DisassemblerInsn "mov" for 0x4020d7>, <DisassemblerInsn "mov" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020df>, <DisassemblerInsn "cmp" for 0x4020e3>, <DisassemblerInsn "mov" for 0x4020e6>, <DisassemblerInsn "mov" for 0x4020ea>, <DisassemblerInsn "mov" for 0x4020f1>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402101>, <DisassemblerInsn "je" for 0x402105>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d90>, <DisassemblerInsn "mov" for 0x401d98>, <DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401d9e>, <DisassemblerInsn "call" for 0x401da0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b1>, <DisassemblerInsn "mov" for 0x4019b9>, <DisassemblerInsn "mov" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "mov" for 0x4019d2>, <DisassemblerInsn "mov" for 0x4019d6>, <DisassemblerInsn "mov" for 0x4019da>, <DisassemblerInsn "mov" for 0x4019de>, <DisassemblerInsn "call" for 0x4019e5>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f9d>, <DisassemblerInsn "mov" for 0x401fa2>, <DisassemblerInsn "jmp" for 0x401fa6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4018d0>, <DisassemblerInsn "mov" for 0x4018d7>, <DisassemblerInsn "mov" for 0x4018df>, <DisassemblerInsn "mov" for 0x4018e3>, <DisassemblerInsn "mov" for 0x4018eb>, <DisassemblerInsn "mov" for 0x4018ef>, <DisassemblerInsn "mov" for 0x4018f7>, <DisassemblerInsn "add" for 0x4018fa>, <DisassemblerInsn "mov" for 0x4018fe>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "add" for 0x401909>, <DisassemblerInsn "mov" for 0x40190d>, <DisassemblerInsn "mov" for 0x401915>, <DisassemblerInsn "add" for 0x401918>, <DisassemblerInsn "mov" for 0x40191c>, <DisassemblerInsn "mov" for 0x401924>, <DisassemblerInsn "add" for 0x401927>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "mov" for 0x401933>, <DisassemblerInsn "add" for 0x401936>, <DisassemblerInsn "mov" for 0x40193a>, <DisassemblerInsn "add" for 0x401942>, <DisassemblerInsn "mov" for 0x401946>, <DisassemblerInsn "mov" for 0x40194e>, <DisassemblerInsn "add" for 0x401951>, <DisassemblerInsn "mov" for 0x401955>, <DisassemblerInsn "mov" for 0x40195d>, <DisassemblerInsn "add" for 0x401960>, <DisassemblerInsn "mov" for 0x401964>, <DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "add" for 0x40196f>, <DisassemblerInsn "mov" for 0x401973>, <DisassemblerInsn "mov" for 0x40197b>, <DisassemblerInsn "add" for 0x40197e>, <DisassemblerInsn "mov" for 0x401982>, <DisassemblerInsn "add" for 0x40198a>, <DisassemblerInsn "mov" for 0x40198e>, <DisassemblerInsn "xor" for 0x401996>, <DisassemblerInsn "mov" for 0x401998>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x4019a1>, <DisassemblerInsn "mov" for 0x4019a3>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019b1>, <DisassemblerInsn "mov" for 0x4019b9>, <DisassemblerInsn "mov" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "mov" for 0x4019d2>, <DisassemblerInsn "mov" for 0x4019d6>, <DisassemblerInsn "mov" for 0x4019da>, <DisassemblerInsn "mov" for 0x4019de>, <DisassemblerInsn "call" for 0x4019e5>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bfb>, <DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c06>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "mov" for 0x401c0e>, <DisassemblerInsn "sub" for 0x401c15>, <DisassemblerInsn "mov" for 0x401c1b>, <DisassemblerInsn "mov" for 0x401c1f>, <DisassemblerInsn "mov" for 0x401c23>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "je" for 0x401c2b>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "mov" for 0x401f14>, <DisassemblerInsn "mov" for 0x401f18>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f31>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "mov" for 0x401f3d>, <DisassemblerInsn "jmp" for 0x401f41>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c62>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cbd>, <DisassemblerInsn "mov" for 0x401cc4>, <DisassemblerInsn "mov" for 0x401cc8>, <DisassemblerInsn "mov" for 0x401ccc>, <DisassemblerInsn "mov" for 0x401cd0>, <DisassemblerInsn "sub" for 0x401cd7>, <DisassemblerInsn "mov" for 0x401cdd>, <DisassemblerInsn "mov" for 0x401ce1>, <DisassemblerInsn "mov" for 0x401ce5>, <DisassemblerInsn "mov" for 0x401ce9>, <DisassemblerInsn "je" for 0x401ced>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40204c>, <DisassemblerInsn "mov" for 0x402053>, <DisassemblerInsn "mov" for 0x402057>, <DisassemblerInsn "mov" for 0x40205b>, <DisassemblerInsn "mov" for 0x402063>, <DisassemblerInsn "mov" for 0x40206b>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "mov" for 0x402076>, <DisassemblerInsn "mov" for 0x402079>, <DisassemblerInsn "or" for 0x40207b>, <DisassemblerInsn "mov" for 0x40207d>, <DisassemblerInsn "mov" for 0x40207f>, <DisassemblerInsn "mov" for 0x402084>, <DisassemblerInsn "mov" for 0x402088>, <DisassemblerInsn "mov" for 0x40208c>, <DisassemblerInsn "mov" for 0x402090>, <DisassemblerInsn "jmp" for 0x402094>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "cmp" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e2f>, <DisassemblerInsn "jl" for 0x401e33>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a71>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "sub" for 0x401a7c>, <DisassemblerInsn "mov" for 0x401a82>, <DisassemblerInsn "je" for 0x401a86>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ebc>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402007>, <DisassemblerInsn "mov" for 0x40200b>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "mov" for 0x402014>, <DisassemblerInsn "jmp" for 0x402018>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a0d>, <DisassemblerInsn "jmp" for 0x401a11>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "mov" for 0x401d4e>, <DisassemblerInsn "mov" for 0x401d52>, <DisassemblerInsn "mov" for 0x401d56>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "test" for 0x401d5c>, <DisassemblerInsn "je" for 0x401d5e>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401eaf>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "sub" for 0x401c6b>, <DisassemblerInsn "je" for 0x401c70>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dda>, <DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "mov" for 0x401de6>, <DisassemblerInsn "call" for 0x401deb>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401cf3>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a24>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a36>, <DisassemblerInsn "mov" for 0x401a3a>, <DisassemblerInsn "add" for 0x401a3e>, <DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a45>, <DisassemblerInsn "mov" for 0x401a4a>, <DisassemblerInsn "mov" for 0x401a4e>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "test" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a59>, <DisassemblerInsn "mov" for 0x401a5d>, <DisassemblerInsn "mov" for 0x401a61>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "je" for 0x401a69>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a6f>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "sub" for 0x401ba0>, <DisassemblerInsn "je" for 0x401ba5>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401cbb>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec1>, <DisassemblerInsn "mov" for 0x401ec5>, <DisassemblerInsn "mov" for 0x401ec9>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "shl" for 0x401eda>, <DisassemblerInsn "add" for 0x401edc>, <DisassemblerInsn "xor" for 0x401edf>, <DisassemblerInsn "div" for 0x401ee1>, <DisassemblerInsn "mov" for 0x401ee3>, <DisassemblerInsn "mov" for 0x401eeb>, <DisassemblerInsn "mov" for 0x401eed>, <DisassemblerInsn "add" for 0x401ef1>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "mov" for 0x401efb>, <DisassemblerInsn "mov" for 0x401eff>, <DisassemblerInsn "mov" for 0x401f03>, <DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "jmp" for 0x401f0b>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "call" for 0x401a08>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d3b>, <DisassemblerInsn "add" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d42>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "mov" for 0x401d4e>, <DisassemblerInsn "mov" for 0x401d52>, <DisassemblerInsn "mov" for 0x401d56>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "test" for 0x401d5c>, <DisassemblerInsn "je" for 0x401d5e>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c50>, <DisassemblerInsn "sub" for 0x401c57>, <DisassemblerInsn "je" for 0x401c5c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a8c>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b13>, <DisassemblerInsn "mov" for 0x401b17>, <DisassemblerInsn "sub" for 0x401b1e>, <DisassemblerInsn "mov" for 0x401b24>, <DisassemblerInsn "je" for 0x401b28>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da5>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "mov" for 0x401dad>, <DisassemblerInsn "mov" for 0x401db1>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "mov" for 0x401dbc>, <DisassemblerInsn "mov" for 0x401dc0>, <DisassemblerInsn "mov" for 0x401dc4>, <DisassemblerInsn "jmp" for 0x401dc8>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "mov" for 0x401fb0>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fbf>, <DisassemblerInsn "call" for 0x401fc4>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401bab>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "sub" for 0x401eb5>, <DisassemblerInsn "je" for 0x401eba>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdb>, <DisassemblerInsn "mov" for 0x401fe3>, <DisassemblerInsn "mov" for 0x401fe8>, <DisassemblerInsn "call" for 0x401fed>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ea2>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bad>, <DisassemblerInsn "sub" for 0x401bb4>, <DisassemblerInsn "je" for 0x401bb9>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c31>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c76>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401bbf>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f46>, <DisassemblerInsn "mov" for 0x401f4a>, <DisassemblerInsn "mov" for 0x401f4e>, <DisassemblerInsn "mov" for 0x401f53>, <DisassemblerInsn "mov" for 0x401f57>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "mov" for 0x401f67>, <DisassemblerInsn "imul" for 0x401f69>, <DisassemblerInsn "xor" for 0x401f6c>, <DisassemblerInsn "div" for 0x401f6e>, <DisassemblerInsn "mov" for 0x401f70>, <DisassemblerInsn "mov" for 0x401f78>, <DisassemblerInsn "mov" for 0x401f7a>, <DisassemblerInsn "add" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f81>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "mov" for 0x401f88>, <DisassemblerInsn "mov" for 0x401f8c>, <DisassemblerInsn "mov" for 0x401f90>, <DisassemblerInsn "mov" for 0x401f94>, <DisassemblerInsn "jmp" for 0x401f98>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c4e>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401bf9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401afd>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ada>, <DisassemblerInsn "mov" for 0x401ade>, <DisassemblerInsn "mov" for 0x401ae2>, <DisassemblerInsn "sub" for 0x401ae9>, <DisassemblerInsn "mov" for 0x401aef>, <DisassemblerInsn "mov" for 0x401af3>, <DisassemblerInsn "je" for 0x401af7>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ad8>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "sub" for 0x401d7e>, <DisassemblerInsn "mov" for 0x401d84>, <DisassemblerInsn "mov" for 0x401d88>, <DisassemblerInsn "je" for 0x401d8c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203b>, <DisassemblerInsn "cmp" for 0x40203f>, <DisassemblerInsn "mov" for 0x402042>, <DisassemblerInsn "jl" for 0x402046>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "sub" for 0x401c7f>, <DisassemblerInsn "je" for 0x401c84>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "add" for 0x401ffa>, <DisassemblerInsn "mov" for 0x401ffd>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "jmp" for 0x402005>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b2e>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b7c>, <DisassemblerInsn "mov" for 0x401b80>, <DisassemblerInsn "sub" for 0x401b87>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "je" for 0x401b91>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b7a>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "mov" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "jmp" for 0x401fd9>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b68>, <DisassemblerInsn "sub" for 0x401b6f>, <DisassemblerInsn "je" for 0x401b74>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d62>, <DisassemblerInsn "sub" for 0x401d66>, <DisassemblerInsn "je" for 0x401d6b>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c8a>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d10>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a24>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a36>, <DisassemblerInsn "mov" for 0x401a3a>, <DisassemblerInsn "add" for 0x401a3e>, <DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a45>, <DisassemblerInsn "mov" for 0x401a4a>, <DisassemblerInsn "mov" for 0x401a4e>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "test" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a59>, <DisassemblerInsn "mov" for 0x401a5d>, <DisassemblerInsn "mov" for 0x401a61>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "je" for 0x401a69>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df4>, <DisassemblerInsn "add" for 0x401df8>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "mov" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e13>, <DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1b>, <DisassemblerInsn "mov" for 0x401e1f>, <DisassemblerInsn "call" for 0x401e23>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dcd>, <DisassemblerInsn "call" for 0x401dd5>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401aa0>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a13>, <DisassemblerInsn "call" for 0x401a1b>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e39>, <DisassemblerInsn "mov" for 0x401e41>, <DisassemblerInsn "mov" for 0x401e49>, <DisassemblerInsn "mov" for 0x401e51>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "mov" for 0x401e61>, <DisassemblerInsn "mov" for 0x401e63>, <DisassemblerInsn "mov" for 0x401e65>, <DisassemblerInsn "movsxd" for 0x401e6c>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "mov" for 0x401e71>, <DisassemblerInsn "imul" for 0x401e75>, <DisassemblerInsn "mov" for 0x401e7c>, <DisassemblerInsn "movsxd" for 0x401e7f>, <DisassemblerInsn "cqo" for 0x401e82>, <DisassemblerInsn "idiv" for 0x401e84>, <DisassemblerInsn "mov" for 0x401e87>, <DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e95>, <DisassemblerInsn "mov" for 0x401e97>, <DisassemblerInsn "sub" for 0x401e9b>, <DisassemblerInsn "je" for 0x401ea0>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40210b>, <DisassemblerInsn "add" for 0x40210f>, <DisassemblerInsn "ret" for 0x402116>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d29>, <DisassemblerInsn "mov" for 0x401d31>, <DisassemblerInsn "call" for 0x401d36>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b30>, <DisassemblerInsn "mov" for 0x401b37>, <DisassemblerInsn "mov" for 0x401b3b>, <DisassemblerInsn "mov" for 0x401b3f>, <DisassemblerInsn "mov" for 0x401b43>, <DisassemblerInsn "sub" for 0x401b4a>, <DisassemblerInsn "mov" for 0x401b50>, <DisassemblerInsn "mov" for 0x401b54>, <DisassemblerInsn "mov" for 0x401b58>, <DisassemblerInsn "mov" for 0x401b5c>, <DisassemblerInsn "je" for 0x401b60>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc1>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "sub" for 0x401bcc>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "je" for 0x401bd6>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020b0>, <DisassemblerInsn "mov" for 0x4020b4>, <DisassemblerInsn "mov" for 0x4020b8>, <DisassemblerInsn "mov" for 0x4020bc>, <DisassemblerInsn "mov" for 0x4020c3>, <DisassemblerInsn "mov" for 0x4020c7>, <DisassemblerInsn "mov" for 0x4020cb>, <DisassemblerInsn "mov" for 0x4020cf>, <DisassemblerInsn "mov" for 0x4020d3>, <DisassemblerInsn "mov" for 0x4020d7>, <DisassemblerInsn "mov" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020df>, <DisassemblerInsn "cmp" for 0x4020e3>, <DisassemblerInsn "mov" for 0x4020e6>, <DisassemblerInsn "mov" for 0x4020ea>, <DisassemblerInsn "mov" for 0x4020f1>, <DisassemblerInsn "mov" for 0x4020f8>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x402101>, <DisassemblerInsn "je" for 0x402105>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ea>, <DisassemblerInsn "mov" for 0x4019ec>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "cmp" for 0x4019fb>, <DisassemblerInsn "je" for 0x4019fe>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa2>, <DisassemblerInsn "mov" for 0x401aa9>, <DisassemblerInsn "mov" for 0x401aad>, <DisassemblerInsn "mov" for 0x401ab1>, <DisassemblerInsn "mov" for 0x401ab5>, <DisassemblerInsn "sub" for 0x401abc>, <DisassemblerInsn "mov" for 0x401ac2>, <DisassemblerInsn "mov" for 0x401ac6>, <DisassemblerInsn "mov" for 0x401aca>, <DisassemblerInsn "mov" for 0x401ace>, <DisassemblerInsn "je" for 0x401ad2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40201a>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x40202e>, <DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "call" for 0x402036>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "mov" for 0x40209e>, <DisassemblerInsn "mov" for 0x4020a2>, <DisassemblerInsn "mov" for 0x4020a4>, <DisassemblerInsn "mov" for 0x4020a6>, <DisassemblerInsn "call" for 0x4020ab>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ca0>, <DisassemblerInsn "mov" for 0x401ca4>, <DisassemblerInsn "sub" for 0x401cab>, <DisassemblerInsn "mov" for 0x401cb1>, <DisassemblerInsn "je" for 0x401cb5>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c9e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e03>, <DisassemblerInsn "mov" for 0x401e0b>, <DisassemblerInsn "mov" for 0x401e13>, <DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1b>, <DisassemblerInsn "mov" for 0x401e1f>, <DisassemblerInsn "call" for 0x401e23>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "sub" for 0x401ea8>, <DisassemblerInsn "je" for 0x401ead>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b66>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d6d>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c8c>, <DisassemblerInsn "sub" for 0x401c93>, <DisassemblerInsn "je" for 0x401c98>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aff>, <DisassemblerInsn "sub" for 0x401b06>, <DisassemblerInsn "je" for 0x401b0b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d60>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "mov" for 0x401cf9>, <DisassemblerInsn "sub" for 0x401d00>, <DisassemblerInsn "mov" for 0x401d06>, <DisassemblerInsn "je" for 0x401d0a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "sub" for 0x401a95>, <DisassemblerInsn "je" for 0x401a9a>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "sub" for 0x401d19>, <DisassemblerInsn "je" for 0x401d1e>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401bdc>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d24>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b97>]'}], 'cfg_block_detailed_info': [{'block_Idx': 35, 'blockInsts': ['<jmp~~0x401e03>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401b13>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6649564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6544414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<mov~~esi, dword ptr [rsp + 0x68]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], esi>', '<mov~~dword ptr [rsp + 0xfc], edx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4019b1>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~esi, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<call~~0x500008>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401fa8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x108>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<add~~rsi, 0x1c>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~esi, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<call~~0x500008>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rsp + 0x10]>', '<add~~edi, eax>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4020d3>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401c64>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~esi, dword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~edi, ecx>', '<or~~edi, dword ptr [rdx]>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4020d3>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x40210b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401d46>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401f46>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40201a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x401a24>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401d90>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401eb1>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6849564d>', '<je~~0x401f9d>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x401cf5>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<add~~edx, -8>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~esi, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], esi>', '<test~~edi, edi>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x401a71>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x5447566b>', '<je~~0x401f9d>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x401cbd>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4020d3>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500018>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401d90>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6843504d>', '<je~~0x402007>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x401a8e>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401d46>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4020d3>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x401bad>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<sub~~eax, 0x15001>', '<je~~0x401f10>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x401ea4>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54514970>', '<je~~0x402007>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x401c33>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x401c78>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x401bc1>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4020d3>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401c50>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x401bfb>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x401aff>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x84]>', '<sub~~edx, 0x4630564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x40201a>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x401ada>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~edx, dword ptr [rsp + 0x38]>', '<sub~~edx, 0x15001>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x401dcd>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x40210b>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x684e5331>', '<je~~0x401d29>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~ecx, -0x10>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40201a>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x401b30>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x54475666>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401b7c>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40201a>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54475170>', '<je~~0x401f9d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x401dcd>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x401c8c>']}, {'block_Idx': 100, 'blockInsts': ['<jmp~~0x401d12>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x6c], eax>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<add~~edx, -8>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~esi, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], esi>', '<test~~edi, edi>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<call~~0x500050>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500008>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x401aa2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500008>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<mov~~qword ptr [rcx], 0x15f90>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x10], esi>', '<imul~~rax, rax, 0x15f90>', '<mov~~qword ptr [rcx], rax>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<sub~~eax, 0x10012>', '<je~~0x401f10>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x108>', '<ret~~>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401d46>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<mov~~esi, dword ptr [rsp + 0x68]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], esi>', '<mov~~dword ptr [rsp + 0xfc], edx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4019b1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401a13>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4020d3>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 4], eax>', '<call~~0x500050>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401d46>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401ca0>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<call~~0x500050>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<sub~~eax, 0x1100a>', '<je~~0x401ec1>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401b68>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x401d6f>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6b44414d>', '<je~~0x401f9d>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x4b30564d>', '<je~~0x402007>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x401d62>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6d44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401fa8>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x4443546d>', '<je~~0x401fdb>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x73514754>', '<je~~0x401f9d>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x401bde>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x402096>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x401b99>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (99, 100), (22, 26), (100, 101), (7, 10), (96, 97), (73, 74), (61, 63), (8, 11), (2, 4), (74, 75), (53, 9), (90, 92), (20, 24), (14, 17), (9, 12), (11, 9), (80, 81), (66, 9), (89, 93), (75, 76), (68, 70), (85, 86), (81, 82), (59, 61), (60, 62), (31, 26), (77, 78), (0, 2), (31, 35), (92, 94), (27, 31), (16, 19), (88, 90), (42, 47), (82, 83), (78, 79), (83, 84), (84, 49), (82, 67), (7, 9), (62, 64), (79, 80), (33, 37), (51, 54), (49, 36), (29, 33), (26, 34), (22, 27), (52, 16), (44, 12), (99, 67), (101, 64), (19, 22), (45, 50), (56, 59), (74, 49), (3, 7), (92, 64), (20, 23), (52, 55), (14, 16), (86, 87), (105, 12), (13, 2), (93, 19), (32, 36), (78, 67), (4, 8), (58, 9), (80, 9), (18, 25), (103, 105), (87, 88), (70, 72), (97, 98), (17, 20), (10, 14), (37, 41), (47, 51), (88, 89), (86, 64), (97, 9), (61, 53), (84, 85), (2, 3), (76, 16), (68, 67), (36, 44), (48, 9), (94, 95), (51, 53), (67, 71), (44, 48), (95, 96), (57, 60), (37, 36), (45, 49), (62, 65), (56, 58), (95, 16), (24, 29), (41, 45), (101, 102), (47, 12), (93, 18), (39, 47), (9, 13), (11, 10), (25, 9), (34, 42), (102, 103), (63, 66), (29, 9), (16, 18), (64, 67), (98, 99), (71, 36), (105, 13), (65, 68), (23, 32), (57, 9), (76, 77), (54, 56), (72, 64)], 'cdg_edge_info': [(72, 73), (99, 100), (72, 36), (16, 47), (20, 29), (62, 44), (93, 22), (11, 14), (2, 11), (16, 22), (88, 93), (47, 9), (101, 44), (2, 4), (74, 75), (78, 36), (92, 44), (97, 67), (86, 67), (62, 67), (22, 12), (16, 42), (86, 88), (84, 36), (80, 81), (31, 42), (11, 9), (68, 70), (7, 14), (93, 47), (16, 26), (68, 36), (101, 103), (92, 67), (31, 26), (82, 44), (97, 99), (20, 44), (97, 44), (86, 44), (92, 94), (68, 72), (62, 71), (74, 36), (88, 90), (82, 83), (101, 105), (84, 86), (78, 79), (84, 49), (101, 71), (82, 67), (7, 9), (62, 64), (37, 44), (72, 74), (93, 42), (88, 92), (99, 101), (92, 71), (95, 97), (52, 16), (101, 64), (99, 12), (93, 26), (78, 44), (72, 67), (74, 49), (92, 64), (20, 23), (51, 56), (9, 2), (14, 16), (86, 87), (20, 32), (84, 44), (2, 8), (82, 71), (62, 68), (45, 52), (56, 61), (86, 71), (97, 71), (78, 67), (68, 44), (80, 9), (52, 57), (29, 37), (80, 82), (97, 98), (72, 44), (45, 36), (16, 9), (76, 78), (88, 89), (47, 51), (86, 64), (74, 44), (97, 9), (61, 53), (84, 85), (97, 36), (62, 36), (44, 9), (2, 3), (76, 16), (68, 67), (82, 84), (51, 53), (78, 71), (101, 36), (44, 48), (78, 80), (95, 96), (93, 25), (74, 76), (57, 60), (37, 36), (93, 34), (92, 36), (62, 65), (22, 47), (37, 45), (45, 49), (56, 58), (95, 16), (16, 25), (16, 34), (105, 2), (61, 66), (101, 102), (93, 9), (31, 34), (93, 18), (22, 31), (9, 13), (2, 7), (57, 62), (68, 71), (29, 9), (72, 71), (16, 18), (82, 36), (105, 13), (14, 20), (20, 36), (86, 36), (101, 67), (45, 44), (76, 77), (57, 9), (92, 95), (72, 64)], 'ddg_edge_info': [(47, 53), (4, 64), (13, 97), (25, 105), (0, 51), (3, 13), (42, 66), (2, 57), (3, 22), (93, 22), (3, 86), (29, 105), (3, 31), (11, 14), (2, 11), (3, 95), (0, 23), (3, 49), (4, 103), (4, 57), (42, 105), (13, 99), (48, 93), (0, 53), (57, 105), (8, 11), (4, 23), (11, 71), (23, 36), (3, 88), (67, 36), (2, 68), (11, 80), (3, 97), (3, 42), (4, 105), (58, 51), (18, 12), (36, 48), (13, 37), (11, 37), (47, 66), (42, 61), (3, 72), (51, 2), (2, 52), (51, 66), (3, 26), (31, 42), (13, 58), (89, 93), (4, 89), (13, 3), (3, 99), (51, 93), (36, 105), (4, 52), (0, 103), (11, 103), (0, 48), (2, 45), (36, 13), (11, 57), (3, 74), (0, 2), (89, 22), (48, 51), (0, 66), (95, 93), (4, 82), (89, 31), (4, 18), (3, 92), (3, 37), (4, 36), (3, 101), (53, 105), (93, 31), (4, 45), (13, 78), (2, 20), (2, 84), (11, 32), (2, 29), (42, 47), (42, 56), (11, 105), (66, 105), (3, 67), (3, 12), (4, 11), (51, 61), (3, 76), (4, 20), (13, 53), (4, 84), (4, 29), (42, 13), (4, 93), (89, 42), (13, 80), (82, 67), (93, 42), (0, 89), (2, 86), (0, 34), (2, 95), (11, 52), (26, 34), (49, 36), (4, 68), (4, 13), (3, 78), (3, 14), (3, 23), (89, 26), (4, 22), (4, 86), (4, 31), (44, 12), (99, 67), (4, 95), (80, 105), (0, 18), (13, 82), (7, 11), (103, 12), (2, 88), (0, 36), (2, 97), (3, 62), (3, 7), (51, 56), (3, 80), (13, 48), (105, 12), (3, 89), (13, 57), (4, 88), (97, 105), (18, 105), (13, 66), (13, 2), (13, 11), (4, 97), (2, 8), (2, 72), (11, 29), (11, 93), (47, 58), (0, 93), (32, 36), (2, 99), (13, 32), (78, 67), (3, 64), (51, 58), (4, 8), (18, 25), (3, 18), (13, 105), (4, 72), (3, 82), (103, 105), (4, 26), (13, 4), (0, 4), (13, 68), (22, 34), (4, 99), (0, 13), (2, 74), (3, 103), (11, 95), (2, 92), (13, 25), (2, 37), (3, 57), (2, 101), (11, 49), (58, 66), (66, 58), (42, 58), (4, 74), (42, 12), (4, 92), (53, 51), (68, 67), (36, 44), (2, 76), (3, 105), (58, 105), (4, 49), (11, 97), (0, 42), (51, 53), (3, 68), (67, 71), (66, 51), (42, 51), (44, 48), (4, 12), (4, 67), (4, 76), (37, 36), (2, 14), (2, 78), (0, 26), (4, 42), (3, 52), (18, 13), (13, 29), (42, 53), (89, 18), (4, 14), (36, 12), (4, 78), (47, 12), (48, 105), (93, 18), (31, 34), (2, 62), (2, 7), (34, 42), (3, 36), (2, 80), (3, 45), (103, 13), (76, 93), (52, 93), (51, 48), (13, 31), (64, 67), (4, 62), (71, 36), (4, 80), (105, 13), (0, 58), (0, 3), (3, 20), (0, 67), (23, 32), (3, 29), (3, 84), (3, 93), (14, 93), (11, 76), (4, 37), (2, 82), (4, 101)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 375, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 376, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 377, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 381, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 382, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 383, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 388, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 367 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.o---after
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 338 nodes and 608 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 367 instructions in binary file.
[4201405, 4201413, 4201443]
The execution time of patched subCFG information extraction via angr: 0:00:03.000399
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186a>, <DisassemblerInsn "sub" for 0x40186e>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "je" for 0x401878>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "sub" for 0x4019ba>, <DisassemblerInsn "je" for 0x4019bf>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "sub" for 0x401916>, <DisassemblerInsn "je" for 0x40191b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be3>, <DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401beb>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "jmp" for 0x401bf3>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "sub" for 0x401899>, <DisassemblerInsn "mov" for 0x40189f>, <DisassemblerInsn "je" for 0x4018a3>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x401970>, <DisassemblerInsn "sub" for 0x401974>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "je" for 0x40197e>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd9>, <DisassemblerInsn "call" for 0x401bde>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "sub" for 0x401884>, <DisassemblerInsn "je" for 0x401889>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bbf>, <DisassemblerInsn "jmp" for 0x401bc3>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c2c>, <DisassemblerInsn "mov" for 0x401c31>, <DisassemblerInsn "mov" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3a>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "call" for 0x401c42>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "mov" for 0x401949>, <DisassemblerInsn "sub" for 0x40194d>, <DisassemblerInsn "mov" for 0x401953>, <DisassemblerInsn "je" for 0x401957>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "sub" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "je" for 0x4019d9>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e7>, <DisassemblerInsn "sub" for 0x4018eb>, <DisassemblerInsn "je" for 0x4018f0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x401bbd>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401bbd>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401bbd>']}, {'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401bc5>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x401bbd>']}], 'cfg_edge_info': [(56, 27), (66, 58), (70, 58), (57, 58), (86, 58), (88, 54), (74, 54), (58, 54), (53, 54), (80, 54), (54, 56), (60, 54)]}]}
{'ea_read_packet': [4201405, 4201413, 4201443]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O2/electronicarts.o---after
The extraction of function: ea_read_packet
[4201405, 4201413, 4201443]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 105 nodes and 153 edges in CFGEmulated.
It has 103 nodes and 202 edges in CDG.
It has 1553 nodes and 1878 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201405, 4201413, 4201443]
{4200576, 4201345, 4201602, 4200323, 4200836, 4200838, 4200327, 4201481, 4200591, 4200464, 4200593, 4200722, 4200720, 4201234, 4201625, 4200858, 4200986, 4200860, 4201630, 4201247, 4200737, 4200739, 4201123, 4200999, 4200617, 4200619, 4201516, 4201260, 4200112, 4200498, 4200884, 4201140, 4200886, 4201405, 4201021, 4200771, 4201413, 4200773, 4200903, 4201543, 4200901, 4200958, 4200651, 4200524, 4200653, 4200271, 4200404, 4201556, 4201044, 4200281, 4200797, 4201054, 4200927, 4200799, 4201312, 4201443, 4200932, 4200677, 4200550, 4200679, 4200548, 4200297, 4200810, 4200812, 4201073, 4200947, 4200307, 4201461, 4200694, 4200696, 4200313, 4200574, 4200447}
[54, 99, 26, 11, 32, 80, 77, 100, 58, 84, 93, 59, 102, 39, 87, 33, 95, 64, 35, 61, 27, 53, 24, 101, 103, 46, 51, 42, 41, 56, 45, 85, 60, 57, 9, 0, 89, 74, 63, 78, 66, 43, 73, 72, 29, 94, 92, 97, 14, 86, 30, 75, 34, 88, 31, 19, 55, 62, 81, 7, 68, 23, 17, 8, 49, 52, 82, 3, 10, 69, 21, 50, 65, 48, 4, 76, 20, 15, 13, 96, 79, 71, 70, 16, 98, 12, 36, 83, 2, 90, 22]
The execution time of patched slicing information extraction via angr: 0:00:06.133060
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b10>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "sub" for 0x4019ba>, <DisassemblerInsn "je" for 0x4019bf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e5>, <DisassemblerInsn "mov" for 0x4017e9>, <DisassemblerInsn "sub" for 0x4017ed>, <DisassemblerInsn "mov" for 0x4017f3>, <DisassemblerInsn "je" for 0x4017f7>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178b>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "add" for 0x401793>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x40179a>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "mov" for 0x4017a3>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "test" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "je" for 0x4017b2>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40174f>, <DisassemblerInsn "call" for 0x401754>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "mov" for 0x4018fc>, <DisassemblerInsn "sub" for 0x401900>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "je" for 0x40190a>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018e5>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019c5>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b2c>, <DisassemblerInsn "mov" for 0x401b34>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "shl" for 0x401b44>, <DisassemblerInsn "add" for 0x401b46>, <DisassemblerInsn "xor" for 0x401b49>, <DisassemblerInsn "div" for 0x401b4b>, <DisassemblerInsn "mov" for 0x401b4d>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "add" for 0x401b53>, <DisassemblerInsn "mov" for 0x401b55>, <DisassemblerInsn "mov" for 0x401b57>, <DisassemblerInsn "jmp" for 0x401b5b>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "mov" for 0x401927>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "sub" for 0x40192f>, <DisassemblerInsn "mov" for 0x401935>, <DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "je" for 0x40193d>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f3>, <DisassemblerInsn "add" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fa>, <DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "test" for 0x401a14>, <DisassemblerInsn "je" for 0x401a16>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b1d>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019df>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401a9e>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40195d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5e>, <DisassemblerInsn "mov" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "call" for 0x401a6c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401986>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "sub" for 0x40198e>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "je" for 0x401998>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd9>, <DisassemblerInsn "call" for 0x401bde>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c2c>, <DisassemblerInsn "mov" for 0x401c31>, <DisassemblerInsn "mov" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3a>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "call" for 0x401c42>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b1f>, <DisassemblerInsn "sub" for 0x401b23>, <DisassemblerInsn "je" for 0x401b28>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c99>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b60>, <DisassemblerInsn "mov" for 0x401b64>, <DisassemblerInsn "mov" for 0x401b6c>, <DisassemblerInsn "mov" for 0x401b70>, <DisassemblerInsn "add" for 0x401b74>, <DisassemblerInsn "mov" for 0x401b76>, <DisassemblerInsn "mov" for 0x401b78>, <DisassemblerInsn "jmp" for 0x401b7c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a25>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "sub" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "je" for 0x4019d9>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c82>, <DisassemblerInsn "mov" for 0x401c87>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "mov" for 0x401c8d>, <DisassemblerInsn "mov" for 0x401c8f>, <DisassemblerInsn "call" for 0x401c94>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401810>, <DisassemblerInsn "mov" for 0x401814>, <DisassemblerInsn "mov" for 0x401818>, <DisassemblerInsn "sub" for 0x40181c>, <DisassemblerInsn "mov" for 0x401822>, <DisassemblerInsn "mov" for 0x401826>, <DisassemblerInsn "je" for 0x40182a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab4>, <DisassemblerInsn "mov" for 0x401ab9>, <DisassemblerInsn "mov" for 0x401ac1>, <DisassemblerInsn "mov" for 0x401ac9>, <DisassemblerInsn "mov" for 0x401ad1>, <DisassemblerInsn "mov" for 0x401ad9>, <DisassemblerInsn "mov" for 0x401adb>, <DisassemblerInsn "movsxd" for 0x401add>, <DisassemblerInsn "mov" for 0x401ae0>, <DisassemblerInsn "mov" for 0x401ae2>, <DisassemblerInsn "imul" for 0x401ae6>, <DisassemblerInsn "movsxd" for 0x401aed>, <DisassemblerInsn "cqo" for 0x401af0>, <DisassemblerInsn "idiv" for 0x401af2>, <DisassemblerInsn "mov" for 0x401af5>, <DisassemblerInsn "mov" for 0x401af8>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b03>, <DisassemblerInsn "mov" for 0x401b05>, <DisassemblerInsn "sub" for 0x401b09>, <DisassemblerInsn "je" for 0x401b0e>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40180e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c1c>, <DisassemblerInsn "xor" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c22>, <DisassemblerInsn "mov" for 0x401c26>, <DisassemblerInsn "jmp" for 0x401c2a>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b12>, <DisassemblerInsn "sub" for 0x401b16>, <DisassemblerInsn "je" for 0x401b1b>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c47>, <DisassemblerInsn "cmp" for 0x401c4b>, <DisassemblerInsn "mov" for 0x401c4e>, <DisassemblerInsn "jl" for 0x401c52>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401943>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401864>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40184c>, <DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "mov" for 0x40185a>, <DisassemblerInsn "je" for 0x40185e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9e>, <DisassemblerInsn "add" for 0x401ca2>, <DisassemblerInsn "ret" for 0x401ca9>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b7>, <DisassemblerInsn "mov" for 0x4016bc>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "mov" for 0x4016c5>, <DisassemblerInsn "mov" for 0x4016c9>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "add" for 0x4016d1>, <DisassemblerInsn "mov" for 0x4016d5>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "add" for 0x4016e0>, <DisassemblerInsn "mov" for 0x4016e4>, <DisassemblerInsn "add" for 0x4016ec>, <DisassemblerInsn "mov" for 0x4016f0>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "add" for 0x4016fb>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "add" for 0x40170a>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401716>, <DisassemblerInsn "add" for 0x401719>, <DisassemblerInsn "mov" for 0x40171d>, <DisassemblerInsn "mov" for 0x401725>, <DisassemblerInsn "add" for 0x401728>, <DisassemblerInsn "mov" for 0x40172c>, <DisassemblerInsn "mov" for 0x401734>, <DisassemblerInsn "add" for 0x401737>, <DisassemblerInsn "mov" for 0x40173b>, <DisassemblerInsn "add" for 0x401743>, <DisassemblerInsn "mov" for 0x401747>, <DisassemblerInsn "mov" for 0x40174f>, <DisassemblerInsn "call" for 0x401754>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019e9>, <DisassemblerInsn "call" for 0x4019ee>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "mov" for 0x4018af>, <DisassemblerInsn "mov" for 0x4018b3>, <DisassemblerInsn "sub" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c1>, <DisassemblerInsn "je" for 0x4018c5>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b2a>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e7>, <DisassemblerInsn "sub" for 0x4018eb>, <DisassemblerInsn "je" for 0x4018f0>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b81>, <DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "mov" for 0x401ba1>, <DisassemblerInsn "imul" for 0x401ba3>, <DisassemblerInsn "xor" for 0x401ba6>, <DisassemblerInsn "div" for 0x401ba8>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "mov" for 0x401bac>, <DisassemblerInsn "add" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb2>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "jmp" for 0x401bb8>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a71>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a79>, <DisassemblerInsn "mov" for 0x401a7c>, <DisassemblerInsn "mov" for 0x401a80>, <DisassemblerInsn "mov" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401a9e>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018a9>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "sub" for 0x401899>, <DisassemblerInsn "mov" for 0x40189f>, <DisassemblerInsn "je" for 0x4018a3>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "sub" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "je" for 0x401a39>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401984>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x401970>, <DisassemblerInsn "sub" for 0x401974>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "je" for 0x40197e>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40199c>, <DisassemblerInsn "mov" for 0x4019a0>, <DisassemblerInsn "sub" for 0x4019a4>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "je" for 0x4019ae>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017d2>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "mov" for 0x401949>, <DisassemblerInsn "sub" for 0x40194d>, <DisassemblerInsn "mov" for 0x401953>, <DisassemblerInsn "je" for 0x401957>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c09>, <DisassemblerInsn "add" for 0x401c0d>, <DisassemblerInsn "xor" for 0x401c10>, <DisassemblerInsn "mov" for 0x401c12>, <DisassemblerInsn "mov" for 0x401c16>, <DisassemblerInsn "jmp" for 0x401c1a>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018cb>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a3b>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "je" for 0x401968>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017fd>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a1a>, <DisassemblerInsn "sub" for 0x401a1e>, <DisassemblerInsn "je" for 0x401a23>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40184a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186a>, <DisassemblerInsn "sub" for 0x40186e>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "je" for 0x401878>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401910>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401783>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178b>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "add" for 0x401793>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x40179a>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "mov" for 0x4017a3>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "test" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "je" for 0x4017b2>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "sub" for 0x401884>, <DisassemblerInsn "je" for 0x401889>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a54>, <DisassemblerInsn "call" for 0x401a59>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017d4>, <DisassemblerInsn "sub" for 0x4017d8>, <DisassemblerInsn "je" for 0x4017dd>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "jmp" for 0x401777>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "mov" for 0x401c58>, <DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "mov" for 0x401c6c>, <DisassemblerInsn "mov" for 0x401c74>, <DisassemblerInsn "mov" for 0x401c76>, <DisassemblerInsn "or" for 0x401c78>, <DisassemblerInsn "mov" for 0x401c7a>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "sub" for 0x40183a>, <DisassemblerInsn "mov" for 0x401840>, <DisassemblerInsn "je" for 0x401844>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "sub" for 0x401916>, <DisassemblerInsn "je" for 0x40191b>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401779>, <DisassemblerInsn "call" for 0x40177e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017b8>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be3>, <DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401beb>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "jmp" for 0x401bf3>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017e3>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401830>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40187e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa3>, <DisassemblerInsn "cmp" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aaa>, <DisassemblerInsn "jl" for 0x401aae>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "call" for 0x40176e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018cd>, <DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018db>, <DisassemblerInsn "je" for 0x4018df>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bf5>, <DisassemblerInsn "mov" for 0x401bfa>, <DisassemblerInsn "mov" for 0x401bff>, <DisassemblerInsn "call" for 0x401c04>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3d>, <DisassemblerInsn "mov" for 0x401a42>, <DisassemblerInsn "mov" for 0x401a46>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "call" for 0x401a4a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "test" for 0x401a14>, <DisassemblerInsn "je" for 0x401a16>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40199a>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018f6>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40188f>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bbf>, <DisassemblerInsn "jmp" for 0x401bc3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a18>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019b4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ba>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "sub" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017c8>, <DisassemblerInsn "je" for 0x4017cc>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ff>, <DisassemblerInsn "sub" for 0x401803>, <DisassemblerInsn "je" for 0x401808>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401921>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401759>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x401760>, <DisassemblerInsn "cmp" for 0x401764>, <DisassemblerInsn "je" for 0x401767>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40196a>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a4f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 54, 'blockInsts': ['<jmp~~0x401b12>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x401bbd>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4018e7>']}, {'block_Idx': 100, 'blockInsts': ['<jmp~~0x4019c7>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401a3d>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401b1f>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x401c82>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x40195f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x401b60>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40174f>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x401a27>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x401b60>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x401810>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x401b2c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c9e>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401945>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401866>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401b81>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x401bbd>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x4018ab>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x401a54>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401986>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4017d4>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x4018cd>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401a84>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x4019e4>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4017ff>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x401a54>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x40184c>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x401912>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401bbd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x401bf5>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401787>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401bbd>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4017ba>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4017e5>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401832>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401880>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c9e>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401a3d>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x40199c>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x4018f8>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x401891>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401bc5>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x401a1a>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x4019b6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x401c1c>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401923>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401779>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x40196c>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x401c99>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (64, 69), (99, 100), (70, 64), (17, 21), (100, 101), (7, 10), (95, 13), (96, 97), (73, 74), (78, 70), (61, 63), (29, 34), (46, 50), (8, 11), (93, 15), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (11, 9), (80, 81), (66, 9), (75, 76), (89, 93), (68, 70), (69, 35), (85, 86), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (92, 94), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (101, 64), (56, 59), (3, 7), (92, 64), (52, 55), (86, 87), (84, 35), (39, 48), (19, 24), (46, 35), (80, 9), (58, 9), (4, 8), (87, 88), (97, 98), (17, 20), (36, 42), (30, 35), (88, 89), (74, 35), (86, 64), (97, 9), (15, 22), (61, 53), (84, 85), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (103, 27), (29, 23), (51, 53), (35, 45), (95, 96), (93, 16), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (101, 102), (11, 10), (19, 23), (68, 71), (82, 70), (102, 103), (63, 66), (98, 99), (42, 46), (33, 43), (31, 36), (65, 68), (99, 70), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (99, 100), (99, 45), (62, 35), (19, 9), (17, 30), (2, 11), (36, 46), (95, 13), (88, 93), (78, 70), (101, 35), (19, 48), (93, 15), (29, 43), (2, 4), (74, 75), (92, 35), (78, 45), (13, 19), (46, 52), (86, 88), (80, 81), (84, 45), (68, 70), (62, 69), (101, 103), (82, 35), (68, 45), (46, 45), (48, 51), (86, 35), (97, 99), (72, 45), (92, 94), (68, 72), (101, 69), (13, 23), (88, 90), (99, 35), (101, 32), (82, 83), (74, 45), (84, 86), (92, 69), (78, 79), (93, 33), (19, 29), (62, 64), (36, 45), (72, 74), (88, 92), (99, 101), (29, 33), (95, 97), (78, 35), (101, 64), (82, 69), (101, 27), (86, 69), (92, 64), (51, 56), (86, 87), (84, 35), (13, 48), (13, 2), (101, 2), (93, 19), (99, 69), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (52, 57), (72, 35), (80, 82), (97, 98), (17, 20), (82, 64), (76, 78), (88, 89), (74, 35), (93, 48), (86, 64), (61, 53), (78, 69), (84, 85), (13, 43), (52, 13), (99, 64), (62, 45), (2, 3), (93, 23), (36, 35), (93, 32), (82, 84), (13, 27), (29, 23), (51, 53), (78, 80), (101, 45), (95, 96), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (93, 43), (92, 45), (56, 58), (72, 69), (78, 64), (61, 66), (101, 102), (57, 62), (2, 7), (93, 27), (68, 71), (82, 70), (17, 35), (93, 2), (82, 45), (99, 70), (76, 13), (68, 64), (86, 45), (76, 77), (92, 95), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (70, 64), (4, 9), (0, 51), (2, 57), (32, 3), (11, 69), (3, 86), (2, 11), (3, 95), (0, 23), (89, 43), (4, 103), (4, 57), (15, 32), (89, 15), (3, 70), (0, 53), (3, 15), (93, 15), (8, 11), (11, 62), (29, 43), (11, 30), (4, 23), (3, 88), (2, 68), (11, 80), (3, 97), (49, 9), (53, 9), (11, 101), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (11, 9), (89, 29), (66, 9), (48, 58), (89, 93), (4, 89), (3, 35), (69, 35), (3, 99), (4, 43), (4, 52), (2, 36), (0, 103), (11, 103), (3, 74), (11, 57), (0, 2), (20, 35), (3, 19), (95, 93), (0, 66), (4, 82), (43, 9), (3, 92), (15, 2), (4, 36), (3, 101), (2, 84), (0, 32), (45, 9), (43, 48), (4, 11), (3, 76), (51, 61), (32, 2), (4, 20), (23, 33), (4, 84), (48, 53), (4, 29), (43, 66), (4, 93), (62, 64), (0, 89), (2, 86), (2, 95), (0, 43), (11, 52), (29, 33), (4, 68), (20, 30), (3, 78), (3, 23), (32, 4), (4, 86), (101, 64), (35, 9), (4, 95), (7, 11), (2, 88), (2, 97), (3, 62), (92, 64), (3, 7), (51, 56), (4, 70), (89, 19), (4, 15), (3, 80), (84, 35), (43, 61), (3, 89), (4, 88), (93, 19), (4, 97), (2, 8), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (0, 93), (11, 93), (46, 35), (2, 99), (3, 64), (103, 32), (3, 9), (80, 9), (58, 9), (51, 58), (4, 72), (4, 8), (4, 17), (3, 82), (0, 4), (4, 35), (4, 99), (2, 74), (30, 35), (3, 103), (11, 86), (74, 35), (86, 64), (11, 95), (3, 57), (2, 92), (97, 9), (4, 46), (2, 101), (43, 56), (89, 23), (4, 19), (4, 74), (4, 92), (0, 15), (2, 76), (48, 9), (0, 33), (11, 97), (51, 53), (3, 68), (35, 45), (4, 76), (43, 58), (64, 35), (11, 72), (103, 2), (48, 66), (45, 49), (2, 78), (3, 43), (93, 43), (3, 52), (0, 35), (43, 51), (4, 78), (2, 62), (2, 7), (11, 74), (3, 36), (2, 80), (11, 92), (76, 93), (52, 93), (4, 62), (33, 43), (43, 53), (35, 49), (0, 49), (4, 80), (2, 46), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (93, 29), (57, 9), (3, 93), (11, 76), (2, 82), (4, 101), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 367 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.o---after
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 338 nodes and 608 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 367 instructions in binary file.
[4201405, 4201413, 4201443]
The execution time of patched subCFG information extraction via angr: 0:00:02.974601
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186a>, <DisassemblerInsn "sub" for 0x40186e>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "je" for 0x401878>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "sub" for 0x4019ba>, <DisassemblerInsn "je" for 0x4019bf>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "sub" for 0x401916>, <DisassemblerInsn "je" for 0x40191b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be3>, <DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401beb>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "jmp" for 0x401bf3>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "sub" for 0x401899>, <DisassemblerInsn "mov" for 0x40189f>, <DisassemblerInsn "je" for 0x4018a3>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x401970>, <DisassemblerInsn "sub" for 0x401974>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "je" for 0x40197e>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd9>, <DisassemblerInsn "call" for 0x401bde>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "sub" for 0x401884>, <DisassemblerInsn "je" for 0x401889>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bbf>, <DisassemblerInsn "jmp" for 0x401bc3>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c2c>, <DisassemblerInsn "mov" for 0x401c31>, <DisassemblerInsn "mov" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3a>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "call" for 0x401c42>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "mov" for 0x401949>, <DisassemblerInsn "sub" for 0x40194d>, <DisassemblerInsn "mov" for 0x401953>, <DisassemblerInsn "je" for 0x401957>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "sub" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "je" for 0x4019d9>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e7>, <DisassemblerInsn "sub" for 0x4018eb>, <DisassemblerInsn "je" for 0x4018f0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x401bbd>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401bbd>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401bbd>']}, {'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401bc5>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x401bbd>']}], 'cfg_edge_info': [(56, 27), (66, 58), (70, 58), (57, 58), (86, 58), (88, 54), (74, 54), (58, 54), (53, 54), (80, 54), (54, 56), (60, 54)]}]}
{'ea_read_packet': [4201405, 4201413, 4201443]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/O3/electronicarts.o---after
The extraction of function: ea_read_packet
[4201405, 4201413, 4201443]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 105 nodes and 153 edges in CFGEmulated.
It has 103 nodes and 202 edges in CDG.
It has 1553 nodes and 1878 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201405, 4201413, 4201443]
{4200576, 4201345, 4201602, 4200323, 4200836, 4200838, 4200327, 4201481, 4200591, 4200464, 4200593, 4200722, 4200720, 4201234, 4201625, 4200858, 4200986, 4200860, 4201630, 4201247, 4200737, 4200739, 4201123, 4200999, 4200617, 4200619, 4201516, 4201260, 4200112, 4200498, 4200884, 4201140, 4200886, 4201405, 4201021, 4200771, 4201413, 4200773, 4200903, 4201543, 4200901, 4200958, 4200651, 4200524, 4200653, 4200271, 4200404, 4201556, 4201044, 4200281, 4200797, 4201054, 4200927, 4200799, 4201312, 4201443, 4200932, 4200677, 4200550, 4200679, 4200548, 4200297, 4200810, 4200812, 4201073, 4200947, 4200307, 4201461, 4200694, 4200696, 4200313, 4200574, 4200447}
[54, 99, 26, 11, 32, 80, 77, 100, 58, 84, 93, 59, 102, 39, 87, 33, 95, 64, 35, 61, 27, 53, 24, 101, 103, 46, 51, 42, 41, 56, 45, 85, 60, 57, 9, 0, 89, 74, 63, 78, 66, 43, 73, 72, 29, 94, 92, 97, 14, 86, 30, 75, 34, 88, 31, 19, 55, 62, 81, 7, 68, 23, 17, 8, 49, 52, 82, 3, 10, 69, 21, 50, 65, 48, 4, 76, 20, 15, 13, 96, 79, 71, 70, 16, 98, 12, 36, 83, 2, 90, 22]
The execution time of patched slicing information extraction via angr: 0:00:06.160315
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b10>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "sub" for 0x4019ba>, <DisassemblerInsn "je" for 0x4019bf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e5>, <DisassemblerInsn "mov" for 0x4017e9>, <DisassemblerInsn "sub" for 0x4017ed>, <DisassemblerInsn "mov" for 0x4017f3>, <DisassemblerInsn "je" for 0x4017f7>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178b>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "add" for 0x401793>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x40179a>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "mov" for 0x4017a3>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "test" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "je" for 0x4017b2>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40174f>, <DisassemblerInsn "call" for 0x401754>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "mov" for 0x4018fc>, <DisassemblerInsn "sub" for 0x401900>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "je" for 0x40190a>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018e5>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019c5>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b2c>, <DisassemblerInsn "mov" for 0x401b34>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "shl" for 0x401b44>, <DisassemblerInsn "add" for 0x401b46>, <DisassemblerInsn "xor" for 0x401b49>, <DisassemblerInsn "div" for 0x401b4b>, <DisassemblerInsn "mov" for 0x401b4d>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "add" for 0x401b53>, <DisassemblerInsn "mov" for 0x401b55>, <DisassemblerInsn "mov" for 0x401b57>, <DisassemblerInsn "jmp" for 0x401b5b>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "mov" for 0x401927>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "sub" for 0x40192f>, <DisassemblerInsn "mov" for 0x401935>, <DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "je" for 0x40193d>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f3>, <DisassemblerInsn "add" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fa>, <DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "test" for 0x401a14>, <DisassemblerInsn "je" for 0x401a16>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b1d>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019df>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401a9e>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40195d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5e>, <DisassemblerInsn "mov" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "call" for 0x401a6c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401986>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "sub" for 0x40198e>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "je" for 0x401998>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd9>, <DisassemblerInsn "call" for 0x401bde>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c2c>, <DisassemblerInsn "mov" for 0x401c31>, <DisassemblerInsn "mov" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3a>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "call" for 0x401c42>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b1f>, <DisassemblerInsn "sub" for 0x401b23>, <DisassemblerInsn "je" for 0x401b28>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c99>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b60>, <DisassemblerInsn "mov" for 0x401b64>, <DisassemblerInsn "mov" for 0x401b6c>, <DisassemblerInsn "mov" for 0x401b70>, <DisassemblerInsn "add" for 0x401b74>, <DisassemblerInsn "mov" for 0x401b76>, <DisassemblerInsn "mov" for 0x401b78>, <DisassemblerInsn "jmp" for 0x401b7c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a25>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "sub" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "je" for 0x4019d9>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c82>, <DisassemblerInsn "mov" for 0x401c87>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "mov" for 0x401c8d>, <DisassemblerInsn "mov" for 0x401c8f>, <DisassemblerInsn "call" for 0x401c94>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401810>, <DisassemblerInsn "mov" for 0x401814>, <DisassemblerInsn "mov" for 0x401818>, <DisassemblerInsn "sub" for 0x40181c>, <DisassemblerInsn "mov" for 0x401822>, <DisassemblerInsn "mov" for 0x401826>, <DisassemblerInsn "je" for 0x40182a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab4>, <DisassemblerInsn "mov" for 0x401ab9>, <DisassemblerInsn "mov" for 0x401ac1>, <DisassemblerInsn "mov" for 0x401ac9>, <DisassemblerInsn "mov" for 0x401ad1>, <DisassemblerInsn "mov" for 0x401ad9>, <DisassemblerInsn "mov" for 0x401adb>, <DisassemblerInsn "movsxd" for 0x401add>, <DisassemblerInsn "mov" for 0x401ae0>, <DisassemblerInsn "mov" for 0x401ae2>, <DisassemblerInsn "imul" for 0x401ae6>, <DisassemblerInsn "movsxd" for 0x401aed>, <DisassemblerInsn "cqo" for 0x401af0>, <DisassemblerInsn "idiv" for 0x401af2>, <DisassemblerInsn "mov" for 0x401af5>, <DisassemblerInsn "mov" for 0x401af8>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b03>, <DisassemblerInsn "mov" for 0x401b05>, <DisassemblerInsn "sub" for 0x401b09>, <DisassemblerInsn "je" for 0x401b0e>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40180e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c1c>, <DisassemblerInsn "xor" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c22>, <DisassemblerInsn "mov" for 0x401c26>, <DisassemblerInsn "jmp" for 0x401c2a>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b12>, <DisassemblerInsn "sub" for 0x401b16>, <DisassemblerInsn "je" for 0x401b1b>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c47>, <DisassemblerInsn "cmp" for 0x401c4b>, <DisassemblerInsn "mov" for 0x401c4e>, <DisassemblerInsn "jl" for 0x401c52>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401943>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401864>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40184c>, <DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "mov" for 0x40185a>, <DisassemblerInsn "je" for 0x40185e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9e>, <DisassemblerInsn "add" for 0x401ca2>, <DisassemblerInsn "ret" for 0x401ca9>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b7>, <DisassemblerInsn "mov" for 0x4016bc>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "mov" for 0x4016c5>, <DisassemblerInsn "mov" for 0x4016c9>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "add" for 0x4016d1>, <DisassemblerInsn "mov" for 0x4016d5>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "add" for 0x4016e0>, <DisassemblerInsn "mov" for 0x4016e4>, <DisassemblerInsn "add" for 0x4016ec>, <DisassemblerInsn "mov" for 0x4016f0>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "add" for 0x4016fb>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "add" for 0x40170a>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401716>, <DisassemblerInsn "add" for 0x401719>, <DisassemblerInsn "mov" for 0x40171d>, <DisassemblerInsn "mov" for 0x401725>, <DisassemblerInsn "add" for 0x401728>, <DisassemblerInsn "mov" for 0x40172c>, <DisassemblerInsn "mov" for 0x401734>, <DisassemblerInsn "add" for 0x401737>, <DisassemblerInsn "mov" for 0x40173b>, <DisassemblerInsn "add" for 0x401743>, <DisassemblerInsn "mov" for 0x401747>, <DisassemblerInsn "mov" for 0x40174f>, <DisassemblerInsn "call" for 0x401754>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019e9>, <DisassemblerInsn "call" for 0x4019ee>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "mov" for 0x4018af>, <DisassemblerInsn "mov" for 0x4018b3>, <DisassemblerInsn "sub" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c1>, <DisassemblerInsn "je" for 0x4018c5>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b2a>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e7>, <DisassemblerInsn "sub" for 0x4018eb>, <DisassemblerInsn "je" for 0x4018f0>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b81>, <DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "mov" for 0x401ba1>, <DisassemblerInsn "imul" for 0x401ba3>, <DisassemblerInsn "xor" for 0x401ba6>, <DisassemblerInsn "div" for 0x401ba8>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "mov" for 0x401bac>, <DisassemblerInsn "add" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb2>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "jmp" for 0x401bb8>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a71>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a79>, <DisassemblerInsn "mov" for 0x401a7c>, <DisassemblerInsn "mov" for 0x401a80>, <DisassemblerInsn "mov" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401a9e>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018a9>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "sub" for 0x401899>, <DisassemblerInsn "mov" for 0x40189f>, <DisassemblerInsn "je" for 0x4018a3>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "sub" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "je" for 0x401a39>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401984>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x401970>, <DisassemblerInsn "sub" for 0x401974>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "je" for 0x40197e>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40199c>, <DisassemblerInsn "mov" for 0x4019a0>, <DisassemblerInsn "sub" for 0x4019a4>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "je" for 0x4019ae>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017d2>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "mov" for 0x401949>, <DisassemblerInsn "sub" for 0x40194d>, <DisassemblerInsn "mov" for 0x401953>, <DisassemblerInsn "je" for 0x401957>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c09>, <DisassemblerInsn "add" for 0x401c0d>, <DisassemblerInsn "xor" for 0x401c10>, <DisassemblerInsn "mov" for 0x401c12>, <DisassemblerInsn "mov" for 0x401c16>, <DisassemblerInsn "jmp" for 0x401c1a>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018cb>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a3b>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "je" for 0x401968>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017fd>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a1a>, <DisassemblerInsn "sub" for 0x401a1e>, <DisassemblerInsn "je" for 0x401a23>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40184a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186a>, <DisassemblerInsn "sub" for 0x40186e>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "je" for 0x401878>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401910>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401783>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178b>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "add" for 0x401793>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x40179a>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "mov" for 0x4017a3>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "test" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "je" for 0x4017b2>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "sub" for 0x401884>, <DisassemblerInsn "je" for 0x401889>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a54>, <DisassemblerInsn "call" for 0x401a59>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017d4>, <DisassemblerInsn "sub" for 0x4017d8>, <DisassemblerInsn "je" for 0x4017dd>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "jmp" for 0x401777>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "mov" for 0x401c58>, <DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "mov" for 0x401c6c>, <DisassemblerInsn "mov" for 0x401c74>, <DisassemblerInsn "mov" for 0x401c76>, <DisassemblerInsn "or" for 0x401c78>, <DisassemblerInsn "mov" for 0x401c7a>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "sub" for 0x40183a>, <DisassemblerInsn "mov" for 0x401840>, <DisassemblerInsn "je" for 0x401844>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "sub" for 0x401916>, <DisassemblerInsn "je" for 0x40191b>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401779>, <DisassemblerInsn "call" for 0x40177e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017b8>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be3>, <DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401beb>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "jmp" for 0x401bf3>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017e3>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401830>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40187e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa3>, <DisassemblerInsn "cmp" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aaa>, <DisassemblerInsn "jl" for 0x401aae>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "call" for 0x40176e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018cd>, <DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018db>, <DisassemblerInsn "je" for 0x4018df>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bf5>, <DisassemblerInsn "mov" for 0x401bfa>, <DisassemblerInsn "mov" for 0x401bff>, <DisassemblerInsn "call" for 0x401c04>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3d>, <DisassemblerInsn "mov" for 0x401a42>, <DisassemblerInsn "mov" for 0x401a46>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "call" for 0x401a4a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "test" for 0x401a14>, <DisassemblerInsn "je" for 0x401a16>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40199a>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018f6>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40188f>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bbf>, <DisassemblerInsn "jmp" for 0x401bc3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a18>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019b4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ba>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "sub" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017c8>, <DisassemblerInsn "je" for 0x4017cc>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ff>, <DisassemblerInsn "sub" for 0x401803>, <DisassemblerInsn "je" for 0x401808>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401921>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401759>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x401760>, <DisassemblerInsn "cmp" for 0x401764>, <DisassemblerInsn "je" for 0x401767>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40196a>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a4f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 54, 'blockInsts': ['<jmp~~0x401b12>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x401bbd>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4018e7>']}, {'block_Idx': 100, 'blockInsts': ['<jmp~~0x4019c7>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401a3d>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401b1f>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x401c82>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x40195f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x401b60>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40174f>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x401a27>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x401b60>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x401810>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x401b2c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c9e>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401945>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401866>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401c2c>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401b81>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x401bbd>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x4018ab>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x401a54>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401986>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4017d4>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x4018cd>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401a84>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x4019e4>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4017ff>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x401a54>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x40184c>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401bc5>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x401912>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c9e>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401bbd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x401bf5>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401787>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c9e>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401bbd>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4017ba>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401c2c>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4017e5>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401832>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401880>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c9e>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401a3d>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x40199c>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x4018f8>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x401891>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401bc5>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x401a1a>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x4019b6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4019fe>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x401c1c>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401923>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401779>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x40196c>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x401c99>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (64, 69), (99, 100), (70, 64), (17, 21), (100, 101), (7, 10), (95, 13), (96, 97), (73, 74), (78, 70), (61, 63), (29, 34), (46, 50), (8, 11), (93, 15), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (11, 9), (80, 81), (66, 9), (75, 76), (89, 93), (68, 70), (69, 35), (85, 86), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (92, 94), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (101, 64), (56, 59), (3, 7), (92, 64), (52, 55), (86, 87), (84, 35), (39, 48), (19, 24), (46, 35), (80, 9), (58, 9), (4, 8), (87, 88), (97, 98), (17, 20), (36, 42), (30, 35), (88, 89), (74, 35), (86, 64), (97, 9), (15, 22), (61, 53), (84, 85), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (103, 27), (29, 23), (51, 53), (35, 45), (95, 96), (93, 16), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (101, 102), (11, 10), (19, 23), (68, 71), (82, 70), (102, 103), (63, 66), (98, 99), (42, 46), (33, 43), (31, 36), (65, 68), (99, 70), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (99, 100), (99, 45), (62, 35), (19, 9), (17, 30), (2, 11), (36, 46), (95, 13), (88, 93), (78, 70), (101, 35), (19, 48), (93, 15), (29, 43), (2, 4), (74, 75), (92, 35), (78, 45), (13, 19), (46, 52), (86, 88), (80, 81), (84, 45), (68, 70), (62, 69), (101, 103), (82, 35), (68, 45), (46, 45), (48, 51), (86, 35), (97, 99), (72, 45), (92, 94), (68, 72), (101, 69), (13, 23), (88, 90), (99, 35), (101, 32), (82, 83), (74, 45), (84, 86), (92, 69), (78, 79), (93, 33), (19, 29), (62, 64), (36, 45), (72, 74), (88, 92), (99, 101), (29, 33), (95, 97), (78, 35), (101, 64), (82, 69), (101, 27), (86, 69), (92, 64), (51, 56), (86, 87), (84, 35), (13, 48), (13, 2), (101, 2), (93, 19), (99, 69), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (52, 57), (72, 35), (80, 82), (97, 98), (17, 20), (82, 64), (76, 78), (88, 89), (74, 35), (93, 48), (86, 64), (61, 53), (78, 69), (84, 85), (13, 43), (52, 13), (99, 64), (62, 45), (2, 3), (93, 23), (36, 35), (93, 32), (82, 84), (13, 27), (29, 23), (51, 53), (78, 80), (101, 45), (95, 96), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (93, 43), (92, 45), (56, 58), (72, 69), (78, 64), (61, 66), (101, 102), (57, 62), (2, 7), (93, 27), (68, 71), (82, 70), (17, 35), (93, 2), (82, 45), (99, 70), (76, 13), (68, 64), (86, 45), (76, 77), (92, 95), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (70, 64), (4, 9), (0, 51), (2, 57), (32, 3), (11, 69), (3, 86), (2, 11), (3, 95), (0, 23), (89, 43), (4, 103), (4, 57), (15, 32), (89, 15), (3, 70), (0, 53), (3, 15), (93, 15), (8, 11), (11, 62), (29, 43), (11, 30), (4, 23), (3, 88), (2, 68), (11, 80), (3, 97), (49, 9), (53, 9), (11, 101), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (11, 9), (89, 29), (66, 9), (48, 58), (89, 93), (4, 89), (3, 35), (69, 35), (3, 99), (4, 43), (4, 52), (2, 36), (0, 103), (11, 103), (3, 74), (11, 57), (0, 2), (20, 35), (3, 19), (95, 93), (0, 66), (4, 82), (43, 9), (3, 92), (15, 2), (4, 36), (3, 101), (2, 84), (0, 32), (45, 9), (43, 48), (4, 11), (3, 76), (51, 61), (32, 2), (4, 20), (23, 33), (4, 84), (48, 53), (4, 29), (43, 66), (4, 93), (62, 64), (0, 89), (2, 86), (2, 95), (0, 43), (11, 52), (29, 33), (4, 68), (20, 30), (3, 78), (3, 23), (32, 4), (4, 86), (101, 64), (35, 9), (4, 95), (7, 11), (2, 88), (2, 97), (3, 62), (92, 64), (3, 7), (51, 56), (4, 70), (89, 19), (4, 15), (3, 80), (84, 35), (43, 61), (3, 89), (4, 88), (93, 19), (4, 97), (2, 8), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (0, 93), (11, 93), (46, 35), (2, 99), (3, 64), (103, 32), (3, 9), (80, 9), (58, 9), (51, 58), (4, 72), (4, 8), (4, 17), (3, 82), (0, 4), (4, 35), (4, 99), (2, 74), (30, 35), (3, 103), (11, 86), (74, 35), (86, 64), (11, 95), (3, 57), (2, 92), (97, 9), (4, 46), (2, 101), (43, 56), (89, 23), (4, 19), (4, 74), (4, 92), (0, 15), (2, 76), (48, 9), (0, 33), (11, 97), (51, 53), (3, 68), (35, 45), (4, 76), (43, 58), (64, 35), (11, 72), (103, 2), (48, 66), (45, 49), (2, 78), (3, 43), (93, 43), (3, 52), (0, 35), (43, 51), (4, 78), (2, 62), (2, 7), (11, 74), (3, 36), (2, 80), (11, 92), (76, 93), (52, 93), (4, 62), (33, 43), (43, 53), (35, 49), (0, 49), (4, 80), (2, 46), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (93, 29), (57, 9), (3, 93), (11, 76), (2, 82), (4, 101), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.s---process_ea_header---after
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.s---ea_read_packet---after
function id: 2
function flag: True
There are 367 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.o---after
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 320 nodes and 558 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 367 instructions in binary file.
[4199870, 4199878, 4199908]
The execution time of patched subCFG information extraction via angr: 0:00:01.308785
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4015be>, <DisassemblerInsn "mov" for 0x4015c0>, <DisassemblerInsn "jmp" for 0x4015c4>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401346>, <DisassemblerInsn "mov" for 0x40134a>, <DisassemblerInsn "sub" for 0x40134e>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "je" for 0x401358>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "sub" for 0x401317>, <DisassemblerInsn "je" for 0x40131c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401267>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "sub" for 0x40126f>, <DisassemblerInsn "mov" for 0x401275>, <DisassemblerInsn "je" for 0x401279>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013c8>, <DisassemblerInsn "mov" for 0x4013cc>, <DisassemblerInsn "sub" for 0x4013d0>, <DisassemblerInsn "mov" for 0x4013d6>, <DisassemblerInsn "je" for 0x4013da>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401292>, <DisassemblerInsn "mov" for 0x401296>, <DisassemblerInsn "sub" for 0x40129a>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "je" for 0x4012a4>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013b7>, <DisassemblerInsn "sub" for 0x4013bb>, <DisassemblerInsn "je" for 0x4013c0>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "mov" for 0x401371>, <DisassemblerInsn "sub" for 0x401375>, <DisassemblerInsn "mov" for 0x40137b>, <DisassemblerInsn "je" for 0x40137f>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e4>, <DisassemblerInsn "mov" for 0x4015e8>, <DisassemblerInsn "mov" for 0x4015ec>, <DisassemblerInsn "mov" for 0x4015f0>, <DisassemblerInsn "jmp" for 0x4015f4>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015c6>, <DisassemblerInsn "mov" for 0x4015cb>, <DisassemblerInsn "mov" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d3>, <DisassemblerInsn "mov" for 0x4015da>, <DisassemblerInsn "call" for 0x4015df>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401632>, <DisassemblerInsn "mov" for 0x401637>, <DisassemblerInsn "mov" for 0x40163b>, <DisassemblerInsn "mov" for 0x40163f>, <DisassemblerInsn "call" for 0x401643>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401281>, <DisassemblerInsn "sub" for 0x401285>, <DisassemblerInsn "je" for 0x40128a>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "sub" for 0x4012ec>, <DisassemblerInsn "je" for 0x4012f1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x4015c6>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x4015be>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4015be>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40162d>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x4015be>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x4015be>']}], 'cfg_edge_info': [(56, 27), (66, 58), (70, 58), (57, 58), (86, 58), (88, 54), (74, 54), (58, 54), (53, 54), (80, 54), (54, 56), (60, 54)]}]}
{'ea_read_packet': [4199870, 4199878, 4199908]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_after/Os/electronicarts.o---after
The extraction of function: ea_read_packet
[4199870, 4199878, 4199908]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 105 nodes and 153 edges in CFGEmulated.
It has 103 nodes and 202 edges in CDG.
It has 1553 nodes and 1878 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199870, 4199878, 4199908]
{4198912, 4199041, 4199810, 4200067, 4198788, 4199301, 4199303, 4198792, 4199946, 4199056, 4198929, 4199058, 4199187, 4199185, 4199699, 4200090, 4199423, 4199323, 4199325, 4199451, 4200095, 4199712, 4199202, 4199204, 4199588, 4199464, 4199082, 4199084, 4199981, 4199725, 4198577, 4198963, 4199349, 4199605, 4199351, 4199870, 4199486, 4199236, 4199878, 4199238, 4199368, 4200008, 4199366, 4199116, 4198989, 4199118, 4198736, 4198869, 4200021, 4199509, 4198746, 4199262, 4199519, 4199392, 4199264, 4199777, 4199908, 4199397, 4199142, 4199015, 4199144, 4199013, 4198762, 4199275, 4199277, 4199538, 4199412, 4198772, 4199926, 4199159, 4199161, 4198778, 4199039}
[60, 7, 80, 22, 19, 71, 65, 39, 99, 42, 8, 73, 48, 64, 52, 90, 31, 74, 78, 59, 20, 85, 17, 9, 4, 97, 23, 96, 69, 62, 21, 12, 72, 2, 68, 88, 56, 76, 15, 102, 58, 36, 93, 50, 32, 89, 55, 92, 30, 13, 16, 86, 81, 26, 43, 103, 46, 45, 84, 11, 14, 66, 101, 77, 70, 27, 33, 34, 83, 82, 51, 3, 35, 100, 49, 41, 24, 57, 87, 95, 94, 98, 10, 61, 75, 0, 53, 54, 79, 29, 63]
The execution time of patched slicing information extraction via angr: 0:00:06.202103
{'ea_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401265>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "add" for 0x401194>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "mov" for 0x4011a0>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "mov" for 0x4011a9>, <DisassemblerInsn "test" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "je" for 0x4011b3>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012f9>, <DisassemblerInsn "mov" for 0x4012fd>, <DisassemblerInsn "sub" for 0x401301>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "je" for 0x40130b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401450>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40141b>, <DisassemblerInsn "sub" for 0x40141f>, <DisassemblerInsn "je" for 0x401424>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401290>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40127f>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148f>, <DisassemblerInsn "mov" for 0x401493>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "call" for 0x40149f>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013b7>, <DisassemblerInsn "sub" for 0x4013bb>, <DisassemblerInsn "je" for 0x4013c0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40120f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "jmp" for 0x401178>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012aa>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014a4>, <DisassemblerInsn "cmp" for 0x4014a8>, <DisassemblerInsn "mov" for 0x4014ab>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015c6>, <DisassemblerInsn "mov" for 0x4015cb>, <DisassemblerInsn "mov" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d3>, <DisassemblerInsn "mov" for 0x4015da>, <DisassemblerInsn "call" for 0x4015df>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401233>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "sub" for 0x40123b>, <DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "je" for 0x401245>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40136b>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011fe>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b4>, <DisassemblerInsn "sub" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "je" for 0x4012c6>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "sub" for 0x4012ec>, <DisassemblerInsn "je" for 0x4012f1>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40151e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fb>, <DisassemblerInsn "mov" for 0x401600>, <DisassemblerInsn "call" for 0x401605>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401344>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d5>, <DisassemblerInsn "sub" for 0x4011d9>, <DisassemblerInsn "je" for 0x4011de>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40169f>, <DisassemblerInsn "add" for 0x4016a3>, <DisassemblerInsn "ret" for 0x4016aa>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "call" for 0x40116f>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40139d>, <DisassemblerInsn "mov" for 0x4013a1>, <DisassemblerInsn "sub" for 0x4013a5>, <DisassemblerInsn "mov" for 0x4013ab>, <DisassemblerInsn "je" for 0x4013af>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "call" for 0x40145a>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40139b>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e4>, <DisassemblerInsn "mov" for 0x4015e8>, <DisassemblerInsn "mov" for 0x4015ec>, <DisassemblerInsn "mov" for 0x4015f0>, <DisassemblerInsn "jmp" for 0x4015f4>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401267>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "sub" for 0x40126f>, <DisassemblerInsn "mov" for 0x401275>, <DisassemblerInsn "je" for 0x401279>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011e4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "mov" for 0x4011bf>, <DisassemblerInsn "sub" for 0x4011c3>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "je" for 0x4011cd>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401292>, <DisassemblerInsn "mov" for 0x401296>, <DisassemblerInsn "sub" for 0x40129a>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "je" for 0x4012a4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x40115c>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "cmp" for 0x401165>, <DisassemblerInsn "je" for 0x401168>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401281>, <DisassemblerInsn "sub" for 0x401285>, <DisassemblerInsn "je" for 0x40128a>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401360>, <DisassemblerInsn "sub" for 0x401364>, <DisassemblerInsn "je" for 0x401369>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401513>, <DisassemblerInsn "sub" for 0x401517>, <DisassemblerInsn "je" for 0x40151c>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ce>, <DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "sub" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012dc>, <DisassemblerInsn "je" for 0x4012e0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40143e>, <DisassemblerInsn "mov" for 0x401443>, <DisassemblerInsn "mov" for 0x401447>, <DisassemblerInsn "mov" for 0x401449>, <DisassemblerInsn "call" for 0x40144b>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013e0>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40152d>, <DisassemblerInsn "mov" for 0x401535>, <DisassemblerInsn "mov" for 0x401539>, <DisassemblerInsn "mov" for 0x401541>, <DisassemblerInsn "shl" for 0x401545>, <DisassemblerInsn "add" for 0x401547>, <DisassemblerInsn "xor" for 0x40154a>, <DisassemblerInsn "div" for 0x40154c>, <DisassemblerInsn "mov" for 0x40154e>, <DisassemblerInsn "mov" for 0x401550>, <DisassemblerInsn "add" for 0x401554>, <DisassemblerInsn "mov" for 0x401556>, <DisassemblerInsn "mov" for 0x401558>, <DisassemblerInsn "jmp" for 0x40155c>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "sub" for 0x401204>, <DisassemblerInsn "je" for 0x401209>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013f4>, <DisassemblerInsn "add" for 0x4013f8>, <DisassemblerInsn "mov" for 0x4013fb>, <DisassemblerInsn "mov" for 0x4013ff>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "test" for 0x401415>, <DisassemblerInsn "je" for 0x401417>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401231>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "call" for 0x401155>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013e5>, <DisassemblerInsn "mov" for 0x4013ea>, <DisassemblerInsn "call" for 0x4013ef>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40124b>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "mov" for 0x401371>, <DisassemblerInsn "sub" for 0x401375>, <DisassemblerInsn "mov" for 0x40137b>, <DisassemblerInsn "je" for 0x40137f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40160a>, <DisassemblerInsn "add" for 0x40160e>, <DisassemblerInsn "xor" for 0x401611>, <DisassemblerInsn "mov" for 0x401613>, <DisassemblerInsn "mov" for 0x401617>, <DisassemblerInsn "jmp" for 0x40161b>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ff>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "test" for 0x401415>, <DisassemblerInsn "je" for 0x401417>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401419>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401346>, <DisassemblerInsn "mov" for 0x40134a>, <DisassemblerInsn "sub" for 0x40134e>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "je" for 0x401358>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401311>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e6>, <DisassemblerInsn "mov" for 0x4011ea>, <DisassemblerInsn "sub" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f4>, <DisassemblerInsn "je" for 0x4011f8>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "add" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147d>, <DisassemblerInsn "mov" for 0x401481>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148f>, <DisassemblerInsn "mov" for 0x401493>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "call" for 0x40149f>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401683>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x40168c>, <DisassemblerInsn "mov" for 0x40168e>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "call" for 0x401695>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401211>, <DisassemblerInsn "mov" for 0x401215>, <DisassemblerInsn "mov" for 0x401219>, <DisassemblerInsn "sub" for 0x40121d>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "mov" for 0x401227>, <DisassemblerInsn "je" for 0x40122b>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401648>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "jl" for 0x401653>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401324>, <DisassemblerInsn "mov" for 0x401328>, <DisassemblerInsn "mov" for 0x40132c>, <DisassemblerInsn "sub" for 0x401330>, <DisassemblerInsn "mov" for 0x401336>, <DisassemblerInsn "mov" for 0x40133a>, <DisassemblerInsn "je" for 0x40133e>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "add" for 0x401194>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "mov" for 0x4011a0>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "mov" for 0x4011a9>, <DisassemblerInsn "test" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "je" for 0x4011b3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011d3>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401582>, <DisassemblerInsn "mov" for 0x40158a>, <DisassemblerInsn "mov" for 0x40158e>, <DisassemblerInsn "mov" for 0x401592>, <DisassemblerInsn "mov" for 0x40159a>, <DisassemblerInsn "mov" for 0x4015a2>, <DisassemblerInsn "imul" for 0x4015a4>, <DisassemblerInsn "xor" for 0x4015a7>, <DisassemblerInsn "div" for 0x4015a9>, <DisassemblerInsn "mov" for 0x4015ab>, <DisassemblerInsn "mov" for 0x4015ad>, <DisassemblerInsn "add" for 0x4015b1>, <DisassemblerInsn "mov" for 0x4015b3>, <DisassemblerInsn "mov" for 0x4015b5>, <DisassemblerInsn "jmp" for 0x4015b9>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013c8>, <DisassemblerInsn "mov" for 0x4013cc>, <DisassemblerInsn "sub" for 0x4013d0>, <DisassemblerInsn "mov" for 0x4013d6>, <DisassemblerInsn "je" for 0x4013da>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012e6>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4015be>, <DisassemblerInsn "mov" for 0x4015c0>, <DisassemblerInsn "jmp" for 0x4015c4>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40169a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401464>, <DisassemblerInsn "mov" for 0x401468>, <DisassemblerInsn "call" for 0x40146d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40143c>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401322>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "sub" for 0x401317>, <DisassemblerInsn "je" for 0x40131c>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b5>, <DisassemblerInsn "mov" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014c2>, <DisassemblerInsn "mov" for 0x4014ca>, <DisassemblerInsn "mov" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014da>, <DisassemblerInsn "mov" for 0x4014dc>, <DisassemblerInsn "movsxd" for 0x4014de>, <DisassemblerInsn "mov" for 0x4014e1>, <DisassemblerInsn "mov" for 0x4014e3>, <DisassemblerInsn "imul" for 0x4014e7>, <DisassemblerInsn "movsxd" for 0x4014ee>, <DisassemblerInsn "cqo" for 0x4014f1>, <DisassemblerInsn "idiv" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014f6>, <DisassemblerInsn "mov" for 0x4014f9>, <DisassemblerInsn "mov" for 0x401501>, <DisassemblerInsn "mov" for 0x401504>, <DisassemblerInsn "mov" for 0x401506>, <DisassemblerInsn "sub" for 0x40150a>, <DisassemblerInsn "je" for 0x40150f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "call" for 0x40117f>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401632>, <DisassemblerInsn "mov" for 0x401637>, <DisassemblerInsn "mov" for 0x40163b>, <DisassemblerInsn "mov" for 0x40163f>, <DisassemblerInsn "call" for 0x401643>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013c6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x401659>, <DisassemblerInsn "mov" for 0x401661>, <DisassemblerInsn "mov" for 0x401665>, <DisassemblerInsn "mov" for 0x40166d>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "mov" for 0x401677>, <DisassemblerInsn "or" for 0x401679>, <DisassemblerInsn "mov" for 0x40167b>, <DisassemblerInsn "mov" for 0x40167d>, <DisassemblerInsn "jmp" for 0x401681>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40161d>, <DisassemblerInsn "xor" for 0x401621>, <DisassemblerInsn "mov" for 0x401623>, <DisassemblerInsn "mov" for 0x401627>, <DisassemblerInsn "jmp" for 0x40162b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401426>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40124d>, <DisassemblerInsn "mov" for 0x401251>, <DisassemblerInsn "sub" for 0x401255>, <DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "je" for 0x40125f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40135e>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401387>, <DisassemblerInsn "mov" for 0x40138b>, <DisassemblerInsn "sub" for 0x40138f>, <DisassemblerInsn "mov" for 0x401395>, <DisassemblerInsn "je" for 0x401399>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401385>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013b5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011b9>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401520>, <DisassemblerInsn "sub" for 0x401524>, <DisassemblerInsn "je" for 0x401529>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012cc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4010b1>, <DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010cf>, <DisassemblerInsn "add" for 0x4010d2>, <DisassemblerInsn "mov" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010de>, <DisassemblerInsn "add" for 0x4010e1>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "add" for 0x4010ed>, <DisassemblerInsn "mov" for 0x4010f1>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "add" for 0x4010fc>, <DisassemblerInsn "mov" for 0x401100>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "add" for 0x40110b>, <DisassemblerInsn "mov" for 0x40110f>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "add" for 0x40111a>, <DisassemblerInsn "mov" for 0x40111e>, <DisassemblerInsn "mov" for 0x401126>, <DisassemblerInsn "add" for 0x401129>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "add" for 0x401138>, <DisassemblerInsn "mov" for 0x40113c>, <DisassemblerInsn "add" for 0x401144>, <DisassemblerInsn "mov" for 0x401148>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "call" for 0x401155>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401561>, <DisassemblerInsn "mov" for 0x401565>, <DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "mov" for 0x401571>, <DisassemblerInsn "add" for 0x401575>, <DisassemblerInsn "mov" for 0x401577>, <DisassemblerInsn "mov" for 0x401579>, <DisassemblerInsn "jmp" for 0x40157d>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401511>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012f7>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401428>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "sub" for 0x401430>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "je" for 0x40143a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40152b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 60, 'blockInsts': ['<jmp~~0x401267>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x40169a>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x401455>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x401292>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401281>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6d44414d>', '<je~~0x4015be>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x401211>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401188>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x4012ac>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x40169f>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4013ff>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x40136d>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x401200>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x40162d>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6544414d>', '<je~~0x4015be>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401520>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401346>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x4015f6>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x40139d>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40162d>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4011e6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4013ff>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40117a>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x4015be>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x4013e5>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x40152d>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4013ff>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x401683>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40169f>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x40161d>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x40143e>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401233>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x40124d>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6b44414d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40162d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x40143e>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x40141b>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x401313>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x40162d>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x40169f>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x40162d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4011d5>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40169f>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x4015c6>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4012e8>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x4015c6>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x401150>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401485>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401324>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x4015be>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x401561>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 100, 'blockInsts': ['<jmp~~0x4013c8>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40169f>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x40162d>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x401428>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40169f>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x401360>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x4013ff>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401387>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x4013b7>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4011bb>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x401561>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x4012ce>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40169f>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x401513>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x4012f9>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x401455>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401582>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (64, 69), (99, 100), (70, 64), (17, 21), (100, 101), (7, 10), (95, 13), (96, 97), (73, 74), (78, 70), (61, 63), (29, 34), (46, 50), (8, 11), (93, 15), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (11, 9), (80, 81), (66, 9), (75, 76), (89, 93), (68, 70), (69, 35), (85, 86), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (92, 94), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (101, 64), (56, 59), (3, 7), (92, 64), (52, 55), (86, 87), (84, 35), (39, 48), (19, 24), (46, 35), (58, 9), (80, 9), (4, 8), (87, 88), (97, 98), (17, 20), (36, 42), (30, 35), (88, 89), (74, 35), (86, 64), (97, 9), (15, 22), (61, 53), (84, 85), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (103, 27), (29, 23), (51, 53), (35, 45), (95, 96), (93, 16), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (101, 102), (11, 10), (19, 23), (68, 71), (82, 70), (102, 103), (63, 66), (98, 99), (42, 46), (33, 43), (31, 36), (65, 68), (99, 70), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (99, 100), (99, 45), (62, 35), (19, 9), (2, 11), (17, 30), (95, 13), (36, 46), (88, 93), (78, 70), (101, 35), (19, 48), (93, 15), (29, 43), (2, 4), (74, 75), (92, 35), (78, 45), (13, 19), (46, 52), (86, 88), (80, 81), (84, 45), (68, 70), (62, 69), (82, 35), (101, 103), (68, 45), (46, 45), (48, 51), (86, 35), (97, 99), (72, 45), (92, 94), (68, 72), (101, 69), (13, 23), (88, 90), (99, 35), (101, 32), (82, 83), (74, 45), (92, 69), (84, 86), (78, 79), (93, 33), (19, 29), (62, 64), (36, 45), (72, 74), (88, 92), (99, 101), (29, 33), (95, 97), (78, 35), (101, 64), (82, 69), (101, 27), (86, 69), (92, 64), (51, 56), (86, 87), (84, 35), (13, 48), (13, 2), (101, 2), (93, 19), (99, 69), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (52, 57), (72, 35), (80, 82), (97, 98), (17, 20), (82, 64), (76, 78), (88, 89), (74, 35), (93, 48), (86, 64), (61, 53), (78, 69), (84, 85), (13, 43), (52, 13), (62, 45), (99, 64), (93, 23), (2, 3), (36, 35), (93, 32), (82, 84), (13, 27), (29, 23), (51, 53), (78, 80), (95, 96), (101, 45), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (93, 43), (92, 45), (56, 58), (72, 69), (78, 64), (61, 66), (101, 102), (93, 27), (57, 62), (2, 7), (17, 35), (82, 70), (68, 71), (93, 2), (82, 45), (99, 70), (76, 13), (68, 64), (86, 45), (76, 77), (92, 95), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (4, 9), (70, 64), (0, 51), (2, 57), (32, 3), (11, 69), (3, 86), (2, 11), (3, 95), (0, 23), (89, 43), (4, 103), (4, 57), (15, 32), (89, 15), (0, 53), (3, 70), (3, 15), (93, 15), (8, 11), (11, 62), (29, 43), (11, 30), (4, 23), (3, 88), (2, 68), (11, 80), (3, 97), (49, 9), (53, 9), (11, 101), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (11, 9), (89, 29), (66, 9), (48, 58), (89, 93), (4, 89), (3, 35), (69, 35), (3, 99), (4, 43), (4, 52), (2, 36), (0, 103), (11, 103), (3, 74), (11, 57), (95, 93), (20, 35), (0, 2), (3, 19), (0, 66), (4, 82), (43, 9), (3, 92), (15, 2), (4, 36), (3, 101), (2, 84), (0, 32), (45, 9), (43, 48), (51, 61), (3, 76), (4, 11), (32, 2), (4, 20), (23, 33), (4, 84), (43, 66), (4, 29), (48, 53), (4, 93), (62, 64), (0, 89), (2, 86), (2, 95), (0, 43), (11, 52), (4, 68), (29, 33), (20, 30), (3, 78), (3, 23), (32, 4), (4, 86), (101, 64), (35, 9), (4, 95), (7, 11), (2, 88), (2, 97), (3, 62), (92, 64), (3, 7), (51, 56), (4, 70), (89, 19), (84, 35), (3, 80), (4, 15), (43, 61), (3, 89), (4, 88), (93, 19), (4, 97), (2, 8), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (11, 93), (0, 93), (46, 35), (2, 99), (3, 64), (103, 32), (3, 9), (58, 9), (4, 8), (51, 58), (80, 9), (4, 72), (4, 17), (3, 82), (0, 4), (4, 35), (4, 99), (2, 74), (30, 35), (3, 103), (74, 35), (11, 86), (11, 95), (2, 92), (97, 9), (3, 57), (86, 64), (4, 46), (2, 101), (43, 56), (89, 23), (4, 19), (4, 74), (4, 92), (0, 15), (2, 76), (48, 9), (0, 33), (11, 97), (51, 53), (3, 68), (35, 45), (43, 58), (4, 76), (64, 35), (11, 72), (103, 2), (45, 49), (48, 66), (2, 78), (3, 43), (93, 43), (0, 35), (3, 52), (43, 51), (4, 78), (2, 62), (2, 7), (11, 74), (3, 36), (2, 80), (76, 93), (11, 92), (52, 93), (4, 62), (33, 43), (43, 53), (35, 49), (0, 49), (4, 80), (2, 46), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (93, 29), (11, 76), (3, 93), (57, 9), (2, 82), (4, 101), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 307, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 308, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 309, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 313, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 314, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 315, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 320, 'instruction': 'jmp\t.LBB2_18'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8---a/libavformat/electronicarts.c
The case of compiler gcc with optimization no.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/no/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/no/electronicarts_gcc.s---process_ea_header---before
function id: 20
function flag: True
There are 214 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 166, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.L69'}, {'instIndex': 169, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 171, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 172, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 173, 'instruction': 'nop'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/no/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/no/electronicarts_gcc.s---ea_read_packet---before
function id: 23
function flag: True
There are 286 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 235, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 236, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 237, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 238, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 239, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 240, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 241, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 242, 'instruction': 'jmp\t.L110'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/no/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 166, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.L69'}, {'instIndex': 169, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 171, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 172, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 173, 'instruction': 'nop'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 235, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 236, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 237, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 238, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 239, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 240, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 241, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 242, 'instruction': 'jmp\t.L110'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O0/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O0/electronicarts_gcc.s---process_ea_header---before
function id: 20
function flag: True
There are 214 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 166, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.L69'}, {'instIndex': 169, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 171, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 172, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 173, 'instruction': 'nop'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O0/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O0/electronicarts_gcc.s---ea_read_packet---before
function id: 23
function flag: True
There are 286 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 235, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 236, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 237, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 238, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 239, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 240, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 241, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 242, 'instruction': 'jmp\t.L110'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O0/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 166, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.L69'}, {'instIndex': 169, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 171, 'instruction': 'call\tprocess_video_header_vp6'}, {'instIndex': 172, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 173, 'instruction': 'nop'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 235, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 236, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 237, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 238, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 239, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 240, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 241, 'instruction': 'addl\t$8, 0x20(%rsp)'}, {'instIndex': 242, 'instruction': 'jmp\t.L110'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O1/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O1/electronicarts_gcc.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O1/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O1/electronicarts_gcc.s---ea_read_packet---before
function id: 1
function flag: True
There are 775 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movl\t%ebp, %edx'}, {'instIndex': 32, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 33, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 34, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 35, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 36, 'instruction': 'jmp\t.L24'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O1/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movl\t%ebp, %edx'}, {'instIndex': 32, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 33, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 34, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 35, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 36, 'instruction': 'jmp\t.L24'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O2/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O2/electronicarts_gcc.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O2/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O2/electronicarts_gcc.s---ea_read_packet---before
function id: 1
function flag: True
There are 856 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 34, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 35, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 37, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 38, 'instruction': 'call\turl_fseek@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O2/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 34, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 35, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 37, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 38, 'instruction': 'call\turl_fseek@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O3/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O3/electronicarts_gcc.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O3/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O3/electronicarts_gcc.s---ea_read_packet---before
function id: 1
function flag: True
There are 859 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 35, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 36, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t%r14d, %r13d'}, {'instIndex': 39, 'instruction': 'call\turl_fseek@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/O3/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 35, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 36, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'movl\t%r14d, %r13d'}, {'instIndex': 39, 'instruction': 'call\turl_fseek@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/Os/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/Os/electronicarts_gcc.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/Os/electronicarts_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/Os/electronicarts_gcc.s---ea_read_packet---before
function id: 1
function flag: True
There are 672 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 139, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 140, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 141, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 142, 'instruction': 'movd\t%xmm0, 12(%rsp)'}, {'instIndex': 143, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 144, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 145, 'instruction': 'movd\t12(%rsp), %xmm0'}, {'instIndex': 146, 'instruction': 'jmp\t.L22'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/gcc_before/Os/electronicarts.o
Binary file does not exist.
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 139, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 140, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 141, 'instruction': 'movq\t%r13, %rdi'}, {'instIndex': 142, 'instruction': 'movd\t%xmm0, 12(%rsp)'}, {'instIndex': 143, 'instruction': 'call\turl_fseek@PLT'}, {'instIndex': 144, 'instruction': 'addl\t$8, %r12d'}, {'instIndex': 145, 'instruction': 'movd\t12(%rsp), %xmm0'}, {'instIndex': 146, 'instruction': 'jmp\t.L22'}]}]}
The case of compiler clang with optimization no.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.s---process_ea_header---before
function id: 3
function flag: True
There are 216 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 179, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 180, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 181, 'instruction': 'jmp\t.LBB3_28'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 183, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 279 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 229, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 230, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 232, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 233, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 234, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 235, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 236, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 237, 'instruction': 'jmp\t.LBB2_26'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.o---before
The extraction of function: process_ea_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 355 nodes and 598 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 216 instructions in binary file.
[4196997, 4197011, 4197021]
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 355 nodes and 598 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 279 instructions in binary file.
[4195996, 4196004, 4196026]
The execution time of patched subCFG information extraction via angr: 0:00:01.759744
{'process_ea_header': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad3>, <DisassemblerInsn "add" for 0x400ad7>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "mov" for 0x400add>, <DisassemblerInsn "xor" for 0x400adf>, <DisassemblerInsn "call" for 0x400ae1>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "jmp" for 0x400a91>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "sub" for 0x4008c4>, <DisassemblerInsn "je" for 0x4008c9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "mov" for 0x400ab1>, <DisassemblerInsn "lea" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "call" for 0x400abf>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d1>, <DisassemblerInsn "sub" for 0x4008d5>, <DisassemblerInsn "je" for 0x4008da>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "call" for 0x400a98>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400aa1>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400a85>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400a93>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401310>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}], 'cfg_edge_info': [(49, 20), (48, 49), (52, 54), (51, 52), (54, 24), (54, 23)]}], 'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "jmp" for 0x4006c5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fc>, <DisassemblerInsn "call" for 0x400700>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "sub" for 0x4004df>, <DisassemblerInsn "je" for 0x4004e4>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x40069c>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006a4>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006a4>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x40069c>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x40069c>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x40069c>']}], 'cfg_edge_info': [(63, 64), (64, 62), (62, 31), (60, 62), (59, 60), (74, 64), (66, 60), (88, 60), (78, 60)]}]}
{'process_ea_header': [4196997, 4197011, 4197021], 'ea_read_packet': [4195996, 4196004, 4196026]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/no/electronicarts.o---before
The extraction of function: process_ea_header
[4196997, 4197011, 4197021]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 320 nodes and 475 edges in CFGEmulated.
It has 320 nodes and 448 edges in CDG.
It has 2661 nodes and 5131 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4196997, 4197011, 4197021]
{4196865, 4196612, 4196997, 4197126, 4196741, 4196362, 4197134, 4196625, 4197011, 4196376, 4197021, 4196510, 4197025, 4196387, 4196772, 4196261, 4197032, 4196909, 4196527, 4196274, 4196788, 4196410, 4196668, 4196542, 4196544, 4196675, 4197060, 4196420, 4196291, 4196812, 4197070, 4196559, 4196561, 4196309, 4196825, 4196827, 4196699, 4196317, 4196576, 4196578, 4196963, 4196325, 4197094, 4196455, 4196837, 4196969, 4196712, 4196330, 4196208, 4196593, 4196722, 4196595, 4196340, 4197110, 4196856, 4196476}
[52, 5, 32, 162, 0, 99, 81, 21, 46, 64, 71, 3, 179, 60, 25, 49, 42, 1, 155, 45, 76, 48, 86, 19, 113, 10, 41, 54, 75, 142, 17, 74, 56, 69, 57, 87, 116, 20, 143, 47, 66, 67, 161, 4, 154, 148, 117, 68, 130, 58, 13, 305, 119, 33, 80, 70, 23, 16, 18, 107, 169, 53, 6, 15, 59, 297, 11, 55, 7, 150, 43, 2, 120, 65, 37, 26, 171, 156, 133, 98, 40]
The extraction of function: ea_read_packet
[4195996, 4196004, 4196026]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 104 nodes and 149 edges in CFGEmulated.
It has 104 nodes and 234 edges in CDG.
It has 1247 nodes and 1558 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195996, 4196004, 4196026]
{4195714, 4195203, 4196101, 4195334, 4195975, 4195847, 4195593, 4195468, 4195725, 4195470, 4196112, 4195604, 4195349, 4195860, 4195351, 4196122, 4195738, 4195996, 4195485, 4195487, 4195232, 4195873, 4196004, 4195366, 4195368, 4195625, 4195502, 4195504, 4195249, 4195383, 4195639, 4195385, 4195130, 4196026, 4195515, 4195517, 4195266, 4196163, 4195907, 4195653, 4196039, 4195400, 4195144, 4195530, 4195402, 4195149, 4195663, 4195283, 4195924, 4195159, 4196184, 4195545, 4195417, 4195547, 4195419, 4196189, 4196059, 4195682, 4195300, 4196197, 4195173, 4196072, 4195562, 4195436, 4195567, 4195056, 4195695, 4196082, 4195183, 4195317, 4195189, 4195451, 4195453, 4195582, 4195199}
[83, 26, 93, 72, 0, 68, 32, 100, 21, 28, 87, 33, 5, 60, 102, 69, 90, 6, 89, 82, 55, 62, 16, 98, 79, 59, 75, 47, 7, 61, 42, 74, 99, 84, 53, 35, 52, 27, 77, 48, 40, 25, 58, 67, 20, 54, 95, 80, 78, 19, 13, 91, 81, 64, 12, 2, 101, 63, 86, 56, 30, 36, 10, 49, 18, 57, 17, 44, 34, 14, 22, 1, 41, 96, 66, 39, 92, 4, 45, 15, 73, 85, 65, 46, 88, 97, 50, 70, 24, 11, 51]
The execution time of patched slicing information extraction via angr: 0:00:51.652693
{'process_ea_header': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009d9>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007e5>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "call" for 0x400980>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "lea" for 0x40094d>, <DisassemblerInsn "mov" for 0x400954>, <DisassemblerInsn "call" for 0x400956>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400770>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x400779>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x40079d>, <DisassemblerInsn "xor" for 0x4007a5>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "jge" for 0x4007b0>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008f1>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008e0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40087a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "and" for 0x4009a8>, <DisassemblerInsn "cmp" for 0x4009ad>, <DisassemblerInsn "je" for 0x4009b2>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "sub" for 0x4008c4>, <DisassemblerInsn "je" for 0x4008c9>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008cf>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40095b>, <DisassemblerInsn "jmp" for 0x400963>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009db>, <DisassemblerInsn "call" for 0x4009e0>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a59>, <DisassemblerInsn "call" for 0x400a5e>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "jmp" for 0x4009fc>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ad>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "cmp" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "je" for 0x4007c1>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40093c>, <DisassemblerInsn "je" for 0x400941>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x400998>, <DisassemblerInsn "call" for 0x40099d>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d1>, <DisassemblerInsn "sub" for 0x4008d5>, <DisassemblerInsn "je" for 0x4008da>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "sub" for 0x4008b3>, <DisassemblerInsn "je" for 0x4008b8>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401310>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401322>, <DisassemblerInsn "mov" for 0x401327>, <DisassemblerInsn "mov" for 0x40132c>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "mov" for 0x401334>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "call" for 0x40133d>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "ror" for 0x400850>, <DisassemblerInsn "ror" for 0x400854>, <DisassemblerInsn "ror" for 0x400857>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400863>, <DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "sub" for 0x40086f>, <DisassemblerInsn "je" for 0x400874>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x400800>, <DisassemblerInsn "call" for 0x400805>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a77>, <DisassemblerInsn "mov" for 0x400a7c>, <DisassemblerInsn "jmp" for 0x400a83>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad3>, <DisassemblerInsn "add" for 0x400ad7>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "mov" for 0x400add>, <DisassemblerInsn "xor" for 0x400adf>, <DisassemblerInsn "call" for 0x400ae1>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4007a5>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "jge" for 0x4007b0>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "call" for 0x400937>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "cmp" for 0x40083f>, <DisassemblerInsn "je" for 0x400842>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0e>, <DisassemblerInsn "add" for 0x400b12>, <DisassemblerInsn "ret" for 0x400b16>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a39>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "mov" for 0x400a46>, <DisassemblerInsn "mov" for 0x400a4e>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jmp" for 0x400a57>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ac4>, <DisassemblerInsn "mov" for 0x400ac8>, <DisassemblerInsn "jmp" for 0x400acc>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008be>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e2>, <DisassemblerInsn "sub" for 0x4008e6>, <DisassemblerInsn "je" for 0x4008eb>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c0>, <DisassemblerInsn "mov" for 0x4011c4>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "cmp" for 0x4011ce>, <DisassemblerInsn "cmove" for 0x4011d1>, <DisassemblerInsn "mov" for 0x4011d4>, <DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "call" for 0x4009f3>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40090f>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c77>, <DisassemblerInsn "mov" for 0x400c7c>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "mov" for 0x400c8d>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca0>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400cb0>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd5>, <DisassemblerInsn "cmp" for 0x400cdc>, <DisassemblerInsn "je" for 0x400ce1>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009cc>, <DisassemblerInsn "jmp" for 0x4009d4>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "call" for 0x40096d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c3>, <DisassemblerInsn "cmp" for 0x4007c8>, <DisassemblerInsn "setne" for 0x4007cc>, <DisassemblerInsn "xor" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "mov" for 0x401360>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x401368>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "mov" for 0x401374>, <DisassemblerInsn "add" for 0x401379>, <DisassemblerInsn "ret" for 0x40137d>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae6>, <DisassemblerInsn "add" for 0x400aea>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "jmp" for 0x400af1>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e5>, <DisassemblerInsn "jmp" for 0x4009e9>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "mov" for 0x4012d4>, <DisassemblerInsn "mov" for 0x4012d9>, <DisassemblerInsn "mov" for 0x4012dc>, <DisassemblerInsn "mov" for 0x4012e1>, <DisassemblerInsn "mov" for 0x4012e9>, <DisassemblerInsn "mov" for 0x4012f1>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012fa>, <DisassemblerInsn "mov" for 0x4012ff>, <DisassemblerInsn "mov" for 0x401306>, <DisassemblerInsn "add" for 0x40130b>, <DisassemblerInsn "ret" for 0x40130f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40080a>, <DisassemblerInsn "mov" for 0x40080e>, <DisassemblerInsn "call" for 0x400813>]'}, {'block_Idx': 305, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jmp" for 0x400976>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0d>, <DisassemblerInsn "mov" for 0x400a12>, <DisassemblerInsn "mov" for 0x400a1a>, <DisassemblerInsn "mov" for 0x400a22>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "jmp" for 0x400a2b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40089c>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "call" for 0x400a98>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "jmp" for 0x400a91>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087c>, <DisassemblerInsn "sub" for 0x400880>, <DisassemblerInsn "je" for 0x400885>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400823>, <DisassemblerInsn "seta" for 0x40082b>, <DisassemblerInsn "and" for 0x40082e>, <DisassemblerInsn "movzx" for 0x400830>, <DisassemblerInsn "mov" for 0x400833>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "cmp" for 0x40083f>, <DisassemblerInsn "je" for 0x400842>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "sub" for 0x40086f>, <DisassemblerInsn "je" for 0x400874>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f3>, <DisassemblerInsn "sub" for 0x4008f7>, <DisassemblerInsn "je" for 0x4008fc>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b20>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2e>, <DisassemblerInsn "mov" for 0x400b32>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3c>, <DisassemblerInsn "mov" for 0x400b40>, <DisassemblerInsn "mov" for 0x400b45>, <DisassemblerInsn "cmp" for 0x400b4a>, <DisassemblerInsn "je" for 0x400b4d>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "lea" for 0x4009be>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "call" for 0x4009c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "call" for 0x4007ef>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400818>, <DisassemblerInsn "cmp" for 0x40081c>, <DisassemblerInsn "jne" for 0x400821>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009a2>]'}, {'block_Idx': 297, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5e>, <DisassemblerInsn "add" for 0x400c63>, <DisassemblerInsn "ret" for 0x400c67>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b06>, <DisassemblerInsn "mov" for 0x400b0e>, <DisassemblerInsn "add" for 0x400b12>, <DisassemblerInsn "ret" for 0x400b16>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "mov" for 0x400ab1>, <DisassemblerInsn "lea" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "call" for 0x400abf>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af6>, <DisassemblerInsn "xor" for 0x400afb>, <DisassemblerInsn "mov" for 0x400afd>, <DisassemblerInsn "xor" for 0x400aff>, <DisassemblerInsn "call" for 0x400b01>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401253>, <DisassemblerInsn "mov" for 0x401255>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "mov" for 0x40125d>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400902>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a63>, <DisassemblerInsn "jmp" for 0x400a67>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089e>, <DisassemblerInsn "sub" for 0x4008a2>, <DisassemblerInsn "je" for 0x4008a7>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40088b>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40092d>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40091c>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "sub" for 0x400908>, <DisassemblerInsn "je" for 0x40090d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a6e>, <DisassemblerInsn "jmp" for 0x400a75>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "cmp" for 0x400989>, <DisassemblerInsn "jne" for 0x400991>]'}], 'cfg_block_detailed_info': [{'block_Idx': 52, 'blockInsts': ['<jmp~~0x4009db>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x400af6>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xb1d]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x4007dd>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4008f3>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4008e2>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40087c>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<and~~eax, 0xffff>', '<cmp~~eax, 0x5450>', '<je~~0x4009d9>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400a85>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x4008d1>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 179, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b0e>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400c70>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401280>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4008af>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x1c], 0>', '<mov~~byte ptr [rsp + 0xe], al>', '<je~~0x4007d5>']}, {'block_Idx': 155, 'blockInsts': ['<cmp~~eax, 0x53434145>', '<je~~0x400968>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 4>', '<call~~0x500020>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400a93>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x5447566b>', '<je~~0x400a2d>']}, {'block_Idx': 86, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rdi, qword ptr [rsp]>', '<mov~~esi, 0x10>', '<call~~0x500020>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x4009ee>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7f>', '<jmp~~0x400aa1>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 75, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x4007dd>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400867>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7e>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400aa1>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x400b0e>']}, {'block_Idx': 57, 'blockInsts': ['<jmp~~0x4008c0>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6843504d>', '<je~~0x400a69>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~ecx, 0x5622>', '<mov~~eax, 0xbb80>', '<cmp~~edx, 3>', '<cmove~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401200>']}, {'block_Idx': 143, 'blockInsts': ['<jmp~~0x400911>']}, {'block_Idx': 47, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 66, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~dword ptr [rsp + 0x74], 1>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~dword ptr [rsp + 0x5c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x58], 0xffffffff>', '<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x28], 2>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x30], 1>', '<cmp~~dword ptr [rsp + 0x74], 0>', '<je~~0x401046>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b0e>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400b20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 4], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 0xe], al>', '<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 8], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 4], 0x5e>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4007a5>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 4], 0x26>', '<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 305, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7c>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400aa1>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x40089e>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401310>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400aa1>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4443546d>', '<je~~0x400a59>']}, {'block_Idx': 16, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0xfffff>', '<seta~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400867>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x4009ee>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6849564d>', '<je~~0x400a01>']}, {'block_Idx': 169, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b5f>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xac3]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jne~~0x40083a>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x4009db>']}, {'block_Idx': 297, 'blockInsts': ['<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 1>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<xor~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6c484353>', '<je~~0x40097b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x1c], 0x11017>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x400904>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54475170>', '<je~~0x400a77>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x40088d>']}, {'block_Idx': 171, 'blockInsts': ['<jmp~~0x400aa1>']}, {'block_Idx': 156, 'blockInsts': ['<jmp~~0x40091e>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x684e5331>', '<je~~0x400932>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 2>', '<jmp~~0x400aa1>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<cmp~~dword ptr [rsp + 0x44], 0x52545347>', '<jne~~0x4009a4>']}], 'cfg_edge_info': [(58, 65), (42, 48), (154, 54), (23, 25), (37, 42), (68, 75), (47, 55), (64, 71), (81, 87), (3, 6), (133, 143), (162, 179), (75, 1), (142, 155), (48, 56), (20, 49), (15, 16), (171, 47), (18, 21), (65, 47), (46, 52), (40, 45), (80, 154), (148, 154), (107, 119), (5, 7), (69, 74), (0, 2), (87, 98), (1, 3), (155, 162), (16, 19), (52, 60), (19, 20), (70, 47), (76, 81), (161, 305), (71, 76), (33, 37), (64, 70), (47, 54), (120, 133), (3, 5), (154, 55), (60, 66), (60, 130), (23, 26), (297, 305), (2, 6), (113, 130), (7, 11), (117, 130), (4, 6), (67, 74), (75, 2), (49, 47), (17, 18), (25, 65), (119, 47), (150, 156), (143, 150), (37, 41), (6, 10), (98, 47), (133, 142), (87, 99), (1, 4), (56, 47), (76, 80), (54, 68), (32, 40), (18, 20), (55, 69), (43, 49), (150, 32), (80, 86), (161, 169), (2, 5), (48, 57), (19, 21), (179, 74), (15, 17), (130, 47), (4, 5), (59, 60), (116, 130), (0, 1), (46, 53), (40, 46), (155, 161), (16, 18), (53, 67), (41, 47), (21, 23), (99, 107), (107, 120), (17, 19), (305, 47), (10, 13), (57, 64), (13, 15)], 'cdg_edge_info': [(3, 13), (154, 54), (133, 150), (0, 5), (46, 130), (47, 55), (64, 71), (3, 6), (3, 15), (75, 1), (48, 47), (0, 7), (48, 56), (154, 74), (15, 16), (47, 75), (46, 52), (23, 47), (18, 23), (47, 68), (107, 119), (3, 10), (0, 2), (75, 5), (154, 69), (40, 47), (87, 98), (150, 47), (1, 3), (155, 162), (87, 107), (16, 19), (46, 47), (75, 7), (150, 40), (107, 133), (1, 5), (2, 13), (76, 81), (47, 54), (64, 70), (76, 154), (19, 47), (3, 5), (154, 55), (4, 13), (87, 47), (1, 7), (2, 6), (2, 15), (19, 49), (23, 65), (3, 7), (4, 6), (75, 2), (4, 15), (75, 11), (17, 18), (64, 47), (0, 11), (37, 48), (1, 11), (2, 10), (46, 74), (76, 87), (3, 11), (4, 10), (87, 99), (1, 4), (46, 67), (48, 64), (76, 80), (40, 60), (155, 47), (155, 74), (47, 74), (18, 47), (46, 60), (48, 57), (154, 75), (15, 17), (155, 305), (0, 1), (46, 53), (18, 49), (133, 155), (40, 46), (154, 68), (19, 23), (155, 161), (37, 47), (155, 179), (16, 18), (107, 47), (64, 76), (47, 69), (17, 19), (40, 130)], 'ddg_edge_info': [(19, 64), (154, 54), (0, 60), (68, 75), (13, 17), (130, 154), (54, 6), (13, 154), (19, 48), (4, 130), (16, 40), (10, 54), (0, 53), (65, 54), (16, 49), (162, 179), (19, 130), (0, 7), (75, 10), (49, 55), (0, 16), (16, 305), (0, 80), (13, 19), (15, 16), (13, 37), (305, 154), (0, 55), (0, 119), (13, 76), (16, 17), (54, 1), (19, 107), (16, 154), (69, 74), (154, 69), (130, 69), (4, 155), (13, 133), (16, 65), (13, 23), (13, 87), (19, 155), (19, 54), (0, 68), (150, 40), (13, 16), (13, 80), (305, 69), (10, 154), (65, 154), (0, 98), (0, 162), (154, 55), (130, 55), (4, 13), (13, 55), (49, 54), (13, 119), (13, 64), (19, 13), (4, 40), (7, 11), (68, 15), (19, 150), (19, 40), (54, 7), (19, 49), (119, 17), (4, 305), (0, 54), (67, 74), (4, 15), (19, 305), (13, 48), (15, 54), (19, 15), (305, 55), (0, 75), (55, 74), (75, 4), (0, 4), (10, 69), (4, 154), (65, 69), (0, 13), (19, 154), (6, 10), (54, 75), (4, 65), (13, 98), (4, 10), (13, 107), (19, 65), (19, 10), (1, 4), (0, 6), (0, 70), (0, 15), (16, 130), (19, 37), (54, 4), (54, 68), (4, 49), (0, 161), (55, 69), (49, 154), (130, 54), (10, 55), (13, 54), (65, 55), (19, 76), (0, 17), (179, 74), (53, 74), (13, 56), (0, 56), (0, 1), (133, 155), (19, 133), (40, 46), (75, 13), (305, 54), (19, 23), (11, 74), (19, 87), (0, 19), (0, 10), (15, 19), (53, 67), (13, 150), (16, 155), (56, 17), (17, 19), (162, 74), (10, 13), (75, 15), (13, 70), (49, 69), (13, 15)]}], 'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d1>, <DisassemblerInsn "call" for 0x4006d6>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004bb>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f4>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x400336>, <DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "sub" for 0x4003c6>, <DisassemblerInsn "je" for 0x4003cb>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "sub" for 0x4004df>, <DisassemblerInsn "je" for 0x4004e4>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "cmp" for 0x40052e>, <DisassemblerInsn "je" for 0x400535>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400524>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400553>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "call" for 0x40055d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "cmp" for 0x400360>, <DisassemblerInsn "je" for 0x400363>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "sub" for 0x400625>, <DisassemblerInsn "shl" for 0x400628>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "xor" for 0x40062f>, <DisassemblerInsn "div" for 0x400631>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400636>, <DisassemblerInsn "add" for 0x40063b>, <DisassemblerInsn "mov" for 0x40063e>, <DisassemblerInsn "jmp" for 0x400641>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x400748>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "call" for 0x400753>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ae>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40046a>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e8>, <DisassemblerInsn "jmp" for 0x4006f0>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400404>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a4>, <DisassemblerInsn "je" for 0x4003a9>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ca>, <DisassemblerInsn "sub" for 0x4004ce>, <DisassemblerInsn "je" for 0x4004d3>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "sub" for 0x40044e>, <DisassemblerInsn "je" for 0x400453>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "sub" for 0x4003f9>, <DisassemblerInsn "je" for 0x4003fe>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400437>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a2>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "movsxd" for 0x4005bb>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c4>, <DisassemblerInsn "imul" for 0x4005c7>, <DisassemblerInsn "mov" for 0x4005cb>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "movsxd" for 0x4005d3>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "cqo" for 0x4005e3>, <DisassemblerInsn "idiv" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005e8>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "sub" for 0x4005fe>, <DisassemblerInsn "je" for 0x400603>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400365>, <DisassemblerInsn "call" for 0x40036a>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "jge" for 0x40058b>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004d9>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40047b>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "jmp" for 0x400718>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006db>, <DisassemblerInsn "sub" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "jmp" for 0x4006e6>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400605>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c0>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "cmp" for 0x400709>, <DisassemblerInsn "jge" for 0x40070e>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "sub" for 0x4003d7>, <DisassemblerInsn "je" for 0x4003dc>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "cmp" for 0x40053c>, <DisassemblerInsn "jne" for 0x400543>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "sub" for 0x40060b>, <DisassemblerInsn "je" for 0x400610>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400660>, <DisassemblerInsn "imul" for 0x400665>, <DisassemblerInsn "xor" for 0x400669>, <DisassemblerInsn "div" for 0x40066b>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "add" for 0x400674>, <DisassemblerInsn "mov" for 0x400677>, <DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400514>, <DisassemblerInsn "mov" for 0x400519>, <DisassemblerInsn "mov" for 0x40051d>, <DisassemblerInsn "call" for 0x40051f>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "mov" for 0x400727>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "or" for 0x400733>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "jmp" for 0x400741>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004bd>, <DisassemblerInsn "sub" for 0x4004c1>, <DisassemblerInsn "je" for 0x4004c6>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400459>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400448>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003af>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40039e>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "sub" for 0x40045f>, <DisassemblerInsn "je" for 0x400464>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "sub" for 0x40040a>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400687>, <DisassemblerInsn "mov" for 0x40068f>, <DisassemblerInsn "jmp" for 0x400697>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ea>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "sub" for 0x400618>, <DisassemblerInsn "je" for 0x40061d>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f3>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40056d>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003d1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "sub" for 0x4003e8>, <DisassemblerInsn "je" for 0x4003ed>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "cmp" for 0x40050e>, <DisassemblerInsn "jne" for 0x400512>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006f0>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "call" for 0x40057d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "sub" for 0x4003b5>, <DisassemblerInsn "je" for 0x4003ba>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "call" for 0x400352>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "sub" for 0x400566>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "jmp" for 0x40056d>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fe>, <DisassemblerInsn "sub" for 0x400502>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "cmp" for 0x40050e>, <DisassemblerInsn "jne" for 0x400512>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400415>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fc>, <DisassemblerInsn "call" for 0x400700>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "call" for 0x4004f9>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "add" for 0x400769>, <DisassemblerInsn "ret" for 0x40076d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400758>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "jmp" for 0x4006c5>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40061f>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "jmp" for 0x400595>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049d>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004c8>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "add" for 0x400769>, <DisassemblerInsn "ret" for 0x40076d>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400426>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400545>, <DisassemblerInsn "call" for 0x40054a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "jmp" for 0x400373>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400647>, <DisassemblerInsn "add" for 0x40064c>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "jmp" for 0x400652>]'}], 'cfg_block_detailed_info': [{'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x654e5331>', '<je~~0x400687>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 93, 'blockInsts': ['<jmp~~0x4004bd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006a4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x40069c>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x444e4553>', '<je~~0x400687>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x40069c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x10012>', '<je~~0x400545>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400758>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6843504d>', '<je~~0x4006e8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400375>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<shl~~eax, 1>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~edx, edx>', '<div~~dword ptr [rcx + 0x30]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x40067a>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4004b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x40069c>']}, {'block_Idx': 82, 'blockInsts': ['<jmp~~0x40046c>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<jmp~~0x4006f2>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x400406>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x43444e53>', '<je~~0x400509>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c454353>', '<je~~0x400687>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54514970>', '<je~~0x4006e8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454453>', '<je~~0x400509>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400439>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rax], 0x15f90>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rdx, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<imul~~rcx, rdx>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rax + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rax]>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x1c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<sub~~eax, 0x10012>', '<je~~0x400643>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x400614>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40059a>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4004db>']}, {'block_Idx': 84, 'blockInsts': ['<jmp~~0x40047d>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400765>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x400607>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x40069c>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40071a>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4630564d>', '<je~~0x4006f0>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x15001>', '<jne~~0x40056d>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x1100a>', '<je~~0x400621>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<imul~~ecx, dword ptr [rdx + 0x30]>', '<xor~~edx, edx>', '<div~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<call~~0x500020>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<or~~ecx, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c444353>', '<je~~0x400509>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x40045b>']}, {'block_Idx': 78, 'blockInsts': ['<jmp~~0x40044a>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4003b1>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4003a0>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x684e5331>', '<je~~0x4004ef>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x644e5331>', '<je~~0x400509>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454553>', '<je~~0x400687>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xfffffffb>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x40075d>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x400743>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x15001>', '<je~~0x400643>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x40048e>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x4003f5>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x40056f>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4003d3>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x400687>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4b30564d>', '<je~~0x4006e8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x400529>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 17, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x4006f2>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x400687>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4443546d>', '<je~~0x4006c7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x40056f>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0x20>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x400529>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 0x20>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 45, 'blockInsts': ['<jmp~~0x4003e4>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40033a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006a4>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x400654>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400765>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40049f>']}, {'block_Idx': 97, 'blockInsts': ['<jmp~~0x4004ca>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400428>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400383>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x40067a>']}], 'cfg_edge_info': [(24, 33), (99, 100), (52, 58), (59, 18), (14, 13), (22, 26), (83, 12), (48, 54), (74, 73), (11, 14), (32, 12), (100, 101), (98, 12), (87, 55), (72, 75), (54, 15), (61, 63), (46, 50), (2, 4), (49, 55), (18, 21), (100, 69), (51, 57), (73, 39), (40, 45), (80, 81), (91, 93), (68, 70), (85, 86), (81, 18), (30, 34), (64, 66), (81, 82), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (65, 67), (96, 21), (53, 50), (93, 95), (16, 19), (47, 52), (42, 47), (82, 83), (17, 2), (12, 15), (14, 12), (20, 28), (102, 15), (67, 15), (78, 79), (48, 53), (66, 68), (83, 84), (1, 5), (92, 96), (13, 16), (62, 64), (79, 80), (72, 74), (25, 24), (58, 60), (60, 57), (22, 27), (95, 97), (89, 90), (79, 55), (19, 22), (57, 15), (7, 11), (63, 65), (56, 59), (90, 91), (35, 39), (86, 87), (40, 44), (49, 56), (39, 48), (10, 12), (36, 40), (32, 36), (5, 6), (21, 24), (69, 73), (70, 72), (87, 88), (97, 98), (75, 77), (96, 20), (63, 51), (47, 51), (88, 89), (6, 10), (89, 69), (84, 85), (55, 39), (85, 74), (27, 32), (41, 34), (18, 20), (44, 39), (28, 15), (91, 92), (68, 69), (45, 49), (15, 17), (58, 61), (33, 41), (26, 35), (101, 102), (0, 1), (34, 42), (16, 18), (95, 18), (64, 12), (42, 46), (25, 30), (98, 99), (59, 62), (17, 1), (10, 13)], 'cdg_edge_info': [(72, 73), (81, 21), (18, 17), (59, 64), (25, 41), (87, 89), (59, 18), (5, 10), (22, 26), (83, 12), (68, 48), (0, 5), (22, 35), (48, 54), (85, 73), (83, 85), (100, 101), (32, 12), (98, 12), (96, 24), (87, 55), (96, 33), (79, 81), (72, 75), (16, 22), (96, 42), (42, 50), (85, 48), (81, 41), (17, 5), (14, 15), (100, 39), (49, 55), (96, 17), (87, 48), (59, 41), (72, 77), (16, 24), (81, 34), (16, 33), (100, 69), (16, 42), (49, 39), (14, 17), (5, 14), (49, 48), (22, 39), (91, 93), (77, 39), (68, 70), (85, 86), (77, 48), (59, 34), (81, 18), (64, 66), (48, 15), (79, 39), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (5, 16), (22, 32), (21, 34), (49, 59), (68, 72), (96, 21), (10, 15), (64, 68), (48, 17), (98, 100), (42, 47), (17, 2), (100, 73), (14, 12), (48, 53), (40, 49), (83, 84), (10, 17), (79, 80), (100, 48), (72, 74), (16, 21), (25, 24), (96, 41), (64, 15), (25, 33), (58, 60), (17, 4), (95, 24), (77, 73), (5, 11), (95, 33), (95, 42), (89, 90), (79, 55), (42, 15), (96, 34), (22, 48), (79, 48), (59, 24), (42, 17), (98, 15), (10, 12), (59, 33), (91, 95), (59, 42), (63, 67), (47, 58), (100, 15), (5, 6), (87, 88), (21, 42), (89, 39), (0, 4), (96, 20), (98, 17), (63, 51), (47, 51), (95, 21), (89, 69), (77, 79), (85, 74), (10, 16), (100, 102), (32, 40), (81, 24), (18, 20), (68, 39), (64, 17), (81, 33), (81, 42), (72, 39), (95, 41), (16, 41), (59, 21), (72, 48), (96, 15), (83, 15), (91, 92), (68, 69), (32, 15), (85, 39), (89, 73), (16, 34), (95, 34), (95, 98), (89, 91), (87, 39), (0, 1), (48, 50), (83, 17), (85, 87), (32, 17), (89, 48), (16, 18), (95, 18), (18, 15), (81, 83), (64, 12), (42, 46), (98, 99), (58, 63), (17, 1), (100, 17), (40, 39), (40, 48), (91, 96), (68, 73)], 'ddg_edge_info': [(12, 4), (64, 5), (7, 72), (7, 17), (34, 1), (24, 33), (7, 81), (7, 26), (6, 91), (26, 39), (0, 51), (96, 67), (5, 10), (0, 60), (0, 5), (14, 22), (92, 24), (74, 73), (11, 14), (14, 95), (51, 25), (14, 40), (7, 1), (14, 49), (41, 42), (6, 20), (7, 74), (34, 58), (39, 17), (7, 83), (34, 67), (7, 92), (96, 60), (17, 5), (42, 4), (0, 53), (83, 5), (14, 79), (0, 7), (32, 5), (39, 53), (98, 5), (60, 21), (87, 48), (6, 59), (6, 4), (6, 68), (4, 50), (7, 12), (6, 77), (34, 60), (7, 21), (7, 85), (54, 17), (0, 46), (14, 72), (73, 39), (6, 34), (5, 14), (60, 5), (6, 98), (14, 81), (49, 48), (14, 35), (60, 96), (55, 54), (7, 69), (7, 14), (0, 39), (7, 87), (102, 4), (20, 17), (69, 74), (92, 21), (6, 100), (41, 67), (14, 83), (60, 25), (96, 21), (53, 50), (34, 46), (20, 1), (7, 16), (17, 48), (54, 67), (0, 96), (54, 21), (14, 67), (17, 11), (41, 60), (48, 53), (14, 85), (6, 102), (1, 5), (92, 96), (6, 1), (7, 55), (7, 64), (0, 25), (96, 41), (47, 54), (54, 5), (0, 34), (25, 33), (47, 63), (14, 60), (25, 42), (14, 5), (6, 22), (12, 17), (67, 17), (5, 11), (6, 95), (6, 40), (92, 25), (14, 87), (7, 39), (14, 32), (6, 49), (14, 96), (73, 48), (1, 7), (96, 25), (34, 50), (7, 11), (96, 34), (20, 5), (34, 4), (102, 1), (6, 79), (6, 24), (54, 25), (0, 54), (35, 39), (14, 16), (7, 32), (35, 48), (33, 51), (7, 96), (79, 48), (14, 89), (39, 48), (7, 59), (7, 4), (0, 20), (7, 68), (47, 58), (6, 72), (6, 17), (0, 102), (6, 81), (14, 64), (6, 26), (0, 47), (7, 25), (14, 73), (7, 89), (67, 21), (92, 20), (21, 33), (7, 34), (7, 98), (0, 4), (96, 20), (39, 50), (10, 14), (39, 4), (14, 39), (6, 10), (34, 63), (6, 74), (67, 60), (67, 5), (6, 83), (6, 92), (7, 91), (7, 100), (102, 17), (67, 96), (54, 96), (0, 6), (34, 47), (92, 34), (0, 24), (14, 41), (0, 33), (41, 34), (6, 12), (14, 59), (6, 21), (7, 20), (6, 85), (14, 68), (14, 77), (6, 39), (67, 25), (7, 102), (1, 6), (39, 54), (0, 17), (14, 34), (17, 33), (14, 98), (0, 26), (17, 42), (20, 4), (74, 39), (6, 69), (7, 77), (33, 41), (7, 22), (26, 35), (6, 32), (60, 67), (6, 87), (6, 96), (7, 95), (7, 40), (0, 1), (7, 49), (34, 42), (0, 74), (48, 4), (39, 1), (51, 21), (34, 51), (14, 100), (14, 91), (0, 92), (6, 16), (69, 54), (33, 34), (6, 25), (7, 79), (42, 46), (6, 89), (47, 5), (7, 24), (102, 5), (34, 17), (17, 10), (51, 5), (14, 20), (0, 67), (40, 48), (6, 55), (0, 21), (14, 102), (6, 64), (51, 96)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 179, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 180, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 181, 'instruction': 'jmp\t.LBB3_28'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 183, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 229, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 230, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 232, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 233, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 234, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 235, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 236, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 237, 'instruction': 'jmp\t.LBB2_26'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.s---process_ea_header---before
function id: 3
function flag: True
There are 216 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 179, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 180, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 181, 'instruction': 'jmp\t.LBB3_28'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 183, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 279 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 229, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 230, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 232, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 233, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 234, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 235, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 236, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 237, 'instruction': 'jmp\t.LBB2_26'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.o---before
The extraction of function: process_ea_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 355 nodes and 598 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 216 instructions in binary file.
[4196997, 4197011, 4197021]
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 355 nodes and 598 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 279 instructions in binary file.
[4195996, 4196004, 4196026]
The execution time of patched subCFG information extraction via angr: 0:00:02.074083
{'process_ea_header': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad3>, <DisassemblerInsn "add" for 0x400ad7>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "mov" for 0x400add>, <DisassemblerInsn "xor" for 0x400adf>, <DisassemblerInsn "call" for 0x400ae1>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "jmp" for 0x400a91>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "sub" for 0x4008c4>, <DisassemblerInsn "je" for 0x4008c9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "mov" for 0x400ab1>, <DisassemblerInsn "lea" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "call" for 0x400abf>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d1>, <DisassemblerInsn "sub" for 0x4008d5>, <DisassemblerInsn "je" for 0x4008da>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "call" for 0x400a98>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400aa1>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400a85>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400a93>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401310>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}], 'cfg_edge_info': [(49, 20), (48, 49), (52, 54), (51, 52), (54, 24), (54, 23)]}], 'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "jmp" for 0x4006c5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fc>, <DisassemblerInsn "call" for 0x400700>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "sub" for 0x4004df>, <DisassemblerInsn "je" for 0x4004e4>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x40069c>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006a4>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006a4>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x40069c>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x40069c>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x40069c>']}], 'cfg_edge_info': [(63, 64), (64, 62), (62, 31), (60, 62), (59, 60), (74, 64), (66, 60), (88, 60), (78, 60)]}]}
{'process_ea_header': [4196997, 4197011, 4197021], 'ea_read_packet': [4195996, 4196004, 4196026]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O0/electronicarts.o---before
The extraction of function: process_ea_header
[4196997, 4197011, 4197021]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 320 nodes and 475 edges in CFGEmulated.
It has 320 nodes and 448 edges in CDG.
It has 2661 nodes and 5131 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4196997, 4197011, 4197021]
{4196865, 4196612, 4196997, 4197126, 4196741, 4196362, 4197134, 4196625, 4197011, 4196376, 4197021, 4196510, 4197025, 4196387, 4196772, 4196261, 4197032, 4196909, 4196527, 4196274, 4196788, 4196410, 4196668, 4196542, 4196544, 4196675, 4197060, 4196420, 4196291, 4196812, 4197070, 4196559, 4196561, 4196309, 4196825, 4196827, 4196699, 4196317, 4196576, 4196578, 4196963, 4196325, 4197094, 4196455, 4196837, 4196969, 4196712, 4196330, 4196208, 4196593, 4196722, 4196595, 4196340, 4197110, 4196856, 4196476}
[52, 5, 32, 162, 0, 99, 81, 21, 46, 64, 71, 3, 179, 60, 25, 49, 42, 1, 155, 45, 76, 48, 86, 19, 113, 10, 41, 54, 75, 142, 17, 74, 56, 69, 57, 87, 116, 20, 143, 47, 66, 67, 161, 4, 154, 148, 117, 68, 130, 58, 13, 305, 119, 33, 80, 70, 23, 16, 18, 107, 169, 53, 6, 15, 59, 297, 11, 55, 7, 150, 43, 2, 120, 65, 37, 26, 171, 156, 133, 98, 40]
The extraction of function: ea_read_packet
[4195996, 4196004, 4196026]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 104 nodes and 149 edges in CFGEmulated.
It has 104 nodes and 234 edges in CDG.
It has 1247 nodes and 1558 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195996, 4196004, 4196026]
{4195714, 4195203, 4196101, 4195334, 4195975, 4195847, 4195593, 4195468, 4195725, 4195470, 4196112, 4195604, 4195349, 4195860, 4195351, 4196122, 4195738, 4195996, 4195485, 4195487, 4195232, 4195873, 4196004, 4195366, 4195368, 4195625, 4195502, 4195504, 4195249, 4195383, 4195639, 4195385, 4195130, 4196026, 4195515, 4195517, 4195266, 4196163, 4195907, 4195653, 4196039, 4195400, 4195144, 4195530, 4195402, 4195149, 4195663, 4195283, 4195924, 4195159, 4196184, 4195545, 4195417, 4195547, 4195419, 4196189, 4196059, 4195682, 4195300, 4196197, 4195173, 4196072, 4195562, 4195436, 4195567, 4195056, 4195695, 4196082, 4195183, 4195317, 4195189, 4195451, 4195453, 4195582, 4195199}
[83, 26, 93, 72, 0, 68, 32, 100, 21, 28, 87, 33, 5, 60, 102, 69, 90, 6, 89, 82, 55, 62, 16, 98, 79, 59, 75, 47, 7, 61, 42, 74, 99, 84, 53, 35, 52, 27, 77, 48, 40, 25, 58, 67, 20, 54, 95, 80, 78, 19, 13, 91, 81, 64, 12, 2, 101, 63, 86, 56, 30, 36, 10, 49, 18, 57, 17, 44, 34, 14, 22, 1, 41, 96, 66, 39, 92, 4, 45, 15, 73, 85, 65, 46, 88, 97, 50, 70, 24, 11, 51]
The execution time of patched slicing information extraction via angr: 0:00:51.075050
{'process_ea_header': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009d9>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007e5>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "call" for 0x400980>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "lea" for 0x40094d>, <DisassemblerInsn "mov" for 0x400954>, <DisassemblerInsn "call" for 0x400956>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400770>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x400779>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x40079d>, <DisassemblerInsn "xor" for 0x4007a5>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "jge" for 0x4007b0>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008f1>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008e0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40087a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "and" for 0x4009a8>, <DisassemblerInsn "cmp" for 0x4009ad>, <DisassemblerInsn "je" for 0x4009b2>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "sub" for 0x4008c4>, <DisassemblerInsn "je" for 0x4008c9>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008cf>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40095b>, <DisassemblerInsn "jmp" for 0x400963>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009db>, <DisassemblerInsn "call" for 0x4009e0>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a59>, <DisassemblerInsn "call" for 0x400a5e>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "jmp" for 0x4009fc>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008ad>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "cmp" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "je" for 0x4007c1>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40093c>, <DisassemblerInsn "je" for 0x400941>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x400998>, <DisassemblerInsn "call" for 0x40099d>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d1>, <DisassemblerInsn "sub" for 0x4008d5>, <DisassemblerInsn "je" for 0x4008da>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "sub" for 0x4008b3>, <DisassemblerInsn "je" for 0x4008b8>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401310>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401322>, <DisassemblerInsn "mov" for 0x401327>, <DisassemblerInsn "mov" for 0x40132c>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "mov" for 0x401334>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "call" for 0x40133d>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "ror" for 0x400850>, <DisassemblerInsn "ror" for 0x400854>, <DisassemblerInsn "ror" for 0x400857>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400863>, <DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "sub" for 0x40086f>, <DisassemblerInsn "je" for 0x400874>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x400800>, <DisassemblerInsn "call" for 0x400805>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a77>, <DisassemblerInsn "mov" for 0x400a7c>, <DisassemblerInsn "jmp" for 0x400a83>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad3>, <DisassemblerInsn "add" for 0x400ad7>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "mov" for 0x400add>, <DisassemblerInsn "xor" for 0x400adf>, <DisassemblerInsn "call" for 0x400ae1>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4007a5>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "jge" for 0x4007b0>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "call" for 0x400937>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "cmp" for 0x40083f>, <DisassemblerInsn "je" for 0x400842>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0e>, <DisassemblerInsn "add" for 0x400b12>, <DisassemblerInsn "ret" for 0x400b16>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a39>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "mov" for 0x400a46>, <DisassemblerInsn "mov" for 0x400a4e>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jmp" for 0x400a57>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ac4>, <DisassemblerInsn "mov" for 0x400ac8>, <DisassemblerInsn "jmp" for 0x400acc>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008be>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e2>, <DisassemblerInsn "sub" for 0x4008e6>, <DisassemblerInsn "je" for 0x4008eb>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c0>, <DisassemblerInsn "mov" for 0x4011c4>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "cmp" for 0x4011ce>, <DisassemblerInsn "cmove" for 0x4011d1>, <DisassemblerInsn "mov" for 0x4011d4>, <DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "call" for 0x4009f3>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40090f>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c77>, <DisassemblerInsn "mov" for 0x400c7c>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "mov" for 0x400c8d>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca0>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400cb0>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd5>, <DisassemblerInsn "cmp" for 0x400cdc>, <DisassemblerInsn "je" for 0x400ce1>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009cc>, <DisassemblerInsn "jmp" for 0x4009d4>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "call" for 0x40096d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c3>, <DisassemblerInsn "cmp" for 0x4007c8>, <DisassemblerInsn "setne" for 0x4007cc>, <DisassemblerInsn "xor" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "cmp" for 0x400aa1>, <DisassemblerInsn "jge" for 0x400aa6>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "mov" for 0x401360>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x401368>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "mov" for 0x401374>, <DisassemblerInsn "add" for 0x401379>, <DisassemblerInsn "ret" for 0x40137d>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "add" for 0x4011ee>, <DisassemblerInsn "ret" for 0x4011f5>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae6>, <DisassemblerInsn "add" for 0x400aea>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "jmp" for 0x400af1>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e5>, <DisassemblerInsn "jmp" for 0x4009e9>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "mov" for 0x4012d4>, <DisassemblerInsn "mov" for 0x4012d9>, <DisassemblerInsn "mov" for 0x4012dc>, <DisassemblerInsn "mov" for 0x4012e1>, <DisassemblerInsn "mov" for 0x4012e9>, <DisassemblerInsn "mov" for 0x4012f1>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012fa>, <DisassemblerInsn "mov" for 0x4012ff>, <DisassemblerInsn "mov" for 0x401306>, <DisassemblerInsn "add" for 0x40130b>, <DisassemblerInsn "ret" for 0x40130f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40080a>, <DisassemblerInsn "mov" for 0x40080e>, <DisassemblerInsn "call" for 0x400813>]'}, {'block_Idx': 305, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jmp" for 0x400976>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0d>, <DisassemblerInsn "mov" for 0x400a12>, <DisassemblerInsn "mov" for 0x400a1a>, <DisassemblerInsn "mov" for 0x400a22>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "jmp" for 0x400a2b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40089c>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "call" for 0x400a98>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "jmp" for 0x400a91>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087c>, <DisassemblerInsn "sub" for 0x400880>, <DisassemblerInsn "je" for 0x400885>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400823>, <DisassemblerInsn "seta" for 0x40082b>, <DisassemblerInsn "and" for 0x40082e>, <DisassemblerInsn "movzx" for 0x400830>, <DisassemblerInsn "mov" for 0x400833>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "cmp" for 0x40083f>, <DisassemblerInsn "je" for 0x400842>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "sub" for 0x40086f>, <DisassemblerInsn "je" for 0x400874>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f3>, <DisassemblerInsn "sub" for 0x4008f7>, <DisassemblerInsn "je" for 0x4008fc>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b20>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2e>, <DisassemblerInsn "mov" for 0x400b32>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3c>, <DisassemblerInsn "mov" for 0x400b40>, <DisassemblerInsn "mov" for 0x400b45>, <DisassemblerInsn "cmp" for 0x400b4a>, <DisassemblerInsn "je" for 0x400b4d>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "lea" for 0x4009be>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "call" for 0x4009c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "call" for 0x4007ef>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400818>, <DisassemblerInsn "cmp" for 0x40081c>, <DisassemblerInsn "jne" for 0x400821>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4009a2>]'}, {'block_Idx': 297, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5e>, <DisassemblerInsn "add" for 0x400c63>, <DisassemblerInsn "ret" for 0x400c67>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b06>, <DisassemblerInsn "mov" for 0x400b0e>, <DisassemblerInsn "add" for 0x400b12>, <DisassemblerInsn "ret" for 0x400b16>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "mov" for 0x400ab1>, <DisassemblerInsn "lea" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "call" for 0x400abf>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400af6>, <DisassemblerInsn "xor" for 0x400afb>, <DisassemblerInsn "mov" for 0x400afd>, <DisassemblerInsn "xor" for 0x400aff>, <DisassemblerInsn "call" for 0x400b01>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "sub" for 0x400915>, <DisassemblerInsn "je" for 0x40091a>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401253>, <DisassemblerInsn "mov" for 0x401255>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "mov" for 0x40125d>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "test" for 0x4007e1>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400902>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a63>, <DisassemblerInsn "jmp" for 0x400a67>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089e>, <DisassemblerInsn "sub" for 0x4008a2>, <DisassemblerInsn "je" for 0x4008a7>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40088b>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40092d>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40091c>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "sub" for 0x400908>, <DisassemblerInsn "je" for 0x40090d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a6e>, <DisassemblerInsn "jmp" for 0x400a75>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "cmp" for 0x400989>, <DisassemblerInsn "jne" for 0x400991>]'}], 'cfg_block_detailed_info': [{'block_Idx': 52, 'blockInsts': ['<jmp~~0x4009db>']}, {'block_Idx': 5, 'blockInsts': ['<jmp~~0x400af6>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xb1d]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~dword ptr [rsp + 0x40], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x4007dd>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4008f3>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4008e2>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40087c>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<and~~eax, 0xffff>', '<cmp~~eax, 0x5450>', '<je~~0x4009d9>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54514970>', '<je~~0x400a85>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x4008d1>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 179, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b0e>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400c70>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401280>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4008af>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x1c], 0>', '<mov~~byte ptr [rsp + 0xe], al>', '<je~~0x4007d5>']}, {'block_Idx': 155, 'blockInsts': ['<cmp~~eax, 0x53434145>', '<je~~0x400968>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 4>', '<call~~0x500020>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6468564d>', '<je~~0x400a93>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x5447566b>', '<je~~0x400a2d>']}, {'block_Idx': 86, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rdi, qword ptr [rsp]>', '<mov~~esi, 0x10>', '<call~~0x500020>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~dword ptr [rsp + 0x40], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x4009ee>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7f>', '<jmp~~0x400aa1>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~eax, dword ptr [rsp + 0x40]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 75, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 0x2c], 5>', '<mov~~byte ptr [rsp + 0xf], al>', '<jge~~0x4007dd>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400867>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7e>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400aa1>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x400b0e>']}, {'block_Idx': 57, 'blockInsts': ['<jmp~~0x4008c0>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6843504d>', '<je~~0x400a69>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x58]>', '<mov~~ecx, 0x5622>', '<mov~~eax, 0xbb80>', '<cmp~~edx, 3>', '<cmove~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401200>']}, {'block_Idx': 143, 'blockInsts': ['<jmp~~0x400911>']}, {'block_Idx': 47, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 66, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~dword ptr [rsp + 0x74], 1>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~dword ptr [rsp + 0x5c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x58], 0xffffffff>', '<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x28], 2>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x2c], 0xffffffff>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~dword ptr [rax + 0x30], 1>', '<cmp~~dword ptr [rsp + 0x74], 0>', '<je~~0x401046>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0>', '<jmp~~0x400b0e>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400b20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 4], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 0xe], al>', '<mov~~al, byte ptr [rsp + 0xe]>', '<mov~~byte ptr [rsp + 0xf], al>', '<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~dword ptr [rsp + 0x24], 0>', '<jge~~0x400ace>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 8], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 4], 0x5e>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 0x84], 1>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4007a5>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 4], 0x26>', '<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 305, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x7c>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 8], rcx>', '<jmp~~0x400aa1>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x40089e>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x401310>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 0x80>', '<jmp~~0x400aa1>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x4443546d>', '<je~~0x400a59>']}, {'block_Idx': 16, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x40], 0xfffff>', '<seta~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400867>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<sub~~eax, 0x44414553>', '<je~~0x4009ee>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6849564d>', '<je~~0x400a01>']}, {'block_Idx': 169, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b5f>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xac3]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x40], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jne~~0x40083a>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x4009db>']}, {'block_Idx': 297, 'blockInsts': ['<mov~~eax, 1>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 1>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9e2]>', '<mov~~al, 0>', '<call~~0x500040>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<xor~~eax, eax>', '<mov~~esi, eax>', '<xor~~edx, edx>', '<call~~0x500030>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x6c484353>', '<je~~0x40097b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x1c], 0x11017>', '<mov~~eax, 1>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xf]>', '<test~~al, 1>', '<jne~~0x4007ea>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x400904>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400aa1>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x54475170>', '<je~~0x400a77>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x40088d>']}, {'block_Idx': 171, 'blockInsts': ['<jmp~~0x400aa1>']}, {'block_Idx': 156, 'blockInsts': ['<jmp~~0x40091e>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<sub~~eax, 0x684e5331>', '<je~~0x400932>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 4], 2>', '<jmp~~0x400aa1>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], eax>', '<cmp~~dword ptr [rsp + 0x44], 0x52545347>', '<jne~~0x4009a4>']}], 'cfg_edge_info': [(58, 65), (42, 48), (154, 54), (23, 25), (37, 42), (68, 75), (47, 55), (64, 71), (81, 87), (3, 6), (133, 143), (162, 179), (75, 1), (142, 155), (48, 56), (20, 49), (15, 16), (171, 47), (18, 21), (65, 47), (46, 52), (40, 45), (80, 154), (148, 154), (107, 119), (5, 7), (69, 74), (0, 2), (87, 98), (1, 3), (155, 162), (16, 19), (52, 60), (19, 20), (70, 47), (76, 81), (161, 305), (71, 76), (33, 37), (64, 70), (47, 54), (120, 133), (3, 5), (154, 55), (60, 66), (60, 130), (23, 26), (297, 305), (2, 6), (113, 130), (7, 11), (117, 130), (4, 6), (67, 74), (75, 2), (49, 47), (17, 18), (25, 65), (119, 47), (150, 156), (143, 150), (37, 41), (6, 10), (98, 47), (133, 142), (87, 99), (1, 4), (56, 47), (76, 80), (54, 68), (32, 40), (18, 20), (55, 69), (43, 49), (150, 32), (80, 86), (161, 169), (2, 5), (48, 57), (19, 21), (179, 74), (15, 17), (130, 47), (4, 5), (59, 60), (116, 130), (0, 1), (46, 53), (40, 46), (155, 161), (16, 18), (53, 67), (41, 47), (21, 23), (99, 107), (107, 120), (17, 19), (305, 47), (10, 13), (57, 64), (13, 15)], 'cdg_edge_info': [(3, 13), (154, 54), (133, 150), (0, 5), (46, 130), (47, 55), (64, 71), (3, 6), (3, 15), (75, 1), (48, 47), (0, 7), (48, 56), (154, 74), (15, 16), (47, 75), (46, 52), (23, 47), (18, 23), (47, 68), (107, 119), (3, 10), (0, 2), (75, 5), (154, 69), (40, 47), (87, 98), (150, 47), (1, 3), (155, 162), (87, 107), (16, 19), (46, 47), (75, 7), (150, 40), (107, 133), (1, 5), (2, 13), (76, 81), (47, 54), (64, 70), (76, 154), (19, 47), (3, 5), (154, 55), (4, 13), (87, 47), (1, 7), (2, 6), (2, 15), (19, 49), (23, 65), (3, 7), (4, 6), (75, 2), (4, 15), (75, 11), (17, 18), (64, 47), (0, 11), (37, 48), (1, 11), (2, 10), (46, 74), (76, 87), (3, 11), (4, 10), (87, 99), (1, 4), (46, 67), (48, 64), (76, 80), (40, 60), (155, 47), (155, 74), (47, 74), (18, 47), (46, 60), (48, 57), (154, 75), (15, 17), (155, 305), (0, 1), (46, 53), (18, 49), (133, 155), (40, 46), (154, 68), (19, 23), (155, 161), (37, 47), (155, 179), (16, 18), (107, 47), (64, 76), (47, 69), (17, 19), (40, 130)], 'ddg_edge_info': [(19, 64), (154, 54), (0, 60), (68, 75), (13, 17), (130, 154), (54, 6), (13, 154), (19, 48), (4, 130), (16, 40), (10, 54), (0, 53), (65, 54), (16, 49), (162, 179), (19, 130), (0, 7), (75, 10), (49, 55), (0, 16), (16, 305), (0, 80), (13, 19), (15, 16), (13, 37), (305, 154), (0, 55), (0, 119), (13, 76), (16, 17), (54, 1), (19, 107), (16, 154), (69, 74), (154, 69), (130, 69), (4, 155), (13, 133), (16, 65), (13, 23), (13, 87), (19, 155), (19, 54), (0, 68), (150, 40), (13, 16), (13, 80), (305, 69), (10, 154), (65, 154), (0, 98), (0, 162), (154, 55), (130, 55), (4, 13), (13, 55), (49, 54), (13, 119), (13, 64), (19, 13), (4, 40), (7, 11), (68, 15), (19, 150), (19, 40), (54, 7), (19, 49), (119, 17), (4, 305), (0, 54), (67, 74), (4, 15), (19, 305), (13, 48), (15, 54), (19, 15), (305, 55), (0, 75), (55, 74), (75, 4), (0, 4), (10, 69), (4, 154), (65, 69), (0, 13), (19, 154), (6, 10), (54, 75), (4, 65), (13, 98), (4, 10), (13, 107), (19, 65), (19, 10), (1, 4), (0, 6), (0, 70), (0, 15), (16, 130), (19, 37), (54, 4), (54, 68), (4, 49), (0, 161), (55, 69), (49, 154), (130, 54), (10, 55), (13, 54), (65, 55), (19, 76), (0, 17), (179, 74), (53, 74), (13, 56), (0, 56), (0, 1), (133, 155), (19, 133), (40, 46), (75, 13), (305, 54), (19, 23), (11, 74), (19, 87), (0, 19), (0, 10), (15, 19), (53, 67), (13, 150), (16, 155), (56, 17), (17, 19), (162, 74), (10, 13), (75, 15), (13, 70), (49, 69), (13, 15)]}], 'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "sub" for 0x400470>, <DisassemblerInsn "je" for 0x400475>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d1>, <DisassemblerInsn "call" for 0x4006d6>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004bb>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "sub" for 0x40042c>, <DisassemblerInsn "je" for 0x400431>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f4>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030c>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x400336>, <DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "sub" for 0x40041b>, <DisassemblerInsn "je" for 0x400420>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "sub" for 0x4003c6>, <DisassemblerInsn "je" for 0x4003cb>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "sub" for 0x4004df>, <DisassemblerInsn "je" for 0x4004e4>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "cmp" for 0x40052e>, <DisassemblerInsn "je" for 0x400535>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400524>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "sub" for 0x400492>, <DisassemblerInsn "je" for 0x400497>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400553>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "call" for 0x40055d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "mov" for 0x40035b>, <DisassemblerInsn "cmp" for 0x400360>, <DisassemblerInsn "je" for 0x400363>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "sub" for 0x400625>, <DisassemblerInsn "shl" for 0x400628>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "xor" for 0x40062f>, <DisassemblerInsn "div" for 0x400631>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400636>, <DisassemblerInsn "add" for 0x40063b>, <DisassemblerInsn "mov" for 0x40063e>, <DisassemblerInsn "jmp" for 0x400641>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x400748>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "call" for 0x400753>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ae>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "sub" for 0x4004a3>, <DisassemblerInsn "je" for 0x4004a8>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40046a>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e8>, <DisassemblerInsn "jmp" for 0x4006f0>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400404>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a4>, <DisassemblerInsn "je" for 0x4003a9>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ca>, <DisassemblerInsn "sub" for 0x4004ce>, <DisassemblerInsn "je" for 0x4004d3>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "sub" for 0x40044e>, <DisassemblerInsn "je" for 0x400453>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "sub" for 0x4003f9>, <DisassemblerInsn "je" for 0x4003fe>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400437>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a2>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "movsxd" for 0x4005bb>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c4>, <DisassemblerInsn "imul" for 0x4005c7>, <DisassemblerInsn "mov" for 0x4005cb>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "movsxd" for 0x4005d3>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "cqo" for 0x4005e3>, <DisassemblerInsn "idiv" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005e8>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "sub" for 0x4005fe>, <DisassemblerInsn "je" for 0x400603>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400365>, <DisassemblerInsn "call" for 0x40036a>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "jge" for 0x40058b>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "call" for 0x4006b5>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004d9>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40047b>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "jmp" for 0x400718>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006db>, <DisassemblerInsn "sub" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "jmp" for 0x4006e6>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400605>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c0>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "sub" for 0x40043d>, <DisassemblerInsn "je" for 0x400442>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "cmp" for 0x400709>, <DisassemblerInsn "jge" for 0x40070e>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "sub" for 0x4003d7>, <DisassemblerInsn "je" for 0x4003dc>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "cmp" for 0x40053c>, <DisassemblerInsn "jne" for 0x400543>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "sub" for 0x40060b>, <DisassemblerInsn "je" for 0x400610>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400660>, <DisassemblerInsn "imul" for 0x400665>, <DisassemblerInsn "xor" for 0x400669>, <DisassemblerInsn "div" for 0x40066b>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "add" for 0x400674>, <DisassemblerInsn "mov" for 0x400677>, <DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400514>, <DisassemblerInsn "mov" for 0x400519>, <DisassemblerInsn "mov" for 0x40051d>, <DisassemblerInsn "call" for 0x40051f>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "mov" for 0x400727>, <DisassemblerInsn "mov" for 0x40072a>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "or" for 0x400733>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "jmp" for 0x400741>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004bd>, <DisassemblerInsn "sub" for 0x4004c1>, <DisassemblerInsn "je" for 0x4004c6>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400459>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400448>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003af>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40039e>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b4>, <DisassemblerInsn "je" for 0x4004b9>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "sub" for 0x40045f>, <DisassemblerInsn "je" for 0x400464>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "sub" for 0x40040a>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400687>, <DisassemblerInsn "mov" for 0x40068f>, <DisassemblerInsn "jmp" for 0x400697>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004ea>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "sub" for 0x400618>, <DisassemblerInsn "je" for 0x40061d>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f3>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40056d>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003d1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "sub" for 0x4003e8>, <DisassemblerInsn "je" for 0x4003ed>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "cmp" for 0x40050e>, <DisassemblerInsn "jne" for 0x400512>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033a>, <DisassemblerInsn "setne" for 0x40033f>, <DisassemblerInsn "xor" for 0x400342>, <DisassemblerInsn "test" for 0x400344>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006f0>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "call" for 0x40057d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "add" for 0x400387>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "test" for 0x400396>, <DisassemblerInsn "je" for 0x400398>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "sub" for 0x4003b5>, <DisassemblerInsn "je" for 0x4003ba>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "call" for 0x400352>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "sub" for 0x400566>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "jmp" for 0x40056d>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fe>, <DisassemblerInsn "sub" for 0x400502>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "cmp" for 0x40050e>, <DisassemblerInsn "jne" for 0x400512>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400415>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fc>, <DisassemblerInsn "call" for 0x400700>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "call" for 0x4004f9>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "add" for 0x400769>, <DisassemblerInsn "ret" for 0x40076d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400758>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "jmp" for 0x4006c5>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "sub" for 0x400481>, <DisassemblerInsn "je" for 0x400486>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40061f>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "jmp" for 0x400595>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049d>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004c8>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "add" for 0x400769>, <DisassemblerInsn "ret" for 0x40076d>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400426>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400545>, <DisassemblerInsn "call" for 0x40054a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "jmp" for 0x400373>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400647>, <DisassemblerInsn "add" for 0x40064c>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "jmp" for 0x400652>]'}], 'cfg_block_detailed_info': [{'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x654e5331>', '<je~~0x400687>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 93, 'blockInsts': ['<jmp~~0x4004bd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475666>', '<je~~0x4006a4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~dword ptr [rsp + 0x2c], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x1c], 0>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54475170>', '<je~~0x40069c>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x444e4553>', '<je~~0x400687>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x73514754>', '<je~~0x40069c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x10012>', '<je~~0x400545>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400758>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6843504d>', '<je~~0x4006e8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 8>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400375>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<shl~~eax, 1>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~edx, edx>', '<div~~dword ptr [rcx + 0x30]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x40067a>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4004b0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6849564d>', '<je~~0x40069c>']}, {'block_Idx': 82, 'blockInsts': ['<jmp~~0x40046c>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], 1>', '<jmp~~0x4006f2>']}, {'block_Idx': 62, 'blockInsts': ['<jmp~~0x400406>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x43444e53>', '<je~~0x400509>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c454353>', '<je~~0x400687>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x54514970>', '<je~~0x4006e8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454453>', '<je~~0x400509>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400439>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rax], 0x15f90>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rdx, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rax]>', '<imul~~rcx, rdx>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rax + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rax]>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x1c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<sub~~eax, 0x10012>', '<je~~0x400643>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x400614>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40059a>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500030>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4004db>']}, {'block_Idx': 84, 'blockInsts': ['<jmp~~0x40047d>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400765>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x400607>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x5447566b>', '<je~~0x40069c>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<cmp~~dword ptr [rsp + 0x2c], 0>', '<jge~~0x40071a>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4630564d>', '<je~~0x4006f0>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0x15001>', '<jne~~0x40056d>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x1100a>', '<je~~0x400621>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<imul~~ecx, dword ptr [rdx + 0x30]>', '<xor~~edx, edx>', '<div~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~esi, eax>', '<call~~0x500020>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dword ptr [rax + 0x1c], ecx>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<or~~ecx, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6c444353>', '<je~~0x400509>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x40045b>']}, {'block_Idx': 78, 'blockInsts': ['<jmp~~0x40044a>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4003b1>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4003a0>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x684e5331>', '<je~~0x4004ef>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x644e5331>', '<je~~0x400509>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4e454553>', '<je~~0x400687>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], 0xfffffffb>', '<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x40075d>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x400743>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<sub~~eax, 0x15001>', '<je~~0x400643>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x40048e>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x4003f5>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x40056f>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4003d3>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x400687>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4b30564d>', '<je~~0x4006e8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x400529>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~dword ptr [rsp + 0x28], 1>', '<jmp~~0x400758>']}, {'block_Idx': 17, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<test~~al, 1>', '<jne~~0x40034d>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x4006f2>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<test~~eax, eax>', '<je~~0x400687>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x4443546d>', '<je~~0x4006c7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0xc>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x40056f>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<sub~~eax, 0x20>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x1c], 0>', '<jne~~0x400529>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~edx, dword ptr [rsp + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~esi, 0x20>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 45, 'blockInsts': ['<jmp~~0x4003e4>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40033a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4006f2>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<sub~~eax, 0x6649564d>', '<je~~0x4006a4>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x400654>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jmp~~0x400765>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40049f>']}, {'block_Idx': 97, 'blockInsts': ['<jmp~~0x4004ca>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400428>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400383>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~ecx, dword ptr [rax + 0x24]>', '<mov~~dword ptr [rax + 0x24], ecx>', '<jmp~~0x40067a>']}], 'cfg_edge_info': [(24, 33), (99, 100), (52, 58), (59, 18), (14, 13), (22, 26), (83, 12), (48, 54), (74, 73), (11, 14), (32, 12), (100, 101), (98, 12), (87, 55), (72, 75), (54, 15), (61, 63), (46, 50), (2, 4), (49, 55), (18, 21), (100, 69), (51, 57), (73, 39), (40, 45), (80, 81), (91, 93), (68, 70), (85, 86), (81, 18), (30, 34), (64, 66), (81, 82), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (65, 67), (96, 21), (53, 50), (93, 95), (16, 19), (47, 52), (42, 47), (82, 83), (17, 2), (12, 15), (14, 12), (20, 28), (102, 15), (67, 15), (78, 79), (48, 53), (66, 68), (83, 84), (1, 5), (92, 96), (13, 16), (62, 64), (79, 80), (72, 74), (25, 24), (58, 60), (60, 57), (22, 27), (95, 97), (89, 90), (79, 55), (19, 22), (57, 15), (7, 11), (63, 65), (56, 59), (90, 91), (35, 39), (86, 87), (40, 44), (49, 56), (39, 48), (10, 12), (36, 40), (32, 36), (5, 6), (21, 24), (69, 73), (70, 72), (87, 88), (97, 98), (75, 77), (96, 20), (63, 51), (47, 51), (88, 89), (6, 10), (89, 69), (84, 85), (55, 39), (85, 74), (27, 32), (41, 34), (18, 20), (44, 39), (28, 15), (91, 92), (68, 69), (45, 49), (15, 17), (58, 61), (33, 41), (26, 35), (101, 102), (0, 1), (34, 42), (16, 18), (95, 18), (64, 12), (42, 46), (25, 30), (98, 99), (59, 62), (17, 1), (10, 13)], 'cdg_edge_info': [(72, 73), (81, 21), (18, 17), (59, 64), (25, 41), (87, 89), (59, 18), (5, 10), (22, 26), (83, 12), (68, 48), (0, 5), (22, 35), (48, 54), (85, 73), (83, 85), (100, 101), (32, 12), (98, 12), (96, 24), (87, 55), (96, 33), (79, 81), (72, 75), (16, 22), (96, 42), (42, 50), (85, 48), (81, 41), (17, 5), (14, 15), (100, 39), (49, 55), (96, 17), (87, 48), (59, 41), (72, 77), (16, 24), (81, 34), (16, 33), (100, 69), (16, 42), (49, 39), (14, 17), (5, 14), (49, 48), (22, 39), (91, 93), (77, 39), (68, 70), (85, 86), (77, 48), (59, 34), (81, 18), (64, 66), (48, 15), (79, 39), (77, 69), (5, 7), (77, 78), (21, 25), (0, 2), (5, 16), (22, 32), (21, 34), (49, 59), (68, 72), (96, 21), (10, 15), (64, 68), (48, 17), (98, 100), (42, 47), (17, 2), (100, 73), (14, 12), (48, 53), (40, 49), (83, 84), (10, 17), (79, 80), (100, 48), (72, 74), (16, 21), (25, 24), (96, 41), (64, 15), (25, 33), (58, 60), (17, 4), (95, 24), (77, 73), (5, 11), (95, 33), (95, 42), (89, 90), (79, 55), (42, 15), (96, 34), (22, 48), (79, 48), (59, 24), (42, 17), (98, 15), (10, 12), (59, 33), (91, 95), (59, 42), (63, 67), (47, 58), (100, 15), (5, 6), (87, 88), (21, 42), (89, 39), (0, 4), (96, 20), (98, 17), (63, 51), (47, 51), (95, 21), (89, 69), (77, 79), (85, 74), (10, 16), (100, 102), (32, 40), (81, 24), (18, 20), (68, 39), (64, 17), (81, 33), (81, 42), (72, 39), (95, 41), (16, 41), (59, 21), (72, 48), (96, 15), (83, 15), (91, 92), (68, 69), (32, 15), (85, 39), (89, 73), (16, 34), (95, 34), (95, 98), (89, 91), (87, 39), (0, 1), (48, 50), (83, 17), (85, 87), (32, 17), (89, 48), (16, 18), (95, 18), (18, 15), (81, 83), (64, 12), (42, 46), (98, 99), (58, 63), (17, 1), (100, 17), (40, 39), (40, 48), (91, 96), (68, 73)], 'ddg_edge_info': [(12, 4), (64, 5), (7, 72), (7, 17), (34, 1), (24, 33), (7, 81), (7, 26), (6, 91), (26, 39), (0, 51), (96, 67), (5, 10), (0, 60), (0, 5), (14, 22), (92, 24), (74, 73), (11, 14), (14, 95), (51, 25), (14, 40), (7, 1), (14, 49), (41, 42), (6, 20), (7, 74), (34, 58), (39, 17), (7, 83), (34, 67), (7, 92), (96, 60), (17, 5), (42, 4), (0, 53), (83, 5), (14, 79), (0, 7), (32, 5), (39, 53), (98, 5), (60, 21), (87, 48), (6, 59), (6, 4), (6, 68), (4, 50), (7, 12), (6, 77), (34, 60), (7, 21), (7, 85), (54, 17), (0, 46), (14, 72), (73, 39), (6, 34), (5, 14), (60, 5), (6, 98), (14, 81), (49, 48), (14, 35), (60, 96), (55, 54), (7, 69), (7, 14), (0, 39), (7, 87), (102, 4), (20, 17), (69, 74), (92, 21), (6, 100), (41, 67), (14, 83), (60, 25), (96, 21), (53, 50), (34, 46), (20, 1), (7, 16), (17, 48), (54, 67), (0, 96), (54, 21), (14, 67), (17, 11), (41, 60), (48, 53), (14, 85), (6, 102), (1, 5), (92, 96), (6, 1), (7, 55), (7, 64), (0, 25), (96, 41), (47, 54), (54, 5), (0, 34), (25, 33), (47, 63), (14, 60), (25, 42), (14, 5), (6, 22), (12, 17), (67, 17), (5, 11), (6, 95), (6, 40), (92, 25), (14, 87), (7, 39), (14, 32), (6, 49), (14, 96), (73, 48), (1, 7), (96, 25), (34, 50), (7, 11), (96, 34), (20, 5), (34, 4), (102, 1), (6, 79), (6, 24), (54, 25), (0, 54), (35, 39), (14, 16), (7, 32), (35, 48), (33, 51), (7, 96), (79, 48), (14, 89), (39, 48), (7, 59), (7, 4), (0, 20), (7, 68), (47, 58), (6, 72), (6, 17), (0, 102), (6, 81), (14, 64), (6, 26), (0, 47), (7, 25), (14, 73), (7, 89), (67, 21), (92, 20), (21, 33), (7, 34), (7, 98), (0, 4), (96, 20), (39, 50), (10, 14), (39, 4), (14, 39), (6, 10), (34, 63), (6, 74), (67, 60), (67, 5), (6, 83), (6, 92), (7, 91), (7, 100), (102, 17), (67, 96), (54, 96), (0, 6), (34, 47), (92, 34), (0, 24), (14, 41), (0, 33), (41, 34), (6, 12), (14, 59), (6, 21), (7, 20), (6, 85), (14, 68), (14, 77), (6, 39), (67, 25), (7, 102), (1, 6), (39, 54), (0, 17), (14, 34), (17, 33), (14, 98), (0, 26), (17, 42), (20, 4), (74, 39), (6, 69), (7, 77), (33, 41), (7, 22), (26, 35), (6, 32), (60, 67), (6, 87), (6, 96), (7, 95), (7, 40), (0, 1), (7, 49), (34, 42), (0, 74), (48, 4), (39, 1), (51, 21), (34, 51), (14, 100), (14, 91), (0, 92), (6, 16), (69, 54), (33, 34), (6, 25), (7, 79), (42, 46), (6, 89), (47, 5), (7, 24), (102, 5), (34, 17), (17, 10), (51, 5), (14, 20), (0, 67), (40, 48), (6, 55), (0, 21), (14, 102), (6, 64), (51, 96)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 179, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 180, 'instruction': 'movl\t$0x80, 4(%rax)'}, {'instIndex': 181, 'instruction': 'jmp\t.LBB3_28'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 183, 'instruction': 'callq\tprocess_video_header_vp6'}, {'instIndex': 184, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 229, 'instruction': 'movl\t$1, 0x1c(%rsp)'}, {'instIndex': 230, 'instruction': 'movq\t0x30(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 232, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 233, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 234, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 235, 'instruction': 'addl\t$8, %eax'}, {'instIndex': 236, 'instruction': 'movl\t%eax, 0x20(%rsp)'}, {'instIndex': 237, 'instruction': 'jmp\t.LBB2_26'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 444 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 359, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 360, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 361, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 365, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 366, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 367, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 372, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.o---before
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 331 nodes and 601 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 444 instructions in binary file.
[4202263, 4202274, 4202307]
The execution time of patched subCFG information extraction via angr: 0:00:03.450588
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be6>, <DisassemblerInsn "mov" for 0x401bea>, <DisassemblerInsn "sub" for 0x401bf1>, <DisassemblerInsn "mov" for 0x401bf7>, <DisassemblerInsn "je" for 0x401bfb>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c17>, <DisassemblerInsn "sub" for 0x401c1e>, <DisassemblerInsn "je" for 0x401c23>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "sub" for 0x401b3f>, <DisassemblerInsn "je" for 0x401b44>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "mov" for 0x401b50>, <DisassemblerInsn "sub" for 0x401b57>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "je" for 0x401b61>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "jmp" for 0x401f53>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "jmp" for 0x401f20>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c8c>, <DisassemblerInsn "sub" for 0x401c93>, <DisassemblerInsn "je" for 0x401c98>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b69>, <DisassemblerInsn "sub" for 0x401b70>, <DisassemblerInsn "je" for 0x401b75>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "mov" for 0x401fac>, <DisassemblerInsn "call" for 0x401fb0>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f2e>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "call" for 0x401f3e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6649564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401f22>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6849564d>', '<je~~0x401f17>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54475170>', '<je~~0x401f17>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x54475666>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401f22>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401f94>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401f22>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x73514754>', '<je~~0x401f17>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x5447566b>', '<je~~0x401f17>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 4], eax>', '<call~~0x500050>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}], 'cfg_edge_info': [(58, 27), (56, 58), (57, 56), (82, 54), (68, 56), (54, 56), (53, 54), (60, 54), (72, 54)]}]}
{'ea_read_packet': [4202263, 4202274, 4202307]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O1/electronicarts.o---before
The extraction of function: ea_read_packet
[4202263, 4202274, 4202307]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 100 nodes and 147 edges in CFGEmulated.
It has 98 nodes and 185 edges in CDG.
It has 1883 nodes and 2378 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202263, 4202274, 4202307]
{4201216, 4201473, 4200833, 4201475, 4202369, 4202629, 4201610, 4201738, 4201612, 4202122, 4201359, 4202512, 4201361, 4202388, 4201493, 4202263, 4201495, 4201630, 4201759, 4200608, 4202014, 4202274, 4201635, 4201890, 4201513, 4202538, 4201515, 4201130, 4202027, 4201390, 4201907, 4202421, 4201270, 4201653, 4201272, 4201529, 4200890, 4201531, 4202043, 4202176, 4201025, 4202307, 4202438, 4201799, 4201290, 4201292, 4202573, 4201167, 4200912, 4201556, 4202325, 4201812, 4201692, 4200925, 4201054, 4201187, 4201444, 4200931, 4201446, 4201319, 4201321, 4201705, 4201834, 4202348, 4200944, 4201074, 4200948, 4201339, 4201341}
[29, 95, 34, 18, 73, 97, 70, 88, 24, 59, 66, 44, 77, 54, 71, 20, 79, 64, 47, 86, 60, 82, 67, 42, 27, 7, 8, 78, 65, 37, 74, 13, 61, 75, 96, 48, 76, 83, 56, 2, 92, 36, 84, 81, 87, 41, 85, 49, 68, 53, 3, 50, 39, 62, 10, 12, 57, 0, 94, 11, 25, 90, 14, 80, 55, 26, 35, 9, 63, 32, 4, 91, 93, 16, 72, 99, 51, 23, 17, 19, 52, 31, 58, 45, 33, 22]
The execution time of patched slicing information extraction via angr: 0:00:07.004309
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a72>, <DisassemblerInsn "mov" for 0x401a79>, <DisassemblerInsn "mov" for 0x401a7d>, <DisassemblerInsn "mov" for 0x401a81>, <DisassemblerInsn "mov" for 0x401a85>, <DisassemblerInsn "sub" for 0x401a8c>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "mov" for 0x401a9e>, <DisassemblerInsn "je" for 0x401aa2>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c8c>, <DisassemblerInsn "sub" for 0x401c93>, <DisassemblerInsn "je" for 0x401c98>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d54>, <DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "mov" for 0x401d60>, <DisassemblerInsn "call" for 0x401d65>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "mov" for 0x401d16>, <DisassemblerInsn "mov" for 0x401d18>, <DisassemblerInsn "call" for 0x401d1a>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b7b>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x40201c>, <DisassemblerInsn "mov" for 0x40201e>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "call" for 0x402025>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b67>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c39>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a70>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e29>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec0>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "mov" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecd>, <DisassemblerInsn "mov" for 0x401ed1>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "mov" for 0x401ee1>, <DisassemblerInsn "imul" for 0x401ee3>, <DisassemblerInsn "xor" for 0x401ee6>, <DisassemblerInsn "div" for 0x401ee8>, <DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "mov" for 0x401ef2>, <DisassemblerInsn "mov" for 0x401ef4>, <DisassemblerInsn "add" for 0x401ef8>, <DisassemblerInsn "mov" for 0x401efb>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "mov" for 0x401f0e>, <DisassemblerInsn "jmp" for 0x401f12>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fb5>, <DisassemblerInsn "cmp" for 0x401fb9>, <DisassemblerInsn "mov" for 0x401fbc>, <DisassemblerInsn "jl" for 0x401fc0>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401bac>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e1c>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4b>, <DisassemblerInsn "mov" for 0x401f4f>, <DisassemblerInsn "jmp" for 0x401f53>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5e>, <DisassemblerInsn "sub" for 0x401a65>, <DisassemblerInsn "je" for 0x401a6a>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401be4>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f17>, <DisassemblerInsn "mov" for 0x401f1c>, <DisassemblerInsn "jmp" for 0x401f20>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da2>, <DisassemblerInsn "cmp" for 0x401da6>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "jl" for 0x401dad>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c2b>, <DisassemblerInsn "sub" for 0x401c32>, <DisassemblerInsn "je" for 0x401c37>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b36>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c03>, <DisassemblerInsn "sub" for 0x401c0a>, <DisassemblerInsn "je" for 0x401c0f>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f2e>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "call" for 0x401f3e>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6e>, <DisassemblerInsn "add" for 0x401d72>, <DisassemblerInsn "mov" for 0x401d75>, <DisassemblerInsn "mov" for 0x401d79>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d91>, <DisassemblerInsn "mov" for 0x401d95>, <DisassemblerInsn "mov" for 0x401d99>, <DisassemblerInsn "call" for 0x401d9d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ce7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "mov" for 0x4019ff>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "add" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a11>, <DisassemblerInsn "mov" for 0x401a15>, <DisassemblerInsn "mov" for 0x401a1a>, <DisassemblerInsn "mov" for 0x401a1e>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "test" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a29>, <DisassemblerInsn "mov" for 0x401a2d>, <DisassemblerInsn "mov" for 0x401a31>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "je" for 0x401a39>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019dd>, <DisassemblerInsn "jmp" for 0x4019e1>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bae>, <DisassemblerInsn "mov" for 0x401bb5>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bc1>, <DisassemblerInsn "sub" for 0x401bc8>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd6>, <DisassemblerInsn "mov" for 0x401bda>, <DisassemblerInsn "je" for 0x401bde>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b4a>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aaa>, <DisassemblerInsn "mov" for 0x401aae>, <DisassemblerInsn "mov" for 0x401ab2>, <DisassemblerInsn "sub" for 0x401ab9>, <DisassemblerInsn "mov" for 0x401abf>, <DisassemblerInsn "mov" for 0x401ac3>, <DisassemblerInsn "je" for 0x401ac7>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b7d>, <DisassemblerInsn "sub" for 0x401b84>, <DisassemblerInsn "je" for 0x401b89>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401981>, <DisassemblerInsn "mov" for 0x401989>, <DisassemblerInsn "mov" for 0x40198d>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "mov" for 0x40199b>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a6>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "call" for 0x4019b5>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "sub" for 0x401e2f>, <DisassemblerInsn "je" for 0x401e34>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401b8f>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c9e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc6>, <DisassemblerInsn "mov" for 0x401fcd>, <DisassemblerInsn "mov" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "mov" for 0x401fdd>, <DisassemblerInsn "mov" for 0x401fe5>, <DisassemblerInsn "mov" for 0x401fed>, <DisassemblerInsn "mov" for 0x401ff0>, <DisassemblerInsn "mov" for 0x401ff3>, <DisassemblerInsn "or" for 0x401ff5>, <DisassemblerInsn "mov" for 0x401ff7>, <DisassemblerInsn "mov" for 0x401ff9>, <DisassemblerInsn "mov" for 0x401ffe>, <DisassemblerInsn "mov" for 0x402002>, <DisassemblerInsn "mov" for 0x402006>, <DisassemblerInsn "mov" for 0x40200a>, <DisassemblerInsn "jmp" for 0x40200e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b95>, <DisassemblerInsn "sub" for 0x401b9c>, <DisassemblerInsn "mov" for 0x401ba2>, <DisassemblerInsn "je" for 0x401ba6>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c15>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1e>, <DisassemblerInsn "sub" for 0x401e22>, <DisassemblerInsn "je" for 0x401e27>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ba>, <DisassemblerInsn "mov" for 0x4019bc>, <DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "cmp" for 0x4019cb>, <DisassemblerInsn "je" for 0x4019ce>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c52>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa8>, <DisassemblerInsn "mov" for 0x401fac>, <DisassemblerInsn "call" for 0x401fb0>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c17>, <DisassemblerInsn "sub" for 0x401c1e>, <DisassemblerInsn "je" for 0x401c23>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c01>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ca3>, <DisassemblerInsn "mov" for 0x401cab>, <DisassemblerInsn "call" for 0x401cb0>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401acd>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c29>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f81>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "mov" for 0x401f8a>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "jmp" for 0x401f92>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "mov" for 0x401b50>, <DisassemblerInsn "sub" for 0x401b57>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "je" for 0x401b61>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8a>, <DisassemblerInsn "mov" for 0x401e8e>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e96>, <DisassemblerInsn "mov" for 0x401e9e>, <DisassemblerInsn "add" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea6>, <DisassemblerInsn "mov" for 0x401eab>, <DisassemblerInsn "mov" for 0x401eaf>, <DisassemblerInsn "mov" for 0x401eb3>, <DisassemblerInsn "mov" for 0x401eb7>, <DisassemblerInsn "jmp" for 0x401ebb>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e3>, <DisassemblerInsn "call" for 0x4019eb>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ae1>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d91>, <DisassemblerInsn "mov" for 0x401d95>, <DisassemblerInsn "mov" for 0x401d99>, <DisassemblerInsn "call" for 0x401d9d>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "sub" for 0x401b3f>, <DisassemblerInsn "je" for 0x401b44>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a3f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402085>, <DisassemblerInsn "add" for 0x402089>, <DisassemblerInsn "ret" for 0x402090>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b07>, <DisassemblerInsn "mov" for 0x401b0b>, <DisassemblerInsn "mov" for 0x401b0f>, <DisassemblerInsn "mov" for 0x401b13>, <DisassemblerInsn "sub" for 0x401b1a>, <DisassemblerInsn "mov" for 0x401b20>, <DisassemblerInsn "mov" for 0x401b24>, <DisassemblerInsn "mov" for 0x401b28>, <DisassemblerInsn "mov" for 0x401b2c>, <DisassemblerInsn "je" for 0x401b30>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a7>, <DisassemblerInsn "mov" for 0x4018af>, <DisassemblerInsn "mov" for 0x4018b3>, <DisassemblerInsn "mov" for 0x4018bb>, <DisassemblerInsn "mov" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c7>, <DisassemblerInsn "add" for 0x4018ca>, <DisassemblerInsn "mov" for 0x4018ce>, <DisassemblerInsn "mov" for 0x4018d6>, <DisassemblerInsn "add" for 0x4018d9>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "add" for 0x4018e8>, <DisassemblerInsn "mov" for 0x4018ec>, <DisassemblerInsn "mov" for 0x4018f4>, <DisassemblerInsn "add" for 0x4018f7>, <DisassemblerInsn "mov" for 0x4018fb>, <DisassemblerInsn "mov" for 0x401903>, <DisassemblerInsn "add" for 0x401906>, <DisassemblerInsn "mov" for 0x40190a>, <DisassemblerInsn "add" for 0x401912>, <DisassemblerInsn "mov" for 0x401916>, <DisassemblerInsn "mov" for 0x40191e>, <DisassemblerInsn "add" for 0x401921>, <DisassemblerInsn "mov" for 0x401925>, <DisassemblerInsn "mov" for 0x40192d>, <DisassemblerInsn "add" for 0x401930>, <DisassemblerInsn "mov" for 0x401934>, <DisassemblerInsn "mov" for 0x40193c>, <DisassemblerInsn "add" for 0x40193f>, <DisassemblerInsn "mov" for 0x401943>, <DisassemblerInsn "mov" for 0x40194b>, <DisassemblerInsn "add" for 0x40194e>, <DisassemblerInsn "mov" for 0x401952>, <DisassemblerInsn "add" for 0x40195a>, <DisassemblerInsn "mov" for 0x40195e>, <DisassemblerInsn "xor" for 0x401966>, <DisassemblerInsn "mov" for 0x401968>, <DisassemblerInsn "mov" for 0x40196a>, <DisassemblerInsn "mov" for 0x401971>, <DisassemblerInsn "mov" for 0x401973>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "mov" for 0x401981>, <DisassemblerInsn "mov" for 0x401989>, <DisassemblerInsn "mov" for 0x40198d>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "mov" for 0x40199b>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a6>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "call" for 0x4019b5>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c8a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "mov" for 0x4019ff>, <DisassemblerInsn "mov" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "add" for 0x401a0e>, <DisassemblerInsn "mov" for 0x401a11>, <DisassemblerInsn "mov" for 0x401a15>, <DisassemblerInsn "mov" for 0x401a1a>, <DisassemblerInsn "mov" for 0x401a1e>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "test" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a29>, <DisassemblerInsn "mov" for 0x401a2d>, <DisassemblerInsn "mov" for 0x401a31>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "je" for 0x401a39>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d23>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2b>, <DisassemblerInsn "mov" for 0x401d32>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "mov" for 0x401d3a>, <DisassemblerInsn "mov" for 0x401d3e>, <DisassemblerInsn "jmp" for 0x401d42>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c3b>, <DisassemblerInsn "mov" for 0x401c3f>, <DisassemblerInsn "sub" for 0x401c46>, <DisassemblerInsn "mov" for 0x401c4c>, <DisassemblerInsn "je" for 0x401c50>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a45>, <DisassemblerInsn "sub" for 0x401a4c>, <DisassemblerInsn "mov" for 0x401a52>, <DisassemblerInsn "je" for 0x401a56>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be6>, <DisassemblerInsn "mov" for 0x401bea>, <DisassemblerInsn "sub" for 0x401bf1>, <DisassemblerInsn "mov" for 0x401bf7>, <DisassemblerInsn "je" for 0x401bfb>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401afe>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d47>, <DisassemblerInsn "call" for 0x401d4f>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d08>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402051>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402059>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "mov" for 0x402060>, <DisassemblerInsn "mov" for 0x402064>, <DisassemblerInsn "mov" for 0x40206b>, <DisassemblerInsn "mov" for 0x402072>, <DisassemblerInsn "mov" for 0x402074>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "je" for 0x40207f>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e36>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f6c>, <DisassemblerInsn "mov" for 0x401f70>, <DisassemblerInsn "add" for 0x401f74>, <DisassemblerInsn "mov" for 0x401f77>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "jmp" for 0x401f7f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019d0>, <DisassemblerInsn "call" for 0x4019d8>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb5>, <DisassemblerInsn "add" for 0x401cb9>, <DisassemblerInsn "mov" for 0x401cbc>, <DisassemblerInsn "mov" for 0x401cc0>, <DisassemblerInsn "mov" for 0x401cc8>, <DisassemblerInsn "mov" for 0x401ccc>, <DisassemblerInsn "mov" for 0x401cd0>, <DisassemblerInsn "mov" for 0x401cd2>, <DisassemblerInsn "test" for 0x401cd6>, <DisassemblerInsn "je" for 0x401cd8>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "mov" for 0x401c5b>, <DisassemblerInsn "mov" for 0x401c5f>, <DisassemblerInsn "mov" for 0x401c63>, <DisassemblerInsn "mov" for 0x401c67>, <DisassemblerInsn "sub" for 0x401c6e>, <DisassemblerInsn "mov" for 0x401c74>, <DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "mov" for 0x401c80>, <DisassemblerInsn "je" for 0x401c84>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cc0>, <DisassemblerInsn "mov" for 0x401cc8>, <DisassemblerInsn "mov" for 0x401ccc>, <DisassemblerInsn "mov" for 0x401cd0>, <DisassemblerInsn "mov" for 0x401cd2>, <DisassemblerInsn "test" for 0x401cd6>, <DisassemblerInsn "je" for 0x401cd8>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b69>, <DisassemblerInsn "sub" for 0x401b70>, <DisassemblerInsn "je" for 0x401b75>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x40202e>, <DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "mov" for 0x402036>, <DisassemblerInsn "mov" for 0x40203d>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "mov" for 0x402045>, <DisassemblerInsn "mov" for 0x402049>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402051>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402059>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "mov" for 0x402060>, <DisassemblerInsn "mov" for 0x402064>, <DisassemblerInsn "mov" for 0x40206b>, <DisassemblerInsn "mov" for 0x402072>, <DisassemblerInsn "mov" for 0x402074>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "je" for 0x40207f>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db3>, <DisassemblerInsn "mov" for 0x401dbb>, <DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dd3>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "mov" for 0x401ddd>, <DisassemblerInsn "mov" for 0x401ddf>, <DisassemblerInsn "movsxd" for 0x401de6>, <DisassemblerInsn "mov" for 0x401de9>, <DisassemblerInsn "mov" for 0x401deb>, <DisassemblerInsn "imul" for 0x401def>, <DisassemblerInsn "mov" for 0x401df6>, <DisassemblerInsn "movsxd" for 0x401df9>, <DisassemblerInsn "cqo" for 0x401dfc>, <DisassemblerInsn "idiv" for 0x401dfe>, <DisassemblerInsn "mov" for 0x401e01>, <DisassemblerInsn "mov" for 0x401e04>, <DisassemblerInsn "mov" for 0x401e0c>, <DisassemblerInsn "mov" for 0x401e0f>, <DisassemblerInsn "mov" for 0x401e11>, <DisassemblerInsn "sub" for 0x401e15>, <DisassemblerInsn "je" for 0x401e1a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f55>, <DisassemblerInsn "mov" for 0x401f5d>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "call" for 0x401f67>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a5c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401cda>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "mov" for 0x401ae7>, <DisassemblerInsn "sub" for 0x401aee>, <DisassemblerInsn "mov" for 0x401af4>, <DisassemblerInsn "je" for 0x401af8>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ce9>, <DisassemblerInsn "mov" for 0x401cf0>, <DisassemblerInsn "mov" for 0x401cf4>, <DisassemblerInsn "sub" for 0x401cf8>, <DisassemblerInsn "mov" for 0x401cfe>, <DisassemblerInsn "mov" for 0x401d02>, <DisassemblerInsn "je" for 0x401d06>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e3f>, <DisassemblerInsn "mov" for 0x401e43>, <DisassemblerInsn "mov" for 0x401e48>, <DisassemblerInsn "mov" for 0x401e50>, <DisassemblerInsn "shl" for 0x401e54>, <DisassemblerInsn "add" for 0x401e56>, <DisassemblerInsn "xor" for 0x401e59>, <DisassemblerInsn "div" for 0x401e5b>, <DisassemblerInsn "mov" for 0x401e5d>, <DisassemblerInsn "mov" for 0x401e65>, <DisassemblerInsn "mov" for 0x401e67>, <DisassemblerInsn "add" for 0x401e6b>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e70>, <DisassemblerInsn "mov" for 0x401e75>, <DisassemblerInsn "mov" for 0x401e79>, <DisassemblerInsn "mov" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "jmp" for 0x401e85>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401acf>, <DisassemblerInsn "sub" for 0x401ad6>, <DisassemblerInsn "je" for 0x401adb>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401aa8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cdc>, <DisassemblerInsn "sub" for 0x401ce0>, <DisassemblerInsn "je" for 0x401ce5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x73514754>', '<je~~0x401f17>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x401b7d>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x401b69>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x401c3b>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x401a72>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401e2b>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40204d>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x402085>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x401bae>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x401e1e>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401f94>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x4443546d>', '<je~~0x401f55>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x401be6>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401f22>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x402085>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x684e5331>', '<je~~0x401ca3>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401b38>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6843504d>', '<je~~0x401f81>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<call~~0x500050>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x401ce9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x6c], eax>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<add~~edx, -8>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~esi, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], esi>', '<test~~edi, edi>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4019f4>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401b4c>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x84]>', '<sub~~edx, 0x4630564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401f94>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54514970>', '<je~~0x401f81>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~esi, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<call~~0x500008>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<sub~~eax, 0x15001>', '<je~~0x401e8a>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x401b91>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x402010>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~esi, dword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~edi, ecx>', '<or~~edi, dword ptr [rdx]>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40204d>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401cc0>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401c17>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<sub~~eax, 0x1100a>', '<je~~0x401e3b>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4019e3>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x401c54>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 4], eax>', '<call~~0x500050>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x6849564d>', '<je~~0x401f17>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x401c03>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x401acf>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401c2b>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401f94>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x54475666>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401f22>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rsp + 0x10]>', '<add~~edi, eax>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40204d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500008>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401ae3>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~dword ptr [rsp + 0x1c], edx>', '<call~~0x500050>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x54475170>', '<je~~0x401f17>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x401a41>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x108>', '<ret~~>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x108>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<add~~rsi, 0x1c>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~esi, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0x74], esi>', '<mov~~dword ptr [rsp + 0x78], edx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<call~~0x500008>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401c8c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<add~~edx, -8>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~esi, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], esi>', '<test~~edi, edi>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40204d>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401cc0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401cc0>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x6649564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401f22>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x401b00>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500008>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x401d7d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<mov~~esi, dword ptr [rsp + 0x68]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], esi>', '<mov~~dword ptr [rsp + 0xfc], edx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x401981>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401ec0>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<add~~ecx, -0x10>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401f94>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~0x500018>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401d0a>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, dword ptr [rsp + 0x54]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rsp + 0x84]>', '<sub~~edi, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x40204d>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x401d0a>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x5447566b>', '<je~~0x401f17>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~edx, dword ptr [rsp + 0x78]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<mov~~esi, dword ptr [rsp + 0x68]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x70], esi>', '<mov~~dword ptr [rsp + 0xfc], edx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x401981>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<mov~~qword ptr [rcx], 0x15f90>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x10], esi>', '<imul~~rax, rax, 0x15f90>', '<mov~~qword ptr [rcx], rax>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<sub~~eax, 0x10012>', '<je~~0x401e8a>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x401a5e>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x401cdc>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401cc0>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~edx, dword ptr [rsp + 0x38]>', '<sub~~edx, 0x15001>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x401d47>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~edi, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<add~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, 1>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<mov~~dword ptr [rsp + 0x60], edx>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40204d>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<sub~~eax, 0x4b30564d>', '<je~~0x401f81>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x401aaa>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x401d47>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (22, 26), (7, 10), (96, 97), (73, 74), (80, 67), (61, 63), (87, 91), (91, 18), (82, 49), (8, 11), (2, 4), (74, 75), (53, 9), (90, 92), (20, 24), (14, 17), (86, 88), (9, 12), (80, 81), (11, 9), (66, 9), (75, 76), (68, 70), (85, 86), (81, 82), (59, 61), (60, 62), (77, 78), (31, 26), (0, 2), (31, 35), (97, 99), (27, 31), (88, 90), (82, 83), (42, 47), (78, 79), (83, 84), (90, 16), (62, 64), (7, 9), (79, 80), (33, 37), (51, 54), (49, 36), (26, 34), (29, 33), (22, 27), (52, 16), (44, 12), (99, 12), (19, 22), (45, 50), (56, 59), (74, 49), (3, 7), (20, 23), (52, 55), (14, 16), (86, 87), (13, 2), (32, 36), (18, 25), (58, 9), (4, 8), (70, 72), (17, 20), (10, 14), (93, 94), (37, 41), (47, 51), (61, 53), (84, 85), (2, 3), (76, 16), (68, 67), (36, 44), (48, 9), (94, 95), (51, 53), (67, 71), (44, 48), (95, 96), (91, 19), (57, 60), (37, 36), (45, 49), (62, 65), (56, 58), (24, 29), (41, 45), (78, 9), (47, 12), (93, 9), (39, 47), (9, 13), (99, 13), (25, 9), (34, 42), (11, 10), (92, 93), (63, 66), (95, 64), (84, 64), (29, 9), (16, 18), (64, 67), (71, 36), (65, 68), (23, 32), (57, 9), (76, 77), (54, 56), (72, 64)], 'cdg_edge_info': [(72, 73), (72, 36), (20, 29), (62, 44), (91, 25), (91, 34), (2, 11), (11, 14), (80, 67), (47, 9), (91, 9), (91, 18), (82, 49), (2, 4), (74, 75), (62, 67), (22, 12), (86, 88), (95, 36), (84, 36), (80, 81), (31, 42), (11, 9), (68, 70), (80, 44), (7, 14), (68, 36), (31, 26), (82, 44), (91, 22), (86, 90), (20, 44), (68, 72), (93, 95), (62, 71), (74, 36), (82, 83), (84, 86), (78, 79), (95, 67), (7, 9), (62, 64), (37, 44), (72, 74), (95, 97), (72, 67), (91, 47), (74, 49), (20, 23), (51, 56), (9, 2), (80, 71), (20, 32), (86, 87), (95, 99), (95, 44), (84, 44), (2, 8), (45, 52), (62, 68), (56, 61), (68, 44), (52, 57), (29, 37), (80, 82), (72, 44), (45, 36), (76, 78), (93, 94), (91, 42), (47, 51), (84, 67), (74, 44), (61, 53), (84, 85), (86, 91), (62, 36), (44, 9), (91, 26), (2, 3), (68, 67), (82, 84), (51, 53), (44, 48), (78, 80), (95, 96), (99, 2), (57, 60), (74, 76), (37, 36), (45, 49), (22, 47), (62, 65), (37, 45), (56, 58), (95, 71), (84, 71), (78, 9), (90, 93), (61, 66), (93, 9), (31, 34), (22, 31), (9, 13), (99, 13), (57, 62), (2, 7), (68, 71), (80, 36), (29, 9), (84, 64), (95, 64), (72, 71), (82, 36), (14, 20), (20, 36), (45, 44), (57, 9), (72, 64)], 'ddg_edge_info': [(47, 53), (4, 64), (0, 51), (18, 99), (42, 66), (3, 13), (2, 57), (3, 22), (3, 86), (3, 31), (2, 11), (11, 14), (3, 95), (11, 78), (0, 23), (0, 87), (3, 49), (4, 57), (87, 18), (13, 99), (80, 67), (87, 91), (0, 53), (91, 18), (8, 11), (4, 23), (11, 71), (23, 36), (4, 87), (67, 36), (2, 68), (3, 97), (3, 42), (51, 91), (58, 51), (36, 48), (18, 12), (13, 37), (11, 37), (47, 66), (42, 61), (3, 72), (2, 52), (51, 2), (51, 66), (3, 26), (31, 42), (3, 90), (13, 58), (13, 3), (3, 99), (58, 99), (4, 52), (0, 48), (2, 45), (36, 13), (11, 57), (3, 74), (0, 2), (91, 22), (4, 18), (48, 51), (0, 66), (4, 82), (97, 99), (4, 91), (3, 37), (4, 36), (4, 45), (13, 78), (2, 20), (2, 84), (11, 32), (2, 29), (42, 47), (2, 93), (42, 56), (3, 67), (3, 12), (48, 99), (51, 61), (3, 76), (4, 11), (4, 20), (13, 53), (4, 84), (4, 29), (42, 13), (4, 93), (13, 80), (2, 86), (0, 34), (2, 95), (97, 12), (11, 52), (26, 34), (3, 14), (4, 68), (4, 13), (3, 78), (49, 36), (3, 23), (4, 22), (3, 87), (4, 86), (4, 31), (44, 12), (4, 95), (99, 12), (78, 99), (0, 18), (7, 11), (93, 99), (11, 91), (90, 91), (0, 36), (0, 91), (25, 99), (3, 62), (3, 7), (51, 56), (87, 22), (29, 99), (3, 80), (87, 31), (13, 48), (13, 57), (13, 2), (13, 66), (4, 97), (13, 11), (2, 8), (91, 31), (52, 91), (2, 72), (11, 29), (42, 99), (11, 93), (2, 90), (47, 58), (32, 36), (13, 32), (57, 99), (3, 64), (18, 25), (51, 58), (4, 8), (3, 18), (4, 72), (3, 82), (4, 26), (87, 42), (13, 4), (4, 90), (13, 68), (22, 34), (4, 99), (0, 13), (0, 4), (2, 74), (91, 42), (3, 57), (13, 25), (2, 37), (11, 49), (58, 66), (66, 58), (4, 74), (42, 58), (87, 26), (42, 12), (53, 51), (68, 67), (36, 99), (36, 44), (2, 76), (4, 49), (11, 97), (0, 97), (0, 42), (48, 91), (51, 53), (3, 68), (67, 71), (66, 51), (42, 51), (44, 48), (4, 12), (4, 67), (4, 76), (53, 99), (37, 36), (2, 14), (2, 78), (0, 26), (4, 42), (76, 91), (11, 90), (3, 52), (11, 99), (18, 13), (66, 99), (97, 13), (13, 29), (13, 93), (42, 53), (4, 14), (36, 12), (47, 12), (4, 78), (31, 34), (2, 62), (99, 13), (2, 7), (34, 42), (3, 91), (14, 91), (3, 36), (2, 80), (3, 45), (51, 48), (13, 31), (64, 67), (4, 62), (71, 36), (4, 80), (0, 58), (3, 20), (0, 3), (0, 67), (3, 84), (23, 32), (3, 29), (3, 93), (11, 76), (4, 37), (2, 82)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 359, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 360, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 361, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 365, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 366, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 367, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 372, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 353 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.o---before
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 329 nodes and 595 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 353 instructions in binary file.
[4201297, 4201305, 4201335]
The execution time of patched subCFG information extraction via angr: 0:00:03.058048
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195b>, <DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "mov" for 0x401969>, <DisassemblerInsn "je" for 0x40196d>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b59>, <DisassemblerInsn "mov" for 0x401b5e>, <DisassemblerInsn "mov" for 0x401b62>, <DisassemblerInsn "mov" for 0x401b66>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "call" for 0x401b72>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "je" for 0x4018da>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b77>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b7f>, <DisassemblerInsn "mov" for 0x401b83>, <DisassemblerInsn "jmp" for 0x401b87>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401861>, <DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "sub" for 0x401869>, <DisassemblerInsn "mov" for 0x40186f>, <DisassemblerInsn "je" for 0x401873>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "sub" for 0x40183e>, <DisassemblerInsn "mov" for 0x401844>, <DisassemblerInsn "je" for 0x401848>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401b51>, <DisassemblerInsn "mov" for 0x401b53>, <DisassemblerInsn "jmp" for 0x401b57>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "call" for 0x401bd6>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "je" for 0x401859>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401904>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "sub" for 0x40190c>, <DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "je" for 0x401916>]'}], 'cfg_block_detailed_info': [{'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401b51>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401b59>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401b51>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}], 'cfg_edge_info': [(56, 27), (57, 58), (68, 58), (82, 54), (58, 54), (53, 54), (54, 56), (60, 54), (72, 54)]}]}
{'ea_read_packet': [4201297, 4201305, 4201335]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O2/electronicarts.o---before
The extraction of function: ea_read_packet
[4201297, 4201305, 4201335]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 99 nodes and 144 edges in CFGEmulated.
It has 97 nodes and 176 edges in CDG.
It has 1478 nodes and 1793 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201297, 4201305, 4201335]
{4200064, 4200706, 4200450, 4200708, 4200965, 4200839, 4201353, 4200850, 4201237, 4201494, 4200603, 4200732, 4200476, 4200734, 4200223, 4200605, 4201373, 4200356, 4201126, 4200233, 4200745, 4200747, 4201517, 4200878, 4201522, 4201139, 4200500, 4200502, 4200631, 4201015, 4200249, 4200891, 4201408, 4200769, 4201152, 4200259, 4201032, 4200265, 4200526, 4200399, 4200528, 4201297, 4200657, 4200655, 4200275, 4200913, 4200279, 4201305, 4200793, 4201435, 4200795, 4200543, 4200672, 4200545, 4200674, 4200416, 4201448, 4200936, 4200946, 4200819, 4201204, 4201335, 4200824, 4200569, 4200571}
[17, 78, 41, 71, 30, 96, 36, 82, 91, 65, 87, 51, 42, 31, 49, 52, 88, 27, 57, 61, 53, 97, 54, 85, 14, 48, 72, 90, 46, 9, 70, 4, 39, 60, 7, 94, 12, 68, 86, 59, 58, 79, 83, 35, 3, 34, 26, 21, 73, 64, 55, 8, 92, 19, 84, 10, 66, 62, 24, 95, 77, 20, 13, 45, 43, 76, 56, 16, 81, 69, 2, 80, 11, 29, 50, 63, 32, 23, 22, 33, 74, 0, 93, 15, 75]
The execution time of patched slicing information extraction via angr: 0:00:06.325483
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "sub" for 0x4017a8>, <DisassemblerInsn "je" for 0x4017ad>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bb>, <DisassemblerInsn "sub" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c5>, <DisassemblerInsn "je" for 0x4018c9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bb0>, <DisassemblerInsn "xor" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb6>, <DisassemblerInsn "mov" for 0x401bba>, <DisassemblerInsn "jmp" for 0x401bbe>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40185f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b9d>, <DisassemblerInsn "add" for 0x401ba1>, <DisassemblerInsn "xor" for 0x401ba4>, <DisassemblerInsn "mov" for 0x401ba6>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "jmp" for 0x401bae>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401973>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017cf>, <DisassemblerInsn "sub" for 0x4017d3>, <DisassemblerInsn "je" for 0x4017d8>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e2>, <DisassemblerInsn "mov" for 0x4018e6>, <DisassemblerInsn "mov" for 0x4018ea>, <DisassemblerInsn "sub" for 0x4018ee>, <DisassemblerInsn "mov" for 0x4018f4>, <DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "je" for 0x4018fc>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401987>, <DisassemblerInsn "add" for 0x40198b>, <DisassemblerInsn "mov" for 0x40198e>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199e>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a4>, <DisassemblerInsn "test" for 0x4019a8>, <DisassemblerInsn "je" for 0x4019aa>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40184e>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401978>, <DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "call" for 0x401982>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a4d>, <DisassemblerInsn "mov" for 0x401a55>, <DisassemblerInsn "mov" for 0x401a5d>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "mov" for 0x401a6d>, <DisassemblerInsn "mov" for 0x401a6f>, <DisassemblerInsn "movsxd" for 0x401a71>, <DisassemblerInsn "mov" for 0x401a74>, <DisassemblerInsn "mov" for 0x401a76>, <DisassemblerInsn "imul" for 0x401a7a>, <DisassemblerInsn "movsxd" for 0x401a81>, <DisassemblerInsn "cqo" for 0x401a84>, <DisassemblerInsn "idiv" for 0x401a86>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8c>, <DisassemblerInsn "mov" for 0x401a94>, <DisassemblerInsn "mov" for 0x401a97>, <DisassemblerInsn "mov" for 0x401a99>, <DisassemblerInsn "sub" for 0x401a9d>, <DisassemblerInsn "je" for 0x401aa2>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017de>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017cd>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be8>, <DisassemblerInsn "mov" for 0x401bec>, <DisassemblerInsn "mov" for 0x401bf4>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "mov" for 0x401c00>, <DisassemblerInsn "mov" for 0x401c08>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "or" for 0x401c0c>, <DisassemblerInsn "mov" for 0x401c0e>, <DisassemblerInsn "mov" for 0x401c10>, <DisassemblerInsn "jmp" for 0x401c14>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401802>, <DisassemblerInsn "mov" for 0x401806>, <DisassemblerInsn "sub" for 0x40180a>, <DisassemblerInsn "mov" for 0x401810>, <DisassemblerInsn "je" for 0x401814>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401929>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c2d>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40181c>, <DisassemblerInsn "mov" for 0x401820>, <DisassemblerInsn "sub" for 0x401824>, <DisassemblerInsn "mov" for 0x40182a>, <DisassemblerInsn "je" for 0x40182e>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab3>, <DisassemblerInsn "sub" for 0x401ab7>, <DisassemblerInsn "je" for 0x401abc>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af4>, <DisassemblerInsn "mov" for 0x401af8>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b04>, <DisassemblerInsn "add" for 0x401b08>, <DisassemblerInsn "mov" for 0x401b0a>, <DisassemblerInsn "mov" for 0x401b0c>, <DisassemblerInsn "jmp" for 0x401b10>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c16>, <DisassemblerInsn "mov" for 0x401c1b>, <DisassemblerInsn "mov" for 0x401c1f>, <DisassemblerInsn "mov" for 0x401c21>, <DisassemblerInsn "mov" for 0x401c23>, <DisassemblerInsn "call" for 0x401c28>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401aa4>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40191c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017a2>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "cmp" for 0x401a3b>, <DisassemblerInsn "mov" for 0x401a3e>, <DisassemblerInsn "jl" for 0x401a42>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401861>, <DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "sub" for 0x401869>, <DisassemblerInsn "mov" for 0x40186f>, <DisassemblerInsn "je" for 0x401873>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "mov" for 0x40192f>, <DisassemblerInsn "sub" for 0x401933>, <DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "je" for 0x40193d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e0>, <DisassemblerInsn "mov" for 0x4017e4>, <DisassemblerInsn "mov" for 0x4017e8>, <DisassemblerInsn "sub" for 0x4017ec>, <DisassemblerInsn "mov" for 0x4017f2>, <DisassemblerInsn "mov" for 0x4017f6>, <DisassemblerInsn "je" for 0x4017fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c32>, <DisassemblerInsn "add" for 0x401c36>, <DisassemblerInsn "ret" for 0x401c3d>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401b51>, <DisassemblerInsn "mov" for 0x401b53>, <DisassemblerInsn "jmp" for 0x401b57>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401739>, <DisassemblerInsn "call" for 0x40173e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1d>, <DisassemblerInsn "mov" for 0x401a22>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a32>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401834>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x40175f>, <DisassemblerInsn "add" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "test" for 0x40177c>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "je" for 0x401782>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401959>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40178a>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "sub" for 0x401792>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "je" for 0x40179c>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "je" for 0x401859>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40191e>, <DisassemblerInsn "sub" for 0x401922>, <DisassemblerInsn "je" for 0x401927>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ab1>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac0>, <DisassemblerInsn "mov" for 0x401ac8>, <DisassemblerInsn "mov" for 0x401acc>, <DisassemblerInsn "mov" for 0x401ad4>, <DisassemblerInsn "shl" for 0x401ad8>, <DisassemblerInsn "add" for 0x401ada>, <DisassemblerInsn "xor" for 0x401add>, <DisassemblerInsn "div" for 0x401adf>, <DisassemblerInsn "mov" for 0x401ae1>, <DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "add" for 0x401ae7>, <DisassemblerInsn "mov" for 0x401ae9>, <DisassemblerInsn "mov" for 0x401aeb>, <DisassemblerInsn "jmp" for 0x401aef>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018cf>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401902>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "call" for 0x401bd6>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401749>, <DisassemblerInsn "call" for 0x40174e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019cf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017b5>, <DisassemblerInsn "mov" for 0x4017b9>, <DisassemblerInsn "sub" for 0x4017bd>, <DisassemblerInsn "mov" for 0x4017c3>, <DisassemblerInsn "je" for 0x4017c7>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017b3>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401879>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b59>, <DisassemblerInsn "mov" for 0x401b5e>, <DisassemblerInsn "mov" for 0x401b62>, <DisassemblerInsn "mov" for 0x401b66>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "call" for 0x401b72>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40181a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401743>, <DisassemblerInsn "jmp" for 0x401747>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40193f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "sub" for 0x4019b2>, <DisassemblerInsn "je" for 0x4019b7>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401904>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "sub" for 0x40190c>, <DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "je" for 0x401916>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401788>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b15>, <DisassemblerInsn "mov" for 0x401b1d>, <DisassemblerInsn "mov" for 0x401b21>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b35>, <DisassemblerInsn "imul" for 0x401b37>, <DisassemblerInsn "xor" for 0x401b3a>, <DisassemblerInsn "div" for 0x401b3c>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "add" for 0x401b44>, <DisassemblerInsn "mov" for 0x401b46>, <DisassemblerInsn "mov" for 0x401b48>, <DisassemblerInsn "jmp" for 0x401b4c>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "sub" for 0x40183e>, <DisassemblerInsn "mov" for 0x401844>, <DisassemblerInsn "je" for 0x401848>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019b9>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195b>, <DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "mov" for 0x401969>, <DisassemblerInsn "je" for 0x40196d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018b5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b8e>, <DisassemblerInsn "mov" for 0x401b93>, <DisassemblerInsn "call" for 0x401b98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199e>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a4>, <DisassemblerInsn "test" for 0x4019a8>, <DisassemblerInsn "je" for 0x4019aa>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdb>, <DisassemblerInsn "cmp" for 0x401bdf>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "jl" for 0x401be6>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a05>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "add" for 0x401a0d>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a14>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1d>, <DisassemblerInsn "mov" for 0x401a22>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a32>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40189d>, <DisassemblerInsn "mov" for 0x4018a1>, <DisassemblerInsn "sub" for 0x4018a5>, <DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "je" for 0x4018af>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa6>, <DisassemblerInsn "sub" for 0x401aaa>, <DisassemblerInsn "je" for 0x401aaf>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019ac>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018e0>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b77>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b7f>, <DisassemblerInsn "mov" for 0x401b83>, <DisassemblerInsn "jmp" for 0x401b87>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x40172b>, <DisassemblerInsn "mov" for 0x401730>, <DisassemblerInsn "cmp" for 0x401734>, <DisassemblerInsn "je" for 0x401737>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "je" for 0x4018da>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x40175f>, <DisassemblerInsn "add" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "test" for 0x40177c>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "je" for 0x401782>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019bb>, <DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "sub" for 0x4019c3>, <DisassemblerInsn "mov" for 0x4019c9>, <DisassemblerInsn "je" for 0x4019cd>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401800>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401abe>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e8>, <DisassemblerInsn "call" for 0x4019ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019e3>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f2>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "call" for 0x401a00>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40187b>, <DisassemblerInsn "mov" for 0x40187f>, <DisassemblerInsn "mov" for 0x401883>, <DisassemblerInsn "sub" for 0x401887>, <DisassemblerInsn "mov" for 0x40188d>, <DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "je" for 0x401895>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401680>, <DisassemblerInsn "mov" for 0x401687>, <DisassemblerInsn "mov" for 0x40168c>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401695>, <DisassemblerInsn "mov" for 0x401699>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "add" for 0x4016a1>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b4>, <DisassemblerInsn "add" for 0x4016bc>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "mov" for 0x4016c8>, <DisassemblerInsn "add" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d7>, <DisassemblerInsn "add" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016de>, <DisassemblerInsn "mov" for 0x4016e6>, <DisassemblerInsn "add" for 0x4016e9>, <DisassemblerInsn "mov" for 0x4016ed>, <DisassemblerInsn "mov" for 0x4016f5>, <DisassemblerInsn "add" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016fc>, <DisassemblerInsn "mov" for 0x401704>, <DisassemblerInsn "add" for 0x401707>, <DisassemblerInsn "mov" for 0x40170b>, <DisassemblerInsn "add" for 0x401713>, <DisassemblerInsn "mov" for 0x401717>, <DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401941>, <DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "sub" for 0x401949>, <DisassemblerInsn "mov" for 0x40194f>, <DisassemblerInsn "je" for 0x401953>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019d1>, <DisassemblerInsn "mov" for 0x4019d6>, <DisassemblerInsn "mov" for 0x4019da>, <DisassemblerInsn "mov" for 0x4019dc>, <DisassemblerInsn "call" for 0x4019de>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40189b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x401b89>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x401861>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x401c16>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x401bb0>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4019d1>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401850>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x401af4>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4017e0>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4017cf>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40192b>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40171f>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x401af4>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x401aa6>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x40191e>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4017a4>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c32>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401b59>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401836>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x40195b>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401b51>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x401978>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401ab3>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x4018d1>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401904>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401a18>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4017b5>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x40187b>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x40181c>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401757>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x401941>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x4019e8>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x40178a>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x4019bb>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4018b7>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4019d1>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c32>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x401ac0>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4019ae>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4018e2>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401749>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401b51>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x4019e8>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401802>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401b15>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x401c2d>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x40189d>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (64, 69), (70, 64), (91, 16), (17, 21), (7, 10), (96, 97), (73, 74), (61, 63), (87, 91), (29, 34), (46, 50), (8, 11), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (86, 88), (11, 9), (80, 81), (66, 9), (75, 76), (68, 70), (85, 86), (69, 35), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (82, 35), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (91, 15), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (56, 59), (3, 7), (52, 55), (86, 87), (39, 48), (19, 24), (46, 35), (58, 9), (4, 8), (17, 20), (90, 13), (36, 42), (93, 94), (30, 35), (74, 35), (15, 22), (61, 53), (84, 85), (97, 27), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (29, 23), (51, 53), (35, 45), (95, 96), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (78, 9), (80, 70), (93, 9), (11, 10), (19, 23), (92, 93), (68, 71), (63, 66), (84, 64), (95, 64), (42, 46), (33, 43), (31, 36), (65, 68), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (62, 35), (19, 9), (2, 11), (17, 30), (36, 46), (19, 48), (91, 27), (2, 4), (74, 75), (29, 43), (13, 19), (91, 2), (46, 52), (86, 88), (80, 81), (84, 45), (95, 45), (68, 70), (80, 35), (62, 69), (82, 35), (68, 45), (46, 45), (86, 90), (48, 51), (72, 45), (68, 72), (13, 23), (91, 43), (93, 95), (82, 83), (74, 45), (91, 15), (84, 86), (78, 79), (19, 29), (36, 45), (62, 64), (72, 74), (80, 69), (29, 33), (95, 97), (51, 56), (86, 87), (95, 35), (13, 48), (84, 35), (13, 2), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (80, 64), (52, 57), (72, 35), (80, 82), (17, 20), (91, 33), (90, 13), (76, 78), (93, 94), (74, 35), (61, 53), (84, 85), (13, 43), (86, 91), (52, 13), (62, 45), (2, 3), (36, 35), (82, 84), (95, 69), (84, 69), (13, 27), (29, 23), (51, 53), (95, 32), (78, 80), (95, 96), (91, 19), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (56, 58), (72, 69), (90, 93), (80, 70), (61, 66), (2, 7), (57, 62), (17, 35), (68, 71), (91, 48), (84, 64), (95, 64), (80, 45), (95, 27), (82, 45), (91, 23), (76, 13), (68, 64), (91, 32), (95, 2), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (4, 9), (70, 64), (0, 51), (2, 57), (32, 3), (3, 86), (11, 69), (2, 11), (3, 95), (11, 78), (0, 23), (0, 87), (4, 57), (15, 32), (87, 91), (0, 53), (3, 70), (3, 15), (8, 11), (11, 62), (29, 43), (4, 23), (2, 68), (4, 87), (3, 97), (49, 9), (53, 9), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (91, 29), (11, 9), (66, 9), (3, 90), (48, 58), (3, 35), (69, 35), (4, 43), (4, 52), (2, 36), (82, 35), (11, 57), (3, 74), (3, 19), (20, 35), (0, 2), (0, 66), (4, 82), (43, 9), (87, 43), (15, 2), (4, 36), (4, 91), (91, 43), (2, 84), (0, 32), (2, 93), (45, 9), (43, 48), (91, 15), (4, 11), (51, 61), (3, 76), (4, 20), (48, 53), (32, 2), (4, 84), (43, 66), (4, 29), (23, 33), (4, 93), (62, 64), (2, 86), (2, 95), (0, 43), (11, 52), (4, 68), (20, 30), (29, 33), (3, 78), (3, 23), (87, 29), (32, 4), (3, 87), (4, 86), (4, 95), (35, 9), (7, 11), (11, 82), (0, 91), (90, 91), (11, 91), (3, 62), (3, 7), (51, 56), (4, 70), (4, 15), (3, 80), (97, 32), (43, 61), (4, 97), (2, 8), (52, 91), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (11, 93), (2, 90), (46, 35), (3, 64), (3, 9), (87, 15), (58, 9), (51, 58), (4, 8), (4, 72), (4, 17), (3, 82), (4, 90), (0, 4), (4, 35), (2, 74), (30, 35), (74, 35), (11, 95), (3, 57), (4, 46), (4, 74), (43, 56), (4, 19), (0, 15), (48, 9), (2, 76), (97, 2), (0, 33), (11, 97), (0, 97), (51, 53), (3, 68), (87, 19), (35, 45), (4, 76), (43, 58), (64, 35), (91, 19), (11, 72), (45, 49), (48, 66), (2, 78), (3, 43), (76, 91), (11, 90), (3, 52), (0, 35), (78, 9), (43, 51), (4, 78), (93, 9), (2, 62), (2, 7), (11, 74), (3, 91), (3, 36), (2, 80), (84, 64), (95, 64), (4, 62), (33, 43), (43, 53), (87, 23), (35, 49), (0, 49), (2, 46), (4, 80), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (3, 93), (11, 76), (57, 9), (2, 82), (11, 30), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 353 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.o---before
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 329 nodes and 595 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 353 instructions in binary file.
[4201297, 4201305, 4201335]
The execution time of patched subCFG information extraction via angr: 0:00:02.975804
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195b>, <DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "mov" for 0x401969>, <DisassemblerInsn "je" for 0x40196d>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b59>, <DisassemblerInsn "mov" for 0x401b5e>, <DisassemblerInsn "mov" for 0x401b62>, <DisassemblerInsn "mov" for 0x401b66>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "call" for 0x401b72>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "je" for 0x4018da>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b77>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b7f>, <DisassemblerInsn "mov" for 0x401b83>, <DisassemblerInsn "jmp" for 0x401b87>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401861>, <DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "sub" for 0x401869>, <DisassemblerInsn "mov" for 0x40186f>, <DisassemblerInsn "je" for 0x401873>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "sub" for 0x40183e>, <DisassemblerInsn "mov" for 0x401844>, <DisassemblerInsn "je" for 0x401848>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401b51>, <DisassemblerInsn "mov" for 0x401b53>, <DisassemblerInsn "jmp" for 0x401b57>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "call" for 0x401bd6>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "je" for 0x401859>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401904>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "sub" for 0x40190c>, <DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "je" for 0x401916>]'}], 'cfg_block_detailed_info': [{'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401b51>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401b59>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401b51>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}], 'cfg_edge_info': [(56, 27), (57, 58), (68, 58), (82, 54), (58, 54), (53, 54), (54, 56), (60, 54), (72, 54)]}]}
{'ea_read_packet': [4201297, 4201305, 4201335]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/O3/electronicarts.o---before
The extraction of function: ea_read_packet
[4201297, 4201305, 4201335]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 99 nodes and 144 edges in CFGEmulated.
It has 97 nodes and 176 edges in CDG.
It has 1478 nodes and 1793 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201297, 4201305, 4201335]
{4200064, 4200706, 4200450, 4200708, 4200965, 4200839, 4201353, 4200850, 4201237, 4201494, 4200603, 4200732, 4200476, 4200734, 4200223, 4200605, 4201373, 4200356, 4201126, 4200233, 4200745, 4200747, 4201517, 4200878, 4201522, 4201139, 4200500, 4200502, 4200631, 4201015, 4200249, 4200891, 4201408, 4200769, 4201152, 4200259, 4201032, 4200265, 4200526, 4200399, 4200528, 4201297, 4200657, 4200655, 4200275, 4200913, 4200279, 4201305, 4200793, 4201435, 4200795, 4200543, 4200672, 4200545, 4200674, 4200416, 4201448, 4200936, 4200946, 4200819, 4201204, 4201335, 4200824, 4200569, 4200571}
[17, 78, 41, 71, 30, 96, 36, 82, 91, 65, 87, 51, 42, 31, 49, 52, 88, 27, 57, 61, 53, 97, 54, 85, 14, 48, 72, 90, 46, 9, 70, 4, 39, 60, 7, 94, 12, 68, 86, 59, 58, 79, 83, 35, 3, 34, 26, 21, 73, 64, 55, 8, 92, 19, 84, 10, 66, 62, 24, 95, 77, 20, 13, 45, 43, 76, 56, 16, 81, 69, 2, 80, 11, 29, 50, 63, 32, 23, 22, 33, 74, 0, 93, 15, 75]
The execution time of patched slicing information extraction via angr: 0:00:06.339609
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "sub" for 0x4017a8>, <DisassemblerInsn "je" for 0x4017ad>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bb>, <DisassemblerInsn "sub" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c5>, <DisassemblerInsn "je" for 0x4018c9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bb0>, <DisassemblerInsn "xor" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb6>, <DisassemblerInsn "mov" for 0x401bba>, <DisassemblerInsn "jmp" for 0x401bbe>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40185f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b9d>, <DisassemblerInsn "add" for 0x401ba1>, <DisassemblerInsn "xor" for 0x401ba4>, <DisassemblerInsn "mov" for 0x401ba6>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "jmp" for 0x401bae>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401973>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017cf>, <DisassemblerInsn "sub" for 0x4017d3>, <DisassemblerInsn "je" for 0x4017d8>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e2>, <DisassemblerInsn "mov" for 0x4018e6>, <DisassemblerInsn "mov" for 0x4018ea>, <DisassemblerInsn "sub" for 0x4018ee>, <DisassemblerInsn "mov" for 0x4018f4>, <DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "je" for 0x4018fc>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401987>, <DisassemblerInsn "add" for 0x40198b>, <DisassemblerInsn "mov" for 0x40198e>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199e>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a4>, <DisassemblerInsn "test" for 0x4019a8>, <DisassemblerInsn "je" for 0x4019aa>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40184e>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401978>, <DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "call" for 0x401982>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a4d>, <DisassemblerInsn "mov" for 0x401a55>, <DisassemblerInsn "mov" for 0x401a5d>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "mov" for 0x401a6d>, <DisassemblerInsn "mov" for 0x401a6f>, <DisassemblerInsn "movsxd" for 0x401a71>, <DisassemblerInsn "mov" for 0x401a74>, <DisassemblerInsn "mov" for 0x401a76>, <DisassemblerInsn "imul" for 0x401a7a>, <DisassemblerInsn "movsxd" for 0x401a81>, <DisassemblerInsn "cqo" for 0x401a84>, <DisassemblerInsn "idiv" for 0x401a86>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "mov" for 0x401a8c>, <DisassemblerInsn "mov" for 0x401a94>, <DisassemblerInsn "mov" for 0x401a97>, <DisassemblerInsn "mov" for 0x401a99>, <DisassemblerInsn "sub" for 0x401a9d>, <DisassemblerInsn "je" for 0x401aa2>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017de>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017cd>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be8>, <DisassemblerInsn "mov" for 0x401bec>, <DisassemblerInsn "mov" for 0x401bf4>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "mov" for 0x401c00>, <DisassemblerInsn "mov" for 0x401c08>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "or" for 0x401c0c>, <DisassemblerInsn "mov" for 0x401c0e>, <DisassemblerInsn "mov" for 0x401c10>, <DisassemblerInsn "jmp" for 0x401c14>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401802>, <DisassemblerInsn "mov" for 0x401806>, <DisassemblerInsn "sub" for 0x40180a>, <DisassemblerInsn "mov" for 0x401810>, <DisassemblerInsn "je" for 0x401814>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401929>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c2d>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40181c>, <DisassemblerInsn "mov" for 0x401820>, <DisassemblerInsn "sub" for 0x401824>, <DisassemblerInsn "mov" for 0x40182a>, <DisassemblerInsn "je" for 0x40182e>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab3>, <DisassemblerInsn "sub" for 0x401ab7>, <DisassemblerInsn "je" for 0x401abc>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af4>, <DisassemblerInsn "mov" for 0x401af8>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b04>, <DisassemblerInsn "add" for 0x401b08>, <DisassemblerInsn "mov" for 0x401b0a>, <DisassemblerInsn "mov" for 0x401b0c>, <DisassemblerInsn "jmp" for 0x401b10>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c16>, <DisassemblerInsn "mov" for 0x401c1b>, <DisassemblerInsn "mov" for 0x401c1f>, <DisassemblerInsn "mov" for 0x401c21>, <DisassemblerInsn "mov" for 0x401c23>, <DisassemblerInsn "call" for 0x401c28>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401aa4>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40191c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017a2>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "cmp" for 0x401a3b>, <DisassemblerInsn "mov" for 0x401a3e>, <DisassemblerInsn "jl" for 0x401a42>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401861>, <DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "sub" for 0x401869>, <DisassemblerInsn "mov" for 0x40186f>, <DisassemblerInsn "je" for 0x401873>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "mov" for 0x40192f>, <DisassemblerInsn "sub" for 0x401933>, <DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "je" for 0x40193d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e0>, <DisassemblerInsn "mov" for 0x4017e4>, <DisassemblerInsn "mov" for 0x4017e8>, <DisassemblerInsn "sub" for 0x4017ec>, <DisassemblerInsn "mov" for 0x4017f2>, <DisassemblerInsn "mov" for 0x4017f6>, <DisassemblerInsn "je" for 0x4017fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c32>, <DisassemblerInsn "add" for 0x401c36>, <DisassemblerInsn "ret" for 0x401c3d>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401b51>, <DisassemblerInsn "mov" for 0x401b53>, <DisassemblerInsn "jmp" for 0x401b57>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401739>, <DisassemblerInsn "call" for 0x40173e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1d>, <DisassemblerInsn "mov" for 0x401a22>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a32>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401834>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x40175f>, <DisassemblerInsn "add" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "test" for 0x40177c>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "je" for 0x401782>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401959>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40178a>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "sub" for 0x401792>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "je" for 0x40179c>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401850>, <DisassemblerInsn "sub" for 0x401854>, <DisassemblerInsn "je" for 0x401859>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40191e>, <DisassemblerInsn "sub" for 0x401922>, <DisassemblerInsn "je" for 0x401927>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ab1>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac0>, <DisassemblerInsn "mov" for 0x401ac8>, <DisassemblerInsn "mov" for 0x401acc>, <DisassemblerInsn "mov" for 0x401ad4>, <DisassemblerInsn "shl" for 0x401ad8>, <DisassemblerInsn "add" for 0x401ada>, <DisassemblerInsn "xor" for 0x401add>, <DisassemblerInsn "div" for 0x401adf>, <DisassemblerInsn "mov" for 0x401ae1>, <DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "add" for 0x401ae7>, <DisassemblerInsn "mov" for 0x401ae9>, <DisassemblerInsn "mov" for 0x401aeb>, <DisassemblerInsn "jmp" for 0x401aef>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018cf>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401902>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "call" for 0x401bd6>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401749>, <DisassemblerInsn "call" for 0x40174e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019cf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017b5>, <DisassemblerInsn "mov" for 0x4017b9>, <DisassemblerInsn "sub" for 0x4017bd>, <DisassemblerInsn "mov" for 0x4017c3>, <DisassemblerInsn "je" for 0x4017c7>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017b3>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401879>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b59>, <DisassemblerInsn "mov" for 0x401b5e>, <DisassemblerInsn "mov" for 0x401b62>, <DisassemblerInsn "mov" for 0x401b66>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "call" for 0x401b72>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40181a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401743>, <DisassemblerInsn "jmp" for 0x401747>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40193f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "sub" for 0x4019b2>, <DisassemblerInsn "je" for 0x4019b7>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401904>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "sub" for 0x40190c>, <DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "je" for 0x401916>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401788>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b15>, <DisassemblerInsn "mov" for 0x401b1d>, <DisassemblerInsn "mov" for 0x401b21>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b35>, <DisassemblerInsn "imul" for 0x401b37>, <DisassemblerInsn "xor" for 0x401b3a>, <DisassemblerInsn "div" for 0x401b3c>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "add" for 0x401b44>, <DisassemblerInsn "mov" for 0x401b46>, <DisassemblerInsn "mov" for 0x401b48>, <DisassemblerInsn "jmp" for 0x401b4c>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "sub" for 0x40183e>, <DisassemblerInsn "mov" for 0x401844>, <DisassemblerInsn "je" for 0x401848>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019b9>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195b>, <DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "sub" for 0x401963>, <DisassemblerInsn "mov" for 0x401969>, <DisassemblerInsn "je" for 0x40196d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018b5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b8e>, <DisassemblerInsn "mov" for 0x401b93>, <DisassemblerInsn "call" for 0x401b98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199e>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a4>, <DisassemblerInsn "test" for 0x4019a8>, <DisassemblerInsn "je" for 0x4019aa>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdb>, <DisassemblerInsn "cmp" for 0x401bdf>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "jl" for 0x401be6>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a05>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "add" for 0x401a0d>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a14>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1d>, <DisassemblerInsn "mov" for 0x401a22>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a32>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40189d>, <DisassemblerInsn "mov" for 0x4018a1>, <DisassemblerInsn "sub" for 0x4018a5>, <DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "je" for 0x4018af>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa6>, <DisassemblerInsn "sub" for 0x401aaa>, <DisassemblerInsn "je" for 0x401aaf>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019ac>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018e0>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b77>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b7f>, <DisassemblerInsn "mov" for 0x401b83>, <DisassemblerInsn "jmp" for 0x401b87>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x40172b>, <DisassemblerInsn "mov" for 0x401730>, <DisassemblerInsn "cmp" for 0x401734>, <DisassemblerInsn "je" for 0x401737>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d1>, <DisassemblerInsn "sub" for 0x4018d5>, <DisassemblerInsn "je" for 0x4018da>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "mov" for 0x40175f>, <DisassemblerInsn "add" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401773>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "test" for 0x40177c>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "je" for 0x401782>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019bb>, <DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "sub" for 0x4019c3>, <DisassemblerInsn "mov" for 0x4019c9>, <DisassemblerInsn "je" for 0x4019cd>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401800>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401abe>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e8>, <DisassemblerInsn "call" for 0x4019ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019e3>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f2>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "call" for 0x401a00>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40187b>, <DisassemblerInsn "mov" for 0x40187f>, <DisassemblerInsn "mov" for 0x401883>, <DisassemblerInsn "sub" for 0x401887>, <DisassemblerInsn "mov" for 0x40188d>, <DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "je" for 0x401895>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401680>, <DisassemblerInsn "mov" for 0x401687>, <DisassemblerInsn "mov" for 0x40168c>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401695>, <DisassemblerInsn "mov" for 0x401699>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "add" for 0x4016a1>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b4>, <DisassemblerInsn "add" for 0x4016bc>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "mov" for 0x4016c8>, <DisassemblerInsn "add" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d7>, <DisassemblerInsn "add" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016de>, <DisassemblerInsn "mov" for 0x4016e6>, <DisassemblerInsn "add" for 0x4016e9>, <DisassemblerInsn "mov" for 0x4016ed>, <DisassemblerInsn "mov" for 0x4016f5>, <DisassemblerInsn "add" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016fc>, <DisassemblerInsn "mov" for 0x401704>, <DisassemblerInsn "add" for 0x401707>, <DisassemblerInsn "mov" for 0x40170b>, <DisassemblerInsn "add" for 0x401713>, <DisassemblerInsn "mov" for 0x401717>, <DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401941>, <DisassemblerInsn "mov" for 0x401945>, <DisassemblerInsn "sub" for 0x401949>, <DisassemblerInsn "mov" for 0x40194f>, <DisassemblerInsn "je" for 0x401953>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019d1>, <DisassemblerInsn "mov" for 0x4019d6>, <DisassemblerInsn "mov" for 0x4019da>, <DisassemblerInsn "mov" for 0x4019dc>, <DisassemblerInsn "call" for 0x4019de>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40189b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x401b89>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x401861>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x401c16>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x401bb0>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4019d1>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401850>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x401af4>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4017e0>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4017cf>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x40192b>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40171f>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x401af4>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x401aa6>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x40191e>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4017a4>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c32>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401b59>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401836>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x40195b>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x401b51>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x401978>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x401ab3>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x4018d1>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x401904>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401a18>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4017b5>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x40187b>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x40181c>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401757>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x401941>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x4019e8>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x40178a>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x401c32>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x4019bb>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401b59>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4018b7>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4019d1>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x401c32>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x401992>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x401ac0>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4019ae>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4018e2>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x401bc0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401749>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x401b51>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x4019e8>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401802>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401b15>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x401c2d>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x401bc0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x401c32>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x40189d>']}], 'cfg_edge_info': [(55, 57), (72, 73), (50, 52), (64, 69), (70, 64), (91, 16), (17, 21), (7, 10), (96, 97), (73, 74), (61, 63), (87, 91), (29, 34), (46, 50), (8, 11), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (86, 88), (11, 9), (80, 81), (66, 9), (75, 76), (68, 70), (85, 86), (69, 35), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (82, 35), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (91, 15), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (56, 59), (3, 7), (52, 55), (86, 87), (39, 48), (19, 24), (46, 35), (58, 9), (4, 8), (17, 20), (90, 13), (36, 42), (93, 94), (30, 35), (74, 35), (15, 22), (61, 53), (84, 85), (97, 27), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (29, 23), (51, 53), (35, 45), (95, 96), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (78, 9), (80, 70), (93, 9), (11, 10), (19, 23), (92, 93), (68, 71), (63, 66), (84, 64), (95, 64), (42, 46), (33, 43), (31, 36), (65, 68), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (62, 35), (19, 9), (2, 11), (17, 30), (36, 46), (19, 48), (91, 27), (2, 4), (74, 75), (29, 43), (13, 19), (91, 2), (46, 52), (86, 88), (80, 81), (84, 45), (95, 45), (68, 70), (80, 35), (62, 69), (82, 35), (68, 45), (46, 45), (86, 90), (48, 51), (72, 45), (68, 72), (13, 23), (91, 43), (93, 95), (82, 83), (74, 45), (91, 15), (84, 86), (78, 79), (19, 29), (36, 45), (62, 64), (72, 74), (80, 69), (29, 33), (95, 97), (51, 56), (86, 87), (95, 35), (13, 48), (84, 35), (13, 2), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (80, 64), (52, 57), (72, 35), (80, 82), (17, 20), (91, 33), (90, 13), (76, 78), (93, 94), (74, 35), (61, 53), (84, 85), (13, 43), (86, 91), (52, 13), (62, 45), (2, 3), (36, 35), (82, 84), (95, 69), (84, 69), (13, 27), (29, 23), (51, 53), (95, 32), (78, 80), (95, 96), (91, 19), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (56, 58), (72, 69), (90, 93), (80, 70), (61, 66), (2, 7), (57, 62), (17, 35), (68, 71), (91, 48), (84, 64), (95, 64), (80, 45), (95, 27), (82, 45), (91, 23), (76, 13), (68, 64), (91, 32), (95, 2), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (4, 9), (70, 64), (0, 51), (2, 57), (32, 3), (3, 86), (11, 69), (2, 11), (3, 95), (11, 78), (0, 23), (0, 87), (4, 57), (15, 32), (87, 91), (0, 53), (3, 70), (3, 15), (8, 11), (11, 62), (29, 43), (4, 23), (2, 68), (4, 87), (3, 97), (49, 9), (53, 9), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (91, 29), (11, 9), (66, 9), (3, 90), (48, 58), (3, 35), (69, 35), (4, 43), (4, 52), (2, 36), (82, 35), (11, 57), (3, 74), (3, 19), (20, 35), (0, 2), (0, 66), (4, 82), (43, 9), (87, 43), (15, 2), (4, 36), (4, 91), (91, 43), (2, 84), (0, 32), (2, 93), (45, 9), (43, 48), (91, 15), (4, 11), (51, 61), (3, 76), (4, 20), (48, 53), (32, 2), (4, 84), (43, 66), (4, 29), (23, 33), (4, 93), (62, 64), (2, 86), (2, 95), (0, 43), (11, 52), (4, 68), (20, 30), (29, 33), (3, 78), (3, 23), (87, 29), (32, 4), (3, 87), (4, 86), (4, 95), (35, 9), (7, 11), (11, 82), (0, 91), (90, 91), (11, 91), (3, 62), (3, 7), (51, 56), (4, 70), (4, 15), (3, 80), (97, 32), (43, 61), (4, 97), (2, 8), (52, 91), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (11, 93), (2, 90), (46, 35), (3, 64), (3, 9), (87, 15), (58, 9), (51, 58), (4, 8), (4, 72), (4, 17), (3, 82), (4, 90), (0, 4), (4, 35), (2, 74), (30, 35), (74, 35), (11, 95), (3, 57), (4, 46), (4, 74), (43, 56), (4, 19), (0, 15), (48, 9), (2, 76), (97, 2), (0, 33), (11, 97), (0, 97), (51, 53), (3, 68), (87, 19), (35, 45), (4, 76), (43, 58), (64, 35), (91, 19), (11, 72), (45, 49), (48, 66), (2, 78), (3, 43), (76, 91), (11, 90), (3, 52), (0, 35), (78, 9), (43, 51), (4, 78), (93, 9), (2, 62), (2, 7), (11, 74), (3, 91), (3, 36), (2, 80), (84, 64), (95, 64), (4, 62), (33, 43), (43, 53), (87, 23), (35, 49), (0, 49), (2, 46), (4, 80), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (3, 93), (11, 76), (57, 9), (2, 82), (11, 30), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: electronicarts.c
Patched function: 1---static int process_ea_header 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.s---process_ea_header---before
There are 0 instructions for function: process_ea_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '354', 'end': 363}, 'before': {'start': '352', 'end': 357}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: process_ea_header from assembly files.
Patched function: 1---static int ea_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.s---ea_read_packet---before
function id: 2
function flag: True
There are 353 instructions for function: ea_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '514', 'end': 525}, 'before': {'start': '508', 'end': 516}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.o---before
The extraction of function: process_ea_header
There is no function: process_ea_header in binary /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.o
The extraction of function: ea_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 311 nodes and 545 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 353 instructions in binary file.
[4199771, 4199779, 4199809]
The execution time of patched subCFG information extraction via angr: 0:00:01.277019
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "sub" for 0x40125e>, <DisassemblerInsn "je" for 0x401263>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401581>, <DisassemblerInsn "mov" for 0x401585>, <DisassemblerInsn "mov" for 0x401589>, <DisassemblerInsn "mov" for 0x40158d>, <DisassemblerInsn "jmp" for 0x401591>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130e>, <DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "sub" for 0x401316>, <DisassemblerInsn "mov" for 0x40131c>, <DisassemblerInsn "je" for 0x401320>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "sub" for 0x401273>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "je" for 0x40127d>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401563>, <DisassemblerInsn "mov" for 0x401568>, <DisassemblerInsn "mov" for 0x40156c>, <DisassemblerInsn "mov" for 0x401570>, <DisassemblerInsn "mov" for 0x401577>, <DisassemblerInsn "call" for 0x40157c>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015ca>, <DisassemblerInsn "mov" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d4>, <DisassemblerInsn "mov" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015dc>, <DisassemblerInsn "call" for 0x4015e0>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40155b>, <DisassemblerInsn "mov" for 0x40155d>, <DisassemblerInsn "jmp" for 0x401561>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401240>, <DisassemblerInsn "mov" for 0x401244>, <DisassemblerInsn "sub" for 0x401248>, <DisassemblerInsn "mov" for 0x40124e>, <DisassemblerInsn "je" for 0x401252>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "sub" for 0x4012df>, <DisassemblerInsn "je" for 0x4012e4>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x401369>, <DisassemblerInsn "sub" for 0x40136d>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "je" for 0x401377>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x40155b>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x4015ca>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 58, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401563>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x40155b>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}], 'cfg_edge_info': [(56, 27), (57, 58), (68, 58), (82, 54), (58, 54), (53, 54), (54, 56), (60, 54), (72, 54)]}]}
{'ea_read_packet': [4199771, 4199779, 4199809]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/e/libav.libav/eacfe8581d44b3eff13cf681be55f816118718e8/clang_before/Os/electronicarts.o---before
The extraction of function: ea_read_packet
[4199771, 4199779, 4199809]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 99 nodes and 144 edges in CFGEmulated.
It has 97 nodes and 176 edges in CDG.
It has 1478 nodes and 1793 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199771, 4199779, 4199809]
{4199809, 4199298, 4199043, 4199045, 4198538, 4199180, 4198924, 4199182, 4199439, 4199313, 4199827, 4199324, 4199711, 4199968, 4199077, 4199206, 4198950, 4199208, 4198697, 4199079, 4199847, 4198830, 4199600, 4198707, 4199219, 4199221, 4199991, 4199352, 4199996, 4199613, 4198974, 4198976, 4199105, 4199489, 4198723, 4199365, 4199882, 4199243, 4199626, 4198733, 4199506, 4198739, 4199000, 4198873, 4199002, 4199771, 4199131, 4199129, 4198749, 4199387, 4198753, 4199779, 4199267, 4199269, 4199909, 4199017, 4199146, 4199019, 4199148, 4198890, 4199922, 4199410, 4199420, 4199293, 4199678}
[79, 24, 68, 42, 73, 92, 16, 22, 93, 75, 87, 11, 14, 13, 31, 64, 15, 20, 19, 86, 78, 58, 23, 84, 81, 4, 43, 62, 95, 33, 61, 70, 63, 91, 48, 34, 21, 97, 50, 32, 41, 76, 55, 88, 0, 30, 71, 69, 17, 9, 85, 39, 82, 51, 65, 96, 66, 52, 10, 57, 90, 59, 35, 80, 3, 12, 54, 26, 29, 45, 36, 83, 27, 53, 60, 94, 7, 56, 72, 2, 74, 77, 49, 46, 8]
The execution time of patched slicing information extraction via angr: 0:00:05.883192
{'ea_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012d9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013c3>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "sub" for 0x40125e>, <DisassemblerInsn "je" for 0x401263>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011e8>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401283>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401349>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013b6>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013ed>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40134b>, <DisassemblerInsn "mov" for 0x40134f>, <DisassemblerInsn "sub" for 0x401353>, <DisassemblerInsn "mov" for 0x401359>, <DisassemblerInsn "je" for 0x40135d>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012a5>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401382>, <DisassemblerInsn "mov" for 0x401387>, <DisassemblerInsn "call" for 0x40138c>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "add" for 0x40116d>, <DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "test" for 0x401186>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "je" for 0x40118c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011ac>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40139c>, <DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013a8>, <DisassemblerInsn "mov" for 0x4013ac>, <DisassemblerInsn "mov" for 0x4013ae>, <DisassemblerInsn "test" for 0x4013b2>, <DisassemblerInsn "je" for 0x4013b4>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011d7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401563>, <DisassemblerInsn "mov" for 0x401568>, <DisassemblerInsn "mov" for 0x40156c>, <DisassemblerInsn "mov" for 0x401570>, <DisassemblerInsn "mov" for 0x401577>, <DisassemblerInsn "call" for 0x40157c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e0>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013e6>, <DisassemblerInsn "call" for 0x4013e8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401593>, <DisassemblerInsn "mov" for 0x401598>, <DisassemblerInsn "mov" for 0x40159d>, <DisassemblerInsn "call" for 0x4015a2>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013b8>, <DisassemblerInsn "sub" for 0x4013bc>, <DisassemblerInsn "je" for 0x4013c1>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401328>, <DisassemblerInsn "sub" for 0x40132c>, <DisassemblerInsn "je" for 0x401331>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "sub" for 0x4012c9>, <DisassemblerInsn "mov" for 0x4012cf>, <DisassemblerInsn "je" for 0x4012d3>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014ca>, <DisassemblerInsn "mov" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014d6>, <DisassemblerInsn "mov" for 0x4014de>, <DisassemblerInsn "shl" for 0x4014e2>, <DisassemblerInsn "add" for 0x4014e4>, <DisassemblerInsn "xor" for 0x4014e7>, <DisassemblerInsn "div" for 0x4014e9>, <DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "mov" for 0x4014ed>, <DisassemblerInsn "add" for 0x4014f1>, <DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014f5>, <DisassemblerInsn "jmp" for 0x4014f9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013f2>, <DisassemblerInsn "call" for 0x4013f7>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130e>, <DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "sub" for 0x401316>, <DisassemblerInsn "mov" for 0x40131c>, <DisassemblerInsn "je" for 0x401320>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012ea>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401143>, <DisassemblerInsn "call" for 0x401148>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401413>, <DisassemblerInsn "add" for 0x401417>, <DisassemblerInsn "mov" for 0x40141a>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401422>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "call" for 0x40143c>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401240>, <DisassemblerInsn "mov" for 0x401244>, <DisassemblerInsn "sub" for 0x401248>, <DisassemblerInsn "mov" for 0x40124e>, <DisassemblerInsn "je" for 0x401252>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x401369>, <DisassemblerInsn "sub" for 0x40136d>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "je" for 0x401377>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013fc>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401405>, <DisassemblerInsn "call" for 0x40140a>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "sub" for 0x4014c1>, <DisassemblerInsn "je" for 0x4014c6>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40155b>, <DisassemblerInsn "mov" for 0x40155d>, <DisassemblerInsn "jmp" for 0x401561>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4014c8>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401391>, <DisassemblerInsn "add" for 0x401395>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "mov" for 0x40139c>, <DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013a8>, <DisassemblerInsn "mov" for 0x4013ac>, <DisassemblerInsn "mov" for 0x4013ae>, <DisassemblerInsn "test" for 0x4013b2>, <DisassemblerInsn "je" for 0x4013b4>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "cmp" for 0x401445>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "jl" for 0x40144c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013d9>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401620>, <DisassemblerInsn "mov" for 0x401625>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x40162b>, <DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "call" for 0x401632>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40120a>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401129>, <DisassemblerInsn "call" for 0x40112e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015ba>, <DisassemblerInsn "xor" for 0x4015be>, <DisassemblerInsn "mov" for 0x4015c0>, <DisassemblerInsn "mov" for 0x4015c4>, <DisassemblerInsn "jmp" for 0x4015c8>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012ab>, <DisassemblerInsn "sub" for 0x4012af>, <DisassemblerInsn "mov" for 0x4012b5>, <DisassemblerInsn "je" for 0x4012b9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401224>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401333>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40108a>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401096>, <DisassemblerInsn "mov" for 0x40109a>, <DisassemblerInsn "mov" for 0x40109f>, <DisassemblerInsn "mov" for 0x4010a3>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "add" for 0x4010ba>, <DisassemblerInsn "mov" for 0x4010be>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d2>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "mov" for 0x4010e1>, <DisassemblerInsn "add" for 0x4010e4>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "mov" for 0x4010f0>, <DisassemblerInsn "add" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "add" for 0x401102>, <DisassemblerInsn "mov" for 0x401106>, <DisassemblerInsn "mov" for 0x40110e>, <DisassemblerInsn "add" for 0x401111>, <DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "add" for 0x40111d>, <DisassemblerInsn "mov" for 0x401121>, <DisassemblerInsn "mov" for 0x401129>, <DisassemblerInsn "call" for 0x40112e>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015a7>, <DisassemblerInsn "add" for 0x4015ab>, <DisassemblerInsn "xor" for 0x4015ae>, <DisassemblerInsn "mov" for 0x4015b0>, <DisassemblerInsn "mov" for 0x4015b4>, <DisassemblerInsn "jmp" for 0x4015b8>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401269>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401581>, <DisassemblerInsn "mov" for 0x401585>, <DisassemblerInsn "mov" for 0x401589>, <DisassemblerInsn "mov" for 0x40158d>, <DisassemblerInsn "jmp" for 0x401591>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ae>, <DisassemblerInsn "sub" for 0x4011b2>, <DisassemblerInsn "je" for 0x4011b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40163c>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "ret" for 0x401647>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401326>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401422>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "call" for 0x40143c>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012f0>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "sub" for 0x4012f8>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "mov" for 0x401302>, <DisassemblerInsn "je" for 0x401306>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401477>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "movsxd" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401480>, <DisassemblerInsn "imul" for 0x401484>, <DisassemblerInsn "movsxd" for 0x40148b>, <DisassemblerInsn "cqo" for 0x40148e>, <DisassemblerInsn "idiv" for 0x401490>, <DisassemblerInsn "mov" for 0x401493>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149e>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a3>, <DisassemblerInsn "sub" for 0x4014a7>, <DisassemblerInsn "je" for 0x4014ac>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401258>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40137d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40151f>, <DisassemblerInsn "mov" for 0x401527>, <DisassemblerInsn "mov" for 0x40152b>, <DisassemblerInsn "mov" for 0x40152f>, <DisassemblerInsn "mov" for 0x401537>, <DisassemblerInsn "mov" for 0x40153f>, <DisassemblerInsn "imul" for 0x401541>, <DisassemblerInsn "xor" for 0x401544>, <DisassemblerInsn "div" for 0x401546>, <DisassemblerInsn "mov" for 0x401548>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "add" for 0x40154e>, <DisassemblerInsn "mov" for 0x401550>, <DisassemblerInsn "mov" for 0x401552>, <DisassemblerInsn "jmp" for 0x401556>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40120c>, <DisassemblerInsn "mov" for 0x401210>, <DisassemblerInsn "sub" for 0x401214>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "je" for 0x40121e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401192>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401226>, <DisassemblerInsn "mov" for 0x40122a>, <DisassemblerInsn "sub" for 0x40122e>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "je" for 0x401238>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "sub" for 0x40133d>, <DisassemblerInsn "mov" for 0x401343>, <DisassemblerInsn "je" for 0x401347>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4014bb>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015ca>, <DisassemblerInsn "mov" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d4>, <DisassemblerInsn "mov" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015dc>, <DisassemblerInsn "call" for 0x4015e0>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "sub" for 0x4012df>, <DisassemblerInsn "je" for 0x4012e4>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "call" for 0x401158>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "sub" for 0x40119c>, <DisassemblerInsn "mov" for 0x4011a2>, <DisassemblerInsn "je" for 0x4011a6>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4014ae>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011bf>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "sub" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011cd>, <DisassemblerInsn "je" for 0x4011d1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013c5>, <DisassemblerInsn "mov" for 0x4013c9>, <DisassemblerInsn "sub" for 0x4013cd>, <DisassemblerInsn "mov" for 0x4013d3>, <DisassemblerInsn "je" for 0x4013d7>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e5>, <DisassemblerInsn "cmp" for 0x4015e9>, <DisassemblerInsn "mov" for 0x4015ec>, <DisassemblerInsn "jl" for 0x4015f0>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "sub" for 0x4011dd>, <DisassemblerInsn "je" for 0x4011e2>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40130c>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401637>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014fe>, <DisassemblerInsn "mov" for 0x401502>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "mov" for 0x40150e>, <DisassemblerInsn "add" for 0x401512>, <DisassemblerInsn "mov" for 0x401514>, <DisassemblerInsn "mov" for 0x401516>, <DisassemblerInsn "jmp" for 0x40151a>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40123e>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401363>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115d>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "add" for 0x40116d>, <DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "test" for 0x401186>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "je" for 0x40118c>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "sub" for 0x4014b4>, <DisassemblerInsn "je" for 0x4014b9>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "sub" for 0x401273>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "je" for 0x40127d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401133>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "mov" for 0x40113a>, <DisassemblerInsn "cmp" for 0x40113e>, <DisassemblerInsn "je" for 0x401141>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401285>, <DisassemblerInsn "mov" for 0x401289>, <DisassemblerInsn "mov" for 0x40128d>, <DisassemblerInsn "sub" for 0x401291>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "je" for 0x40129f>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012bf>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015f2>, <DisassemblerInsn "mov" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401602>, <DisassemblerInsn "mov" for 0x40160a>, <DisassemblerInsn "mov" for 0x401612>, <DisassemblerInsn "mov" for 0x401614>, <DisassemblerInsn "or" for 0x401616>, <DisassemblerInsn "mov" for 0x401618>, <DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "jmp" for 0x40161e>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ea>, <DisassemblerInsn "mov" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "sub" for 0x4011f6>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "je" for 0x401204>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114d>, <DisassemblerInsn "jmp" for 0x401151>]'}], 'cfg_block_detailed_info': [{'block_Idx': 79, 'blockInsts': ['<jmp~~0x4012db>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x4013c5>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x54475666>', '<je~~0x40155b>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4011ea>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x401285>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x40134b>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4013b8>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x401637>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c454353>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x4012a7>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x20>', '<call~~0x500028>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4011ae>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4013db>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4011d9>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x3c]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~rsi, -8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500028>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<sub~~eax, 0x10012>', '<je~~0x4013f2>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x684e5331>', '<je~~0x401382>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x654e5331>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<shl~~eax, 1>', '<add~~eax, -0x18>', '<xor~~edx, edx>', '<div~~dword ptr [rdi]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40163c>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6849564d>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 81, 'blockInsts': ['<jmp~~0x4012ec>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500018>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<add~~ecx, -0xc>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x54475170>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x73514754>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~esi, 8>', '<call~~0x500028>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x15001>', '<je~~0x4014fe>']}, {'block_Idx': 70, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<jmp~~0x401563>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x40151f>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c]>', '<add~~eax, -0x28>', '<mov~~dword ptr [rsp + 0x48], eax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x48]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x38], eax>', '<test~~eax, eax>', '<je~~0x4013db>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x40163c>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x401422>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4011bf>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 1>', '<call~~0x500038>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x40120c>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x50]>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x4015ca>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x644e5331>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x40139c>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x401226>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x401335>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xc8>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rsi>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<add~~rsi, 0x20>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rcx, rax>', '<add~~rcx, 0x1c>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x30>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x28>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<add~~ecx, -0x10>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x4015ca>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x40126b>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jmp~~0x4015ca>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4443546d>', '<je~~0x401593>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<add~~rsp, 0xc8>', '<ret~~>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x401328>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~dword ptr [rsp + 0x20], edx>', '<call~~0x500050>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x6843504d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x4015ca>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<movsxd~~rax, dword ptr [rax]>', '<mov~~esi, eax>', '<mov~~dword ptr [rsp + 0x14], esi>', '<imul~~rax, rax, 0x15f90>', '<movsxd~~rsi, dword ptr [rdx]>', '<cqo~~>', '<idiv~~rsi>', '<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<sub~~eax, 0x10012>', '<je~~0x4014fe>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x40125a>']}, {'block_Idx': 96, 'blockInsts': ['<jmp~~0x401620>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x14]>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~edi, dword ptr [rdi]>', '<imul~~edi, dword ptr [rdx]>', '<xor~~edx, edx>', '<div~~edi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40163c>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454453>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x40139c>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x401194>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x4e454553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x6c444353>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x40139c>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x4014bd>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~dword ptr [rsp + 8], eax>', '<call~~0x500050>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x6649564d>', '<je~~0x40155b>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~0x500008>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x43444e53>', '<mov~~dword ptr [rsp + 0x48], eax>', '<je~~0x40139c>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x4014b0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x444e4553>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x38]>', '<sub~~ecx, 0x15001>', '<mov~~dword ptr [rsp + 0x30], eax>', '<je~~0x4013f2>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jl~~0x40163c>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<sub~~eax, 0x4630564d>', '<je~~0x4015ba>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x40130e>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x401129>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40163c>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x401240>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401365>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<add~~eax, -8>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, 0xfffffffb>', '<mov~~dword ptr [rsp + 0x58], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<je~~0x40163c>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18]>', '<sub~~eax, 0x1100a>', '<je~~0x4014ca>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<sub~~ecx, 0x5447566b>', '<mov~~dword ptr [rsp + 0x3c], eax>', '<je~~0x401563>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401153>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x54514970>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x4015ca>']}, {'block_Idx': 77, 'blockInsts': ['<jmp~~0x4012c1>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsi], edi>', '<or~~edx, dword ptr [rcx]>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jmp~~0x40163c>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x64]>', '<sub~~edx, 0x4b30564d>', '<mov~~dword ptr [rsp + 0x40], ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<je~~0x4015ca>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], eax>', '<jmp~~0x401161>']}], 'cfg_edge_info': [(55, 57), (72, 73), (64, 69), (50, 52), (70, 64), (91, 16), (17, 21), (7, 10), (96, 97), (73, 74), (61, 63), (87, 91), (29, 34), (46, 50), (8, 11), (2, 4), (74, 75), (49, 9), (41, 35), (53, 9), (90, 92), (14, 17), (86, 88), (11, 9), (80, 81), (66, 9), (75, 76), (68, 70), (69, 35), (85, 86), (26, 9), (36, 41), (71, 72), (81, 82), (59, 61), (82, 35), (12, 13), (60, 62), (77, 78), (0, 2), (48, 51), (16, 19), (88, 90), (82, 83), (45, 9), (43, 48), (91, 15), (78, 79), (32, 2), (23, 33), (83, 84), (13, 16), (7, 9), (62, 64), (79, 80), (51, 54), (20, 30), (22, 27), (56, 59), (3, 7), (52, 55), (86, 87), (39, 48), (19, 24), (46, 35), (58, 9), (4, 8), (17, 20), (90, 13), (36, 42), (93, 94), (30, 35), (74, 35), (15, 22), (61, 53), (84, 85), (97, 27), (52, 13), (2, 3), (27, 32), (48, 9), (94, 95), (29, 23), (51, 53), (35, 45), (95, 96), (57, 60), (45, 49), (62, 65), (56, 58), (24, 29), (78, 9), (80, 70), (93, 9), (11, 10), (19, 23), (92, 93), (68, 71), (63, 66), (84, 64), (95, 64), (42, 46), (33, 43), (31, 36), (65, 68), (76, 13), (57, 9), (76, 77), (54, 56), (13, 15), (72, 64)], 'cdg_edge_info': [(72, 73), (13, 33), (62, 35), (19, 9), (2, 11), (17, 30), (36, 46), (19, 48), (29, 43), (2, 4), (74, 75), (91, 27), (13, 19), (91, 2), (86, 88), (46, 52), (80, 81), (95, 45), (84, 45), (68, 70), (80, 35), (62, 69), (82, 35), (68, 45), (46, 45), (86, 90), (48, 51), (72, 45), (68, 72), (13, 23), (91, 43), (93, 95), (82, 83), (74, 45), (91, 15), (84, 86), (78, 79), (19, 29), (62, 64), (36, 45), (72, 74), (29, 33), (80, 69), (95, 97), (51, 56), (86, 87), (95, 35), (13, 48), (84, 35), (13, 2), (2, 8), (62, 68), (17, 45), (56, 61), (68, 35), (46, 35), (13, 32), (80, 64), (52, 57), (72, 35), (80, 82), (17, 20), (91, 33), (90, 13), (76, 78), (93, 94), (74, 35), (61, 53), (84, 85), (13, 43), (86, 91), (52, 13), (62, 45), (2, 3), (36, 35), (95, 69), (84, 69), (82, 84), (13, 27), (29, 23), (51, 53), (95, 32), (78, 80), (95, 96), (91, 19), (57, 60), (74, 76), (68, 69), (45, 49), (62, 65), (56, 58), (72, 69), (90, 93), (80, 70), (61, 66), (2, 7), (57, 62), (17, 35), (68, 71), (91, 48), (80, 45), (95, 64), (84, 64), (95, 27), (82, 45), (91, 23), (91, 32), (68, 64), (76, 13), (95, 2), (13, 15), (72, 64)], 'ddg_edge_info': [(64, 69), (4, 64), (4, 9), (70, 64), (0, 51), (2, 57), (32, 3), (11, 69), (3, 86), (2, 11), (11, 78), (3, 95), (0, 23), (0, 87), (4, 57), (15, 32), (87, 91), (3, 70), (0, 53), (3, 15), (8, 11), (11, 62), (29, 43), (4, 23), (2, 68), (4, 87), (3, 97), (49, 9), (53, 9), (11, 46), (3, 72), (2, 52), (3, 17), (51, 66), (0, 64), (11, 9), (91, 29), (48, 58), (3, 90), (66, 9), (3, 35), (69, 35), (4, 43), (4, 52), (2, 36), (82, 35), (11, 57), (3, 74), (0, 2), (20, 35), (3, 19), (0, 66), (4, 82), (43, 9), (87, 43), (15, 2), (4, 36), (4, 91), (91, 43), (2, 84), (0, 32), (2, 93), (45, 9), (91, 15), (43, 48), (4, 11), (3, 76), (51, 61), (4, 20), (48, 53), (23, 33), (4, 84), (43, 66), (4, 29), (32, 2), (4, 93), (62, 64), (2, 86), (2, 95), (0, 43), (11, 52), (29, 33), (4, 68), (20, 30), (3, 78), (87, 29), (3, 23), (32, 4), (3, 87), (4, 86), (35, 9), (4, 95), (11, 82), (7, 11), (11, 91), (90, 91), (0, 91), (3, 62), (3, 7), (51, 56), (4, 70), (4, 15), (3, 80), (97, 32), (43, 61), (4, 97), (2, 8), (52, 91), (2, 72), (0, 20), (2, 17), (19, 33), (11, 84), (3, 46), (11, 93), (2, 90), (46, 35), (3, 64), (3, 9), (87, 15), (51, 58), (58, 9), (4, 8), (4, 72), (4, 17), (3, 82), (4, 90), (0, 4), (4, 35), (2, 74), (30, 35), (74, 35), (11, 95), (3, 57), (4, 46), (43, 56), (4, 74), (4, 19), (0, 15), (48, 9), (2, 76), (0, 33), (97, 2), (0, 97), (11, 97), (51, 53), (3, 68), (87, 19), (35, 45), (4, 76), (43, 58), (64, 35), (91, 19), (11, 72), (45, 49), (48, 66), (2, 78), (3, 43), (76, 91), (11, 90), (0, 35), (3, 52), (78, 9), (43, 51), (4, 78), (93, 9), (2, 62), (2, 7), (3, 91), (11, 74), (3, 36), (2, 80), (95, 64), (84, 64), (4, 62), (33, 43), (43, 53), (87, 23), (35, 49), (0, 49), (2, 46), (4, 80), (0, 58), (0, 3), (3, 20), (3, 84), (3, 29), (3, 93), (11, 76), (57, 9), (2, 82), (11, 30), (72, 64)]}]}
{'process_ea_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'ea_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 293, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%eax, 0x3c(%rsp)                  # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'jmp\t.LBB2_15'}, {'instIndex': 299, 'instruction': 'movq\t$-8, %rsi'}, {'instIndex': 300, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 301, 'instruction': 'callq\turl_fseek@PLT'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB2_18'}]}]}

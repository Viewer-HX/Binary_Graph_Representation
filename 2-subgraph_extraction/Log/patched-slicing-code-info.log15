The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a2c4b2cc9a794006318d3d4c24c324bb7810f9d6/patch_info.txt
{'1': {'before': 'a/libavcodec/tmv.c', 'after': 'b/libavcodec/tmv.c'}}
{'1': [{'before': '-52,6', 'after': '+52,13', 'function': 'static int tmv_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a2c4b2cc9a794006318d3d4c24c324bb7810f9d6---b/libavcodec/tmv.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a2c4b2cc9a794006318d3d4c24c324bb7810f9d6---a/libavcodec/tmv.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a1ba71aace8cca10ba2a921caa105b17370b0d27/patch_info.txt
{'1': {'before': 'a/libavformat/rtsp.c', 'after': 'b/libavformat/rtsp.c'}}
{'1': [{'before': '-1653,7', 'after': '+1653,7', 'function': 'static int udp_read_packet'}, {'before': '-1670,12', 'after': '+1670,12', 'function': 'static int udp_read_packet'}, {'before': '-1687,7', 'after': '+1687,8', 'function': 'static int udp_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a1ba71aace8cca10ba2a921caa105b17370b0d27---b/libavformat/rtsp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a1ba71aace8cca10ba2a921caa105b17370b0d27---a/libavformat/rtsp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ab76d9f628ad46e1d3bbf26c5bf1f87083f239ab/patch_info.txt
{'1': {'before': 'a/libavformat/http.c', 'after': 'b/libavformat/http.c'}}
{'1': [{'before': '-901,6', 'after': '+901,9', 'function': 'static int64_t http_seek'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ab76d9f628ad46e1d3bbf26c5bf1f87083f239ab---b/libavformat/http.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ab76d9f628ad46e1d3bbf26c5bf1f87083f239ab---a/libavformat/http.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/adc03a34069efe13857d580e3d973121b7b8a8d3/patch_info.txt
{'1': {'before': 'a/libavformat/rtpdec_xiph.c', 'after': 'b/libavformat/rtpdec_xiph.c'}}
{'1': [{'before': '-172,6', 'after': '+172,11', 'function': 'static int xiph_handle_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/adc03a34069efe13857d580e3d973121b7b8a8d3---b/libavformat/rtpdec_xiph.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/adc03a34069efe13857d580e3d973121b7b8a8d3---a/libavformat/rtpdec_xiph.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ace38c36bf366038c96e33a84e7525318e9da7d1/patch_info.txt
{'1': {'before': 'a/libavcodec/indeo5.c', 'after': 'b/libavcodec/indeo5.c'}}
{'1': [{'before': '-648,53', 'after': '+650,38', 'function': 'static int decode_band'}, {'before': '-729,6', 'after': '+716,9', 'function': 'static av_cold int decode_init'}, {'before': '-766,9', 'after': '+756,7', 'function': 'static int decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ace38c36bf366038c96e33a84e7525318e9da7d1---b/libavcodec/indeo5.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ace38c36bf366038c96e33a84e7525318e9da7d1---a/libavcodec/indeo5.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac6eab1496aad6f8b09deabbef4fe5fd829e142d/patch_info.txt
{}
{}
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac0ab12fe9b15f04af2e6b2dd8f3e4a7bfad752b/patch_info.txt
{'1': {'before': 'a/libavformat/mxfenc.c', 'after': 'b/libavformat/mxfenc.c'}}
{'1': [{'before': '-230,11', 'after': '+230,10', 'function': 'static void mxf_write_metadata_key'}, {'before': '-426,8', 'after': '+425,8', 'function': 'static void mxf_write_package'}, {'before': '-435,9', 'after': '+434,6', 'function': 'static void mxf_write_track'}, {'before': '-480,10', 'after': '+476,8', 'function': 'static void mxf_write_track'}, {'before': '-495,14', 'after': '+489,12', 'function': 'static void mxf_write_common_fields'}, {'before': '-518,15', 'after': '+510,13', 'function': 'static void mxf_write_sequence'}, {'before': '-607,9', 'after': '+597,8', 'function': 'static void mxf_write_generic_desc'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac0ab12fe9b15f04af2e6b2dd8f3e4a7bfad752b---b/libavformat/mxfenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac0ab12fe9b15f04af2e6b2dd8f3e4a7bfad752b---a/libavformat/mxfenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/patch_info.txt
{'1': {'before': 'a/ffserver.c', 'after': 'b/ffserver.c'}}
{'1': [{'before': '-2346,7', 'after': '+2346,7', 'function': 'static int http_prepare_data'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d---b/ffserver.c
The case of compiler gcc with optimization no.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d---a/ffserver.c
The case of compiler gcc with optimization no.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffserver.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a5ba4cedf22b59f6a0b9b74256539f614b582e8d/clang_before/Os: directory not exists.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ad4d0b9ef28d6b2036667973e00728da3b199486/patch_info.txt
{'1': {'before': 'a/libavcodec/truemotion2.c', 'after': 'b/libavcodec/truemotion2.c'}}
{'1': [{'before': '-768,23', 'after': '+768,33', 'function': 'static int decode_frame'}, {'before': '-798,6', 'after': '+808,7', 'function': 'static int decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ad4d0b9ef28d6b2036667973e00728da3b199486---b/libavcodec/truemotion2.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ad4d0b9ef28d6b2036667973e00728da3b199486---a/libavcodec/truemotion2.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a048febdc4fb0e48f8c47857a1ea1694ede05b9d/patch_info.txt
{'1': {'before': 'a/libavformat/nutdec.c', 'after': 'b/libavformat/nutdec.c'}, '2': {'before': 'a/libavformat/nutenc.c', 'after': 'b/libavformat/nutenc.c'}}
{'1': [{'before': '-325,8', 'after': '+325,11', 'function': 'static int decode_stream_header'}], '2': [{'before': '-394,7', 'after': '+394,7', 'function': 'static int write_streamheader'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a048febdc4fb0e48f8c47857a1ea1694ede05b9d---b/libavformat/nutdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a048febdc4fb0e48f8c47857a1ea1694ede05b9d---a/libavformat/nutdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a048febdc4fb0e48f8c47857a1ea1694ede05b9d---b/libavformat/nutenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a048febdc4fb0e48f8c47857a1ea1694ede05b9d---a/libavformat/nutenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/patch_info.txt
{'1': {'before': 'a/libavformat/tcp.c', 'after': 'b/libavformat/tcp.c'}}
{'1': [{'before': '-33,11', 'after': '+33,11', 'function': 'int resolve_host'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d---b/libavformat/tcp.c
The case of compiler gcc with optimization no.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/no/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/no/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O0.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O0/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O0/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O1.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O1/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O1/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O2.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O2/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O2/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O3.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O3/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/O3/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization Os.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/Os/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_after/Os/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization no.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/no/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/no/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O0.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O0/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O0/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O1.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O1/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O1/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O2.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O2/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O2/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O3.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O3/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/O3/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization Os.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/Os/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_after/Os/tcp.o
Binary file does not exist.
{'resolve_host': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d---a/libavformat/tcp.c
The case of compiler gcc with optimization no.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/no/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/no/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O0.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O0/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O0/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O1.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O1/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O1/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O2.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O2/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O2/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization O3.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O3/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/O3/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler gcc with optimization Os.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/Os/tcp_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/gcc_before/Os/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization no.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/no/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/no/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O0.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O0/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O0/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O1.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O1/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O1/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O2.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O2/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O2/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization O3.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O3/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/O3/tcp.o
Binary file does not exist.
{'resolve_host': []}
The case of compiler clang with optimization Os.
Patched source code file: tcp.c
Patched function: 1---int resolve_host 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/Os/tcp.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a33cc9511b968bee9a2e64644b7c17090eb4583d/clang_before/Os/tcp.o
Binary file does not exist.
{'resolve_host': []}
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/patch_info.txt
{'1': {'before': 'a/libavfilter/vf_yadif.c', 'after': 'b/libavfilter/vf_yadif.c'}}
{'1': [{'before': '-316,11', 'after': '+316,15', 'function': 'static int poll_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435---b/libavfilter/vf_yadif.c
The case of compiler gcc with optimization no.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/no/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/no/vf_yadif_gcc.s---poll_frame---after
function id: 29
function flag: True
There are 89 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jg\t.L90'}, {'instIndex': 22, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L89'}, {'instIndex': 24, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L91'}, {'instIndex': 26, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L91'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 37, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 38, 'instruction': 'jns\t.L92'}, {'instIndex': 39, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 40, 'instruction': 'jmp\t.L89'}, {'instIndex': 41, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 46, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'jg\t.L91'}, {'instIndex': 50, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 51, 'instruction': 'jmp\t.L89'}, {'instIndex': 52, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 54, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 55, 'instruction': 'jne\t.L93'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'je\t.L93'}, {'instIndex': 58, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 63, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/no/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jg\t.L90'}, {'instIndex': 22, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L89'}, {'instIndex': 24, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L91'}, {'instIndex': 26, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L91'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 37, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 38, 'instruction': 'jns\t.L92'}, {'instIndex': 39, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 40, 'instruction': 'jmp\t.L89'}, {'instIndex': 41, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 46, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'jg\t.L91'}, {'instIndex': 50, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 51, 'instruction': 'jmp\t.L89'}, {'instIndex': 52, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 54, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 55, 'instruction': 'jne\t.L93'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'je\t.L93'}, {'instIndex': 58, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 63, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O0/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O0/vf_yadif_gcc.s---poll_frame---after
function id: 29
function flag: True
There are 89 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jg\t.L90'}, {'instIndex': 22, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L89'}, {'instIndex': 24, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L91'}, {'instIndex': 26, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L91'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 37, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 38, 'instruction': 'jns\t.L92'}, {'instIndex': 39, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 40, 'instruction': 'jmp\t.L89'}, {'instIndex': 41, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 46, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'jg\t.L91'}, {'instIndex': 50, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 51, 'instruction': 'jmp\t.L89'}, {'instIndex': 52, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 54, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 55, 'instruction': 'jne\t.L93'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'je\t.L93'}, {'instIndex': 58, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 63, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O0/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jg\t.L90'}, {'instIndex': 22, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L89'}, {'instIndex': 24, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 25, 'instruction': 'jne\t.L91'}, {'instIndex': 26, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L91'}, {'instIndex': 30, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 37, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 38, 'instruction': 'jns\t.L92'}, {'instIndex': 39, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 40, 'instruction': 'jmp\t.L89'}, {'instIndex': 41, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 45, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 46, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'jg\t.L91'}, {'instIndex': 50, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 51, 'instruction': 'jmp\t.L89'}, {'instIndex': 52, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 54, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 55, 'instruction': 'jne\t.L93'}, {'instIndex': 56, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 57, 'instruction': 'je\t.L93'}, {'instIndex': 58, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 63, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O1/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O1/vf_yadif_gcc.s---poll_frame---after
function id: 229
function flag: True
There are 275 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 16, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 17, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 18, 'instruction': 'jle\t.L84'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'je\t.L92'}, {'instIndex': 21, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 22, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 23, 'instruction': 'je\t.L87'}, {'instIndex': 24, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 25, 'instruction': 'je\t.L93'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 39, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 40, 'instruction': 'jne\t.L87'}, {'instIndex': 41, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 44, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 45, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'js\t.L84'}, {'instIndex': 47, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 48, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 50, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 51, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'jg\t.L86'}, {'instIndex': 53, 'instruction': 'jmp\t.L84'}, {'instIndex': 54, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 55, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 56, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 58, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O1/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 6, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 16, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 17, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 18, 'instruction': 'jle\t.L84'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'je\t.L92'}, {'instIndex': 21, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 22, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 23, 'instruction': 'je\t.L87'}, {'instIndex': 24, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 25, 'instruction': 'je\t.L93'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 39, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 40, 'instruction': 'jne\t.L87'}, {'instIndex': 41, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 43, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 44, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 45, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'js\t.L84'}, {'instIndex': 47, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 48, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 50, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 51, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'jg\t.L86'}, {'instIndex': 53, 'instruction': 'jmp\t.L84'}, {'instIndex': 54, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 55, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 56, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 58, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O2/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O2/vf_yadif_gcc.s---poll_frame---after
function id: 127
function flag: True
There are 630 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jle\t.L41'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 22, 'instruction': 'je\t.L49'}, {'instIndex': 23, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 24, 'instruction': 'je\t.L50'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'jne\t.L44'}, {'instIndex': 42, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 45, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 46, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'js\t.L41'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 49, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 50, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 51, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 52, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'jle\t.L41'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 55, 'instruction': 'jmp\t.L43'}, {'instIndex': 56, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 57, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 59, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 60, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O2/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jle\t.L41'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 22, 'instruction': 'je\t.L49'}, {'instIndex': 23, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 24, 'instruction': 'je\t.L50'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'jne\t.L44'}, {'instIndex': 42, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 45, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 46, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'js\t.L41'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 49, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 50, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 51, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 52, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'jle\t.L41'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 55, 'instruction': 'jmp\t.L43'}, {'instIndex': 56, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 57, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 59, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 60, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O3/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O3/vf_yadif_gcc.s---poll_frame---after
function id: 139
function flag: True
There are 639 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jle\t.L40'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 22, 'instruction': 'je\t.L48'}, {'instIndex': 23, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 24, 'instruction': 'je\t.L49'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'jne\t.L43'}, {'instIndex': 42, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 45, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 46, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'js\t.L40'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 49, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 50, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 51, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 52, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'jle\t.L40'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 55, 'instruction': 'jmp\t.L42'}, {'instIndex': 56, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 57, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 59, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 60, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/O3/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 19, 'instruction': 'jle\t.L40'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 22, 'instruction': 'je\t.L48'}, {'instIndex': 23, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 24, 'instruction': 'je\t.L49'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'jne\t.L43'}, {'instIndex': 42, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 43, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 44, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 45, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 46, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'js\t.L40'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 49, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 50, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 51, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 52, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'jle\t.L40'}, {'instIndex': 54, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 55, 'instruction': 'jmp\t.L42'}, {'instIndex': 56, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 57, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 59, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 60, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/Os/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/Os/vf_yadif_gcc.s---poll_frame---after
function id: 145
function flag: True
There are 536 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 11, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 12, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 13, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'jle\t.L42'}, {'instIndex': 15, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 16, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 17, 'instruction': 'jne\t.L44'}, {'instIndex': 18, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 19, 'instruction': 'jne\t.L44'}, {'instIndex': 20, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 22, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 23, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 24, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'js\t.L42'}, {'instIndex': 26, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 29, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jle\t.L42'}, {'instIndex': 32, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 33, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 34, 'instruction': 'jne\t.L45'}, {'instIndex': 35, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 36, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 37, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 39, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_after/Os/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 11, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 12, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 13, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'jle\t.L42'}, {'instIndex': 15, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 16, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 17, 'instruction': 'jne\t.L44'}, {'instIndex': 18, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 19, 'instruction': 'jne\t.L44'}, {'instIndex': 20, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 22, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 23, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 24, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'js\t.L42'}, {'instIndex': 26, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 29, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jle\t.L42'}, {'instIndex': 32, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 33, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 34, 'instruction': 'jne\t.L45'}, {'instIndex': 35, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 36, 'instruction': 'movl\t$0x149, %edx'}, {'instIndex': 37, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 39, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/no/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/no/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 85 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jg\t.LBB7_4'}, {'instIndex': 19, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 34, 'instruction': 'jge\t.LBB7_8'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 37, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'jg\t.LBB7_10'}, {'instIndex': 46, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 48, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 50, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 52, 'instruction': 'jne\t.LBB7_13'}, {'instIndex': 53, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'jne\t.LBB7_14'}, {'instIndex': 55, 'instruction': 'jmp\t.LBB7_15'}, {'instIndex': 56, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 57, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 59, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/no/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/no/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 448 nodes and 712 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 85 instructions in binary file.
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
The execution time of patched subCFG information extraction via angr: 0:00:00.496057
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40062e>, <DisassemblerInsn "lea" for 0x400635>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "lea" for 0x400641>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jg" for 0x40059f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "cmp" for 0x4005d9>, <DisassemblerInsn "jge" for 0x4005dc>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005ba>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005ae>, <DisassemblerInsn "jne" for 0x4005b3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "call" for 0x4005fa>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "cmp" for 0x40061e>, <DisassemblerInsn "jne" for 0x400623>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "cmp" for 0x400603>, <DisassemblerInsn "jg" for 0x400608>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "jmp" for 0x4005e6>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400625>, <DisassemblerInsn "jne" for 0x40062a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "jmp" for 0x4005a9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400617>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40064d>, <DisassemblerInsn "cmp" for 0x400652>, <DisassemblerInsn "je" for 0x400656>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x40069c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<lea~~rdi, [rip + 0x326f]>', '<lea~~rsi, [rip + 0x327c]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x3287]>', '<call~~0x5000a0>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x4005ae>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005eb>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x40064d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400619>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x400619>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x40062c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x400617>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x40062e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x400619>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400684>']}], 'cfg_edge_info': [(22, 8), (12, 16), (5, 4), (0, 2), (11, 14), (19, 21), (1, 3), (16, 19), (6, 8), (12, 15), (3, 6), (8, 11), (0, 1), (2, 4), (10, 11), (15, 4), (7, 9), (6, 7), (3, 5), (9, 12), (8, 10), (10, 13), (19, 22), (21, 4), (7, 8)]}]}
{'poll_frame': [4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/no/vf_yadif.o---after
The extraction of function: poll_frame
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 40 edges in CFGEmulated.
It has 28 nodes and 37 edges in CDG.
It has 317 nodes and 377 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
{4195714, 4195972, 4195850, 4195734, 4195863, 4195865, 4195996, 4195745, 4195877, 4195884, 4195758, 4195886, 4195765, 4195777, 4195917, 4195664, 4195797, 4195928, 4195806, 4195940, 4195819, 4195701, 4195962, 4195839}
[15, 6, 14, 22, 10, 18, 7, 20, 16, 9, 4, 0, 12, 8, 5, 1, 27, 19, 25, 21, 24, 2, 11, 26]
The execution time of patched slicing information extraction via angr: 0:00:02.548216
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40064d>, <DisassemblerInsn "cmp" for 0x400652>, <DisassemblerInsn "je" for 0x400656>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "jmp" for 0x4005a9>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40062e>, <DisassemblerInsn "lea" for 0x400635>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "lea" for 0x400641>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "cmp" for 0x400674>, <DisassemblerInsn "jne" for 0x400678>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "and" for 0x40068f>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "imul" for 0x400695>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005ae>, <DisassemblerInsn "jne" for 0x4005b3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "jmp" for 0x4005e6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "cmp" for 0x4005d9>, <DisassemblerInsn "jge" for 0x4005dc>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "cmp" for 0x40061e>, <DisassemblerInsn "jne" for 0x400623>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005ba>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jg" for 0x40059f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400617>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "cmp" for 0x40065d>, <DisassemblerInsn "je" for 0x400662>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "cmp" for 0x400603>, <DisassemblerInsn "jg" for 0x400608>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "call" for 0x4005fa>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400625>, <DisassemblerInsn "jne" for 0x40062a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "jmp" for 0x400612>]'}], 'cfg_block_detailed_info': [{'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400684>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rip + 0x326f]>', '<lea~~rsi, [rip + 0x327c]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x3287]>', '<call~~0x5000a0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jne~~0x400684>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<and~~ecx, 1>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x400619>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005eb>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x40062c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x40064d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400619>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x4005ae>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400619>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400684>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x400617>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x40069c>']}, {'block_Idx': 11, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x40062e>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}], 'cfg_edge_info': [(16, 20), (5, 7), (21, 25), (0, 2), (8, 9), (19, 18), (9, 11), (11, 14), (20, 4), (5, 6), (12, 15), (27, 9), (0, 1), (2, 4), (24, 4), (1, 5), (26, 4), (6, 4), (7, 9), (16, 21), (15, 19), (25, 27), (22, 18), (22, 24), (9, 12), (8, 10), (11, 12), (10, 16), (19, 22), (7, 8), (15, 18), (25, 26)], 'cdg_edge_info': [(16, 20), (5, 4), (5, 7), (0, 2), (0, 5), (9, 11), (11, 14), (16, 4), (25, 4), (22, 4), (16, 25), (5, 6), (5, 9), (0, 1), (0, 4), (25, 9), (16, 21), (15, 19), (25, 27), (22, 18), (22, 24), (9, 12), (8, 10), (8, 16), (9, 15), (11, 12), (9, 18), (11, 15), (19, 22), (7, 8), (11, 18), (25, 26)], 'ddg_edge_info': [(6, 18), (16, 20), (21, 19), (24, 18), (21, 22), (5, 7), (21, 25), (0, 2), (8, 9), (1, 6), (0, 8), (1, 9), (10, 18), (10, 21), (1, 18), (1, 15), (1, 21), (21, 9), (1, 24), (0, 18), (21, 15), (5, 6), (21, 18), (21, 24), (5, 18), (0, 1), (0, 10), (5, 24), (1, 5), (1, 11), (0, 19), (1, 8), (1, 14), (0, 22), (10, 20), (25, 18), (25, 24), (21, 14), (20, 18), (21, 11), (21, 26), (5, 11), (0, 9), (8, 19), (10, 16), (1, 7), (0, 15), (8, 22), (2, 18), (1, 10), (25, 11), (0, 21), (1, 19), (26, 18), (25, 26), (1, 22)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jg\t.LBB7_4'}, {'instIndex': 19, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 34, 'instruction': 'jge\t.LBB7_8'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 37, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'jg\t.LBB7_10'}, {'instIndex': 46, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 48, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 50, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 52, 'instruction': 'jne\t.LBB7_13'}, {'instIndex': 53, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'jne\t.LBB7_14'}, {'instIndex': 55, 'instruction': 'jmp\t.LBB7_15'}, {'instIndex': 56, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 57, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 59, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O0/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O0/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 85 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jg\t.LBB7_4'}, {'instIndex': 19, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 34, 'instruction': 'jge\t.LBB7_8'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 37, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'jg\t.LBB7_10'}, {'instIndex': 46, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 48, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 50, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 52, 'instruction': 'jne\t.LBB7_13'}, {'instIndex': 53, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'jne\t.LBB7_14'}, {'instIndex': 55, 'instruction': 'jmp\t.LBB7_15'}, {'instIndex': 56, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 57, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 59, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O0/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O0/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 448 nodes and 712 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 85 instructions in binary file.
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
The execution time of patched subCFG information extraction via angr: 0:00:00.517192
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40062e>, <DisassemblerInsn "lea" for 0x400635>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "lea" for 0x400641>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jg" for 0x40059f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "cmp" for 0x4005d9>, <DisassemblerInsn "jge" for 0x4005dc>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005ba>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005ae>, <DisassemblerInsn "jne" for 0x4005b3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "call" for 0x4005fa>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "cmp" for 0x40061e>, <DisassemblerInsn "jne" for 0x400623>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "cmp" for 0x400603>, <DisassemblerInsn "jg" for 0x400608>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "jmp" for 0x4005e6>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400625>, <DisassemblerInsn "jne" for 0x40062a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "jmp" for 0x4005a9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400617>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40064d>, <DisassemblerInsn "cmp" for 0x400652>, <DisassemblerInsn "je" for 0x400656>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x40069c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<lea~~rdi, [rip + 0x326f]>', '<lea~~rsi, [rip + 0x327c]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x3287]>', '<call~~0x5000a0>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x4005ae>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005eb>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x40064d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400619>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x400619>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x40062c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x400617>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x40062e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x400619>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400684>']}], 'cfg_edge_info': [(22, 8), (12, 16), (5, 4), (0, 2), (11, 14), (19, 21), (1, 3), (16, 19), (6, 8), (12, 15), (3, 6), (8, 11), (0, 1), (2, 4), (10, 11), (15, 4), (7, 9), (6, 7), (3, 5), (9, 12), (8, 10), (10, 13), (19, 22), (21, 4), (7, 8)]}]}
{'poll_frame': [4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O0/vf_yadif.o---after
The extraction of function: poll_frame
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 40 edges in CFGEmulated.
It has 28 nodes and 37 edges in CDG.
It has 317 nodes and 377 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195701, 4195714, 4195734, 4195745, 4195758, 4195765, 4195777, 4195797, 4195806, 4195819, 4195839, 4195850, 4195863, 4195865, 4195877, 4195884, 4195886]
{4195714, 4195972, 4195850, 4195734, 4195863, 4195865, 4195996, 4195745, 4195877, 4195884, 4195758, 4195886, 4195765, 4195777, 4195917, 4195664, 4195797, 4195928, 4195806, 4195940, 4195819, 4195701, 4195962, 4195839}
[15, 6, 14, 22, 10, 18, 7, 20, 16, 9, 4, 0, 12, 8, 5, 1, 27, 19, 25, 21, 24, 2, 11, 26]
The execution time of patched slicing information extraction via angr: 0:00:02.564029
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40064d>, <DisassemblerInsn "cmp" for 0x400652>, <DisassemblerInsn "je" for 0x400656>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "jmp" for 0x4005a9>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40062e>, <DisassemblerInsn "lea" for 0x400635>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "lea" for 0x400641>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "cmp" for 0x400674>, <DisassemblerInsn "jne" for 0x400678>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "and" for 0x40068f>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "imul" for 0x400695>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005ae>, <DisassemblerInsn "jne" for 0x4005b3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "jmp" for 0x4005e6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "cmp" for 0x4005d9>, <DisassemblerInsn "jge" for 0x4005dc>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "cmp" for 0x40061e>, <DisassemblerInsn "jne" for 0x400623>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069c>, <DisassemblerInsn "add" for 0x4006a0>, <DisassemblerInsn "ret" for 0x4006a4>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "cmp" for 0x4005ba>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jg" for 0x40059f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400617>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "cmp" for 0x40065d>, <DisassemblerInsn "je" for 0x400662>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "cmp" for 0x400603>, <DisassemblerInsn "jg" for 0x400608>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "call" for 0x4005fa>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "jmp" for 0x400682>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400625>, <DisassemblerInsn "jne" for 0x40062a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "jmp" for 0x400612>]'}], 'cfg_block_detailed_info': [{'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400684>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 14, 'blockInsts': ['<lea~~rdi, [rip + 0x326f]>', '<lea~~rsi, [rip + 0x327c]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x3287]>', '<call~~0x5000a0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jne~~0x400684>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<and~~ecx, 1>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x400619>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005eb>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x40062c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x40064d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400619>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x4005ae>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400619>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400684>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 0>', '<jg~~0x400617>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x40069c>']}, {'block_Idx': 11, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x40062e>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40069c>']}], 'cfg_edge_info': [(16, 20), (5, 7), (21, 25), (0, 2), (8, 9), (19, 18), (9, 11), (11, 14), (20, 4), (5, 6), (12, 15), (27, 9), (0, 1), (2, 4), (24, 4), (1, 5), (26, 4), (6, 4), (7, 9), (16, 21), (15, 19), (25, 27), (22, 18), (22, 24), (9, 12), (8, 10), (11, 12), (10, 16), (19, 22), (7, 8), (15, 18), (25, 26)], 'cdg_edge_info': [(16, 20), (5, 4), (5, 7), (0, 2), (0, 5), (9, 11), (11, 14), (16, 4), (25, 4), (22, 4), (16, 25), (5, 6), (5, 9), (0, 1), (0, 4), (25, 9), (16, 21), (15, 19), (25, 27), (22, 18), (22, 24), (9, 12), (8, 10), (8, 16), (9, 15), (11, 12), (9, 18), (11, 15), (19, 22), (7, 8), (11, 18), (25, 26)], 'ddg_edge_info': [(6, 18), (16, 20), (21, 19), (24, 18), (21, 22), (5, 7), (21, 25), (0, 2), (8, 9), (1, 6), (0, 8), (1, 9), (10, 18), (10, 21), (1, 18), (1, 15), (1, 21), (21, 9), (1, 24), (0, 18), (21, 15), (5, 6), (21, 18), (21, 24), (5, 18), (0, 1), (0, 10), (5, 24), (1, 5), (1, 11), (0, 19), (1, 8), (1, 14), (0, 22), (10, 20), (25, 18), (25, 24), (21, 14), (20, 18), (21, 11), (21, 26), (5, 11), (0, 9), (8, 19), (10, 16), (1, 7), (0, 15), (8, 22), (2, 18), (1, 10), (25, 11), (0, 21), (1, 19), (26, 18), (25, 26), (1, 22)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jg\t.LBB7_4'}, {'instIndex': 19, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 21, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 22, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 23, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_11'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 34, 'instruction': 'jge\t.LBB7_8'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 37, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'jg\t.LBB7_10'}, {'instIndex': 46, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 48, 'instruction': 'jmp\t.LBB7_20'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 50, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 52, 'instruction': 'jne\t.LBB7_13'}, {'instIndex': 53, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'jne\t.LBB7_14'}, {'instIndex': 55, 'instruction': 'jmp\t.LBB7_15'}, {'instIndex': 56, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 57, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 59, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O1/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O1/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 76 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O1/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O1/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 174 nodes and 285 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 76 instructions in binary file.
[4195709, 4195726, 4195743, 4195756, 4195777, 4195797, 4195810, 4195830, 4195845, 4195873]
The execution time of patched subCFG information extraction via angr: 0:00:00.419970
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "cmp" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "cmp" for 0x400592>, <DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "jl" for 0x400599>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400621>, <DisassemblerInsn "lea" for 0x400628>, <DisassemblerInsn "mov" for 0x40062f>, <DisassemblerInsn "lea" for 0x400634>, <DisassemblerInsn "call" for 0x40063b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "call" for 0x400589>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "add" for 0x400681>, <DisassemblerInsn "ret" for 0x400685>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005d8>, <DisassemblerInsn "jl" for 0x4005dc>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400605>, <DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x400616>, <DisassemblerInsn "cmp" for 0x40061b>, <DisassemblerInsn "jne" for 0x40061f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "call" for 0x4005f1>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "cmp" for 0x400645>, <DisassemblerInsn "je" for 0x400649>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x4005fb>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "jl" for 0x400603>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "jne" for 0x400577>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "cmp" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005aa>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x400605>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x165c]>', '<lea~~rsi, [rip + 0x1669]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x1674]>', '<call~~0x5000a0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400640>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400665>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40067d>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x400605>']}], 'cfg_edge_info': [(0, 1), (13, 14), (3, 4), (6, 9), (7, 10), (6, 8), (4, 6), (14, 2), (5, 7), (10, 13), (14, 6), (4, 5), (5, 6), (3, 2), (1, 3), (10, 2)]}]}
{'poll_frame': [4195709, 4195726, 4195743, 4195756, 4195777, 4195797, 4195810, 4195830, 4195845, 4195873]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O1/vf_yadif.o---after
The extraction of function: poll_frame
[4195709, 4195726, 4195743, 4195756, 4195777, 4195797, 4195810, 4195830, 4195845, 4195873]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 29 edges in CFGEmulated.
It has 19 nodes and 25 edges in CDG.
It has 296 nodes and 343 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195709, 4195726, 4195743, 4195756, 4195777, 4195797, 4195810, 4195830, 4195845, 4195873]
{4195904, 4195777, 4195810, 4195873, 4195845, 4195941, 4195915, 4195756, 4195726, 4195664, 4195709, 4195797, 4195830, 4195965, 4195743}
[7, 9, 8, 2, 1, 4, 16, 6, 15, 13, 14, 0, 18, 5, 10]
The execution time of patched slicing information extraction via angr: 0:00:01.844423
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400605>, <DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x40060e>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x400616>, <DisassemblerInsn "cmp" for 0x40061b>, <DisassemblerInsn "jne" for 0x40061f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400621>, <DisassemblerInsn "lea" for 0x400628>, <DisassemblerInsn "mov" for 0x40062f>, <DisassemblerInsn "lea" for 0x400634>, <DisassemblerInsn "call" for 0x40063b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "call" for 0x4005d0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "add" for 0x400681>, <DisassemblerInsn "ret" for 0x400685>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "call" for 0x400589>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "cmp" for 0x400592>, <DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "jl" for 0x400599>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "call" for 0x4005f1>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "cmp" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005d8>, <DisassemblerInsn "jl" for 0x4005dc>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400665>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "mov" for 0x40066e>, <DisassemblerInsn "and" for 0x400670>, <DisassemblerInsn "add" for 0x400673>, <DisassemblerInsn "imul" for 0x400676>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "add" for 0x400681>, <DisassemblerInsn "ret" for 0x400685>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "cmp" for 0x40065b>, <DisassemblerInsn "mov" for 0x40065f>, <DisassemblerInsn "je" for 0x400663>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "jne" for 0x400577>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x4005fb>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "jl" for 0x400603>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "cmp" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005aa>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "cmp" for 0x400645>, <DisassemblerInsn "je" for 0x400649>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400640>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x165c]>', '<lea~~rsi, [rip + 0x1669]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x1674]>', '<call~~0x5000a0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x400605>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40067d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40067d>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067d>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x400605>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400665>']}], 'cfg_edge_info': [(5, 7), (14, 13), (0, 2), (8, 15), (15, 2), (18, 7), (7, 10), (6, 8), (4, 2), (4, 5), (5, 6), (0, 1), (10, 14), (7, 9), (15, 16), (6, 7), (16, 18), (14, 2), (10, 13), (1, 4), (18, 2)], 'cdg_edge_info': [(6, 15), (14, 13), (0, 2), (15, 2), (18, 7), (7, 10), (6, 8), (7, 13), (4, 2), (4, 5), (5, 6), (0, 1), (0, 4), (10, 14), (7, 9), (15, 16), (14, 2), (4, 7), (18, 2), (15, 18)], 'ddg_edge_info': [(5, 7), (14, 13), (1, 6), (0, 8), (8, 15), (1, 9), (16, 7), (16, 10), (18, 7), (16, 13), (18, 13), (7, 13), (4, 5), (0, 1), (0, 7), (0, 10), (0, 16), (1, 5), (0, 13), (1, 8), (1, 14), (15, 13), (16, 9), (6, 7), (16, 18), (4, 13), (8, 16), (1, 4), (0, 6), (8, 13), (1, 7), (1, 13), (1, 10), (1, 16), (16, 14), (7, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O2/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O2/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 76 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O2/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O2/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 175 nodes and 289 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 76 instructions in binary file.
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
The execution time of patched subCFG information extraction via angr: 0:00:00.415024
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "mov" for 0x4005ab>, <DisassemblerInsn "jne" for 0x4005af>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "cmp" for 0x400635>, <DisassemblerInsn "je" for 0x400639>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "cmp" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jl" for 0x400589>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "call" for 0x4005e1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "cmp" for 0x400593>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400611>, <DisassemblerInsn "lea" for 0x400618>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "lea" for 0x400624>, <DisassemblerInsn "call" for 0x40062b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c8>, <DisassemblerInsn "jl" for 0x4005cc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "jl" for 0x4005f3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "jne" for 0x40060f>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "call" for 0x4005c0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400655>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x168c]>', '<lea~~rsi, [rip + 0x1699]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x16a4]>', '<call~~0x5000a0>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400630>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066d>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}], 'cfg_edge_info': [(0, 1), (13, 14), (3, 4), (6, 9), (7, 10), (6, 8), (4, 6), (14, 2), (5, 7), (10, 13), (14, 6), (4, 5), (5, 6), (3, 2), (1, 3), (10, 2)]}]}
{'poll_frame': [4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O2/vf_yadif.o---after
The extraction of function: poll_frame
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 29 edges in CFGEmulated.
It has 19 nodes and 25 edges in CDG.
It has 296 nodes and 343 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
{4195648, 4195781, 4195814, 4195949, 4195693, 4195727, 4195888, 4195761, 4195794, 4195857, 4195829, 4195925, 4195899, 4195740, 4195710}
[8, 2, 18, 14, 6, 9, 5, 15, 10, 13, 16, 7, 4, 0, 1]
The execution time of patched slicing information extraction via angr: 0:00:01.842314
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "call" for 0x4005c0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "jl" for 0x4005f3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063b>, <DisassemblerInsn "mov" for 0x40063f>, <DisassemblerInsn "mov" for 0x400644>, <DisassemblerInsn "cmp" for 0x40064b>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "je" for 0x400653>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "mov" for 0x4005ab>, <DisassemblerInsn "jne" for 0x4005af>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400611>, <DisassemblerInsn "lea" for 0x400618>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "lea" for 0x400624>, <DisassemblerInsn "call" for 0x40062b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "cmp" for 0x400593>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c8>, <DisassemblerInsn "jl" for 0x4005cc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "cmp" for 0x400635>, <DisassemblerInsn "je" for 0x400639>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x400659>, <DisassemblerInsn "mov" for 0x40065e>, <DisassemblerInsn "and" for 0x400660>, <DisassemblerInsn "add" for 0x400663>, <DisassemblerInsn "imul" for 0x400666>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "call" for 0x4005e1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "jne" for 0x40060f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "cmp" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jl" for 0x400589>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40066d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x168c]>', '<lea~~rsi, [rip + 0x1699]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x16a4]>', '<call~~0x5000a0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400655>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400630>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066d>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}], 'cfg_edge_info': [(5, 7), (14, 13), (0, 2), (8, 15), (15, 2), (18, 7), (7, 10), (6, 8), (4, 2), (4, 5), (5, 6), (0, 1), (10, 14), (7, 9), (15, 16), (6, 7), (16, 18), (14, 2), (1, 4), (10, 13), (18, 2)], 'cdg_edge_info': [(6, 15), (14, 13), (0, 2), (15, 2), (18, 7), (7, 10), (6, 8), (7, 13), (4, 2), (4, 5), (5, 6), (0, 1), (0, 4), (10, 14), (7, 9), (15, 16), (14, 2), (4, 7), (18, 2), (15, 18)], 'ddg_edge_info': [(5, 7), (14, 13), (1, 6), (0, 8), (8, 15), (1, 9), (16, 7), (16, 10), (18, 7), (16, 13), (18, 13), (7, 13), (4, 5), (0, 1), (0, 7), (0, 10), (0, 16), (1, 5), (0, 13), (16, 9), (1, 14), (15, 13), (1, 8), (6, 7), (16, 18), (4, 13), (8, 16), (1, 4), (0, 6), (8, 13), (1, 7), (1, 13), (1, 10), (1, 16), (16, 14), (7, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O3/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O3/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 76 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O3/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O3/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 175 nodes and 289 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 76 instructions in binary file.
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
The execution time of patched subCFG information extraction via angr: 0:00:00.419532
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "mov" for 0x4005ab>, <DisassemblerInsn "jne" for 0x4005af>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "cmp" for 0x400635>, <DisassemblerInsn "je" for 0x400639>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "cmp" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jl" for 0x400589>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "call" for 0x4005e1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "cmp" for 0x400593>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400611>, <DisassemblerInsn "lea" for 0x400618>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "lea" for 0x400624>, <DisassemblerInsn "call" for 0x40062b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c8>, <DisassemblerInsn "jl" for 0x4005cc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "jl" for 0x4005f3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "jne" for 0x40060f>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "call" for 0x4005c0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400655>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x168c]>', '<lea~~rsi, [rip + 0x1699]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x16a4]>', '<call~~0x5000a0>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400630>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066d>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}], 'cfg_edge_info': [(0, 1), (13, 14), (3, 4), (6, 9), (7, 10), (6, 8), (4, 6), (14, 2), (5, 7), (10, 13), (14, 6), (4, 5), (5, 6), (3, 2), (1, 3), (10, 2)]}]}
{'poll_frame': [4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/O3/vf_yadif.o---after
The extraction of function: poll_frame
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 29 edges in CFGEmulated.
It has 19 nodes and 25 edges in CDG.
It has 296 nodes and 343 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195693, 4195710, 4195727, 4195740, 4195761, 4195781, 4195794, 4195814, 4195829, 4195857]
{4195648, 4195781, 4195814, 4195949, 4195693, 4195727, 4195888, 4195761, 4195794, 4195857, 4195829, 4195925, 4195899, 4195740, 4195710}
[8, 2, 18, 14, 6, 9, 5, 15, 10, 13, 16, 7, 4, 0, 1]
The execution time of patched slicing information extraction via angr: 0:00:01.830116
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "call" for 0x4005c0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "jl" for 0x4005f3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063b>, <DisassemblerInsn "mov" for 0x40063f>, <DisassemblerInsn "mov" for 0x400644>, <DisassemblerInsn "cmp" for 0x40064b>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "je" for 0x400653>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "mov" for 0x4005ab>, <DisassemblerInsn "jne" for 0x4005af>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400611>, <DisassemblerInsn "lea" for 0x400618>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "lea" for 0x400624>, <DisassemblerInsn "call" for 0x40062b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "cmp" for 0x400593>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c8>, <DisassemblerInsn "jl" for 0x4005cc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "cmp" for 0x400635>, <DisassemblerInsn "je" for 0x400639>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x400659>, <DisassemblerInsn "mov" for 0x40065e>, <DisassemblerInsn "and" for 0x400660>, <DisassemblerInsn "add" for 0x400663>, <DisassemblerInsn "imul" for 0x400666>, <DisassemblerInsn "mov" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "add" for 0x400671>, <DisassemblerInsn "ret" for 0x400675>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "call" for 0x4005e1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005fa>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "jne" for 0x40060f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "cmp" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jl" for 0x400589>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40066d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x168c]>', '<lea~~rsi, [rip + 0x1699]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x16a4]>', '<call~~0x5000a0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005f5>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400655>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x400630>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066d>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}], 'cfg_edge_info': [(5, 7), (14, 13), (0, 2), (8, 15), (15, 2), (18, 7), (7, 10), (6, 8), (4, 2), (4, 5), (5, 6), (0, 1), (10, 14), (7, 9), (15, 16), (6, 7), (16, 18), (14, 2), (1, 4), (10, 13), (18, 2)], 'cdg_edge_info': [(6, 15), (14, 13), (0, 2), (15, 2), (18, 7), (7, 10), (6, 8), (7, 13), (4, 2), (4, 5), (5, 6), (0, 1), (0, 4), (10, 14), (7, 9), (15, 16), (14, 2), (4, 7), (18, 2), (15, 18)], 'ddg_edge_info': [(5, 7), (14, 13), (1, 6), (0, 8), (8, 15), (1, 9), (16, 7), (16, 10), (18, 7), (16, 13), (18, 13), (7, 13), (4, 5), (0, 1), (0, 7), (0, 10), (0, 16), (1, 5), (0, 13), (16, 9), (1, 14), (15, 13), (1, 8), (6, 7), (16, 18), (4, 13), (8, 16), (1, 4), (0, 6), (8, 13), (1, 7), (1, 13), (1, 10), (1, 16), (16, 14), (7, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/Os/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/Os/vf_yadif.s---poll_frame---after
function id: 7
function flag: True
There are 76 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/Os/vf_yadif.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/Os/vf_yadif.o---after
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 166 nodes and 282 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 76 instructions in binary file.
[4195630, 4195647, 4195664, 4195677, 4195698, 4195718, 4195731, 4195751, 4195766, 4195794]
The execution time of patched subCFG information extraction via angr: 0:00:00.404969
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400524>, <DisassemblerInsn "jne" for 0x400528>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "ret" for 0x400636>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "jl" for 0x4005b4>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "cmp" for 0x4005f6>, <DisassemblerInsn "je" for 0x4005fa>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "cmp" for 0x400554>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "jne" for 0x40055b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055d>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "cmp" for 0x400567>, <DisassemblerInsn "mov" for 0x40056c>, <DisassemblerInsn "jne" for 0x400570>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "cmp" for 0x400543>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "jl" for 0x40054a>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "mov" for 0x4005c7>, <DisassemblerInsn "cmp" for 0x4005cc>, <DisassemblerInsn "jne" for 0x4005d0>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "mov" for 0x40057a>, <DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "call" for 0x400581>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005d2>, <DisassemblerInsn "lea" for 0x4005d9>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "lea" for 0x4005e5>, <DisassemblerInsn "call" for 0x4005ec>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "call" for 0x40053a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400593>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "call" for 0x4005a2>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "jl" for 0x40058d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40062e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400616>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005b6>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005b6>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x4005f1>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x1667]>', '<lea~~rsi, [rip + 0x1674]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x167f]>', '<call~~0x5000a0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}], 'cfg_edge_info': [(0, 1), (13, 14), (3, 4), (6, 9), (7, 10), (6, 8), (4, 6), (14, 2), (5, 7), (10, 13), (14, 6), (4, 5), (5, 6), (3, 2), (1, 3), (10, 2)]}]}
{'poll_frame': [4195630, 4195647, 4195664, 4195677, 4195698, 4195718, 4195731, 4195751, 4195766, 4195794]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_after/Os/vf_yadif.o---after
The extraction of function: poll_frame
[4195630, 4195647, 4195664, 4195677, 4195698, 4195718, 4195731, 4195751, 4195766, 4195794]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 29 edges in CFGEmulated.
It has 19 nodes and 25 edges in CDG.
It has 296 nodes and 343 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195630, 4195647, 4195664, 4195677, 4195698, 4195718, 4195731, 4195751, 4195766, 4195794]
{4195585, 4195718, 4195751, 4195886, 4195630, 4195664, 4195825, 4195698, 4195731, 4195794, 4195766, 4195862, 4195836, 4195677, 4195647}
[16, 2, 1, 7, 9, 8, 5, 0, 15, 13, 6, 18, 14, 4, 10]
The execution time of patched slicing information extraction via angr: 0:00:01.830300
{'poll_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400593>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "call" for 0x4005a2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "ret" for 0x400636>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "call" for 0x40053a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b6>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "mov" for 0x4005c7>, <DisassemblerInsn "cmp" for 0x4005cc>, <DisassemblerInsn "jne" for 0x4005d0>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005d2>, <DisassemblerInsn "lea" for 0x4005d9>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "lea" for 0x4005e5>, <DisassemblerInsn "call" for 0x4005ec>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "mov" for 0x40057a>, <DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "call" for 0x400581>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "cmp" for 0x400554>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "jne" for 0x40055b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400524>, <DisassemblerInsn "jne" for 0x400528>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "jl" for 0x40058d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400616>, <DisassemblerInsn "mov" for 0x40061a>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "and" for 0x400621>, <DisassemblerInsn "add" for 0x400624>, <DisassemblerInsn "imul" for 0x400627>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "ret" for 0x400636>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055d>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "cmp" for 0x400567>, <DisassemblerInsn "mov" for 0x40056c>, <DisassemblerInsn "jne" for 0x400570>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "jl" for 0x4005b4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005fc>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400605>, <DisassemblerInsn "cmp" for 0x40060c>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "je" for 0x400614>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "cmp" for 0x400543>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "jl" for 0x40054a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "cmp" for 0x4005f6>, <DisassemblerInsn "je" for 0x4005fa>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<jne~~0x4005f1>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x1667]>', '<lea~~rsi, [rip + 0x1674]>', '<mov~~edx, 0x149>', '<lea~~rcx, [rip + 0x167f]>', '<call~~0x5000a0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005b6>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40062e>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jne~~0x4005b6>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10], ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40062e>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062e>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x400616>']}], 'cfg_edge_info': [(5, 7), (14, 13), (0, 2), (8, 15), (15, 2), (18, 7), (7, 10), (6, 8), (4, 2), (4, 5), (5, 6), (0, 1), (10, 14), (7, 9), (15, 16), (6, 7), (16, 18), (14, 2), (1, 4), (10, 13), (18, 2)], 'cdg_edge_info': [(6, 15), (14, 13), (0, 2), (15, 2), (18, 7), (7, 10), (6, 8), (7, 13), (4, 2), (4, 5), (5, 6), (0, 1), (0, 4), (10, 14), (7, 9), (15, 16), (14, 2), (4, 7), (18, 2), (15, 18)], 'ddg_edge_info': [(5, 7), (14, 13), (1, 6), (0, 8), (8, 15), (1, 9), (16, 7), (16, 10), (18, 7), (16, 13), (18, 13), (7, 13), (4, 5), (0, 1), (0, 7), (0, 10), (0, 16), (1, 5), (0, 13), (1, 8), (16, 9), (15, 13), (1, 14), (6, 7), (16, 18), (4, 13), (8, 16), (1, 4), (0, 6), (8, 13), (1, 7), (1, 13), (1, 10), (1, 16), (16, 14), (7, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 15, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 17, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 19, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 23, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 26, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 31, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 34, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 37, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 39, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 40, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'jl\t.LBB7_11'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 51, 'instruction': 'jne\t.LBB7_8'}, {'instIndex': 52, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 53, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movl\t$0x149, %edx                      # imm = 0x0x95'}, {'instIndex': 55, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 56, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435---a/libavfilter/vf_yadif.c
The case of compiler gcc with optimization no.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/no/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/no/vf_yadif_gcc.s---poll_frame---before
function id: 29
function flag: True
There are 81 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.L90'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 24, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 25, 'instruction': 'jne\t.L90'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 34, 'instruction': 'jns\t.L91'}, {'instIndex': 35, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'jmp\t.L89'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 39, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 44, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 46, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 47, 'instruction': 'jne\t.L92'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'je\t.L92'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 51, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/no/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.L90'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 24, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 25, 'instruction': 'jne\t.L90'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 34, 'instruction': 'jns\t.L91'}, {'instIndex': 35, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'jmp\t.L89'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 39, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 44, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 46, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 47, 'instruction': 'jne\t.L92'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'je\t.L92'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 51, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O0/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O0/vf_yadif_gcc.s---poll_frame---before
function id: 29
function flag: True
There are 81 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.L90'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 24, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 25, 'instruction': 'jne\t.L90'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 34, 'instruction': 'jns\t.L91'}, {'instIndex': 35, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'jmp\t.L89'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 39, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 44, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 46, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 47, 'instruction': 'jne\t.L92'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'je\t.L92'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 51, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O0/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 12, 'instruction': 'jmp\t.L89'}, {'instIndex': 13, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 18, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 19, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 20, 'instruction': 'cmpl\t$1, 0x10(%rsp)'}, {'instIndex': 21, 'instruction': 'jne\t.L90'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 24, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 25, 'instruction': 'jne\t.L90'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 28, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 29, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 32, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 33, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 34, 'instruction': 'jns\t.L91'}, {'instIndex': 35, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'jmp\t.L89'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 39, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 43, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 44, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 46, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 47, 'instruction': 'jne\t.L92'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, 0x10(%rsp)'}, {'instIndex': 49, 'instruction': 'je\t.L92'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rax'}, {'instIndex': 51, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0(%rip), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'leaq\t.LC1(%rip), %rax'}, {'instIndex': 56, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 57, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O1/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O1/vf_yadif_gcc.s---poll_frame---before
function id: 229
function flag: True
There are 271 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 16, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 18, 'instruction': 'je\t.L92'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 20, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'je\t.L87'}, {'instIndex': 22, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 23, 'instruction': 'je\t.L93'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 37, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 38, 'instruction': 'jne\t.L87'}, {'instIndex': 39, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 43, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'js\t.L84'}, {'instIndex': 45, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 46, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 47, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 48, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L86'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 51, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 52, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 53, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 54, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O1/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 6, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 16, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 18, 'instruction': 'je\t.L92'}, {'instIndex': 19, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 20, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'je\t.L87'}, {'instIndex': 22, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 23, 'instruction': 'je\t.L93'}, {'instIndex': 36, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 37, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 38, 'instruction': 'jne\t.L87'}, {'instIndex': 39, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 40, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 41, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 42, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 43, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'js\t.L84'}, {'instIndex': 45, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 46, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 47, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 48, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L86'}, {'instIndex': 50, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 51, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 52, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 53, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 54, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O2/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O2/vf_yadif_gcc.s---poll_frame---before
function id: 127
function flag: True
There are 633 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'je\t.L53'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 22, 'instruction': 'je\t.L54'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 44, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 45, 'instruction': 'jne\t.L44'}, {'instIndex': 46, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 49, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 50, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'js\t.L41'}, {'instIndex': 52, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 55, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 56, 'instruction': 'jmp\t.L43'}, {'instIndex': 57, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 58, 'instruction': 'je\t.L45'}, {'instIndex': 59, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 62, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 63, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O2/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'je\t.L53'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 22, 'instruction': 'je\t.L54'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 44, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 45, 'instruction': 'jne\t.L44'}, {'instIndex': 46, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 49, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 50, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'js\t.L41'}, {'instIndex': 52, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 55, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 56, 'instruction': 'jmp\t.L43'}, {'instIndex': 57, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 58, 'instruction': 'je\t.L45'}, {'instIndex': 59, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 62, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 63, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O3/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O3/vf_yadif_gcc.s---poll_frame---before
function id: 139
function flag: True
There are 642 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'je\t.L52'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 22, 'instruction': 'je\t.L53'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 44, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 45, 'instruction': 'jne\t.L43'}, {'instIndex': 46, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 49, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 50, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'js\t.L40'}, {'instIndex': 52, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 55, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 56, 'instruction': 'jmp\t.L42'}, {'instIndex': 57, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 58, 'instruction': 'je\t.L44'}, {'instIndex': 59, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 62, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 63, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/O3/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 15, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 16, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 17, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 18, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'je\t.L52'}, {'instIndex': 20, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 21, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 22, 'instruction': 'je\t.L53'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rbp), %rdx'}, {'instIndex': 44, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 45, 'instruction': 'jne\t.L43'}, {'instIndex': 46, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 49, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 50, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'js\t.L40'}, {'instIndex': 52, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 55, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 56, 'instruction': 'jmp\t.L42'}, {'instIndex': 57, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 58, 'instruction': 'je\t.L44'}, {'instIndex': 59, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 60, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 61, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 62, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 63, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/Os/vf_yadif_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/Os/vf_yadif_gcc.s---poll_frame---before
function id: 145
function flag: True
There are 535 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 11, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 12, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jne\t.L44'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x18(%rbx)'}, {'instIndex': 16, 'instruction': 'jne\t.L44'}, {'instIndex': 17, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 21, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'js\t.L42'}, {'instIndex': 23, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 28, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 29, 'instruction': 'jne\t.L45'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'je\t.L45'}, {'instIndex': 32, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 33, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 34, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 35, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 36, 'instruction': 'call\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/gcc_before/Os/vf_yadif.o
Binary file does not exist.
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 2, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 9, 'instruction': 'movq\t0x28(%rdx), %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 11, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 12, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 13, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 14, 'instruction': 'jne\t.L44'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x18(%rbx)'}, {'instIndex': 16, 'instruction': 'jne\t.L44'}, {'instIndex': 17, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'call\tavfilter_request_frame@PLT'}, {'instIndex': 21, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'js\t.L42'}, {'instIndex': 23, 'instruction': 'movq\t0(%rbp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'call\tavfilter_poll_frame@PLT'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rbx), %rdx'}, {'instIndex': 28, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 29, 'instruction': 'jne\t.L45'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'je\t.L45'}, {'instIndex': 32, 'instruction': 'leaq\t__PRETTY_FUNCTION__.1(%rip), %rcx'}, {'instIndex': 33, 'instruction': 'movl\t$0x145, %edx'}, {'instIndex': 34, 'instruction': 'leaq\t.LC0(%rip), %rsi'}, {'instIndex': 35, 'instruction': 'leaq\t.LC1(%rip), %rdi'}, {'instIndex': 36, 'instruction': 'call\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/no/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/no/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 74 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 19, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'jge\t.LBB7_6'}, {'instIndex': 30, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 32, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 37, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 38, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 41, 'instruction': 'jne\t.LBB7_9'}, {'instIndex': 42, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 43, 'instruction': 'jne\t.LBB7_10'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 45, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 48, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 49, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/no/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/no/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 444 nodes and 707 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 74 instructions in binary file.
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
The execution time of patched subCFG information extraction via angr: 0:00:00.503537
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005ab>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005df>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "call" for 0x4005e6>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400602>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jne" for 0x40059f>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "jge" for 0x4005c8>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400604>, <DisassemblerInsn "lea" for 0x40060b>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "lea" for 0x400617>, <DisassemblerInsn "call" for 0x40061e>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "jmp" for 0x4005d2>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005fb>, <DisassemblerInsn "jne" for 0x400600>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "cmp" for 0x400628>, <DisassemblerInsn "je" for 0x40062c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x4005ef>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x400672>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400623>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x4005ef>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005d7>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<lea~~rdi, [rip + 0x3269]>', '<lea~~rsi, [rip + 0x3276]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x3281]>', '<call~~0x5000a0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 8, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x400604>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40065a>']}], 'cfg_edge_info': [(5, 7), (17, 9), (0, 2), (8, 9), (1, 3), (7, 10), (6, 8), (5, 6), (3, 6), (17, 8), (8, 11), (0, 1), (2, 4), (13, 4), (10, 14), (3, 5), (14, 17), (9, 12), (10, 13), (6, 9)]}]}
{'poll_frame': [4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/no/vf_yadif.o---before
The extraction of function: poll_frame
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 24 nodes and 35 edges in CFGEmulated.
It has 24 nodes and 35 edges in CDG.
It has 286 nodes and 339 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
{4195714, 4195842, 4195844, 4195734, 4195745, 4195875, 4195757, 4195886, 4195898, 4195777, 4195786, 4195664, 4195920, 4195799, 4195930, 4195819, 4195823, 4195954, 4195701, 4195835}
[10, 18, 6, 12, 8, 14, 22, 0, 5, 9, 4, 7, 1, 20, 23, 19, 2, 16, 13, 17]
The execution time of patched slicing information extraction via angr: 0:00:02.458825
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400602>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "jmp" for 0x4005d2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005ab>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400604>, <DisassemblerInsn "lea" for 0x40060b>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "lea" for 0x400617>, <DisassemblerInsn "call" for 0x40061e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005bc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "jge" for 0x4005c8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "jmp" for 0x400658>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jne" for 0x40059f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005fb>, <DisassemblerInsn "jne" for 0x400600>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "mov" for 0x40063f>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "cmp" for 0x40064a>, <DisassemblerInsn "jne" for 0x40064e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005df>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "call" for 0x4005e6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x40065e>, <DisassemblerInsn "mov" for 0x400663>, <DisassemblerInsn "and" for 0x400665>, <DisassemblerInsn "add" for 0x400668>, <DisassemblerInsn "imul" for 0x40066b>, <DisassemblerInsn "mov" for 0x40066e>, <DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "cmp" for 0x400628>, <DisassemblerInsn "je" for 0x40062c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "cmp" for 0x400633>, <DisassemblerInsn "je" for 0x400638>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<jmp~~0x400623>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x4005ef>']}, {'block_Idx': 12, 'blockInsts': ['<lea~~rdi, [rip + 0x3269]>', '<lea~~rsi, [rip + 0x3276]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x3281]>', '<call~~0x5000a0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005d7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x4005ef>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x400604>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jne~~0x40065a>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x400672>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<and~~ecx, 1>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40065a>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x40065a>']}], 'cfg_edge_info': [(23, 10), (5, 7), (14, 19), (0, 2), (18, 4), (13, 17), (7, 10), (6, 8), (22, 4), (23, 9), (20, 16), (5, 6), (20, 22), (14, 18), (0, 1), (9, 10), (8, 14), (2, 4), (17, 20), (1, 5), (19, 23), (13, 16), (7, 9), (6, 7), (17, 16), (9, 12), (10, 13)], 'cdg_edge_info': [(14, 4), (23, 10), (23, 16), (23, 13), (5, 7), (14, 19), (0, 2), (0, 5), (13, 17), (20, 4), (7, 10), (7, 16), (6, 8), (6, 14), (7, 13), (23, 9), (20, 16), (5, 6), (20, 22), (14, 18), (0, 1), (9, 16), (9, 10), (9, 13), (17, 20), (0, 4), (7, 9), (6, 7), (14, 23), (9, 12)], 'ddg_edge_info': [(23, 16), (23, 22), (0, 2), (19, 9), (5, 16), (19, 12), (8, 18), (1, 6), (0, 8), (5, 22), (1, 9), (0, 17), (0, 23), (1, 12), (0, 20), (18, 16), (6, 20), (6, 17), (6, 23), (23, 9), (22, 16), (14, 18), (5, 9), (0, 1), (8, 14), (19, 17), (1, 5), (19, 23), (0, 16), (0, 19), (1, 8), (0, 13), (1, 20), (2, 16), (19, 20), (1, 17), (1, 23), (19, 16), (8, 16), (0, 6), (19, 13), (8, 19), (1, 13), (19, 22), (1, 16), (1, 19), (1, 22)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 19, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'jge\t.LBB7_6'}, {'instIndex': 30, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 32, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 37, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 38, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 41, 'instruction': 'jne\t.LBB7_9'}, {'instIndex': 42, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 43, 'instruction': 'jne\t.LBB7_10'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 45, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 48, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 49, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O0/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O0/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 74 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 19, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'jge\t.LBB7_6'}, {'instIndex': 30, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 32, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 37, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 38, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 41, 'instruction': 'jne\t.LBB7_9'}, {'instIndex': 42, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 43, 'instruction': 'jne\t.LBB7_10'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 45, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 48, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 49, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O0/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O0/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 444 nodes and 707 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 74 instructions in binary file.
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
The execution time of patched subCFG information extraction via angr: 0:00:00.501007
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005ab>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005df>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "call" for 0x4005e6>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400602>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jne" for 0x40059f>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "jge" for 0x4005c8>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400604>, <DisassemblerInsn "lea" for 0x40060b>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "lea" for 0x400617>, <DisassemblerInsn "call" for 0x40061e>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "jmp" for 0x4005d2>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005fb>, <DisassemblerInsn "jne" for 0x400600>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "cmp" for 0x400628>, <DisassemblerInsn "je" for 0x40062c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x4005ef>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x400672>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400623>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x4005ef>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005d7>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<lea~~rdi, [rip + 0x3269]>', '<lea~~rsi, [rip + 0x3276]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x3281]>', '<call~~0x5000a0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 8, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x400604>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40065a>']}], 'cfg_edge_info': [(5, 7), (17, 9), (0, 2), (8, 9), (1, 3), (7, 10), (6, 8), (5, 6), (3, 6), (17, 8), (8, 11), (0, 1), (2, 4), (13, 4), (10, 14), (3, 5), (14, 17), (9, 12), (10, 13), (6, 9)]}]}
{'poll_frame': [4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O0/vf_yadif.o---before
The extraction of function: poll_frame
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 24 nodes and 35 edges in CFGEmulated.
It has 24 nodes and 35 edges in CDG.
It has 286 nodes and 339 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195701, 4195714, 4195734, 4195745, 4195757, 4195777, 4195786, 4195799, 4195819, 4195823, 4195835, 4195842, 4195844]
{4195714, 4195842, 4195844, 4195734, 4195745, 4195875, 4195757, 4195886, 4195898, 4195777, 4195786, 4195664, 4195920, 4195799, 4195930, 4195819, 4195823, 4195954, 4195701, 4195835}
[10, 18, 6, 12, 8, 14, 22, 0, 5, 9, 4, 7, 1, 20, 23, 19, 2, 16, 13, 17]
The execution time of patched slicing information extraction via angr: 0:00:02.382546
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400602>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005ce>, <DisassemblerInsn "jmp" for 0x4005d2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005ab>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400604>, <DisassemblerInsn "lea" for 0x40060b>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "lea" for 0x400617>, <DisassemblerInsn "call" for 0x40061e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005bc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c1>, <DisassemblerInsn "cmp" for 0x4005c5>, <DisassemblerInsn "jge" for 0x4005c8>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "jmp" for 0x400658>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "je" for 0x400573>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x40059a>, <DisassemblerInsn "jne" for 0x40059f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005fb>, <DisassemblerInsn "jne" for 0x400600>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "call" for 0x400591>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "mov" for 0x40063f>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "cmp" for 0x40064a>, <DisassemblerInsn "jne" for 0x40064e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005ef>, <DisassemblerInsn "cmp" for 0x4005f4>, <DisassemblerInsn "jne" for 0x4005f9>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005df>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "call" for 0x4005e6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "jmp" for 0x40057d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x40065e>, <DisassemblerInsn "mov" for 0x400663>, <DisassemblerInsn "and" for 0x400665>, <DisassemblerInsn "add" for 0x400668>, <DisassemblerInsn "imul" for 0x40066b>, <DisassemblerInsn "mov" for 0x40066e>, <DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "ret" for 0x40067a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "cmp" for 0x400628>, <DisassemblerInsn "je" for 0x40062c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "cmp" for 0x400633>, <DisassemblerInsn "je" for 0x400638>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<jmp~~0x400623>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x4005ef>']}, {'block_Idx': 12, 'blockInsts': ['<lea~~rdi, [rip + 0x3269]>', '<lea~~rsi, [rip + 0x3276]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x3281]>', '<call~~0x5000a0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 0>', '<jge~~0x4005d7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x400672>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400582>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 8], 1>', '<jne~~0x4005ef>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~dword ptr [rsp + 8], 0>', '<jne~~0x400604>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jne~~0x40065a>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<jne~~0x400602>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 1>', '<jmp~~0x400672>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<and~~ecx, 1>', '<add~~ecx, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40065a>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x40065a>']}], 'cfg_edge_info': [(23, 10), (5, 7), (14, 19), (0, 2), (18, 4), (13, 17), (7, 10), (6, 8), (22, 4), (23, 9), (20, 16), (5, 6), (20, 22), (14, 18), (0, 1), (9, 10), (8, 14), (2, 4), (17, 20), (1, 5), (19, 23), (13, 16), (7, 9), (6, 7), (17, 16), (9, 12), (10, 13)], 'cdg_edge_info': [(14, 4), (23, 10), (23, 16), (23, 13), (5, 7), (14, 19), (0, 2), (0, 5), (13, 17), (20, 4), (7, 10), (7, 16), (6, 8), (6, 14), (7, 13), (23, 9), (20, 16), (5, 6), (20, 22), (14, 18), (0, 1), (9, 16), (9, 10), (9, 13), (17, 20), (0, 4), (7, 9), (6, 7), (14, 23), (9, 12)], 'ddg_edge_info': [(23, 16), (23, 22), (0, 2), (19, 9), (5, 16), (19, 12), (8, 18), (1, 6), (0, 8), (5, 22), (1, 9), (0, 17), (0, 23), (1, 12), (0, 20), (18, 16), (6, 20), (6, 17), (6, 23), (23, 9), (22, 16), (14, 18), (5, 9), (0, 1), (8, 14), (19, 17), (1, 5), (19, 23), (0, 16), (0, 19), (1, 8), (0, 13), (1, 20), (2, 16), (19, 20), (1, 17), (1, 23), (19, 16), (8, 16), (0, 6), (19, 13), (8, 19), (1, 13), (19, 22), (1, 16), (1, 19), (1, 22)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movl\t$1, 0x24(%rsp)'}, {'instIndex': 10, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 11, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 13, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'cmpl\t$1, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 19, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_7'}, {'instIndex': 22, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 12(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 29, 'instruction': 'jge\t.LBB7_6'}, {'instIndex': 30, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 32, 'instruction': 'jmp\t.LBB7_16'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 35, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 37, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 38, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 39, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'cmpq\t$0, 0x18(%rax)'}, {'instIndex': 41, 'instruction': 'jne\t.LBB7_9'}, {'instIndex': 42, 'instruction': 'cmpl\t$0, 8(%rsp)'}, {'instIndex': 43, 'instruction': 'jne\t.LBB7_10'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB7_11'}, {'instIndex': 45, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 48, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 49, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O1/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O1/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 79 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O1/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O1/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 174 nodes and 284 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 79 instructions in binary file.
[4195709, 4195726, 4195735, 4195756, 4195776, 4195789, 4195809, 4195813, 4195856, 4195858]
The execution time of patched subCFG information extraction via angr: 0:00:00.416822
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "add" for 0x40067e>, <DisassemblerInsn "ret" for 0x400682>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400612>, <DisassemblerInsn "lea" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "lea" for 0x400625>, <DisassemblerInsn "call" for 0x40062c>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005d9>, <DisassemblerInsn "call" for 0x4005dc>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400610>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "call" for 0x400589>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "jne" for 0x400577>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400597>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "cmp" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005aa>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e1>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "test" for 0x4005fb>, <DisassemblerInsn "sete" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "test" for 0x400605>, <DisassemblerInsn "setne" for 0x400607>, <DisassemblerInsn "and" for 0x40060a>, <DisassemblerInsn "test" for 0x40060c>, <DisassemblerInsn "jne" for 0x40060e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400631>, <DisassemblerInsn "mov" for 0x400635>, <DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "test" for 0x40063d>, <DisassemblerInsn "sete" for 0x40063f>, <DisassemblerInsn "or" for 0x400642>, <DisassemblerInsn "test" for 0x400644>, <DisassemblerInsn "jne" for 0x400646>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40058e>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "jne" for 0x400595>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "call" for 0x4005bb>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "jl" for 0x4005c7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "test" for 0x4005fb>, <DisassemblerInsn "sete" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "test" for 0x400605>, <DisassemblerInsn "setne" for 0x400607>, <DisassemblerInsn "and" for 0x40060a>, <DisassemblerInsn "test" for 0x40060c>, <DisassemblerInsn "jne" for 0x40060e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x166b]>', '<lea~~rsi, [rip + 0x1678]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x1683]>', '<call~~0x5000a0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x400631>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40067a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005e5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400612>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400662>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005e5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400612>']}], 'cfg_edge_info': [(0, 1), (14, 8), (3, 4), (6, 9), (5, 8), (14, 7), (7, 10), (4, 6), (9, 2), (5, 7), (4, 5), (9, 11), (11, 14), (1, 3), (3, 5)]}]}
{'poll_frame': [4195709, 4195726, 4195735, 4195756, 4195776, 4195789, 4195809, 4195813, 4195856, 4195858]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O1/vf_yadif.o---before
The extraction of function: poll_frame
[4195709, 4195726, 4195735, 4195756, 4195776, 4195789, 4195809, 4195813, 4195856, 4195858]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 28 edges in CFGEmulated.
It has 19 nodes and 28 edges in CDG.
It has 345 nodes and 398 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195709, 4195726, 4195735, 4195756, 4195776, 4195789, 4195809, 4195813, 4195856, 4195858]
{4195776, 4195809, 4195938, 4195813, 4195912, 4195756, 4195789, 4195726, 4195664, 4195856, 4195858, 4195889, 4195735, 4195962, 4195709}
[2, 15, 14, 1, 4, 8, 11, 7, 5, 16, 9, 0, 18, 6, 13]
The execution time of patched slicing information extraction via angr: 0:00:01.824129
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "add" for 0x40067e>, <DisassemblerInsn "ret" for 0x400682>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400662>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "mov" for 0x40066b>, <DisassemblerInsn "and" for 0x40066d>, <DisassemblerInsn "add" for 0x400670>, <DisassemblerInsn "imul" for 0x400673>, <DisassemblerInsn "mov" for 0x400676>, <DisassemblerInsn "mov" for 0x40067a>, <DisassemblerInsn "add" for 0x40067e>, <DisassemblerInsn "ret" for 0x400682>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064c>, <DisassemblerInsn "mov" for 0x400651>, <DisassemblerInsn "cmp" for 0x400658>, <DisassemblerInsn "mov" for 0x40065c>, <DisassemblerInsn "je" for 0x400660>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "call" for 0x400589>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40058e>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "jne" for 0x400595>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400610>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400631>, <DisassemblerInsn "mov" for 0x400635>, <DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "test" for 0x40063d>, <DisassemblerInsn "sete" for 0x40063f>, <DisassemblerInsn "or" for 0x400642>, <DisassemblerInsn "test" for 0x400644>, <DisassemblerInsn "jne" for 0x400646>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "call" for 0x4005bb>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400597>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "cmp" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "jne" for 0x4005aa>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005d9>, <DisassemblerInsn "call" for 0x4005dc>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400612>, <DisassemblerInsn "lea" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "lea" for 0x400625>, <DisassemblerInsn "call" for 0x40062c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400550>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "cmp" for 0x40056f>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "jne" for 0x400577>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e1>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "test" for 0x4005fb>, <DisassemblerInsn "sete" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "test" for 0x400605>, <DisassemblerInsn "setne" for 0x400607>, <DisassemblerInsn "and" for 0x40060a>, <DisassemblerInsn "test" for 0x40060c>, <DisassemblerInsn "jne" for 0x40060e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "test" for 0x4005fb>, <DisassemblerInsn "sete" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "test" for 0x400605>, <DisassemblerInsn "setne" for 0x400607>, <DisassemblerInsn "and" for 0x40060a>, <DisassemblerInsn "test" for 0x40060c>, <DisassemblerInsn "jne" for 0x40060e>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "jl" for 0x4005c7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40067a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005e5>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x400631>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400662>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005e5>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x166b]>', '<lea~~rsi, [rip + 0x1678]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x1683]>', '<call~~0x5000a0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40067a>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400612>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400612>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40067a>']}], 'cfg_edge_info': [(4, 6), (5, 7), (0, 2), (13, 2), (11, 14), (6, 8), (7, 13), (4, 5), (5, 6), (14, 15), (8, 11), (0, 1), (13, 16), (18, 9), (16, 18), (14, 2), (1, 4), (11, 15), (6, 9), (18, 8)], 'cdg_edge_info': [(6, 15), (4, 6), (5, 7), (5, 13), (0, 2), (13, 2), (11, 14), (6, 11), (6, 8), (4, 5), (5, 6), (14, 15), (0, 1), (0, 4), (13, 16), (18, 9), (18, 15), (14, 2), (13, 18), (18, 11), (6, 9), (18, 8)], 'ddg_edge_info': [(4, 18), (0, 5), (16, 14), (1, 9), (0, 11), (1, 18), (1, 15), (7, 16), (7, 13), (5, 18), (0, 1), (0, 7), (0, 16), (1, 5), (1, 11), (16, 9), (1, 14), (16, 15), (16, 18), (7, 15), (18, 15), (1, 4), (1, 7), (0, 15), (1, 16), (0, 18), (13, 15), (18, 11), (16, 11), (18, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O2/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O2/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 79 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O2/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O2/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 175 nodes and 288 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 79 instructions in binary file.
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
The execution time of patched subCFG information extraction via angr: 0:00:00.420745
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "test" for 0x40062d>, <DisassemblerInsn "sete" for 0x40062f>, <DisassemblerInsn "or" for 0x400632>, <DisassemblerInsn "test" for 0x400634>, <DisassemblerInsn "jne" for 0x400636>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "call" for 0x4005cc>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400602>, <DisassemblerInsn "lea" for 0x400609>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "lea" for 0x400615>, <DisassemblerInsn "call" for 0x40061c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400600>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40057e>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "jne" for 0x400585>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a8>, <DisassemblerInsn "call" for 0x4005ab>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "jl" for 0x4005b7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400652>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x169b]>', '<lea~~rsi, [rip + 0x16a8]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x16b3]>', '<call~~0x5000a0>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x400621>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066a>']}], 'cfg_edge_info': [(0, 1), (14, 8), (3, 4), (6, 9), (5, 8), (14, 7), (7, 10), (4, 6), (9, 2), (5, 7), (4, 5), (9, 11), (11, 14), (1, 3), (3, 5)]}]}
{'poll_frame': [4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O2/vf_yadif.o---before
The extraction of function: poll_frame
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 28 edges in CFGEmulated.
It has 19 nodes and 28 edges in CDG.
It has 345 nodes and 398 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
{4195648, 4195840, 4195842, 4195873, 4195719, 4195946, 4195693, 4195760, 4195793, 4195922, 4195797, 4195896, 4195740, 4195773, 4195710}
[8, 7, 6, 0, 16, 14, 5, 13, 9, 15, 18, 11, 4, 2, 1]
The execution time of patched slicing information extraction via angr: 0:00:01.800662
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400600>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a8>, <DisassemblerInsn "call" for 0x4005ab>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "call" for 0x4005cc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "cmp" for 0x400648>, <DisassemblerInsn "mov" for 0x40064c>, <DisassemblerInsn "je" for 0x400650>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "jl" for 0x4005b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400602>, <DisassemblerInsn "lea" for 0x400609>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "lea" for 0x400615>, <DisassemblerInsn "call" for 0x40061c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "mov" for 0x40065b>, <DisassemblerInsn "and" for 0x40065d>, <DisassemblerInsn "add" for 0x400660>, <DisassemblerInsn "imul" for 0x400663>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "test" for 0x40062d>, <DisassemblerInsn "sete" for 0x40062f>, <DisassemblerInsn "or" for 0x400632>, <DisassemblerInsn "test" for 0x400634>, <DisassemblerInsn "jne" for 0x400636>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40057e>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "jne" for 0x400585>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<jmp~~0x400621>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40066a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066a>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x169b]>', '<lea~~rsi, [rip + 0x16a8]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x16b3]>', '<call~~0x5000a0>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400652>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}], 'cfg_edge_info': [(4, 6), (5, 7), (0, 2), (13, 2), (11, 14), (6, 8), (7, 13), (4, 5), (5, 6), (14, 15), (8, 11), (0, 1), (13, 16), (18, 9), (16, 18), (14, 2), (1, 4), (11, 15), (6, 9), (18, 8)], 'cdg_edge_info': [(6, 15), (4, 6), (5, 7), (5, 13), (0, 2), (13, 2), (11, 14), (6, 11), (6, 8), (4, 5), (5, 6), (14, 15), (0, 1), (0, 4), (13, 16), (18, 9), (18, 15), (14, 2), (13, 18), (18, 11), (6, 9), (18, 8)], 'ddg_edge_info': [(4, 18), (0, 5), (16, 14), (1, 9), (0, 11), (1, 18), (1, 15), (7, 16), (7, 13), (5, 18), (0, 1), (0, 7), (0, 16), (1, 5), (1, 11), (16, 9), (1, 14), (16, 15), (16, 18), (18, 15), (7, 15), (1, 4), (1, 7), (0, 15), (1, 16), (0, 18), (13, 15), (18, 11), (16, 11), (18, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O3/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O3/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 79 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O3/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O3/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 175 nodes and 288 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 79 instructions in binary file.
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
The execution time of patched subCFG information extraction via angr: 0:00:00.421911
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "test" for 0x40062d>, <DisassemblerInsn "sete" for 0x40062f>, <DisassemblerInsn "or" for 0x400632>, <DisassemblerInsn "test" for 0x400634>, <DisassemblerInsn "jne" for 0x400636>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "call" for 0x4005cc>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400602>, <DisassemblerInsn "lea" for 0x400609>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "lea" for 0x400615>, <DisassemblerInsn "call" for 0x40061c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400600>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40057e>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "jne" for 0x400585>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a8>, <DisassemblerInsn "call" for 0x4005ab>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "jl" for 0x4005b7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400652>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x169b]>', '<lea~~rsi, [rip + 0x16a8]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x16b3]>', '<call~~0x5000a0>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x400621>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066a>']}], 'cfg_edge_info': [(0, 1), (14, 8), (3, 4), (6, 9), (5, 8), (14, 7), (7, 10), (4, 6), (9, 2), (5, 7), (4, 5), (9, 11), (11, 14), (1, 3), (3, 5)]}]}
{'poll_frame': [4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/O3/vf_yadif.o---before
The extraction of function: poll_frame
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 28 edges in CFGEmulated.
It has 19 nodes and 28 edges in CDG.
It has 345 nodes and 398 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195693, 4195710, 4195719, 4195740, 4195760, 4195773, 4195793, 4195797, 4195840, 4195842]
{4195648, 4195840, 4195842, 4195873, 4195719, 4195946, 4195693, 4195760, 4195793, 4195922, 4195797, 4195896, 4195740, 4195773, 4195710}
[8, 7, 6, 0, 16, 14, 5, 13, 9, 15, 18, 11, 4, 2, 1]
The execution time of patched slicing information extraction via angr: 0:00:01.802975
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400600>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a8>, <DisassemblerInsn "call" for 0x4005ab>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400555>, <DisassemblerInsn "mov" for 0x40055a>, <DisassemblerInsn "cmp" for 0x40055f>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "jne" for 0x400567>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "call" for 0x4005cc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "cmp" for 0x400648>, <DisassemblerInsn "mov" for 0x40064c>, <DisassemblerInsn "je" for 0x400650>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "jne" for 0x40059a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "jl" for 0x4005b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400602>, <DisassemblerInsn "lea" for 0x400609>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "lea" for 0x400615>, <DisassemblerInsn "call" for 0x40061c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "mov" for 0x40065b>, <DisassemblerInsn "and" for 0x40065d>, <DisassemblerInsn "add" for 0x400660>, <DisassemblerInsn "imul" for 0x400663>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "test" for 0x4005eb>, <DisassemblerInsn "sete" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "setne" for 0x4005f7>, <DisassemblerInsn "and" for 0x4005fa>, <DisassemblerInsn "test" for 0x4005fc>, <DisassemblerInsn "jne" for 0x4005fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "test" for 0x40062d>, <DisassemblerInsn "sete" for 0x40062f>, <DisassemblerInsn "or" for 0x400632>, <DisassemblerInsn "test" for 0x400634>, <DisassemblerInsn "jne" for 0x400636>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40057e>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "jne" for 0x400585>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "ret" for 0x400672>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "call" for 0x400579>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<jmp~~0x400621>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40066a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40066a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40066a>']}, {'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x169b]>', '<lea~~rsi, [rip + 0x16a8]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x16b3]>', '<call~~0x5000a0>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400602>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400652>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x4005d5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}], 'cfg_edge_info': [(4, 6), (5, 7), (0, 2), (13, 2), (11, 14), (6, 8), (7, 13), (4, 5), (5, 6), (14, 15), (8, 11), (0, 1), (13, 16), (18, 9), (16, 18), (14, 2), (1, 4), (11, 15), (6, 9), (18, 8)], 'cdg_edge_info': [(6, 15), (4, 6), (5, 7), (5, 13), (0, 2), (13, 2), (11, 14), (6, 11), (6, 8), (4, 5), (5, 6), (14, 15), (0, 1), (0, 4), (13, 16), (18, 9), (18, 15), (14, 2), (13, 18), (18, 11), (6, 9), (18, 8)], 'ddg_edge_info': [(4, 18), (0, 5), (16, 14), (1, 9), (0, 11), (1, 18), (1, 15), (7, 16), (7, 13), (5, 18), (0, 1), (0, 7), (0, 16), (1, 5), (1, 11), (16, 9), (1, 14), (16, 15), (16, 18), (18, 15), (7, 15), (1, 4), (1, 7), (0, 15), (1, 16), (0, 18), (13, 15), (18, 11), (16, 11), (18, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: vf_yadif.c
Patched function: 1---static int poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/Os/vf_yadif.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/Os/vf_yadif.s---poll_frame---before
function id: 7
function flag: True
There are 79 instructions for function: poll_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '316', 'end': 330}, 'before': {'start': '316', 'end': 326}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/Os/vf_yadif.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/Os/vf_yadif.o---before
The extraction of function: poll_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 166 nodes and 281 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 79 instructions in binary file.
[4195630, 4195647, 4195656, 4195677, 4195697, 4195710, 4195730, 4195734, 4195777, 4195779]
The execution time of patched subCFG information extraction via angr: 0:00:00.412959
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005c3>, <DisassemblerInsn "lea" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "lea" for 0x4005d6>, <DisassemblerInsn "call" for 0x4005dd>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "test" for 0x4005ee>, <DisassemblerInsn "sete" for 0x4005f0>, <DisassemblerInsn "or" for 0x4005f3>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "jne" for 0x4005f7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005c1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400524>, <DisassemblerInsn "jne" for 0x400528>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054d>, <DisassemblerInsn "cmp" for 0x400552>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "jne" for 0x40055b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055d>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "call" for 0x40056c>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "mov" for 0x400583>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "call" for 0x40058d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "call" for 0x40053a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "test" for 0x4005ac>, <DisassemblerInsn "sete" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "test" for 0x4005b6>, <DisassemblerInsn "setne" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bb>, <DisassemblerInsn "test" for 0x4005bd>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40053f>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "jne" for 0x400546>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062b>, <DisassemblerInsn "add" for 0x40062f>, <DisassemblerInsn "ret" for 0x400633>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "test" for 0x4005ac>, <DisassemblerInsn "sete" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "test" for 0x4005b6>, <DisassemblerInsn "setne" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bb>, <DisassemblerInsn "test" for 0x4005bd>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400571>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "jl" for 0x400578>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x1673]>', '<lea~~rsi, [rip + 0x1680]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x168b]>', '<call~~0x5000a0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400613>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4005e2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40062b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x400596>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4005c3>']}, {'block_Idx': 3, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x400596>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4005c3>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062b>']}], 'cfg_edge_info': [(0, 1), (14, 8), (3, 4), (6, 9), (5, 8), (14, 7), (7, 10), (4, 6), (9, 2), (5, 7), (4, 5), (9, 11), (11, 14), (1, 3), (3, 5)]}]}
{'poll_frame': [4195630, 4195647, 4195656, 4195677, 4195697, 4195710, 4195730, 4195734, 4195777, 4195779]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a07578f3f2a5ad5cd5dcc5de5ee173254f191435/clang_before/Os/vf_yadif.o---before
The extraction of function: poll_frame
[4195630, 4195647, 4195656, 4195677, 4195697, 4195710, 4195730, 4195734, 4195777, 4195779]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 19 nodes and 28 edges in CFGEmulated.
It has 19 nodes and 27 edges in CDG.
It has 345 nodes and 398 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195630, 4195647, 4195656, 4195677, 4195697, 4195710, 4195730, 4195734, 4195777, 4195779]
{4195585, 4195777, 4195779, 4195810, 4195656, 4195883, 4195630, 4195697, 4195730, 4195859, 4195734, 4195833, 4195677, 4195710, 4195647}
[9, 1, 15, 8, 0, 13, 6, 11, 7, 18, 16, 2, 14, 4, 5]
The execution time of patched slicing information extraction via angr: 0:00:01.792599
{'poll_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005c3>, <DisassemblerInsn "lea" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "lea" for 0x4005d6>, <DisassemblerInsn "call" for 0x4005dd>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400537>, <DisassemblerInsn "call" for 0x40053a>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "mov" for 0x40061c>, <DisassemblerInsn "and" for 0x40061e>, <DisassemblerInsn "add" for 0x400621>, <DisassemblerInsn "imul" for 0x400624>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "mov" for 0x40062b>, <DisassemblerInsn "add" for 0x40062f>, <DisassemblerInsn "ret" for 0x400633>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005c1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400501>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400524>, <DisassemblerInsn "jne" for 0x400528>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400571>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "jl" for 0x400578>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "test" for 0x4005ac>, <DisassemblerInsn "sete" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "test" for 0x4005b6>, <DisassemblerInsn "setne" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bb>, <DisassemblerInsn "test" for 0x4005bd>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "test" for 0x4005ee>, <DisassemblerInsn "sete" for 0x4005f0>, <DisassemblerInsn "or" for 0x4005f3>, <DisassemblerInsn "test" for 0x4005f5>, <DisassemblerInsn "jne" for 0x4005f7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055d>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "mov" for 0x400565>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "call" for 0x40056c>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "test" for 0x4005ac>, <DisassemblerInsn "sete" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b2>, <DisassemblerInsn "test" for 0x4005b6>, <DisassemblerInsn "setne" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bb>, <DisassemblerInsn "test" for 0x4005bd>, <DisassemblerInsn "jne" for 0x4005bf>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057e>, <DisassemblerInsn "mov" for 0x400583>, <DisassemblerInsn "mov" for 0x400586>, <DisassemblerInsn "mov" for 0x40058a>, <DisassemblerInsn "call" for 0x40058d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062b>, <DisassemblerInsn "add" for 0x40062f>, <DisassemblerInsn "ret" for 0x400633>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x4005fd>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "cmp" for 0x400609>, <DisassemblerInsn "mov" for 0x40060d>, <DisassemblerInsn "je" for 0x400611>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40053f>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "jne" for 0x400546>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054d>, <DisassemblerInsn "cmp" for 0x400552>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "jne" for 0x40055b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<lea~~rdi, [rip + 0x1673]>', '<lea~~rsi, [rip + 0x1680]>', '<mov~~edx, 0x145>', '<lea~~rcx, [rip + 0x168b]>', '<call~~0x5000a0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 4]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<and~~eax, 1>', '<add~~eax, 1>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x4005e2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~rax, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, 1>', '<cmp~~dword ptr [rcx + 8], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jne~~0x40062b>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40062b>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4005c3>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<test~~eax, eax>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x400613>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500098>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], ecx>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 8], rax>', '<test~~rax, rax>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13], al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4005c3>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500090>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rcx + 0x88]>', '<cmp~~dword ptr [rcx + 0x10], 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40062b>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x400596>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x18], 0>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jne~~0x400596>']}], 'cfg_edge_info': [(4, 6), (5, 7), (0, 2), (13, 2), (11, 14), (6, 8), (7, 13), (4, 5), (5, 6), (14, 15), (8, 11), (0, 1), (13, 16), (18, 9), (16, 18), (14, 2), (1, 4), (11, 15), (6, 9), (18, 8)], 'cdg_edge_info': [(6, 15), (4, 6), (5, 7), (5, 13), (0, 2), (13, 2), (11, 14), (6, 11), (6, 8), (4, 5), (5, 6), (14, 15), (0, 1), (0, 4), (13, 16), (18, 9), (18, 15), (14, 2), (13, 18), (18, 11), (6, 9), (18, 8)], 'ddg_edge_info': [(4, 18), (0, 5), (1, 9), (0, 11), (1, 18), (1, 15), (7, 16), (7, 13), (5, 18), (0, 1), (0, 7), (0, 16), (1, 5), (1, 11), (16, 9), (1, 14), (13, 15), (16, 15), (16, 18), (18, 15), (7, 15), (1, 4), (1, 7), (0, 15), (1, 16), (0, 18), (16, 14), (18, 11), (16, 11), (18, 14)]}]}
{'poll_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 12, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 13, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 14, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 18, 'instruction': 'movl\t$1, %eax'}, {'instIndex': 19, 'instruction': 'cmpq\t$0, 0x18(%rcx)'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 21, 'instruction': 'jne\t.LBB7_5'}, {'instIndex': 23, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 26, 'instruction': 'callq\tavfilter_request_frame@PLT'}, {'instIndex': 27, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x34(%rsp)                  # 4-byte Spill'}, {'instIndex': 29, 'instruction': 'jl\t.LBB7_10'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 32, 'instruction': 'movq\t0x28(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 34, 'instruction': 'callq\tavfilter_poll_frame@PLT'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 40, 'instruction': 'movq\t%rax, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 41, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 42, 'instruction': 'sete\t%al'}, {'instIndex': 43, 'instruction': 'movb\t%al, 0x13(%rsp)                   # 1-byte Spill'}, {'instIndex': 44, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 45, 'instruction': 'setne\t%cl'}, {'instIndex': 46, 'instruction': 'andb\t%cl, %al'}, {'instIndex': 47, 'instruction': 'testb\t$1, %al'}, {'instIndex': 48, 'instruction': 'jne\t.LBB7_6'}, {'instIndex': 49, 'instruction': 'jmp\t.LBB7_7'}, {'instIndex': 50, 'instruction': 'leaq\t.L.str.6(%rip), %rdi'}, {'instIndex': 51, 'instruction': 'leaq\t.L.str.7(%rip), %rsi'}, {'instIndex': 52, 'instruction': 'movl\t$0x145, %edx                      # imm = 0x0x91'}, {'instIndex': 53, 'instruction': 'leaq\t.L__PRETTY_FUNCTION__.poll_frame(%rip), %rcx'}, {'instIndex': 54, 'instruction': 'callq\t__assert_fail@PLT'}]}]}
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/patch_info.txt
{'1': {'before': 'a/libavcodec/truemotion1.c', 'after': 'b/libavcodec/truemotion1.c'}}
{'1': [{'before': '-744,7', 'after': '+744,7', 'function': 'static void truemotion1_decode_24bit'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce---b/libavcodec/truemotion1.c
The case of compiler gcc with optimization no.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/no/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/no/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O0.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O0/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O0/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O1.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O1/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O1/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O2.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O2/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O2/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O3.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O3/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/O3/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization Os.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/Os/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_after/Os/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization no.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/no/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/no/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O0.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O0/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O0/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O1.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O1/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O1/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O2.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O2/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O2/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O3.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O3/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/O3/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization Os.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/Os/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_after/Os/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce---a/libavcodec/truemotion1.c
The case of compiler gcc with optimization no.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/no/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/no/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O0.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O0/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O0/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O1.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O1/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O1/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O2.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O2/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O2/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization O3.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O3/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/O3/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler gcc with optimization Os.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/Os/truemotion1_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/gcc_before/Os/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization no.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/no/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/no/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O0.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O0/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O0/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O1.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O1/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O1/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O2.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O2/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O2/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization O3.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O3/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/O3/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The case of compiler clang with optimization Os.
Patched source code file: truemotion1.c
Patched function: 1---static void truemotion1_decode_24bit 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/Os/truemotion1.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a0ed075b29a23f26794755fd051d32e1725658ce/clang_before/Os/truemotion1.o
Binary file does not exist.
{'truemotion1_decode_24bit': []}
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/patch_info.txt
{'1': {'before': 'a/libavcodec/eatgv.c', 'after': 'b/libavcodec/eatgv.c'}}
{'1': [{'before': '-269,9', 'after': '+269,10', 'function': 'static int tgv_decode_frame'}, {'before': '-282,9', 'after': '+283,6', 'function': 'static int tgv_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453---b/libavcodec/eatgv.c
The case of compiler gcc with optimization no.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/no/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/no/eatgv_gcc.s---tgv_decode_frame---after
function id: 64
function flag: True
There are 277 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/no/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/no/eatgv_gcc.s---tgv_decode_frame---after
function id: 64
function flag: True
There are 277 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/no/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O0/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O0/eatgv_gcc.s---tgv_decode_frame---after
function id: 64
function flag: True
There are 277 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O0/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O0/eatgv_gcc.s---tgv_decode_frame---after
function id: 64
function flag: True
There are 277 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O0/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 67, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 68, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 71, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 72, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 75, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 77, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 79, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 82, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 83, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 84, 'instruction': 'jns\t.L80'}, {'instIndex': 85, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 86, 'instruction': 'jmp\t.L78'}, {'instIndex': 87, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 89, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 90, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 91, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 132, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 133, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 134, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 135, 'instruction': 'cmpl\t$0, 0x38(%rsp)'}, {'instIndex': 136, 'instruction': 'jns\t.L83'}, {'instIndex': 137, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 138, 'instruction': 'jmp\t.L78'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O1/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O1/eatgv_gcc.s---tgv_decode_frame---after
function id: 11
function flag: True
There are 639 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r15)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r15)'}, {'instIndex': 29, 'instruction': 'movq\t(%r15), %rdx'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 33, 'instruction': 'je\t.L9'}, {'instIndex': 34, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%r15), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%r15), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 43, 'instruction': 'js\t.L4'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 71, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 74, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 75, 'instruction': 'js\t.L4'}, {'instIndex': 509, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 510, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 511, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 512, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 513, 'instruction': 'js\t.L4'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O1/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O1/eatgv_gcc.s---tgv_decode_frame---after
function id: 11
function flag: True
There are 639 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r15)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r15)'}, {'instIndex': 29, 'instruction': 'movq\t(%r15), %rdx'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 33, 'instruction': 'je\t.L9'}, {'instIndex': 34, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%r15), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%r15), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 43, 'instruction': 'js\t.L4'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 71, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 74, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 75, 'instruction': 'js\t.L4'}, {'instIndex': 509, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 510, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 511, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 512, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 513, 'instruction': 'js\t.L4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O1/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r15)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r15)'}, {'instIndex': 29, 'instruction': 'movq\t(%r15), %rdx'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 33, 'instruction': 'je\t.L9'}, {'instIndex': 34, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%r15), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%r15), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 43, 'instruction': 'js\t.L4'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 71, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 73, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 74, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 75, 'instruction': 'js\t.L4'}, {'instIndex': 509, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 510, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 511, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 512, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 513, 'instruction': 'js\t.L4'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O2/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O2/eatgv_gcc.s---tgv_decode_frame---after
function id: 10
function flag: True
There are 616 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r14), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%rbx), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%rbx)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r14), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%rbx)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'movq\t8(%rsp), %r8'}, {'instIndex': 43, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'js\t.L4'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r14), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 71, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'jns\t.L117'}, {'instIndex': 89, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 90, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 91, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 92, 'instruction': 'js\t.L4'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O2/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O2/eatgv_gcc.s---tgv_decode_frame---after
function id: 10
function flag: True
There are 616 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r14), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%rbx), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%rbx)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r14), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%rbx)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'movq\t8(%rsp), %r8'}, {'instIndex': 43, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'js\t.L4'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r14), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 71, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'jns\t.L117'}, {'instIndex': 89, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 90, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 91, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 92, 'instruction': 'js\t.L4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O2/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r14), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%rbx), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%rbx)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r14), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%rbx)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 37, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 38, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 39, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 40, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 41, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 42, 'instruction': 'movq\t8(%rsp), %r8'}, {'instIndex': 43, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'js\t.L4'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r14), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 71, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 72, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t%r8, 8(%rsp)'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'jns\t.L117'}, {'instIndex': 89, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 90, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 91, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 92, 'instruction': 'js\t.L4'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O3/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O3/eatgv_gcc.s---tgv_decode_frame---after
function id: 10
function flag: True
There are 1015 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%r11), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r11)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r11)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%r11), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 37, 'instruction': 'leaq\t8(%r11), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 40, 'instruction': 'movl\t0x244(%r11), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x240(%r11), %esi'}, {'instIndex': 42, 'instruction': 'movq\t(%r11), %rdi'}, {'instIndex': 43, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 45, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'js\t.L4'}, {'instIndex': 47, 'instruction': 'movzwl\t14(%r12), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 73, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 75, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 76, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 77, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 78, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 79, 'instruction': 'jns\t.L107'}, {'instIndex': 91, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 92, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 93, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 95, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 96, 'instruction': 'js\t.L4'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O3/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O3/eatgv_gcc.s---tgv_decode_frame---after
function id: 10
function flag: True
There are 1015 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%r11), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r11)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r11)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%r11), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 37, 'instruction': 'leaq\t8(%r11), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 40, 'instruction': 'movl\t0x244(%r11), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x240(%r11), %esi'}, {'instIndex': 42, 'instruction': 'movq\t(%r11), %rdi'}, {'instIndex': 43, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 45, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'js\t.L4'}, {'instIndex': 47, 'instruction': 'movzwl\t14(%r12), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 73, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 75, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 76, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 77, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 78, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 79, 'instruction': 'jns\t.L107'}, {'instIndex': 91, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 92, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 93, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 95, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 96, 'instruction': 'js\t.L4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/O3/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movzwl\t8(%r12), %eax'}, {'instIndex': 25, 'instruction': 'movq\t(%r11), %rdx'}, {'instIndex': 26, 'instruction': 'movl\t%eax, 0x240(%r11)'}, {'instIndex': 27, 'instruction': 'movzwl\t10(%r12), %ecx'}, {'instIndex': 28, 'instruction': 'movl\t%ecx, 0x244(%r11)'}, {'instIndex': 29, 'instruction': 'cmpl\t0x94(%rdx), %eax'}, {'instIndex': 30, 'instruction': 'jne\t.L8'}, {'instIndex': 31, 'instruction': 'cmpl\t0x98(%rdx), %ecx'}, {'instIndex': 32, 'instruction': 'je\t.L11'}, {'instIndex': 33, 'instruction': 'leaq\t0x238(%r11), %rdi'}, {'instIndex': 34, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 35, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 36, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 37, 'instruction': 'leaq\t8(%r11), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 39, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 40, 'instruction': 'movl\t0x244(%r11), %edx'}, {'instIndex': 41, 'instruction': 'movl\t0x240(%r11), %esi'}, {'instIndex': 42, 'instruction': 'movq\t(%r11), %rdi'}, {'instIndex': 43, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 44, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 45, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'js\t.L4'}, {'instIndex': 47, 'instruction': 'movzwl\t14(%r12), %ecx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 73, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 75, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 76, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 77, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 78, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 79, 'instruction': 'jns\t.L107'}, {'instIndex': 91, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 92, 'instruction': 'movq\t%r11, 8(%rsp)'}, {'instIndex': 93, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %r11'}, {'instIndex': 95, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 96, 'instruction': 'js\t.L4'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/Os/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/Os/eatgv_gcc.s---tgv_decode_frame---after
function id: 19
function flag: True
There are 537 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%r8), %ecx'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%r8), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rax), %ecx'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rax), %edx'}, {'instIndex': 36, 'instruction': 'jne\t.L10'}, {'instIndex': 37, 'instruction': 'movzwl\t14(%r8), %esi'}, {'instIndex': 41, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'movq\t%r8, 0x18(%rsp)'}, {'instIndex': 43, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 45, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 47, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 49, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 50, 'instruction': 'movq\t0x18(%rsp), %r8'}, {'instIndex': 51, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'jns\t.L12'}, {'instIndex': 53, 'instruction': 'jmp\t.L5'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 72, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 74, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'js\t.L5'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/Os/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/Os/eatgv_gcc.s---tgv_decode_frame---after
function id: 19
function flag: True
There are 537 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%r8), %ecx'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%r8), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rax), %ecx'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rax), %edx'}, {'instIndex': 36, 'instruction': 'jne\t.L10'}, {'instIndex': 37, 'instruction': 'movzwl\t14(%r8), %esi'}, {'instIndex': 41, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'movq\t%r8, 0x18(%rsp)'}, {'instIndex': 43, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 45, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 47, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 49, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 50, 'instruction': 'movq\t0x18(%rsp), %r8'}, {'instIndex': 51, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'jns\t.L12'}, {'instIndex': 53, 'instruction': 'jmp\t.L5'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 72, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 74, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'js\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_after/Os/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%r8), %ecx'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rax'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%r8), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rax), %ecx'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rax), %edx'}, {'instIndex': 36, 'instruction': 'jne\t.L10'}, {'instIndex': 37, 'instruction': 'movzwl\t14(%r8), %esi'}, {'instIndex': 41, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'movq\t%r8, 0x18(%rsp)'}, {'instIndex': 43, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 45, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movl\t0x244(%rbx), %edx'}, {'instIndex': 47, 'instruction': 'movl\t0x240(%rbx), %esi'}, {'instIndex': 48, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 49, 'instruction': 'call\tff_set_dimensions@PLT'}, {'instIndex': 50, 'instruction': 'movq\t0x18(%rsp), %r8'}, {'instIndex': 51, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'jns\t.L12'}, {'instIndex': 53, 'instruction': 'jmp\t.L5'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 72, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 74, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 75, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 76, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'js\t.L5'}]}]}
The case of compiler clang with optimization no.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 259 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 259 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 208 nodes and 337 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 259 instructions in binary file.
[4194584, 4194650, 4194677, 4194694, 4194708, 4194743, 4194752, 4194765, 4194767]
[4194948, 4194950, 4194970, 4194979]
The execution time of patched subCFG information extraction via angr: 0:00:00.274096
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400202>, <DisassemblerInsn "cmp" for 0x400204>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "jge" for 0x400210>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "add" for 0x40018b>, <DisassemblerInsn "call" for 0x40018f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "add" for 0x40017a>, <DisassemblerInsn "call" for 0x400181>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cd>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "movzx" for 0x4001d4>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "cmp" for 0x4001bb>, <DisassemblerInsn "jge" for 0x4001be>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jmp" for 0x4001c8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001cf>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500018>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4001cf>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4001cd>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}], 'cfg_edge_info': [(31, 11), (12, 17), (17, 23), (11, 16), (6, 11), (3, 7), (30, 13), (6, 7), (7, 12), (11, 15), (23, 31), (3, 6), (1, 3), (23, 30)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40022f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002be>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002ca>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "jmp" for 0x4002ab>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "cmp" for 0x40029e>, <DisassemblerInsn "jge" for 0x4002a1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x400286>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002b0>']}], 'cfg_edge_info': [(9, 13), (21, 28), (5, 10), (0, 2), (28, 2), (5, 9), (2, 5)]}]}
{'tgv_decode_frame': [4194948, 4194950, 4194970, 4194979]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/no/eatgv.o---after
The extraction of function: tgv_decode_frame
[4194948, 4194950, 4194970, 4194979]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 226 nodes and 340 edges in CFGEmulated.
It has 226 nodes and 375 edges in CDG.
It has 4630 nodes and 6750 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194948, 4194950, 4194970, 4194979]
{4194818, 4195458, 4194948, 4195076, 4194950, 4194694, 4194571, 4194834, 4194708, 4195223, 4194584, 4194970, 4195355, 4195482, 4194979, 4195107, 4195492, 4195494, 4194855, 4195236, 4195367, 4195244, 4194863, 4194992, 4194865, 4195508, 4195125, 4194743, 4195261, 4195391, 4194752, 4195138, 4195527, 4195404, 4194765, 4195023, 4194767, 4195536, 4194650, 4195546, 4195037, 4194400, 4194531, 4195565, 4194802, 4194547, 4194677, 4195194, 4195453, 4195199}
[67, 22, 41, 60, 3, 16, 45, 10, 15, 221, 37, 84, 48, 27, 57, 12, 14, 25, 1, 127, 20, 29, 85, 21, 28, 2, 26, 6, 42, 32, 35, 78, 72, 68, 63, 180, 97, 120, 54, 34, 4, 90, 33, 39, 18, 17, 31, 24, 9, 13, 128, 0, 101, 40, 73, 69, 7]
The execution time of patched slicing information extraction via angr: 0:00:23.352697
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "lea" for 0x40048c>, <DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "call" for 0x400495>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "movzx" for 0x400236>, <DisassemblerInsn "shl" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "movzx" for 0x400241>, <DisassemblerInsn "shl" for 0x400245>, <DisassemblerInsn "or" for 0x400248>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "movzx" for 0x40024f>, <DisassemblerInsn "or" for 0x400253>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "movsxd" for 0x40025a>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "add" for 0x40026b>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "add" for 0x400278>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "jmp" for 0x40027f>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40047d>, <DisassemblerInsn "jge" for 0x400480>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "jmp" for 0x400447>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "movzx" for 0x4001d4>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400202>, <DisassemblerInsn "cmp" for 0x400204>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "jge" for 0x400210>]'}, {'block_Idx': 221, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "cmp" for 0x4003b5>, <DisassemblerInsn "jge" for 0x4003bb>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400560>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "mov" for 0x40056e>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "imul" for 0x400585>, <DisassemblerInsn "movsxd" for 0x40058a>, <DisassemblerInsn "add" for 0x40058d>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "movzx" for 0x4005a4>, <DisassemblerInsn "and" for 0x4005a7>, <DisassemblerInsn "cmp" for 0x4005aa>, <DisassemblerInsn "je" for 0x4005ad>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "imul" for 0x4003ce>, <DisassemblerInsn "cdqe" for 0x4003d2>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "mov" for 0x4003e3>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "imul" for 0x4003ec>, <DisassemblerInsn "cdqe" for 0x4003f3>, <DisassemblerInsn "add" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "movsxd" for 0x4003fd>, <DisassemblerInsn "call" for 0x400404>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "jmp" for 0x40033d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "add" for 0x40094c>, <DisassemblerInsn "ret" for 0x400950>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002be>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002ca>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "jmp" for 0x4004d8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400212>, <DisassemblerInsn "add" for 0x400217>, <DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "setb" for 0x400220>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "cmp" for 0x400420>, <DisassemblerInsn "jne" for 0x400425>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400416>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40022f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f5>, <DisassemblerInsn "cmp" for 0x4002fa>, <DisassemblerInsn "jne" for 0x400302>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "cmp" for 0x40032f>, <DisassemblerInsn "jne" for 0x400333>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400342>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034c>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "call" for 0x400375>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "cmp" for 0x4001bb>, <DisassemblerInsn "jge" for 0x4001be>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a6>, <DisassemblerInsn "add" for 0x4004ab>, <DisassemblerInsn "call" for 0x4004af>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "lea" for 0x400389>, <DisassemblerInsn "mov" for 0x400390>, <DisassemblerInsn "call" for 0x400392>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004a4>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40037a>, <DisassemblerInsn "jge" for 0x40037d>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102d>, <DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "ret" for 0x401046>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "jmp" for 0x40039f>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "cmp" for 0x4004cb>, <DisassemblerInsn "jge" for 0x4004ce>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "ret" for 0x401046>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "mov" for 0x400469>, <DisassemblerInsn "mov" for 0x40046e>, <DisassemblerInsn "mov" for 0x400473>, <DisassemblerInsn "call" for 0x400478>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "lea" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "call" for 0x400106>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "jmp" for 0x4004a2>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400427>, <DisassemblerInsn "mov" for 0x40042c>, <DisassemblerInsn "lea" for 0x400431>, <DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "call" for 0x40043a>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400960>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "mov" for 0x400977>, <DisassemblerInsn "mov" for 0x40097f>, <DisassemblerInsn "mov" for 0x400987>, <DisassemblerInsn "add" for 0x40098f>, <DisassemblerInsn "cmp" for 0x400993>, <DisassemblerInsn "jbe" for 0x40099b>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "add" for 0x40018b>, <DisassemblerInsn "call" for 0x40018f>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400304>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "imul" for 0x400314>, <DisassemblerInsn "movsxd" for 0x40031b>, <DisassemblerInsn "call" for 0x40031e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "jne" for 0x4002d7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "cmp" for 0x40029e>, <DisassemblerInsn "jge" for 0x4002a1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "jmp" for 0x4002ab>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "mov" for 0x4004df>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b4>, <DisassemblerInsn "add" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004bd>, <DisassemblerInsn "call" for 0x4004c2>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jmp" for 0x4001c8>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "cmp" for 0x4003b5>, <DisassemblerInsn "jge" for 0x4003bb>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "add" for 0x40094c>, <DisassemblerInsn "ret" for 0x400950>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "add" for 0x40017a>, <DisassemblerInsn "call" for 0x400181>]'}], 'cfg_block_detailed_info': [{'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xef3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~edx, byte ptr [rax]>', '<shl~~edx, 0x10>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 1]>', '<shl~~eax, 8>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 2]>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 8]>', '<mov~~dword ptr [rax + rcx*4 + 0x248], edx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~eax, dword ptr [rsp + 8]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x4001f2>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x4001cf>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4004a4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 221, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400416>']}, {'block_Idx': 37, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x40], r8d>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<imul~~ecx, dword ptr [rsp + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<je~~0x4005bf>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rax + 0x238]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x240]>', '<cdqe~~>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rdx, dword ptr [rax + 0x240]>', '<call~~0x500028>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x4004ed>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500018>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<setb~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x40044c>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x4004a6>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400342>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001cf>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rcx + 0x238], rax>', '<cmp~~rax, 0>', '<jne~~0x400342>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rax + 0x238]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rax + 0x94]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~r8d, dword ptr [rax + 0x98]>', '<call~~0x400560>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4001cd>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xfb0]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x4004a6>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003a4>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], 0>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4004da>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 2>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<call~~0x400960>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x122a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf1f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x90]>', '<jbe~~0x4009ad>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40041b>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002b0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x400286>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x500038>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400416>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], 0>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}], 'cfg_edge_info': [(32, 37), (7, 17), (73, 84), (42, 48), (33, 45), (3, 7), (4, 12), (60, 68), (21, 25), (0, 2), (72, 97), (22, 26), (9, 14), (127, 18), (57, 63), (1, 3), (78, 101), (17, 27), (10, 15), (68, 78), (42, 32), (63, 73), (16, 22), (15, 20), (24, 29), (120, 128), (180, 60), (45, 18), (60, 67), (3, 6), (20, 22), (35, 41), (12, 18), (29, 34), (221, 85), (32, 63), (0, 1), (14, 24), (101, 120), (9, 13), (85, 78), (34, 39), (13, 18), (28, 32), (15, 16), (26, 16), (6, 7), (16, 21), (120, 127), (40, 18), (24, 28), (34, 60), (6, 10), (63, 72), (69, 63), (54, 60), (97, 18), (73, 85), (20, 21), (35, 40), (29, 33), (221, 84), (67, 90), (25, 2), (31, 42), (41, 10), (1, 4), (2, 9), (10, 16), (28, 31), (27, 35), (90, 18), (48, 18), (26, 15)], 'cdg_edge_info': [(42, 48), (221, 101), (6, 2), (60, 101), (42, 32), (16, 22), (3, 6), (20, 22), (29, 34), (73, 101), (35, 10), (15, 16), (26, 16), (24, 28), (3, 17), (29, 45), (60, 78), (3, 35), (42, 18), (35, 21), (16, 26), (73, 78), (6, 27), (20, 26), (9, 14), (84, 221), (1, 3), (10, 15), (1, 12), (63, 97), (60, 18), (35, 25), (63, 72), (29, 33), (221, 84), (35, 9), (35, 18), (73, 84), (3, 7), (60, 68), (35, 2), (1, 18), (120, 128), (6, 17), (15, 20), (24, 32), (120, 18), (35, 41), (6, 35), (6, 10), (1, 4), (10, 16), (9, 18), (28, 31), (29, 60), (26, 15), (221, 120), (6, 21), (60, 120), (73, 120), (28, 42), (63, 73), (63, 18), (24, 29), (60, 67), (0, 1), (9, 13), (3, 27), (6, 7), (120, 127), (29, 18), (6, 25), (35, 40), (221, 78), (9, 24), (60, 90), (6, 9)], 'ddg_edge_info': [(7, 17), (33, 45), (4, 128), (22, 26), (14, 31), (0, 14), (0, 78), (221, 101), (20, 120), (42, 32), (3, 6), (0, 7), (14, 24), (14, 33), (0, 101), (0, 9), (0, 128), (31, 42), (20, 42), (15, 9), (26, 9), (10, 22), (73, 78), (0, 2), (22, 32), (14, 28), (27, 22), (3, 101), (10, 15), (42, 84), (27, 40), (26, 20), (0, 32), (42, 221), (45, 128), (27, 15), (2, 13), (28, 32), (10, 26), (0, 34), (3, 78), (221, 84), (67, 90), (14, 32), (27, 26), (13, 128), (90, 128), (101, 128), (27, 35), (0, 27), (20, 60), (73, 84), (0, 45), (22, 84), (31, 32), (27, 10), (72, 97), (78, 101), (17, 27), (0, 20), (0, 84), (0, 29), (15, 20), (0, 221), (0, 4), (28, 84), (0, 22), (0, 31), (28, 221), (20, 9), (31, 128), (97, 128), (33, 128), (0, 6), (0, 15), (31, 48), (28, 31), (48, 128), (0, 24), (0, 33), (0, 42), (221, 120), (60, 120), (4, 12), (127, 128), (73, 221), (101, 127), (14, 34), (2, 14), (0, 17), (22, 221), (0, 26), (12, 128), (67, 128), (27, 128), (0, 1), (22, 31), (101, 120), (9, 13), (0, 10), (3, 27), (0, 28), (40, 128), (120, 127), (35, 40), (27, 2), (221, 78), (22, 15), (27, 20), (0, 3), (14, 29), (2, 9), (2, 128), (20, 63), (72, 128)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 259 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 259 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 208 nodes and 337 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 259 instructions in binary file.
[4194584, 4194650, 4194677, 4194694, 4194708, 4194743, 4194752, 4194765, 4194767]
[4194948, 4194950, 4194970, 4194979]
The execution time of patched subCFG information extraction via angr: 0:00:00.669312
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400202>, <DisassemblerInsn "cmp" for 0x400204>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "jge" for 0x400210>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "add" for 0x40018b>, <DisassemblerInsn "call" for 0x40018f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "add" for 0x40017a>, <DisassemblerInsn "call" for 0x400181>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cd>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "movzx" for 0x4001d4>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "cmp" for 0x4001bb>, <DisassemblerInsn "jge" for 0x4001be>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jmp" for 0x4001c8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001cf>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500018>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x4001cf>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4001cd>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}], 'cfg_edge_info': [(31, 11), (12, 17), (17, 23), (11, 16), (6, 11), (3, 7), (30, 13), (6, 7), (7, 12), (11, 15), (23, 31), (3, 6), (1, 3), (23, 30)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40022f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002be>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002ca>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "jmp" for 0x4002ab>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "cmp" for 0x40029e>, <DisassemblerInsn "jge" for 0x4002a1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x400286>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002b0>']}], 'cfg_edge_info': [(9, 13), (21, 28), (5, 10), (0, 2), (28, 2), (5, 9), (2, 5)]}]}
{'tgv_decode_frame': [4194948, 4194950, 4194970, 4194979]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O0/eatgv.o---after
The extraction of function: tgv_decode_frame
[4194948, 4194950, 4194970, 4194979]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 226 nodes and 340 edges in CFGEmulated.
It has 226 nodes and 375 edges in CDG.
It has 4630 nodes and 6749 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194948, 4194950, 4194970, 4194979]
{4194818, 4195458, 4194948, 4195076, 4194950, 4194694, 4194571, 4194834, 4194708, 4195223, 4194584, 4194970, 4195355, 4195482, 4194979, 4195107, 4195492, 4195494, 4194855, 4195236, 4195367, 4195244, 4194863, 4194992, 4194865, 4195508, 4195125, 4194743, 4195261, 4195391, 4194752, 4195138, 4195527, 4195404, 4194765, 4195023, 4194767, 4195536, 4194650, 4195546, 4195037, 4194400, 4194531, 4195565, 4194802, 4194547, 4194677, 4195194, 4195453, 4195199}
[67, 22, 41, 60, 3, 16, 45, 10, 15, 221, 37, 84, 48, 27, 57, 12, 14, 25, 1, 127, 20, 29, 85, 21, 28, 2, 26, 6, 42, 32, 35, 78, 72, 68, 63, 180, 97, 120, 54, 34, 4, 90, 33, 39, 18, 17, 31, 24, 9, 13, 128, 0, 101, 40, 73, 69, 7]
The execution time of patched slicing information extraction via angr: 0:00:23.251971
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "lea" for 0x40048c>, <DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "call" for 0x400495>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "movzx" for 0x400236>, <DisassemblerInsn "shl" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "movzx" for 0x400241>, <DisassemblerInsn "shl" for 0x400245>, <DisassemblerInsn "or" for 0x400248>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "movzx" for 0x40024f>, <DisassemblerInsn "or" for 0x400253>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "movsxd" for 0x40025a>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "add" for 0x40026b>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "add" for 0x400278>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "jmp" for 0x40027f>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40047d>, <DisassemblerInsn "jge" for 0x400480>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "jmp" for 0x400447>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "movzx" for 0x4001d4>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400202>, <DisassemblerInsn "cmp" for 0x400204>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "jge" for 0x400210>]'}, {'block_Idx': 221, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "cmp" for 0x4003b5>, <DisassemblerInsn "jge" for 0x4003bb>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400560>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "mov" for 0x40056e>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "imul" for 0x400585>, <DisassemblerInsn "movsxd" for 0x40058a>, <DisassemblerInsn "add" for 0x40058d>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400595>, <DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "movzx" for 0x4005a4>, <DisassemblerInsn "and" for 0x4005a7>, <DisassemblerInsn "cmp" for 0x4005aa>, <DisassemblerInsn "je" for 0x4005ad>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "imul" for 0x4003ce>, <DisassemblerInsn "cdqe" for 0x4003d2>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "mov" for 0x4003e3>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "imul" for 0x4003ec>, <DisassemblerInsn "cdqe" for 0x4003f3>, <DisassemblerInsn "add" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "movsxd" for 0x4003fd>, <DisassemblerInsn "call" for 0x400404>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "jmp" for 0x40033d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "add" for 0x40094c>, <DisassemblerInsn "ret" for 0x400950>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002be>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002ca>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "jmp" for 0x4004d8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400212>, <DisassemblerInsn "add" for 0x400217>, <DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "setb" for 0x400220>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "test" for 0x40022b>, <DisassemblerInsn "jne" for 0x40022d>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "cmp" for 0x400420>, <DisassemblerInsn "jne" for 0x400425>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400416>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40022f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f5>, <DisassemblerInsn "cmp" for 0x4002fa>, <DisassemblerInsn "jne" for 0x400302>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "cmp" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "jge" for 0x400200>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "cmp" for 0x40032f>, <DisassemblerInsn "jne" for 0x400333>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400342>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034c>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "mov" for 0x40036b>, <DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "call" for 0x400375>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "cmp" for 0x4001bb>, <DisassemblerInsn "jge" for 0x4001be>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a6>, <DisassemblerInsn "add" for 0x4004ab>, <DisassemblerInsn "call" for 0x4004af>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "lea" for 0x400389>, <DisassemblerInsn "mov" for 0x400390>, <DisassemblerInsn "call" for 0x400392>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004a4>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40037a>, <DisassemblerInsn "jge" for 0x40037d>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102d>, <DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "ret" for 0x401046>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "jmp" for 0x40039f>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "cmp" for 0x4004cb>, <DisassemblerInsn "jge" for 0x4004ce>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "ret" for 0x401046>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "mov" for 0x400469>, <DisassemblerInsn "mov" for 0x40046e>, <DisassemblerInsn "mov" for 0x400473>, <DisassemblerInsn "call" for 0x400478>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "lea" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "call" for 0x400106>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "jmp" for 0x4004a2>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400427>, <DisassemblerInsn "mov" for 0x40042c>, <DisassemblerInsn "lea" for 0x400431>, <DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "call" for 0x40043a>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400960>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "mov" for 0x400977>, <DisassemblerInsn "mov" for 0x40097f>, <DisassemblerInsn "mov" for 0x400987>, <DisassemblerInsn "add" for 0x40098f>, <DisassemblerInsn "cmp" for 0x400993>, <DisassemblerInsn "jbe" for 0x40099b>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "add" for 0x40018b>, <DisassemblerInsn "call" for 0x40018f>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400304>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "imul" for 0x400314>, <DisassemblerInsn "movsxd" for 0x40031b>, <DisassemblerInsn "call" for 0x40031e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002cf>, <DisassemblerInsn "jne" for 0x4002d7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "cmp" for 0x40029e>, <DisassemblerInsn "jge" for 0x4002a1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "jmp" for 0x4002ab>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "mov" for 0x4004df>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "add" for 0x4004f1>, <DisassemblerInsn "ret" for 0x4004f5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b4>, <DisassemblerInsn "add" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004bd>, <DisassemblerInsn "call" for 0x4004c2>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jmp" for 0x4001c8>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "cmp" for 0x4003b5>, <DisassemblerInsn "jge" for 0x4003bb>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "add" for 0x40094c>, <DisassemblerInsn "ret" for 0x400950>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "add" for 0x40017a>, <DisassemblerInsn "call" for 0x400181>]'}], 'cfg_block_detailed_info': [{'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xef3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~edx, byte ptr [rax]>', '<shl~~edx, 0x10>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 1]>', '<shl~~eax, 8>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 2]>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 8]>', '<mov~~dword ptr [rax + rcx*4 + 0x248], edx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~eax, dword ptr [rsp + 8]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x4001f2>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x4001cf>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4004a4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 221, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400416>']}, {'block_Idx': 37, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x40], r8d>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<imul~~ecx, dword ptr [rsp + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<je~~0x4005bf>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rax + 0x238]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x240]>', '<cdqe~~>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rdx, dword ptr [rax + 0x240]>', '<call~~0x500028>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x4004ed>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500018>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<setb~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400231>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x40044c>']}, {'block_Idx': 85, 'blockInsts': ['<jmp~~0x4004a6>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400342>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x400227>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001cf>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rcx + 0x238], rax>', '<cmp~~rax, 0>', '<jne~~0x400342>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rax + 0x238]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rax + 0x94]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~r8d, dword ptr [rax + 0x98]>', '<call~~0x400560>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4001cd>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xfb0]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x4004a6>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003a4>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], 0>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4004da>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 2>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<call~~0x400960>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x122a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x4004ed>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf1f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x90]>', '<jbe~~0x4009ad>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 24, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40041b>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002b0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x400286>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x500038>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x4004ed>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400416>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], 0>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}], 'cfg_edge_info': [(32, 37), (7, 17), (73, 84), (42, 48), (33, 45), (3, 7), (4, 12), (60, 68), (21, 25), (0, 2), (72, 97), (22, 26), (9, 14), (127, 18), (57, 63), (1, 3), (78, 101), (17, 27), (10, 15), (68, 78), (42, 32), (63, 73), (16, 22), (15, 20), (24, 29), (120, 128), (180, 60), (45, 18), (60, 67), (3, 6), (20, 22), (35, 41), (12, 18), (29, 34), (221, 85), (32, 63), (0, 1), (14, 24), (101, 120), (9, 13), (85, 78), (34, 39), (13, 18), (28, 32), (15, 16), (26, 16), (6, 7), (16, 21), (120, 127), (40, 18), (24, 28), (34, 60), (6, 10), (63, 72), (69, 63), (54, 60), (97, 18), (73, 85), (20, 21), (35, 40), (29, 33), (221, 84), (67, 90), (25, 2), (31, 42), (41, 10), (1, 4), (2, 9), (10, 16), (28, 31), (27, 35), (90, 18), (48, 18), (26, 15)], 'cdg_edge_info': [(42, 48), (221, 101), (6, 2), (60, 101), (42, 32), (16, 22), (3, 6), (20, 22), (29, 34), (73, 101), (35, 10), (15, 16), (26, 16), (24, 28), (3, 17), (29, 45), (60, 78), (3, 35), (42, 18), (35, 21), (16, 26), (73, 78), (6, 27), (20, 26), (9, 14), (84, 221), (1, 3), (10, 15), (1, 12), (63, 97), (60, 18), (35, 25), (63, 72), (29, 33), (221, 84), (35, 9), (35, 18), (73, 84), (3, 7), (60, 68), (35, 2), (1, 18), (120, 128), (6, 17), (15, 20), (24, 32), (120, 18), (35, 41), (6, 35), (6, 10), (1, 4), (10, 16), (9, 18), (28, 31), (29, 60), (26, 15), (221, 120), (6, 21), (60, 120), (73, 120), (28, 42), (63, 73), (63, 18), (24, 29), (60, 67), (0, 1), (9, 13), (3, 27), (6, 7), (120, 127), (29, 18), (6, 25), (35, 40), (221, 78), (9, 24), (60, 90), (6, 9)], 'ddg_edge_info': [(7, 17), (33, 45), (4, 128), (22, 26), (14, 31), (0, 14), (0, 78), (221, 101), (20, 120), (42, 32), (3, 6), (0, 7), (14, 24), (14, 33), (0, 101), (0, 9), (0, 128), (31, 42), (20, 42), (15, 9), (26, 9), (10, 22), (73, 78), (0, 2), (22, 32), (14, 28), (27, 22), (3, 101), (10, 15), (42, 84), (27, 40), (26, 20), (0, 32), (42, 221), (45, 128), (27, 15), (2, 13), (28, 32), (10, 26), (0, 34), (3, 78), (221, 84), (67, 90), (14, 32), (27, 26), (13, 128), (90, 128), (101, 128), (27, 35), (0, 27), (20, 60), (73, 84), (0, 45), (22, 84), (31, 32), (27, 10), (72, 97), (78, 101), (17, 27), (0, 20), (0, 84), (0, 29), (15, 20), (0, 221), (0, 4), (28, 84), (0, 22), (0, 31), (28, 221), (20, 9), (31, 128), (97, 128), (33, 128), (0, 6), (0, 15), (31, 48), (28, 31), (48, 128), (0, 24), (0, 33), (0, 42), (221, 120), (60, 120), (4, 12), (127, 128), (73, 221), (101, 127), (14, 34), (2, 14), (0, 17), (22, 221), (0, 26), (12, 128), (67, 128), (27, 128), (0, 1), (22, 31), (101, 120), (9, 13), (0, 10), (3, 27), (0, 28), (40, 128), (120, 127), (35, 40), (27, 2), (221, 78), (22, 15), (27, 20), (0, 3), (14, 29), (2, 9), (2, 128), (20, 63), (72, 128)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_8'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 61, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 62, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 63, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 64, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 65, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 67, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 74, 'instruction': 'jge\t.LBB1_7'}, {'instIndex': 75, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 76, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 77, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB1_8'}, {'instIndex': 79, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 124, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 125, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 127, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 128, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 130, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 131, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 132, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 134, 'instruction': 'jmp\t.LBB1_37'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1221 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 49, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 50, 'instruction': 'movq\t%rsi, 0x500(%rsp)                # 8-byte Spill'}, {'instIndex': 51, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 52, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x50c(%rsp)                # 4-byte Spill'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 56, 'instruction': 'movq\t%rsi, 0x510(%rsp)                # 8-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x518(%rsp)                # 8-byte Spill'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 61, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 64, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 65, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 75, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 76, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 77, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 78, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 81, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 83, 'instruction': 'movq\t%rdx, 0x520(%rsp)                # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movl\t%ecx, 0x528(%rsp)                # 4-byte Spill'}, {'instIndex': 86, 'instruction': 'jl\t.LBB1_10'}, {'instIndex': 89, 'instruction': 'movw\t14(%rax), %dx'}, {'instIndex': 90, 'instruction': 'movw\t%dx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 98, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 162, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 163, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 164, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 165, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 166, 'instruction': 'jl\t.LBB1_81'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1221 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 49, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 50, 'instruction': 'movq\t%rsi, 0x500(%rsp)                # 8-byte Spill'}, {'instIndex': 51, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 52, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x50c(%rsp)                # 4-byte Spill'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 56, 'instruction': 'movq\t%rsi, 0x510(%rsp)                # 8-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x518(%rsp)                # 8-byte Spill'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 61, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 64, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 65, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 75, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 76, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 77, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 78, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 81, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 83, 'instruction': 'movq\t%rdx, 0x520(%rsp)                # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movl\t%ecx, 0x528(%rsp)                # 4-byte Spill'}, {'instIndex': 86, 'instruction': 'jl\t.LBB1_10'}, {'instIndex': 89, 'instruction': 'movw\t14(%rax), %dx'}, {'instIndex': 90, 'instruction': 'movw\t%dx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 98, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 162, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 163, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 164, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 165, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 166, 'instruction': 'jl\t.LBB1_81'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 127 nodes and 226 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1221 instructions in binary file.
[4194592, 4194697, 4194720, 4194740, 4194757, 4194793, 4194836, 4194891]
[4195218, 4195274]
The execution time of patched subCFG information extraction via angr: 0:00:00.703280
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "add" for 0x4001a8>, <DisassemblerInsn "call" for 0x4001af>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "movzx" for 0x40025b>, <DisassemblerInsn "add" for 0x40025e>, <DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "sub" for 0x400263>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "cmovb" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "xor" for 0x40027e>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400288>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "add" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "cmp" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "mov" for 0x4002d4>, <DisassemblerInsn "jae" for 0x4002db>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "cmp" for 0x4000d6>, <DisassemblerInsn "jge" for 0x4000d9>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "add" for 0x40013e>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "movzx" for 0x400153>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "add" for 0x400161>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "cmp" for 0x400181>, <DisassemblerInsn "jne" for 0x400187>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "je" for 0x40019e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "mov" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "movzx" for 0x400305>, <DisassemblerInsn "shl" for 0x400309>, <DisassemblerInsn "movzx" for 0x40030d>, <DisassemblerInsn "shl" for 0x400311>, <DisassemblerInsn "or" for 0x400314>, <DisassemblerInsn "movzx" for 0x400317>, <DisassemblerInsn "or" for 0x40031b>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "add" for 0x400325>, <DisassemblerInsn "add" for 0x400329>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "cmp" for 0x40032f>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033a>, <DisassemblerInsn "mov" for 0x40033d>, <DisassemblerInsn "mov" for 0x400345>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "jne" for 0x400354>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "je" for 0x400245>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b4>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "call" for 0x4001c0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "call" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "xor" for 0x4001f3>, <DisassemblerInsn "cmp" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "jl" for 0x40020e>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "test" for 0x400370>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x560]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~cx, word ptr [rsp + 0x4fe]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rsi, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<mov~~rdx, rcx>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rdx>', '<mov~~al, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jae~~0x40035a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x55c]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400120>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x500], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x50c], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x510], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x518], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x4001a0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~ecx, dword ptr [rsp + 0x50c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x400214>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4e0]>', '<mov~~rdx, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~r8, qword ptr [rsp + 0x4d8]>', '<movzx~~r9d, byte ptr [rcx]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rcx + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rax + rdx*4 + 0x248], edi>', '<add~~rcx, 3>', '<add~~rdx, 1>', '<mov~~al, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x4f0], rdx>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jne~~0x400290>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x530]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~dx, word ptr [rax + 0xe]>', '<mov~~word ptr [rsp + 0x4fe], dx>', '<mov~~al, 1>', '<cmp~~dx, 0>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<je~~0x40035a>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x560]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x520], rdx>', '<mov~~dword ptr [rsp + 0x528], ecx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jl~~0x40035a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~eax, dword ptr [rsp + 0x528]>', '<mov~~dl, byte ptr [rsp + 0x52f]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4c0], ecx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x400392>']}], 'cfg_edge_info': [(17, 21), (13, 17), (5, 8), (14, 18), (8, 13), (22, 13), (18, 22), (8, 9), (17, 12), (9, 14), (13, 12), (5, 9), (2, 5), (22, 12)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "add" for 0x401a2f>, <DisassemblerInsn "pop" for 0x401a36>, <DisassemblerInsn "ret" for 0x401a37>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "call" for 0x4003c5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003ea>, <DisassemblerInsn "add" for 0x4003ee>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "call" for 0x4003fa>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000b6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cd>, <DisassemblerInsn "jl" for 0x4003d4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "test" for 0x400370>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x5a0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x570]>', '<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~rax, qword ptr [rsp + 0x588]>', '<mov~~ecx, dword ptr [rsp + 0x4c0]>', '<mov~~dword ptr [rsp + 0x4b4], ecx>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rax, qword ptr [rsp + 0x540]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400392>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x401a28>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~eax, dword ptr [rsp + 0x528]>', '<mov~~dl, byte ptr [rsp + 0x52f]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4c0], ecx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x400392>']}], 'cfg_edge_info': [(6, 11), (12, 3), (6, 10), (3, 6), (1, 3)]}]}
{'tgv_decode_frame': [4195218, 4195274]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O1/eatgv.o---after
The extraction of function: tgv_decode_frame
[4195218, 4195274]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 128 nodes and 212 edges in CFGEmulated.
It has 128 nodes and 218 edges in CDG.
It has 5830 nodes and 7359 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195218, 4195274]
{4200960, 4197633, 4196994, 4199043, 4196869, 4198919, 4197255, 4195338, 4197260, 4195213, 4200972, 4195343, 4197518, 4194960, 4195218, 4197395, 4195475, 4197523, 4194836, 4195607, 4197021, 4194592, 4194720, 4201000, 4197674, 4197162, 4197290, 4200879, 4194352, 4194740, 4194486, 4194491, 4197317, 4194757, 4195401, 4195274, 4200906, 4197708, 4194891, 4197848, 4200920, 4195290, 4195162, 4194523, 4197336, 4197598, 4195037, 4195430, 4198247, 4197225, 4197481, 4194793, 4200942, 4197743, 4194550, 4195327}
[54, 100, 42, 84, 21, 0, 5, 31, 91, 78, 10, 51, 81, 46, 65, 16, 27, 11, 55, 40, 83, 36, 14, 47, 58, 8, 15, 18, 9, 94, 59, 72, 39, 41, 32, 24, 90, 43, 75, 12, 50, 60, 45, 66, 80, 33, 23, 89, 85, 98, 97, 53, 49, 37, 34, 17, 67, 26, 20, 4, 99, 29, 77, 30, 1, 105, 2, 3, 57, 92, 25]
The execution time of patched slicing information extraction via angr: 0:00:22.996246
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cbc>, <DisassemblerInsn "mov" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400ccb>, <DisassemblerInsn "shl" for 0x400cd2>, <DisassemblerInsn "mov" for 0x400cd5>, <DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "call" for 0x400cd9>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011cb>, <DisassemblerInsn "mov" for 0x4011d2>, <DisassemblerInsn "mov" for 0x4011da>, <DisassemblerInsn "add" for 0x4011e2>, <DisassemblerInsn "cmp" for 0x4011e6>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "mov" for 0x4011f1>, <DisassemblerInsn "mov" for 0x4011f3>, <DisassemblerInsn "mov" for 0x4011fa>, <DisassemblerInsn "jne" for 0x401201>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40055a>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "mov" for 0x400f6f>, <DisassemblerInsn "mov" for 0x400f77>, <DisassemblerInsn "sub" for 0x400f7f>, <DisassemblerInsn "mov" for 0x400f82>, <DisassemblerInsn "shl" for 0x400f84>, <DisassemblerInsn "xor" for 0x400f87>, <DisassemblerInsn "cmp" for 0x400f89>, <DisassemblerInsn "cmovb" for 0x400f8f>, <DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "xor" for 0x400f9b>, <DisassemblerInsn "cmp" for 0x400f9d>, <DisassemblerInsn "cmovb" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa6>, <DisassemblerInsn "add" for 0x400fad>, <DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "xor" for 0x400fb7>, <DisassemblerInsn "cmp" for 0x400fb9>, <DisassemblerInsn "mov" for 0x400fbd>, <DisassemblerInsn "je" for 0x400fc4>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "mov" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "movzx" for 0x400305>, <DisassemblerInsn "shl" for 0x400309>, <DisassemblerInsn "movzx" for 0x40030d>, <DisassemblerInsn "shl" for 0x400311>, <DisassemblerInsn "or" for 0x400314>, <DisassemblerInsn "movzx" for 0x400317>, <DisassemblerInsn "or" for 0x40031b>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "add" for 0x400325>, <DisassemblerInsn "add" for 0x400329>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "cmp" for 0x40032f>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033a>, <DisassemblerInsn "mov" for 0x40033d>, <DisassemblerInsn "mov" for 0x400345>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "jne" for 0x400354>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "sub" for 0x400031>, <DisassemblerInsn "mov" for 0x400038>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400048>, <DisassemblerInsn "mov" for 0x400050>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "movsxd" for 0x400072>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007b>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "sete" for 0x40009f>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "test" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ac>, <DisassemblerInsn "jne" for 0x4000b4>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "add" for 0x40013e>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "movzx" for 0x400153>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "add" for 0x400161>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "cmp" for 0x400181>, <DisassemblerInsn "jne" for 0x400187>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "mov" for 0x4004a3>, <DisassemblerInsn "mov" for 0x4004ab>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "mov" for 0x4004b6>, <DisassemblerInsn "mov" for 0x4004be>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "imul" for 0x4004cd>, <DisassemblerInsn "movsxd" for 0x4004d0>, <DisassemblerInsn "add" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004d6>, <DisassemblerInsn "mov" for 0x4004de>, <DisassemblerInsn "and" for 0x4004e1>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004ea>, <DisassemblerInsn "cmp" for 0x4004ef>, <DisassemblerInsn "cmove" for 0x4004f3>, <DisassemblerInsn "add" for 0x4004f7>, <DisassemblerInsn "mov" for 0x4004fa>, <DisassemblerInsn "add" for 0x400502>, <DisassemblerInsn "mov" for 0x400506>, <DisassemblerInsn "cmp" for 0x40050e>, <DisassemblerInsn "ja" for 0x400511>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e52>, <DisassemblerInsn "mov" for 0x400e5a>, <DisassemblerInsn "mov" for 0x400e61>, <DisassemblerInsn "mov" for 0x400e69>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "shr" for 0x400e74>, <DisassemblerInsn "mov" for 0x400e78>, <DisassemblerInsn "mov" for 0x400e80>, <DisassemblerInsn "mov" for 0x400e83>, <DisassemblerInsn "mov" for 0x400e87>, <DisassemblerInsn "and" for 0x400e8a>, <DisassemblerInsn "mov" for 0x400e8d>, <DisassemblerInsn "shr" for 0x400e94>, <DisassemblerInsn "mov" for 0x400e97>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "shl" for 0x400ea7>, <DisassemblerInsn "mov" for 0x400eab>, <DisassemblerInsn "sar" for 0x400eb3>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "add" for 0x400ebf>, <DisassemblerInsn "mov" for 0x400ec3>, <DisassemblerInsn "cmp" for 0x400ecb>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "cmova" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed5>, <DisassemblerInsn "mov" for 0x400edd>, <DisassemblerInsn "mov" for 0x400ee1>, <DisassemblerInsn "shr" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef0>, <DisassemblerInsn "mov" for 0x400ef3>, <DisassemblerInsn "and" for 0x400ef6>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "shr" for 0x400f00>, <DisassemblerInsn "mov" for 0x400f02>, <DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "shl" for 0x400f11>, <DisassemblerInsn "mov" for 0x400f14>, <DisassemblerInsn "sar" for 0x400f1b>, <DisassemblerInsn "mov" for 0x400f1e>, <DisassemblerInsn "add" for 0x400f25>, <DisassemblerInsn "mov" for 0x400f29>, <DisassemblerInsn "cmp" for 0x400f31>, <DisassemblerInsn "cmova" for 0x400f34>, <DisassemblerInsn "mov" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "add" for 0x400f43>, <DisassemblerInsn "mov" for 0x400f47>, <DisassemblerInsn "cmp" for 0x400f4f>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "jne" for 0x400f61>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ee>, <DisassemblerInsn "mov" for 0x4019f3>, <DisassemblerInsn "call" for 0x4019fb>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cd>, <DisassemblerInsn "jl" for 0x4003d4>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "mov" for 0x40073a>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "shl" for 0x400744>, <DisassemblerInsn "and" for 0x400747>, <DisassemblerInsn "movzx" for 0x40074c>, <DisassemblerInsn "or" for 0x400750>, <DisassemblerInsn "add" for 0x400753>, <DisassemblerInsn "shr" for 0x400755>, <DisassemblerInsn "and" for 0x400758>, <DisassemblerInsn "add" for 0x40075b>, <DisassemblerInsn "mov" for 0x40075e>, <DisassemblerInsn "mov" for 0x400763>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "mov" for 0x400772>, <DisassemblerInsn "mov" for 0x400779>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007ae>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "add" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "sub" for 0x4007d9>, <DisassemblerInsn "cmp" for 0x4007dc>, <DisassemblerInsn "jl" for 0x4007df>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "mov" for 0x400913>, <DisassemblerInsn "sub" for 0x40091b>, <DisassemblerInsn "movsxd" for 0x40091e>, <DisassemblerInsn "cmp" for 0x400921>, <DisassemblerInsn "jl" for 0x400924>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "add" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "cmp" for 0x400cb4>, <DisassemblerInsn "jge" for 0x400cba>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d31>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "shl" for 0x400d40>, <DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "mov" for 0x400d45>, <DisassemblerInsn "call" for 0x400d47>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "test" for 0x400370>, <DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "mov" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "mov" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "add" for 0x400430>, <DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "cmp" for 0x40043f>, <DisassemblerInsn "jne" for 0x400447>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "xor" for 0x400103>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "jmp" for 0x40011b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d01>, <DisassemblerInsn "mov" for 0x400d09>, <DisassemblerInsn "mov" for 0x400d10>, <DisassemblerInsn "add" for 0x400d13>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "cmp" for 0x400d22>, <DisassemblerInsn "jge" for 0x400d28>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019af>, <DisassemblerInsn "mov" for 0x4019b7>, <DisassemblerInsn "lea" for 0x4019bc>, <DisassemblerInsn "mov" for 0x4019c3>, <DisassemblerInsn "call" for 0x4019c5>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d54>, <DisassemblerInsn "mov" for 0x400d5b>, <DisassemblerInsn "mov" for 0x400d5e>, <DisassemblerInsn "mov" for 0x400d66>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "imul" for 0x400d94>, <DisassemblerInsn "add" for 0x400d97>, <DisassemblerInsn "and" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "shr" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "add" for 0x400dac>, <DisassemblerInsn "mov" for 0x400daf>, <DisassemblerInsn "shl" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "add" for 0x400dbc>, <DisassemblerInsn "mov" for 0x400dbf>, <DisassemblerInsn "shl" for 0x400dc7>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "add" for 0x400dcc>, <DisassemblerInsn "cmp" for 0x400dcf>, <DisassemblerInsn "ja" for 0x400dd2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400517>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "movzx" for 0x40052f>, <DisassemblerInsn "shl" for 0x400532>, <DisassemblerInsn "movzx" for 0x400535>, <DisassemblerInsn "shl" for 0x400539>, <DisassemblerInsn "or" for 0x40053c>, <DisassemblerInsn "movzx" for 0x40053e>, <DisassemblerInsn "or" for 0x400542>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "setne" for 0x40054b>, <DisassemblerInsn "sub" for 0x40054e>, <DisassemblerInsn "setb" for 0x400551>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "test" for 0x400556>, <DisassemblerInsn "jne" for 0x400558>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "add" for 0x401a2f>, <DisassemblerInsn "pop" for 0x401a36>, <DisassemblerInsn "ret" for 0x401a37>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "mov" for 0x400c7b>, <DisassemblerInsn "lea" for 0x400c80>, <DisassemblerInsn "mov" for 0x400c87>, <DisassemblerInsn "call" for 0x400c89>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b87>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "je" for 0x40019e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003ea>, <DisassemblerInsn "add" for 0x4003ee>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "call" for 0x4003fa>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b4>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "call" for 0x4001c0>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "add" for 0x4001a8>, <DisassemblerInsn "call" for 0x4001af>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "cmp" for 0x40128a>, <DisassemblerInsn "jle" for 0x40128d>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019d8>, <DisassemblerInsn "add" for 0x4019e0>, <DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "call" for 0x4019e9>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007ae>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "add" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "sub" for 0x4007d9>, <DisassemblerInsn "cmp" for 0x4007dc>, <DisassemblerInsn "jl" for 0x4007df>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c13>, <DisassemblerInsn "mov" for 0x400c1b>, <DisassemblerInsn "mov" for 0x400c1e>, <DisassemblerInsn "movzx" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c29>, <DisassemblerInsn "movzx" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c3f>, <DisassemblerInsn "movzx" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "movzx" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "add" for 0x400c5f>, <DisassemblerInsn "cmp" for 0x400c63>, <DisassemblerInsn "jb" for 0x400c67>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "mov" for 0x400469>, <DisassemblerInsn "mov" for 0x400471>, <DisassemblerInsn "mov" for 0x400474>, <DisassemblerInsn "xor" for 0x400479>, <DisassemblerInsn "cmp" for 0x40047b>, <DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "mov" for 0x400486>, <DisassemblerInsn "je" for 0x40048d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "xor" for 0x4001f3>, <DisassemblerInsn "cmp" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "jl" for 0x40020e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "add" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "cmp" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "mov" for 0x4002d4>, <DisassemblerInsn "jae" for 0x4002db>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "mov" for 0x400fd2>, <DisassemblerInsn "lea" for 0x400fda>, <DisassemblerInsn "add" for 0x400fe2>, <DisassemblerInsn "mov" for 0x400fe9>, <DisassemblerInsn "movzx" for 0x400ff1>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "xor" for 0x400ffc>, <DisassemblerInsn "mov" for 0x400ffe>, <DisassemblerInsn "xor" for 0x401000>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x40100a>, <DisassemblerInsn "mov" for 0x401011>, <DisassemblerInsn "mov" for 0x401019>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "xor" for 0x401028>, <DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "mov" for 0x401039>, <DisassemblerInsn "mov" for 0x401040>, <DisassemblerInsn "mov" for 0x401048>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "shr" for 0x401059>, <DisassemblerInsn "mov" for 0x40105c>, <DisassemblerInsn "mov" for 0x401063>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x401068>, <DisassemblerInsn "and" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "shr" for 0x401074>, <DisassemblerInsn "mov" for 0x401076>, <DisassemblerInsn "mov" for 0x40107d>, <DisassemblerInsn "and" for 0x40107f>, <DisassemblerInsn "mov" for 0x401085>, <DisassemblerInsn "add" for 0x40108c>, <DisassemblerInsn "mov" for 0x40108f>, <DisassemblerInsn "cmp" for 0x401096>, <DisassemblerInsn "cmova" for 0x401098>, <DisassemblerInsn "mov" for 0x40109b>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "add" for 0x4010a9>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "xor" for 0x4010b5>, <DisassemblerInsn "cmp" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bb>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010c5>, <DisassemblerInsn "mov" for 0x4010cc>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "jne" for 0x4010db>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400567>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "mov" for 0x400576>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005ab>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cb>, <DisassemblerInsn "movzx" for 0x4005d2>, <DisassemblerInsn "mov" for 0x4005d5>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "and" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e1>, <DisassemblerInsn "and" for 0x4005e8>, <DisassemblerInsn "cmp" for 0x4005ed>, <DisassemblerInsn "je" for 0x4005f0>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cde>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "mov" for 0x400cf8>, <DisassemblerInsn "mov" for 0x400cff>, <DisassemblerInsn "mov" for 0x400d01>, <DisassemblerInsn "mov" for 0x400d09>, <DisassemblerInsn "mov" for 0x400d10>, <DisassemblerInsn "add" for 0x400d13>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "cmp" for 0x400d22>, <DisassemblerInsn "jge" for 0x400d28>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "je" for 0x400245>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a05>, <DisassemblerInsn "mov" for 0x400a0c>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "add" for 0x400a17>, <DisassemblerInsn "mov" for 0x400a1d>, <DisassemblerInsn "mov" for 0x400a25>, <DisassemblerInsn "cmp" for 0x400a27>, <DisassemblerInsn "mov" for 0x400a2e>, <DisassemblerInsn "mov" for 0x400a35>, <DisassemblerInsn "jle" for 0x400a3c>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a42>, <DisassemblerInsn "mov" for 0x400a4a>, <DisassemblerInsn "mov" for 0x400a52>, <DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "add" for 0x400a5d>, <DisassemblerInsn "mov" for 0x400a61>, <DisassemblerInsn "add" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a6f>, <DisassemblerInsn "xor" for 0x400a77>, <DisassemblerInsn "mov" for 0x400a79>, <DisassemblerInsn "jmp" for 0x400a80>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "jmp" for 0x400bd3>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "imul" for 0x400d94>, <DisassemblerInsn "add" for 0x400d97>, <DisassemblerInsn "and" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "shr" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "add" for 0x400dac>, <DisassemblerInsn "mov" for 0x400daf>, <DisassemblerInsn "shl" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "add" for 0x400dbc>, <DisassemblerInsn "mov" for 0x400dbf>, <DisassemblerInsn "shl" for 0x400dc7>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "add" for 0x400dcc>, <DisassemblerInsn "cmp" for 0x400dcf>, <DisassemblerInsn "ja" for 0x400dd2>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "test" for 0x4009ca>, <DisassemblerInsn "setg" for 0x4009cc>, <DisassemblerInsn "mov" for 0x4009d0>, <DisassemblerInsn "sub" for 0x4009d3>, <DisassemblerInsn "setb" for 0x4009d6>, <DisassemblerInsn "and" for 0x4009da>, <DisassemblerInsn "test" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e1>, <DisassemblerInsn "mov" for 0x4009e8>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "mov" for 0x4009f7>, <DisassemblerInsn "jne" for 0x4009ff>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400baa>, <DisassemblerInsn "mov" for 0x400bb2>, <DisassemblerInsn "lea" for 0x400bb7>, <DisassemblerInsn "mov" for 0x400bbe>, <DisassemblerInsn "call" for 0x400bc0>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "test" for 0x400406>, <DisassemblerInsn "jne" for 0x400408>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401207>, <DisassemblerInsn "mov" for 0x40120f>, <DisassemblerInsn "mov" for 0x401216>, <DisassemblerInsn "mov" for 0x40121d>, <DisassemblerInsn "sub" for 0x401224>, <DisassemblerInsn "mov" for 0x401226>, <DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "mov" for 0x401230>, <DisassemblerInsn "mov" for 0x401238>, <DisassemblerInsn "mov" for 0x40123e>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "cdq" for 0x40124a>, <DisassemblerInsn "idiv" for 0x40124b>, <DisassemblerInsn "mov" for 0x40124d>, <DisassemblerInsn "mov" for 0x401254>, <DisassemblerInsn "mov" for 0x401256>, <DisassemblerInsn "imul" for 0x40125e>, <DisassemblerInsn "mov" for 0x401261>, <DisassemblerInsn "mov" for 0x401267>, <DisassemblerInsn "cdq" for 0x40126c>, <DisassemblerInsn "idiv" for 0x40126d>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "mov" for 0x401271>, <DisassemblerInsn "imul" for 0x401278>, <DisassemblerInsn "cmp" for 0x40127b>, <DisassemblerInsn "jl" for 0x40127d>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dfb>, <DisassemblerInsn "mov" for 0x400e03>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "movzx" for 0x400e1a>, <DisassemblerInsn "mov" for 0x400e1d>, <DisassemblerInsn "xor" for 0x400e25>, <DisassemblerInsn "mov" for 0x400e27>, <DisassemblerInsn "xor" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e2b>, <DisassemblerInsn "mov" for 0x400e33>, <DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e52>, <DisassemblerInsn "mov" for 0x400e5a>, <DisassemblerInsn "mov" for 0x400e61>, <DisassemblerInsn "mov" for 0x400e69>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "shr" for 0x400e74>, <DisassemblerInsn "mov" for 0x400e78>, <DisassemblerInsn "mov" for 0x400e80>, <DisassemblerInsn "mov" for 0x400e83>, <DisassemblerInsn "mov" for 0x400e87>, <DisassemblerInsn "and" for 0x400e8a>, <DisassemblerInsn "mov" for 0x400e8d>, <DisassemblerInsn "shr" for 0x400e94>, <DisassemblerInsn "mov" for 0x400e97>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "shl" for 0x400ea7>, <DisassemblerInsn "mov" for 0x400eab>, <DisassemblerInsn "sar" for 0x400eb3>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "add" for 0x400ebf>, <DisassemblerInsn "mov" for 0x400ec3>, <DisassemblerInsn "cmp" for 0x400ecb>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "cmova" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed5>, <DisassemblerInsn "mov" for 0x400edd>, <DisassemblerInsn "mov" for 0x400ee1>, <DisassemblerInsn "shr" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef0>, <DisassemblerInsn "mov" for 0x400ef3>, <DisassemblerInsn "and" for 0x400ef6>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "shr" for 0x400f00>, <DisassemblerInsn "mov" for 0x400f02>, <DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "shl" for 0x400f11>, <DisassemblerInsn "mov" for 0x400f14>, <DisassemblerInsn "sar" for 0x400f1b>, <DisassemblerInsn "mov" for 0x400f1e>, <DisassemblerInsn "add" for 0x400f25>, <DisassemblerInsn "mov" for 0x400f29>, <DisassemblerInsn "cmp" for 0x400f31>, <DisassemblerInsn "cmova" for 0x400f34>, <DisassemblerInsn "mov" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "add" for 0x400f43>, <DisassemblerInsn "mov" for 0x400f47>, <DisassemblerInsn "cmp" for 0x400f4f>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "jne" for 0x400f61>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400983>, <DisassemblerInsn "shl" for 0x40098a>, <DisassemblerInsn "sar" for 0x40098e>, <DisassemblerInsn "add" for 0x400992>, <DisassemblerInsn "mov" for 0x400995>, <DisassemblerInsn "mov" for 0x40099d>, <DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "test" for 0x4009ca>, <DisassemblerInsn "setg" for 0x4009cc>, <DisassemblerInsn "mov" for 0x4009d0>, <DisassemblerInsn "sub" for 0x4009d3>, <DisassemblerInsn "setb" for 0x4009d6>, <DisassemblerInsn "and" for 0x4009da>, <DisassemblerInsn "test" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e1>, <DisassemblerInsn "mov" for 0x4009e8>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "mov" for 0x4009f7>, <DisassemblerInsn "jne" for 0x4009ff>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a0c>, <DisassemblerInsn "mov" for 0x401a13>, <DisassemblerInsn "mov" for 0x401a1b>, <DisassemblerInsn "mov" for 0x401a21>, <DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "add" for 0x401a2f>, <DisassemblerInsn "pop" for 0x401a36>, <DisassemblerInsn "ret" for 0x401a37>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "xor" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa4>, <DisassemblerInsn "mov" for 0x400aab>, <DisassemblerInsn "jmp" for 0x400ab2>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b69>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "test" for 0x400b77>, <DisassemblerInsn "mov" for 0x400b7a>, <DisassemblerInsn "jne" for 0x400b81>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a82>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "lea" for 0x400a8f>, <DisassemblerInsn "mov" for 0x400a96>, <DisassemblerInsn "call" for 0x400a98>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400be0>, <DisassemblerInsn "mov" for 0x400be8>, <DisassemblerInsn "mov" for 0x400bf0>, <DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "add" for 0x400bfe>, <DisassemblerInsn "mov" for 0x400c02>, <DisassemblerInsn "cmp" for 0x400c0a>, <DisassemblerInsn "ja" for 0x400c0d>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "movzx" for 0x40025b>, <DisassemblerInsn "add" for 0x40025e>, <DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "sub" for 0x400263>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "cmovb" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "xor" for 0x40027e>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400288>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "add" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "cmp" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "mov" for 0x4002d4>, <DisassemblerInsn "jae" for 0x4002db>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c8e>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40040a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "lea" for 0x4000e8>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "call" for 0x4000f1>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129a>, <DisassemblerInsn "mov" for 0x4012a2>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "sub" for 0x4012ae>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "shr" for 0x4012b5>, <DisassemblerInsn "mov" for 0x4012b7>, <DisassemblerInsn "mov" for 0x4012bf>, <DisassemblerInsn "mov" for 0x4012c6>, <DisassemblerInsn "add" for 0x4012c9>, <DisassemblerInsn "mov" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "add" for 0x4012db>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "add" for 0x4012ea>, <DisassemblerInsn "mov" for 0x4012ee>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012f9>, <DisassemblerInsn "add" for 0x401301>, <DisassemblerInsn "mov" for 0x401305>, <DisassemblerInsn "xor" for 0x40130d>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401317>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "mov" for 0x401344>, <DisassemblerInsn "mov" for 0x40134b>, <DisassemblerInsn "mov" for 0x401353>, <DisassemblerInsn "mov" for 0x40135a>, <DisassemblerInsn "mov" for 0x401362>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "cmp" for 0x40137a>, <DisassemblerInsn "mov" for 0x40137d>, <DisassemblerInsn "mov" for 0x401384>, <DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "jle" for 0x401393>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8c>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "add" for 0x400b97>, <DisassemblerInsn "mov" for 0x400b9b>, <DisassemblerInsn "cmp" for 0x400ba3>, <DisassemblerInsn "jne" for 0x400ba8>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "or" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400df1>, <DisassemblerInsn "je" for 0x400df5>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400449>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "imul" for 0x400457>, <DisassemblerInsn "movsxd" for 0x40045e>, <DisassemblerInsn "call" for 0x400461>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000b6>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4019ad>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "cmp" for 0x4000d6>, <DisassemblerInsn "jge" for 0x4000d9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "call" for 0x4003c5>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ca>, <DisassemblerInsn "mov" for 0x4019cf>, <DisassemblerInsn "jmp" for 0x4019d6>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a03>, <DisassemblerInsn "jl" for 0x401a0a>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "call" for 0x4001e4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x344]>', '<mov~~rcx, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rdx, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x260]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x294], ecx>', '<mov~~dword ptr [rsp + 0x2a8], eax>', '<jne~~0x401011>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x400a05>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x34e]>', '<mov~~rsi, qword ptr [rsp + 0x328]>', '<mov~~rax, qword ptr [rsp + 0x568]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x2a0], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x2a8], eax>', '<je~~0x401207>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4e0]>', '<mov~~rdx, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~r8, qword ptr [rsp + 0x4d8]>', '<movzx~~r9d, byte ptr [rcx]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rcx + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rax + rdx*4 + 0x248], edi>', '<add~~rcx, 3>', '<add~~rdx, 1>', '<mov~~al, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x4f0], rdx>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jne~~0x400290>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x5a0>', '<mov~~qword ptr [rsp + 0x538], rdi>', '<mov~~qword ptr [rsp + 0x540], rsi>', '<mov~~qword ptr [rsp + 0x548], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x550], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x55c], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x560], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<mov~~qword ptr [rsp + 0x570], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x578], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x587], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x588], rax>', '<jne~~0x4000bb>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0x578]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x500], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x50c], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x510], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x518], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x4001a0>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rdx, qword ptr [rsp + 0x4a8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x480], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x488], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x490], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<ja~~0x400a82>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x314]>', '<mov~~rdi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rsi, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x2ac], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2b4], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2b8], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2bc], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x2c0], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x2c4], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x2c8], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2cc], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2e8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<jne~~0x400e3a>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x570]>', '<call~~0x500048>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x401a28>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x460]>', '<mov~~ecx, dword ptr [rsp + 0x45c]>', '<mov~~rsi, qword ptr [rsp + 0x448]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x428], rsi>', '<mov~~dword ptr [rsp + 0x430], edx>', '<mov~~dword ptr [rsp + 0x434], ecx>', '<mov~~dword ptr [rsp + 0x438], eax>', '<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x428]>', '<mov~~ecx, dword ptr [rsp + 0x430]>', '<mov~~edi, dword ptr [rsp + 0x434]>', '<mov~~r8d, dword ptr [rsp + 0x438]>', '<mov~~dword ptr [rsp + 0x40c], r8d>', '<mov~~dword ptr [rsp + 0x410], edi>', '<mov~~dword ptr [rsp + 0x414], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x420], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400a05>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~rdx, qword ptr [rsp + 0x480]>', '<mov~~rax, qword ptr [rsp + 0x3d0]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x400a05>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x344]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x338], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400d01>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x350]>', '<mov~~rcx, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~eax, dword ptr [rsp + 0x528]>', '<mov~~dl, byte ptr [rsp + 0x52f]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4c0], ecx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x400392>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400493>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~ecx, 0xc1444e49>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x520], rdx>', '<mov~~dword ptr [rsp + 0x528], ecx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jmp~~0x40035a>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400d6f>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x13b]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x348]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x344]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x31c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x320], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x328], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4019af>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x568]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~rsi, qword ptr [rsp + 0x490]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x40055f>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x5a0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xe8e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 58, 'blockInsts': ['<jmp~~0x401a28>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~ecx, dword ptr [rsp + 0x50c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x400214>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rax, qword ptr [rsp + 0x540]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x560]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x560]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d4]>', '<cmp~~eax, 3>', '<jle~~0x4019d8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x560]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 8], rdi>', '<call~~0x500010>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x428]>', '<mov~~ecx, dword ptr [rsp + 0x430]>', '<mov~~edi, dword ptr [rsp + 0x434]>', '<mov~~r8d, dword ptr [rsp + 0x438]>', '<mov~~dword ptr [rsp + 0x40c], r8d>', '<mov~~dword ptr [rsp + 0x410], edi>', '<mov~~dword ptr [rsp + 0x414], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x420], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400a05>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x342], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x344], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x348], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x34e], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x354], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400c93>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rax], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x4a0], ecx>', '<mov~~byte ptr [rsp + 0x4a7], al>', '<je~~0x400b69>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x520], rdx>', '<mov~~dword ptr [rsp + 0x528], ecx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jl~~0x40035a>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<mov~~rdx, rcx>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rdx>', '<mov~~al, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jae~~0x40035a>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x34e]>', '<mov~~rcx, qword ptr [rsp + 0x560]>', '<lea~~rdx, [rsp + 0x590]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x278], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x280], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<mov~~rcx, qword ptr [rsp + 0x288]>', '<mov~~eax, dword ptr [rsp + 0x294]>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x268], rcx>', '<mov~~dword ptr [rsp + 0x274], eax>', '<mov~~esi, dword ptr [rsp + 0x274]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~eax, dword ptr [rsp + 0x2a4]>', '<mov~~rcx, qword ptr [rsp + 0x298]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x230], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x234], ecx>', '<shr~~edi, cl>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~ecx, edi>', '<and~~ecx, 0xff>', '<mov~~dword ptr [rsp + 0x23c], ecx>', '<add~~esi, 8>', '<mov~~dword ptr [rsp + 0x240], esi>', '<cmp~~eax, esi>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x244], eax>', '<mov~~dword ptr [rsp + rdx*4 + 0x590], ecx>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x248], rdx>', '<xor~~ecx, ecx>', '<cmp~~rdx, 4>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x274], edx>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<jne~~0x401039>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~edx, dword ptr [rsp + 0x47c]>', '<mov~~dword ptr [rsp + 0x464], edx>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<mov~~qword ptr [rsp + 0x470], rax>', '<mov~~ecx, dword ptr [rsp + 0x43c]>', '<mov~~edx, dword ptr [rsp + 0x464]>', '<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~rsi, qword ptr [rsp + 0x470]>', '<mov~~qword ptr [rsp + 0x440], rsi>', '<mov~~qword ptr [rsp + 0x448], rax>', '<mov~~dword ptr [rsp + 0x450], edx>', '<mov~~dword ptr [rsp + 0x454], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x45b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x45c], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x460], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x40072c>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x344]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400d6f>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x530]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~dx, word ptr [rax + 0xe]>', '<mov~~word ptr [rsp + 0x4fe], dx>', '<mov~~al, 1>', '<cmp~~dx, 0>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<je~~0x40035a>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x4b4]>', '<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~rax, rdx>', '<add~~rax, 0x244>', '<mov~~qword ptr [rsp + 0x3b0], rax>', '<mov~~al, 1>', '<cmp~~dword ptr [rdx + 0x244], 0>', '<mov~~dword ptr [rsp + 0x4a0], ecx>', '<mov~~byte ptr [rsp + 0x4a7], al>', '<jle~~0x400b69>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x390], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<add~~rax, 0x240>', '<mov~~qword ptr [rsp + 0x3a0], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<jmp~~0x400ab7>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x55c]>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jmp~~0x401a28>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~edx, dword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x348]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x344]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x31c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x320], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x328], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4019af>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~esi, dword ptr [rsp + 0x40c]>', '<mov~~r9, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x3d8]>', '<mov~~edx, dword ptr [rsp + 0x3e4]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x43c], esi>', '<mov~~dword ptr [rsp + 0x464], edx>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<mov~~qword ptr [rsp + 0x470], rax>', '<jne~~0x40058d>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf11]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x587]>', '<test~~al, 1>', '<jne~~0x40040f>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~ecx, dword ptr [rsp + 0x2a0]>', '<mov~~edx, dword ptr [rsp + 0x2a8]>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x1e4], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x354]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x4019af>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x342]>', '<mov~~rcx, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x300], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<mov~~r10d, dword ptr [rsp + 0x314]>', '<mov~~rdi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rsi, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x2ac], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2b4], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2b8], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2bc], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x2c0], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x2c4], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x2c8], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2cc], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2e8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<jne~~0x400e3a>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3b8]>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~eax, dword ptr [rsp + 0x3c0]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d8], rcx>', '<mov~~dword ptr [rsp + 0x3e4], eax>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~esi, dword ptr [rsp + 0x40c]>', '<mov~~r9, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x3d8]>', '<mov~~edx, dword ptr [rsp + 0x3e4]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x43c], esi>', '<mov~~dword ptr [rsp + 0x464], edx>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<mov~~qword ptr [rsp + 0x470], rax>', '<jne~~0x40058d>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x55c]>', '<mov~~rcx, qword ptr [rsp + 0x548]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x5a0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~ecx, 0xc1444e49>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x4a0], ecx>', '<mov~~byte ptr [rsp + 0x4a7], al>', '<jmp~~0x400b69>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4a0]>', '<mov~~cl, byte ptr [rsp + 0x4a7]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x4019d8>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x1022]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x358], rax>', '<cmp~~rax, rcx>', '<ja~~0x4019af>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~cx, word ptr [rsp + 0x4fe]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rsi, qword ptr [rsp + 0x568]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<mov~~rdx, rcx>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rdx>', '<mov~~al, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~byte ptr [rsp + 0x52f], al>', '<jae~~0x40035a>']}, {'block_Idx': 67, 'blockInsts': ['<jmp~~0x4019af>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400b8c>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x401a28>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x19b7]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~esi, dword ptr [rsp + 0x354]>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 0xffffffff>', '<shr~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x650>', '<mov~~qword ptr [rsp + 0x198], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x648>', '<mov~~qword ptr [rsp + 0x1a0], rsi>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0x1a8], rdx>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x15c], edx>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~qword ptr [rsp + 0x178], rsi>', '<mov~~esi, dword ptr [rsi + 0x94]>', '<mov~~dword ptr [rsp + 0x180], esi>', '<cmp~~esi, 3>', '<mov~~dword ptr [rsp + 0x184], edx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x190], eax>', '<jle~~0x401936>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400bd8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x342]>', '<mov~~ecx, dword ptr [rsp + 0x31c]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x318], ecx>', '<cmp~~ax, 0>', '<je~~0x400f67>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x560]>', '<mov~~eax, dword ptr [rcx + 0x240]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400392>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x4019d8>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x55c]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x530], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400120>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x570]>', '<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~rax, qword ptr [rsp + 0x588]>', '<mov~~ecx, dword ptr [rsp + 0x4c0]>', '<mov~~dword ptr [rsp + 0x4b4], ecx>', '<mov~~qword ptr [rsp + 0x4b8], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jmp~~0x401a28>']}, {'block_Idx': 92, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x401a28>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}], 'cfg_edge_info': [(16, 20), (21, 16), (55, 66), (25, 32), (41, 49), (33, 45), (8, 9), (17, 21), (32, 12), (92, 97), (15, 23), (42, 50), (29, 34), (23, 27), (75, 65), (2, 4), (11, 16), (72, 50), (85, 84), (30, 41), (45, 14), (17, 16), (77, 85), (39, 46), (91, 84), (32, 16), (24, 21), (50, 49), (51, 50), (3, 10), (0, 2), (46, 54), (100, 89), (49, 59), (1, 3), (89, 40), (67, 40), (10, 15), (27, 31), (36, 43), (55, 65), (5, 9), (92, 14), (4, 11), (31, 37), (81, 50), (66, 77), (16, 3), (34, 39), (24, 16), (37, 53), (94, 59), (12, 17), (29, 33), (98, 50), (58, 14), (23, 26), (83, 77), (65, 83), (20, 14), (84, 90), (77, 84), (75, 66), (78, 92), (26, 29), (18, 25), (50, 60), (21, 24), (89, 94), (10, 14), (27, 30), (53, 49), (36, 42), (54, 75), (66, 40), (9, 18), (83, 40), (80, 50), (12, 16), (8, 12), (2, 5), (34, 40), (57, 14), (84, 89), (47, 67), (59, 78), (0, 1), (39, 47), (49, 58), (94, 99), (105, 59), (5, 8), (46, 55), (31, 36), (40, 57), (41, 31)], 'cdg_edge_info': [(89, 59), (55, 57), (16, 20), (55, 66), (41, 49), (17, 21), (2, 11), (32, 12), (92, 97), (46, 75), (29, 34), (83, 14), (75, 65), (23, 27), (2, 4), (0, 16), (31, 49), (75, 83), (66, 89), (39, 46), (23, 29), (29, 45), (83, 89), (5, 32), (24, 21), (36, 50), (50, 49), (0, 2), (23, 31), (5, 25), (75, 14), (49, 59), (89, 40), (10, 15), (66, 84), (16, 10), (49, 14), (55, 65), (39, 14), (83, 57), (5, 9), (92, 14), (29, 40), (5, 18), (31, 37), (83, 84), (66, 77), (55, 40), (16, 3), (34, 39), (12, 17), (29, 33), (23, 26), (83, 77), (16, 14), (75, 57), (75, 66), (89, 92), (39, 57), (31, 53), (21, 24), (55, 83), (89, 94), (10, 14), (27, 30), (10, 23), (23, 14), (89, 14), (89, 78), (83, 40), (55, 14), (2, 5), (49, 92), (0, 1), (39, 47), (0, 10), (49, 58), (89, 57), (75, 40), (39, 40), (0, 3), (31, 36), (46, 55), (29, 57), (39, 67), (41, 31), (49, 78), (27, 41)], 'ddg_edge_info': [(21, 16), (41, 49), (25, 32), (27, 50), (15, 94), (33, 45), (15, 39), (15, 30), (34, 83), (0, 5), (17, 21), (3, 31), (0, 78), (37, 97), (0, 23), (92, 97), (46, 75), (15, 23), (3, 15), (77, 92), (11, 16), (0, 16), (3, 97), (75, 83), (24, 10), (27, 36), (30, 41), (15, 89), (0, 37), (30, 50), (39, 83), (0, 46), (16, 97), (30, 59), (39, 46), (15, 46), (0, 9), (12, 29), (37, 92), (32, 16), (24, 21), (50, 49), (0, 30), (33, 97), (65, 40), (3, 10), (0, 2), (5, 25), (5, 89), (27, 31), (15, 75), (30, 36), (0, 32), (10, 97), (0, 50), (12, 15), (4, 11), (0, 59), (15, 50), (83, 84), (15, 59), (78, 97), (16, 3), (24, 16), (15, 77), (0, 25), (25, 24), (0, 89), (0, 34), (37, 53), (25, 97), (39, 89), (12, 17), (15, 34), (40, 97), (83, 77), (50, 92), (0, 18), (25, 17), (30, 31), (65, 83), (0, 27), (0, 36), (30, 49), (0, 45), (15, 27), (57, 97), (12, 10), (15, 36), (23, 83), (23, 92), (78, 92), (4, 97), (0, 11), (0, 75), (47, 40), (2, 17), (0, 84), (30, 97), (0, 29), (65, 94), (39, 75), (39, 84), (15, 84), (0, 47), (15, 29), (18, 25), (21, 24), (15, 47), (89, 94), (0, 4), (25, 3), (27, 30), (53, 49), (25, 12), (3, 39), (25, 21), (0, 31), (39, 77), (37, 59), (0, 40), (15, 31), (4, 10), (49, 97), (15, 40), (15, 49), (9, 18), (0, 15), (2, 12), (5, 29), (0, 24), (30, 37), (65, 89), (3, 50), (0, 33), (5, 47), (0, 97), (21, 10), (4, 3), (15, 33), (12, 16), (15, 97), (17, 24), (3, 34), (0, 17), (25, 16), (49, 92), (84, 89), (59, 78), (5, 15), (0, 65), (39, 47), (45, 97), (39, 65), (65, 84), (0, 83), (15, 65), (15, 83), (23, 75), (15, 37), (4, 16), (65, 59), (0, 3), (31, 36), (0, 12), (65, 77), (23, 41), (40, 57), (0, 21), (94, 92), (37, 49), (41, 31), (27, 41)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 49, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 50, 'instruction': 'movq\t%rsi, 0x500(%rsp)                # 8-byte Spill'}, {'instIndex': 51, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 52, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x50c(%rsp)                # 4-byte Spill'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 55, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 56, 'instruction': 'movq\t%rsi, 0x510(%rsp)                # 8-byte Spill'}, {'instIndex': 57, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 58, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 59, 'instruction': 'movq\t%rax, 0x518(%rsp)                # 8-byte Spill'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 61, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 64, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 65, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 75, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 76, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 77, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 78, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 81, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 83, 'instruction': 'movq\t%rdx, 0x520(%rsp)                # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movl\t%ecx, 0x528(%rsp)                # 4-byte Spill'}, {'instIndex': 86, 'instruction': 'jl\t.LBB1_10'}, {'instIndex': 89, 'instruction': 'movw\t14(%rax), %dx'}, {'instIndex': 90, 'instruction': 'movw\t%dx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 98, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 162, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 163, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 164, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 165, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 166, 'instruction': 'jl\t.LBB1_81'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1266 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x474(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x480(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_74'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_74'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1266 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x474(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x480(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_74'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_74'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 120 nodes and 210 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1266 instructions in binary file.
[4194576, 4194681, 4194704, 4194724, 4194741, 4194777, 4194793, 4194839]
[4195092, 4195134]
The execution time of patched subCFG information extraction via angr: 0:00:00.665744
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400188>, <DisassemblerInsn "je" for 0x40018e>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013d>, <DisassemblerInsn "movzx" for 0x400143>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "cmp" for 0x400171>, <DisassemblerInsn "jne" for 0x400177>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jl" for 0x4001e3>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "add" for 0x401998>, <DisassemblerInsn "pop" for 0x40199f>, <DisassemblerInsn "pop" for 0x4019a0>, <DisassemblerInsn "pop" for 0x4019a2>, <DisassemblerInsn "pop" for 0x4019a4>, <DisassemblerInsn "pop" for 0x4019a6>, <DisassemblerInsn "pop" for 0x4019a8>, <DisassemblerInsn "ret" for 0x4019a9>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~qword ptr [rsp + 0x428], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~ecx, dword ptr [rsp + 0x474]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001e9>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x468], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x474], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x478], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400190>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, qword ptr [rsp + 0x468]>', '<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<je~~0x400314>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4bc]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jl~~0x401991>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x48c]>', '<add~~rsp, 0x508>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<add~~rdi, 8>', '<call~~0x500010>']}], 'cfg_edge_info': [(16, 20), (9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (20, 10), (8, 9), (15, 19), (15, 3), (8, 12), (5, 9), (20, 12), (2, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "add" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x40036e>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033e>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jl" for 0x400348>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "add" for 0x401998>, <DisassemblerInsn "pop" for 0x40199f>, <DisassemblerInsn "pop" for 0x4019a0>, <DisassemblerInsn "pop" for 0x4019a2>, <DisassemblerInsn "pop" for 0x4019a4>, <DisassemblerInsn "pop" for 0x4019a6>, <DisassemblerInsn "pop" for 0x4019a8>, <DisassemblerInsn "ret" for 0x4019a9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~qword ptr [rsp + 0x428], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<je~~0x400314>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jl~~0x401991>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400314>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x48c]>', '<add~~rsp, 0x508>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jae~~0x400314>']}], 'cfg_edge_info': [(6, 11), (12, 3), (24, 3), (19, 3), (6, 10), (15, 3), (3, 6), (1, 3)]}]}
{'tgv_decode_frame': [4195092, 4195134]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O2/eatgv.o---after
The extraction of function: tgv_decode_frame
[4195092, 4195134]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 121 nodes and 196 edges in CFGEmulated.
It has 121 nodes and 204 edges in CDG.
It has 6508 nodes and 8441 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195092, 4195134]
{4196736, 4196866, 4195203, 4194559, 4197381, 4196998, 4198030, 4194576, 4200849, 4194704, 4195345, 4195092, 4195474, 4197526, 4194839, 4200728, 4197264, 4194976, 4194724, 4197416, 4194352, 4197043, 4200755, 4194741, 4197301, 4197178, 4198843, 4197306, 4195134, 4194495, 4198974, 4200769, 4194500, 4195272, 4195150, 4197073, 4200791, 4194777, 4194908, 4197631, 4194532, 4195301, 4196839, 4194793, 4200809, 4197100, 4195187, 4197491, 4200821, 4194681, 4195198, 4197119}
[9, 24, 39, 0, 77, 47, 10, 17, 55, 22, 32, 3, 23, 117, 50, 76, 97, 88, 61, 73, 96, 5, 15, 92, 34, 51, 80, 11, 16, 43, 45, 12, 94, 14, 29, 87, 85, 21, 2, 74, 1, 19, 48, 52, 27, 44, 90, 93, 68, 35, 81, 63, 4, 30, 25, 86, 54, 40, 71, 8, 62, 41, 37, 31, 38, 56, 28, 79]
The execution time of patched slicing information extraction via angr: 0:00:27.515692
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40037e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "cmp" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "je" for 0x40040b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "push" for 0x400031>, <DisassemblerInsn "push" for 0x400033>, <DisassemblerInsn "push" for 0x400035>, <DisassemblerInsn "push" for 0x400037>, <DisassemblerInsn "push" for 0x400039>, <DisassemblerInsn "sub" for 0x40003a>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "movsxd" for 0x40007b>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "add" for 0x400096>, <DisassemblerInsn "mov" for 0x40009a>, <DisassemblerInsn "cmp" for 0x4000a2>, <DisassemblerInsn "sete" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "test" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "jne" for 0x4000bd>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400886>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "sub" for 0x400896>, <DisassemblerInsn "movsxd" for 0x400899>, <DisassemblerInsn "cmp" for 0x40089c>, <DisassemblerInsn "jl" for 0x40089f>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "add" for 0x40098b>, <DisassemblerInsn "mov" for 0x400992>, <DisassemblerInsn "cmp" for 0x40099a>, <DisassemblerInsn "jle" for 0x4009a1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033e>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jl" for 0x400348>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b0>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401941>, <DisassemblerInsn "add" for 0x401949>, <DisassemblerInsn "mov" for 0x40194d>, <DisassemblerInsn "call" for 0x401952>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b17>, <DisassemblerInsn "mov" for 0x400b1e>, <DisassemblerInsn "add" for 0x400b25>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "cmp" for 0x400b31>, <DisassemblerInsn "ja" for 0x400b34>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aae>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a02>, <DisassemblerInsn "mov" for 0x400a07>, <DisassemblerInsn "jmp" for 0x400a0e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093e>, <DisassemblerInsn "test" for 0x400945>, <DisassemblerInsn "setg" for 0x400947>, <DisassemblerInsn "mov" for 0x40094b>, <DisassemblerInsn "sub" for 0x40094e>, <DisassemblerInsn "setb" for 0x400951>, <DisassemblerInsn "and" for 0x400955>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jne" for 0x40097a>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40189b>, <DisassemblerInsn "mov" for 0x4018a3>, <DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "mov" for 0x4018b6>, <DisassemblerInsn "add" for 0x4018bb>, <DisassemblerInsn "mov" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c4>, <DisassemblerInsn "mov" for 0x4018ca>, <DisassemblerInsn "cdq" for 0x4018cf>, <DisassemblerInsn "idiv" for 0x4018d0>, <DisassemblerInsn "mov" for 0x4018d2>, <DisassemblerInsn "mov" for 0x4018d4>, <DisassemblerInsn "movsxd" for 0x4018d9>, <DisassemblerInsn "cmp" for 0x4018dc>, <DisassemblerInsn "jge" for 0x4018df>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401969>, <DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "jl" for 0x401973>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c60>, <DisassemblerInsn "shl" for 0x400c67>, <DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "mov" for 0x400c6c>, <DisassemblerInsn "call" for 0x400c6e>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cff>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "or" for 0x400d0e>, <DisassemblerInsn "mov" for 0x400d11>, <DisassemblerInsn "cmp" for 0x400d18>, <DisassemblerInsn "je" for 0x400d1c>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401186>, <DisassemblerInsn "mov" for 0x40118e>, <DisassemblerInsn "add" for 0x401196>, <DisassemblerInsn "cmp" for 0x40119a>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "mov" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011ae>, <DisassemblerInsn "jne" for 0x4011b5>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013d>, <DisassemblerInsn "movzx" for 0x400143>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "cmp" for 0x400171>, <DisassemblerInsn "jne" for 0x400177>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "add" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x40036e>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401975>, <DisassemblerInsn "mov" for 0x40197c>, <DisassemblerInsn "mov" for 0x401984>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "add" for 0x401998>, <DisassemblerInsn "pop" for 0x40199f>, <DisassemblerInsn "pop" for 0x4019a0>, <DisassemblerInsn "pop" for 0x4019a2>, <DisassemblerInsn "pop" for 0x4019a4>, <DisassemblerInsn "pop" for 0x4019a6>, <DisassemblerInsn "pop" for 0x4019a8>, <DisassemblerInsn "ret" for 0x4019a9>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400492>, <DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "movzx" for 0x4004aa>, <DisassemblerInsn "shl" for 0x4004ad>, <DisassemblerInsn "movzx" for 0x4004b0>, <DisassemblerInsn "shl" for 0x4004b4>, <DisassemblerInsn "or" for 0x4004b7>, <DisassemblerInsn "movzx" for 0x4004b9>, <DisassemblerInsn "or" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "setne" for 0x4004c6>, <DisassemblerInsn "sub" for 0x4004c9>, <DisassemblerInsn "setb" for 0x4004cc>, <DisassemblerInsn "and" for 0x4004cf>, <DisassemblerInsn "test" for 0x4004d1>, <DisassemblerInsn "jne" for 0x4004d3>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be3>, <DisassemblerInsn "mov" for 0x400bea>, <DisassemblerInsn "mov" for 0x400bf2>, <DisassemblerInsn "shl" for 0x400bf9>, <DisassemblerInsn "mov" for 0x400bfc>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "call" for 0x400c00>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8e>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e9e>, <DisassemblerInsn "sub" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "shl" for 0x400eab>, <DisassemblerInsn "xor" for 0x400eae>, <DisassemblerInsn "cmp" for 0x400eb0>, <DisassemblerInsn "cmovb" for 0x400eb6>, <DisassemblerInsn "mov" for 0x400eba>, <DisassemblerInsn "xor" for 0x400ec2>, <DisassemblerInsn "cmp" for 0x400ec4>, <DisassemblerInsn "cmovb" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ecd>, <DisassemblerInsn "add" for 0x400ed4>, <DisassemblerInsn "mov" for 0x400ed7>, <DisassemblerInsn "xor" for 0x400ede>, <DisassemblerInsn "cmp" for 0x400ee0>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "je" for 0x400eeb>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "jmp" for 0x40010b>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "mov" for 0x400af3>, <DisassemblerInsn "jmp" for 0x400afa>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b90>, <DisassemblerInsn "mov" for 0x400b97>, <DisassemblerInsn "mov" for 0x400b9f>, <DisassemblerInsn "mov" for 0x400ba2>, <DisassemblerInsn "lea" for 0x400ba7>, <DisassemblerInsn "mov" for 0x400bae>, <DisassemblerInsn "call" for 0x400bb0>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40124e>, <DisassemblerInsn "mov" for 0x401255>, <DisassemblerInsn "mov" for 0x40125c>, <DisassemblerInsn "mov" for 0x401264>, <DisassemblerInsn "mov" for 0x40126c>, <DisassemblerInsn "mov" for 0x401274>, <DisassemblerInsn "sub" for 0x401279>, <DisassemblerInsn "mov" for 0x40127c>, <DisassemblerInsn "shr" for 0x401282>, <DisassemblerInsn "mov" for 0x401285>, <DisassemblerInsn "mov" for 0x40128d>, <DisassemblerInsn "mov" for 0x401295>, <DisassemblerInsn "add" for 0x401298>, <DisassemblerInsn "mov" for 0x40129f>, <DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "add" for 0x4012aa>, <DisassemblerInsn "mov" for 0x4012b1>, <DisassemblerInsn "add" for 0x4012b9>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "mov" for 0x4012c8>, <DisassemblerInsn "add" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d4>, <DisassemblerInsn "xor" for 0x4012dc>, <DisassemblerInsn "mov" for 0x4012de>, <DisassemblerInsn "mov" for 0x4012e6>, <DisassemblerInsn "mov" for 0x4012ed>, <DisassemblerInsn "mov" for 0x4012f5>, <DisassemblerInsn "mov" for 0x4012fc>, <DisassemblerInsn "mov" for 0x401304>, <DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "mov" for 0x40131a>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "cmp" for 0x401338>, <DisassemblerInsn "mov" for 0x40133b>, <DisassemblerInsn "mov" for 0x401343>, <DisassemblerInsn "jle" for 0x40134a>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "add" for 0x401998>, <DisassemblerInsn "pop" for 0x40199f>, <DisassemblerInsn "pop" for 0x4019a0>, <DisassemblerInsn "pop" for 0x4019a2>, <DisassemblerInsn "pop" for 0x4019a4>, <DisassemblerInsn "pop" for 0x4019a6>, <DisassemblerInsn "pop" for 0x4019a8>, <DisassemblerInsn "ret" for 0x4019a9>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400429>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "imul" for 0x400448>, <DisassemblerInsn "movsxd" for 0x40044b>, <DisassemblerInsn "add" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "and" for 0x40045c>, <DisassemblerInsn "mov" for 0x400460>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "cmp" for 0x40046a>, <DisassemblerInsn "cmove" for 0x40046e>, <DisassemblerInsn "add" for 0x400472>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "add" for 0x40047d>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "cmp" for 0x400489>, <DisassemblerInsn "ja" for 0x40048c>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d61>, <DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "mov" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "mov" for 0x400d88>, <DisassemblerInsn "mov" for 0x400d90>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "shr" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "and" for 0x400db1>, <DisassemblerInsn "mov" for 0x400db4>, <DisassemblerInsn "shr" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "shl" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "sar" for 0x400dda>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "add" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "cmova" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "shr" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1a>, <DisassemblerInsn "and" for 0x400e1d>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "shr" for 0x400e27>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "shl" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "sar" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "add" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e58>, <DisassemblerInsn "cmova" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e5f>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "add" for 0x400e6a>, <DisassemblerInsn "mov" for 0x400e6e>, <DisassemblerInsn "cmp" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "jne" for 0x400e88>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "sub" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011da>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e4>, <DisassemblerInsn "mov" for 0x4011ec>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "mov" for 0x4011f9>, <DisassemblerInsn "cdq" for 0x4011fe>, <DisassemblerInsn "idiv" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401201>, <DisassemblerInsn "mov" for 0x401208>, <DisassemblerInsn "mov" for 0x40120a>, <DisassemblerInsn "imul" for 0x401212>, <DisassemblerInsn "mov" for 0x401215>, <DisassemblerInsn "mov" for 0x40121b>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "cdq" for 0x401227>, <DisassemblerInsn "idiv" for 0x401228>, <DisassemblerInsn "mov" for 0x40122a>, <DisassemblerInsn "mov" for 0x40122c>, <DisassemblerInsn "imul" for 0x401233>, <DisassemblerInsn "cmp" for 0x401236>, <DisassemblerInsn "jl" for 0x401238>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "test" for 0x40037a>, <DisassemblerInsn "jne" for 0x40037c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401957>, <DisassemblerInsn "mov" for 0x40195c>, <DisassemblerInsn "call" for 0x401964>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b5>, <DisassemblerInsn "mov" for 0x4006bd>, <DisassemblerInsn "shl" for 0x4006bf>, <DisassemblerInsn "and" for 0x4006c2>, <DisassemblerInsn "movzx" for 0x4006c7>, <DisassemblerInsn "or" for 0x4006cb>, <DisassemblerInsn "add" for 0x4006ce>, <DisassemblerInsn "shr" for 0x4006d0>, <DisassemblerInsn "and" for 0x4006d3>, <DisassemblerInsn "add" for 0x4006d6>, <DisassemblerInsn "mov" for 0x4006d9>, <DisassemblerInsn "mov" for 0x4006de>, <DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006fb>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "add" for 0x40073f>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "sub" for 0x400754>, <DisassemblerInsn "cmp" for 0x400757>, <DisassemblerInsn "jl" for 0x40075a>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "mov" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "add" for 0x400c3a>, <DisassemblerInsn "mov" for 0x400c41>, <DisassemblerInsn "cmp" for 0x400c49>, <DisassemblerInsn "jge" for 0x400c4f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab3>, <DisassemblerInsn "mov" for 0x400abb>, <DisassemblerInsn "add" for 0x400abe>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "cmp" for 0x400aca>, <DisassemblerInsn "jne" for 0x400acf>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "mov" for 0x400bc2>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "add" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd3>, <DisassemblerInsn "cmp" for 0x400bdb>, <DisassemblerInsn "jge" for 0x400be1>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40123e>, <DisassemblerInsn "cmp" for 0x401245>, <DisassemblerInsn "jle" for 0x401248>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "shl" for 0x400905>, <DisassemblerInsn "sar" for 0x400909>, <DisassemblerInsn "add" for 0x40090d>, <DisassemblerInsn "mov" for 0x400910>, <DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093e>, <DisassemblerInsn "test" for 0x400945>, <DisassemblerInsn "setg" for 0x400947>, <DisassemblerInsn "mov" for 0x40094b>, <DisassemblerInsn "sub" for 0x40094e>, <DisassemblerInsn "setb" for 0x400951>, <DisassemblerInsn "and" for 0x400955>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jne" for 0x40097a>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fb>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "add" for 0x40073f>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "sub" for 0x400754>, <DisassemblerInsn "cmp" for 0x400757>, <DisassemblerInsn "jl" for 0x40075a>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e7>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "lea" for 0x4009f4>, <DisassemblerInsn "mov" for 0x4009fb>, <DisassemblerInsn "call" for 0x4009fd>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d22>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "movzx" for 0x400d41>, <DisassemblerInsn "mov" for 0x400d44>, <DisassemblerInsn "xor" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d4e>, <DisassemblerInsn "xor" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d61>, <DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "mov" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "mov" for 0x400d88>, <DisassemblerInsn "mov" for 0x400d90>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "shr" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "and" for 0x400db1>, <DisassemblerInsn "mov" for 0x400db4>, <DisassemblerInsn "shr" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "shl" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "sar" for 0x400dda>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "add" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "cmova" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "shr" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1a>, <DisassemblerInsn "and" for 0x400e1d>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "shr" for 0x400e27>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "shl" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "sar" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "add" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e58>, <DisassemblerInsn "cmova" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e5f>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "add" for 0x400e6a>, <DisassemblerInsn "mov" for 0x400e6e>, <DisassemblerInsn "cmp" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "jne" for 0x400e88>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400bb5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "lea" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "call" for 0x4000fa>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jl" for 0x4001e3>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a1>, <DisassemblerInsn "add" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "mov" for 0x4003b3>, <DisassemblerInsn "cmp" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "jne" for 0x4003c6>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "lea" for 0x400f01>, <DisassemblerInsn "add" for 0x400f09>, <DisassemblerInsn "mov" for 0x400f10>, <DisassemblerInsn "movzx" for 0x400f18>, <DisassemblerInsn "mov" for 0x400f1b>, <DisassemblerInsn "lea" for 0x400f23>, <DisassemblerInsn "mov" for 0x400f2b>, <DisassemblerInsn "lea" for 0x400f33>, <DisassemblerInsn "add" for 0x400f3b>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f47>, <DisassemblerInsn "add" for 0x400f4f>, <DisassemblerInsn "mov" for 0x400f53>, <DisassemblerInsn "lea" for 0x400f5b>, <DisassemblerInsn "add" for 0x400f63>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "xor" for 0x400f6f>, <DisassemblerInsn "mov" for 0x400f71>, <DisassemblerInsn "xor" for 0x400f73>, <DisassemblerInsn "mov" for 0x400f75>, <DisassemblerInsn "mov" for 0x400f7d>, <DisassemblerInsn "mov" for 0x400f84>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "mov" for 0x400f9b>, <DisassemblerInsn "mov" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb3>, <DisassemblerInsn "mov" for 0x400fbb>, <DisassemblerInsn "mov" for 0x400fc3>, <DisassemblerInsn "shr" for 0x400fc6>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "mov" for 0x400fcd>, <DisassemblerInsn "mov" for 0x400fd1>, <DisassemblerInsn "and" for 0x400fd4>, <DisassemblerInsn "shr" for 0x400fd7>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "and" for 0x400fe2>, <DisassemblerInsn "add" for 0x400fe9>, <DisassemblerInsn "cmp" for 0x400fed>, <DisassemblerInsn "mov" for 0x400ff0>, <DisassemblerInsn "cmova" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ff7>, <DisassemblerInsn "mov" for 0x400ffa>, <DisassemblerInsn "shr" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401000>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401005>, <DisassemblerInsn "and" for 0x401008>, <DisassemblerInsn "shr" for 0x40100b>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "and" for 0x401015>, <DisassemblerInsn "add" for 0x40101b>, <DisassemblerInsn "cmp" for 0x40101f>, <DisassemblerInsn "mov" for 0x401022>, <DisassemblerInsn "cmova" for 0x401025>, <DisassemblerInsn "mov" for 0x401029>, <DisassemblerInsn "mov" for 0x40102b>, <DisassemblerInsn "shr" for 0x40102e>, <DisassemblerInsn "mov" for 0x401031>, <DisassemblerInsn "mov" for 0x401033>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "and" for 0x401039>, <DisassemblerInsn "shr" for 0x40103c>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "and" for 0x401046>, <DisassemblerInsn "add" for 0x40104c>, <DisassemblerInsn "cmp" for 0x401050>, <DisassemblerInsn "mov" for 0x401053>, <DisassemblerInsn "cmova" for 0x401055>, <DisassemblerInsn "mov" for 0x401059>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "shr" for 0x40105d>, <DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "and" for 0x401067>, <DisassemblerInsn "shr" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106c>, <DisassemblerInsn "and" for 0x401074>, <DisassemblerInsn "add" for 0x40107a>, <DisassemblerInsn "cmp" for 0x40107d>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401933>, <DisassemblerInsn "mov" for 0x401938>, <DisassemblerInsn "jmp" for 0x40193f>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004d5>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c05>, <DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "mov" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "mov" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "add" for 0x400c3a>, <DisassemblerInsn "mov" for 0x400c41>, <DisassemblerInsn "cmp" for 0x400c49>, <DisassemblerInsn "jge" for 0x400c4f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400188>, <DisassemblerInsn "je" for 0x40018e>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "mov" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb4>, <DisassemblerInsn "imul" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbe>, <DisassemblerInsn "and" for 0x400cc1>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "shr" for 0x400cce>, <DisassemblerInsn "mov" for 0x400cd1>, <DisassemblerInsn "add" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cd6>, <DisassemblerInsn "shl" for 0x400cde>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "shl" for 0x400cee>, <DisassemblerInsn "mov" for 0x400cf1>, <DisassemblerInsn "add" for 0x400cf3>, <DisassemblerInsn "cmp" for 0x400cf6>, <DisassemblerInsn "ja" for 0x400cf9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "mov" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004ea>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004f8>, <DisassemblerInsn "mov" for 0x400500>, <DisassemblerInsn "mov" for 0x400508>, <DisassemblerInsn "mov" for 0x40050f>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051e>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053d>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "movzx" for 0x40054d>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "and" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "and" for 0x400563>, <DisassemblerInsn "cmp" for 0x400568>, <DisassemblerInsn "je" for 0x40056b>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b3a>, <DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b45>, <DisassemblerInsn "movzx" for 0x400b4d>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "movzx" for 0x400b57>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b62>, <DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "movzx" for 0x400b6e>, <DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "mov" for 0x400b7f>, <DisassemblerInsn "add" for 0x400b86>, <DisassemblerInsn "cmp" for 0x400b8a>, <DisassemblerInsn "jb" for 0x400b8e>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "lea" for 0x400ade>, <DisassemblerInsn "mov" for 0x400ae5>, <DisassemblerInsn "call" for 0x400ae7>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401918>, <DisassemblerInsn "mov" for 0x401920>, <DisassemblerInsn "lea" for 0x401925>, <DisassemblerInsn "mov" for 0x40192c>, <DisassemblerInsn "call" for 0x40192e>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b7>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "add" for 0x4009c2>, <DisassemblerInsn "mov" for 0x4009c6>, <DisassemblerInsn "add" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d4>, <DisassemblerInsn "xor" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009de>, <DisassemblerInsn "jmp" for 0x4009e5>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "imul" for 0x4003d6>, <DisassemblerInsn "movsxd" for 0x4003dd>, <DisassemblerInsn "call" for 0x4003e0>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c7b>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "mov" for 0x400c85>, <DisassemblerInsn "mov" for 0x400c8d>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "mov" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb4>, <DisassemblerInsn "imul" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbe>, <DisassemblerInsn "and" for 0x400cc1>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "shr" for 0x400cce>, <DisassemblerInsn "mov" for 0x400cd1>, <DisassemblerInsn "add" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cd6>, <DisassemblerInsn "shl" for 0x400cde>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "shl" for 0x400cee>, <DisassemblerInsn "mov" for 0x400cf1>, <DisassemblerInsn "add" for 0x400cf3>, <DisassemblerInsn "cmp" for 0x400cf6>, <DisassemblerInsn "ja" for 0x400cf9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x400ab3>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x418]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x420], rcx>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<je~~0x401991>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r15>', '<push~~r14>', '<push~~r13>', '<push~~r12>', '<push~~rbx>', '<sub~~rsp, 0x508>', '<mov~~qword ptr [rsp + 0x498], rdi>', '<mov~~qword ptr [rsp + 0x4a0], rsi>', '<mov~~qword ptr [rsp + 0x4a8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x4b0], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x4bc], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x4c0], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<mov~~qword ptr [rsp + 0x4d0], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x4e7], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jne~~0x4000c4>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x384]>', '<mov~~rdx, qword ptr [rsp + 0x3f8]>', '<mov~~rax, qword ptr [rsp + 0x348]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x244>', '<mov~~qword ptr [rsp + 0x328], rcx>', '<cmp~~dword ptr [rax + 0x244], 0>', '<jle~~0x401941>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jl~~0x401991>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 8], rdi>', '<call~~0x500010>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x428]>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x2d0], rax>', '<cmp~~rax, rcx>', '<ja~~0x401918>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~rax, qword ptr [rsp + 0x4e8]>', '<mov~~qword ptr [rsp + 0x428], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, qword ptr [rsp + 0x468]>', '<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 117, 'blockInsts': ['<jmp~~0x401941>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jmp~~0x401991>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x340]>', '<mov~~esi, dword ptr [rsp + 0x384]>', '<mov~~r9, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x350]>', '<mov~~edx, dword ptr [rsp + 0x35c]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x3b4], esi>', '<mov~~dword ptr [rsp + 0x3dc], edx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~qword ptr [rsp + 0x3e8], rax>', '<jne~~0x400508>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x401941>']}, {'block_Idx': 88, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jl~~0x401991>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c8]>', '<mov~~rcx, qword ptr [rsp + 0x4c0]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2ba]>', '<mov~~ecx, dword ptr [rsp + 0x294]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<cmp~~ax, 0>', '<je~~0x400e8e>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x20c], ecx>', '<mov~~dword ptr [rsp + 0x220], eax>', '<jne~~0x400f84>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x468], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x474], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x478], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400190>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4bc]>', '<mov~~rcx, qword ptr [rsp + 0x4a8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<mov~~eax, dword ptr [rsp + 0x48c]>', '<add~~rsp, 0x508>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x408]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x3f4], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4004da>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2bc]>', '<mov~~rcx, qword ptr [rsp + 0x4c0]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x2c6]>', '<mov~~rsi, qword ptr [rsp + 0x2a0]>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x210], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x218], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x21c], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x220], eax>', '<je~~0x4011bb>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jmp~~0x401991>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4c8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4bc]>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jmp~~0x401991>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2cc]>', '<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xed7]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<je~~0x400314>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x158]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<mov~~r8d, dword ptr [rsp + 0x2cc]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~dword ptr [rsp + 0x10c], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x110], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x118], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~dword ptr [rsp + 0x144], edx>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<mov~~dword ptr [rsp + 0xf4], edx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jle~~0x40189b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x48c]>', '<add~~rsp, 0x508>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x428]>', '<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~rdx, qword ptr [rsp + 0x420]>', '<mov~~qword ptr [rsp + 0x3f8], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x400], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x408], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x410], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009e7>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x28c]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x290]>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~qword ptr [rsp + 0x248], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x224], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x228], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x22c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x230], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x234], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x238], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x23c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x240], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x244], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x254], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x258], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x25c], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x260], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x264], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x268], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~dword ptr [rsp + 0x28c], eax>', '<jne~~0x400d61>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x218]>', '<mov~~edx, dword ptr [rsp + 0x220]>', '<mov~~dword ptr [rsp + 0x158], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x2cc]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x168], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x401918>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4e7]>', '<test~~al, 1>', '<jne~~0x400383>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4bc]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x4d0]>', '<call~~0x500048>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400314>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3d8]>', '<mov~~ecx, dword ptr [rsp + 0x3d4]>', '<mov~~rsi, qword ptr [rsp + 0x3c0]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x3a0], rsi>', '<mov~~dword ptr [rsp + 0x3a8], edx>', '<mov~~dword ptr [rsp + 0x3ac], ecx>', '<mov~~dword ptr [rsp + 0x3b0], eax>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdx, qword ptr [rsp + 0x3c0]>', '<mov~~rsi, qword ptr [rsp + 0x3a0]>', '<mov~~ecx, dword ptr [rsp + 0x3a8]>', '<mov~~edi, dword ptr [rsp + 0x3ac]>', '<mov~~r8d, dword ptr [rsp + 0x3b0]>', '<mov~~dword ptr [rsp + 0x384], r8d>', '<mov~~dword ptr [rsp + 0x388], edi>', '<mov~~dword ptr [rsp + 0x38c], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x390], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x2c8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c96>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400aff>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x2bc]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x2b0], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c28>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x15c]>', '<cmp~~eax, 3>', '<jle~~0x401941>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x330]>', '<mov~~rcx, qword ptr [rsp + 0x348]>', '<mov~~eax, dword ptr [rsp + 0x338]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~dword ptr [rsp + 0x35c], eax>', '<mov~~rcx, qword ptr [rsp + 0x340]>', '<mov~~esi, dword ptr [rsp + 0x384]>', '<mov~~r9, qword ptr [rsp + 0x4c8]>', '<mov~~rax, qword ptr [rsp + 0x350]>', '<mov~~edx, dword ptr [rsp + 0x35c]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x3b4], esi>', '<mov~~dword ptr [rsp + 0x3dc], edx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~qword ptr [rsp + 0x3e8], rax>', '<jne~~0x400508>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdx, qword ptr [rsp + 0x3c0]>', '<mov~~rsi, qword ptr [rsp + 0x3a0]>', '<mov~~ecx, dword ptr [rsp + 0x3a8]>', '<mov~~edi, dword ptr [rsp + 0x3ac]>', '<mov~~r8d, dword ptr [rsp + 0x3b0]>', '<mov~~dword ptr [rsp + 0x384], r8d>', '<mov~~dword ptr [rsp + 0x388], edi>', '<mov~~dword ptr [rsp + 0x38c], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x390], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x398], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x102d]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2ba]>', '<mov~~rcx, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x278], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~dword ptr [rsp + 0x28c], eax>', '<mov~~r10d, dword ptr [rsp + 0x28c]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x290]>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~qword ptr [rsp + 0x248], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x224], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x228], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x22c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x230], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x234], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x238], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x23c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x240], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x244], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x254], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x258], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x25c], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x260], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x264], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x268], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~dword ptr [rsp + 0x28c], eax>', '<jne~~0x400d61>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401918>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x191e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jl~~0x401991>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x420], rax>', '<jne~~0x400411>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2c6]>', '<mov~~rcx, qword ptr [rsp + 0x4c0]>', '<lea~~rdx, [rsp + 0x4f0]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x1d0], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<lea~~rax, [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<lea~~rax, [rsp + 0x4f0]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<lea~~rax, [rsp + 0x4f0]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<lea~~rax, [rsp + 0x4f0]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~rcx, qword ptr [rsp + 0x210]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~rsi, qword ptr [rsp + 0x1e8]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~r8, qword ptr [rsp + 0x200]>', '<mov~~r10d, dword ptr [rsp + 0x20c]>', '<mov~~qword ptr [rsp + 0x1b8], r8>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~r8d, r8d>', '<mov~~r8d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x210]>', '<and~~r8d, 0xff>', '<add~~r10d, 8>', '<cmp~~eax, r10d>', '<mov~~r9d, eax>', '<cmova~~r9d, r10d>', '<mov~~dword ptr [rdi], r8d>', '<mov~~edi, r9d>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r9d>', '<and~~ecx, 7>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x210]>', '<and~~edi, 0xff>', '<add~~r9d, 8>', '<cmp~~eax, r9d>', '<mov~~r8d, eax>', '<cmova~~r8d, r9d>', '<mov~~dword ptr [rsi], edi>', '<mov~~esi, r8d>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edi, dword ptr [rcx + rsi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x210]>', '<and~~edi, 0xff>', '<add~~r8d, 8>', '<cmp~~eax, r8d>', '<mov~~esi, eax>', '<cmova~~esi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, esi>', '<shr~~edx, 3>', '<mov~~edx, edx>', '<mov~~edx, dword ptr [rcx + rdx]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shr~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x1f8]>', '<and~~edx, 0xff>', '<add~~esi, 8>', '<cmp~~eax, esi>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x48c], eax>', '<jmp~~0x401991>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x400980>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x2bc]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2b0]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x2c8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c96>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~ecx, dword ptr [rsp + 0x474]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001e9>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~edx, dword ptr [rsp + 0x2c8]>', '<mov~~esi, dword ptr [rsp + 0x2c0]>', '<mov~~rax, qword ptr [rsp + 0x2d0]>', '<mov~~edi, dword ptr [rsp + 0x2bc]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x294], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401918>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3f8]>', '<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~edx, dword ptr [rsp + 0x3f4]>', '<mov~~dword ptr [rsp + 0x3dc], edx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~qword ptr [rsp + 0x3e8], rax>', '<mov~~ecx, dword ptr [rsp + 0x3b4]>', '<mov~~edx, dword ptr [rsp + 0x3dc]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~rsi, qword ptr [rsp + 0x3e8]>', '<mov~~qword ptr [rsp + 0x3b8], rsi>', '<mov~~qword ptr [rsp + 0x3c0], rax>', '<mov~~dword ptr [rsp + 0x3c8], edx>', '<mov~~dword ptr [rsp + 0x3cc], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3d3], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x3d8], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006a7>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x428]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x2ba], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x2bc], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x2c0], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x2c6], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x2c8], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x2cc], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400bba>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf5a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x142]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x308], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x310], rcx>', '<add~~rax, 0x240>', '<mov~~qword ptr [rsp + 0x318], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x324], eax>', '<jmp~~0x400a13>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4c0]>', '<mov~~eax, dword ptr [rcx + 0x240]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x2c8]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<mov~~edx, dword ptr [rsp + 0x2c8]>', '<mov~~esi, dword ptr [rsp + 0x2c0]>', '<mov~~rax, qword ptr [rsp + 0x2d0]>', '<mov~~edi, dword ptr [rsp + 0x2bc]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x294], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401918>']}], 'cfg_edge_info': [(15, 21), (32, 37), (73, 81), (87, 80), (8, 9), (51, 71), (9, 17), (11, 14), (47, 55), (22, 19), (29, 34), (48, 47), (17, 23), (2, 4), (117, 55), (43, 14), (81, 80), (22, 3), (76, 47), (63, 38), (93, 47), (25, 29), (90, 94), (44, 51), (3, 10), (21, 25), (0, 2), (40, 47), (61, 79), (1, 3), (10, 15), (27, 31), (96, 85), (28, 39), (16, 19), (39, 14), (73, 80), (68, 47), (4, 11), (5, 9), (80, 85), (16, 3), (97, 55), (37, 44), (62, 73), (85, 38), (88, 92), (54, 14), (52, 62), (38, 54), (90, 55), (34, 41), (19, 22), (79, 73), (47, 56), (29, 35), (88, 14), (71, 62), (74, 88), (25, 28), (12, 3), (21, 24), (55, 74), (35, 50), (23, 30), (50, 14), (10, 14), (85, 90), (45, 63), (32, 38), (27, 32), (24, 27), (12, 16), (52, 61), (19, 3), (62, 38), (80, 86), (30, 12), (8, 12), (2, 5), (34, 40), (77, 47), (37, 45), (79, 38), (39, 29), (0, 1), (30, 14), (31, 43), (71, 61), (44, 52), (5, 8)], 'cdg_edge_info': [(32, 37), (85, 55), (8, 9), (29, 50), (2, 11), (52, 79), (27, 43), (47, 55), (37, 63), (22, 19), (29, 34), (2, 4), (5, 30), (32, 14), (71, 79), (62, 85), (5, 23), (79, 85), (62, 14), (21, 25), (0, 2), (10, 15), (27, 31), (79, 14), (16, 19), (39, 14), (62, 80), (85, 54), (37, 14), (5, 9), (21, 27), (79, 80), (37, 44), (88, 92), (62, 73), (85, 38), (21, 29), (52, 62), (19, 22), (79, 73), (29, 35), (88, 14), (71, 62), (10, 21), (85, 88), (25, 28), (21, 24), (32, 54), (47, 88), (8, 17), (10, 14), (44, 71), (85, 90), (32, 38), (27, 14), (8, 10), (30, 10), (85, 74), (62, 54), (27, 32), (34, 47), (29, 14), (12, 16), (47, 74), (8, 3), (62, 38), (79, 54), (30, 3), (8, 12), (30, 12), (2, 5), (2, 14), (8, 30), (37, 45), (37, 54), (79, 38), (39, 29), (0, 1), (30, 14), (85, 14), (0, 10), (8, 23), (37, 38), (25, 39), (44, 52), (5, 8), (0, 3), (5, 17)], 'ddg_edge_info': [(15, 21), (21, 71), (15, 85), (90, 88), (37, 79), (0, 5), (9, 17), (0, 23), (32, 85), (16, 22), (15, 32), (25, 34), (0, 44), (22, 19), (29, 34), (3, 15), (12, 27), (17, 23), (0, 71), (5, 85), (21, 39), (0, 16), (0, 80), (15, 71), (15, 80), (15, 25), (71, 79), (35, 92), (22, 3), (39, 92), (0, 55), (0, 9), (5, 23), (15, 55), (15, 73), (25, 29), (28, 55), (25, 47), (3, 10), (23, 22), (0, 2), (54, 92), (37, 85), (3, 92), (3, 37), (28, 39), (16, 19), (0, 32), (12, 15), (4, 11), (31, 92), (80, 85), (79, 80), (0, 25), (37, 44), (88, 92), (0, 34), (0, 43), (37, 71), (15, 34), (37, 80), (38, 54), (19, 22), (50, 92), (79, 73), (28, 34), (0, 27), (10, 92), (0, 45), (15, 27), (37, 73), (23, 19), (15, 45), (23, 92), (74, 88), (0, 29), (25, 28), (0, 38), (12, 3), (23, 3), (0, 47), (23, 12), (15, 29), (21, 79), (55, 74), (15, 38), (21, 88), (35, 50), (15, 47), (23, 30), (0, 4), (44, 71), (47, 88), (5, 27), (28, 29), (0, 22), (85, 90), (0, 31), (28, 47), (5, 45), (15, 31), (4, 92), (45, 38), (0, 15), (2, 12), (3, 32), (0, 79), (30, 92), (74, 92), (19, 37), (15, 79), (12, 16), (23, 16), (19, 3), (0, 8), (0, 17), (32, 79), (37, 45), (0, 35), (15, 90), (38, 92), (15, 35), (39, 29), (15, 44), (34, 88), (5, 15), (31, 43), (0, 74), (0, 19), (2, 16), (28, 35), (0, 28), (0, 92), (11, 92), (15, 28), (15, 37), (25, 39), (73, 88), (5, 8), (0, 3), (3, 29), (0, 12), (28, 92), (0, 21), (0, 85), (43, 92)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x474(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x480(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_74'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x48c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_74'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1720 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x768(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x774(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x778(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_72'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x766(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_72'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1720 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x768(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x774(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x778(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_72'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x766(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_72'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 129 nodes and 217 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1720 instructions in binary file.
[4194576, 4194681, 4194704, 4194724, 4194741, 4194777, 4194793, 4194839]
[4195092, 4195134]
The execution time of patched subCFG information extraction via angr: 0:00:00.748358
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013d>, <DisassemblerInsn "movzx" for 0x400143>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "cmp" for 0x400171>, <DisassemblerInsn "jne" for 0x400177>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x402210>, <DisassemblerInsn "pop" for 0x402217>, <DisassemblerInsn "pop" for 0x402218>, <DisassemblerInsn "pop" for 0x40221a>, <DisassemblerInsn "pop" for 0x40221c>, <DisassemblerInsn "pop" for 0x40221e>, <DisassemblerInsn "pop" for 0x402220>, <DisassemblerInsn "ret" for 0x402221>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b0>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400188>, <DisassemblerInsn "je" for 0x40018e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jl" for 0x4001e3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7b0]>', '<mov~~rcx, qword ptr [rsp + 0x7d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x768], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x774], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x778], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x780], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400190>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x766], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x400314>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rsp + 0x768]>', '<mov~~rax, qword ptr [rsp + 0x778]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x728], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x748]>', '<mov~~rcx, qword ptr [rsp + 0x738]>', '<mov~~rax, qword ptr [rsp + 0x730]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x740]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x780]>', '<mov~~ecx, dword ptr [rsp + 0x774]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001e9>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x766]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~qword ptr [rsp + 0x758], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x750]>', '<mov~~rax, qword ptr [rsp + 0x758]>', '<mov~~qword ptr [rsp + 0x730], rax>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402209>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x790], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}], 'cfg_edge_info': [(16, 20), (9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (20, 10), (8, 9), (15, 19), (15, 3), (8, 12), (5, 9), (20, 12), (2, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x402210>, <DisassemblerInsn "pop" for 0x402217>, <DisassemblerInsn "pop" for 0x402218>, <DisassemblerInsn "pop" for 0x40221a>, <DisassemblerInsn "pop" for 0x40221c>, <DisassemblerInsn "pop" for 0x40221e>, <DisassemblerInsn "pop" for 0x402220>, <DisassemblerInsn "ret" for 0x402221>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "add" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x40036e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033e>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jl" for 0x400348>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x766], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x400314>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x728], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x748]>', '<mov~~rcx, qword ptr [rsp + 0x738]>', '<mov~~rax, qword ptr [rsp + 0x730]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x740]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x766]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~qword ptr [rsp + 0x758], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x750]>', '<mov~~rax, qword ptr [rsp + 0x758]>', '<mov~~qword ptr [rsp + 0x730], rax>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x750]>', '<mov~~rax, qword ptr [rsp + 0x758]>', '<mov~~qword ptr [rsp + 0x730], rax>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400314>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rax, qword ptr [rsp + 0x7a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402209>']}], 'cfg_edge_info': [(6, 11), (12, 3), (24, 3), (19, 3), (6, 10), (15, 3), (3, 6), (1, 3)]}]}
{'tgv_decode_frame': [4195092, 4195134]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/O3/eatgv.o---after
The extraction of function: tgv_decode_frame
[4195092, 4195134]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 130 nodes and 203 edges in CFGEmulated.
It has 130 nodes and 217 edges in CDG.
It has 10543 nodes and 13198 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195092, 4195134]
{4196736, 4196866, 4195203, 4194559, 4197381, 4196998, 4203017, 4198030, 4194576, 4194704, 4195345, 4195474, 4195092, 4202898, 4197526, 4194839, 4197264, 4194976, 4194724, 4197416, 4202925, 4194352, 4197043, 4194741, 4197301, 4197178, 4202939, 4197306, 4195134, 4194495, 4194500, 4201028, 4201159, 4195272, 4195150, 4202960, 4197073, 4194777, 4194908, 4202977, 4197631, 4194532, 4195301, 4196839, 4194793, 4197100, 4202989, 4195187, 4197491, 4194681, 4195198, 4197119}
[9, 24, 39, 0, 77, 55, 47, 10, 17, 22, 32, 126, 3, 23, 94, 92, 50, 76, 61, 73, 15, 5, 74, 88, 51, 34, 80, 11, 85, 16, 43, 45, 12, 29, 87, 2, 21, 124, 14, 1, 90, 19, 54, 48, 96, 52, 27, 44, 93, 68, 35, 81, 63, 4, 30, 25, 86, 38, 40, 71, 8, 62, 41, 37, 31, 117, 56, 28, 79]
The execution time of patched slicing information extraction via angr: 0:00:49.866010
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40037e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "cmp" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "je" for 0x40040b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "push" for 0x400031>, <DisassemblerInsn "push" for 0x400033>, <DisassemblerInsn "push" for 0x400035>, <DisassemblerInsn "push" for 0x400037>, <DisassemblerInsn "push" for 0x400039>, <DisassemblerInsn "sub" for 0x40003a>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "movsxd" for 0x40007b>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "add" for 0x400096>, <DisassemblerInsn "mov" for 0x40009a>, <DisassemblerInsn "cmp" for 0x4000a2>, <DisassemblerInsn "sete" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "test" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "jne" for 0x4000bd>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400886>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "sub" for 0x400896>, <DisassemblerInsn "movsxd" for 0x400899>, <DisassemblerInsn "cmp" for 0x40089c>, <DisassemblerInsn "jl" for 0x40089f>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021bb>, <DisassemblerInsn "add" for 0x4021c3>, <DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "call" for 0x4021cb>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "add" for 0x40098b>, <DisassemblerInsn "mov" for 0x400992>, <DisassemblerInsn "cmp" for 0x40099a>, <DisassemblerInsn "jle" for 0x4009a1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033e>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jl" for 0x400348>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "call" for 0x4001b0>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b17>, <DisassemblerInsn "mov" for 0x400b1e>, <DisassemblerInsn "add" for 0x400b25>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "cmp" for 0x400b31>, <DisassemblerInsn "ja" for 0x400b34>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aae>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "call" for 0x400339>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad7>, <DisassemblerInsn "mov" for 0x401ade>, <DisassemblerInsn "mov" for 0x401ae5>, <DisassemblerInsn "mov" for 0x401aed>, <DisassemblerInsn "mov" for 0x401af5>, <DisassemblerInsn "mov" for 0x401afd>, <DisassemblerInsn "sub" for 0x401b02>, <DisassemblerInsn "mov" for 0x401b05>, <DisassemblerInsn "shr" for 0x401b0b>, <DisassemblerInsn "mov" for 0x401b0e>, <DisassemblerInsn "mov" for 0x401b16>, <DisassemblerInsn "mov" for 0x401b1e>, <DisassemblerInsn "add" for 0x401b21>, <DisassemblerInsn "mov" for 0x401b28>, <DisassemblerInsn "mov" for 0x401b30>, <DisassemblerInsn "add" for 0x401b33>, <DisassemblerInsn "mov" for 0x401b3a>, <DisassemblerInsn "add" for 0x401b42>, <DisassemblerInsn "mov" for 0x401b46>, <DisassemblerInsn "mov" for 0x401b4e>, <DisassemblerInsn "mov" for 0x401b51>, <DisassemblerInsn "add" for 0x401b59>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "xor" for 0x401b65>, <DisassemblerInsn "mov" for 0x401b67>, <DisassemblerInsn "mov" for 0x401b6f>, <DisassemblerInsn "mov" for 0x401b76>, <DisassemblerInsn "mov" for 0x401b7e>, <DisassemblerInsn "mov" for 0x401b85>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "mov" for 0x401b94>, <DisassemblerInsn "mov" for 0x401b9c>, <DisassemblerInsn "mov" for 0x401ba3>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "mov" for 0x401bb2>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "cmp" for 0x401bc1>, <DisassemblerInsn "mov" for 0x401bc4>, <DisassemblerInsn "mov" for 0x401bcc>, <DisassemblerInsn "jle" for 0x401bd3>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ed>, <DisassemblerInsn "mov" for 0x4021f4>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "mov" for 0x402202>, <DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x402210>, <DisassemblerInsn "pop" for 0x402217>, <DisassemblerInsn "pop" for 0x402218>, <DisassemblerInsn "pop" for 0x40221a>, <DisassemblerInsn "pop" for 0x40221c>, <DisassemblerInsn "pop" for 0x40221e>, <DisassemblerInsn "pop" for 0x402220>, <DisassemblerInsn "ret" for 0x402221>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a02>, <DisassemblerInsn "mov" for 0x400a07>, <DisassemblerInsn "jmp" for 0x400a0e>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093e>, <DisassemblerInsn "test" for 0x400945>, <DisassemblerInsn "setg" for 0x400947>, <DisassemblerInsn "mov" for 0x40094b>, <DisassemblerInsn "sub" for 0x40094e>, <DisassemblerInsn "setb" for 0x400951>, <DisassemblerInsn "and" for 0x400955>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jne" for 0x40097a>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c60>, <DisassemblerInsn "shl" for 0x400c67>, <DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "mov" for 0x400c6c>, <DisassemblerInsn "call" for 0x400c6e>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cff>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "or" for 0x400d0e>, <DisassemblerInsn "mov" for 0x400d11>, <DisassemblerInsn "cmp" for 0x400d18>, <DisassemblerInsn "je" for 0x400d1c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034e>, <DisassemblerInsn "mov" for 0x400356>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "add" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x40036e>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013d>, <DisassemblerInsn "movzx" for 0x400143>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "cmp" for 0x400171>, <DisassemblerInsn "jne" for 0x400177>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021d0>, <DisassemblerInsn "mov" for 0x4021d4>, <DisassemblerInsn "call" for 0x4021dc>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021e1>, <DisassemblerInsn "mov" for 0x4021e4>, <DisassemblerInsn "jl" for 0x4021eb>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be3>, <DisassemblerInsn "mov" for 0x400bea>, <DisassemblerInsn "mov" for 0x400bf2>, <DisassemblerInsn "shl" for 0x400bf9>, <DisassemblerInsn "mov" for 0x400bfc>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "call" for 0x400c00>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400492>, <DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "movzx" for 0x4004aa>, <DisassemblerInsn "shl" for 0x4004ad>, <DisassemblerInsn "movzx" for 0x4004b0>, <DisassemblerInsn "shl" for 0x4004b4>, <DisassemblerInsn "or" for 0x4004b7>, <DisassemblerInsn "movzx" for 0x4004b9>, <DisassemblerInsn "or" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "setne" for 0x4004c6>, <DisassemblerInsn "sub" for 0x4004c9>, <DisassemblerInsn "setb" for 0x4004cc>, <DisassemblerInsn "and" for 0x4004cf>, <DisassemblerInsn "test" for 0x4004d1>, <DisassemblerInsn "jne" for 0x4004d3>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8e>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e9e>, <DisassemblerInsn "sub" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "shl" for 0x400eab>, <DisassemblerInsn "xor" for 0x400eae>, <DisassemblerInsn "cmp" for 0x400eb0>, <DisassemblerInsn "cmovb" for 0x400eb6>, <DisassemblerInsn "mov" for 0x400eba>, <DisassemblerInsn "xor" for 0x400ec2>, <DisassemblerInsn "cmp" for 0x400ec4>, <DisassemblerInsn "cmovb" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ecd>, <DisassemblerInsn "add" for 0x400ed4>, <DisassemblerInsn "mov" for 0x400ed7>, <DisassemblerInsn "xor" for 0x400ede>, <DisassemblerInsn "cmp" for 0x400ee0>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "je" for 0x400eeb>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "jmp" for 0x40010b>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a44>, <DisassemblerInsn "mov" for 0x401a4c>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "mov" for 0x401a5a>, <DisassemblerInsn "sub" for 0x401a61>, <DisassemblerInsn "mov" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a6a>, <DisassemblerInsn "mov" for 0x401a6d>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "mov" for 0x401a7b>, <DisassemblerInsn "mov" for 0x401a82>, <DisassemblerInsn "cdq" for 0x401a87>, <DisassemblerInsn "idiv" for 0x401a88>, <DisassemblerInsn "mov" for 0x401a8a>, <DisassemblerInsn "mov" for 0x401a91>, <DisassemblerInsn "mov" for 0x401a93>, <DisassemblerInsn "imul" for 0x401a9b>, <DisassemblerInsn "mov" for 0x401a9e>, <DisassemblerInsn "mov" for 0x401aa4>, <DisassemblerInsn "mov" for 0x401aab>, <DisassemblerInsn "cdq" for 0x401ab0>, <DisassemblerInsn "idiv" for 0x401ab1>, <DisassemblerInsn "mov" for 0x401ab3>, <DisassemblerInsn "mov" for 0x401ab5>, <DisassemblerInsn "imul" for 0x401abc>, <DisassemblerInsn "cmp" for 0x401abf>, <DisassemblerInsn "jl" for 0x401ac1>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "movzx" for 0x400227>, <DisassemblerInsn "add" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "sub" for 0x40022f>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "cmovb" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "xor" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "add" for 0x400287>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "cmp" for 0x400293>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "jae" for 0x40029e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aec>, <DisassemblerInsn "mov" for 0x400af3>, <DisassemblerInsn "jmp" for 0x400afa>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b90>, <DisassemblerInsn "mov" for 0x400b97>, <DisassemblerInsn "mov" for 0x400b9f>, <DisassemblerInsn "mov" for 0x400ba2>, <DisassemblerInsn "lea" for 0x400ba7>, <DisassemblerInsn "mov" for 0x400bae>, <DisassemblerInsn "call" for 0x400bb0>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400429>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "imul" for 0x400448>, <DisassemblerInsn "movsxd" for 0x40044b>, <DisassemblerInsn "add" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "and" for 0x40045c>, <DisassemblerInsn "mov" for 0x400460>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "cmp" for 0x40046a>, <DisassemblerInsn "cmove" for 0x40046e>, <DisassemblerInsn "add" for 0x400472>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "add" for 0x40047d>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "cmp" for 0x400489>, <DisassemblerInsn "ja" for 0x40048c>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d61>, <DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "mov" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "mov" for 0x400d88>, <DisassemblerInsn "mov" for 0x400d90>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "shr" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "and" for 0x400db1>, <DisassemblerInsn "mov" for 0x400db4>, <DisassemblerInsn "shr" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "shl" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "sar" for 0x400dda>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "add" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "cmova" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "shr" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1a>, <DisassemblerInsn "and" for 0x400e1d>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "shr" for 0x400e27>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "shl" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "sar" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "add" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e58>, <DisassemblerInsn "cmova" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e5f>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "add" for 0x400e6a>, <DisassemblerInsn "mov" for 0x400e6e>, <DisassemblerInsn "cmp" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "jne" for 0x400e88>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400373>, <DisassemblerInsn "test" for 0x40037a>, <DisassemblerInsn "jne" for 0x40037c>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d7>, <DisassemblerInsn "mov" for 0x4018df>, <DisassemblerInsn "mov" for 0x4018e1>, <DisassemblerInsn "mov" for 0x4018e8>, <DisassemblerInsn "mov" for 0x4018eb>, <DisassemblerInsn "shl" for 0x4018ee>, <DisassemblerInsn "mov" for 0x4018f2>, <DisassemblerInsn "add" for 0x4018fa>, <DisassemblerInsn "mov" for 0x4018fd>, <DisassemblerInsn "add" for 0x401905>, <DisassemblerInsn "mov" for 0x401909>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "mov" for 0x401914>, <DisassemblerInsn "shr" for 0x401917>, <DisassemblerInsn "mov" for 0x40191a>, <DisassemblerInsn "mov" for 0x401921>, <DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "mov" for 0x401927>, <DisassemblerInsn "and" for 0x40192a>, <DisassemblerInsn "mov" for 0x40192d>, <DisassemblerInsn "shr" for 0x401934>, <DisassemblerInsn "mov" for 0x401937>, <DisassemblerInsn "mov" for 0x40193f>, <DisassemblerInsn "and" for 0x401947>, <DisassemblerInsn "mov" for 0x40194b>, <DisassemblerInsn "add" for 0x401953>, <DisassemblerInsn "mov" for 0x401957>, <DisassemblerInsn "cmp" for 0x40195f>, <DisassemblerInsn "mov" for 0x401962>, <DisassemblerInsn "cmova" for 0x401964>, <DisassemblerInsn "mov" for 0x401968>, <DisassemblerInsn "mov" for 0x40196f>, <DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "shl" for 0x40197a>, <DisassemblerInsn "mov" for 0x40197e>, <DisassemblerInsn "add" for 0x401986>, <DisassemblerInsn "mov" for 0x401989>, <DisassemblerInsn "add" for 0x401991>, <DisassemblerInsn "mov" for 0x401995>, <DisassemblerInsn "mov" for 0x40199d>, <DisassemblerInsn "mov" for 0x4019a0>, <DisassemblerInsn "shr" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a5>, <DisassemblerInsn "mov" for 0x4019ac>, <DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "mov" for 0x4019b1>, <DisassemblerInsn "and" for 0x4019b3>, <DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "shr" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "and" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d1>, <DisassemblerInsn "add" for 0x4019d8>, <DisassemblerInsn "mov" for 0x4019db>, <DisassemblerInsn "cmp" for 0x4019e2>, <DisassemblerInsn "cmova" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019ee>, <DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fa>, <DisassemblerInsn "shl" for 0x4019fd>, <DisassemblerInsn "mov" for 0x401a01>, <DisassemblerInsn "add" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a0c>, <DisassemblerInsn "mov" for 0x401a14>, <DisassemblerInsn "add" for 0x401a17>, <DisassemblerInsn "mov" for 0x401a1b>, <DisassemblerInsn "cmp" for 0x401a23>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "mov" for 0x401a30>, <DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "jne" for 0x401a3e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x402210>, <DisassemblerInsn "pop" for 0x402217>, <DisassemblerInsn "pop" for 0x402218>, <DisassemblerInsn "pop" for 0x40221a>, <DisassemblerInsn "pop" for 0x40221c>, <DisassemblerInsn "pop" for 0x40221e>, <DisassemblerInsn "pop" for 0x402220>, <DisassemblerInsn "ret" for 0x402221>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac7>, <DisassemblerInsn "cmp" for 0x401ace>, <DisassemblerInsn "jle" for 0x401ad1>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "movzx" for 0x4002c8>, <DisassemblerInsn "shl" for 0x4002cc>, <DisassemblerInsn "movzx" for 0x4002d0>, <DisassemblerInsn "shl" for 0x4002d4>, <DisassemblerInsn "or" for 0x4002d7>, <DisassemblerInsn "movzx" for 0x4002da>, <DisassemblerInsn "or" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "add" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002ec>, <DisassemblerInsn "cmp" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030e>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ad>, <DisassemblerInsn "mov" for 0x4021b2>, <DisassemblerInsn "jmp" for 0x4021b9>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b5>, <DisassemblerInsn "mov" for 0x4006bd>, <DisassemblerInsn "shl" for 0x4006bf>, <DisassemblerInsn "and" for 0x4006c2>, <DisassemblerInsn "movzx" for 0x4006c7>, <DisassemblerInsn "or" for 0x4006cb>, <DisassemblerInsn "add" for 0x4006ce>, <DisassemblerInsn "shr" for 0x4006d0>, <DisassemblerInsn "and" for 0x4006d3>, <DisassemblerInsn "add" for 0x4006d6>, <DisassemblerInsn "mov" for 0x4006d9>, <DisassemblerInsn "mov" for 0x4006de>, <DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006fb>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "add" for 0x40073f>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "sub" for 0x400754>, <DisassemblerInsn "cmp" for 0x400757>, <DisassemblerInsn "jl" for 0x40075a>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402115>, <DisassemblerInsn "mov" for 0x40211d>, <DisassemblerInsn "mov" for 0x402125>, <DisassemblerInsn "mov" for 0x40212c>, <DisassemblerInsn "mov" for 0x402130>, <DisassemblerInsn "add" for 0x402135>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213e>, <DisassemblerInsn "mov" for 0x402144>, <DisassemblerInsn "cdq" for 0x402149>, <DisassemblerInsn "idiv" for 0x40214a>, <DisassemblerInsn "mov" for 0x40214c>, <DisassemblerInsn "mov" for 0x40214e>, <DisassemblerInsn "movsxd" for 0x402153>, <DisassemblerInsn "cmp" for 0x402156>, <DisassemblerInsn "jge" for 0x402159>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "mov" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "add" for 0x400c3a>, <DisassemblerInsn "mov" for 0x400c41>, <DisassemblerInsn "cmp" for 0x400c49>, <DisassemblerInsn "jge" for 0x400c4f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab3>, <DisassemblerInsn "mov" for 0x400abb>, <DisassemblerInsn "add" for 0x400abe>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "cmp" for 0x400aca>, <DisassemblerInsn "jne" for 0x400acf>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "mov" for 0x400bc2>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "add" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd3>, <DisassemblerInsn "cmp" for 0x400bdb>, <DisassemblerInsn "jge" for 0x400be1>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "shl" for 0x400905>, <DisassemblerInsn "sar" for 0x400909>, <DisassemblerInsn "add" for 0x40090d>, <DisassemblerInsn "mov" for 0x400910>, <DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093e>, <DisassemblerInsn "test" for 0x400945>, <DisassemblerInsn "setg" for 0x400947>, <DisassemblerInsn "mov" for 0x40094b>, <DisassemblerInsn "sub" for 0x40094e>, <DisassemblerInsn "setb" for 0x400951>, <DisassemblerInsn "and" for 0x400955>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "jne" for 0x40097a>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fb>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "add" for 0x40073f>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x40074c>, <DisassemblerInsn "sub" for 0x400754>, <DisassemblerInsn "cmp" for 0x400757>, <DisassemblerInsn "jl" for 0x40075a>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e7>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "lea" for 0x4009f4>, <DisassemblerInsn "mov" for 0x4009fb>, <DisassemblerInsn "call" for 0x4009fd>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d22>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "movzx" for 0x400d41>, <DisassemblerInsn "mov" for 0x400d44>, <DisassemblerInsn "xor" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d4e>, <DisassemblerInsn "xor" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d61>, <DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "mov" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "mov" for 0x400d88>, <DisassemblerInsn "mov" for 0x400d90>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "shr" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400daa>, <DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "and" for 0x400db1>, <DisassemblerInsn "mov" for 0x400db4>, <DisassemblerInsn "shr" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "shl" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "sar" for 0x400dda>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "add" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "cmova" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "shr" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1a>, <DisassemblerInsn "and" for 0x400e1d>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "shr" for 0x400e27>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "shl" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "sar" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "add" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e58>, <DisassemblerInsn "cmova" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e5f>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "add" for 0x400e6a>, <DisassemblerInsn "mov" for 0x400e6e>, <DisassemblerInsn "cmp" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "jne" for 0x400e88>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400bb5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "lea" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "call" for 0x4000fa>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jl" for 0x4001e3>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a1>, <DisassemblerInsn "add" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "mov" for 0x4003b3>, <DisassemblerInsn "cmp" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "jne" for 0x4003c6>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "lea" for 0x400f01>, <DisassemblerInsn "add" for 0x400f09>, <DisassemblerInsn "mov" for 0x400f10>, <DisassemblerInsn "movzx" for 0x400f18>, <DisassemblerInsn "mov" for 0x400f1b>, <DisassemblerInsn "lea" for 0x400f23>, <DisassemblerInsn "mov" for 0x400f2b>, <DisassemblerInsn "lea" for 0x400f33>, <DisassemblerInsn "add" for 0x400f3b>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f47>, <DisassemblerInsn "add" for 0x400f4f>, <DisassemblerInsn "mov" for 0x400f53>, <DisassemblerInsn "lea" for 0x400f5b>, <DisassemblerInsn "add" for 0x400f63>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "xor" for 0x400f6f>, <DisassemblerInsn "mov" for 0x400f71>, <DisassemblerInsn "xor" for 0x400f73>, <DisassemblerInsn "mov" for 0x400f75>, <DisassemblerInsn "mov" for 0x400f7d>, <DisassemblerInsn "mov" for 0x400f84>, <DisassemblerInsn "mov" for 0x400f8c>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9c>, <DisassemblerInsn "mov" for 0x400fa4>, <DisassemblerInsn "mov" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb3>, <DisassemblerInsn "mov" for 0x400fbb>, <DisassemblerInsn "mov" for 0x400fc3>, <DisassemblerInsn "mov" for 0x400fcb>, <DisassemblerInsn "mov" for 0x400fd3>, <DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "shr" for 0x400fde>, <DisassemblerInsn "mov" for 0x400fe1>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "mov" for 0x400fea>, <DisassemblerInsn "mov" for 0x400fed>, <DisassemblerInsn "and" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "shr" for 0x400ffa>, <DisassemblerInsn "mov" for 0x400ffc>, <DisassemblerInsn "mov" for 0x401004>, <DisassemblerInsn "and" for 0x40100b>, <DisassemblerInsn "mov" for 0x401011>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "cmp" for 0x401024>, <DisassemblerInsn "mov" for 0x401027>, <DisassemblerInsn "cmova" for 0x401029>, <DisassemblerInsn "mov" for 0x40102d>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "mov" for 0x401037>, <DisassemblerInsn "shr" for 0x40103a>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104d>, <DisassemblerInsn "and" for 0x40104f>, <DisassemblerInsn "mov" for 0x401052>, <DisassemblerInsn "shr" for 0x401059>, <DisassemblerInsn "mov" for 0x40105c>, <DisassemblerInsn "mov" for 0x401064>, <DisassemblerInsn "and" for 0x40106c>, <DisassemblerInsn "mov" for 0x401073>, <DisassemblerInsn "add" for 0x40107b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "mov" for 0x40219a>, <DisassemblerInsn "lea" for 0x40219f>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "call" for 0x4021a8>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004d5>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c05>, <DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "mov" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "mov" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "add" for 0x400c3a>, <DisassemblerInsn "mov" for 0x400c41>, <DisassemblerInsn "cmp" for 0x400c49>, <DisassemblerInsn "jge" for 0x400c4f>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400188>, <DisassemblerInsn "je" for 0x40018e>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "mov" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb4>, <DisassemblerInsn "imul" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbe>, <DisassemblerInsn "and" for 0x400cc1>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "shr" for 0x400cce>, <DisassemblerInsn "mov" for 0x400cd1>, <DisassemblerInsn "add" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cd6>, <DisassemblerInsn "shl" for 0x400cde>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "shl" for 0x400cee>, <DisassemblerInsn "mov" for 0x400cf1>, <DisassemblerInsn "add" for 0x400cf3>, <DisassemblerInsn "cmp" for 0x400cf6>, <DisassemblerInsn "ja" for 0x400cf9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "mov" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004ea>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004f8>, <DisassemblerInsn "mov" for 0x400500>, <DisassemblerInsn "mov" for 0x400508>, <DisassemblerInsn "mov" for 0x40050f>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051e>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053d>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "movzx" for 0x40054d>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "and" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "and" for 0x400563>, <DisassemblerInsn "cmp" for 0x400568>, <DisassemblerInsn "je" for 0x40056b>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b3a>, <DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b45>, <DisassemblerInsn "movzx" for 0x400b4d>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "movzx" for 0x400b57>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b62>, <DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "movzx" for 0x400b6e>, <DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "mov" for 0x400b7f>, <DisassemblerInsn "add" for 0x400b86>, <DisassemblerInsn "cmp" for 0x400b8a>, <DisassemblerInsn "jb" for 0x400b8e>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "lea" for 0x400ade>, <DisassemblerInsn "mov" for 0x400ae5>, <DisassemblerInsn "call" for 0x400ae7>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "and" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d1>, <DisassemblerInsn "add" for 0x4019d8>, <DisassemblerInsn "mov" for 0x4019db>, <DisassemblerInsn "cmp" for 0x4019e2>, <DisassemblerInsn "cmova" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019ee>, <DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "mov" for 0x4019fa>, <DisassemblerInsn "shl" for 0x4019fd>, <DisassemblerInsn "mov" for 0x401a01>, <DisassemblerInsn "add" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a0c>, <DisassemblerInsn "mov" for 0x401a14>, <DisassemblerInsn "add" for 0x401a17>, <DisassemblerInsn "mov" for 0x401a1b>, <DisassemblerInsn "cmp" for 0x401a23>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "mov" for 0x401a30>, <DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "jne" for 0x401a3e>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b7>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "add" for 0x4009c2>, <DisassemblerInsn "mov" for 0x4009c6>, <DisassemblerInsn "add" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d4>, <DisassemblerInsn "xor" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009de>, <DisassemblerInsn "jmp" for 0x4009e5>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "imul" for 0x4003d6>, <DisassemblerInsn "movsxd" for 0x4003dd>, <DisassemblerInsn "call" for 0x4003e0>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c7b>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "mov" for 0x400c85>, <DisassemblerInsn "mov" for 0x400c8d>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "mov" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb4>, <DisassemblerInsn "imul" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbe>, <DisassemblerInsn "and" for 0x400cc1>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "shr" for 0x400cce>, <DisassemblerInsn "mov" for 0x400cd1>, <DisassemblerInsn "add" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cd6>, <DisassemblerInsn "shl" for 0x400cde>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "shl" for 0x400cee>, <DisassemblerInsn "mov" for 0x400cf1>, <DisassemblerInsn "add" for 0x400cf3>, <DisassemblerInsn "cmp" for 0x400cf6>, <DisassemblerInsn "ja" for 0x400cf9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x400ab3>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x718]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x720], rcx>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<je~~0x402209>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r15>', '<push~~r14>', '<push~~r13>', '<push~~r12>', '<push~~rbx>', '<sub~~rsp, 0x808>', '<mov~~qword ptr [rsp + 0x798], rdi>', '<mov~~qword ptr [rsp + 0x7a0], rsi>', '<mov~~qword ptr [rsp + 0x7a8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x7b0], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x7bc], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x7c0], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7c8], rcx>', '<mov~~qword ptr [rsp + 0x7d0], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x7d8], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x7e7], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x4000c4>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x684]>', '<mov~~rdx, qword ptr [rsp + 0x6f8]>', '<mov~~rax, qword ptr [rsp + 0x648]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp], rdi>', '<call~~0x500010>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x244>', '<mov~~qword ptr [rsp + 0x628], rcx>', '<cmp~~dword ptr [rax + 0x244], 0>', '<jle~~0x4021bb>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402209>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x750]>', '<mov~~rax, qword ptr [rsp + 0x758]>', '<mov~~qword ptr [rsp + 0x730], rax>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x728]>', '<mov~~rdx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x5d0], rax>', '<cmp~~rax, rcx>', '<ja~~0x402192>']}, {'block_Idx': 126, 'blockInsts': ['<jmp~~0x4021bb>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x728], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rsp + 0x768]>', '<mov~~rax, qword ptr [rsp + 0x778]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x160]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<mov~~r8d, dword ptr [rsp + 0x5cc]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rsp + 0x104], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x108], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x110], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~dword ptr [rsp + 0x13c], edx>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~edx, dword ptr [rsp + 0x13c]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~qword ptr [rsp + 0xe0], rsi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jle~~0x402115>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7a8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402209>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x640]>', '<mov~~esi, dword ptr [rsp + 0x684]>', '<mov~~r9, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x650]>', '<mov~~edx, dword ptr [rsp + 0x65c]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x6b4], esi>', '<mov~~dword ptr [rsp + 0x6dc], edx>', '<mov~~qword ptr [rsp + 0x6e0], rcx>', '<mov~~qword ptr [rsp + 0x6e8], rax>', '<jne~~0x400508>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c8]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5ba]>', '<mov~~ecx, dword ptr [rsp + 0x594]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x590], ecx>', '<cmp~~ax, 0>', '<je~~0x400e8e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rax, qword ptr [rsp + 0x7a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7b0]>', '<mov~~rcx, qword ptr [rsp + 0x7d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x768], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x774], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x778], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x780], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400190>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<call~~0x500048>']}, {'block_Idx': 88, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402209>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5bc]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x710]>', '<mov~~rsi, qword ptr [rsp + 0x708]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x6f4], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4004da>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x5c6]>', '<mov~~rsi, qword ptr [rsp + 0x5a0]>', '<mov~~rax, qword ptr [rsp + 0x7c8]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x510], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x518], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x51c], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x520], eax>', '<je~~0x401a44>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402209>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x520]>', '<mov~~dword ptr [rsp + 0x150], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x164], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x158], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x5cc]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x160], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x402192>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x766]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~qword ptr [rsp + 0x758], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x750]>', '<mov~~rax, qword ptr [rsp + 0x758]>', '<mov~~qword ptr [rsp + 0x730], rax>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x400314>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402209>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x5cc]>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1757]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x766], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x400314>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x728]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x720]>', '<mov~~qword ptr [rsp + 0x6f8], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x700], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x708], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x710], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009e7>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x58c]>', '<mov~~rdi, qword ptr [rsp + 0x580]>', '<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~rsi, qword ptr [rsp + 0x570]>', '<mov~~eax, dword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x5d0]>', '<mov~~qword ptr [rsp + 0x548], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x524], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x528], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x5d0]>', '<mov~~dword ptr [rsp + 0x52c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x530], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x534], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x538], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x53c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x540], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x544], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x548]>', '<mov~~dword ptr [rsp + 0x554], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x558], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x55c], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x560], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x564], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x580], rcx>', '<mov~~dword ptr [rsp + 0x58c], eax>', '<jne~~0x400d61>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x790], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x7e7]>', '<test~~al, 1>', '<jne~~0x400383>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44c], r10d>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rsp + rdi*4 + 0x7f0]>', '<mov~~r9b, dil>', '<mov~~rdi, rsi>', '<shl~~rdi, 4>', '<mov~~qword ptr [rsp + 0x450], rdi>', '<add~~rdi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x458], rdi>', '<add~~rdi, 2>', '<mov~~qword ptr [rsp + 0x460], rdi>', '<mov~~byte ptr [rdi], r9b>', '<mov~~edi, r10d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x468], edi>', '<mov~~edi, edi>', '<mov~~r9d, dword ptr [rcx + rdi]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x46c], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~dword ptr [rsp + 0x470], r9d>', '<and~~r9d, 3>', '<mov~~dword ptr [rsp + 0x474], r9d>', '<add~~r10d, 2>', '<mov~~dword ptr [rsp + 0x478], r10d>', '<cmp~~eax, r10d>', '<mov~~edi, eax>', '<cmova~~edi, r10d>', '<mov~~dword ptr [rsp + 0x47c], edi>', '<mov~~r9d, r9d>', '<mov~~r9d, dword ptr [rsp + r9*4 + 0x7f0]>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x480], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x488], rsi>', '<add~~rsi, 1>', '<mov~~qword ptr [rsp + 0x490], rsi>', '<mov~~byte ptr [rsi], r9b>', '<mov~~esi, edi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x498], esi>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rcx + rsi]>', '<mov~~ecx, edi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x49c], ecx>', '<shr~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~dword ptr [rsp + 0x4a8], esi>', '<and~~esi, 3>', '<mov~~dword ptr [rsp + 0x4ac], esi>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x4b0], edi>', '<cmp~~eax, edi>', '<cmova~~eax, edi>', '<mov~~dword ptr [rsp + 0x4b4], eax>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x7f0]>', '<mov~~dil, sil>', '<mov~~rsi, rcx>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x4b8], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x4c0], rsi>', '<mov~~byte ptr [rsi], dil>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x50c], ecx>', '<mov~~dword ptr [rsp + 0x520], eax>', '<jne~~0x400f84>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400314>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<cmp~~eax, 3>', '<jle~~0x4021bb>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x748]>', '<mov~~rcx, qword ptr [rsp + 0x738]>', '<mov~~rax, qword ptr [rsp + 0x730]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x740]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x40025c>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402209>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x6d8]>', '<mov~~ecx, dword ptr [rsp + 0x6d4]>', '<mov~~rsi, qword ptr [rsp + 0x6c0]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x6a0], rsi>', '<mov~~dword ptr [rsp + 0x6a8], edx>', '<mov~~dword ptr [rsp + 0x6ac], ecx>', '<mov~~dword ptr [rsp + 0x6b0], eax>', '<mov~~rax, qword ptr [rsp + 0x7c8]>', '<mov~~rdx, qword ptr [rsp + 0x6c0]>', '<mov~~rsi, qword ptr [rsp + 0x6a0]>', '<mov~~ecx, dword ptr [rsp + 0x6a8]>', '<mov~~edi, dword ptr [rsp + 0x6ac]>', '<mov~~r8d, dword ptr [rsp + 0x6b0]>', '<mov~~dword ptr [rsp + 0x684], r8d>', '<mov~~dword ptr [rsp + 0x688], edi>', '<mov~~dword ptr [rsp + 0x68c], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x690], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x698], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x4021bb>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5c8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x5a8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c96>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x5d8], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400aff>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5bc]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x5b0], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c28>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x630]>', '<mov~~rcx, qword ptr [rsp + 0x648]>', '<mov~~eax, dword ptr [rsp + 0x638]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x650], rcx>', '<mov~~dword ptr [rsp + 0x65c], eax>', '<mov~~rcx, qword ptr [rsp + 0x640]>', '<mov~~esi, dword ptr [rsp + 0x684]>', '<mov~~r9, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x650]>', '<mov~~edx, dword ptr [rsp + 0x65c]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x6b4], esi>', '<mov~~dword ptr [rsp + 0x6dc], edx>', '<mov~~qword ptr [rsp + 0x6e0], rcx>', '<mov~~qword ptr [rsp + 0x6e8], rax>', '<jne~~0x400508>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c8]>', '<mov~~rdx, qword ptr [rsp + 0x6c0]>', '<mov~~rsi, qword ptr [rsp + 0x6a0]>', '<mov~~ecx, dword ptr [rsp + 0x6a8]>', '<mov~~edi, dword ptr [rsp + 0x6ac]>', '<mov~~r8d, dword ptr [rsp + 0x6b0]>', '<mov~~dword ptr [rsp + 0x684], r8d>', '<mov~~dword ptr [rsp + 0x688], edi>', '<mov~~dword ptr [rsp + 0x68c], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x690], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x698], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400980>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x18ad]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5ba]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x578], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x580], rcx>', '<mov~~dword ptr [rsp + 0x58c], eax>', '<mov~~r10d, dword ptr [rsp + 0x58c]>', '<mov~~rdi, qword ptr [rsp + 0x580]>', '<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~rsi, qword ptr [rsp + 0x570]>', '<mov~~eax, dword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x5d0]>', '<mov~~qword ptr [rsp + 0x548], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x524], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x528], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x5d0]>', '<mov~~dword ptr [rsp + 0x52c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x530], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x534], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x538], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x53c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x540], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x544], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x548]>', '<mov~~dword ptr [rsp + 0x554], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x558], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x55c], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x560], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x564], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x568], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x580], rcx>', '<mov~~dword ptr [rsp + 0x58c], eax>', '<jne~~0x400d61>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x402192>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x219e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402209>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x718], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x720], rax>', '<jne~~0x400411>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5c6]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<lea~~rdx, [rsp + 0x7f0]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<mov~~dword ptr [rsp + 0x50c], eax>', '<mov~~r14d, dword ptr [rsp + 0x50c]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~r8, qword ptr [rsp + 0x4d0]>', '<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rsp + 0x4f8]>', '<mov~~r9, qword ptr [rsp + 0x4f0]>', '<mov~~r10, qword ptr [rsp + 0x4e8]>', '<mov~~r11, qword ptr [rsp + 0x4e0]>', '<mov~~qword ptr [rsp + 0x4a0], rsi>', '<mov~~ebx, r14d>', '<shr~~ebx, 3>', '<mov~~dword ptr [rsp + 0x168], ebx>', '<mov~~ebx, ebx>', '<mov~~ebx, dword ptr [rcx + rbx]>', '<mov~~ecx, r14d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<shr~~ebx, cl>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~dword ptr [rsp + 0x170], ebx>', '<and~~ebx, 0xff>', '<mov~~dword ptr [rsp + 0x174], ebx>', '<add~~r14d, 8>', '<mov~~dword ptr [rsp + 0x178], r14d>', '<cmp~~eax, r14d>', '<mov~~ebp, eax>', '<cmova~~ebp, r14d>', '<mov~~dword ptr [rsp + 0x17c], ebp>', '<mov~~dword ptr [r11], ebx>', '<mov~~r11d, ebp>', '<shr~~r11d, 3>', '<mov~~dword ptr [rsp + 0x180], r11d>', '<mov~~r11d, r11d>', '<mov~~r11d, dword ptr [rcx + r11]>', '<mov~~ecx, ebp>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x184], ecx>', '<shr~~r11d, cl>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~dword ptr [rsp + 0x188], r11d>', '<and~~r11d, 0xff>', '<mov~~dword ptr [rsp + 0x18c], r11d>', '<add~~ebp, 8>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x148]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x400980>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5bc]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x5b0]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5c8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x5a8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c96>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x780]>', '<mov~~ecx, dword ptr [rsp + 0x774]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001e9>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~edx, dword ptr [rsp + 0x5c8]>', '<mov~~esi, dword ptr [rsp + 0x5c0]>', '<mov~~rax, qword ptr [rsp + 0x5d0]>', '<mov~~edi, dword ptr [rsp + 0x5bc]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x594], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x598], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x402192>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6f8]>', '<mov~~rcx, qword ptr [rsp + 0x710]>', '<mov~~edx, dword ptr [rsp + 0x6f4]>', '<mov~~dword ptr [rsp + 0x6dc], edx>', '<mov~~qword ptr [rsp + 0x6e0], rcx>', '<mov~~qword ptr [rsp + 0x6e8], rax>', '<mov~~ecx, dword ptr [rsp + 0x6b4]>', '<mov~~edx, dword ptr [rsp + 0x6dc]>', '<mov~~rax, qword ptr [rsp + 0x6e0]>', '<mov~~rsi, qword ptr [rsp + 0x6e8]>', '<mov~~qword ptr [rsp + 0x6b8], rsi>', '<mov~~qword ptr [rsp + 0x6c0], rax>', '<mov~~dword ptr [rsp + 0x6c8], edx>', '<mov~~dword ptr [rsp + 0x6cc], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x6d3], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x6d4], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x6d8], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006a7>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x728]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x5ba], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x5bc], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x5c0], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x5c6], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x5c8], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x5cc], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400bba>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x17da]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4a8], esi>', '<and~~esi, 3>', '<mov~~dword ptr [rsp + 0x4ac], esi>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x4b0], edi>', '<cmp~~eax, edi>', '<cmova~~eax, edi>', '<mov~~dword ptr [rsp + 0x4b4], eax>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x7f0]>', '<mov~~dil, sil>', '<mov~~rsi, rcx>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x4b8], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x4c0], rsi>', '<mov~~byte ptr [rsi], dil>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x500], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x50c], ecx>', '<mov~~dword ptr [rsp + 0x520], eax>', '<jne~~0x400f84>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rsp + 0x7a0]>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x608], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x610], rcx>', '<add~~rax, 0x240>', '<mov~~qword ptr [rsp + 0x618], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x624], eax>', '<jmp~~0x400a13>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~eax, dword ptr [rcx + 0x240]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5c8]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x5a8]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~edx, dword ptr [rsp + 0x5c8]>', '<mov~~esi, dword ptr [rsp + 0x5c0]>', '<mov~~rax, qword ptr [rsp + 0x5d0]>', '<mov~~edi, dword ptr [rsp + 0x5bc]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x594], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x598], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x402192>']}], 'cfg_edge_info': [(15, 21), (32, 37), (73, 81), (87, 80), (8, 9), (51, 71), (9, 17), (11, 14), (47, 55), (126, 55), (22, 19), (29, 34), (48, 47), (17, 23), (2, 4), (43, 14), (81, 80), (22, 3), (76, 47), (117, 85), (63, 38), (93, 47), (25, 29), (90, 94), (44, 51), (3, 10), (21, 25), (0, 2), (40, 47), (61, 79), (1, 3), (10, 15), (27, 31), (28, 39), (16, 19), (39, 14), (73, 80), (68, 47), (4, 11), (5, 9), (80, 85), (124, 85), (16, 3), (37, 44), (62, 73), (85, 38), (88, 92), (54, 14), (52, 62), (38, 54), (90, 55), (34, 41), (19, 22), (79, 73), (47, 56), (29, 35), (96, 55), (88, 14), (71, 62), (74, 88), (25, 28), (12, 3), (21, 24), (55, 74), (35, 50), (23, 30), (50, 14), (10, 14), (85, 90), (45, 63), (32, 38), (27, 32), (24, 27), (12, 16), (52, 61), (19, 3), (62, 38), (80, 86), (30, 12), (8, 12), (2, 5), (34, 40), (77, 47), (37, 45), (79, 38), (39, 29), (0, 1), (30, 14), (31, 43), (71, 61), (44, 52), (5, 8)], 'cdg_edge_info': [(32, 37), (85, 55), (8, 9), (29, 50), (2, 11), (52, 79), (27, 43), (47, 55), (37, 63), (22, 19), (29, 34), (2, 4), (5, 30), (32, 14), (71, 79), (62, 85), (5, 23), (79, 85), (62, 14), (21, 25), (0, 2), (10, 15), (27, 31), (79, 14), (16, 19), (39, 14), (62, 80), (85, 54), (37, 14), (5, 9), (21, 27), (79, 80), (37, 44), (62, 73), (85, 38), (88, 92), (21, 29), (52, 62), (19, 22), (79, 73), (29, 35), (88, 14), (71, 62), (10, 21), (85, 88), (25, 28), (21, 24), (32, 54), (47, 88), (8, 17), (10, 14), (44, 71), (85, 90), (32, 38), (27, 14), (8, 10), (30, 10), (85, 74), (62, 54), (27, 32), (34, 47), (29, 14), (12, 16), (47, 74), (8, 3), (30, 3), (79, 54), (62, 38), (8, 12), (30, 12), (2, 5), (2, 14), (8, 30), (37, 45), (37, 54), (79, 38), (39, 29), (0, 1), (30, 14), (85, 14), (0, 10), (8, 23), (37, 38), (25, 39), (44, 52), (5, 8), (0, 3), (5, 17)], 'ddg_edge_info': [(15, 21), (21, 71), (15, 85), (90, 88), (37, 79), (0, 5), (9, 17), (0, 23), (32, 85), (16, 22), (15, 32), (25, 34), (0, 44), (22, 19), (29, 34), (3, 15), (12, 27), (17, 23), (0, 71), (21, 39), (5, 85), (0, 16), (0, 80), (15, 71), (15, 80), (15, 25), (71, 79), (35, 92), (22, 3), (39, 92), (0, 55), (0, 9), (5, 23), (15, 55), (15, 73), (25, 29), (28, 55), (25, 47), (3, 10), (23, 22), (54, 92), (0, 2), (37, 85), (3, 92), (3, 37), (28, 39), (16, 19), (0, 32), (12, 15), (4, 11), (31, 92), (80, 85), (79, 80), (0, 25), (37, 44), (88, 92), (0, 34), (0, 43), (37, 71), (15, 34), (37, 80), (38, 54), (19, 22), (50, 92), (79, 73), (28, 34), (0, 27), (10, 92), (0, 45), (15, 27), (37, 73), (23, 19), (15, 45), (23, 92), (74, 88), (0, 29), (25, 28), (0, 38), (12, 3), (23, 3), (0, 47), (23, 12), (15, 29), (21, 79), (15, 38), (55, 74), (21, 88), (35, 50), (15, 47), (23, 30), (0, 4), (47, 88), (44, 71), (5, 27), (28, 29), (0, 22), (85, 90), (0, 31), (28, 47), (5, 45), (15, 31), (4, 92), (45, 38), (0, 15), (2, 12), (3, 32), (0, 79), (30, 92), (74, 92), (15, 79), (12, 16), (23, 16), (19, 3), (0, 8), (0, 17), (32, 79), (37, 45), (0, 35), (15, 90), (38, 92), (15, 35), (39, 29), (15, 44), (34, 88), (5, 15), (31, 43), (0, 74), (0, 19), (2, 16), (28, 35), (0, 28), (11, 92), (0, 92), (15, 28), (15, 37), (25, 39), (73, 88), (5, 8), (0, 3), (3, 29), (0, 12), (28, 92), (0, 21), (0, 85), (43, 92)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x768(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 53, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x774(%rsp)                # 4-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 56, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 57, 'instruction': 'movq\t%rsi, 0x778(%rsp)                # 8-byte Spill'}, {'instIndex': 58, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 61, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 62, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 65, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 68, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 69, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 71, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 72, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 76, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 77, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 78, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 79, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 80, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 82, 'instruction': 'jl\t.LBB1_72'}, {'instIndex': 85, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 86, 'instruction': 'movw\t%cx, 0x766(%rsp)                 # 2-byte Spill'}, {'instIndex': 92, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 142, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 143, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 144, 'instruction': 'jl\t.LBB1_72'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1127 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 44, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 45, 'instruction': 'movq\t%rsi, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 47, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 48, 'instruction': 'movl\t%edx, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x4c8(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x4d0(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 62, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 63, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 65, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 66, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 70, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 71, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 72, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 73, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 75, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 76, 'instruction': 'jl\t.LBB1_79'}, {'instIndex': 79, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 80, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 86, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 134, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 135, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 138, 'instruction': 'jl\t.LBB1_79'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.s---tgv_decode_frame---after
function id: 1
function flag: True
There are 1127 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 44, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 45, 'instruction': 'movq\t%rsi, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 47, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 48, 'instruction': 'movl\t%edx, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x4c8(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x4d0(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 62, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 63, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 65, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 66, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 70, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 71, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 72, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 73, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 75, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 76, 'instruction': 'jl\t.LBB1_79'}, {'instIndex': 79, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 80, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 86, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 134, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 135, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 138, 'instruction': 'jl\t.LBB1_79'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.o---after
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 119 nodes and 214 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1127 instructions in binary file.
[4194558, 4194663, 4194686, 4194706, 4194723, 4194759, 4194775, 4194821]
[4195070, 4195112]
The execution time of patched subCFG information extraction via angr: 0:00:00.855763
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "add" for 0x400186>, <DisassemblerInsn "call" for 0x40018d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "add" for 0x401846>, <DisassemblerInsn "ret" for 0x40184d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "add" for 0x40019a>, <DisassemblerInsn "call" for 0x40019e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002aa>, <DisassemblerInsn "movzx" for 0x4002b2>, <DisassemblerInsn "shl" for 0x4002b6>, <DisassemblerInsn "movzx" for 0x4002ba>, <DisassemblerInsn "shl" for 0x4002be>, <DisassemblerInsn "or" for 0x4002c1>, <DisassemblerInsn "movzx" for 0x4002c4>, <DisassemblerInsn "or" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "add" for 0x4002d2>, <DisassemblerInsn "add" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "jne" for 0x4002f8>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "cmp" for 0x400176>, <DisassemblerInsn "je" for 0x40017c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "call" for 0x4001c2>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "jl" for 0x4001d1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "movzx" for 0x400116>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400131>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "add" for 0x40013f>, <DisassemblerInsn "mov" for 0x400146>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "mov" for 0x400154>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "jne" for 0x400165>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "cmp" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "je" for 0x4001ff>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000cd>, <DisassemblerInsn "jge" for 0x4000d0>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "call" for 0x400323>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "movzx" for 0x400215>, <DisassemblerInsn "add" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "sub" for 0x400222>, <DisassemblerInsn "cmovb" for 0x400224>, <DisassemblerInsn "add" for 0x400227>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022c>, <DisassemblerInsn "xor" for 0x400234>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x40027d>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jae" for 0x400288>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x510]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4dc]>', '<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x510]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jne~~0x400246>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~ecx, dword ptr [rsp + 0x4c4]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001d7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jl~~0x40183f>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x4b8], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x4c4], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x4c8], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x40017e>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x538], rax>', '<je~~0x4002fe>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50c]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x4000fe>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~qword ptr [rsp + 0x478], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jae~~0x4002fe>']}], 'cfg_edge_info': [(16, 20), (9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (20, 10), (8, 9), (15, 19), (15, 3), (8, 12), (5, 9), (20, 12), (2, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002aa>, <DisassemblerInsn "movzx" for 0x4002b2>, <DisassemblerInsn "shl" for 0x4002b6>, <DisassemblerInsn "movzx" for 0x4002ba>, <DisassemblerInsn "shl" for 0x4002be>, <DisassemblerInsn "or" for 0x4002c1>, <DisassemblerInsn "movzx" for 0x4002c4>, <DisassemblerInsn "or" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "add" for 0x4002d2>, <DisassemblerInsn "add" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "jne" for 0x4002f8>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "movzx" for 0x400215>, <DisassemblerInsn "add" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "sub" for 0x400222>, <DisassemblerInsn "cmovb" for 0x400224>, <DisassemblerInsn "add" for 0x400227>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022c>, <DisassemblerInsn "xor" for 0x400234>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x40027d>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jae" for 0x400288>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ad>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "add" for 0x40034c>, <DisassemblerInsn "mov" for 0x400353>, <DisassemblerInsn "call" for 0x400358>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "cmp" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "je" for 0x4001ff>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "add" for 0x401846>, <DisassemblerInsn "ret" for 0x40184d>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x40027d>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jae" for 0x400288>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "call" for 0x400323>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400328>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "jl" for 0x400332>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jne~~0x400246>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jae~~0x4002fe>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002fe>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x538], rax>', '<je~~0x4002fe>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4dc]>', '<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jae~~0x4002fe>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~qword ptr [rsp + 0x478], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jl~~0x40183f>']}], 'cfg_edge_info': [(6, 11), (12, 3), (24, 3), (19, 3), (6, 10), (15, 3), (3, 6), (1, 3)]}]}
{'tgv_decode_frame': [4195070, 4195112]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_after/Os/eatgv.o---after
The extraction of function: tgv_decode_frame
[4195070, 4195112]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 122 nodes and 202 edges in CFGEmulated.
It has 122 nodes and 213 edges in CDG.
It has 5575 nodes and 7080 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195070, 4195112]
{4197504, 4194821, 4200453, 4194954, 4195070, 4194706, 4197394, 4200471, 4198680, 4198811, 4197021, 4197279, 4194723, 4197156, 4200483, 4197284, 4194344, 4195112, 4194477, 4194482, 4195250, 4195128, 4197051, 4200511, 4200390, 4194759, 4194886, 4195279, 4196817, 4194514, 4197078, 4194775, 4195165, 4197469, 4200417, 4194663, 4195176, 4197097, 4197609, 4196714, 4196844, 4195181, 4194541, 4197359, 4200431, 4196976, 4194558, 4198008, 4197242, 4195323, 4195452, 4194686}
[32, 9, 5, 96, 45, 44, 4, 93, 39, 11, 41, 56, 16, 30, 2, 28, 76, 3, 61, 48, 25, 54, 34, 14, 71, 80, 118, 74, 23, 8, 68, 88, 86, 87, 40, 10, 43, 62, 17, 63, 31, 85, 52, 97, 79, 73, 21, 1, 29, 12, 95, 37, 0, 50, 35, 47, 77, 38, 22, 15, 27, 24, 94, 19, 81, 55, 90, 51]
The execution time of patched slicing information extraction via angr: 0:00:22.285952
{'tgv_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400af1>, <DisassemblerInsn "mov" for 0x400af9>, <DisassemblerInsn "mov" for 0x400b01>, <DisassemblerInsn "mov" for 0x400b08>, <DisassemblerInsn "add" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "cmp" for 0x400b1b>, <DisassemblerInsn "ja" for 0x400b1e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "add" for 0x400186>, <DisassemblerInsn "call" for 0x40018d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "movzx" for 0x400116>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400131>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "add" for 0x40013f>, <DisassemblerInsn "mov" for 0x400146>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "mov" for 0x400154>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "jne" for 0x400165>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010f3>, <DisassemblerInsn "cmp" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "jne" for 0x401112>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b7a>, <DisassemblerInsn "mov" for 0x400b81>, <DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8c>, <DisassemblerInsn "lea" for 0x400b91>, <DisassemblerInsn "mov" for 0x400b98>, <DisassemblerInsn "call" for 0x400b9a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400bac>, <DisassemblerInsn "mov" for 0x400bb3>, <DisassemblerInsn "add" for 0x400bb6>, <DisassemblerInsn "mov" for 0x400bbd>, <DisassemblerInsn "cmp" for 0x400bc5>, <DisassemblerInsn "jge" for 0x400bcb>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "lea" for 0x4000df>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000e8>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401823>, <DisassemblerInsn "mov" for 0x40182a>, <DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401838>, <DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "add" for 0x401846>, <DisassemblerInsn "ret" for 0x40184d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003da>, <DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "cmp" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003ee>, <DisassemblerInsn "je" for 0x4003f5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "jmp" for 0x4000f9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "mov" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004ea>, <DisassemblerInsn "mov" for 0x4004f2>, <DisassemblerInsn "mov" for 0x4004f9>, <DisassemblerInsn "mov" for 0x400500>, <DisassemblerInsn "mov" for 0x400508>, <DisassemblerInsn "mov" for 0x400510>, <DisassemblerInsn "mov" for 0x400518>, <DisassemblerInsn "mov" for 0x400520>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "mov" for 0x40052e>, <DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "movzx" for 0x400537>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "and" for 0x400543>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "and" for 0x40054d>, <DisassemblerInsn "cmp" for 0x400552>, <DisassemblerInsn "je" for 0x400555>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400991>, <DisassemblerInsn "mov" for 0x400999>, <DisassemblerInsn "mov" for 0x4009a1>, <DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "add" for 0x4009ac>, <DisassemblerInsn "mov" for 0x4009b0>, <DisassemblerInsn "add" for 0x4009b8>, <DisassemblerInsn "mov" for 0x4009be>, <DisassemblerInsn "xor" for 0x4009c6>, <DisassemblerInsn "mov" for 0x4009c8>, <DisassemblerInsn "jmp" for 0x4009cf>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "movzx" for 0x400215>, <DisassemblerInsn "add" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "sub" for 0x400222>, <DisassemblerInsn "cmovb" for 0x400224>, <DisassemblerInsn "add" for 0x400227>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022c>, <DisassemblerInsn "xor" for 0x400234>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x40027d>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jae" for 0x400288>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "jl" for 0x4001d1>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000cd>, <DisassemblerInsn "jge" for 0x4000d0>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "imul" for 0x4003c0>, <DisassemblerInsn "movsxd" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400909>, <DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "mov" for 0x400920>, <DisassemblerInsn "mov" for 0x400928>, <DisassemblerInsn "test" for 0x40092f>, <DisassemblerInsn "setg" for 0x400931>, <DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "sub" for 0x400938>, <DisassemblerInsn "setb" for 0x40093b>, <DisassemblerInsn "and" for 0x40093f>, <DisassemblerInsn "test" for 0x400942>, <DisassemblerInsn "mov" for 0x400946>, <DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400954>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "jne" for 0x400964>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "call" for 0x400323>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "shl" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c54>, <DisassemblerInsn "mov" for 0x400c56>, <DisassemblerInsn "call" for 0x400c58>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400691>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "shl" for 0x4006a9>, <DisassemblerInsn "and" for 0x4006ac>, <DisassemblerInsn "movzx" for 0x4006b1>, <DisassemblerInsn "or" for 0x4006b5>, <DisassemblerInsn "add" for 0x4006b8>, <DisassemblerInsn "shr" for 0x4006ba>, <DisassemblerInsn "and" for 0x4006bd>, <DisassemblerInsn "add" for 0x4006c0>, <DisassemblerInsn "mov" for 0x4006c3>, <DisassemblerInsn "mov" for 0x4006c8>, <DisassemblerInsn "mov" for 0x4006d0>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006de>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f5>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "add" for 0x400729>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "sub" for 0x40073e>, <DisassemblerInsn "cmp" for 0x400741>, <DisassemblerInsn "jl" for 0x400744>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036d>, <DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "add" for 0x40038e>, <DisassemblerInsn "mov" for 0x400395>, <DisassemblerInsn "mov" for 0x40039d>, <DisassemblerInsn "cmp" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003a8>, <DisassemblerInsn "jne" for 0x4003b0>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e1>, <DisassemblerInsn "mov" for 0x4017e6>, <DisassemblerInsn "jmp" for 0x4017ed>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x40048c>, <DisassemblerInsn "movzx" for 0x400494>, <DisassemblerInsn "shl" for 0x400497>, <DisassemblerInsn "movzx" for 0x40049a>, <DisassemblerInsn "shl" for 0x40049e>, <DisassemblerInsn "or" for 0x4004a1>, <DisassemblerInsn "movzx" for 0x4004a3>, <DisassemblerInsn "or" for 0x4004a7>, <DisassemblerInsn "mov" for 0x4004a9>, <DisassemblerInsn "setne" for 0x4004b0>, <DisassemblerInsn "sub" for 0x4004b3>, <DisassemblerInsn "setb" for 0x4004b6>, <DisassemblerInsn "and" for 0x4004b9>, <DisassemblerInsn "test" for 0x4004bb>, <DisassemblerInsn "jne" for 0x4004bd>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "add" for 0x401846>, <DisassemblerInsn "ret" for 0x40184d>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "mov" for 0x400c01>, <DisassemblerInsn "mov" for 0x400c09>, <DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "mov" for 0x400c12>, <DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "add" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c2b>, <DisassemblerInsn "cmp" for 0x400c33>, <DisassemblerInsn "jge" for 0x400c39>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e78>, <DisassemblerInsn "mov" for 0x400e80>, <DisassemblerInsn "mov" for 0x400e88>, <DisassemblerInsn "sub" for 0x400e90>, <DisassemblerInsn "mov" for 0x400e93>, <DisassemblerInsn "shl" for 0x400e95>, <DisassemblerInsn "xor" for 0x400e98>, <DisassemblerInsn "cmp" for 0x400e9a>, <DisassemblerInsn "cmovb" for 0x400ea0>, <DisassemblerInsn "mov" for 0x400ea4>, <DisassemblerInsn "xor" for 0x400eac>, <DisassemblerInsn "cmp" for 0x400eae>, <DisassemblerInsn "cmovb" for 0x400eb4>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "add" for 0x400ebe>, <DisassemblerInsn "mov" for 0x400ec1>, <DisassemblerInsn "xor" for 0x400ec8>, <DisassemblerInsn "cmp" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "je" for 0x400ed5>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400a98>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401805>, <DisassemblerInsn "mov" for 0x40180a>, <DisassemblerInsn "call" for 0x401812>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "call" for 0x4001c2>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "cmp" for 0x400176>, <DisassemblerInsn "je" for 0x40017c>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f5>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x40070b>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "add" for 0x400729>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "sub" for 0x40073e>, <DisassemblerInsn "cmp" for 0x400741>, <DisassemblerInsn "jl" for 0x400744>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401817>, <DisassemblerInsn "mov" for 0x40181a>, <DisassemblerInsn "jl" for 0x401821>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400edb>, <DisassemblerInsn "mov" for 0x400ee3>, <DisassemblerInsn "lea" for 0x400eeb>, <DisassemblerInsn "add" for 0x400ef3>, <DisassemblerInsn "mov" for 0x400efa>, <DisassemblerInsn "movzx" for 0x400f02>, <DisassemblerInsn "mov" for 0x400f05>, <DisassemblerInsn "xor" for 0x400f0d>, <DisassemblerInsn "mov" for 0x400f0f>, <DisassemblerInsn "xor" for 0x400f11>, <DisassemblerInsn "mov" for 0x400f13>, <DisassemblerInsn "mov" for 0x400f1b>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f31>, <DisassemblerInsn "xor" for 0x400f39>, <DisassemblerInsn "mov" for 0x400f3b>, <DisassemblerInsn "mov" for 0x400f43>, <DisassemblerInsn "mov" for 0x400f4a>, <DisassemblerInsn "mov" for 0x400f51>, <DisassemblerInsn "mov" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f60>, <DisassemblerInsn "mov" for 0x400f68>, <DisassemblerInsn "shr" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "mov" for 0x400f74>, <DisassemblerInsn "mov" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "and" for 0x400f7b>, <DisassemblerInsn "mov" for 0x400f7e>, <DisassemblerInsn "shr" for 0x400f85>, <DisassemblerInsn "mov" for 0x400f87>, <DisassemblerInsn "mov" for 0x400f8e>, <DisassemblerInsn "and" for 0x400f90>, <DisassemblerInsn "mov" for 0x400f96>, <DisassemblerInsn "add" for 0x400f9d>, <DisassemblerInsn "mov" for 0x400fa0>, <DisassemblerInsn "cmp" for 0x400fa7>, <DisassemblerInsn "cmova" for 0x400fa9>, <DisassemblerInsn "mov" for 0x400fac>, <DisassemblerInsn "mov" for 0x400fb3>, <DisassemblerInsn "add" for 0x400fba>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "xor" for 0x400fc6>, <DisassemblerInsn "cmp" for 0x400fc8>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd4>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdd>, <DisassemblerInsn "mov" for 0x400fe5>, <DisassemblerInsn "jne" for 0x400fec>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "mov" for 0x400d5b>, <DisassemblerInsn "mov" for 0x400d63>, <DisassemblerInsn "mov" for 0x400d6b>, <DisassemblerInsn "mov" for 0x400d72>, <DisassemblerInsn "mov" for 0x400d7a>, <DisassemblerInsn "mov" for 0x400d82>, <DisassemblerInsn "shr" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "mov" for 0x400d94>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "and" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "shr" for 0x400da5>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "mov" for 0x400db0>, <DisassemblerInsn "shl" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbc>, <DisassemblerInsn "sar" for 0x400dc4>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "add" for 0x400dd0>, <DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "cmp" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "cmova" for 0x400de2>, <DisassemblerInsn "mov" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dee>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "shr" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dff>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "and" for 0x400e07>, <DisassemblerInsn "mov" for 0x400e0a>, <DisassemblerInsn "shr" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e13>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "shl" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e25>, <DisassemblerInsn "sar" for 0x400e2c>, <DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "add" for 0x400e36>, <DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "cmp" for 0x400e42>, <DisassemblerInsn "cmova" for 0x400e45>, <DisassemblerInsn "mov" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "add" for 0x400e54>, <DisassemblerInsn "mov" for 0x400e58>, <DisassemblerInsn "cmp" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "jne" for 0x400e72>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004bf>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400328>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "jl" for 0x400332>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad6>, <DisassemblerInsn "mov" for 0x400add>, <DisassemblerInsn "jmp" for 0x400ae4>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c80>, <DisassemblerInsn "mov" for 0x400c88>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "imul" for 0x400ca5>, <DisassemblerInsn "add" for 0x400ca8>, <DisassemblerInsn "and" for 0x400cab>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "shr" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbd>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "shl" for 0x400cc8>, <DisassemblerInsn "mov" for 0x400ccb>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shl" for 0x400cd8>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "add" for 0x400cdd>, <DisassemblerInsn "cmp" for 0x400ce0>, <DisassemblerInsn "ja" for 0x400ce3>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "add" for 0x40019a>, <DisassemblerInsn "call" for 0x40019e>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b9f>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400abb>, <DisassemblerInsn "mov" for 0x400ac3>, <DisassemblerInsn "lea" for 0x400ac8>, <DisassemblerInsn "mov" for 0x400acf>, <DisassemblerInsn "call" for 0x400ad1>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401118>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "sub" for 0x401135>, <DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113e>, <DisassemblerInsn "mov" for 0x401141>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "mov" for 0x40114f>, <DisassemblerInsn "mov" for 0x401156>, <DisassemblerInsn "cdq" for 0x40115b>, <DisassemblerInsn "idiv" for 0x40115c>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x401167>, <DisassemblerInsn "imul" for 0x40116f>, <DisassemblerInsn "mov" for 0x401172>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "cdq" for 0x401184>, <DisassemblerInsn "idiv" for 0x401185>, <DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "imul" for 0x401190>, <DisassemblerInsn "cmp" for 0x401193>, <DisassemblerInsn "jl" for 0x401195>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c12>, <DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "add" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c2b>, <DisassemblerInsn "cmp" for 0x400c33>, <DisassemblerInsn "jge" for 0x400c39>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401749>, <DisassemblerInsn "mov" for 0x401751>, <DisassemblerInsn "mov" for 0x401759>, <DisassemblerInsn "mov" for 0x401760>, <DisassemblerInsn "mov" for 0x401764>, <DisassemblerInsn "add" for 0x401769>, <DisassemblerInsn "mov" for 0x40176d>, <DisassemblerInsn "mov" for 0x401772>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "cdq" for 0x40177d>, <DisassemblerInsn "idiv" for 0x40177e>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401782>, <DisassemblerInsn "movsxd" for 0x401787>, <DisassemblerInsn "cmp" for 0x40178a>, <DisassemblerInsn "jge" for 0x40178d>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6c>, <DisassemblerInsn "mov" for 0x400c6f>, <DisassemblerInsn "mov" for 0x400c77>, <DisassemblerInsn "mov" for 0x400c7e>, <DisassemblerInsn "mov" for 0x400c80>, <DisassemblerInsn "mov" for 0x400c88>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "mov" for 0x400c96>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "imul" for 0x400ca5>, <DisassemblerInsn "add" for 0x400ca8>, <DisassemblerInsn "and" for 0x400cab>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "shr" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cbb>, <DisassemblerInsn "add" for 0x400cbd>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "shl" for 0x400cc8>, <DisassemblerInsn "mov" for 0x400ccb>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shl" for 0x400cd8>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "add" for 0x400cdd>, <DisassemblerInsn "cmp" for 0x400ce0>, <DisassemblerInsn "ja" for 0x400ce3>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400cf1>, <DisassemblerInsn "or" for 0x400cf8>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "cmp" for 0x400d02>, <DisassemblerInsn "je" for 0x400d06>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "test" for 0x400364>, <DisassemblerInsn "jne" for 0x400366>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ad>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003fb>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x40040b>, <DisassemblerInsn "mov" for 0x400413>, <DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "mov" for 0x400423>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "mov" for 0x40042c>, <DisassemblerInsn "imul" for 0x400432>, <DisassemblerInsn "movsxd" for 0x400435>, <DisassemblerInsn "add" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "and" for 0x400446>, <DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "mov" for 0x40044f>, <DisassemblerInsn "cmp" for 0x400454>, <DisassemblerInsn "cmove" for 0x400458>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "add" for 0x400467>, <DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "cmp" for 0x400473>, <DisassemblerInsn "ja" for 0x400476>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "cmp" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "je" for 0x4001ff>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011c1>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "sub" for 0x4011d6>, <DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "shr" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e2>, <DisassemblerInsn "mov" for 0x4011ea>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "add" for 0x4011f5>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "mov" for 0x401204>, <DisassemblerInsn "add" for 0x401207>, <DisassemblerInsn "mov" for 0x40120e>, <DisassemblerInsn "add" for 0x401216>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "mov" for 0x401225>, <DisassemblerInsn "add" for 0x40122d>, <DisassemblerInsn "mov" for 0x401231>, <DisassemblerInsn "xor" for 0x401239>, <DisassemblerInsn "mov" for 0x40123b>, <DisassemblerInsn "mov" for 0x401243>, <DisassemblerInsn "mov" for 0x40124a>, <DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x401261>, <DisassemblerInsn "mov" for 0x401268>, <DisassemblerInsn "mov" for 0x401270>, <DisassemblerInsn "mov" for 0x401277>, <DisassemblerInsn "mov" for 0x40127e>, <DisassemblerInsn "mov" for 0x401286>, <DisassemblerInsn "mov" for 0x40128d>, <DisassemblerInsn "cmp" for 0x401295>, <DisassemblerInsn "mov" for 0x401298>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "jle" for 0x4012a7>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "movzx" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3a>, <DisassemblerInsn "movzx" for 0x400b41>, <DisassemblerInsn "mov" for 0x400b45>, <DisassemblerInsn "mov" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "movzx" for 0x400b58>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b62>, <DisassemblerInsn "movzx" for 0x400b66>, <DisassemblerInsn "mov" for 0x400b69>, <DisassemblerInsn "add" for 0x400b70>, <DisassemblerInsn "cmp" for 0x400b74>, <DisassemblerInsn "jb" for 0x400b78>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400028>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003f>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400061>, <DisassemblerInsn "movsxd" for 0x400069>, <DisassemblerInsn "mov" for 0x40006c>, <DisassemblerInsn "add" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x400082>, <DisassemblerInsn "add" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "cmp" for 0x400090>, <DisassemblerInsn "sete" for 0x400096>, <DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "test" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a3>, <DisassemblerInsn "jne" for 0x4000ab>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009f1>, <DisassemblerInsn "jmp" for 0x4009f8>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d1>, <DisassemblerInsn "mov" for 0x4009d9>, <DisassemblerInsn "lea" for 0x4009de>, <DisassemblerInsn "mov" for 0x4009e5>, <DisassemblerInsn "call" for 0x4009e7>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "add" for 0x400975>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "cmp" for 0x400984>, <DisassemblerInsn "jle" for 0x40098b>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "sub" for 0x400880>, <DisassemblerInsn "movsxd" for 0x400883>, <DisassemblerInsn "cmp" for 0x400886>, <DisassemblerInsn "jl" for 0x400889>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017c6>, <DisassemblerInsn "mov" for 0x4017ce>, <DisassemblerInsn "lea" for 0x4017d3>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "call" for 0x4017dc>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x40027d>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jae" for 0x400288>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "add" for 0x40034c>, <DisassemblerInsn "mov" for 0x400353>, <DisassemblerInsn "call" for 0x400358>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9d>, <DisassemblerInsn "mov" for 0x400aa5>, <DisassemblerInsn "add" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "cmp" for 0x400ab4>, <DisassemblerInsn "jne" for 0x400ab9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400368>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d8>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "shl" for 0x4008ef>, <DisassemblerInsn "sar" for 0x4008f3>, <DisassemblerInsn "add" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008fa>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400909>, <DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "mov" for 0x400920>, <DisassemblerInsn "mov" for 0x400928>, <DisassemblerInsn "test" for 0x40092f>, <DisassemblerInsn "setg" for 0x400931>, <DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "sub" for 0x400938>, <DisassemblerInsn "setb" for 0x40093b>, <DisassemblerInsn "and" for 0x40093f>, <DisassemblerInsn "test" for 0x400942>, <DisassemblerInsn "mov" for 0x400946>, <DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400954>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "jne" for 0x400964>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002aa>, <DisassemblerInsn "movzx" for 0x4002b2>, <DisassemblerInsn "shl" for 0x4002b6>, <DisassemblerInsn "movzx" for 0x4002ba>, <DisassemblerInsn "shl" for 0x4002be>, <DisassemblerInsn "or" for 0x4002c1>, <DisassemblerInsn "movzx" for 0x4002c4>, <DisassemblerInsn "or" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "add" for 0x4002d2>, <DisassemblerInsn "add" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "jne" for 0x4002f8>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d0c>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d1c>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "movzx" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d2e>, <DisassemblerInsn "xor" for 0x400d36>, <DisassemblerInsn "mov" for 0x400d38>, <DisassemblerInsn "xor" for 0x400d3a>, <DisassemblerInsn "mov" for 0x400d3c>, <DisassemblerInsn "mov" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "mov" for 0x400d5b>, <DisassemblerInsn "mov" for 0x400d63>, <DisassemblerInsn "mov" for 0x400d6b>, <DisassemblerInsn "mov" for 0x400d72>, <DisassemblerInsn "mov" for 0x400d7a>, <DisassemblerInsn "mov" for 0x400d82>, <DisassemblerInsn "shr" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "mov" for 0x400d94>, <DisassemblerInsn "mov" for 0x400d98>, <DisassemblerInsn "and" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "shr" for 0x400da5>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "mov" for 0x400db0>, <DisassemblerInsn "shl" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbc>, <DisassemblerInsn "sar" for 0x400dc4>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "add" for 0x400dd0>, <DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "cmp" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "cmova" for 0x400de2>, <DisassemblerInsn "mov" for 0x400de6>, <DisassemblerInsn "mov" for 0x400dee>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "shr" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dff>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "and" for 0x400e07>, <DisassemblerInsn "mov" for 0x400e0a>, <DisassemblerInsn "shr" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e13>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "shl" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e25>, <DisassemblerInsn "sar" for 0x400e2c>, <DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "add" for 0x400e36>, <DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "cmp" for 0x400e42>, <DisassemblerInsn "cmova" for 0x400e45>, <DisassemblerInsn "mov" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "add" for 0x400e54>, <DisassemblerInsn "mov" for 0x400e58>, <DisassemblerInsn "cmp" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "jne" for 0x400e72>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "add" for 0x4017f7>, <DisassemblerInsn "mov" for 0x4017fb>, <DisassemblerInsn "call" for 0x401800>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "cmp" for 0x4011a2>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bcd>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "mov" for 0x400bdc>, <DisassemblerInsn "shl" for 0x400be3>, <DisassemblerInsn "mov" for 0x400be6>, <DisassemblerInsn "mov" for 0x400be8>, <DisassemblerInsn "call" for 0x400bea>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x320], rax>', '<cmp~~rax, rcx>', '<ja~~0x4017c6>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x510]>', '<add~~rdi, 0x238>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x528]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x240>', '<mov~~qword ptr [rsp + 0x4b8], rsi>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x4c4], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x244>', '<mov~~qword ptr [rsp + 0x4c8], rsi>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x40017e>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x228]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x25c], ecx>', '<mov~~dword ptr [rsp + 0x270], eax>', '<jne~~0x400f22>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x31c]>', '<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xd8b]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x30c]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x300], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c12>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x17ce]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50c]>', '<mov~~rcx, qword ptr [rsp + 0x4f8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<mov~~eax, dword ptr [rsp + 0x4dc]>', '<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x470], rcx>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<je~~0x40183f>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jmp~~0x40183f>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x460]>', '<mov~~edx, dword ptr [rsp + 0x444]>', '<mov~~dword ptr [rsp + 0x42c], edx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<mov~~ecx, dword ptr [rsp + 0x404]>', '<mov~~edx, dword ptr [rsp + 0x42c]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~qword ptr [rsp + 0x408], rsi>', '<mov~~qword ptr [rsp + 0x410], rax>', '<mov~~dword ptr [rsp + 0x418], edx>', '<mov~~dword ptr [rsp + 0x41c], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x423], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x424], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x428], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x400691>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x358], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<add~~rax, 0x240>', '<mov~~qword ptr [rsp + 0x368], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x374], eax>', '<jmp~~0x4009fd>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jae~~0x4002fe>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jl~~0x40183f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50c]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x4000fe>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rcx + 0x240]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500030>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~esi, dword ptr [rsp + 0x3d4]>', '<mov~~r9, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rsp + 0x3a0]>', '<mov~~edx, dword ptr [rsp + 0x3ac]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x404], esi>', '<mov~~dword ptr [rsp + 0x42c], edx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<jne~~0x4004f2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x538]>', '<mov~~qword ptr [rsp + 0x478], rax>', '<mov~~edx, 1>', '<call~~0x500020>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x428]>', '<mov~~ecx, dword ptr [rsp + 0x424]>', '<mov~~rsi, qword ptr [rsp + 0x410]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x3f0], rsi>', '<mov~~dword ptr [rsp + 0x3f8], edx>', '<mov~~dword ptr [rsp + 0x3fc], ecx>', '<mov~~dword ptr [rsp + 0x400], eax>', '<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x3f0]>', '<mov~~ecx, dword ptr [rsp + 0x3f8]>', '<mov~~edi, dword ptr [rsp + 0x3fc]>', '<mov~~r8d, dword ptr [rsp + 0x400]>', '<mov~~dword ptr [rsp + 0x3d4], r8d>', '<mov~~dword ptr [rsp + 0x3d8], edi>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x3e0], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x40096a>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x468], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x470], rax>', '<jne~~0x4003fb>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jmp~~0x40183f>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x460]>', '<mov~~rsi, qword ptr [rsp + 0x458]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x444], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4004c4>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4dc]>', '<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x30c]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x300]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x318]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2f8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c80>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x316]>', '<mov~~rsi, qword ptr [rsp + 0x2f0]>', '<mov~~rax, qword ptr [rsp + 0x518]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x260], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x268], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x26c], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x270], eax>', '<je~~0x401118>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x4017ef>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x520]>', '<call~~0x500048>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~esi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500018>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~ecx, dword ptr [rsp + 0x4c4]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001d7>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x3f0]>', '<mov~~ecx, dword ptr [rsp + 0x3f8]>', '<mov~~edi, dword ptr [rsp + 0x3fc]>', '<mov~~r8d, dword ptr [rsp + 0x400]>', '<mov~~dword ptr [rsp + 0x3d4], r8d>', '<mov~~dword ptr [rsp + 0x3d8], edi>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x3e0], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x40096a>']}, {'block_Idx': 88, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jl~~0x40183f>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x316]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<lea~~rdx, [rsp + 0x540]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x248], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x230], rcx>', '<mov~~dword ptr [rsp + 0x23c], eax>', '<mov~~esi, dword ptr [rsp + 0x23c]>', '<mov~~rdx, qword ptr [rsp + 0x230]>', '<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~rcx, qword ptr [rsp + 0x260]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x1f8], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x1fc], ecx>', '<shr~~edi, cl>', '<mov~~dword ptr [rsp + 0x200], edi>', '<mov~~ecx, edi>', '<and~~ecx, 0xff>', '<mov~~dword ptr [rsp + 0x204], ecx>', '<add~~esi, 8>', '<mov~~dword ptr [rsp + 0x208], esi>', '<cmp~~eax, esi>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<mov~~dword ptr [rsp + rdx*4 + 0x540], ecx>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x210], rdx>', '<xor~~ecx, ecx>', '<cmp~~rdx, 4>', '<mov~~qword ptr [rsp + 0x230], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x23c], edx>', '<mov~~qword ptr [rsp + 0x218], rcx>', '<mov~~dword ptr [rsp + 0x224], eax>', '<jne~~0x400f4a>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x2dc]>', '<mov~~rdi, qword ptr [rsp + 0x2d0]>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~rsi, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rsp + 0x2e0]>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~qword ptr [rsp + 0x298], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~dword ptr [rsp + 0x27c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x280], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x284], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x288], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x290], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x294], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x298]>', '<mov~~dword ptr [rsp + 0x2a4], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a8], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2ac], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2b0], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<mov~~dword ptr [rsp + 0x2dc], eax>', '<jne~~0x400d4b>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x40096a>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jl~~0x40183f>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50c]>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jmp~~0x40183f>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x318]>', '<mov~~esi, dword ptr [rsp + 0x310]>', '<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~edi, dword ptr [rsp + 0x30c]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2f0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4017c6>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x510]>', '<add~~rdi, 8>', '<call~~0x500010>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x4017c6>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xe0e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x270]>', '<mov~~dword ptr [rsp + 0x198], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x1a0], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x31c]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x4017c6>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x318]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2f8], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c80>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~edx, dword ptr [rsp + 0x148]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x4017ef>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x510]>', '<mov~~ecx, dword ptr [rsp + 0x318]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~edx, dword ptr [rsp + 0x318]>', '<mov~~esi, dword ptr [rsp + 0x310]>', '<mov~~rax, qword ptr [rsp + 0x320]>', '<mov~~edi, dword ptr [rsp + 0x30c]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2f0], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4017c6>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x30a]>', '<mov~~ecx, dword ptr [rsp + 0x2e4]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x2e0], ecx>', '<cmp~~ax, 0>', '<je~~0x400e78>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x537]>', '<test~~al, 1>', '<jne~~0x40036d>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002fe>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rdx, qword ptr [rsp + 0x470]>', '<mov~~qword ptr [rsp + 0x448], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x450], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x460], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009d1>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x538], rax>', '<je~~0x4002fe>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x198]>', '<mov~~edx, dword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x510]>', '<mov~~r8d, dword ptr [rsp + 0x31c]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~dword ptr [rsp + 0x14c], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x150], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x158], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x178], rsi>', '<mov~~dword ptr [rsp + 0x184], edx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x194], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0x184]>', '<mov~~rsi, qword ptr [rsp + 0x188]>', '<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~qword ptr [rsp + 0x128], rsi>', '<mov~~dword ptr [rsp + 0x134], edx>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~dword ptr [rsp + 0x148], eax>', '<jle~~0x401749>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x30a], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x30c], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x310], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x316], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x318], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x31c], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400ba4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x558>', '<mov~~qword ptr [rsp + 0x4e8], rdi>', '<mov~~qword ptr [rsp + 0x4f0], rsi>', '<mov~~qword ptr [rsp + 0x4f8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x500], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x50c], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x510], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<mov~~qword ptr [rsp + 0x520], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x528], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x537], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jne~~0x4000b2>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4dc], eax>', '<jmp~~0x40183f>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xee1]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rcx, rax>', '<add~~rcx, 0x244>', '<mov~~qword ptr [rsp + 0x378], rcx>', '<cmp~~dword ptr [rax + 0x244], 0>', '<jle~~0x4017ef>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3d4]>', '<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rax, qword ptr [rsp + 0x398]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x40096a>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4e8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x132]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jae~~0x4002fe>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500028>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x510]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x328], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400ae9>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x400a9d>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x380]>', '<mov~~rcx, qword ptr [rsp + 0x398]>', '<mov~~eax, dword ptr [rsp + 0x388]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~esi, dword ptr [rsp + 0x3d4]>', '<mov~~r9, qword ptr [rsp + 0x518]>', '<mov~~rax, qword ptr [rsp + 0x3a0]>', '<mov~~edx, dword ptr [rsp + 0x3ac]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x404], esi>', '<mov~~dword ptr [rsp + 0x42c], edx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<jne~~0x4004f2>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x538], rax>', '<jne~~0x400246>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x30a]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x2c0], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<mov~~dword ptr [rsp + 0x2dc], eax>', '<mov~~r10d, dword ptr [rsp + 0x2dc]>', '<mov~~rdi, qword ptr [rsp + 0x2d0]>', '<mov~~rdx, qword ptr [rsp + 0x2c8]>', '<mov~~rsi, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rsp + 0x2e0]>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~qword ptr [rsp + 0x298], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x274], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~dword ptr [rsp + 0x27c], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x280], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x284], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x288], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x290], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x294], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x298]>', '<mov~~dword ptr [rsp + 0x2a4], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a8], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2ac], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2b0], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<mov~~dword ptr [rsp + 0x2dc], eax>', '<jne~~0x400d4b>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x510]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 8], rdi>', '<call~~0x500010>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<cmp~~eax, 3>', '<jle~~0x4017ef>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30c]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500040>']}], 'cfg_edge_info': [(15, 21), (32, 37), (73, 81), (87, 80), (8, 9), (51, 71), (9, 17), (11, 14), (88, 93), (47, 55), (22, 19), (29, 34), (48, 47), (17, 23), (2, 4), (43, 14), (81, 80), (22, 3), (76, 47), (63, 38), (25, 29), (118, 55), (44, 51), (3, 10), (21, 25), (0, 2), (40, 47), (61, 79), (1, 3), (10, 15), (27, 31), (96, 85), (28, 39), (16, 19), (39, 14), (73, 80), (68, 47), (4, 11), (5, 9), (80, 85), (16, 3), (97, 55), (37, 44), (62, 73), (85, 38), (54, 14), (52, 62), (38, 54), (90, 55), (19, 22), (34, 41), (79, 73), (47, 56), (29, 35), (88, 14), (71, 62), (74, 88), (25, 28), (12, 3), (21, 24), (55, 74), (35, 50), (23, 30), (50, 14), (10, 14), (85, 90), (45, 63), (94, 47), (32, 38), (27, 32), (24, 27), (12, 16), (52, 61), (19, 3), (62, 38), (80, 86), (30, 12), (8, 12), (2, 5), (34, 40), (77, 47), (37, 45), (79, 38), (39, 29), (0, 1), (30, 14), (31, 43), (71, 61), (90, 95), (44, 52), (5, 8)], 'cdg_edge_info': [(32, 37), (85, 55), (8, 9), (29, 50), (2, 11), (52, 79), (27, 43), (47, 55), (88, 93), (37, 63), (22, 19), (29, 34), (2, 4), (5, 30), (32, 14), (71, 79), (62, 85), (5, 23), (79, 85), (62, 14), (21, 25), (0, 2), (10, 15), (27, 31), (79, 14), (16, 19), (39, 14), (62, 80), (85, 54), (37, 14), (5, 9), (21, 27), (79, 80), (37, 44), (62, 73), (85, 38), (21, 29), (52, 62), (19, 22), (79, 73), (29, 35), (88, 14), (71, 62), (10, 21), (85, 88), (25, 28), (21, 24), (32, 54), (47, 88), (44, 71), (10, 14), (8, 17), (85, 90), (32, 38), (27, 14), (8, 10), (30, 10), (85, 74), (62, 54), (27, 32), (34, 47), (29, 14), (12, 16), (47, 74), (8, 3), (30, 3), (79, 54), (62, 38), (30, 12), (8, 12), (2, 5), (2, 14), (8, 30), (37, 45), (37, 54), (79, 38), (39, 29), (0, 1), (30, 14), (85, 14), (0, 10), (8, 23), (37, 38), (25, 39), (44, 52), (5, 8), (0, 3), (5, 17)], 'ddg_edge_info': [(15, 21), (21, 71), (15, 85), (90, 88), (37, 79), (31, 93), (0, 5), (9, 17), (0, 23), (32, 85), (16, 22), (88, 93), (15, 32), (25, 34), (0, 44), (22, 19), (29, 34), (3, 15), (12, 27), (17, 23), (21, 39), (0, 71), (5, 85), (0, 16), (0, 80), (50, 93), (15, 71), (15, 80), (15, 25), (10, 93), (71, 79), (22, 3), (0, 55), (0, 9), (5, 23), (23, 93), (15, 55), (15, 73), (25, 29), (28, 55), (25, 47), (3, 10), (23, 22), (0, 2), (37, 85), (3, 37), (28, 39), (16, 19), (0, 32), (12, 15), (4, 11), (80, 85), (4, 93), (79, 80), (0, 25), (37, 44), (30, 93), (74, 93), (0, 34), (0, 43), (37, 71), (15, 34), (37, 80), (38, 54), (19, 22), (79, 73), (28, 34), (0, 27), (0, 45), (15, 27), (38, 93), (37, 73), (23, 19), (15, 45), (74, 88), (0, 29), (25, 28), (0, 93), (11, 93), (0, 38), (23, 3), (12, 3), (0, 47), (15, 29), (23, 12), (21, 79), (55, 74), (15, 38), (21, 88), (35, 50), (15, 47), (23, 30), (0, 4), (47, 88), (44, 71), (5, 27), (28, 29), (28, 93), (0, 22), (85, 90), (0, 31), (28, 47), (5, 45), (43, 93), (15, 31), (45, 38), (3, 32), (2, 12), (0, 15), (0, 79), (15, 79), (23, 16), (12, 16), (19, 3), (0, 8), (0, 17), (32, 79), (37, 45), (0, 35), (35, 93), (15, 90), (15, 35), (39, 29), (15, 44), (39, 93), (34, 88), (5, 15), (31, 43), (0, 74), (0, 19), (28, 35), (2, 16), (0, 28), (15, 28), (15, 37), (25, 39), (73, 88), (5, 8), (54, 93), (0, 3), (3, 29), (0, 12), (3, 93), (0, 21), (0, 85)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 44, 'instruction': 'addq\t$0x240, %rsi                      # imm = 0x0xf0'}, {'instIndex': 45, 'instruction': 'movq\t%rsi, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 47, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 48, 'instruction': 'movl\t%edx, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 50, 'instruction': 'addq\t$0x244, %rsi                      # imm = 0x0xf4'}, {'instIndex': 51, 'instruction': 'movq\t%rsi, 0x4c8(%rsp)                # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x4d0(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 62, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 63, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 65, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 66, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 70, 'instruction': 'movq\t(%rdx), %rdi'}, {'instIndex': 71, 'instruction': 'movl\t(%rcx), %esi'}, {'instIndex': 72, 'instruction': 'movl\t(%rax), %edx'}, {'instIndex': 73, 'instruction': 'callq\tff_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 75, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 76, 'instruction': 'jl\t.LBB1_79'}, {'instIndex': 79, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 80, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 86, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 134, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 135, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'movl\t%eax, 0x4dc(%rsp)                # 4-byte Spill'}, {'instIndex': 138, 'instruction': 'jl\t.LBB1_79'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453---a/libavcodec/eatgv.c
The case of compiler gcc with optimization no.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/no/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/no/eatgv_gcc.s---tgv_decode_frame---before
function id: 64
function flag: True
There are 287 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/no/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/no/eatgv_gcc.s---tgv_decode_frame---before
function id: 64
function flag: True
There are 287 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/no/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O0/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O0/eatgv_gcc.s---tgv_decode_frame---before
function id: 64
function flag: True
There are 287 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O0/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O0/eatgv_gcc.s---tgv_decode_frame---before
function id: 64
function flag: True
There are 287 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O0/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 42, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 43, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t%edx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 47, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 48, 'instruction': 'movzwl\t%ax, %edx'}, {'instIndex': 49, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 50, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 51, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 53, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 54, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 56, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 57, 'instruction': 'jne\t.L79'}, {'instIndex': 58, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 59, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 60, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 61, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 63, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 64, 'instruction': 'je\t.L80'}, {'instIndex': 65, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 66, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 67, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 68, 'instruction': 'movl\t0x240(%rax), %ecx'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 71, 'instruction': 'movl\t%ecx, %esi'}, {'instIndex': 72, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 73, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'addq\t$0x238, %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 77, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 78, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 80, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 81, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 82, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t$6, %rax'}, {'instIndex': 84, 'instruction': 'movzwl\t(%rax), %eax'}, {'instIndex': 85, 'instruction': 'movzwl\t%ax, %eax'}, {'instIndex': 86, 'instruction': 'movl\t%eax, 0x38(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t0x244(%rax), %eax'}, {'instIndex': 125, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 126, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 127, 'instruction': 'movl\t0x240(%rax), %eax'}, {'instIndex': 128, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 129, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 130, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 131, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 132, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 133, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 135, 'instruction': 'jns\t.L83'}, {'instIndex': 136, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 137, 'instruction': 'jmp\t.L78'}, {'instIndex': 138, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 139, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 140, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 141, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 142, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 143, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 144, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 145, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 146, 'instruction': 'jns\t.L84'}, {'instIndex': 147, 'instruction': 'movl\t0x3c(%rsp), %eax'}, {'instIndex': 148, 'instruction': 'jmp\t.L78'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O1/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O1/eatgv_gcc.s---tgv_decode_frame---before
function id: 11
function flag: True
There are 630 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 27, 'instruction': 'movzwl\t8(%r12), %esi'}, {'instIndex': 28, 'instruction': 'movl\t%esi, 0x240(%r15)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r12), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%r15)'}, {'instIndex': 31, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 32, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 33, 'instruction': 'jne\t.L8'}, {'instIndex': 34, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 37, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 41, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 75, 'instruction': 'movl\t0x244(%r15), %esi'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%r15), %edi'}, {'instIndex': 77, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 78, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 79, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 80, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 81, 'instruction': 'js\t.L4'}, {'instIndex': 82, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 83, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 84, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 85, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 86, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'js\t.L4'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O1/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O1/eatgv_gcc.s---tgv_decode_frame---before
function id: 11
function flag: True
There are 630 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 27, 'instruction': 'movzwl\t8(%r12), %esi'}, {'instIndex': 28, 'instruction': 'movl\t%esi, 0x240(%r15)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r12), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%r15)'}, {'instIndex': 31, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 32, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 33, 'instruction': 'jne\t.L8'}, {'instIndex': 34, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 37, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 41, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 75, 'instruction': 'movl\t0x244(%r15), %esi'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%r15), %edi'}, {'instIndex': 77, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 78, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 79, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 80, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 81, 'instruction': 'js\t.L4'}, {'instIndex': 82, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 83, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 84, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 85, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 86, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'js\t.L4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O1/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 27, 'instruction': 'movzwl\t8(%r12), %esi'}, {'instIndex': 28, 'instruction': 'movl\t%esi, 0x240(%r15)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r12), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%r15)'}, {'instIndex': 31, 'instruction': 'movq\t(%r15), %rdi'}, {'instIndex': 32, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 33, 'instruction': 'jne\t.L8'}, {'instIndex': 34, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 37, 'instruction': 'leaq\t0x238(%r15), %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t8(%r15), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 41, 'instruction': 'movzwl\t14(%r12), %edi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 75, 'instruction': 'movl\t0x244(%r15), %esi'}, {'instIndex': 76, 'instruction': 'movl\t0x240(%r15), %edi'}, {'instIndex': 77, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 78, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 79, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 80, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 81, 'instruction': 'js\t.L4'}, {'instIndex': 82, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 83, 'instruction': 'movq\t%rbx, %rsi'}, {'instIndex': 84, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 85, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 86, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'js\t.L4'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O2/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O2/eatgv_gcc.s---tgv_decode_frame---before
function id: 10
function flag: True
There are 611 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 26, 'instruction': 'movzwl\t8(%r15), %edi'}, {'instIndex': 27, 'instruction': 'movq\t(%rbx), %r9'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x240(%rbx)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r15), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 31, 'instruction': 'cmpl\t0x94(%r9), %edi'}, {'instIndex': 32, 'instruction': 'jne\t.L8'}, {'instIndex': 33, 'instruction': 'movl\t0x98(%r9), %esi'}, {'instIndex': 34, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%r9, %rdi'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r15), %r9d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 44, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 71, 'instruction': 'movq\t8(%rsp), %r15'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 382, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 383, 'instruction': 'movl\t0x240(%rbx), %edi'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O2/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O2/eatgv_gcc.s---tgv_decode_frame---before
function id: 10
function flag: True
There are 611 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 26, 'instruction': 'movzwl\t8(%r15), %edi'}, {'instIndex': 27, 'instruction': 'movq\t(%rbx), %r9'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x240(%rbx)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r15), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 31, 'instruction': 'cmpl\t0x94(%r9), %edi'}, {'instIndex': 32, 'instruction': 'jne\t.L8'}, {'instIndex': 33, 'instruction': 'movl\t0x98(%r9), %esi'}, {'instIndex': 34, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%r9, %rdi'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r15), %r9d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 44, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 71, 'instruction': 'movq\t8(%rsp), %r15'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 382, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 383, 'instruction': 'movl\t0x240(%rbx), %edi'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O2/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 26, 'instruction': 'movzwl\t8(%r15), %edi'}, {'instIndex': 27, 'instruction': 'movq\t(%rbx), %r9'}, {'instIndex': 28, 'instruction': 'movl\t%edi, 0x240(%rbx)'}, {'instIndex': 29, 'instruction': 'movzwl\t10(%r15), %edx'}, {'instIndex': 30, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 31, 'instruction': 'cmpl\t0x94(%r9), %edi'}, {'instIndex': 32, 'instruction': 'jne\t.L8'}, {'instIndex': 33, 'instruction': 'movl\t0x98(%r9), %esi'}, {'instIndex': 34, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 35, 'instruction': 'je\t.L9'}, {'instIndex': 36, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 37, 'instruction': 'movq\t%r9, %rdi'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 45, 'instruction': 'movzwl\t14(%r15), %r9d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 44, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 71, 'instruction': 'movq\t8(%rsp), %r15'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 382, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 383, 'instruction': 'movl\t0x240(%rbx), %edi'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O3/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O3/eatgv_gcc.s---tgv_decode_frame---before
function id: 10
function flag: True
There are 989 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%rax), %edi'}, {'instIndex': 26, 'instruction': 'movq\t0(%r13), %r8'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x240(%r13)'}, {'instIndex': 28, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 29, 'instruction': 'movl\t%edx, 0x244(%r13)'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%r8), %edi'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movl\t0x98(%r8), %esi'}, {'instIndex': 33, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 34, 'instruction': 'je\t.L9'}, {'instIndex': 35, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 36, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%r13), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%r13), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movzwl\t14(%rax), %r8d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 44, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movl\t0x240(%r13), %edi'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r12, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 715, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 716, 'instruction': 'movl\t0x240(%r13), %edi'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O3/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O3/eatgv_gcc.s---tgv_decode_frame---before
function id: 10
function flag: True
There are 989 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%rax), %edi'}, {'instIndex': 26, 'instruction': 'movq\t0(%r13), %r8'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x240(%r13)'}, {'instIndex': 28, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 29, 'instruction': 'movl\t%edx, 0x244(%r13)'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%r8), %edi'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movl\t0x98(%r8), %esi'}, {'instIndex': 33, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 34, 'instruction': 'je\t.L9'}, {'instIndex': 35, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 36, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%r13), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%r13), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movzwl\t14(%rax), %r8d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 44, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movl\t0x240(%r13), %edi'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r12, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 715, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 716, 'instruction': 'movl\t0x240(%r13), %edi'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/O3/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 25, 'instruction': 'movzwl\t8(%rax), %edi'}, {'instIndex': 26, 'instruction': 'movq\t0(%r13), %r8'}, {'instIndex': 27, 'instruction': 'movl\t%edi, 0x240(%r13)'}, {'instIndex': 28, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 29, 'instruction': 'movl\t%edx, 0x244(%r13)'}, {'instIndex': 30, 'instruction': 'cmpl\t0x94(%r8), %edi'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movl\t0x98(%r8), %esi'}, {'instIndex': 33, 'instruction': 'cmpl\t%esi, %edx'}, {'instIndex': 34, 'instruction': 'je\t.L9'}, {'instIndex': 35, 'instruction': 'movl\t%edi, %esi'}, {'instIndex': 36, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%r13), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%r13), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 46, 'instruction': 'movzwl\t14(%rax), %r8d'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 43, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 44, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 45, 'instruction': 'movl\t0x240(%r13), %edi'}, {'instIndex': 72, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 73, 'instruction': 'movq\t%r12, %rcx'}, {'instIndex': 74, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'js\t.L4'}, {'instIndex': 77, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 78, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 80, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 81, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'js\t.L4'}, {'instIndex': 715, 'instruction': 'movl\t0x244(%r13), %esi'}, {'instIndex': 716, 'instruction': 'movl\t0x240(%r13), %edi'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/Os/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/Os/eatgv_gcc.s---tgv_decode_frame---before
function id: 19
function flag: True
There are 538 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%rax), %esi'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t%esi, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 36, 'instruction': 'je\t.L11'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%rax), %esi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 66, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 67, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 68, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 69, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 70, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 71, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 72, 'instruction': 'js\t.L5'}, {'instIndex': 73, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 74, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 75, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 76, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 77, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 78, 'instruction': 'js\t.L5'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/Os/eatgv_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/Os/eatgv_gcc.s---tgv_decode_frame---before
function id: 19
function flag: True
There are 538 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%rax), %esi'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t%esi, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 36, 'instruction': 'je\t.L11'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%rax), %esi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 66, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 67, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 68, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 69, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 70, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 71, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 72, 'instruction': 'js\t.L5'}, {'instIndex': 73, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 74, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 75, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 76, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 77, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 78, 'instruction': 'js\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/gcc_before/Os/eatgv.o
Binary file does not exist.
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 28, 'instruction': 'movzwl\t8(%rax), %esi'}, {'instIndex': 29, 'instruction': 'movq\t(%rbx), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t%esi, 0x240(%rbx)'}, {'instIndex': 31, 'instruction': 'movzwl\t10(%rax), %edx'}, {'instIndex': 32, 'instruction': 'movl\t%edx, 0x244(%rbx)'}, {'instIndex': 33, 'instruction': 'cmpl\t0x94(%rdi), %esi'}, {'instIndex': 34, 'instruction': 'jne\t.L10'}, {'instIndex': 35, 'instruction': 'cmpl\t0x98(%rdi), %edx'}, {'instIndex': 36, 'instruction': 'je\t.L11'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 38, 'instruction': 'call\tavcodec_set_dimensions@PLT'}, {'instIndex': 39, 'instruction': 'leaq\t0x238(%rbx), %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_freep@PLT'}, {'instIndex': 41, 'instruction': 'leaq\t8(%rbx), %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_frame_unref@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t14(%rax), %esi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 66, 'instruction': 'movl\t0x244(%rbx), %esi'}, {'instIndex': 67, 'instruction': 'movl\t0x240(%rbx), %edi'}, {'instIndex': 68, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 69, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 70, 'instruction': 'call\tav_image_check_size@PLT'}, {'instIndex': 71, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 72, 'instruction': 'js\t.L5'}, {'instIndex': 73, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 74, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 75, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 76, 'instruction': 'call\tff_get_buffer@PLT'}, {'instIndex': 77, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 78, 'instruction': 'js\t.L5'}]}]}
The case of compiler clang with optimization no.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 265 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 265 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 209 nodes and 339 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 265 instructions in binary file.
[4194584, 4194650, 4194677, 4194712, 4194729, 4194743]
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
The execution time of patched subCFG information extraction via angr: 0:00:00.652127
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ae>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "add" for 0x40019d>, <DisassemblerInsn "call" for 0x4001a4>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "movzx" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "add" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4001ea>, <DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "jge" for 0x4001f8>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500008>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001b7>']}], 'cfg_edge_info': [(12, 17), (11, 16), (6, 11), (3, 7), (6, 7), (7, 12), (11, 15), (3, 6), (17, 11), (1, 3)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "xor" for 0x400289>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026c>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "jmp" for 0x4002a1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "jmp" for 0x4002cb>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "add" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002ea>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cmp" for 0x4002be>, <DisassemblerInsn "jge" for 0x4002c1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "call" for 0x4002b5>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jge" for 0x400297>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400217>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40026e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40026e>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002d0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002a6>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40026c>']}], 'cfg_edge_info': [(9, 13), (10, 14), (14, 18), (18, 13), (0, 2), (5, 10), (14, 19), (21, 24), (24, 2), (5, 9), (2, 5)]}]}
{'tgv_decode_frame': [4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/no/eatgv.o---before
The extraction of function: tgv_decode_frame
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 227 nodes and 342 edges in CFGEmulated.
It has 227 nodes and 369 edges in CDG.
It has 4651 nodes and 6773 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
{4194571, 4195597, 4194831, 4194960, 4194839, 4194584, 4194969, 4195226, 4194712, 4194841, 4195485, 4195231, 4195490, 4195108, 4194982, 4194729, 4194743, 4195255, 4195002, 4195387, 4195514, 4195011, 4195139, 4195268, 4195524, 4195399, 4195526, 4195276, 4195024, 4195540, 4195157, 4194650, 4194778, 4195423, 4194400, 4195170, 4194531, 4195559, 4194794, 4194924, 4195436, 4194926, 4195055, 4195568, 4194810, 4194547, 4194677, 4195578, 4195069}
[91, 2, 64, 3, 17, 129, 181, 102, 58, 49, 37, 74, 70, 86, 42, 33, 55, 28, 128, 12, 1, 69, 98, 9, 22, 68, 73, 6, 61, 40, 16, 38, 10, 27, 29, 32, 13, 79, 15, 36, 34, 85, 222, 121, 4, 24, 46, 35, 18, 21, 26, 0, 25, 14, 20, 43, 7]
The execution time of patched slicing information extraction via angr: 0:00:17.955869
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ba>, <DisassemblerInsn "jmp" for 0x4004c2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "xor" for 0x400289>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40039a>, <DisassemblerInsn "jge" for 0x40039d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "add" for 0x40019d>, <DisassemblerInsn "call" for 0x4001a4>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fa>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40104d>, <DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "add" for 0x40105f>, <DisassemblerInsn "ret" for 0x401066>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "add" for 0x4004d9>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "call" for 0x4004e2>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "jmp" for 0x40035d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400447>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "lea" for 0x400451>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "call" for 0x40045a>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "cmp" for 0x4003d5>, <DisassemblerInsn "jge" for 0x4003db>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400436>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400980>, <DisassemblerInsn "mov" for 0x400987>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "add" for 0x4009af>, <DisassemblerInsn "cmp" for 0x4009b3>, <DisassemblerInsn "jbe" for 0x4009bb>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "cmp" for 0x40031a>, <DisassemblerInsn "jne" for 0x400322>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "add" for 0x40105f>, <DisassemblerInsn "ret" for 0x401066>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "jmp" for 0x4002cb>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004f0>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "jmp" for 0x4004f8>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004c4>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b7>, <DisassemblerInsn "jmp" for 0x4003bf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jge" for 0x400297>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400219>, <DisassemblerInsn "movzx" for 0x40021e>, <DisassemblerInsn "shl" for 0x400221>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "movzx" for 0x400229>, <DisassemblerInsn "shl" for 0x40022d>, <DisassemblerInsn "or" for 0x400230>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "or" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "movsxd" for 0x400242>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400253>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400260>, <DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "jmp" for 0x400267>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "lea" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "call" for 0x4004b5>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039f>, <DisassemblerInsn "mov" for 0x4003a4>, <DisassemblerInsn "lea" for 0x4003a9>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "call" for 0x4003b2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40049d>, <DisassemblerInsn "jge" for 0x4004a0>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "mov" for 0x400593>, <DisassemblerInsn "mov" for 0x400597>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "imul" for 0x4005a5>, <DisassemblerInsn "movsxd" for 0x4005aa>, <DisassemblerInsn "add" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005ba>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c4>, <DisassemblerInsn "and" for 0x4005c7>, <DisassemblerInsn "cmp" for 0x4005ca>, <DisassemblerInsn "je" for 0x4005cd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "mov" for 0x400471>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "call" for 0x400498>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "movzx" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "add" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ae>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "add" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002ea>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002ef>, <DisassemblerInsn "jne" for 0x4002f7>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "jmp" for 0x4002a1>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004cb>, <DisassemblerInsn "call" for 0x4004cf>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4001ea>, <DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "jge" for 0x4001f8>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400367>, <DisassemblerInsn "mov" for 0x40036c>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "mov" for 0x400378>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "call" for 0x400395>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "cmp" for 0x400440>, <DisassemblerInsn "jne" for 0x400445>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "imul" for 0x4003ee>, <DisassemblerInsn "cdqe" for 0x4003f2>, <DisassemblerInsn "add" for 0x4003f4>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "mov" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x400407>, <DisassemblerInsn "imul" for 0x40040c>, <DisassemblerInsn "cdqe" for 0x400413>, <DisassemblerInsn "add" for 0x400415>, <DisassemblerInsn "mov" for 0x400418>, <DisassemblerInsn "movsxd" for 0x40041d>, <DisassemblerInsn "call" for 0x400424>]'}, {'block_Idx': 222, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "cmp" for 0x4003d5>, <DisassemblerInsn "jge" for 0x4003db>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "cmp" for 0x4004eb>, <DisassemblerInsn "jge" for 0x4004ee>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "lea" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "call" for 0x400106>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cmp" for 0x4002be>, <DisassemblerInsn "jge" for 0x4002c1>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "jmp" for 0x400467>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "imul" for 0x400334>, <DisassemblerInsn "movsxd" for 0x40033b>, <DisassemblerInsn "call" for 0x40033e>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400217>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "call" for 0x4002b5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x4001ff>, <DisassemblerInsn "cmp" for 0x400203>, <DisassemblerInsn "setb" for 0x400208>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400343>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "cmp" for 0x40034f>, <DisassemblerInsn "jne" for 0x400353>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "call" for 0x400193>]'}], 'cfg_block_detailed_info': [{'block_Idx': 91, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 64, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003c4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 181, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], 0>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x500040>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x40050d>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf1f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400436>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], 0>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x4004c6>']}, {'block_Idx': 42, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x90]>', '<jbe~~0x4009cd>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400362>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 69, 'blockInsts': ['<jmp~~0x4004c6>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002a6>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~edx, byte ptr [rax]>', '<shl~~edx, 0x10>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 1]>', '<shl~~eax, 8>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 2]>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 8]>', '<mov~~dword ptr [rax + rcx*4 + 0x248], edx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~eax, dword ptr [rsp + 8]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x4001da>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xef3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xfb0]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001b7>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4004c4>']}, {'block_Idx': 40, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x40], r8d>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<imul~~ecx, dword ptr [rsp + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<je~~0x4005df>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 2>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<call~~0x400980>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 32, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40043b>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rax + 0x238]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rax + 0x94]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~r8d, dword ptr [rax + 0x98]>', '<call~~0x400580>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x40046c>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rax + 0x238]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x240]>', '<cdqe~~>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rdx, dword ptr [rax + 0x240]>', '<call~~0x500030>']}, {'block_Idx': 222, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400436>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4004fa>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x124a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002d0>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40026c>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40026e>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x40026e>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<setb~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rcx + 0x238], rax>', '<cmp~~rax, 0>', '<jne~~0x400362>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500008>']}], 'cfg_edge_info': [(68, 91), (7, 17), (32, 34), (33, 36), (70, 64), (3, 7), (43, 49), (4, 12), (21, 25), (29, 32), (0, 2), (28, 18), (22, 26), (27, 10), (9, 14), (34, 37), (1, 3), (17, 27), (98, 18), (10, 15), (74, 85), (36, 40), (33, 35), (32, 33), (16, 22), (24, 29), (43, 36), (15, 20), (222, 85), (64, 74), (36, 64), (58, 64), (3, 6), (20, 22), (181, 61), (73, 98), (12, 18), (91, 18), (61, 69), (69, 79), (79, 102), (0, 1), (14, 24), (121, 129), (9, 13), (6, 7), (38, 61), (49, 18), (15, 16), (26, 16), (16, 21), (6, 10), (55, 61), (24, 28), (222, 86), (128, 18), (64, 73), (86, 79), (102, 121), (20, 21), (35, 43), (61, 68), (38, 42), (25, 2), (1, 4), (2, 9), (10, 16), (34, 38), (121, 128), (13, 18), (46, 18), (74, 86), (37, 46), (26, 15)], 'cdg_edge_info': [(16, 26), (32, 34), (3, 7), (43, 49), (6, 27), (20, 26), (61, 18), (9, 14), (34, 37), (74, 79), (61, 79), (222, 121), (1, 3), (1, 9), (43, 18), (10, 15), (1, 12), (1, 18), (61, 91), (34, 46), (1, 21), (34, 61), (32, 33), (33, 35), (16, 22), (24, 29), (43, 36), (6, 17), (32, 36), (24, 32), (64, 74), (15, 20), (222, 102), (34, 18), (61, 121), (20, 22), (3, 6), (74, 121), (61, 69), (64, 98), (0, 1), (1, 2), (121, 129), (3, 27), (9, 13), (222, 79), (15, 16), (6, 7), (61, 102), (26, 16), (24, 28), (74, 102), (64, 73), (64, 18), (33, 43), (61, 68), (3, 17), (1, 4), (121, 128), (10, 16), (9, 18), (9, 24), (121, 18), (1, 10), (24, 18), (34, 38), (1, 25), (26, 15)], 'ddg_edge_info': [(68, 91), (7, 17), (0, 222), (33, 36), (29, 32), (22, 26), (22, 35), (0, 14), (43, 222), (3, 6), (102, 128), (29, 34), (3, 79), (0, 7), (14, 24), (35, 129), (13, 129), (24, 28), (0, 37), (102, 121), (0, 46), (20, 24), (37, 129), (29, 36), (121, 128), (22, 222), (10, 22), (14, 129), (29, 38), (0, 2), (14, 28), (222, 121), (74, 79), (27, 22), (10, 15), (26, 20), (33, 35), (0, 32), (73, 98), (27, 15), (68, 129), (46, 129), (2, 13), (10, 26), (0, 34), (0, 43), (29, 33), (27, 26), (37, 46), (0, 27), (2, 24), (0, 36), (33, 222), (12, 129), (91, 129), (102, 129), (3, 7), (29, 35), (27, 10), (17, 27), (0, 20), (0, 29), (0, 38), (15, 20), (43, 36), (0, 102), (222, 102), (29, 37), (0, 4), (2, 129), (0, 22), (20, 64), (20, 9), (3, 2), (4, 129), (35, 43), (98, 129), (0, 6), (22, 36), (0, 15), (0, 79), (222, 79), (20, 121), (0, 33), (35, 36), (4, 12), (0, 17), (2, 14), (0, 26), (73, 129), (49, 129), (128, 129), (0, 35), (74, 222), (61, 121), (79, 102), (0, 1), (9, 13), (0, 10), (20, 43), (0, 129), (20, 61), (27, 2), (35, 49), (22, 15), (28, 129), (27, 20), (0, 3), (14, 29), (2, 9), (3, 102)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 265 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 265 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 209 nodes and 339 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 265 instructions in binary file.
[4194584, 4194650, 4194677, 4194712, 4194729, 4194743]
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
The execution time of patched subCFG information extraction via angr: 0:00:00.667445
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ae>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "add" for 0x40019d>, <DisassemblerInsn "call" for 0x4001a4>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "movzx" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "add" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4001ea>, <DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "jge" for 0x4001f8>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500008>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001b7>']}], 'cfg_edge_info': [(12, 17), (11, 16), (6, 11), (3, 7), (6, 7), (7, 12), (11, 15), (3, 6), (17, 11), (1, 3)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "xor" for 0x400289>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026c>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "jmp" for 0x4002a1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "jmp" for 0x4002cb>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "add" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002ea>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cmp" for 0x4002be>, <DisassemblerInsn "jge" for 0x4002c1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "call" for 0x4002b5>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jge" for 0x400297>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400217>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40026e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40026e>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002d0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002a6>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40026c>']}], 'cfg_edge_info': [(9, 13), (10, 14), (14, 18), (18, 13), (0, 2), (5, 10), (14, 19), (21, 24), (24, 2), (5, 9), (2, 5)]}]}
{'tgv_decode_frame': [4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O0/eatgv.o---before
The extraction of function: tgv_decode_frame
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 227 nodes and 342 edges in CFGEmulated.
It has 227 nodes and 369 edges in CDG.
It has 4651 nodes and 6774 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194924, 4194926, 4194960, 4194969, 4194982, 4195002, 4195011]
{4194571, 4195597, 4194831, 4194960, 4194839, 4194584, 4194969, 4195226, 4194712, 4194841, 4195485, 4195231, 4195490, 4195108, 4194982, 4194729, 4194743, 4195255, 4195002, 4195387, 4195514, 4195011, 4195139, 4195268, 4195524, 4195399, 4195526, 4195276, 4195024, 4195540, 4195157, 4194650, 4194778, 4195423, 4194400, 4195170, 4194531, 4195559, 4194794, 4194924, 4195436, 4194926, 4195055, 4195568, 4194810, 4194547, 4194677, 4195578, 4195069}
[91, 2, 64, 3, 17, 129, 181, 102, 58, 49, 37, 74, 70, 86, 42, 33, 55, 28, 128, 12, 1, 69, 98, 9, 22, 68, 73, 6, 61, 40, 16, 38, 10, 27, 29, 32, 13, 79, 15, 36, 34, 85, 222, 121, 4, 24, 46, 35, 18, 21, 26, 0, 25, 14, 20, 43, 7]
The execution time of patched slicing information extraction via angr: 0:00:17.562630
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ba>, <DisassemblerInsn "jmp" for 0x4004c2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "xor" for 0x400289>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40039a>, <DisassemblerInsn "jge" for 0x40039d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "movzx" for 0x40011d>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x400130>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x400152>, <DisassemblerInsn "jne" for 0x400158>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "add" for 0x40019d>, <DisassemblerInsn "call" for 0x4001a4>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004fa>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x400509>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40104d>, <DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "add" for 0x40105f>, <DisassemblerInsn "ret" for 0x401066>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "add" for 0x4004d9>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "call" for 0x4004e2>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "jmp" for 0x40035d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400447>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "lea" for 0x400451>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "call" for 0x40045a>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "cmp" for 0x4003d5>, <DisassemblerInsn "jge" for 0x4003db>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400436>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400980>, <DisassemblerInsn "mov" for 0x400987>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "add" for 0x4009af>, <DisassemblerInsn "cmp" for 0x4009b3>, <DisassemblerInsn "jbe" for 0x4009bb>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "cmp" for 0x40031a>, <DisassemblerInsn "jne" for 0x400322>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "add" for 0x40105f>, <DisassemblerInsn "ret" for 0x401066>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "jmp" for 0x4002cb>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004f0>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "jmp" for 0x4004f8>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e3>, <DisassemblerInsn "add" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "jbe" for 0x4000f1>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004c4>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b7>, <DisassemblerInsn "jmp" for 0x4003bf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jge" for 0x400297>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400219>, <DisassemblerInsn "movzx" for 0x40021e>, <DisassemblerInsn "shl" for 0x400221>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "movzx" for 0x400229>, <DisassemblerInsn "shl" for 0x40022d>, <DisassemblerInsn "or" for 0x400230>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "or" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "movsxd" for 0x400242>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400253>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400260>, <DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "jmp" for 0x400267>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "lea" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "call" for 0x4004b5>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039f>, <DisassemblerInsn "mov" for 0x4003a4>, <DisassemblerInsn "lea" for 0x4003a9>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "call" for 0x4003b2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "je" for 0x400173>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40049d>, <DisassemblerInsn "jge" for 0x4004a0>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x40058e>, <DisassemblerInsn "mov" for 0x400593>, <DisassemblerInsn "mov" for 0x400597>, <DisassemblerInsn "mov" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "imul" for 0x4005a5>, <DisassemblerInsn "movsxd" for 0x4005aa>, <DisassemblerInsn "add" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b5>, <DisassemblerInsn "mov" for 0x4005ba>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c4>, <DisassemblerInsn "and" for 0x4005c7>, <DisassemblerInsn "cmp" for 0x4005ca>, <DisassemblerInsn "je" for 0x4005cd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "mov" for 0x400471>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "call" for 0x400498>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "movzx" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "add" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ae>, <DisassemblerInsn "call" for 0x4001b2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "add" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002ea>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002ef>, <DisassemblerInsn "jne" for 0x4002f7>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "jmp" for 0x4002a1>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004cb>, <DisassemblerInsn "call" for 0x4004cf>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4001ea>, <DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "jge" for 0x4001f8>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400367>, <DisassemblerInsn "mov" for 0x40036c>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "mov" for 0x400378>, <DisassemblerInsn "mov" for 0x40037d>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "call" for 0x400395>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "cmp" for 0x400440>, <DisassemblerInsn "jne" for 0x400445>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "imul" for 0x4003ee>, <DisassemblerInsn "cdqe" for 0x4003f2>, <DisassemblerInsn "add" for 0x4003f4>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "mov" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x400407>, <DisassemblerInsn "imul" for 0x40040c>, <DisassemblerInsn "cdqe" for 0x400413>, <DisassemblerInsn "add" for 0x400415>, <DisassemblerInsn "mov" for 0x400418>, <DisassemblerInsn "movsxd" for 0x40041d>, <DisassemblerInsn "call" for 0x400424>]'}, {'block_Idx': 222, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "cmp" for 0x4003d5>, <DisassemblerInsn "jge" for 0x4003db>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "cmp" for 0x4004eb>, <DisassemblerInsn "jge" for 0x4004ee>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "lea" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "call" for 0x400106>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cmp" for 0x4002be>, <DisassemblerInsn "jge" for 0x4002c1>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400463>, <DisassemblerInsn "jmp" for 0x400467>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "imul" for 0x400334>, <DisassemblerInsn "movsxd" for 0x40033b>, <DisassemblerInsn "call" for 0x40033e>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400511>, <DisassemblerInsn "ret" for 0x400515>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400217>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "xor" for 0x4001de>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "jge" for 0x4001e8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400060>, <DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "mov" for 0x40006e>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400086>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008e>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "movsxd" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000aa>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "add" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d5>, <DisassemblerInsn "jne" for 0x4000dd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "call" for 0x4002b5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x4001ff>, <DisassemblerInsn "cmp" for 0x400203>, <DisassemblerInsn "setb" for 0x400208>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400213>, <DisassemblerInsn "jne" for 0x400215>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400343>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "cmp" for 0x40034f>, <DisassemblerInsn "jne" for 0x400353>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "call" for 0x400193>]'}], 'cfg_block_detailed_info': [{'block_Idx': 91, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 64, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003c4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x240], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x244], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x240]>', '<jne~~0x400175>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 181, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], 0>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<call~~0x500040>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x40050d>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf1f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400436>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~dword ptr [rsp + 0x60], 0>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x4004c6>']}, {'block_Idx': 42, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x90]>', '<jbe~~0x4009cd>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400362>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<jbe~~0x400118>']}, {'block_Idx': 69, 'blockInsts': ['<jmp~~0x4004c6>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xc1444e49>', '<jmp~~0x40050d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002a6>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~edx, byte ptr [rax]>', '<shl~~edx, 0x10>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 1]>', '<shl~~eax, 8>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, byte ptr [rax + 2]>', '<or~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 8]>', '<mov~~dword ptr [rax + rcx*4 + 0x248], edx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~eax, dword ptr [rsp + 8]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 8], eax>', '<jmp~~0x4001da>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xef3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xfb0]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<je~~0x4001b7>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4004c4>']}, {'block_Idx': 40, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~dword ptr [rsp + 0x40], r8d>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<imul~~ecx, dword ptr [rsp + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<je~~0x4005df>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x78], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x7c], 2>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<call~~0x400980>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~eax, word ptr [rax + 6]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~dword ptr [rsp + 8], 0>', '<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 32, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40043b>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~dword ptr [rsp + 8], 0x100>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rax + 0x238]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rax + 0x94]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax]>', '<mov~~r8d, dword ptr [rax + 0x98]>', '<call~~0x400580>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x40046c>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rax + 0x238]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x240]>', '<cdqe~~>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rdx, dword ptr [rax + 0x240]>', '<call~~0x500030>']}, {'block_Idx': 222, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x244]>', '<jge~~0x400436>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4004fa>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x124a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~eax, 0>', '<jge~~0x4002d0>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x40050d>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<imul~~eax, dword ptr [rcx + 0x244]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40026c>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 8]>', '<xor~~eax, eax>', '<cmp~~ecx, dword ptr [rsp + 0xc]>', '<mov~~byte ptr [rsp + 3], al>', '<jge~~0x40020f>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~dword ptr [rsp + 0x14], 0x5447566b>', '<jne~~0x40026e>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x40026e>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 2>', '<cmp~~rax, qword ptr [rsp + 0x20]>', '<setb~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<test~~al, 1>', '<jne~~0x400219>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rcx + 0x238], rax>', '<cmp~~rax, 0>', '<jne~~0x400362>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x240]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x244]>', '<call~~0x500008>']}], 'cfg_edge_info': [(68, 91), (7, 17), (32, 34), (33, 36), (70, 64), (3, 7), (43, 49), (4, 12), (21, 25), (29, 32), (0, 2), (28, 18), (22, 26), (27, 10), (9, 14), (34, 37), (1, 3), (17, 27), (98, 18), (10, 15), (74, 85), (36, 40), (33, 35), (32, 33), (16, 22), (24, 29), (43, 36), (15, 20), (222, 85), (64, 74), (36, 64), (58, 64), (3, 6), (20, 22), (181, 61), (73, 98), (12, 18), (91, 18), (61, 69), (69, 79), (79, 102), (0, 1), (14, 24), (121, 129), (9, 13), (6, 7), (38, 61), (49, 18), (15, 16), (26, 16), (16, 21), (6, 10), (55, 61), (24, 28), (222, 86), (128, 18), (64, 73), (86, 79), (102, 121), (20, 21), (35, 43), (61, 68), (38, 42), (25, 2), (1, 4), (2, 9), (10, 16), (34, 38), (121, 128), (13, 18), (46, 18), (74, 86), (37, 46), (26, 15)], 'cdg_edge_info': [(16, 26), (32, 34), (3, 7), (43, 49), (6, 27), (20, 26), (61, 18), (9, 14), (34, 37), (74, 79), (61, 79), (222, 121), (1, 3), (1, 9), (43, 18), (10, 15), (1, 12), (1, 18), (61, 91), (34, 46), (1, 21), (34, 61), (32, 33), (33, 35), (16, 22), (24, 29), (43, 36), (6, 17), (32, 36), (24, 32), (64, 74), (15, 20), (222, 102), (34, 18), (61, 121), (20, 22), (3, 6), (74, 121), (61, 69), (64, 98), (0, 1), (1, 2), (121, 129), (3, 27), (9, 13), (222, 79), (15, 16), (6, 7), (61, 102), (26, 16), (24, 28), (74, 102), (64, 73), (64, 18), (33, 43), (61, 68), (3, 17), (1, 4), (121, 128), (10, 16), (9, 18), (9, 24), (121, 18), (1, 10), (24, 18), (34, 38), (1, 25), (26, 15)], 'ddg_edge_info': [(68, 91), (7, 17), (0, 222), (33, 36), (29, 32), (22, 26), (22, 35), (0, 14), (43, 222), (3, 6), (102, 128), (29, 34), (3, 79), (0, 7), (14, 24), (35, 129), (13, 129), (24, 28), (0, 37), (102, 121), (0, 46), (20, 24), (37, 129), (29, 36), (121, 128), (22, 222), (10, 22), (14, 129), (29, 38), (0, 2), (14, 28), (222, 121), (74, 79), (27, 22), (10, 15), (26, 20), (33, 35), (0, 32), (73, 98), (27, 15), (68, 129), (46, 129), (2, 13), (10, 26), (0, 34), (0, 43), (29, 33), (27, 26), (37, 46), (0, 27), (2, 24), (0, 36), (33, 222), (12, 129), (91, 129), (102, 129), (3, 7), (29, 35), (27, 10), (17, 27), (0, 20), (0, 29), (0, 38), (15, 20), (43, 36), (0, 102), (222, 102), (29, 37), (0, 4), (2, 129), (0, 22), (20, 64), (20, 9), (3, 2), (4, 129), (35, 43), (98, 129), (0, 6), (22, 36), (0, 15), (0, 79), (222, 79), (20, 121), (0, 33), (35, 36), (4, 12), (0, 17), (2, 14), (0, 26), (73, 129), (49, 129), (128, 129), (0, 35), (74, 222), (61, 121), (79, 102), (0, 1), (9, 13), (0, 10), (20, 43), (0, 129), (20, 61), (27, 2), (35, 49), (22, 15), (28, 129), (27, 20), (0, 3), (14, 29), (2, 9), (3, 102)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 39, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'movzwl\t(%rax), %ecx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 43, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movzwl\t2(%rax), %ecx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%ecx, 0x244(%rax)'}, {'instIndex': 47, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 50, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 51, 'instruction': 'cmpl\t0x240(%rcx), %eax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 53, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 56, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 57, 'instruction': 'cmpl\t0x244(%rcx), %eax'}, {'instIndex': 58, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 60, 'instruction': 'movq\t(%rax), %rdi'}, {'instIndex': 61, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 62, 'instruction': 'movl\t0x240(%rax), %esi'}, {'instIndex': 63, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movl\t0x244(%rax), %edx'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 72, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'movzwl\t6(%rax), %eax'}, {'instIndex': 74, 'instruction': 'movl\t%eax, 12(%rsp)'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 117, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 118, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 119, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 120, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 121, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 122, 'instruction': 'movq\t0x58(%rsp), %rcx'}, {'instIndex': 123, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 124, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 125, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 126, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 127, 'instruction': 'jge\t.LBB1_16'}, {'instIndex': 128, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 129, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 130, 'instruction': 'jmp\t.LBB1_37'}, {'instIndex': 131, 'instruction': 'movq\t0x58(%rsp), %rdi'}, {'instIndex': 132, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 133, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 134, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x10(%rsp)'}, {'instIndex': 136, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_18'}, {'instIndex': 138, 'instruction': 'movl\t0x10(%rsp), %eax'}, {'instIndex': 139, 'instruction': 'movl\t%eax, 0x64(%rsp)'}, {'instIndex': 140, 'instruction': 'jmp\t.LBB1_37'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1205 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movl\t%ecx, 0x500(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 50, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 51, 'instruction': 'movl\t%edx, 0x504(%rsp)                # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x508(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 64, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 67, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 70, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 74, 'instruction': 'movw\t%cx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 80, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 136, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 137, 'instruction': 'movq\t%rdx, 0x4a8(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 139, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 140, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 141, 'instruction': 'movq\t%rdx, 0x4b0(%rsp)                # 8-byte Spill'}, {'instIndex': 142, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 143, 'instruction': 'movq\t%rcx, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 144, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 145, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 146, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 147, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 148, 'instruction': 'jl\t.LBB1_82'}, {'instIndex': 151, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 152, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 153, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 154, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 155, 'instruction': 'jl\t.LBB1_82'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1205 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movl\t%ecx, 0x500(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 50, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 51, 'instruction': 'movl\t%edx, 0x504(%rsp)                # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x508(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 64, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 67, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 70, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 74, 'instruction': 'movw\t%cx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 80, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 136, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 137, 'instruction': 'movq\t%rdx, 0x4a8(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 139, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 140, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 141, 'instruction': 'movq\t%rdx, 0x4b0(%rsp)                # 8-byte Spill'}, {'instIndex': 142, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 143, 'instruction': 'movq\t%rcx, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 144, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 145, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 146, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 147, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 148, 'instruction': 'jl\t.LBB1_82'}, {'instIndex': 151, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 152, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 153, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 154, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 155, 'instruction': 'jl\t.LBB1_82'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 129 nodes and 229 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1205 instructions in binary file.
[4194585, 4194661, 4194684, 4194711, 4194731, 4194748, 4194794]
[4195091, 4195186, 4195202, 4195228]
The execution time of patched subCFG information extraction via angr: 0:00:00.700937
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000e7>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400165>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400174>, <DisassemblerInsn "je" for 0x40017a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "movzx" for 0x400131>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "mov" for 0x400152>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "cmp" for 0x40015d>, <DisassemblerInsn "jne" for 0x400163>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "add" for 0x4001b3>, <DisassemblerInsn "call" for 0x4001b7>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "mov" for 0x400183>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "call" for 0x400192>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "add" for 0x40019f>, <DisassemblerInsn "call" for 0x4001a6>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "test" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030d>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "movzx" for 0x40029b>, <DisassemblerInsn "shl" for 0x40029f>, <DisassemblerInsn "movzx" for 0x4002a3>, <DisassemblerInsn "shl" for 0x4002a7>, <DisassemblerInsn "or" for 0x4002aa>, <DisassemblerInsn "movzx" for 0x4002ad>, <DisassemblerInsn "or" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "add" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002bf>, <DisassemblerInsn "cmp" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "jne" for 0x4002e1>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "movzx" for 0x4001fa>, <DisassemblerInsn "add" for 0x4001fd>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "sub" for 0x400202>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmovb" for 0x40020d>, <DisassemblerInsn "add" for 0x400210>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "xor" for 0x40021d>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "add" for 0x40025a>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "cmp" for 0x400266>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "jae" for 0x400271>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "cmp" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "je" for 0x4001e4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<jmp~~0x400119>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~ecx, dword ptr [rsp + 0x504]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001bc>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x500], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x504], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x508], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x40017c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x550]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x504]>', '<mov~~esi, dword ptr [rsp + 0x500]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<call~~0x500008>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x550]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x527]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, 0xc1444e49>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x4019cb>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, qword ptr [rsp + 0x4d0]>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~r8, qword ptr [rsp + 0x4d8]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4f0], rcx>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jne~~0x40022f>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~cx, word ptr [rsp + 0x4fe]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jae~~0x4002e7>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4fe], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x510], rax>', '<je~~0x4002e7>']}], 'cfg_edge_info': [(19, 15), (12, 16), (16, 19), (15, 13), (18, 13), (11, 12), (11, 15), (7, 12), (18, 21), (7, 11), (15, 18), (4, 7)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "add" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003cc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40039c>, <DisassemblerInsn "mov" for 0x40039f>, <DisassemblerInsn "jl" for 0x4003a6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400372>, <DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "jl" for 0x40037c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "add" for 0x400336>, <DisassemblerInsn "mov" for 0x40033d>, <DisassemblerInsn "mov" for 0x400345>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "add" for 0x40034e>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "xor" for 0x40036b>, <DisassemblerInsn "call" for 0x40036d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "add" for 0x4019d2>, <DisassemblerInsn "pop" for 0x4019d9>, <DisassemblerInsn "ret" for 0x4019da>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "test" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000b6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x4019cb>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x4019cb>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rsp + 0x528]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x4a8], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x4b0], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x590>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x527]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, 0xc1444e49>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x4019cb>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400313>']}], 'cfg_edge_info': [(1, 3), (10, 14), (14, 17), (13, 3), (14, 9), (6, 10), (3, 6), (6, 9)]}]}
{'tgv_decode_frame': [4195091, 4195186, 4195202, 4195228]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O1/eatgv.o---before
The extraction of function: tgv_decode_frame
[4195091, 4195186, 4195202, 4195228]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 130 nodes and 215 edges in CFGEmulated.
It has 130 nodes and 216 edges in CDG.
It has 5781 nodes and 7310 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195091, 4195186, 4195202, 4195228]
{4197505, 4195202, 4194564, 4198154, 4197132, 4197388, 4200849, 4197650, 4195091, 4194711, 4194585, 4195355, 4195228, 4200867, 4197540, 4198950, 4196903, 4196009, 4198826, 4197162, 4195244, 4194731, 4197167, 4194352, 4197425, 4200879, 4200827, 4194863, 4194486, 4197302, 4195384, 4197430, 4196279, 4194491, 4194748, 4195904, 4196930, 4196677, 4195784, 4200907, 4197197, 4196429, 4197071, 4195281, 4200786, 4197755, 4196178, 4196566, 4196823, 4195803, 4195292, 4196956, 4195679, 4195297, 4195429, 4195047, 4194535, 4194537, 4197224, 4195561, 4194794, 4200813, 4195818, 4197615, 4195186, 4194931, 4196341, 4194684, 4197243, 4196604, 4196861, 4196094}
[25, 92, 52, 96, 43, 11, 7, 35, 17, 48, 26, 30, 42, 44, 61, 0, 67, 13, 86, 62, 31, 83, 68, 69, 90, 107, 45, 75, 3, 89, 85, 14, 71, 39, 74, 38, 15, 76, 77, 93, 9, 101, 57, 20, 2, 100, 56, 24, 5, 60, 102, 19, 33, 80, 22, 32, 72, 79, 41, 29, 53, 10, 94, 64, 1, 65, 59, 63, 34, 82, 49, 73, 99, 4, 91, 54, 55, 12, 36, 21, 51, 47, 87]
The execution time of patched slicing information extraction via angr: 0:00:22.083882
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "add" for 0x40025a>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "cmp" for 0x400266>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "jae" for 0x400271>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "mov" for 0x400f75>, <DisassemblerInsn "lea" for 0x400f7d>, <DisassemblerInsn "add" for 0x400f85>, <DisassemblerInsn "mov" for 0x400f8c>, <DisassemblerInsn "movzx" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f97>, <DisassemblerInsn "xor" for 0x400f9f>, <DisassemblerInsn "mov" for 0x400fa1>, <DisassemblerInsn "xor" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa5>, <DisassemblerInsn "mov" for 0x400fad>, <DisassemblerInsn "mov" for 0x400fb4>, <DisassemblerInsn "mov" for 0x400fbc>, <DisassemblerInsn "mov" for 0x400fc3>, <DisassemblerInsn "xor" for 0x400fcb>, <DisassemblerInsn "mov" for 0x400fcd>, <DisassemblerInsn "mov" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "mov" for 0x400feb>, <DisassemblerInsn "mov" for 0x400ff2>, <DisassemblerInsn "mov" for 0x400ffa>, <DisassemblerInsn "shr" for 0x400ffc>, <DisassemblerInsn "mov" for 0x400fff>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "mov" for 0x401008>, <DisassemblerInsn "mov" for 0x40100b>, <DisassemblerInsn "and" for 0x40100d>, <DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "shr" for 0x401017>, <DisassemblerInsn "mov" for 0x401019>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "and" for 0x401022>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "cmp" for 0x401039>, <DisassemblerInsn "cmova" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401045>, <DisassemblerInsn "add" for 0x40104c>, <DisassemblerInsn "mov" for 0x401050>, <DisassemblerInsn "xor" for 0x401058>, <DisassemblerInsn "cmp" for 0x40105a>, <DisassemblerInsn "mov" for 0x40105e>, <DisassemblerInsn "mov" for 0x401066>, <DisassemblerInsn "mov" for 0x401068>, <DisassemblerInsn "mov" for 0x40106f>, <DisassemblerInsn "mov" for 0x401077>, <DisassemblerInsn "jne" for 0x40107e>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d7>, <DisassemblerInsn "mov" for 0x4009df>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "cmp" for 0x4009e6>, <DisassemblerInsn "mov" for 0x4009e9>, <DisassemblerInsn "mov" for 0x4009f0>, <DisassemblerInsn "jle" for 0x4009f7>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401226>, <DisassemblerInsn "cmp" for 0x40122d>, <DisassemblerInsn "jle" for 0x401230>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "mov" for 0x400446>, <DisassemblerInsn "xor" for 0x40044b>, <DisassemblerInsn "cmp" for 0x40044d>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "je" for 0x40045f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "mov" for 0x400183>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "call" for 0x400192>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "movzx" for 0x400131>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "mov" for 0x400152>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "cmp" for 0x40015d>, <DisassemblerInsn "jne" for 0x400163>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "mov" for 0x400b55>, <DisassemblerInsn "lea" for 0x400b5a>, <DisassemblerInsn "mov" for 0x400b61>, <DisassemblerInsn "call" for 0x400b63>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "test" for 0x4002fb>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "jne" for 0x40030d>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "add" for 0x400c48>, <DisassemblerInsn "mov" for 0x400c4f>, <DisassemblerInsn "cmp" for 0x400c57>, <DisassemblerInsn "jge" for 0x400c5d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "add" for 0x4001b3>, <DisassemblerInsn "call" for 0x4001b7>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003dc>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401952>, <DisassemblerInsn "mov" for 0x40195a>, <DisassemblerInsn "lea" for 0x40195f>, <DisassemblerInsn "mov" for 0x401966>, <DisassemblerInsn "call" for 0x401968>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40052c>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40197b>, <DisassemblerInsn "add" for 0x401983>, <DisassemblerInsn "mov" for 0x401987>, <DisassemblerInsn "call" for 0x40198c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "sub" for 0x400031>, <DisassemblerInsn "mov" for 0x400038>, <DisassemblerInsn "mov" for 0x400040>, <DisassemblerInsn "mov" for 0x400048>, <DisassemblerInsn "mov" for 0x400050>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "movsxd" for 0x400072>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007b>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "add" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "sete" for 0x40009f>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "test" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ac>, <DisassemblerInsn "jne" for 0x4000b4>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd4>, <DisassemblerInsn "mov" for 0x400cdc>, <DisassemblerInsn "shl" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "mov" for 0x400ce8>, <DisassemblerInsn "call" for 0x400cea>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "add" for 0x4019d2>, <DisassemblerInsn "pop" for 0x4019d9>, <DisassemblerInsn "ret" for 0x4019da>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "sub" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f25>, <DisassemblerInsn "shl" for 0x400f27>, <DisassemblerInsn "xor" for 0x400f2a>, <DisassemblerInsn "cmp" for 0x400f2c>, <DisassemblerInsn "cmovb" for 0x400f32>, <DisassemblerInsn "mov" for 0x400f36>, <DisassemblerInsn "xor" for 0x400f3e>, <DisassemblerInsn "cmp" for 0x400f40>, <DisassemblerInsn "cmovb" for 0x400f46>, <DisassemblerInsn "mov" for 0x400f49>, <DisassemblerInsn "add" for 0x400f50>, <DisassemblerInsn "mov" for 0x400f53>, <DisassemblerInsn "xor" for 0x400f5a>, <DisassemblerInsn "cmp" for 0x400f5c>, <DisassemblerInsn "mov" for 0x400f60>, <DisassemblerInsn "je" for 0x400f67>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fd>, <DisassemblerInsn "mov" for 0x400a05>, <DisassemblerInsn "mov" for 0x400a08>, <DisassemblerInsn "add" for 0x400a10>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "xor" for 0x400a1c>, <DisassemblerInsn "mov" for 0x400a1e>, <DisassemblerInsn "jmp" for 0x400a25>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e1>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "add" for 0x400402>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "cmp" for 0x400411>, <DisassemblerInsn "jne" for 0x400419>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e5>, <DisassemblerInsn "sub" for 0x4008ed>, <DisassemblerInsn "movsxd" for 0x4008f0>, <DisassemblerInsn "cmp" for 0x4008f3>, <DisassemblerInsn "jl" for 0x4008f6>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "mov" for 0x400d21>, <DisassemblerInsn "mov" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d30>, <DisassemblerInsn "imul" for 0x400d37>, <DisassemblerInsn "add" for 0x400d3a>, <DisassemblerInsn "and" for 0x400d3d>, <DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "shr" for 0x400d4a>, <DisassemblerInsn "mov" for 0x400d4d>, <DisassemblerInsn "add" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d52>, <DisassemblerInsn "shl" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "add" for 0x400d5f>, <DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "shl" for 0x400d6a>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "add" for 0x400d6f>, <DisassemblerInsn "cmp" for 0x400d72>, <DisassemblerInsn "ja" for 0x400d75>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c31>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fc>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "mov" for 0x400913>, <DisassemblerInsn "mov" for 0x40091a>, <DisassemblerInsn "sub" for 0x400921>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "cdqe" for 0x40092a>, <DisassemblerInsn "sub" for 0x40092c>, <DisassemblerInsn "cmp" for 0x40092f>, <DisassemblerInsn "cmovl" for 0x400932>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093e>, <DisassemblerInsn "call" for 0x400940>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401950>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "movzx" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005ae>, <DisassemblerInsn "and" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "and" for 0x4005ba>, <DisassemblerInsn "cmp" for 0x4005bf>, <DisassemblerInsn "je" for 0x4005c2>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "mov" for 0x400647>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "shl" for 0x400658>, <DisassemblerInsn "and" for 0x40065b>, <DisassemblerInsn "mov" for 0x400660>, <DisassemblerInsn "rol" for 0x400664>, <DisassemblerInsn "movzx" for 0x400668>, <DisassemblerInsn "or" for 0x40066b>, <DisassemblerInsn "add" for 0x40066e>, <DisassemblerInsn "shl" for 0x400670>, <DisassemblerInsn "and" for 0x400673>, <DisassemblerInsn "movzx" for 0x400679>, <DisassemblerInsn "or" for 0x40067d>, <DisassemblerInsn "add" for 0x400680>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "mov" for 0x400687>, <DisassemblerInsn "mov" for 0x40068f>, <DisassemblerInsn "mov" for 0x400696>, <DisassemblerInsn "mov" for 0x40069d>, <DisassemblerInsn "jmp" for 0x4006a4>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032b>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "add" for 0x400336>, <DisassemblerInsn "mov" for 0x40033d>, <DisassemblerInsn "mov" for 0x400345>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "add" for 0x40034e>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "xor" for 0x40036b>, <DisassemblerInsn "call" for 0x40036d>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "movzx" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005ae>, <DisassemblerInsn "and" for 0x4005b0>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "and" for 0x4005ba>, <DisassemblerInsn "cmp" for 0x4005bf>, <DisassemblerInsn "je" for 0x4005c2>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cef>, <DisassemblerInsn "mov" for 0x400cf7>, <DisassemblerInsn "mov" for 0x400cfe>, <DisassemblerInsn "mov" for 0x400d01>, <DisassemblerInsn "mov" for 0x400d09>, <DisassemblerInsn "mov" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "mov" for 0x400d21>, <DisassemblerInsn "mov" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d30>, <DisassemblerInsn "imul" for 0x400d37>, <DisassemblerInsn "add" for 0x400d3a>, <DisassemblerInsn "and" for 0x400d3d>, <DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "shr" for 0x400d4a>, <DisassemblerInsn "mov" for 0x400d4d>, <DisassemblerInsn "add" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d52>, <DisassemblerInsn "shl" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "add" for 0x400d5f>, <DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "shl" for 0x400d6a>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "add" for 0x400d6f>, <DisassemblerInsn "cmp" for 0x400d72>, <DisassemblerInsn "ja" for 0x400d75>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a5c>, <DisassemblerInsn "mov" for 0x400a63>, <DisassemblerInsn "mov" for 0x400a6b>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "mov" for 0x400a7b>, <DisassemblerInsn "mov" for 0x400a83>, <DisassemblerInsn "mov" for 0x400a8a>, <DisassemblerInsn "mov" for 0x400a8d>, <DisassemblerInsn "imul" for 0x400a8f>, <DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "movsxd" for 0x400a9a>, <DisassemblerInsn "add" for 0x400a9d>, <DisassemblerInsn "mov" for 0x400aa0>, <DisassemblerInsn "mov" for 0x400aa8>, <DisassemblerInsn "mov" for 0x400aab>, <DisassemblerInsn "mov" for 0x400aad>, <DisassemblerInsn "imul" for 0x400aaf>, <DisassemblerInsn "mov" for 0x400ab2>, <DisassemblerInsn "movsxd" for 0x400ab9>, <DisassemblerInsn "add" for 0x400abc>, <DisassemblerInsn "mov" for 0x400abf>, <DisassemblerInsn "movsxd" for 0x400ac7>, <DisassemblerInsn "call" for 0x400aca>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "mov" for 0x400a2f>, <DisassemblerInsn "lea" for 0x400a34>, <DisassemblerInsn "mov" for 0x400a3b>, <DisassemblerInsn "call" for 0x400a3d>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "mov" for 0x40076a>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400778>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "add" for 0x400796>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a3>, <DisassemblerInsn "sub" for 0x4007ab>, <DisassemblerInsn "cmp" for 0x4007ae>, <DisassemblerInsn "jl" for 0x4007b1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004f9>, <DisassemblerInsn "movzx" for 0x400501>, <DisassemblerInsn "shl" for 0x400504>, <DisassemblerInsn "movzx" for 0x400507>, <DisassemblerInsn "shl" for 0x40050b>, <DisassemblerInsn "or" for 0x40050e>, <DisassemblerInsn "movzx" for 0x400510>, <DisassemblerInsn "or" for 0x400514>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "setne" for 0x40051d>, <DisassemblerInsn "sub" for 0x400520>, <DisassemblerInsn "setb" for 0x400523>, <DisassemblerInsn "and" for 0x400526>, <DisassemblerInsn "test" for 0x400528>, <DisassemblerInsn "jne" for 0x40052a>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "cmp" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "je" for 0x4001e4>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "shl" for 0x400607>, <DisassemblerInsn "and" for 0x40060a>, <DisassemblerInsn "add" for 0x40060d>, <DisassemblerInsn "cmp" for 0x400610>, <DisassemblerInsn "cmovb" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "xor" for 0x40061c>, <DisassemblerInsn "mov" for 0x40061e>, <DisassemblerInsn "mov" for 0x400626>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "jmp" for 0x40063b>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c81>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "mov" for 0x400c90>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400ca4>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb3>, <DisassemblerInsn "add" for 0x400cb6>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "cmp" for 0x400cc5>, <DisassemblerInsn "jge" for 0x400ccb>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ddd>, <DisassemblerInsn "mov" for 0x400de5>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "shr" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e23>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "and" for 0x400e2d>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "shr" for 0x400e37>, <DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "shl" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4e>, <DisassemblerInsn "sar" for 0x400e56>, <DisassemblerInsn "mov" for 0x400e5a>, <DisassemblerInsn "add" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "cmp" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "cmova" for 0x400e74>, <DisassemblerInsn "mov" for 0x400e78>, <DisassemblerInsn "mov" for 0x400e80>, <DisassemblerInsn "mov" for 0x400e84>, <DisassemblerInsn "shr" for 0x400e87>, <DisassemblerInsn "mov" for 0x400e8a>, <DisassemblerInsn "mov" for 0x400e91>, <DisassemblerInsn "mov" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "and" for 0x400e99>, <DisassemblerInsn "mov" for 0x400e9c>, <DisassemblerInsn "shr" for 0x400ea3>, <DisassemblerInsn "mov" for 0x400ea5>, <DisassemblerInsn "mov" for 0x400ead>, <DisassemblerInsn "shl" for 0x400eb4>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "sar" for 0x400ebe>, <DisassemblerInsn "mov" for 0x400ec1>, <DisassemblerInsn "add" for 0x400ec8>, <DisassemblerInsn "mov" for 0x400ecc>, <DisassemblerInsn "cmp" for 0x400ed4>, <DisassemblerInsn "cmova" for 0x400ed7>, <DisassemblerInsn "mov" for 0x400edb>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "add" for 0x400ee6>, <DisassemblerInsn "mov" for 0x400eea>, <DisassemblerInsn "cmp" for 0x400ef2>, <DisassemblerInsn "mov" for 0x400ef5>, <DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "jne" for 0x400f04>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400372>, <DisassemblerInsn "mov" for 0x400375>, <DisassemblerInsn "jl" for 0x40037c>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401236>, <DisassemblerInsn "mov" for 0x40123d>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "mov" for 0x40124c>, <DisassemblerInsn "sub" for 0x401251>, <DisassemblerInsn "mov" for 0x401253>, <DisassemblerInsn "shr" for 0x401258>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "add" for 0x40126c>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "add" for 0x40127e>, <DisassemblerInsn "mov" for 0x401285>, <DisassemblerInsn "add" for 0x40128d>, <DisassemblerInsn "mov" for 0x401291>, <DisassemblerInsn "mov" for 0x401299>, <DisassemblerInsn "mov" for 0x40129c>, <DisassemblerInsn "add" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "xor" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b2>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c9>, <DisassemblerInsn "mov" for 0x4012d1>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "mov" for 0x4012e0>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "mov" for 0x4012ee>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012fd>, <DisassemblerInsn "mov" for 0x401305>, <DisassemblerInsn "mov" for 0x401308>, <DisassemblerInsn "mov" for 0x401310>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "cmp" for 0x40131d>, <DisassemblerInsn "mov" for 0x401320>, <DisassemblerInsn "mov" for 0x401327>, <DisassemblerInsn "mov" for 0x40132f>, <DisassemblerInsn "jle" for 0x401336>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ca4>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb3>, <DisassemblerInsn "add" for 0x400cb6>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "cmp" for 0x400cc5>, <DisassemblerInsn "jge" for 0x400ccb>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "add" for 0x40019f>, <DisassemblerInsn "call" for 0x4001a6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "add" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "cmp" for 0x4000d6>, <DisassemblerInsn "setl" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "test" for 0x4000e3>, <DisassemblerInsn "jne" for 0x4000e5>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400945>, <DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400955>, <DisassemblerInsn "shl" for 0x40095c>, <DisassemblerInsn "sar" for 0x400960>, <DisassemblerInsn "add" for 0x400964>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "mov" for 0x40097e>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "mov" for 0x400995>, <DisassemblerInsn "test" for 0x40099c>, <DisassemblerInsn "setg" for 0x40099e>, <DisassemblerInsn "mov" for 0x4009a2>, <DisassemblerInsn "sub" for 0x4009a5>, <DisassemblerInsn "setb" for 0x4009a8>, <DisassemblerInsn "and" for 0x4009ac>, <DisassemblerInsn "test" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009c1>, <DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "jne" for 0x4009d1>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5f>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "mov" for 0x400c6e>, <DisassemblerInsn "shl" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "mov" for 0x400c7a>, <DisassemblerInsn "call" for 0x400c7c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "add" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003cc>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "lea" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "call" for 0x4000ff>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b2a>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "add" for 0x401185>, <DisassemblerInsn "cmp" for 0x401189>, <DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "jne" for 0x4011a4>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "movzx" for 0x4001fa>, <DisassemblerInsn "add" for 0x4001fd>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "sub" for 0x400202>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmovb" for 0x40020d>, <DisassemblerInsn "add" for 0x400210>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "xor" for 0x40021d>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "add" for 0x40025a>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "cmp" for 0x400266>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "jae" for 0x400271>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "mov" for 0x400423>, <DisassemblerInsn "mov" for 0x40042b>, <DisassemblerInsn "imul" for 0x40042d>, <DisassemblerInsn "movsxd" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "mov" for 0x401996>, <DisassemblerInsn "call" for 0x40199e>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "movzx" for 0x40029b>, <DisassemblerInsn "shl" for 0x40029f>, <DisassemblerInsn "movzx" for 0x4002a3>, <DisassemblerInsn "shl" for 0x4002a7>, <DisassemblerInsn "or" for 0x4002aa>, <DisassemblerInsn "movzx" for 0x4002ad>, <DisassemblerInsn "or" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "add" for 0x4002bb>, <DisassemblerInsn "add" for 0x4002bf>, <DisassemblerInsn "cmp" for 0x4002c3>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d9>, <DisassemblerInsn "jne" for 0x4002e1>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "add" for 0x400b3a>, <DisassemblerInsn "mov" for 0x400b3e>, <DisassemblerInsn "cmp" for 0x400b46>, <DisassemblerInsn "jne" for 0x400b4b>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400889>, <DisassemblerInsn "mov" for 0x400890>, <DisassemblerInsn "mov" for 0x400898>, <DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008ae>, <DisassemblerInsn "mov" for 0x4008b6>, <DisassemblerInsn "cmp" for 0x4008be>, <DisassemblerInsn "mov" for 0x4008c1>, <DisassemblerInsn "mov" for 0x4008c9>, <DisassemblerInsn "jle" for 0x4008d0>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d7b>, <DisassemblerInsn "mov" for 0x400d83>, <DisassemblerInsn "or" for 0x400d8a>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "cmp" for 0x400d94>, <DisassemblerInsn "je" for 0x400d98>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bb6>, <DisassemblerInsn "mov" for 0x400bbe>, <DisassemblerInsn "mov" for 0x400bc1>, <DisassemblerInsn "movzx" for 0x400bc9>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "movzx" for 0x400bd3>, <DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "mov" for 0x400bde>, <DisassemblerInsn "mov" for 0x400be2>, <DisassemblerInsn "movzx" for 0x400bea>, <DisassemblerInsn "mov" for 0x400bed>, <DisassemblerInsn "mov" for 0x400bf4>, <DisassemblerInsn "movzx" for 0x400bf8>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "add" for 0x400c02>, <DisassemblerInsn "cmp" for 0x400c06>, <DisassemblerInsn "jb" for 0x400c0a>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d1>, <DisassemblerInsn "test" for 0x4003d8>, <DisassemblerInsn "jne" for 0x4003da>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "shl" for 0x400716>, <DisassemblerInsn "and" for 0x400719>, <DisassemblerInsn "movzx" for 0x40071e>, <DisassemblerInsn "or" for 0x400722>, <DisassemblerInsn "add" for 0x400725>, <DisassemblerInsn "shr" for 0x400727>, <DisassemblerInsn "and" for 0x40072a>, <DisassemblerInsn "add" for 0x40072d>, <DisassemblerInsn "mov" for 0x400730>, <DisassemblerInsn "mov" for 0x400735>, <DisassemblerInsn "mov" for 0x40073d>, <DisassemblerInsn "mov" for 0x400744>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "mov" for 0x40076a>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400778>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "add" for 0x400796>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a3>, <DisassemblerInsn "sub" for 0x4007ab>, <DisassemblerInsn "cmp" for 0x4007ae>, <DisassemblerInsn "jl" for 0x4007b1>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400165>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400174>, <DisassemblerInsn "je" for 0x40017a>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4019a3>, <DisassemblerInsn "mov" for 0x4019a6>, <DisassemblerInsn "jl" for 0x4019ad>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "mov" for 0x4006b8>, <DisassemblerInsn "shr" for 0x4006bb>, <DisassemblerInsn "movzx" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "and" for 0x4006c5>, <DisassemblerInsn "rol" for 0x4006c9>, <DisassemblerInsn "add" for 0x4006cd>, <DisassemblerInsn "movzx" for 0x4006d1>, <DisassemblerInsn "and" for 0x4006d4>, <DisassemblerInsn "add" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006da>, <DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "mov" for 0x4006f5>, <DisassemblerInsn "jmp" for 0x4006fc>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000b6>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "and" for 0x4005e2>, <DisassemblerInsn "cmp" for 0x4005e5>, <DisassemblerInsn "je" for 0x4005e8>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196d>, <DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "jmp" for 0x401979>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "mov" for 0x4007be>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007ce>, <DisassemblerInsn "cmp" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "mov" for 0x4007e8>, <DisassemblerInsn "jle" for 0x4007ef>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400485>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "mov" for 0x400490>, <DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "mov" for 0x400499>, <DisassemblerInsn "imul" for 0x40049f>, <DisassemblerInsn "movsxd" for 0x4004a2>, <DisassemblerInsn "add" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "and" for 0x4004b3>, <DisassemblerInsn "mov" for 0x4004b7>, <DisassemblerInsn "mov" for 0x4004bc>, <DisassemblerInsn "cmp" for 0x4004c1>, <DisassemblerInsn "cmove" for 0x4004c5>, <DisassemblerInsn "add" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "add" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004d8>, <DisassemblerInsn "cmp" for 0x4004e0>, <DisassemblerInsn "ja" for 0x4004e3>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "mov" for 0x40097e>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "mov" for 0x400995>, <DisassemblerInsn "test" for 0x40099c>, <DisassemblerInsn "setg" for 0x40099e>, <DisassemblerInsn "mov" for 0x4009a2>, <DisassemblerInsn "sub" for 0x4009a5>, <DisassemblerInsn "setb" for 0x4009a8>, <DisassemblerInsn "and" for 0x4009ac>, <DisassemblerInsn "test" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009c1>, <DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "jne" for 0x4009d1>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c0c>, <DisassemblerInsn "mov" for 0x400c13>, <DisassemblerInsn "mov" for 0x400c1b>, <DisassemblerInsn "mov" for 0x400c1e>, <DisassemblerInsn "lea" for 0x400c23>, <DisassemblerInsn "mov" for 0x400c2a>, <DisassemblerInsn "call" for 0x400c2c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "sub" for 0x400824>, <DisassemblerInsn "mov" for 0x400827>, <DisassemblerInsn "sub" for 0x40082e>, <DisassemblerInsn "cmp" for 0x400831>, <DisassemblerInsn "cmovl" for 0x400834>, <DisassemblerInsn "shl" for 0x400838>, <DisassemblerInsn "sar" for 0x40083c>, <DisassemblerInsn "mov" for 0x400840>, <DisassemblerInsn "call" for 0x400848>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019af>, <DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "mov" for 0x4019be>, <DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "mov" for 0x4019cb>, <DisassemblerInsn "add" for 0x4019d2>, <DisassemblerInsn "pop" for 0x4019d9>, <DisassemblerInsn "ret" for 0x4019da>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000e7>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011c0>, <DisassemblerInsn "sub" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "mov" for 0x4011d0>, <DisassemblerInsn "mov" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011db>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "cdq" for 0x4011ed>, <DisassemblerInsn "idiv" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f0>, <DisassemblerInsn "mov" for 0x4011f7>, <DisassemblerInsn "mov" for 0x4011f9>, <DisassemblerInsn "imul" for 0x401201>, <DisassemblerInsn "mov" for 0x401204>, <DisassemblerInsn "mov" for 0x40120a>, <DisassemblerInsn "cdq" for 0x40120f>, <DisassemblerInsn "idiv" for 0x401210>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x401214>, <DisassemblerInsn "imul" for 0x40121b>, <DisassemblerInsn "cmp" for 0x40121e>, <DisassemblerInsn "jl" for 0x401220>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c8>, <DisassemblerInsn "and" for 0x4005cf>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "je" for 0x4005d5>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a42>, <DisassemblerInsn "xor" for 0x400a47>, <DisassemblerInsn "mov" for 0x400a49>, <DisassemblerInsn "mov" for 0x400a50>, <DisassemblerInsn "jmp" for 0x400a57>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "jmp" for 0x400114>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b7b>, <DisassemblerInsn "mov" for 0x400b83>, <DisassemblerInsn "mov" for 0x400b8b>, <DisassemblerInsn "mov" for 0x400b93>, <DisassemblerInsn "mov" for 0x400b9a>, <DisassemblerInsn "add" for 0x400ba1>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "cmp" for 0x400bad>, <DisassemblerInsn "ja" for 0x400bb0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40039c>, <DisassemblerInsn "mov" for 0x40039f>, <DisassemblerInsn "jl" for 0x4003a6>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "test" for 0x400b1a>, <DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "jne" for 0x400b24>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b68>, <DisassemblerInsn "mov" for 0x400b6f>, <DisassemblerInsn "jmp" for 0x400b76>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "movzx" for 0x400dbd>, <DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "xor" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "xor" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400ddd>, <DisassemblerInsn "mov" for 0x400de5>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "shr" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e23>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "and" for 0x400e2d>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "shr" for 0x400e37>, <DisassemblerInsn "mov" for 0x400e3a>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "shl" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4e>, <DisassemblerInsn "sar" for 0x400e56>, <DisassemblerInsn "mov" for 0x400e5a>, <DisassemblerInsn "add" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e66>, <DisassemblerInsn "cmp" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "cmova" for 0x400e74>, <DisassemblerInsn "mov" for 0x400e78>, <DisassemblerInsn "mov" for 0x400e80>, <DisassemblerInsn "mov" for 0x400e84>, <DisassemblerInsn "shr" for 0x400e87>, <DisassemblerInsn "mov" for 0x400e8a>, <DisassemblerInsn "mov" for 0x400e91>, <DisassemblerInsn "mov" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "and" for 0x400e99>, <DisassemblerInsn "mov" for 0x400e9c>, <DisassemblerInsn "shr" for 0x400ea3>, <DisassemblerInsn "mov" for 0x400ea5>, <DisassemblerInsn "mov" for 0x400ead>, <DisassemblerInsn "shl" for 0x400eb4>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "sar" for 0x400ebe>, <DisassemblerInsn "mov" for 0x400ec1>, <DisassemblerInsn "add" for 0x400ec8>, <DisassemblerInsn "mov" for 0x400ecc>, <DisassemblerInsn "cmp" for 0x400ed4>, <DisassemblerInsn "cmova" for 0x400ed7>, <DisassemblerInsn "mov" for 0x400edb>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "add" for 0x400ee6>, <DisassemblerInsn "mov" for 0x400eea>, <DisassemblerInsn "cmp" for 0x400ef2>, <DisassemblerInsn "mov" for 0x400ef5>, <DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "jne" for 0x400f04>]'}], 'cfg_block_detailed_info': [{'block_Idx': 25, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jae~~0x4002e7>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x34e]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<lea~~rdx, [rsp + 0x580]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x278], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x280], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<mov~~rcx, qword ptr [rsp + 0x288]>', '<mov~~eax, dword ptr [rsp + 0x294]>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x268], rcx>', '<mov~~dword ptr [rsp + 0x274], eax>', '<mov~~esi, dword ptr [rsp + 0x274]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~eax, dword ptr [rsp + 0x2a4]>', '<mov~~rcx, qword ptr [rsp + 0x298]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x230], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x234], ecx>', '<shr~~edi, cl>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~ecx, edi>', '<and~~ecx, 0xff>', '<mov~~dword ptr [rsp + 0x23c], ecx>', '<add~~esi, 8>', '<mov~~dword ptr [rsp + 0x240], esi>', '<cmp~~eax, esi>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x244], eax>', '<mov~~dword ptr [rsp + rdx*4 + 0x580], ecx>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x248], rdx>', '<xor~~ecx, ecx>', '<cmp~~rdx, 4>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x274], edx>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<jne~~0x400fdc>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, 0xc1444e49>', '<mov~~al, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x490], ecx>', '<mov~~byte ptr [rsp + 0x497], al>', '<jle~~0x400b0c>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d4]>', '<cmp~~eax, 3>', '<jle~~0x40197b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x498]>', '<mov~~qword ptr [rax], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x490], ecx>', '<mov~~byte ptr [rsp + 0x497], al>', '<je~~0x400b0c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x504]>', '<mov~~esi, dword ptr [rsp + 0x500]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<call~~0x500008>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x540]>', '<mov~~rcx, qword ptr [rsp + 0x568]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x500], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x504], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x508], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x40017c>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf0e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x527]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, 0xc1444e49>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x4019cb>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x344]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x338], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400ca4>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x550]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x400b2f>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x138]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x4009d7>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x550]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 8], rdi>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x590>', '<mov~~qword ptr [rsp + 0x528], rdi>', '<mov~~qword ptr [rsp + 0x530], rsi>', '<mov~~qword ptr [rsp + 0x538], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x540], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x54c], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x550], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x558], rcx>', '<mov~~qword ptr [rsp + 0x560], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x568], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x577], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x578], rax>', '<jne~~0x4000bb>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x350]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x590>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x34e]>', '<mov~~rsi, qword ptr [rsp + 0x328]>', '<mov~~rax, qword ptr [rsp + 0x558]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x2a0], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x2a4], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x2a8], eax>', '<je~~0x4011aa>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<add~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x398], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x3a4], eax>', '<jmp~~0x400a5c>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0x530]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<cmp~~qword ptr [rax + 0x238], 0>', '<jne~~0x400465>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3fc]>', '<mov~~rdx, qword ptr [rsp + 0x470]>', '<mov~~rax, qword ptr [rsp + 0x3c0]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x4009d7>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~edx, dword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x348]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x344]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x31c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x320], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x328], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401952>']}, {'block_Idx': 69, 'blockInsts': ['<jmp~~0x401952>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x3c0]>', '<mov~~esi, dword ptr [rsp + 0x3fc]>', '<mov~~rcx, qword ptr [rsp + 0x478]>', '<mov~~eax, dword ptr [rsp + 0x400]>', '<mov~~edx, dword ptr [rsp + 0x3b4]>', '<sub~~edx, eax>', '<mov~~dword ptr [rsp + 0x3b0], edx>', '<cdqe~~>', '<sub~~rcx, rdi>', '<cmp~~rcx, rax>', '<cmovl~~rax, rcx>', '<mov~~qword ptr [rsp + 0x3a8], rax>', '<mov~~edx, eax>', '<call~~0x500040>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x40197b>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x470]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x46c]>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x460], rax>', '<mov~~ecx, dword ptr [rsp + 0x42c]>', '<mov~~edx, dword ptr [rsp + 0x454]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~rsi, qword ptr [rsp + 0x460]>', '<mov~~qword ptr [rsp + 0x430], rsi>', '<mov~~qword ptr [rsp + 0x438], rax>', '<mov~~dword ptr [rsp + 0x440], edx>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x44c], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006fe>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x450]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~ecx, dword ptr [rsp + 0x44c]>', '<mov~~eax, ecx>', '<shl~~eax, 0xc>', '<and~~eax, 0x10000>', '<mov~~di, word ptr [rsi + 1]>', '<rol~~di, 8>', '<movzx~~edi, di>', '<or~~eax, 1>', '<add~~eax, edi>', '<shl~~ecx, 6>', '<and~~ecx, 0x300>', '<movzx~~esi, byte ptr [rsi + 3]>', '<or~~ecx, 5>', '<add~~ecx, esi>', '<mov~~esi, 4>', '<mov~~qword ptr [rsp + 0x418], rsi>', '<mov~~dword ptr [rsp + 0x420], edx>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~dword ptr [rsp + 0x428], eax>', '<jmp~~0x400752>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x528]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x578]>', '<mov~~qword ptr [rsp + 0x4a0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x4a8], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x4b0], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x42c]>', '<mov~~edx, dword ptr [rsp + 0x454]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~rsi, qword ptr [rsp + 0x460]>', '<mov~~qword ptr [rsp + 0x430], rsi>', '<mov~~qword ptr [rsp + 0x438], rax>', '<mov~~dword ptr [rsp + 0x440], edx>', '<mov~~dword ptr [rsp + 0x444], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x44b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x44c], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x450], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006fe>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x330]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~edx, dword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x348]>', '<mov~~rax, qword ptr [rsp + 0x358]>', '<mov~~edi, dword ptr [rsp + 0x344]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x31c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x320], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x328], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401952>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x560]>', '<mov~~rdi, qword ptr [rsp + 0x528]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3a4]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~r8, qword ptr [rsp + 0x398]>', '<mov~~rsi, qword ptr [rsp + 0x390]>', '<mov~~dword ptr [rsp + 0x388], edx>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~esi, edx>', '<imul~~esi, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0x36c], esi>', '<movsxd~~rsi, esi>', '<add~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x370], rdi>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, eax>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x37c], ecx>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x380], rsi>', '<movsxd~~rdx, eax>', '<call~~0x500030>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x101d]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdx, qword ptr [rsp + 0x438]>', '<mov~~rsi, qword ptr [rsp + 0x418]>', '<mov~~ecx, dword ptr [rsp + 0x420]>', '<mov~~edi, dword ptr [rsp + 0x424]>', '<mov~~r8d, dword ptr [rsp + 0x428]>', '<mov~~dword ptr [rsp + 0x3fc], r8d>', '<mov~~dword ptr [rsp + 0x400], edi>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x408], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009d7>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rsi, qword ptr [rsp + 0x480]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x46c], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400531>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4fe], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x510], rax>', '<je~~0x4002e7>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x444]>', '<mov~~edx, dword ptr [rsp + 0x450]>', '<mov~~sil, byte ptr [rsp + 0x44b]>', '<mov~~ecx, dword ptr [rsp + 0x44c]>', '<shl~~ecx, 2>', '<and~~ecx, 0x7c>', '<add~~ecx, 4>', '<cmp~~sil, 0xfc>', '<cmovb~~edx, ecx>', '<mov~~esi, 1>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x418], rsi>', '<mov~~dword ptr [rsp + 0x420], edx>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~dword ptr [rsp + 0x428], eax>', '<jmp~~0x400752>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x344]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400d12>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x314]>', '<mov~~rdi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rsi, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x2ac], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2b4], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2b8], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2bc], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x2c0], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x2c4], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x2c8], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2cc], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2e8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<jne~~0x400ddd>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x4019cb>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~esi, dword ptr [rsp + 0x354]>', '<mov~~ecx, 0x20>', '<sub~~ecx, esi>', '<mov~~esi, 0xffffffff>', '<shr~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x530]>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x650>', '<mov~~qword ptr [rsp + 0x198], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x648>', '<mov~~qword ptr [rsp + 0x1a0], rsi>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0x1a8], rdx>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x15c], edx>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~qword ptr [rsp + 0x178], rsi>', '<mov~~esi, dword ptr [rsi + 0x94]>', '<mov~~dword ptr [rsp + 0x180], esi>', '<cmp~~esi, 3>', '<mov~~dword ptr [rsp + 0x184], edx>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~dword ptr [rsp + 0x190], eax>', '<jle~~0x4018d9>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x350]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x330], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400d12>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x550]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54c]>', '<mov~~rcx, qword ptr [rsp + 0x540]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x518], rcx>', '<cmp~~eax, 0x14>', '<setl~~al>', '<mov~~byte ptr [rsp + 0x527], al>', '<test~~al, 1>', '<jne~~0x4000e9>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x3c0]>', '<mov~~eax, dword ptr [rsp + 0x3b0]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<mov~~rcx, qword ptr [rsp + 0x3b8]>', '<mov~~esi, dword ptr [rsp + 0x3fc]>', '<mov~~r9, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x3c8]>', '<mov~~edx, dword ptr [rsp + 0x3d4]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x42c], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x460], rax>', '<jne~~0x40055f>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x344]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0x530]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x528]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x1949]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x4019cb>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x204]>', '<mov~~rdx, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x260]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x294], ecx>', '<mov~~dword ptr [rsp + 0x2a8], eax>', '<jne~~0x400fb4>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x518]>', '<mov~~cx, word ptr [rsp + 0x4fe]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~rdx, qword ptr [rsp + 0x558]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jae~~0x4002e7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~eax, dword ptr [rax]>', '<imul~~eax, dword ptr [rcx]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x560]>', '<call~~0x500050>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, qword ptr [rsp + 0x4d0]>', '<mov~~rax, qword ptr [rsp + 0x4c8]>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~r8, qword ptr [rsp + 0x4d8]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e8], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4f0], rcx>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jne~~0x40022f>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400b7b>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rsp + 0x3e8]>', '<mov~~rsi, qword ptr [rsp + 0x3f0]>', '<mov~~eax, dword ptr [rsp + 0x3f8]>', '<mov~~dword ptr [rsp + 0x3b4], eax>', '<mov~~qword ptr [rsp + 0x3b8], rsi>', '<mov~~qword ptr [rsp + 0x3c0], rcx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~dword ptr [rsp + 0x3d4], eax>', '<jle~~0x400976>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x342]>', '<mov~~ecx, dword ptr [rsp + 0x31c]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x318], ecx>', '<cmp~~ax, 0>', '<je~~0x400f0a>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x342], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x344], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x348], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x34e], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x354], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400c36>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x577]>', '<test~~al, 1>', '<jne~~0x4003e1>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x450]>', '<mov~~ecx, dword ptr [rsp + 0x44c]>', '<mov~~rsi, qword ptr [rsp + 0x438]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x418], rsi>', '<mov~~dword ptr [rsp + 0x420], edx>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~dword ptr [rsp + 0x428], eax>', '<mov~~rax, qword ptr [rsp + 0x558]>', '<mov~~rdx, qword ptr [rsp + 0x438]>', '<mov~~rsi, qword ptr [rsp + 0x418]>', '<mov~~ecx, dword ptr [rsp + 0x420]>', '<mov~~edi, dword ptr [rsp + 0x424]>', '<mov~~r8d, dword ptr [rsp + 0x428]>', '<mov~~dword ptr [rsp + 0x3fc], r8d>', '<mov~~dword ptr [rsp + 0x400], edi>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x408], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009d7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~ecx, dword ptr [rsp + 0x504]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001bc>']}, {'block_Idx': 94, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x4019cb>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44c]>', '<mov~~rax, qword ptr [rsp + 0x438]>', '<mov~~dl, byte ptr [rax + 1]>', '<shr~~dl, 6>', '<movzx~~edx, dl>', '<mov~~ax, word ptr [rax + 1]>', '<and~~ax, 0xff3f>', '<rol~~ax, 8>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<and~~ecx, 0x3f>', '<add~~ecx, 4>', '<mov~~esi, 3>', '<mov~~qword ptr [rsp + 0x418], rsi>', '<mov~~dword ptr [rsp + 0x420], edx>', '<mov~~dword ptr [rsp + 0x424], ecx>', '<mov~~dword ptr [rsp + 0x428], eax>', '<jmp~~0x400752>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x400313>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44c]>', '<and~~eax, 0x20>', '<cmp~~eax, 0>', '<je~~0x400640>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jmp~~0x4019cb>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x440]>', '<mov~~rcx, qword ptr [rsp + 0x408]>', '<mov~~rdx, qword ptr [rsp + 0x430]>', '<mov~~esi, dword ptr [rsp + 0x404]>', '<cmp~~esi, 0>', '<mov~~qword ptr [rsp + 0x3e8], rdx>', '<mov~~qword ptr [rsp + 0x3f0], rcx>', '<mov~~dword ptr [rsp + 0x3f8], eax>', '<jle~~0x400889>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x470], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x478], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x480], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x488], rax>', '<cmp~~rax, rcx>', '<ja~~0x400a27>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3b8]>', '<mov~~esi, dword ptr [rsp + 0x3fc]>', '<mov~~r9, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x3c8]>', '<mov~~edx, dword ptr [rsp + 0x3d4]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x42c], esi>', '<mov~~dword ptr [rsp + 0x454], edx>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x460], rax>', '<jne~~0x40055f>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x354]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xe8b]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x408]>', '<mov~~rdi, qword ptr [rsp + 0x430]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rsp + 0x478]>', '<mov~~r8d, dword ptr [rsp + 0x404]>', '<mov~~ecx, dword ptr [rsp + 0x440]>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<sub~~rax, rdi>', '<cmp~~rax, rdx>', '<cmovl~~rdx, rax>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x3d8], rdx>', '<call~~0x500030>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54c]>', '<mov~~rcx, qword ptr [rsp + 0x538]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<mov~~eax, dword ptr [rsp + 0x4c4]>', '<add~~rsp, 0x590>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<jmp~~0x400119>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x550]>', '<mov~~ecx, dword ptr [rsp + 0x2a0]>', '<mov~~edx, dword ptr [rsp + 0x2a8]>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x1e4], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x354]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1e4]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x401952>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44c]>', '<and~~eax, 0x40>', '<cmp~~eax, 0>', '<je~~0x4006a9>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~ecx, 0xc1444e49>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x490], ecx>', '<mov~~byte ptr [rsp + 0x497], al>', '<jmp~~0x400b0c>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x568]>', '<mov~~qword ptr [rsp + 0x510], rax>', '<jmp~~0x4002e7>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x530]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x358], rax>', '<cmp~~rax, rcx>', '<ja~~0x401952>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jl~~0x4019cb>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x490]>', '<mov~~cl, byte ptr [rsp + 0x497]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jne~~0x40197b>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54c]>', '<mov~~dword ptr [rsp + 0x4c4], eax>', '<jmp~~0x4019cb>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x342]>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x300], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<mov~~r10d, dword ptr [rsp + 0x314]>', '<mov~~rdi, qword ptr [rsp + 0x308]>', '<mov~~rdx, qword ptr [rsp + 0x300]>', '<mov~~rsi, qword ptr [rsp + 0x2f8]>', '<mov~~eax, dword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x2ac], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2b4], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2b8], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x2bc], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x2c0], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x2c4], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x2c8], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x2cc], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2e4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2e8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ec], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2f0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x308], rcx>', '<mov~~dword ptr [rsp + 0x314], eax>', '<jne~~0x400ddd>']}], 'cfg_edge_info': [(41, 49), (17, 3), (22, 17), (38, 44), (93, 86), (7, 10), (52, 51), (42, 59), (5, 12), (2, 4), (48, 56), (102, 91), (75, 74), (57, 68), (69, 42), (89, 54), (31, 33), (76, 74), (68, 79), (36, 41), (43, 34), (45, 53), (96, 101), (54, 65), (74, 52), (47, 13), (20, 26), (0, 2), (100, 89), (9, 14), (85, 79), (1, 3), (10, 15), (25, 22), (62, 71), (79, 87), (29, 31), (51, 61), (22, 25), (74, 63), (14, 21), (86, 92), (80, 94), (34, 39), (53, 52), (63, 72), (12, 17), (94, 13), (59, 13), (52, 62), (38, 45), (19, 22), (39, 55), (55, 51), (25, 17), (89, 53), (7, 11), (53, 63), (83, 52), (21, 13), (56, 77), (68, 42), (87, 86), (60, 13), (65, 76), (11, 20), (100, 52), (54, 64), (85, 42), (32, 36), (82, 89), (77, 68), (41, 48), (3, 9), (21, 24), (67, 85), (19, 17), (36, 42), (91, 42), (45, 54), (29, 30), (72, 83), (51, 60), (86, 91), (17, 13), (61, 80), (34, 38), (57, 67), (26, 15), (90, 100), (96, 61), (107, 61), (2, 5), (48, 57), (63, 73), (15, 17), (24, 29), (64, 74), (43, 51), (35, 47), (0, 1), (31, 34), (82, 52), (10, 11), (9, 13), (65, 75), (83, 90), (30, 32), (94, 99), (15, 19), (32, 35), (77, 67), (79, 86), (4, 7), (33, 43), (44, 52), (91, 96), (49, 69)], 'cdg_edge_info': [(68, 91), (41, 49), (7, 26), (17, 3), (29, 32), (91, 80), (51, 80), (85, 91), (41, 42), (52, 51), (29, 34), (68, 59), (2, 4), (57, 68), (68, 13), (89, 54), (85, 59), (31, 33), (77, 85), (85, 13), (0, 9), (9, 21), (85, 86), (68, 79), (36, 41), (43, 34), (54, 65), (36, 59), (91, 59), (74, 52), (36, 13), (91, 13), (17, 9), (0, 2), (100, 89), (51, 13), (9, 14), (85, 79), (25, 22), (34, 55), (91, 61), (29, 31), (22, 25), (51, 61), (74, 63), (41, 69), (38, 52), (34, 39), (53, 52), (68, 86), (94, 13), (52, 62), (21, 29), (52, 71), (32, 13), (19, 22), (89, 53), (2, 15), (7, 11), (53, 63), (83, 52), (21, 13), (68, 42), (89, 74), (65, 76), (100, 52), (54, 64), (83, 100), (85, 42), (32, 36), (77, 68), (41, 48), (21, 24), (36, 42), (91, 42), (32, 47), (29, 30), (51, 60), (41, 59), (41, 13), (17, 13), (34, 38), (2, 12), (57, 85), (7, 20), (2, 5), (48, 57), (0, 17), (63, 73), (43, 51), (0, 1), (9, 13), (31, 43), (2, 7), (91, 94), (65, 75), (83, 90), (34, 51), (94, 99), (51, 94), (48, 77), (15, 19), (32, 35), (0, 3), (91, 96)], 'ddg_edge_info': [(24, 33), (41, 49), (33, 100), (24, 42), (33, 54), (22, 17), (17, 3), (90, 51), (34, 83), (33, 63), (24, 51), (0, 5), (31, 38), (74, 73), (39, 51), (0, 14), (41, 79), (9, 99), (24, 90), (33, 38), (24, 35), (52, 51), (15, 32), (24, 99), (35, 99), (90, 99), (42, 59), (5, 3), (90, 53), (39, 99), (5, 99), (0, 62), (5, 12), (29, 43), (5, 21), (0, 7), (14, 24), (75, 74), (3, 33), (0, 80), (24, 65), (3, 42), (24, 74), (7, 3), (90, 74), (89, 54), (24, 83), (90, 83), (26, 25), (89, 63), (31, 33), (77, 85), (76, 74), (3, 35), (43, 71), (85, 86), (14, 99), (3, 99), (80, 99), (24, 76), (90, 76), (43, 34), (24, 85), (89, 65), (79, 94), (64, 75), (0, 48), (39, 94), (20, 26), (0, 2), (100, 89), (85, 79), (41, 85), (52, 94), (96, 94), (33, 90), (25, 22), (62, 71), (0, 32), (33, 99), (74, 100), (24, 96), (29, 77), (34, 73), (5, 9), (22, 25), (74, 63), (3, 21), (14, 21), (24, 53), (33, 65), (24, 62), (80, 94), (90, 62), (33, 74), (24, 71), (90, 71), (33, 83), (0, 25), (24, 89), (90, 89), (0, 34), (12, 17), (3, 14), (0, 61), (75, 64), (64, 100), (24, 64), (90, 64), (33, 76), (19, 22), (39, 55), (90, 73), (55, 51), (25, 17), (2, 15), (7, 11), (89, 53), (24, 73), (0, 91), (0, 36), (0, 100), (24, 39), (89, 74), (3, 71), (33, 51), (24, 48), (7, 32), (0, 11), (24, 75), (90, 75), (11, 20), (0, 20), (31, 53), (2, 17), (42, 99), (0, 29), (0, 38), (31, 71), (0, 47), (41, 48), (3, 9), (24, 32), (24, 41), (89, 76), (31, 89), (33, 53), (33, 62), (33, 71), (59, 99), (0, 77), (0, 22), (33, 89), (3, 39), (0, 86), (2, 19), (0, 31), (31, 64), (74, 90), (26, 22), (29, 85), (24, 34), (29, 94), (49, 42), (7, 91), (86, 91), (24, 52), (90, 52), (21, 99), (33, 64), (61, 80), (41, 77), (90, 61), (24, 61), (33, 73), (34, 38), (0, 15), (47, 99), (74, 83), (39, 61), (3, 41), (2, 21), (0, 24), (26, 15), (51, 99), (75, 100), (31, 75), (15, 24), (24, 91), (33, 39), (24, 36), (24, 100), (90, 100), (24, 54), (90, 54), (24, 63), (90, 63), (33, 75), (0, 17), (3, 34), (0, 26), (41, 91), (3, 52), (26, 17), (15, 17), (0, 99), (24, 29), (89, 64), (53, 74), (89, 73), (43, 51), (64, 74), (26, 99), (35, 47), (24, 38), (31, 34), (7, 49), (36, 85), (90, 65), (31, 43), (0, 74), (3, 36), (0, 19), (31, 52), (17, 99), (94, 99), (48, 77), (51, 94), (24, 77), (15, 19), (26, 19), (24, 86), (33, 34), (24, 31), (7, 24), (33, 43), (89, 75), (33, 52), (24, 49), (0, 49), (33, 61), (64, 94), (34, 90), (5, 17), (0, 3), (0, 12), (2, 9), (19, 25), (91, 96), (26, 3), (0, 85), (41, 86), (24, 79)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 47, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 48, 'instruction': 'movl\t%ecx, 0x500(%rsp)                # 4-byte Spill'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 50, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 51, 'instruction': 'movl\t%edx, 0x504(%rsp)                # 4-byte Spill'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 53, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 54, 'instruction': 'movq\t%rax, 0x508(%rsp)                # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 56, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 59, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 60, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 64, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 66, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 67, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 69, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 70, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 73, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 74, 'instruction': 'movw\t%cx, 0x4fe(%rsp)                 # 2-byte Spill'}, {'instIndex': 80, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 136, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 137, 'instruction': 'movq\t%rdx, 0x4a8(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 139, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 140, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 141, 'instruction': 'movq\t%rdx, 0x4b0(%rsp)                # 8-byte Spill'}, {'instIndex': 142, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 143, 'instruction': 'movq\t%rcx, 0x4b8(%rsp)                # 8-byte Spill'}, {'instIndex': 144, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 145, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 146, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 147, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 148, 'instruction': 'jl\t.LBB1_82'}, {'instIndex': 151, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 152, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 153, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 154, 'instruction': 'movl\t%eax, 0x4c4(%rsp)                # 4-byte Spill'}, {'instIndex': 155, 'instruction': 'jl\t.LBB1_82'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1266 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x468(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x46c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x418(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x420(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x428(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_75'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_75'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1266 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x468(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x46c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x418(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x420(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x428(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_75'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_75'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 122 nodes and 213 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1266 instructions in binary file.
[4194576, 4194652, 4194675, 4194702, 4194722, 4194739, 4194785]
[4195038, 4195133, 4195149, 4195175]
The execution time of patched subCFG information extraction via angr: 0:00:00.699773
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "je" for 0x400171>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "call" for 0x400189>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "add" for 0x400196>, <DisassemblerInsn "call" for 0x40019d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "add" for 0x4001aa>, <DisassemblerInsn "call" for 0x4001ae>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400154>, <DisassemblerInsn "jne" for 0x40015a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<je~~0x4002de>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x470]>', '<mov~~ecx, dword ptr [rsp + 0x46c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001b3>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x46c]>', '<mov~~esi, dword ptr [rsp + 0x468]>', '<mov~~rdi, qword ptr [rsp + 0x470]>', '<call~~0x500008>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~qword ptr [rsp + 0x410], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x420], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x468], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x46c], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x470], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400173>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jne~~0x400226>']}], 'cfg_edge_info': [(9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (16, 12), (8, 9), (15, 3), (8, 12), (5, 9), (2, 5), (15, 18)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x400362>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "add" for 0x401984>, <DisassemblerInsn "pop" for 0x40198b>, <DisassemblerInsn "pop" for 0x40198c>, <DisassemblerInsn "pop" for 0x40198e>, <DisassemblerInsn "pop" for 0x401990>, <DisassemblerInsn "pop" for 0x401992>, <DisassemblerInsn "pop" for 0x401994>, <DisassemblerInsn "ret" for 0x401995>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "mov" for 0x40036a>, <DisassemblerInsn "jl" for 0x400371>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "add" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033d>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "jl" for 0x400347>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<je~~0x4002de>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x47c]>', '<add~~rsp, 0x4f8>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jl~~0x40197d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~qword ptr [rsp + 0x410], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x420], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jl~~0x40197d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jne~~0x400226>']}], 'cfg_edge_info': [(6, 11), (14, 17), (14, 10), (12, 3), (18, 3), (20, 3), (15, 3), (3, 6), (6, 10), (11, 14), (1, 3)]}]}
{'tgv_decode_frame': [4195038, 4195133, 4195149, 4195175]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O2/eatgv.o---before
The extraction of function: tgv_decode_frame
[4195038, 4195133, 4195149, 4195175]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 123 nodes and 199 edges in CFGEmulated.
It has 123 nodes and 201 edges in CDG.
It has 6513 nodes and 8441 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195038, 4195133, 4195149, 4195175]
{4197378, 4196995, 4200710, 4196233, 4198027, 4197261, 4195342, 4194702, 4194576, 4196880, 4195858, 4197523, 4196631, 4195738, 4195228, 4196383, 4200737, 4194722, 4196132, 4197413, 4194854, 4195239, 4196520, 4196777, 4195244, 4195757, 4200751, 4194352, 4197040, 4197298, 4194739, 4195633, 4197175, 4198840, 4197303, 4195386, 4198971, 4195515, 4195133, 4196794, 4194495, 4195772, 4194500, 4200772, 4196295, 4196863, 4195149, 4197070, 4196558, 4196048, 4197628, 4200789, 4194652, 4195038, 4194785, 4200801, 4194532, 4196836, 4195175, 4197097, 4194922, 4197488, 4195313, 4194675, 4195191, 4195963, 4197116, 4200829, 4194559}
[19, 53, 68, 37, 16, 51, 64, 78, 76, 5, 42, 11, 96, 87, 2, 1, 57, 43, 59, 45, 31, 0, 65, 49, 15, 50, 60, 10, 90, 85, 32, 61, 70, 46, 9, 82, 21, 17, 4, 3, 119, 81, 56, 86, 29, 52, 58, 40, 83, 24, 30, 54, 73, 63, 94, 71, 89, 67, 14, 47, 12, 23, 69, 36, 28, 92, 41, 39, 33, 99, 34, 98, 22, 8, 27, 79, 75, 72, 88, 95]
The execution time of patched slicing information extraction via angr: 0:00:36.897169
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be0>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "shl" for 0x400bf6>, <DisassemblerInsn "mov" for 0x400bf9>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "call" for 0x400bfd>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400862>, <DisassemblerInsn "mov" for 0x40086a>, <DisassemblerInsn "mov" for 0x400872>, <DisassemblerInsn "mov" for 0x400879>, <DisassemblerInsn "mov" for 0x400880>, <DisassemblerInsn "mov" for 0x400888>, <DisassemblerInsn "cmp" for 0x400890>, <DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "jle" for 0x4008a2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "lea" for 0x4009f1>, <DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "call" for 0x4009fa>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "and" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a4>, <DisassemblerInsn "je" for 0x4005a7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400ca9>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "imul" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cbb>, <DisassemblerInsn "and" for 0x400cbe>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "shr" for 0x400ccb>, <DisassemblerInsn "mov" for 0x400cce>, <DisassemblerInsn "add" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "shl" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400cde>, <DisassemblerInsn "add" for 0x400ce0>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "shl" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cee>, <DisassemblerInsn "add" for 0x400cf0>, <DisassemblerInsn "cmp" for 0x400cf3>, <DisassemblerInsn "ja" for 0x400cf6>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "test" for 0x40096e>, <DisassemblerInsn "setg" for 0x400970>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "sub" for 0x400977>, <DisassemblerInsn "setb" for 0x40097a>, <DisassemblerInsn "and" for 0x40097e>, <DisassemblerInsn "test" for 0x400981>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "jne" for 0x4009a3>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401944>, <DisassemblerInsn "mov" for 0x401948>, <DisassemblerInsn "call" for 0x401950>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400154>, <DisassemblerInsn "jne" for 0x40015a>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "jmp" for 0x40010b>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40124b>, <DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x401261>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "mov" for 0x401271>, <DisassemblerInsn "sub" for 0x401276>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "shr" for 0x40127f>, <DisassemblerInsn "mov" for 0x401282>, <DisassemblerInsn "mov" for 0x40128a>, <DisassemblerInsn "mov" for 0x401292>, <DisassemblerInsn "add" for 0x401295>, <DisassemblerInsn "mov" for 0x40129c>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "add" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012ae>, <DisassemblerInsn "add" for 0x4012b6>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "add" for 0x4012cd>, <DisassemblerInsn "mov" for 0x4012d1>, <DisassemblerInsn "xor" for 0x4012d9>, <DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "mov" for 0x4012e3>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "mov" for 0x4012f2>, <DisassemblerInsn "mov" for 0x4012f9>, <DisassemblerInsn "mov" for 0x401301>, <DisassemblerInsn "mov" for 0x401308>, <DisassemblerInsn "mov" for 0x401310>, <DisassemblerInsn "mov" for 0x401317>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132d>, <DisassemblerInsn "cmp" for 0x401335>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "jle" for 0x401347>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b8>, <DisassemblerInsn "mov" for 0x4011c0>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "sub" for 0x4011d5>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "mov" for 0x4011de>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f6>, <DisassemblerInsn "cdq" for 0x4011fb>, <DisassemblerInsn "idiv" for 0x4011fc>, <DisassemblerInsn "mov" for 0x4011fe>, <DisassemblerInsn "mov" for 0x401205>, <DisassemblerInsn "mov" for 0x401207>, <DisassemblerInsn "imul" for 0x40120f>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x401218>, <DisassemblerInsn "mov" for 0x40121f>, <DisassemblerInsn "cdq" for 0x401224>, <DisassemblerInsn "idiv" for 0x401225>, <DisassemblerInsn "mov" for 0x401227>, <DisassemblerInsn "mov" for 0x401229>, <DisassemblerInsn "imul" for 0x401230>, <DisassemblerInsn "cmp" for 0x401233>, <DisassemblerInsn "jl" for 0x401235>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40192f>, <DisassemblerInsn "add" for 0x401937>, <DisassemblerInsn "mov" for 0x40193b>, <DisassemblerInsn "call" for 0x40193f>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050b>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "mov" for 0x40051a>, <DisassemblerInsn "mov" for 0x400521>, <DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "movzx" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "and" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "and" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "je" for 0x400594>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x4007a0>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007ba>, <DisassemblerInsn "je" for 0x4007c1>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400af0>, <DisassemblerInsn "jmp" for 0x400af7>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f9>, <DisassemblerInsn "mov" for 0x400401>, <DisassemblerInsn "imul" for 0x400403>, <DisassemblerInsn "movsxd" for 0x400406>, <DisassemblerInsn "call" for 0x400409>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "push" for 0x400031>, <DisassemblerInsn "push" for 0x400033>, <DisassemblerInsn "push" for 0x400035>, <DisassemblerInsn "push" for 0x400037>, <DisassemblerInsn "push" for 0x400039>, <DisassemblerInsn "sub" for 0x40003a>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "movsxd" for 0x40007b>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "add" for 0x400096>, <DisassemblerInsn "mov" for 0x40009a>, <DisassemblerInsn "cmp" for 0x4000a2>, <DisassemblerInsn "sete" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "test" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "jne" for 0x4000bd>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400bb2>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a9>, <DisassemblerInsn "cmp" for 0x4009b1>, <DisassemblerInsn "jle" for 0x4009b4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x400362>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d0>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006de>, <DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "shl" for 0x4006e8>, <DisassemblerInsn "and" for 0x4006eb>, <DisassemblerInsn "movzx" for 0x4006f0>, <DisassemblerInsn "or" for 0x4006f4>, <DisassemblerInsn "add" for 0x4006f7>, <DisassemblerInsn "shr" for 0x4006f9>, <DisassemblerInsn "and" for 0x4006fc>, <DisassemblerInsn "add" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400702>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400716>, <DisassemblerInsn "mov" for 0x40071d>, <DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "add" for 0x400768>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "mov" for 0x400773>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "sub" for 0x40077d>, <DisassemblerInsn "cmp" for 0x400780>, <DisassemblerInsn "jl" for 0x400783>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067b>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "shr" for 0x40068d>, <DisassemblerInsn "movzx" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "and" for 0x400697>, <DisassemblerInsn "rol" for 0x40069b>, <DisassemblerInsn "add" for 0x40069f>, <DisassemblerInsn "movzx" for 0x4006a3>, <DisassemblerInsn "and" for 0x4006a6>, <DisassemblerInsn "add" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006ac>, <DisassemblerInsn "mov" for 0x4006b1>, <DisassemblerInsn "mov" for 0x4006b9>, <DisassemblerInsn "mov" for 0x4006c0>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "jmp" for 0x4006ce>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033d>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "jl" for 0x400347>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401955>, <DisassemblerInsn "mov" for 0x401958>, <DisassemblerInsn "jl" for 0x40195f>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "movzx" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "and" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "and" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "je" for 0x400594>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043a>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x40045a>, <DisassemblerInsn "mov" for 0x400462>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "imul" for 0x400471>, <DisassemblerInsn "movsxd" for 0x400474>, <DisassemblerInsn "add" for 0x400477>, <DisassemblerInsn "mov" for 0x40047a>, <DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "and" for 0x400485>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "cmp" for 0x400493>, <DisassemblerInsn "cmove" for 0x400497>, <DisassemblerInsn "add" for 0x40049b>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "add" for 0x4004a6>, <DisassemblerInsn "mov" for 0x4004aa>, <DisassemblerInsn "cmp" for 0x4004b2>, <DisassemblerInsn "ja" for 0x4004b5>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "and" for 0x4005b4>, <DisassemblerInsn "cmp" for 0x4005b7>, <DisassemblerInsn "je" for 0x4005ba>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "add" for 0x400768>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "mov" for 0x400773>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "sub" for 0x40077d>, <DisassemblerInsn "cmp" for 0x400780>, <DisassemblerInsn "jl" for 0x400783>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bb7>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "mov" for 0x400bc6>, <DisassemblerInsn "add" for 0x400bc9>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "cmp" for 0x400bd8>, <DisassemblerInsn "jge" for 0x400bde>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "call" for 0x400189>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8b>, <DisassemblerInsn "mov" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e9b>, <DisassemblerInsn "sub" for 0x400ea3>, <DisassemblerInsn "mov" for 0x400ea6>, <DisassemblerInsn "shl" for 0x400ea8>, <DisassemblerInsn "xor" for 0x400eab>, <DisassemblerInsn "cmp" for 0x400ead>, <DisassemblerInsn "cmovb" for 0x400eb3>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "xor" for 0x400ebf>, <DisassemblerInsn "cmp" for 0x400ec1>, <DisassemblerInsn "cmovb" for 0x400ec7>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "add" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "xor" for 0x400edb>, <DisassemblerInsn "cmp" for 0x400edd>, <DisassemblerInsn "mov" for 0x400ee1>, <DisassemblerInsn "je" for 0x400ee8>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "mov" for 0x40036a>, <DisassemblerInsn "jl" for 0x400371>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "add" for 0x400196>, <DisassemblerInsn "call" for 0x40019d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "lea" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "call" for 0x4000fa>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aab>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "mov" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "mov" for 0x400c8a>, <DisassemblerInsn "mov" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400ca9>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "imul" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cbb>, <DisassemblerInsn "and" for 0x400cbe>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "shr" for 0x400ccb>, <DisassemblerInsn "mov" for 0x400cce>, <DisassemblerInsn "add" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "shl" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400cde>, <DisassemblerInsn "add" for 0x400ce0>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "shl" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cee>, <DisassemblerInsn "add" for 0x400cf0>, <DisassemblerInsn "cmp" for 0x400cf3>, <DisassemblerInsn "ja" for 0x400cf6>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401921>, <DisassemblerInsn "mov" for 0x401926>, <DisassemblerInsn "jmp" for 0x40192d>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e5>, <DisassemblerInsn "mov" for 0x4008ec>, <DisassemblerInsn "sub" for 0x4008f3>, <DisassemblerInsn "mov" for 0x4008f5>, <DisassemblerInsn "mov" for 0x4008fc>, <DisassemblerInsn "sub" for 0x4008fe>, <DisassemblerInsn "cmp" for 0x400901>, <DisassemblerInsn "cmovl" for 0x400904>, <DisassemblerInsn "mov" for 0x400908>, <DisassemblerInsn "mov" for 0x400910>, <DisassemblerInsn "call" for 0x400912>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jne" for 0x4003ef>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ff>, <DisassemblerInsn "mov" for 0x400a04>, <DisassemblerInsn "jmp" for 0x400a0b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "add" for 0x4009cd>, <DisassemblerInsn "mov" for 0x4009d1>, <DisassemblerInsn "xor" for 0x4009d9>, <DisassemblerInsn "mov" for 0x4009db>, <DisassemblerInsn "jmp" for 0x4009e2>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "mov" for 0x40190e>, <DisassemblerInsn "lea" for 0x401913>, <DisassemblerInsn "mov" for 0x40191a>, <DisassemblerInsn "call" for 0x40191c>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d1f>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2f>, <DisassemblerInsn "mov" for 0x400d36>, <DisassemblerInsn "movzx" for 0x400d3e>, <DisassemblerInsn "mov" for 0x400d41>, <DisassemblerInsn "xor" for 0x400d49>, <DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "xor" for 0x400d4d>, <DisassemblerInsn "mov" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d57>, <DisassemblerInsn "mov" for 0x400d5e>, <DisassemblerInsn "mov" for 0x400d66>, <DisassemblerInsn "mov" for 0x400d6e>, <DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "shr" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9c>, <DisassemblerInsn "mov" for 0x400da4>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400dab>, <DisassemblerInsn "and" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "shr" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dc3>, <DisassemblerInsn "shl" for 0x400dcb>, <DisassemblerInsn "mov" for 0x400dcf>, <DisassemblerInsn "sar" for 0x400dd7>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de7>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "cmova" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "shr" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "and" for 0x400e1a>, <DisassemblerInsn "mov" for 0x400e1d>, <DisassemblerInsn "shr" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2e>, <DisassemblerInsn "shl" for 0x400e35>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "sar" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "add" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "cmp" for 0x400e55>, <DisassemblerInsn "cmova" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5c>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "add" for 0x400e67>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "cmp" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7e>, <DisassemblerInsn "jne" for 0x400e85>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "add" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "add" for 0x400abb>, <DisassemblerInsn "mov" for 0x400abf>, <DisassemblerInsn "cmp" for 0x400ac7>, <DisassemblerInsn "jne" for 0x400acc>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c25>, <DisassemblerInsn "mov" for 0x400c2d>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "add" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "cmp" for 0x400c46>, <DisassemblerInsn "jge" for 0x400c4c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c02>, <DisassemblerInsn "mov" for 0x400c0a>, <DisassemblerInsn "mov" for 0x400c11>, <DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "mov" for 0x400c1c>, <DisassemblerInsn "mov" for 0x400c23>, <DisassemblerInsn "mov" for 0x400c25>, <DisassemblerInsn "mov" for 0x400c2d>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "add" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "cmp" for 0x400c46>, <DisassemblerInsn "jge" for 0x400c4c>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c4e>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "shl" for 0x400c64>, <DisassemblerInsn "mov" for 0x400c67>, <DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "call" for 0x400c6b>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401961>, <DisassemblerInsn "mov" for 0x401968>, <DisassemblerInsn "mov" for 0x401970>, <DisassemblerInsn "mov" for 0x401976>, <DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "add" for 0x401984>, <DisassemblerInsn "pop" for 0x40198b>, <DisassemblerInsn "pop" for 0x40198c>, <DisassemblerInsn "pop" for 0x40198e>, <DisassemblerInsn "pop" for 0x401990>, <DisassemblerInsn "pop" for 0x401992>, <DisassemblerInsn "pop" for 0x401994>, <DisassemblerInsn "ret" for 0x401995>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "shl" for 0x40062a>, <DisassemblerInsn "and" for 0x40062d>, <DisassemblerInsn "mov" for 0x400632>, <DisassemblerInsn "rol" for 0x400636>, <DisassemblerInsn "movzx" for 0x40063a>, <DisassemblerInsn "or" for 0x40063d>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "shl" for 0x400642>, <DisassemblerInsn "and" for 0x400645>, <DisassemblerInsn "movzx" for 0x40064b>, <DisassemblerInsn "or" for 0x40064f>, <DisassemblerInsn "add" for 0x400652>, <DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "mov" for 0x400659>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400668>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "jmp" for 0x400676>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5e>, <DisassemblerInsn "mov" for 0x400d66>, <DisassemblerInsn "mov" for 0x400d6e>, <DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "shr" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9c>, <DisassemblerInsn "mov" for 0x400da4>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400dab>, <DisassemblerInsn "and" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "shr" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dc3>, <DisassemblerInsn "shl" for 0x400dcb>, <DisassemblerInsn "mov" for 0x400dcf>, <DisassemblerInsn "sar" for 0x400dd7>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de7>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "cmova" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "shr" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "and" for 0x400e1a>, <DisassemblerInsn "mov" for 0x400e1d>, <DisassemblerInsn "shr" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2e>, <DisassemblerInsn "shl" for 0x400e35>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "sar" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "add" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "cmp" for 0x400e55>, <DisassemblerInsn "cmova" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5c>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "add" for 0x400e67>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "cmp" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7e>, <DisassemblerInsn "jne" for 0x400e85>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a10>, <DisassemblerInsn "mov" for 0x400a17>, <DisassemblerInsn "mov" for 0x400a1f>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "mov" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a37>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "mov" for 0x400a41>, <DisassemblerInsn "imul" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "movsxd" for 0x400a4e>, <DisassemblerInsn "add" for 0x400a51>, <DisassemblerInsn "mov" for 0x400a54>, <DisassemblerInsn "mov" for 0x400a5c>, <DisassemblerInsn "mov" for 0x400a5f>, <DisassemblerInsn "mov" for 0x400a61>, <DisassemblerInsn "imul" for 0x400a63>, <DisassemblerInsn "mov" for 0x400a66>, <DisassemblerInsn "movsxd" for 0x400a6d>, <DisassemblerInsn "add" for 0x400a70>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "movsxd" for 0x400a7b>, <DisassemblerInsn "call" for 0x400a7e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "add" for 0x401984>, <DisassemblerInsn "pop" for 0x40198b>, <DisassemblerInsn "pop" for 0x40198c>, <DisassemblerInsn "pop" for 0x40198e>, <DisassemblerInsn "pop" for 0x401990>, <DisassemblerInsn "pop" for 0x401992>, <DisassemblerInsn "pop" for 0x401994>, <DisassemblerInsn "ret" for 0x401995>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b9c>, <DisassemblerInsn "mov" for 0x400b9f>, <DisassemblerInsn "lea" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400bab>, <DisassemblerInsn "call" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "add" for 0x4001aa>, <DisassemblerInsn "call" for 0x4001ae>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007df>, <DisassemblerInsn "mov" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ef>, <DisassemblerInsn "sub" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007f9>, <DisassemblerInsn "sub" for 0x400800>, <DisassemblerInsn "cmp" for 0x400803>, <DisassemblerInsn "cmovl" for 0x400806>, <DisassemblerInsn "shl" for 0x40080a>, <DisassemblerInsn "sar" for 0x40080e>, <DisassemblerInsn "mov" for 0x400812>, <DisassemblerInsn "call" for 0x40081a>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004bb>, <DisassemblerInsn "mov" for 0x4004c3>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "movzx" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "movzx" for 0x4004d9>, <DisassemblerInsn "shl" for 0x4004dd>, <DisassemblerInsn "or" for 0x4004e0>, <DisassemblerInsn "movzx" for 0x4004e2>, <DisassemblerInsn "or" for 0x4004e6>, <DisassemblerInsn "mov" for 0x4004e8>, <DisassemblerInsn "setne" for 0x4004ef>, <DisassemblerInsn "sub" for 0x4004f2>, <DisassemblerInsn "setb" for 0x4004f5>, <DisassemblerInsn "and" for 0x4004f8>, <DisassemblerInsn "test" for 0x4004fa>, <DisassemblerInsn "jne" for 0x4004fc>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003a7>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40123b>, <DisassemblerInsn "cmp" for 0x401242>, <DisassemblerInsn "jle" for 0x401245>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "cmp" for 0x400421>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "je" for 0x400434>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "movzx" for 0x400b4a>, <DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "movzx" for 0x400b54>, <DisassemblerInsn "mov" for 0x400b58>, <DisassemblerInsn "mov" for 0x400b5f>, <DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "movzx" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b6e>, <DisassemblerInsn "mov" for 0x400b75>, <DisassemblerInsn "movzx" for 0x400b79>, <DisassemblerInsn "mov" for 0x400b7c>, <DisassemblerInsn "add" for 0x400b83>, <DisassemblerInsn "cmp" for 0x400b87>, <DisassemblerInsn "jb" for 0x400b8b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad6>, <DisassemblerInsn "lea" for 0x400adb>, <DisassemblerInsn "mov" for 0x400ae2>, <DisassemblerInsn "call" for 0x400ae4>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401889>, <DisassemblerInsn "mov" for 0x401891>, <DisassemblerInsn "mov" for 0x401899>, <DisassemblerInsn "mov" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a4>, <DisassemblerInsn "add" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018ad>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "mov" for 0x4018b8>, <DisassemblerInsn "cdq" for 0x4018bd>, <DisassemblerInsn "idiv" for 0x4018be>, <DisassemblerInsn "mov" for 0x4018c0>, <DisassemblerInsn "mov" for 0x4018c2>, <DisassemblerInsn "movsxd" for 0x4018c7>, <DisassemblerInsn "cmp" for 0x4018ca>, <DisassemblerInsn "jge" for 0x4018cd>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400afc>, <DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "mov" for 0x400b14>, <DisassemblerInsn "mov" for 0x400b1b>, <DisassemblerInsn "add" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b26>, <DisassemblerInsn "cmp" for 0x400b2e>, <DisassemblerInsn "ja" for 0x400b31>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "mov" for 0x40118b>, <DisassemblerInsn "add" for 0x401193>, <DisassemblerInsn "cmp" for 0x401197>, <DisassemblerInsn "mov" for 0x40119a>, <DisassemblerInsn "mov" for 0x4011a2>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "jne" for 0x4011b2>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "je" for 0x400171>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "test" for 0x4003a3>, <DisassemblerInsn "jne" for 0x4003a5>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b7>, <DisassemblerInsn "sub" for 0x4008bf>, <DisassemblerInsn "movsxd" for 0x4008c2>, <DisassemblerInsn "cmp" for 0x4008c5>, <DisassemblerInsn "jl" for 0x4008c8>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cfc>, <DisassemblerInsn "mov" for 0x400d04>, <DisassemblerInsn "or" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "cmp" for 0x400d15>, <DisassemblerInsn "je" for 0x400d19>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bc>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "shl" for 0x4005d9>, <DisassemblerInsn "and" for 0x4005dc>, <DisassemblerInsn "add" for 0x4005df>, <DisassemblerInsn "cmp" for 0x4005e2>, <DisassemblerInsn "cmovb" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "xor" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "jmp" for 0x40060d>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef6>, <DisassemblerInsn "lea" for 0x400efe>, <DisassemblerInsn "add" for 0x400f06>, <DisassemblerInsn "mov" for 0x400f0d>, <DisassemblerInsn "movzx" for 0x400f15>, <DisassemblerInsn "mov" for 0x400f18>, <DisassemblerInsn "lea" for 0x400f20>, <DisassemblerInsn "mov" for 0x400f28>, <DisassemblerInsn "lea" for 0x400f30>, <DisassemblerInsn "add" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3c>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "add" for 0x400f4c>, <DisassemblerInsn "mov" for 0x400f50>, <DisassemblerInsn "lea" for 0x400f58>, <DisassemblerInsn "add" for 0x400f60>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "xor" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f6e>, <DisassemblerInsn "xor" for 0x400f70>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f81>, <DisassemblerInsn "mov" for 0x400f88>, <DisassemblerInsn "mov" for 0x400f90>, <DisassemblerInsn "mov" for 0x400f98>, <DisassemblerInsn "mov" for 0x400fa0>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb8>, <DisassemblerInsn "mov" for 0x400fc0>, <DisassemblerInsn "shr" for 0x400fc3>, <DisassemblerInsn "mov" for 0x400fc7>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "mov" for 0x400fce>, <DisassemblerInsn "and" for 0x400fd1>, <DisassemblerInsn "shr" for 0x400fd4>, <DisassemblerInsn "mov" for 0x400fd7>, <DisassemblerInsn "and" for 0x400fdf>, <DisassemblerInsn "add" for 0x400fe6>, <DisassemblerInsn "cmp" for 0x400fea>, <DisassemblerInsn "mov" for 0x400fed>, <DisassemblerInsn "cmova" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff7>, <DisassemblerInsn "shr" for 0x400ffa>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x400fff>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "and" for 0x401005>, <DisassemblerInsn "shr" for 0x401008>, <DisassemblerInsn "mov" for 0x40100a>, <DisassemblerInsn "and" for 0x401012>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x40101f>, <DisassemblerInsn "cmova" for 0x401022>, <DisassemblerInsn "mov" for 0x401026>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "shr" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "mov" for 0x401030>, <DisassemblerInsn "mov" for 0x401033>, <DisassemblerInsn "and" for 0x401036>, <DisassemblerInsn "shr" for 0x401039>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "and" for 0x401043>, <DisassemblerInsn "add" for 0x401049>, <DisassemblerInsn "cmp" for 0x40104d>, <DisassemblerInsn "mov" for 0x401050>, <DisassemblerInsn "cmova" for 0x401052>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "shr" for 0x40105a>, <DisassemblerInsn "mov" for 0x40105d>, <DisassemblerInsn "mov" for 0x40105f>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "and" for 0x401064>, <DisassemblerInsn "shr" for 0x401067>, <DisassemblerInsn "mov" for 0x401069>, <DisassemblerInsn "and" for 0x401071>, <DisassemblerInsn "add" for 0x401077>, <DisassemblerInsn "cmp" for 0x40107a>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400917>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "shl" for 0x40092e>, <DisassemblerInsn "sar" for 0x400932>, <DisassemblerInsn "add" for 0x400936>, <DisassemblerInsn "mov" for 0x400939>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "test" for 0x40096e>, <DisassemblerInsn "setg" for 0x400970>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "sub" for 0x400977>, <DisassemblerInsn "setb" for 0x40097a>, <DisassemblerInsn "and" for 0x40097e>, <DisassemblerInsn "test" for 0x400981>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "jne" for 0x4009a3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x448]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~r8, qword ptr [rsp + 0x440]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jne~~0x400226>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b4]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x370]>', '<mov~~rcx, qword ptr [rsp + 0x358]>', '<mov~~rsi, qword ptr [rsp + 0x360]>', '<mov~~eax, dword ptr [rsp + 0x368]>', '<mov~~dword ptr [rsp + 0x324], eax>', '<mov~~qword ptr [rsp + 0x328], rsi>', '<mov~~qword ptr [rsp + 0x330], rcx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x338], rcx>', '<mov~~dword ptr [rsp + 0x344], eax>', '<jle~~0x400948>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x428]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x1020]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~cx, word ptr [rsp + 0x466]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x448], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~qword ptr [rsp + 0x458], rax>', '<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3bc]>', '<and~~eax, 0x40>', '<cmp~~eax, 0>', '<je~~0x40067b>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~edx, dword ptr [rsp + 0x2c0]>', '<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x28c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x290], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401906>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x328]>', '<mov~~esi, dword ptr [rsp + 0x36c]>', '<mov~~r9, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~edx, dword ptr [rsp + 0x344]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x39c], esi>', '<mov~~dword ptr [rsp + 0x3c4], edx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~qword ptr [rsp + 0x3d0], rax>', '<jne~~0x400531>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<call~~0x500050>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x4a0]>', '<mov~~rcx, qword ptr [rsp + 0x4c8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x468], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x46c], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x470], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400173>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4009a9>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jmp~~0x40197d>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x160]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<mov~~r8d, dword ptr [rsp + 0x2c4]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x490]>', '<mov~~dword ptr [rsp + 0x104], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x108], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x110], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~dword ptr [rsp + 0x13c], edx>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~edx, dword ptr [rsp + 0x13c]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~qword ptr [rsp + 0xe0], rsi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jle~~0x401889>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x218]>', '<mov~~dword ptr [rsp + 0x150], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x164], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x158], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x2c4]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x160], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x401906>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp], rdi>', '<call~~0x500018>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~rcx, qword ptr [rsp + 0x3f8]>', '<mov~~edx, dword ptr [rsp + 0x3dc]>', '<mov~~dword ptr [rsp + 0x3c4], edx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~qword ptr [rsp + 0x3d0], rax>', '<mov~~ecx, dword ptr [rsp + 0x39c]>', '<mov~~edx, dword ptr [rsp + 0x3c4]>', '<mov~~rax, qword ptr [rsp + 0x3c8]>', '<mov~~rsi, qword ptr [rsp + 0x3d0]>', '<mov~~qword ptr [rsp + 0x3a0], rsi>', '<mov~~qword ptr [rsp + 0x3a8], rax>', '<mov~~dword ptr [rsp + 0x3b0], edx>', '<mov~~dword ptr [rsp + 0x3b4], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3bb], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x3c0], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006d0>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3b0]>', '<mov~~rcx, qword ptr [rsp + 0x378]>', '<mov~~rdx, qword ptr [rsp + 0x3a0]>', '<mov~~esi, dword ptr [rsp + 0x374]>', '<cmp~~esi, 0>', '<mov~~qword ptr [rsp + 0x358], rdx>', '<mov~~qword ptr [rsp + 0x360], rcx>', '<mov~~dword ptr [rsp + 0x368], eax>', '<je~~0x40085b>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jmp~~0x40197d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x420]>', '<mov~~rax, qword ptr [rsp + 0x418]>', '<mov~~eax, dword ptr [rax]>', '<imul~~eax, dword ptr [rcx]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r15>', '<push~~r14>', '<push~~r13>', '<push~~r12>', '<push~~rbx>', '<sub~~rsp, 0x4f8>', '<mov~~qword ptr [rsp + 0x488], rdi>', '<mov~~qword ptr [rsp + 0x490], rsi>', '<mov~~qword ptr [rsp + 0x498], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x4ac], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x4b0], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4b8], rcx>', '<mov~~qword ptr [rsp + 0x4c0], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x4c8], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x4d7], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jne~~0x4000c4>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401906>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x420]>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x40192f>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4c0]>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3c0]>', '<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~rsi, qword ptr [rsp + 0x3a8]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x388], rsi>', '<mov~~dword ptr [rsp + 0x390], edx>', '<mov~~dword ptr [rsp + 0x394], ecx>', '<mov~~dword ptr [rsp + 0x398], eax>', '<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rdx, qword ptr [rsp + 0x3a8]>', '<mov~~rsi, qword ptr [rsp + 0x388]>', '<mov~~ecx, dword ptr [rsp + 0x390]>', '<mov~~edi, dword ptr [rsp + 0x394]>', '<mov~~r8d, dword ptr [rsp + 0x398]>', '<mov~~dword ptr [rsp + 0x36c], r8d>', '<mov~~dword ptr [rsp + 0x370], edi>', '<mov~~dword ptr [rsp + 0x374], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x378], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~rax, qword ptr [rsp + 0x3a8]>', '<mov~~dl, byte ptr [rax + 1]>', '<shr~~dl, 6>', '<movzx~~edx, dl>', '<mov~~ax, word ptr [rax + 1]>', '<and~~ax, 0xff3f>', '<rol~~ax, 8>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<and~~ecx, 0x3f>', '<add~~ecx, 4>', '<mov~~esi, 3>', '<mov~~qword ptr [rsp + 0x388], rsi>', '<mov~~dword ptr [rsp + 0x390], edx>', '<mov~~dword ptr [rsp + 0x394], ecx>', '<mov~~dword ptr [rsp + 0x398], eax>', '<jmp~~0x400724>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jl~~0x40197d>']}, {'block_Idx': 90, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jl~~0x40197d>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x39c]>', '<mov~~edx, dword ptr [rsp + 0x3c4]>', '<mov~~rax, qword ptr [rsp + 0x3c8]>', '<mov~~rsi, qword ptr [rsp + 0x3d0]>', '<mov~~qword ptr [rsp + 0x3a0], rsi>', '<mov~~qword ptr [rsp + 0x3a8], rax>', '<mov~~dword ptr [rsp + 0x3b0], edx>', '<mov~~dword ptr [rsp + 0x3b4], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3bb], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x3bc], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x3c0], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006d0>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x408]>', '<mov~~qword ptr [rsp + 0x3e0], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x3e8], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x3f0], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x3f8], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009e4>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3bc]>', '<and~~eax, 0x20>', '<cmp~~eax, 0>', '<je~~0x400612>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b8]>', '<mov~~rdx, qword ptr [rsp + 0x3a8]>', '<mov~~rsi, qword ptr [rsp + 0x388]>', '<mov~~ecx, dword ptr [rsp + 0x390]>', '<mov~~edi, dword ptr [rsp + 0x394]>', '<mov~~r8d, dword ptr [rsp + 0x398]>', '<mov~~dword ptr [rsp + 0x36c], r8d>', '<mov~~dword ptr [rsp + 0x370], edi>', '<mov~~dword ptr [rsp + 0x374], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x378], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c25>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x46c]>', '<mov~~esi, dword ptr [rsp + 0x468]>', '<mov~~rdi, qword ptr [rsp + 0x470]>', '<call~~0x500008>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x2be]>', '<mov~~rsi, qword ptr [rsp + 0x298]>', '<mov~~rax, qword ptr [rsp + 0x4b8]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x208], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x210], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x214], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x218], eax>', '<je~~0x4011b8>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jl~~0x40197d>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x190e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~qword ptr [rsp + 0x410], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x420], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x428], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 119, 'blockInsts': ['<jmp~~0x40192f>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x2c0]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~edx, dword ptr [rsp + 0x2c0]>', '<mov~~esi, dword ptr [rsp + 0x2b8]>', '<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~edi, dword ptr [rsp + 0x2b4]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x28c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x290], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x298], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x401906>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jmp~~0x40197d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x330]>', '<mov~~esi, dword ptr [rsp + 0x36c]>', '<mov~~rcx, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rsp + 0x370]>', '<mov~~edx, dword ptr [rsp + 0x324]>', '<sub~~edx, eax>', '<mov~~dword ptr [rsp + 0x320], edx>', '<mov~~eax, eax>', '<sub~~rcx, rdi>', '<cmp~~rcx, rax>', '<cmovl~~rax, rcx>', '<mov~~qword ptr [rsp + 0x318], rax>', '<mov~~edx, eax>', '<call~~0x500040>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rcx, qword ptr [rsp + 0x490]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x400], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x408], rax>', '<jne~~0x40043a>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<jmp~~0x40197d>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x300], rcx>', '<add~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x308], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x314], eax>', '<jmp~~0x400a10>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x428]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x144]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2b2]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x268], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x270], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x278], rcx>', '<mov~~dword ptr [rsp + 0x284], eax>', '<mov~~r10d, dword ptr [rsp + 0x284]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~eax, dword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~qword ptr [rsp + 0x240], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x21c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x220], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~dword ptr [rsp + 0x224], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x228], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x22c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x230], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x234], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x23c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x250], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x254], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x278], rcx>', '<mov~~dword ptr [rsp + 0x284], eax>', '<jne~~0x400d5e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400afc>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x2c0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2a0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c93>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~ecx, dword ptr [rsp + 0x2c0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2a0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c93>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c0]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<mov~~rcx, qword ptr [rsp + 0x498]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<mov~~eax, dword ptr [rsp + 0x47c]>', '<add~~rsp, 0x4f8>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3c0]>', '<mov~~rsi, qword ptr [rsp + 0x3a8]>', '<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~eax, ecx>', '<shl~~eax, 0xc>', '<and~~eax, 0x10000>', '<mov~~di, word ptr [rsi + 1]>', '<rol~~di, 8>', '<movzx~~edi, di>', '<or~~eax, 1>', '<add~~eax, edi>', '<shl~~ecx, 6>', '<and~~ecx, 0x300>', '<movzx~~esi, byte ptr [rsi + 3]>', '<or~~ecx, 5>', '<add~~ecx, esi>', '<mov~~esi, 4>', '<mov~~qword ptr [rsp + 0x388], rsi>', '<mov~~dword ptr [rsp + 0x390], edx>', '<mov~~dword ptr [rsp + 0x394], ecx>', '<mov~~dword ptr [rsp + 0x398], eax>', '<jmp~~0x400724>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x284]>', '<mov~~rdi, qword ptr [rsp + 0x278]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~eax, dword ptr [rsp + 0x288]>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~qword ptr [rsp + 0x240], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x21c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x220], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~dword ptr [rsp + 0x224], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x228], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x22c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x230], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x234], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x23c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x24c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x250], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x254], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x278], rcx>', '<mov~~dword ptr [rsp + 0x284], eax>', '<jne~~0x400d5e>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x314]>', '<mov~~rax, qword ptr [rsp + 0x418]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~r8, qword ptr [rsp + 0x308]>', '<mov~~rsi, qword ptr [rsp + 0x300]>', '<mov~~dword ptr [rsp + 0x2f8], edx>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~esi, edx>', '<imul~~esi, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0x2dc], esi>', '<movsxd~~rsi, esi>', '<add~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x2e0], rdi>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, eax>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x2ec], ecx>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x2f0], rsi>', '<movsxd~~rdx, eax>', '<call~~0x500030>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x47c]>', '<add~~rsp, 0x4f8>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~rax, qword ptr [rsp + 0x4b0]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xeca]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x466], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<je~~0x4002de>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4b0]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x378]>', '<mov~~rdi, qword ptr [rsp + 0x3a0]>', '<mov~~rdx, qword ptr [rsp + 0x380]>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~r8d, dword ptr [rsp + 0x374]>', '<mov~~ecx, dword ptr [rsp + 0x3b0]>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x354], ecx>', '<sub~~rax, rdi>', '<cmp~~rax, rdx>', '<cmovl~~rdx, rax>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x348], rdx>', '<call~~0x500030>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x3f8]>', '<mov~~rsi, qword ptr [rsp + 0x3f0]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400503>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400ab0>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<cmp~~eax, 3>', '<jle~~0x40192f>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x400]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x408], rcx>', '<mov~~dword ptr [rsp + 0x47c], eax>', '<je~~0x40197d>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x410]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x2b2], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x2b4], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x2b8], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x2be], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x2c0], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x2c4], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400bb7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x428]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xf4d]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x40192f>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x410]>', '<mov~~rdx, qword ptr [rsp + 0x490]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x2c8], rax>', '<cmp~~rax, rcx>', '<ja~~0x401906>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x184]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x204], ecx>', '<mov~~dword ptr [rsp + 0x218], eax>', '<jne~~0x400f81>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x4b8]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~rax, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rax>', '<mov~~qword ptr [rsp + 0x438], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x440], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x470]>', '<mov~~ecx, dword ptr [rsp + 0x46c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001b3>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4d7]>', '<test~~al, 1>', '<jne~~0x4003ac>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x36c]>', '<mov~~rdx, qword ptr [rsp + 0x3e0]>', '<mov~~rax, qword ptr [rsp + 0x330]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2b2]>', '<mov~~ecx, dword ptr [rsp + 0x28c]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x288], ecx>', '<cmp~~ax, 0>', '<je~~0x400e8b>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3b4]>', '<mov~~edx, dword ptr [rsp + 0x3c0]>', '<mov~~sil, byte ptr [rsp + 0x3bb]>', '<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<shl~~ecx, 2>', '<and~~ecx, 0x7c>', '<add~~ecx, 4>', '<cmp~~sil, 0xfc>', '<cmovb~~edx, ecx>', '<mov~~esi, 1>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x388], rsi>', '<mov~~dword ptr [rsp + 0x390], edx>', '<mov~~dword ptr [rsp + 0x394], ecx>', '<mov~~dword ptr [rsp + 0x398], eax>', '<jmp~~0x400724>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x2be]>', '<mov~~rcx, qword ptr [rsp + 0x4b0]>', '<lea~~rdx, [rsp + 0x4e0]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<lea~~rax, [rsp + 0x4e0]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<lea~~rax, [rsp + 0x4e0]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<lea~~rax, [rsp + 0x4e0]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<lea~~rax, [rsp + 0x4e0]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x1f8], rcx>', '<mov~~dword ptr [rsp + 0x204], eax>', '<mov~~eax, dword ptr [rsp + 0x214]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rdx, qword ptr [rsp + 0x1e8]>', '<mov~~rsi, qword ptr [rsp + 0x1e0]>', '<mov~~rdi, qword ptr [rsp + 0x1d8]>', '<mov~~r8, qword ptr [rsp + 0x1f8]>', '<mov~~r10d, dword ptr [rsp + 0x204]>', '<mov~~qword ptr [rsp + 0x1b0], r8>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~r8d, r8d>', '<mov~~r8d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<and~~r8d, 0xff>', '<add~~r10d, 8>', '<cmp~~eax, r10d>', '<mov~~r9d, eax>', '<cmova~~r9d, r10d>', '<mov~~dword ptr [rdi], r8d>', '<mov~~edi, r9d>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r9d>', '<and~~ecx, 7>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<and~~edi, 0xff>', '<add~~r9d, 8>', '<cmp~~eax, r9d>', '<mov~~r8d, eax>', '<cmova~~r8d, r9d>', '<mov~~dword ptr [rsi], edi>', '<mov~~esi, r8d>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edi, dword ptr [rcx + rsi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<and~~edi, 0xff>', '<add~~r8d, 8>', '<cmp~~eax, r8d>', '<mov~~esi, eax>', '<cmova~~esi, r8d>', '<mov~~dword ptr [rdx], edi>', '<mov~~edx, esi>', '<shr~~edx, 3>', '<mov~~edx, edx>', '<mov~~edx, dword ptr [rcx + rdx]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shr~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<and~~edx, 0xff>', '<add~~esi, 8>', '<cmp~~eax, esi>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x318]>', '<mov~~rcx, qword ptr [rsp + 0x330]>', '<mov~~eax, dword ptr [rsp + 0x320]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x338], rcx>', '<mov~~dword ptr [rsp + 0x344], eax>', '<mov~~rcx, qword ptr [rsp + 0x328]>', '<mov~~esi, dword ptr [rsp + 0x36c]>', '<mov~~r9, qword ptr [rsp + 0x4b8]>', '<mov~~rax, qword ptr [rsp + 0x338]>', '<mov~~edx, dword ptr [rsp + 0x344]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x39c], esi>', '<mov~~dword ptr [rsp + 0x3c4], edx>', '<mov~~qword ptr [rsp + 0x3c8], rcx>', '<mov~~qword ptr [rsp + 0x3d0], rax>', '<jne~~0x400531>']}], 'cfg_edge_info': [(15, 21), (32, 37), (33, 45), (29, 32), (8, 9), (9, 17), (11, 14), (28, 30), (22, 19), (17, 23), (86, 95), (2, 4), (75, 83), (98, 87), (70, 59), (53, 73), (22, 3), (82, 88), (59, 68), (56, 14), (85, 50), (45, 14), (39, 46), (49, 57), (27, 29), (68, 79), (119, 57), (72, 70), (30, 34), (50, 49), (64, 75), (65, 40), (90, 94), (3, 10), (0, 2), (46, 54), (83, 82), (40, 56), (1, 3), (10, 15), (78, 49), (90, 14), (36, 43), (81, 75), (16, 19), (58, 67), (5, 9), (51, 61), (29, 31), (4, 11), (61, 72), (41, 14), (95, 49), (52, 14), (92, 96), (34, 39), (16, 3), (41, 32), (73, 64), (76, 90), (42, 49), (63, 81), (43, 50), (75, 82), (19, 22), (70, 49), (82, 87), (47, 65), (87, 40), (27, 28), (30, 33), (54, 64), (12, 3), (92, 57), (32, 36), (85, 51), (23, 12), (21, 24), (60, 70), (78, 85), (64, 40), (10, 14), (36, 42), (95, 85), (51, 60), (81, 40), (61, 71), (73, 63), (57, 76), (37, 52), (24, 27), (12, 16), (87, 92), (99, 57), (19, 3), (8, 12), (31, 41), (34, 40), (2, 5), (43, 51), (59, 69), (89, 82), (0, 1), (46, 53), (39, 47), (49, 58), (71, 70), (54, 63), (79, 86), (21, 14), (50, 59), (79, 49), (5, 8)], 'cdg_edge_info': [(32, 37), (64, 14), (73, 81), (64, 87), (8, 9), (29, 41), (2, 11), (81, 14), (81, 87), (22, 19), (2, 4), (32, 14), (87, 57), (70, 59), (34, 14), (64, 82), (85, 50), (54, 81), (39, 46), (5, 23), (49, 57), (27, 29), (30, 34), (50, 49), (81, 82), (90, 94), (64, 75), (0, 2), (46, 54), (85, 70), (10, 15), (90, 14), (81, 75), (16, 19), (39, 14), (30, 45), (29, 31), (5, 9), (51, 61), (21, 27), (61, 72), (41, 14), (95, 49), (34, 39), (41, 32), (73, 64), (19, 22), (87, 56), (70, 49), (32, 52), (87, 40), (27, 28), (10, 21), (64, 56), (30, 33), (36, 49), (54, 64), (32, 36), (85, 51), (21, 24), (64, 40), (81, 56), (8, 17), (10, 14), (27, 30), (2, 10), (95, 85), (51, 60), (81, 40), (61, 71), (87, 90), (2, 3), (27, 32), (2, 12), (34, 56), (49, 90), (12, 16), (87, 92), (2, 5), (34, 40), (2, 14), (87, 76), (59, 69), (0, 1), (30, 14), (39, 47), (0, 10), (8, 23), (39, 56), (49, 58), (39, 65), (49, 67), (49, 76), (21, 14), (79, 86), (87, 14), (79, 95), (50, 59), (79, 49), (5, 8), (39, 40), (0, 3), (5, 17), (46, 73)], 'ddg_edge_info': [(15, 21), (86, 72), (24, 33), (73, 81), (33, 45), (15, 94), (24, 51), (50, 70), (29, 32), (0, 5), (29, 41), (9, 17), (3, 31), (29, 50), (3, 40), (11, 94), (4, 94), (0, 87), (75, 90), (3, 49), (0, 23), (24, 72), (24, 81), (16, 22), (39, 81), (71, 95), (5, 3), (22, 19), (31, 86), (3, 15), (31, 95), (56, 94), (17, 23), (86, 95), (45, 94), (0, 16), (5, 30), (31, 49), (86, 49), (3, 33), (92, 90), (31, 58), (32, 69), (86, 58), (86, 67), (24, 92), (70, 59), (22, 3), (24, 37), (85, 50), (0, 46), (31, 79), (85, 59), (34, 87), (29, 36), (39, 46), (0, 9), (24, 58), (5, 87), (0, 73), (31, 51), (86, 51), (24, 67), (86, 60), (72, 70), (24, 85), (24, 30), (81, 82), (0, 30), (0, 94), (90, 94), (31, 72), (3, 10), (85, 61), (0, 57), (23, 22), (0, 2), (60, 71), (85, 70), (41, 67), (37, 94), (24, 60), (3, 37), (40, 56), (24, 69), (52, 94), (41, 94), (81, 75), (16, 19), (24, 87), (0, 32), (39, 87), (3, 67), (58, 67), (5, 9), (4, 11), (29, 31), (12, 24), (3, 21), (31, 37), (85, 72), (29, 49), (3, 94), (24, 71), (41, 32), (76, 90), (0, 34), (31, 67), (31, 85), (86, 85), (24, 46), (31, 94), (70, 86), (27, 81), (70, 95), (27, 90), (71, 60), (19, 22), (24, 73), (24, 82), (0, 82), (0, 27), (33, 94), (31, 60), (39, 73), (0, 36), (31, 69), (82, 87), (86, 69), (39, 82), (0, 45), (24, 39), (23, 19), (31, 32), (70, 79), (24, 57), (24, 75), (47, 40), (0, 29), (10, 94), (76, 94), (39, 75), (31, 71), (23, 3), (86, 71), (85, 51), (0, 47), (23, 12), (32, 36), (12, 3), (24, 32), (85, 60), (60, 70), (24, 50), (12, 30), (24, 59), (0, 4), (3, 39), (0, 22), (85, 90), (29, 67), (0, 95), (29, 85), (24, 34), (95, 85), (40, 94), (24, 61), (36, 90), (24, 70), (0, 70), (0, 15), (2, 12), (3, 32), (29, 60), (0, 24), (31, 57), (86, 57), (57, 76), (32, 86), (5, 47), (37, 52), (24, 27), (15, 24), (49, 90), (24, 36), (12, 16), (23, 16), (19, 3), (87, 92), (0, 8), (31, 41), (0, 17), (31, 50), (3, 34), (0, 81), (86, 50), (32, 79), (60, 95), (31, 59), (86, 59), (29, 71), (24, 29), (70, 69), (24, 47), (21, 94), (27, 73), (85, 69), (39, 47), (5, 24), (0, 19), (2, 16), (71, 70), (31, 61), (86, 61), (31, 70), (86, 70), (24, 86), (24, 31), (24, 95), (86, 79), (24, 40), (24, 49), (34, 81), (5, 8), (0, 58), (0, 3), (31, 36), (85, 71), (0, 12), (0, 76), (46, 73), (60, 90), (24, 79), (27, 41)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x468(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x46c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x466(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x418(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x420(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x428(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_75'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x47c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_75'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1720 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x778(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x77c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x776(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x728(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x730(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x738(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_73'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_73'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1720 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x778(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x77c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x776(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x728(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x730(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x738(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_73'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_73'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 130 nodes and 219 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1720 instructions in binary file.
[4194576, 4194652, 4194675, 4194702, 4194722, 4194739, 4194785]
[4195038, 4195133, 4195149, 4195175]
The execution time of patched subCFG information extraction via angr: 0:00:00.841272
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400154>, <DisassemblerInsn "jne" for 0x40015a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "call" for 0x400189>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "add" for 0x400196>, <DisassemblerInsn "call" for 0x40019d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "add" for 0x4001aa>, <DisassemblerInsn "call" for 0x4001ae>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "je" for 0x400171>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7b0]>', '<mov~~rcx, qword ptr [rsp + 0x7d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x778], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x77c], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x780], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400173>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x77c]>', '<mov~~esi, dword ptr [rsp + 0x778]>', '<mov~~rdi, qword ptr [rsp + 0x780]>', '<call~~0x500008>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x776]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~qword ptr [rsp + 0x768], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x760]>', '<mov~~rax, qword ptr [rsp + 0x768]>', '<mov~~qword ptr [rsp + 0x740], rax>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x720], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x728], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x730], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~rcx, qword ptr [rsp + 0x748]>', '<mov~~rax, qword ptr [rsp + 0x740]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x750]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x768], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x400226>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x790], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x776], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x4002de>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x780]>', '<mov~~ecx, dword ptr [rsp + 0x77c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001b3>']}], 'cfg_edge_info': [(9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (16, 12), (8, 9), (15, 3), (8, 12), (5, 9), (2, 5), (15, 18)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033d>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "jl" for 0x400347>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x400362>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "add" for 0x40221e>, <DisassemblerInsn "pop" for 0x402225>, <DisassemblerInsn "pop" for 0x402226>, <DisassemblerInsn "pop" for 0x402228>, <DisassemblerInsn "pop" for 0x40222a>, <DisassemblerInsn "pop" for 0x40222c>, <DisassemblerInsn "pop" for 0x40222e>, <DisassemblerInsn "ret" for 0x40222f>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "mov" for 0x40036a>, <DisassemblerInsn "jl" for 0x400371>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "add" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x720], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x728], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x730], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x776]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~qword ptr [rsp + 0x768], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x760]>', '<mov~~rax, qword ptr [rsp + 0x768]>', '<mov~~qword ptr [rsp + 0x740], rax>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402217>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402217>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rax, qword ptr [rsp + 0x7a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~rcx, qword ptr [rsp + 0x748]>', '<mov~~rax, qword ptr [rsp + 0x740]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x750]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x768], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x400226>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x760]>', '<mov~~rax, qword ptr [rsp + 0x768]>', '<mov~~qword ptr [rsp + 0x740], rax>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x776], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x4002de>']}], 'cfg_edge_info': [(6, 11), (14, 17), (14, 10), (12, 3), (18, 3), (20, 3), (15, 3), (3, 6), (6, 10), (11, 14), (1, 3)]}]}
{'tgv_decode_frame': [4195038, 4195133, 4195149, 4195175]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/O3/eatgv.o---before
The extraction of function: tgv_decode_frame
[4195038, 4195133, 4195149, 4195175]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 132 nodes and 206 edges in CFGEmulated.
It has 132 nodes and 214 edges in CDG.
It has 10552 nodes and 13168 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195038, 4195133, 4195149, 4195175]
{4197378, 4196995, 4196233, 4198027, 4197261, 4195342, 4194702, 4194576, 4196880, 4195858, 4197523, 4203031, 4196631, 4195738, 4195963, 4195228, 4202910, 4196383, 4194722, 4196132, 4197413, 4194854, 4195239, 4196520, 4196777, 4195244, 4195757, 4194352, 4197040, 4197298, 4194739, 4195633, 4197175, 4197303, 4202937, 4195386, 4195515, 4196794, 4195133, 4195772, 4194495, 4201025, 4194500, 4201156, 4202951, 4196295, 4196863, 4195149, 4197070, 4196558, 4196048, 4197628, 4194652, 4202973, 4195038, 4194785, 4194532, 4196836, 4195175, 4197097, 4194922, 4202991, 4197488, 4195313, 4194675, 4195191, 4203003, 4197116, 4194559}
[19, 53, 68, 37, 16, 51, 64, 78, 5, 42, 11, 2, 1, 56, 43, 59, 45, 31, 0, 65, 49, 15, 92, 50, 60, 10, 85, 32, 61, 70, 87, 46, 9, 82, 21, 17, 40, 4, 3, 57, 128, 81, 86, 29, 52, 58, 83, 24, 30, 54, 73, 63, 71, 98, 89, 67, 47, 12, 23, 69, 36, 28, 94, 41, 39, 33, 34, 96, 90, 126, 22, 119, 8, 76, 14, 27, 79, 75, 72, 88, 95]
The execution time of patched slicing information extraction via angr: 0:01:01.597604
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "movzx" for 0x400292>, <DisassemblerInsn "shl" for 0x400296>, <DisassemblerInsn "movzx" for 0x40029a>, <DisassemblerInsn "shl" for 0x40029e>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "movzx" for 0x4002a4>, <DisassemblerInsn "or" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "add" for 0x4002b2>, <DisassemblerInsn "add" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "jne" for 0x4002d8>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be0>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "shl" for 0x400bf6>, <DisassemblerInsn "mov" for 0x400bf9>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "call" for 0x400bfd>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400862>, <DisassemblerInsn "mov" for 0x40086a>, <DisassemblerInsn "mov" for 0x400872>, <DisassemblerInsn "mov" for 0x400879>, <DisassemblerInsn "mov" for 0x400880>, <DisassemblerInsn "mov" for 0x400888>, <DisassemblerInsn "cmp" for 0x400890>, <DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "jle" for 0x4008a2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "lea" for 0x4009f1>, <DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "call" for 0x4009fa>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "movzx" for 0x4001f1>, <DisassemblerInsn "add" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "sub" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "cmovb" for 0x400204>, <DisassemblerInsn "add" for 0x400207>, <DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "xor" for 0x400214>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059a>, <DisassemblerInsn "and" for 0x4005a1>, <DisassemblerInsn "cmp" for 0x4005a4>, <DisassemblerInsn "je" for 0x4005a7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400ca9>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "imul" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cbb>, <DisassemblerInsn "and" for 0x400cbe>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "shr" for 0x400ccb>, <DisassemblerInsn "mov" for 0x400cce>, <DisassemblerInsn "add" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "shl" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400cde>, <DisassemblerInsn "add" for 0x400ce0>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "shl" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cee>, <DisassemblerInsn "add" for 0x400cf0>, <DisassemblerInsn "cmp" for 0x400cf3>, <DisassemblerInsn "ja" for 0x400cf6>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "test" for 0x40096e>, <DisassemblerInsn "setg" for 0x400970>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "sub" for 0x400977>, <DisassemblerInsn "setb" for 0x40097a>, <DisassemblerInsn "and" for 0x40097e>, <DisassemblerInsn "test" for 0x400981>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "jne" for 0x4009a3>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "movzx" for 0x400138>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400154>, <DisassemblerInsn "jne" for 0x40015a>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "jmp" for 0x40010b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000df>, <DisassemblerInsn "jge" for 0x4000e2>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021be>, <DisassemblerInsn "jmp" for 0x4021c5>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050b>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "mov" for 0x40051a>, <DisassemblerInsn "mov" for 0x400521>, <DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "movzx" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "and" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "and" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "je" for 0x400594>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x4007a0>, <DisassemblerInsn "cmp" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007ba>, <DisassemblerInsn "je" for 0x4007c1>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400af0>, <DisassemblerInsn "jmp" for 0x400af7>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f9>, <DisassemblerInsn "mov" for 0x400401>, <DisassemblerInsn "imul" for 0x400403>, <DisassemblerInsn "movsxd" for 0x400406>, <DisassemblerInsn "call" for 0x400409>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400030>, <DisassemblerInsn "push" for 0x400031>, <DisassemblerInsn "push" for 0x400033>, <DisassemblerInsn "push" for 0x400035>, <DisassemblerInsn "push" for 0x400037>, <DisassemblerInsn "push" for 0x400039>, <DisassemblerInsn "sub" for 0x40003a>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "movsxd" for 0x40007b>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400094>, <DisassemblerInsn "add" for 0x400096>, <DisassemblerInsn "mov" for 0x40009a>, <DisassemblerInsn "cmp" for 0x4000a2>, <DisassemblerInsn "sete" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "test" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "jne" for 0x4000bd>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400bb2>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a9>, <DisassemblerInsn "cmp" for 0x4009b1>, <DisassemblerInsn "jle" for 0x4009b4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x400362>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac4>, <DisassemblerInsn "cmp" for 0x401acb>, <DisassemblerInsn "jle" for 0x401ace>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d0>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006de>, <DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "shl" for 0x4006e8>, <DisassemblerInsn "and" for 0x4006eb>, <DisassemblerInsn "movzx" for 0x4006f0>, <DisassemblerInsn "or" for 0x4006f4>, <DisassemblerInsn "add" for 0x4006f7>, <DisassemblerInsn "shr" for 0x4006f9>, <DisassemblerInsn "and" for 0x4006fc>, <DisassemblerInsn "add" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400702>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400716>, <DisassemblerInsn "mov" for 0x40071d>, <DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "add" for 0x400768>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "mov" for 0x400773>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "sub" for 0x40077d>, <DisassemblerInsn "cmp" for 0x400780>, <DisassemblerInsn "jl" for 0x400783>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067b>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "shr" for 0x40068d>, <DisassemblerInsn "movzx" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "and" for 0x400697>, <DisassemblerInsn "rol" for 0x40069b>, <DisassemblerInsn "add" for 0x40069f>, <DisassemblerInsn "movzx" for 0x4006a3>, <DisassemblerInsn "and" for 0x4006a6>, <DisassemblerInsn "add" for 0x4006a9>, <DisassemblerInsn "mov" for 0x4006ac>, <DisassemblerInsn "mov" for 0x4006b1>, <DisassemblerInsn "mov" for 0x4006b9>, <DisassemblerInsn "mov" for 0x4006c0>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "jmp" for 0x4006ce>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40033d>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "jl" for 0x400347>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x40053f>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054f>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400566>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "movzx" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "and" for 0x400582>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "and" for 0x40058c>, <DisassemblerInsn "cmp" for 0x400591>, <DisassemblerInsn "je" for 0x400594>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043a>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x40045a>, <DisassemblerInsn "mov" for 0x400462>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "imul" for 0x400471>, <DisassemblerInsn "movsxd" for 0x400474>, <DisassemblerInsn "add" for 0x400477>, <DisassemblerInsn "mov" for 0x40047a>, <DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "and" for 0x400485>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x40048e>, <DisassemblerInsn "cmp" for 0x400493>, <DisassemblerInsn "cmove" for 0x400497>, <DisassemblerInsn "add" for 0x40049b>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "add" for 0x4004a6>, <DisassemblerInsn "mov" for 0x4004aa>, <DisassemblerInsn "cmp" for 0x4004b2>, <DisassemblerInsn "ja" for 0x4004b5>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "and" for 0x4005b4>, <DisassemblerInsn "cmp" for 0x4005b7>, <DisassemblerInsn "je" for 0x4005ba>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "add" for 0x400768>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "mov" for 0x400773>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "sub" for 0x40077d>, <DisassemblerInsn "cmp" for 0x400780>, <DisassemblerInsn "jl" for 0x400783>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a49>, <DisassemblerInsn "mov" for 0x401a50>, <DisassemblerInsn "mov" for 0x401a57>, <DisassemblerInsn "sub" for 0x401a5e>, <DisassemblerInsn "mov" for 0x401a60>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "mov" for 0x401a6a>, <DisassemblerInsn "mov" for 0x401a72>, <DisassemblerInsn "mov" for 0x401a78>, <DisassemblerInsn "mov" for 0x401a7f>, <DisassemblerInsn "cdq" for 0x401a84>, <DisassemblerInsn "idiv" for 0x401a85>, <DisassemblerInsn "mov" for 0x401a87>, <DisassemblerInsn "mov" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a90>, <DisassemblerInsn "imul" for 0x401a98>, <DisassemblerInsn "mov" for 0x401a9b>, <DisassemblerInsn "mov" for 0x401aa1>, <DisassemblerInsn "mov" for 0x401aa8>, <DisassemblerInsn "cdq" for 0x401aad>, <DisassemblerInsn "idiv" for 0x401aae>, <DisassemblerInsn "mov" for 0x401ab0>, <DisassemblerInsn "mov" for 0x401ab2>, <DisassemblerInsn "imul" for 0x401ab9>, <DisassemblerInsn "cmp" for 0x401abc>, <DisassemblerInsn "jl" for 0x401abe>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bb7>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "mov" for 0x400bc6>, <DisassemblerInsn "add" for 0x400bc9>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "cmp" for 0x400bd8>, <DisassemblerInsn "jge" for 0x400bde>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "call" for 0x400189>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8b>, <DisassemblerInsn "mov" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e9b>, <DisassemblerInsn "sub" for 0x400ea3>, <DisassemblerInsn "mov" for 0x400ea6>, <DisassemblerInsn "shl" for 0x400ea8>, <DisassemblerInsn "xor" for 0x400eab>, <DisassemblerInsn "cmp" for 0x400ead>, <DisassemblerInsn "cmovb" for 0x400eb3>, <DisassemblerInsn "mov" for 0x400eb7>, <DisassemblerInsn "xor" for 0x400ebf>, <DisassemblerInsn "cmp" for 0x400ec1>, <DisassemblerInsn "cmovb" for 0x400ec7>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "add" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "xor" for 0x400edb>, <DisassemblerInsn "cmp" for 0x400edd>, <DisassemblerInsn "mov" for 0x400ee1>, <DisassemblerInsn "je" for 0x400ee8>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "mov" for 0x40036a>, <DisassemblerInsn "jl" for 0x400371>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "add" for 0x400196>, <DisassemblerInsn "call" for 0x40019d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a6>, <DisassemblerInsn "lea" for 0x4021ab>, <DisassemblerInsn "mov" for 0x4021b2>, <DisassemblerInsn "call" for 0x4021b4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "lea" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "call" for 0x4000fa>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "add" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "call" for 0x400338>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "add" for 0x4021cf>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "call" for 0x4021d8>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aab>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "mov" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "mov" for 0x400c8a>, <DisassemblerInsn "mov" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400ca9>, <DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "imul" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cbb>, <DisassemblerInsn "and" for 0x400cbe>, <DisassemblerInsn "mov" for 0x400cc4>, <DisassemblerInsn "shr" for 0x400ccb>, <DisassemblerInsn "mov" for 0x400cce>, <DisassemblerInsn "add" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "shl" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400cde>, <DisassemblerInsn "add" for 0x400ce0>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "shl" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cee>, <DisassemblerInsn "add" for 0x400cf0>, <DisassemblerInsn "cmp" for 0x400cf3>, <DisassemblerInsn "ja" for 0x400cf6>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e5>, <DisassemblerInsn "mov" for 0x4008ec>, <DisassemblerInsn "sub" for 0x4008f3>, <DisassemblerInsn "mov" for 0x4008f5>, <DisassemblerInsn "mov" for 0x4008fc>, <DisassemblerInsn "sub" for 0x4008fe>, <DisassemblerInsn "cmp" for 0x400901>, <DisassemblerInsn "cmovl" for 0x400904>, <DisassemblerInsn "mov" for 0x400908>, <DisassemblerInsn "mov" for 0x400910>, <DisassemblerInsn "call" for 0x400912>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jne" for 0x4003ef>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ff>, <DisassemblerInsn "mov" for 0x400a04>, <DisassemblerInsn "jmp" for 0x400a0b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "add" for 0x4009cd>, <DisassemblerInsn "mov" for 0x4009d1>, <DisassemblerInsn "xor" for 0x4009d9>, <DisassemblerInsn "mov" for 0x4009db>, <DisassemblerInsn "jmp" for 0x4009e2>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d1f>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2f>, <DisassemblerInsn "mov" for 0x400d36>, <DisassemblerInsn "movzx" for 0x400d3e>, <DisassemblerInsn "mov" for 0x400d41>, <DisassemblerInsn "xor" for 0x400d49>, <DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "xor" for 0x400d4d>, <DisassemblerInsn "mov" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d57>, <DisassemblerInsn "mov" for 0x400d5e>, <DisassemblerInsn "mov" for 0x400d66>, <DisassemblerInsn "mov" for 0x400d6e>, <DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "shr" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9c>, <DisassemblerInsn "mov" for 0x400da4>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400dab>, <DisassemblerInsn "and" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "shr" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dc3>, <DisassemblerInsn "shl" for 0x400dcb>, <DisassemblerInsn "mov" for 0x400dcf>, <DisassemblerInsn "sar" for 0x400dd7>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de7>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "cmova" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "shr" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "and" for 0x400e1a>, <DisassemblerInsn "mov" for 0x400e1d>, <DisassemblerInsn "shr" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2e>, <DisassemblerInsn "shl" for 0x400e35>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "sar" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "add" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "cmp" for 0x400e55>, <DisassemblerInsn "cmova" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5c>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "add" for 0x400e67>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "cmp" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7e>, <DisassemblerInsn "jne" for 0x400e85>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "add" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "call" for 0x400397>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "add" for 0x400abb>, <DisassemblerInsn "mov" for 0x400abf>, <DisassemblerInsn "cmp" for 0x400ac7>, <DisassemblerInsn "jne" for 0x400acc>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c25>, <DisassemblerInsn "mov" for 0x400c2d>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "add" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "cmp" for 0x400c46>, <DisassemblerInsn "jge" for 0x400c4c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c02>, <DisassemblerInsn "mov" for 0x400c0a>, <DisassemblerInsn "mov" for 0x400c11>, <DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "mov" for 0x400c1c>, <DisassemblerInsn "mov" for 0x400c23>, <DisassemblerInsn "mov" for 0x400c25>, <DisassemblerInsn "mov" for 0x400c2d>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "add" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "cmp" for 0x400c46>, <DisassemblerInsn "jge" for 0x400c4c>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c4e>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "shl" for 0x400c64>, <DisassemblerInsn "mov" for 0x400c67>, <DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "call" for 0x400c6b>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x400619>, <DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "shl" for 0x40062a>, <DisassemblerInsn "and" for 0x40062d>, <DisassemblerInsn "mov" for 0x400632>, <DisassemblerInsn "rol" for 0x400636>, <DisassemblerInsn "movzx" for 0x40063a>, <DisassemblerInsn "or" for 0x40063d>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "shl" for 0x400642>, <DisassemblerInsn "and" for 0x400645>, <DisassemblerInsn "movzx" for 0x40064b>, <DisassemblerInsn "or" for 0x40064f>, <DisassemblerInsn "add" for 0x400652>, <DisassemblerInsn "mov" for 0x400654>, <DisassemblerInsn "mov" for 0x400659>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400668>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "jmp" for 0x400676>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402121>, <DisassemblerInsn "mov" for 0x402129>, <DisassemblerInsn "mov" for 0x402131>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "add" for 0x402141>, <DisassemblerInsn "mov" for 0x402145>, <DisassemblerInsn "mov" for 0x40214a>, <DisassemblerInsn "mov" for 0x402150>, <DisassemblerInsn "cdq" for 0x402155>, <DisassemblerInsn "idiv" for 0x402156>, <DisassemblerInsn "mov" for 0x402158>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "movsxd" for 0x40215f>, <DisassemblerInsn "cmp" for 0x402162>, <DisassemblerInsn "jge" for 0x402165>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5e>, <DisassemblerInsn "mov" for 0x400d66>, <DisassemblerInsn "mov" for 0x400d6e>, <DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d85>, <DisassemblerInsn "mov" for 0x400d8d>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "shr" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9c>, <DisassemblerInsn "mov" for 0x400da4>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "mov" for 0x400dab>, <DisassemblerInsn "and" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "shr" for 0x400db8>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dc3>, <DisassemblerInsn "shl" for 0x400dcb>, <DisassemblerInsn "mov" for 0x400dcf>, <DisassemblerInsn "sar" for 0x400dd7>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de7>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "mov" for 0x400df2>, <DisassemblerInsn "cmova" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "shr" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e14>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "and" for 0x400e1a>, <DisassemblerInsn "mov" for 0x400e1d>, <DisassemblerInsn "shr" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2e>, <DisassemblerInsn "shl" for 0x400e35>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "sar" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e42>, <DisassemblerInsn "add" for 0x400e49>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "cmp" for 0x400e55>, <DisassemblerInsn "cmova" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5c>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "add" for 0x400e67>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "cmp" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7e>, <DisassemblerInsn "jne" for 0x400e85>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a10>, <DisassemblerInsn "mov" for 0x400a17>, <DisassemblerInsn "mov" for 0x400a1f>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "mov" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a37>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "mov" for 0x400a41>, <DisassemblerInsn "imul" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "movsxd" for 0x400a4e>, <DisassemblerInsn "add" for 0x400a51>, <DisassemblerInsn "mov" for 0x400a54>, <DisassemblerInsn "mov" for 0x400a5c>, <DisassemblerInsn "mov" for 0x400a5f>, <DisassemblerInsn "mov" for 0x400a61>, <DisassemblerInsn "imul" for 0x400a63>, <DisassemblerInsn "mov" for 0x400a66>, <DisassemblerInsn "movsxd" for 0x400a6d>, <DisassemblerInsn "add" for 0x400a70>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "movsxd" for 0x400a7b>, <DisassemblerInsn "call" for 0x400a7e>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b9c>, <DisassemblerInsn "mov" for 0x400b9f>, <DisassemblerInsn "lea" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400bab>, <DisassemblerInsn "call" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c7>, <DisassemblerInsn "cmp" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "je" for 0x4001db>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "add" for 0x4001aa>, <DisassemblerInsn "call" for 0x4001ae>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007df>, <DisassemblerInsn "mov" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ef>, <DisassemblerInsn "sub" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007f9>, <DisassemblerInsn "sub" for 0x400800>, <DisassemblerInsn "cmp" for 0x400803>, <DisassemblerInsn "cmovl" for 0x400806>, <DisassemblerInsn "shl" for 0x40080a>, <DisassemblerInsn "sar" for 0x40080e>, <DisassemblerInsn "mov" for 0x400812>, <DisassemblerInsn "call" for 0x40081a>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004bb>, <DisassemblerInsn "mov" for 0x4004c3>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "movzx" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "movzx" for 0x4004d9>, <DisassemblerInsn "shl" for 0x4004dd>, <DisassemblerInsn "or" for 0x4004e0>, <DisassemblerInsn "movzx" for 0x4004e2>, <DisassemblerInsn "or" for 0x4004e6>, <DisassemblerInsn "mov" for 0x4004e8>, <DisassemblerInsn "setne" for 0x4004ef>, <DisassemblerInsn "sub" for 0x4004f2>, <DisassemblerInsn "setb" for 0x4004f5>, <DisassemblerInsn "and" for 0x4004f8>, <DisassemblerInsn "test" for 0x4004fa>, <DisassemblerInsn "jne" for 0x4004fc>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003a7>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021fb>, <DisassemblerInsn "mov" for 0x402202>, <DisassemblerInsn "mov" for 0x40220a>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "add" for 0x40221e>, <DisassemblerInsn "pop" for 0x402225>, <DisassemblerInsn "pop" for 0x402226>, <DisassemblerInsn "pop" for 0x402228>, <DisassemblerInsn "pop" for 0x40222a>, <DisassemblerInsn "pop" for 0x40222c>, <DisassemblerInsn "pop" for 0x40222e>, <DisassemblerInsn "ret" for 0x40222f>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "cmp" for 0x400421>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "je" for 0x400434>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "movzx" for 0x400b4a>, <DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "movzx" for 0x400b54>, <DisassemblerInsn "mov" for 0x400b58>, <DisassemblerInsn "mov" for 0x400b5f>, <DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "movzx" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b6e>, <DisassemblerInsn "mov" for 0x400b75>, <DisassemblerInsn "movzx" for 0x400b79>, <DisassemblerInsn "mov" for 0x400b7c>, <DisassemblerInsn "add" for 0x400b83>, <DisassemblerInsn "cmp" for 0x400b87>, <DisassemblerInsn "jb" for 0x400b8b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ace>, <DisassemblerInsn "mov" for 0x400ad6>, <DisassemblerInsn "lea" for 0x400adb>, <DisassemblerInsn "mov" for 0x400ae2>, <DisassemblerInsn "call" for 0x400ae4>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400afc>, <DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "mov" for 0x400b14>, <DisassemblerInsn "mov" for 0x400b1b>, <DisassemblerInsn "add" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b26>, <DisassemblerInsn "cmp" for 0x400b2e>, <DisassemblerInsn "ja" for 0x400b31>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad4>, <DisassemblerInsn "mov" for 0x401adb>, <DisassemblerInsn "mov" for 0x401ae2>, <DisassemblerInsn "mov" for 0x401aea>, <DisassemblerInsn "mov" for 0x401af2>, <DisassemblerInsn "mov" for 0x401afa>, <DisassemblerInsn "sub" for 0x401aff>, <DisassemblerInsn "mov" for 0x401b02>, <DisassemblerInsn "shr" for 0x401b08>, <DisassemblerInsn "mov" for 0x401b0b>, <DisassemblerInsn "mov" for 0x401b13>, <DisassemblerInsn "mov" for 0x401b1b>, <DisassemblerInsn "add" for 0x401b1e>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "add" for 0x401b30>, <DisassemblerInsn "mov" for 0x401b37>, <DisassemblerInsn "add" for 0x401b3f>, <DisassemblerInsn "mov" for 0x401b43>, <DisassemblerInsn "mov" for 0x401b4b>, <DisassemblerInsn "mov" for 0x401b4e>, <DisassemblerInsn "add" for 0x401b56>, <DisassemblerInsn "mov" for 0x401b5a>, <DisassemblerInsn "xor" for 0x401b62>, <DisassemblerInsn "mov" for 0x401b64>, <DisassemblerInsn "mov" for 0x401b6c>, <DisassemblerInsn "mov" for 0x401b73>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b8a>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "mov" for 0x401ba0>, <DisassemblerInsn "mov" for 0x401ba7>, <DisassemblerInsn "mov" for 0x401baf>, <DisassemblerInsn "mov" for 0x401bb6>, <DisassemblerInsn "cmp" for 0x401bbe>, <DisassemblerInsn "mov" for 0x401bc1>, <DisassemblerInsn "mov" for 0x401bc9>, <DisassemblerInsn "jle" for 0x401bd0>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021ef>, <DisassemblerInsn "mov" for 0x4021f2>, <DisassemblerInsn "jl" for 0x4021f9>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d4>, <DisassemblerInsn "mov" for 0x4018dc>, <DisassemblerInsn "mov" for 0x4018de>, <DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "mov" for 0x4018e8>, <DisassemblerInsn "shl" for 0x4018eb>, <DisassemblerInsn "mov" for 0x4018ef>, <DisassemblerInsn "add" for 0x4018f7>, <DisassemblerInsn "mov" for 0x4018fa>, <DisassemblerInsn "add" for 0x401902>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "mov" for 0x40190e>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "shr" for 0x401914>, <DisassemblerInsn "mov" for 0x401917>, <DisassemblerInsn "mov" for 0x40191e>, <DisassemblerInsn "mov" for 0x401920>, <DisassemblerInsn "mov" for 0x401924>, <DisassemblerInsn "and" for 0x401927>, <DisassemblerInsn "mov" for 0x40192a>, <DisassemblerInsn "shr" for 0x401931>, <DisassemblerInsn "mov" for 0x401934>, <DisassemblerInsn "mov" for 0x40193c>, <DisassemblerInsn "and" for 0x401944>, <DisassemblerInsn "mov" for 0x401948>, <DisassemblerInsn "add" for 0x401950>, <DisassemblerInsn "mov" for 0x401954>, <DisassemblerInsn "cmp" for 0x40195c>, <DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "cmova" for 0x401961>, <DisassemblerInsn "mov" for 0x401965>, <DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x40196f>, <DisassemblerInsn "shl" for 0x401977>, <DisassemblerInsn "mov" for 0x40197b>, <DisassemblerInsn "add" for 0x401983>, <DisassemblerInsn "mov" for 0x401986>, <DisassemblerInsn "add" for 0x40198e>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199d>, <DisassemblerInsn "shr" for 0x40199f>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019a9>, <DisassemblerInsn "mov" for 0x4019ab>, <DisassemblerInsn "mov" for 0x4019ae>, <DisassemblerInsn "and" for 0x4019b0>, <DisassemblerInsn "mov" for 0x4019b3>, <DisassemblerInsn "shr" for 0x4019ba>, <DisassemblerInsn "mov" for 0x4019bc>, <DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "and" for 0x4019cb>, <DisassemblerInsn "mov" for 0x4019ce>, <DisassemblerInsn "add" for 0x4019d5>, <DisassemblerInsn "mov" for 0x4019d8>, <DisassemblerInsn "cmp" for 0x4019df>, <DisassemblerInsn "cmova" for 0x4019e1>, <DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "shl" for 0x4019fa>, <DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "add" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a11>, <DisassemblerInsn "add" for 0x401a14>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "cmp" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2d>, <DisassemblerInsn "mov" for 0x401a34>, <DisassemblerInsn "jne" for 0x401a3b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400236>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "add" for 0x400251>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "cmp" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "jae" for 0x400268>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c4>, <DisassemblerInsn "and" for 0x4019cb>, <DisassemblerInsn "mov" for 0x4019ce>, <DisassemblerInsn "add" for 0x4019d5>, <DisassemblerInsn "mov" for 0x4019d8>, <DisassemblerInsn "cmp" for 0x4019df>, <DisassemblerInsn "cmova" for 0x4019e1>, <DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "shl" for 0x4019fa>, <DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "add" for 0x401a06>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a11>, <DisassemblerInsn "add" for 0x401a14>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "cmp" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "mov" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2d>, <DisassemblerInsn "mov" for 0x401a34>, <DisassemblerInsn "jne" for 0x401a3b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "je" for 0x400171>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021dd>, <DisassemblerInsn "mov" for 0x4021e2>, <DisassemblerInsn "call" for 0x4021ea>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "add" for 0x40221e>, <DisassemblerInsn "pop" for 0x402225>, <DisassemblerInsn "pop" for 0x402226>, <DisassemblerInsn "pop" for 0x402228>, <DisassemblerInsn "pop" for 0x40222a>, <DisassemblerInsn "pop" for 0x40222c>, <DisassemblerInsn "pop" for 0x40222e>, <DisassemblerInsn "ret" for 0x40222f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "test" for 0x4003a3>, <DisassemblerInsn "jne" for 0x4003a5>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b7>, <DisassemblerInsn "sub" for 0x4008bf>, <DisassemblerInsn "movsxd" for 0x4008c2>, <DisassemblerInsn "cmp" for 0x4008c5>, <DisassemblerInsn "jl" for 0x4008c8>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cfc>, <DisassemblerInsn "mov" for 0x400d04>, <DisassemblerInsn "or" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "cmp" for 0x400d15>, <DisassemblerInsn "je" for 0x400d19>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005bc>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d2>, <DisassemblerInsn "shl" for 0x4005d9>, <DisassemblerInsn "and" for 0x4005dc>, <DisassemblerInsn "add" for 0x4005df>, <DisassemblerInsn "cmp" for 0x4005e2>, <DisassemblerInsn "cmovb" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "xor" for 0x4005ee>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400606>, <DisassemblerInsn "jmp" for 0x40060d>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef6>, <DisassemblerInsn "lea" for 0x400efe>, <DisassemblerInsn "add" for 0x400f06>, <DisassemblerInsn "mov" for 0x400f0d>, <DisassemblerInsn "movzx" for 0x400f15>, <DisassemblerInsn "mov" for 0x400f18>, <DisassemblerInsn "lea" for 0x400f20>, <DisassemblerInsn "mov" for 0x400f28>, <DisassemblerInsn "lea" for 0x400f30>, <DisassemblerInsn "add" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3c>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "add" for 0x400f4c>, <DisassemblerInsn "mov" for 0x400f50>, <DisassemblerInsn "lea" for 0x400f58>, <DisassemblerInsn "add" for 0x400f60>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "xor" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f6e>, <DisassemblerInsn "xor" for 0x400f70>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f81>, <DisassemblerInsn "mov" for 0x400f89>, <DisassemblerInsn "mov" for 0x400f91>, <DisassemblerInsn "mov" for 0x400f99>, <DisassemblerInsn "mov" for 0x400fa1>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb8>, <DisassemblerInsn "mov" for 0x400fc0>, <DisassemblerInsn "mov" for 0x400fc8>, <DisassemblerInsn "mov" for 0x400fd0>, <DisassemblerInsn "mov" for 0x400fd8>, <DisassemblerInsn "shr" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fde>, <DisassemblerInsn "mov" for 0x400fe5>, <DisassemblerInsn "mov" for 0x400fe7>, <DisassemblerInsn "mov" for 0x400fea>, <DisassemblerInsn "and" for 0x400fed>, <DisassemblerInsn "mov" for 0x400ff0>, <DisassemblerInsn "shr" for 0x400ff7>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x401001>, <DisassemblerInsn "and" for 0x401008>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x401019>, <DisassemblerInsn "cmp" for 0x401021>, <DisassemblerInsn "mov" for 0x401024>, <DisassemblerInsn "cmova" for 0x401026>, <DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x401031>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "shr" for 0x401037>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x401043>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x40104a>, <DisassemblerInsn "and" for 0x40104c>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "shr" for 0x401056>, <DisassemblerInsn "mov" for 0x401059>, <DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "and" for 0x401069>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "add" for 0x401078>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400917>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "shl" for 0x40092e>, <DisassemblerInsn "sar" for 0x400932>, <DisassemblerInsn "add" for 0x400936>, <DisassemblerInsn "mov" for 0x400939>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "test" for 0x40096e>, <DisassemblerInsn "setg" for 0x400970>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "sub" for 0x400977>, <DisassemblerInsn "setb" for 0x40097a>, <DisassemblerInsn "and" for 0x40097e>, <DisassemblerInsn "test" for 0x400981>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "jne" for 0x4009a3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~rcx, qword ptr [rsp + 0x748]>', '<mov~~rax, qword ptr [rsp + 0x740]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~r8, qword ptr [rsp + 0x750]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x768], rcx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x400226>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c4]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x680]>', '<mov~~rcx, qword ptr [rsp + 0x668]>', '<mov~~rsi, qword ptr [rsp + 0x670]>', '<mov~~eax, dword ptr [rsp + 0x678]>', '<mov~~dword ptr [rsp + 0x634], eax>', '<mov~~qword ptr [rsp + 0x638], rsi>', '<mov~~qword ptr [rsp + 0x640], rcx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x648], rcx>', '<mov~~dword ptr [rsp + 0x654], eax>', '<jle~~0x400948>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x738]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x18b0]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~cx, word ptr [rsp + 0x776]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, edx>', '<sub~~ecx, 0xff>', '<mov~~ecx, 0xff>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x758], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x760], rcx>', '<mov~~qword ptr [rsp + 0x768], rax>', '<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x760]>', '<mov~~rax, qword ptr [rsp + 0x768]>', '<mov~~qword ptr [rsp + 0x740], rax>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6cc]>', '<and~~eax, 0x40>', '<cmp~~eax, 0>', '<je~~0x40067b>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~edx, dword ptr [rsp + 0x5d0]>', '<mov~~esi, dword ptr [rsp + 0x5c8]>', '<mov~~rax, qword ptr [rsp + 0x5d8]>', '<mov~~edi, dword ptr [rsp + 0x5c4]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x59c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x5a8], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x40219e>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x638]>', '<mov~~esi, dword ptr [rsp + 0x67c]>', '<mov~~r9, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x648]>', '<mov~~edx, dword ptr [rsp + 0x654]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x6ac], esi>', '<mov~~dword ptr [rsp + 0x6d4], edx>', '<mov~~qword ptr [rsp + 0x6d8], rcx>', '<mov~~qword ptr [rsp + 0x6e0], rax>', '<jne~~0x400531>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7b0]>', '<mov~~rcx, qword ptr [rsp + 0x7d8]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x778], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x77c], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x780], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400173>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x4009a9>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402217>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x790], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x400110>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402217>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6f0]>', '<mov~~rcx, qword ptr [rsp + 0x708]>', '<mov~~edx, dword ptr [rsp + 0x6ec]>', '<mov~~dword ptr [rsp + 0x6d4], edx>', '<mov~~qword ptr [rsp + 0x6d8], rcx>', '<mov~~qword ptr [rsp + 0x6e0], rax>', '<mov~~ecx, dword ptr [rsp + 0x6ac]>', '<mov~~edx, dword ptr [rsp + 0x6d4]>', '<mov~~rax, qword ptr [rsp + 0x6d8]>', '<mov~~rsi, qword ptr [rsp + 0x6e0]>', '<mov~~qword ptr [rsp + 0x6b0], rsi>', '<mov~~qword ptr [rsp + 0x6b8], rax>', '<mov~~dword ptr [rsp + 0x6c0], edx>', '<mov~~dword ptr [rsp + 0x6c4], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x6cb], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x6cc], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x6d0], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006d0>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c0]>', '<mov~~rcx, qword ptr [rsp + 0x688]>', '<mov~~rdx, qword ptr [rsp + 0x6b0]>', '<mov~~esi, dword ptr [rsp + 0x684]>', '<cmp~~esi, 0>', '<mov~~qword ptr [rsp + 0x668], rdx>', '<mov~~qword ptr [rsp + 0x670], rcx>', '<mov~~dword ptr [rsp + 0x678], eax>', '<je~~0x40085b>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402217>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x730]>', '<mov~~rax, qword ptr [rsp + 0x728]>', '<mov~~eax, dword ptr [rax]>', '<imul~~eax, dword ptr [rcx]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r15>', '<push~~r14>', '<push~~r13>', '<push~~r12>', '<push~~rbx>', '<sub~~rsp, 0x808>', '<mov~~qword ptr [rsp + 0x798], rdi>', '<mov~~qword ptr [rsp + 0x7a0], rsi>', '<mov~~qword ptr [rsp + 0x7a8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x7b0], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x7bc], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x7c0], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7c8], rcx>', '<mov~~qword ptr [rsp + 0x7d0], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x7d8], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x7e7], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jne~~0x4000c4>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x40219e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x730]>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x4021c7>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x15c]>', '<cmp~~eax, 3>', '<jle~~0x4021c7>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x6d0]>', '<mov~~ecx, dword ptr [rsp + 0x6cc]>', '<mov~~rsi, qword ptr [rsp + 0x6b8]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x698], rsi>', '<mov~~dword ptr [rsp + 0x6a0], edx>', '<mov~~dword ptr [rsp + 0x6a4], ecx>', '<mov~~dword ptr [rsp + 0x6a8], eax>', '<mov~~rax, qword ptr [rsp + 0x7c8]>', '<mov~~rdx, qword ptr [rsp + 0x6b8]>', '<mov~~rsi, qword ptr [rsp + 0x698]>', '<mov~~ecx, dword ptr [rsp + 0x6a0]>', '<mov~~edi, dword ptr [rsp + 0x6a4]>', '<mov~~r8d, dword ptr [rsp + 0x6a8]>', '<mov~~dword ptr [rsp + 0x67c], r8d>', '<mov~~dword ptr [rsp + 0x680], edi>', '<mov~~dword ptr [rsp + 0x684], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x688], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x6cc]>', '<mov~~rax, qword ptr [rsp + 0x6b8]>', '<mov~~dl, byte ptr [rax + 1]>', '<shr~~dl, 6>', '<movzx~~edx, dl>', '<mov~~ax, word ptr [rax + 1]>', '<and~~ax, 0xff3f>', '<rol~~ax, 8>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<and~~ecx, 0x3f>', '<add~~ecx, 4>', '<mov~~esi, 3>', '<mov~~qword ptr [rsp + 0x698], rsi>', '<mov~~dword ptr [rsp + 0x6a0], edx>', '<mov~~dword ptr [rsp + 0x6a4], ecx>', '<mov~~dword ptr [rsp + 0x6a8], eax>', '<jmp~~0x400724>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402217>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x6ac]>', '<mov~~edx, dword ptr [rsp + 0x6d4]>', '<mov~~rax, qword ptr [rsp + 0x6d8]>', '<mov~~rsi, qword ptr [rsp + 0x6e0]>', '<mov~~qword ptr [rsp + 0x6b0], rsi>', '<mov~~qword ptr [rsp + 0x6b8], rax>', '<mov~~dword ptr [rsp + 0x6c0], edx>', '<mov~~dword ptr [rsp + 0x6c4], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x6cb], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x6cc], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x6d0], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006d0>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x720]>', '<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x718]>', '<mov~~qword ptr [rsp + 0x6f0], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x6f8], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x700], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x708], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009e4>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6cc]>', '<and~~eax, 0x20>', '<cmp~~eax, 0>', '<je~~0x400612>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c8]>', '<mov~~rdx, qword ptr [rsp + 0x6b8]>', '<mov~~rsi, qword ptr [rsp + 0x698]>', '<mov~~ecx, dword ptr [rsp + 0x6a0]>', '<mov~~edi, dword ptr [rsp + 0x6a4]>', '<mov~~r8d, dword ptr [rsp + 0x6a8]>', '<mov~~dword ptr [rsp + 0x67c], r8d>', '<mov~~dword ptr [rsp + 0x680], edi>', '<mov~~dword ptr [rsp + 0x684], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x688], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x520]>', '<mov~~edx, dword ptr [rsp + 0x528]>', '<mov~~dword ptr [rsp + 0x158], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x5d4]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x168], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x40219e>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5c4]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x5b8], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c25>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x77c]>', '<mov~~esi, dword ptr [rsp + 0x778]>', '<mov~~rdi, qword ptr [rsp + 0x780]>', '<call~~0x500008>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x5ce]>', '<mov~~rsi, qword ptr [rsp + 0x5a8]>', '<mov~~rax, qword ptr [rsp + 0x7c8]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x518], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x520], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x524], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x528], eax>', '<je~~0x401a41>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402217>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x738]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x13c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x798]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x219e]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x798]>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdx, qword ptr [rsp + 0x7e8]>', '<mov~~qword ptr [rsp + 0x720], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x728], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x730], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp + 8], rdi>', '<call~~0x500018>']}, {'block_Idx': 128, 'blockInsts': ['<jmp~~0x4021c7>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5d0]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x5b0]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~edx, dword ptr [rsp + 0x5d0]>', '<mov~~esi, dword ptr [rsp + 0x5c8]>', '<mov~~rax, qword ptr [rsp + 0x5d8]>', '<mov~~edi, dword ptr [rsp + 0x5c4]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x59c], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x5a8], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x40219e>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x640]>', '<mov~~esi, dword ptr [rsp + 0x67c]>', '<mov~~rcx, qword ptr [rsp + 0x6f8]>', '<mov~~eax, dword ptr [rsp + 0x680]>', '<mov~~edx, dword ptr [rsp + 0x634]>', '<sub~~edx, eax>', '<mov~~dword ptr [rsp + 0x630], edx>', '<mov~~eax, eax>', '<sub~~rcx, rdi>', '<cmp~~rcx, rax>', '<cmovl~~rax, rcx>', '<mov~~qword ptr [rsp + 0x628], rax>', '<mov~~edx, eax>', '<call~~0x500040>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x710], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x718], rax>', '<jne~~0x40043a>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jmp~~0x402217>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7a0]>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x610], rcx>', '<add~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x618], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x624], eax>', '<jmp~~0x400a10>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5c2]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x578], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x580], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~dword ptr [rsp + 0x594], eax>', '<mov~~r10d, dword ptr [rsp + 0x594]>', '<mov~~rdi, qword ptr [rsp + 0x588]>', '<mov~~rdx, qword ptr [rsp + 0x580]>', '<mov~~rsi, qword ptr [rsp + 0x578]>', '<mov~~eax, dword ptr [rsp + 0x598]>', '<mov~~rcx, qword ptr [rsp + 0x5d8]>', '<mov~~qword ptr [rsp + 0x550], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x52c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x530], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x5d8]>', '<mov~~dword ptr [rsp + 0x534], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x538], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x53c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x540], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x544], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x548], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x54c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~dword ptr [rsp + 0x55c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x560], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x564], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x568], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x56c], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~dword ptr [rsp + 0x594], eax>', '<jne~~0x400d5e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x7c0]>', '<mov~~rax, qword ptr [rsp + 0x7a0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x5e0], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400afc>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5d0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x5b0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c93>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5c4]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x5b8]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~ecx, dword ptr [rsp + 0x5d0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x5b0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c93>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5d0]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x6d0]>', '<mov~~rsi, qword ptr [rsp + 0x6b8]>', '<mov~~ecx, dword ptr [rsp + 0x6cc]>', '<mov~~eax, ecx>', '<shl~~eax, 0xc>', '<and~~eax, 0x10000>', '<mov~~di, word ptr [rsi + 1]>', '<rol~~di, 8>', '<movzx~~edi, di>', '<or~~eax, 1>', '<add~~eax, edi>', '<shl~~ecx, 6>', '<and~~ecx, 0x300>', '<movzx~~esi, byte ptr [rsi + 3]>', '<or~~ecx, 5>', '<add~~ecx, esi>', '<mov~~esi, 4>', '<mov~~qword ptr [rsp + 0x698], rsi>', '<mov~~dword ptr [rsp + 0x6a0], edx>', '<mov~~dword ptr [rsp + 0x6a4], ecx>', '<mov~~dword ptr [rsp + 0x6a8], eax>', '<jmp~~0x400724>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x4021c7>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x594]>', '<mov~~rdi, qword ptr [rsp + 0x588]>', '<mov~~rdx, qword ptr [rsp + 0x580]>', '<mov~~rsi, qword ptr [rsp + 0x578]>', '<mov~~eax, dword ptr [rsp + 0x598]>', '<mov~~rcx, qword ptr [rsp + 0x5d8]>', '<mov~~qword ptr [rsp + 0x550], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x52c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x530], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x5d8]>', '<mov~~dword ptr [rsp + 0x534], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x538], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x53c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x540], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x544], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x548], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x54c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~dword ptr [rsp + 0x55c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x560], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x564], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x568], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x56c], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x570], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x588], rcx>', '<mov~~dword ptr [rsp + 0x594], eax>', '<jne~~0x400d5e>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x624]>', '<mov~~rax, qword ptr [rsp + 0x728]>', '<mov~~rcx, qword ptr [rsp + 0x710]>', '<mov~~r8, qword ptr [rsp + 0x618]>', '<mov~~rsi, qword ptr [rsp + 0x610]>', '<mov~~dword ptr [rsp + 0x608], edx>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~esi, edx>', '<imul~~esi, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0x5ec], esi>', '<movsxd~~rsi, esi>', '<add~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x5f0], rdi>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, eax>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x5fc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x600], rsi>', '<movsxd~~rdx, eax>', '<call~~0x500030>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x5d4]>', '<mov~~rax, qword ptr [rsp + 0x7c0]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x175a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x790]>', '<mov~~rcx, qword ptr [rsp + 0x7b0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x776], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<je~~0x4002de>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x688]>', '<mov~~rdi, qword ptr [rsp + 0x6b0]>', '<mov~~rdx, qword ptr [rsp + 0x690]>', '<mov~~rax, qword ptr [rsp + 0x6f8]>', '<mov~~r8d, dword ptr [rsp + 0x684]>', '<mov~~ecx, dword ptr [rsp + 0x6c0]>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x664], ecx>', '<sub~~rax, rdi>', '<cmp~~rax, rdx>', '<cmovl~~rdx, rax>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x658], rdx>', '<call~~0x500030>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x708]>', '<mov~~rsi, qword ptr [rsp + 0x700]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x6ec], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400503>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400ab0>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7bc]>', '<mov~~rcx, qword ptr [rsp + 0x7a8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x710]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x718], rcx>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<je~~0x402217>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x720]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x5c2], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x5c4], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x5c8], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x5ce], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x5d0], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x5d4], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400bb7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x738]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x17dd]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x720]>', '<mov~~rdx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x5d8], rax>', '<cmp~~rax, rcx>', '<ja~~0x40219e>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x158]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x7c0]>', '<mov~~r8d, dword ptr [rsp + 0x5d4]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x7a0]>', '<mov~~dword ptr [rsp + 0x10c], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x110], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x118], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x120], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~dword ptr [rsp + 0x144], edx>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<mov~~dword ptr [rsp + 0xf4], edx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jle~~0x402121>']}, {'block_Idx': 90, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x78c], eax>', '<jl~~0x402217>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~dword ptr [rsp + 0x454], r10d>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rsp + rdi*4 + 0x7f0]>', '<mov~~r9b, dil>', '<mov~~rdi, rsi>', '<shl~~rdi, 4>', '<mov~~qword ptr [rsp + 0x458], rdi>', '<add~~rdi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x460], rdi>', '<add~~rdi, 2>', '<mov~~qword ptr [rsp + 0x468], rdi>', '<mov~~byte ptr [rdi], r9b>', '<mov~~edi, r10d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x470], edi>', '<mov~~edi, edi>', '<mov~~r9d, dword ptr [rcx + rdi]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x474], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~dword ptr [rsp + 0x478], r9d>', '<and~~r9d, 3>', '<mov~~dword ptr [rsp + 0x47c], r9d>', '<add~~r10d, 2>', '<mov~~dword ptr [rsp + 0x480], r10d>', '<cmp~~eax, r10d>', '<mov~~edi, eax>', '<cmova~~edi, r10d>', '<mov~~dword ptr [rsp + 0x484], edi>', '<mov~~r9d, r9d>', '<mov~~r9d, dword ptr [rsp + r9*4 + 0x7f0]>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x488], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x490], rsi>', '<add~~rsi, 1>', '<mov~~qword ptr [rsp + 0x498], rsi>', '<mov~~byte ptr [rsi], r9b>', '<mov~~esi, edi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x4a0], esi>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rcx + rsi]>', '<mov~~ecx, edi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x4a4], ecx>', '<shr~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x4a8]>', '<mov~~dword ptr [rsp + 0x4b0], esi>', '<and~~esi, 3>', '<mov~~dword ptr [rsp + 0x4b4], esi>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x4b8], edi>', '<cmp~~eax, edi>', '<cmova~~eax, edi>', '<mov~~dword ptr [rsp + 0x4bc], eax>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x7f0]>', '<mov~~dil, sil>', '<mov~~rsi, rcx>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x4c0], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x4c8], rsi>', '<mov~~byte ptr [rsi], dil>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<mov~~dword ptr [rsp + 0x528], eax>', '<jne~~0x400f81>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x7c8]>', '<mov~~rcx, qword ptr [rsp + 0x760]>', '<mov~~rax, qword ptr [rsp + 0x768]>', '<mov~~qword ptr [rsp + 0x740], rax>', '<mov~~qword ptr [rsp + 0x748], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x750], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x7e8], rax>', '<jae~~0x4002de>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4b0], esi>', '<and~~esi, 3>', '<mov~~dword ptr [rsp + 0x4b4], esi>', '<add~~edi, 2>', '<mov~~dword ptr [rsp + 0x4b8], edi>', '<cmp~~eax, edi>', '<cmova~~eax, edi>', '<mov~~dword ptr [rsp + 0x4bc], eax>', '<mov~~esi, esi>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x7f0]>', '<mov~~dil, sil>', '<mov~~rsi, rcx>', '<shl~~rsi, 4>', '<mov~~qword ptr [rsp + 0x4c0], rsi>', '<add~~rsi, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x4c8], rsi>', '<mov~~byte ptr [rsi], dil>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<mov~~dword ptr [rsp + 0x528], eax>', '<jne~~0x400f81>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x780]>', '<mov~~ecx, dword ptr [rsp + 0x77c]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001b3>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x7d0]>', '<call~~0x500050>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78c]>', '<add~~rsp, 0x808>', '<pop~~rbx>', '<pop~~r12>', '<pop~~r13>', '<pop~~r14>', '<pop~~r15>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x7e7]>', '<test~~al, 1>', '<jne~~0x4003ac>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x67c]>', '<mov~~rdx, qword ptr [rsp + 0x6f0]>', '<mov~~rax, qword ptr [rsp + 0x640]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x4009a9>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5c2]>', '<mov~~ecx, dword ptr [rsp + 0x59c]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x598], ecx>', '<cmp~~ax, 0>', '<je~~0x400e8b>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c4]>', '<mov~~edx, dword ptr [rsp + 0x6d0]>', '<mov~~sil, byte ptr [rsp + 0x6cb]>', '<mov~~ecx, dword ptr [rsp + 0x6cc]>', '<shl~~ecx, 2>', '<and~~ecx, 0x7c>', '<add~~ecx, 4>', '<cmp~~sil, 0xfc>', '<cmovb~~edx, ecx>', '<mov~~esi, 1>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x698], rsi>', '<mov~~dword ptr [rsp + 0x6a0], edx>', '<mov~~dword ptr [rsp + 0x6a4], ecx>', '<mov~~dword ptr [rsp + 0x6a8], eax>', '<jmp~~0x400724>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x5ce]>', '<mov~~rcx, qword ptr [rsp + 0x7c0]>', '<lea~~rdx, [rsp + 0x7f0]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x4d8], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<mov~~qword ptr [rsp + 0x4e8], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x4f8], rax>', '<lea~~rax, [rsp + 0x7f0]>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x500], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<mov~~dword ptr [rsp + 0x514], eax>', '<mov~~r14d, dword ptr [rsp + 0x514]>', '<mov~~rsi, qword ptr [rsp + 0x508]>', '<mov~~rdx, qword ptr [rsp + 0x4e0]>', '<mov~~r8, qword ptr [rsp + 0x4d8]>', '<mov~~eax, dword ptr [rsp + 0x524]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~rdi, qword ptr [rsp + 0x500]>', '<mov~~r9, qword ptr [rsp + 0x4f8]>', '<mov~~r10, qword ptr [rsp + 0x4f0]>', '<mov~~r11, qword ptr [rsp + 0x4e8]>', '<mov~~qword ptr [rsp + 0x4a8], rsi>', '<mov~~ebx, r14d>', '<shr~~ebx, 3>', '<mov~~dword ptr [rsp + 0x170], ebx>', '<mov~~ebx, ebx>', '<mov~~ebx, dword ptr [rcx + rbx]>', '<mov~~ecx, r14d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x174], ecx>', '<shr~~ebx, cl>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~dword ptr [rsp + 0x178], ebx>', '<and~~ebx, 0xff>', '<mov~~dword ptr [rsp + 0x17c], ebx>', '<add~~r14d, 8>', '<mov~~dword ptr [rsp + 0x180], r14d>', '<cmp~~eax, r14d>', '<mov~~ebp, eax>', '<cmova~~ebp, r14d>', '<mov~~dword ptr [rsp + 0x184], ebp>', '<mov~~dword ptr [r11], ebx>', '<mov~~r11d, ebp>', '<shr~~r11d, 3>', '<mov~~dword ptr [rsp + 0x188], r11d>', '<mov~~r11d, r11d>', '<mov~~r11d, dword ptr [rcx + r11]>', '<mov~~ecx, ebp>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<shr~~r11d, cl>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<mov~~dword ptr [rsp + 0x190], r11d>', '<and~~r11d, 0xff>', '<mov~~dword ptr [rsp + 0x194], r11d>', '<add~~ebp, 8>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x628]>', '<mov~~rcx, qword ptr [rsp + 0x640]>', '<mov~~eax, dword ptr [rsp + 0x630]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x648], rcx>', '<mov~~dword ptr [rsp + 0x654], eax>', '<mov~~rcx, qword ptr [rsp + 0x638]>', '<mov~~esi, dword ptr [rsp + 0x67c]>', '<mov~~r9, qword ptr [rsp + 0x7c8]>', '<mov~~rax, qword ptr [rsp + 0x648]>', '<mov~~edx, dword ptr [rsp + 0x654]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x6ac], esi>', '<mov~~dword ptr [rsp + 0x6d4], edx>', '<mov~~qword ptr [rsp + 0x6d8], rcx>', '<mov~~qword ptr [rsp + 0x6e0], rax>', '<jne~~0x400531>']}], 'cfg_edge_info': [(15, 21), (32, 37), (33, 45), (119, 87), (29, 32), (8, 9), (9, 17), (11, 14), (28, 30), (22, 19), (17, 23), (86, 95), (2, 4), (75, 83), (70, 59), (53, 73), (22, 3), (82, 88), (59, 68), (56, 14), (45, 14), (85, 50), (39, 46), (49, 57), (126, 87), (27, 29), (68, 79), (72, 70), (30, 34), (50, 49), (64, 75), (65, 40), (90, 94), (3, 10), (0, 2), (46, 54), (83, 82), (40, 56), (1, 3), (10, 15), (78, 49), (90, 14), (36, 43), (81, 75), (16, 19), (58, 67), (5, 9), (51, 61), (29, 31), (4, 11), (98, 57), (61, 72), (41, 14), (52, 14), (95, 49), (92, 96), (34, 39), (16, 3), (41, 32), (73, 64), (76, 90), (42, 49), (63, 81), (43, 50), (75, 82), (19, 22), (128, 57), (70, 49), (82, 87), (47, 65), (87, 40), (27, 28), (30, 33), (54, 64), (12, 3), (32, 36), (92, 57), (85, 51), (23, 12), (21, 24), (60, 70), (78, 85), (64, 40), (10, 14), (36, 42), (95, 85), (51, 60), (81, 40), (61, 71), (73, 63), (57, 76), (37, 52), (24, 27), (12, 16), (87, 92), (19, 3), (8, 12), (31, 41), (2, 5), (34, 40), (43, 51), (59, 69), (89, 82), (0, 1), (46, 53), (39, 47), (49, 58), (71, 70), (54, 63), (79, 86), (21, 14), (50, 59), (79, 49), (5, 8)], 'cdg_edge_info': [(32, 37), (64, 14), (73, 81), (64, 87), (8, 9), (29, 41), (2, 11), (81, 14), (81, 87), (22, 19), (2, 4), (32, 14), (87, 57), (70, 59), (34, 14), (64, 82), (85, 50), (54, 81), (39, 46), (5, 23), (49, 57), (27, 29), (30, 34), (50, 49), (81, 82), (90, 94), (64, 75), (0, 2), (46, 54), (85, 70), (10, 15), (90, 14), (81, 75), (16, 19), (39, 14), (30, 45), (29, 31), (5, 9), (51, 61), (21, 27), (61, 72), (41, 14), (95, 49), (34, 39), (41, 32), (73, 64), (19, 22), (87, 56), (70, 49), (32, 52), (87, 40), (27, 28), (10, 21), (64, 56), (30, 33), (36, 49), (54, 64), (32, 36), (85, 51), (21, 24), (64, 40), (81, 56), (8, 17), (10, 14), (27, 30), (2, 10), (95, 85), (51, 60), (81, 40), (61, 71), (87, 90), (2, 3), (27, 32), (2, 12), (34, 56), (49, 90), (12, 16), (87, 92), (2, 5), (34, 40), (2, 14), (87, 76), (59, 69), (0, 1), (30, 14), (39, 47), (0, 10), (8, 23), (39, 56), (49, 58), (39, 65), (49, 67), (49, 76), (21, 14), (79, 86), (87, 14), (79, 95), (50, 59), (79, 49), (5, 8), (39, 40), (0, 3), (5, 17), (46, 73)], 'ddg_edge_info': [(15, 21), (86, 72), (24, 33), (73, 81), (33, 45), (15, 94), (24, 51), (50, 70), (29, 32), (0, 5), (29, 41), (9, 17), (3, 31), (29, 50), (4, 94), (11, 94), (3, 40), (0, 87), (75, 90), (3, 49), (0, 23), (24, 72), (24, 81), (16, 22), (39, 81), (71, 95), (5, 3), (22, 19), (31, 86), (3, 15), (31, 95), (45, 94), (17, 23), (86, 95), (56, 94), (92, 90), (5, 30), (0, 16), (86, 49), (31, 49), (3, 33), (31, 58), (32, 69), (86, 58), (86, 67), (24, 92), (70, 59), (22, 3), (24, 37), (85, 50), (0, 46), (31, 79), (85, 59), (29, 36), (34, 87), (39, 46), (0, 9), (24, 58), (0, 73), (5, 87), (31, 51), (86, 51), (24, 67), (86, 60), (72, 70), (24, 85), (24, 30), (81, 82), (0, 30), (0, 94), (90, 94), (31, 72), (3, 10), (85, 61), (0, 57), (23, 22), (0, 2), (60, 71), (85, 70), (41, 67), (24, 60), (37, 94), (3, 37), (40, 56), (24, 69), (41, 94), (52, 94), (81, 75), (16, 19), (24, 87), (0, 32), (39, 87), (3, 67), (58, 67), (5, 9), (4, 11), (29, 31), (12, 24), (3, 21), (31, 37), (85, 72), (29, 49), (3, 94), (24, 71), (41, 32), (76, 90), (0, 34), (31, 67), (31, 85), (86, 85), (24, 46), (31, 94), (70, 86), (27, 81), (70, 95), (71, 60), (19, 22), (24, 73), (27, 90), (24, 82), (0, 82), (0, 27), (33, 94), (31, 60), (39, 73), (0, 36), (31, 69), (82, 87), (86, 69), (39, 82), (0, 45), (24, 39), (23, 19), (31, 32), (70, 79), (24, 57), (24, 75), (47, 40), (0, 29), (10, 94), (76, 94), (39, 75), (31, 71), (23, 3), (86, 71), (85, 51), (0, 47), (23, 12), (32, 36), (12, 3), (24, 32), (85, 60), (60, 70), (24, 50), (12, 30), (24, 59), (0, 4), (3, 39), (0, 22), (85, 90), (29, 67), (0, 95), (29, 85), (24, 34), (95, 85), (40, 94), (24, 61), (36, 90), (24, 70), (0, 70), (0, 15), (2, 12), (3, 32), (29, 60), (0, 24), (57, 76), (86, 57), (31, 57), (32, 86), (5, 47), (37, 52), (24, 27), (15, 24), (49, 90), (24, 36), (12, 16), (23, 16), (19, 3), (87, 92), (0, 8), (31, 41), (0, 17), (31, 50), (3, 34), (0, 81), (86, 50), (32, 79), (60, 95), (31, 59), (86, 59), (29, 71), (24, 29), (70, 69), (24, 47), (21, 94), (27, 73), (85, 69), (39, 47), (5, 24), (0, 19), (2, 16), (71, 70), (31, 61), (86, 61), (31, 70), (86, 70), (24, 86), (24, 31), (24, 95), (86, 79), (24, 40), (24, 49), (34, 81), (5, 8), (0, 58), (0, 3), (31, 36), (85, 71), (0, 12), (0, 76), (46, 73), (60, 90), (24, 79), (27, 41)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 49, 'instruction': 'movl\t%ecx, 0x778(%rsp)                # 4-byte Spill'}, {'instIndex': 50, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 51, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 52, 'instruction': 'movl\t%edx, 0x77c(%rsp)                # 4-byte Spill'}, {'instIndex': 53, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 54, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x780(%rsp)                # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 57, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 60, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 61, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 65, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 67, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 68, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 70, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 71, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 74, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 75, 'instruction': 'movw\t%cx, 0x776(%rsp)                 # 2-byte Spill'}, {'instIndex': 81, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 130, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 131, 'instruction': 'movq\t%rdx, 0x728(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 133, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 134, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 135, 'instruction': 'movq\t%rdx, 0x730(%rsp)                # 8-byte Spill'}, {'instIndex': 136, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 137, 'instruction': 'movq\t%rcx, 0x738(%rsp)                # 8-byte Spill'}, {'instIndex': 138, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 139, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 140, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 142, 'instruction': 'jl\t.LBB1_73'}, {'instIndex': 145, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 146, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 147, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 148, 'instruction': 'movl\t%eax, 0x78c(%rsp)                # 4-byte Spill'}, {'instIndex': 149, 'instruction': 'jl\t.LBB1_73'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: eatgv.c
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1127 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movl\t%ecx, 0x4b8(%rsp)                # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 46, 'instruction': 'movl\t%edx, 0x4bc(%rsp)                # 4-byte Spill'}, {'instIndex': 47, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x4c0(%rsp)                # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 51, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 54, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 55, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 61, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 62, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 64, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 65, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 68, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 69, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 75, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 124, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 125, 'instruction': 'movq\t%rdx, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 126, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 128, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 130, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 133, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 136, 'instruction': 'jl\t.LBB1_80'}, {'instIndex': 139, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 140, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 141, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'jl\t.LBB1_80'}]}]
Patched function: 1---static int tgv_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.s---tgv_decode_frame---before
function id: 1
function flag: True
There are 1127 instructions for function: tgv_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '269', 'end': 278}, 'before': {'start': '269', 'end': 277}}}, {'modifyIndex': 2, 'line': {'after': {'start': '283', 'end': 288}, 'before': {'start': '282', 'end': 290}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movl\t%ecx, 0x4b8(%rsp)                # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 46, 'instruction': 'movl\t%edx, 0x4bc(%rsp)                # 4-byte Spill'}, {'instIndex': 47, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x4c0(%rsp)                # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 51, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 54, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 55, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 61, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 62, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 64, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 65, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 68, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 69, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 75, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 124, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 125, 'instruction': 'movq\t%rdx, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 126, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 128, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 130, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 133, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 136, 'instruction': 'jl\t.LBB1_80'}, {'instIndex': 139, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 140, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 141, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'jl\t.LBB1_80'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.o---before
The extraction of function: tgv_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 121 nodes and 217 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1127 instructions in binary file.
[4194558, 4194634, 4194657, 4194684, 4194704, 4194721, 4194767]
[4195016, 4195111, 4195127, 4195153]
The execution time of patched subCFG information extraction via angr: 0:00:00.944617
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "mov" for 0x4002e0>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400303>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400312>, <DisassemblerInsn "mov" for 0x400318>, <DisassemblerInsn "xor" for 0x400320>, <DisassemblerInsn "call" for 0x400322>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "cmp" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "je" for 0x4001c9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "movzx" for 0x40027c>, <DisassemblerInsn "shl" for 0x400280>, <DisassemblerInsn "movzx" for 0x400284>, <DisassemblerInsn "shl" for 0x400288>, <DisassemblerInsn "or" for 0x40028b>, <DisassemblerInsn "movzx" for 0x40028e>, <DisassemblerInsn "or" for 0x400292>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "add" for 0x40029c>, <DisassemblerInsn "add" for 0x4002a0>, <DisassemblerInsn "cmp" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400152>, <DisassemblerInsn "cmp" for 0x400159>, <DisassemblerInsn "je" for 0x40015f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "add" for 0x400184>, <DisassemblerInsn "call" for 0x40018b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000cd>, <DisassemblerInsn "jge" for 0x4000d0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "movzx" for 0x4001df>, <DisassemblerInsn "add" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "sub" for 0x4001ec>, <DisassemblerInsn "cmovb" for 0x4001ee>, <DisassemblerInsn "add" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "xor" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "add" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "cmp" for 0x400247>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "jae" for 0x400252>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "call" for 0x400177>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "movzx" for 0x400116>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400126>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "cmp" for 0x400142>, <DisassemblerInsn "jne" for 0x400148>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x500]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x528]>', '<mov~~qword ptr [rsp + 0x460], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x468], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x470], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x528], rax>', '<je~~0x4002c8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jne~~0x400210>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x4bc]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001a1>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x500]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4fc]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x4000fe>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jae~~0x4002c8>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~esi, dword ptr [rsp + 0x4b8]>', '<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x4b8], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x4bc], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x4c0], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400161>']}], 'cfg_edge_info': [(9, 13), (5, 8), (12, 15), (13, 16), (12, 3), (16, 12), (8, 9), (15, 3), (8, 12), (5, 9), (2, 5), (15, 18)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "add" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "cmp" for 0x400247>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "jae" for 0x400252>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "mov" for 0x4002e0>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400303>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400312>, <DisassemblerInsn "mov" for 0x400318>, <DisassemblerInsn "xor" for 0x400320>, <DisassemblerInsn "call" for 0x400322>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "cmp" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "je" for 0x4001c9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "add" for 0x400375>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "call" for 0x400381>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ad>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "movzx" for 0x40027c>, <DisassemblerInsn "shl" for 0x400280>, <DisassemblerInsn "movzx" for 0x400284>, <DisassemblerInsn "shl" for 0x400288>, <DisassemblerInsn "or" for 0x40028b>, <DisassemblerInsn "movzx" for 0x40028e>, <DisassemblerInsn "or" for 0x400292>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "add" for 0x40029c>, <DisassemblerInsn "add" for 0x4002a0>, <DisassemblerInsn "cmp" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "movzx" for 0x4001df>, <DisassemblerInsn "add" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "sub" for 0x4001ec>, <DisassemblerInsn "cmovb" for 0x4001ee>, <DisassemblerInsn "add" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "xor" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "add" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "cmp" for 0x400247>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "jae" for 0x400252>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400327>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "jl" for 0x400331>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400351>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "jl" for 0x40035b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400337>, <DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "call" for 0x40034c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401834>, <DisassemblerInsn "add" for 0x40183b>, <DisassemblerInsn "ret" for 0x401842>]'}], 'cfg_block_detailed_info': [{'block_Idx': 20, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jae~~0x4002c8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x528]>', '<mov~~qword ptr [rsp + 0x460], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x468], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x470], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x528], rax>', '<je~~0x4002c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002c8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jne~~0x400210>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jae~~0x4002c8>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jl~~0x401834>']}, {'block_Idx': 14, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jl~~0x401834>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rsp + 0x4d8]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4cc]>', '<add~~rsp, 0x548>', '<ret~~>']}], 'cfg_edge_info': [(6, 11), (14, 17), (14, 10), (12, 3), (18, 3), (20, 3), (15, 3), (3, 6), (6, 10), (11, 14), (1, 3)]}]}
{'tgv_decode_frame': [4195016, 4195111, 4195127, 4195153]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/a87739388da6d00a757885428d42554e7eabf453/clang_before/Os/eatgv.o---before
The extraction of function: tgv_decode_frame
[4195016, 4195111, 4195127, 4195153]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 124 nodes and 205 edges in CFGEmulated.
It has 124 nodes and 210 edges in CDG.
It has 5580 nodes and 7077 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195016, 4195111, 4195127, 4195153]
{4196609, 4195716, 4195206, 4196361, 4200460, 4196110, 4197391, 4194704, 4195217, 4194832, 4196755, 4196498, 4198677, 4195222, 4195735, 4198808, 4200472, 4197018, 4195611, 4197276, 4195836, 4194721, 4197153, 4197281, 4195364, 4195493, 4196772, 4195111, 4194344, 4195750, 4194477, 4196273, 4194482, 4200500, 4195127, 4197048, 4196536, 4196026, 4200381, 4195016, 4194634, 4196814, 4194767, 4195153, 4194514, 4197075, 4194900, 4200408, 4197466, 4195291, 4195169, 4194657, 4195941, 4197094, 4200422, 4197606, 4196841, 4197356, 4194541, 4196973, 4196211, 4198005, 4197239, 4195320, 4196858, 4200443, 4194684, 4197501, 4194558}
[34, 5, 11, 17, 83, 57, 40, 12, 63, 76, 73, 64, 41, 56, 42, 89, 69, 72, 96, 120, 95, 39, 70, 75, 4, 9, 58, 97, 30, 47, 22, 36, 87, 54, 61, 19, 37, 85, 59, 71, 10, 8, 60, 51, 82, 31, 32, 28, 45, 14, 46, 79, 1, 16, 53, 68, 90, 23, 29, 98, 92, 2, 27, 49, 50, 24, 67, 52, 15, 3, 88, 43, 21, 65, 0, 78, 33, 81, 99, 86]
The execution time of patched slicing information extraction via angr: 0:00:24.478938
{'tgv_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae6>, <DisassemblerInsn "mov" for 0x400aee>, <DisassemblerInsn "mov" for 0x400af6>, <DisassemblerInsn "mov" for 0x400afe>, <DisassemblerInsn "mov" for 0x400b05>, <DisassemblerInsn "add" for 0x400b0c>, <DisassemblerInsn "mov" for 0x400b10>, <DisassemblerInsn "cmp" for 0x400b18>, <DisassemblerInsn "ja" for 0x400b1b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "movzx" for 0x400116>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "movzx" for 0x400126>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "cmp" for 0x400142>, <DisassemblerInsn "jne" for 0x400148>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "jmp" for 0x4000f9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "add" for 0x400184>, <DisassemblerInsn "call" for 0x40018b>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d09>, <DisassemblerInsn "mov" for 0x400d11>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d20>, <DisassemblerInsn "movzx" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2b>, <DisassemblerInsn "xor" for 0x400d33>, <DisassemblerInsn "mov" for 0x400d35>, <DisassemblerInsn "xor" for 0x400d37>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "mov" for 0x400d41>, <DisassemblerInsn "mov" for 0x400d48>, <DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "mov" for 0x400d60>, <DisassemblerInsn "mov" for 0x400d68>, <DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7f>, <DisassemblerInsn "shr" for 0x400d82>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "and" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "shr" for 0x400da2>, <DisassemblerInsn "mov" for 0x400da5>, <DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "shl" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "sar" for 0x400dc1>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "add" for 0x400dcd>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "cmp" for 0x400dd9>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "cmova" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400deb>, <DisassemblerInsn "mov" for 0x400def>, <DisassemblerInsn "shr" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400dfe>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "and" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e07>, <DisassemblerInsn "shr" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e10>, <DisassemblerInsn "mov" for 0x400e18>, <DisassemblerInsn "shl" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "sar" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e2c>, <DisassemblerInsn "add" for 0x400e33>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "cmp" for 0x400e3f>, <DisassemblerInsn "cmova" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e46>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "add" for 0x400e51>, <DisassemblerInsn "mov" for 0x400e55>, <DisassemblerInsn "cmp" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e68>, <DisassemblerInsn "jne" for 0x400e6f>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e6>, <DisassemblerInsn "add" for 0x4017ee>, <DisassemblerInsn "mov" for 0x4017f2>, <DisassemblerInsn "call" for 0x4017f6>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017bd>, <DisassemblerInsn "mov" for 0x4017c5>, <DisassemblerInsn "lea" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "call" for 0x4017d3>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "cmp" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "je" for 0x4001c9>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c38>, <DisassemblerInsn "mov" for 0x400c3f>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "shl" for 0x400c4e>, <DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c53>, <DisassemblerInsn "call" for 0x400c55>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017fb>, <DisassemblerInsn "mov" for 0x4017ff>, <DisassemblerInsn "call" for 0x401807>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "mov" for 0x400bf4>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "mov" for 0x400c06>, <DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "mov" for 0x400c0f>, <DisassemblerInsn "mov" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1e>, <DisassemblerInsn "add" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "cmp" for 0x400c30>, <DisassemblerInsn "jge" for 0x400c36>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c85>, <DisassemblerInsn "mov" for 0x400c8c>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "imul" for 0x400ca2>, <DisassemblerInsn "add" for 0x400ca5>, <DisassemblerInsn "and" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400cae>, <DisassemblerInsn "shr" for 0x400cb5>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "shl" for 0x400cc5>, <DisassemblerInsn "mov" for 0x400cc8>, <DisassemblerInsn "add" for 0x400cca>, <DisassemblerInsn "mov" for 0x400ccd>, <DisassemblerInsn "shl" for 0x400cd5>, <DisassemblerInsn "mov" for 0x400cd8>, <DisassemblerInsn "add" for 0x400cda>, <DisassemblerInsn "cmp" for 0x400cdd>, <DisassemblerInsn "ja" for 0x400ce0>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fb>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "cmp" for 0x40040b>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "je" for 0x40041e>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017d8>, <DisassemblerInsn "mov" for 0x4017dd>, <DisassemblerInsn "jmp" for 0x4017e4>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4004e8>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d48>, <DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "mov" for 0x400d60>, <DisassemblerInsn "mov" for 0x400d68>, <DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7f>, <DisassemblerInsn "shr" for 0x400d82>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "and" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "shr" for 0x400da2>, <DisassemblerInsn "mov" for 0x400da5>, <DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "shl" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "sar" for 0x400dc1>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "add" for 0x400dcd>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "cmp" for 0x400dd9>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "cmova" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400deb>, <DisassemblerInsn "mov" for 0x400def>, <DisassemblerInsn "shr" for 0x400df2>, <DisassemblerInsn "mov" for 0x400df5>, <DisassemblerInsn "mov" for 0x400dfc>, <DisassemblerInsn "mov" for 0x400dfe>, <DisassemblerInsn "mov" for 0x400e01>, <DisassemblerInsn "and" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e07>, <DisassemblerInsn "shr" for 0x400e0e>, <DisassemblerInsn "mov" for 0x400e10>, <DisassemblerInsn "mov" for 0x400e18>, <DisassemblerInsn "shl" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "sar" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e2c>, <DisassemblerInsn "add" for 0x400e33>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "cmp" for 0x400e3f>, <DisassemblerInsn "cmova" for 0x400e42>, <DisassemblerInsn "mov" for 0x400e46>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "add" for 0x400e51>, <DisassemblerInsn "mov" for 0x400e55>, <DisassemblerInsn "cmp" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e68>, <DisassemblerInsn "jne" for 0x400e6f>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c1>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "sub" for 0x4007e0>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "sub" for 0x4007ea>, <DisassemblerInsn "cmp" for 0x4007ed>, <DisassemblerInsn "cmovl" for 0x4007f0>, <DisassemblerInsn "shl" for 0x4007f4>, <DisassemblerInsn "sar" for 0x4007f8>, <DisassemblerInsn "mov" for 0x4007fc>, <DisassemblerInsn "call" for 0x400804>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "mov" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005bc>, <DisassemblerInsn "shl" for 0x4005c3>, <DisassemblerInsn "and" for 0x4005c6>, <DisassemblerInsn "add" for 0x4005c9>, <DisassemblerInsn "cmp" for 0x4005cc>, <DisassemblerInsn "cmovb" for 0x4005d0>, <DisassemblerInsn "mov" for 0x4005d3>, <DisassemblerInsn "xor" for 0x4005d8>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "jmp" for 0x4005f7>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400909>, <DisassemblerInsn "mov" for 0x400911>, <DisassemblerInsn "shl" for 0x400918>, <DisassemblerInsn "sar" for 0x40091c>, <DisassemblerInsn "add" for 0x400920>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "mov" for 0x40092b>, <DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400949>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "setg" for 0x40095a>, <DisassemblerInsn "mov" for 0x40095e>, <DisassemblerInsn "sub" for 0x400961>, <DisassemblerInsn "setb" for 0x400964>, <DisassemblerInsn "and" for 0x400968>, <DisassemblerInsn "test" for 0x40096b>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "jne" for 0x40098d>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400a95>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401818>, <DisassemblerInsn "mov" for 0x40181f>, <DisassemblerInsn "mov" for 0x401827>, <DisassemblerInsn "mov" for 0x40182d>, <DisassemblerInsn "mov" for 0x401834>, <DisassemblerInsn "add" for 0x40183b>, <DisassemblerInsn "ret" for 0x401842>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b21>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "movzx" for 0x400b34>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "movzx" for 0x400b3e>, <DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "movzx" for 0x400b55>, <DisassemblerInsn "mov" for 0x400b58>, <DisassemblerInsn "mov" for 0x400b5f>, <DisassemblerInsn "movzx" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "add" for 0x400b6d>, <DisassemblerInsn "cmp" for 0x400b71>, <DisassemblerInsn "jb" for 0x400b75>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "mov" for 0x400716>, <DisassemblerInsn "mov" for 0x40071e>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400744>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "add" for 0x400752>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x40075f>, <DisassemblerInsn "sub" for 0x400767>, <DisassemblerInsn "cmp" for 0x40076a>, <DisassemblerInsn "jl" for 0x40076d>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "mov" for 0x400cee>, <DisassemblerInsn "or" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf8>, <DisassemblerInsn "cmp" for 0x400cff>, <DisassemblerInsn "je" for 0x400d03>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000da>, <DisassemblerInsn "lea" for 0x4000df>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000e8>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "call" for 0x400177>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a4>, <DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "add" for 0x4009b7>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "xor" for 0x4009c3>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "jmp" for 0x4009cc>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "mov" for 0x4011be>, <DisassemblerInsn "mov" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "sub" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "shr" for 0x4011dc>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "add" for 0x4011f2>, <DisassemblerInsn "mov" for 0x4011f9>, <DisassemblerInsn "mov" for 0x401201>, <DisassemblerInsn "add" for 0x401204>, <DisassemblerInsn "mov" for 0x40120b>, <DisassemblerInsn "add" for 0x401213>, <DisassemblerInsn "mov" for 0x401217>, <DisassemblerInsn "mov" for 0x40121f>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "add" for 0x40122a>, <DisassemblerInsn "mov" for 0x40122e>, <DisassemblerInsn "xor" for 0x401236>, <DisassemblerInsn "mov" for 0x401238>, <DisassemblerInsn "mov" for 0x401240>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "mov" for 0x40124f>, <DisassemblerInsn "mov" for 0x401256>, <DisassemblerInsn "mov" for 0x40125e>, <DisassemblerInsn "mov" for 0x401265>, <DisassemblerInsn "mov" for 0x40126d>, <DisassemblerInsn "mov" for 0x401274>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128a>, <DisassemblerInsn "cmp" for 0x401292>, <DisassemblerInsn "mov" for 0x401295>, <DisassemblerInsn "mov" for 0x40129d>, <DisassemblerInsn "jle" for 0x4012a4>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a9a>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "add" for 0x400aa5>, <DisassemblerInsn "mov" for 0x400aa9>, <DisassemblerInsn "cmp" for 0x400ab1>, <DisassemblerInsn "jne" for 0x400ab6>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "mov" for 0x400b7e>, <DisassemblerInsn "mov" for 0x400b86>, <DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "lea" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "call" for 0x400b97>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "add" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "cmp" for 0x400247>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "jae" for 0x400252>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004ad>, <DisassemblerInsn "mov" for 0x4004b5>, <DisassemblerInsn "movzx" for 0x4004bd>, <DisassemblerInsn "shl" for 0x4004c0>, <DisassemblerInsn "movzx" for 0x4004c3>, <DisassemblerInsn "shl" for 0x4004c7>, <DisassemblerInsn "or" for 0x4004ca>, <DisassemblerInsn "movzx" for 0x4004cc>, <DisassemblerInsn "or" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d2>, <DisassemblerInsn "setne" for 0x4004d9>, <DisassemblerInsn "sub" for 0x4004dc>, <DisassemblerInsn "setb" for 0x4004df>, <DisassemblerInsn "and" for 0x4004e2>, <DisassemblerInsn "test" for 0x4004e4>, <DisassemblerInsn "jne" for 0x4004e6>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111d>, <DisassemblerInsn "mov" for 0x401124>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "sub" for 0x401132>, <DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "mov" for 0x40113e>, <DisassemblerInsn "mov" for 0x401146>, <DisassemblerInsn "mov" for 0x40114c>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "cdq" for 0x401158>, <DisassemblerInsn "idiv" for 0x401159>, <DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "mov" for 0x401162>, <DisassemblerInsn "mov" for 0x401164>, <DisassemblerInsn "imul" for 0x40116c>, <DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cdq" for 0x401181>, <DisassemblerInsn "idiv" for 0x401182>, <DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "mov" for 0x401186>, <DisassemblerInsn "imul" for 0x40118d>, <DisassemblerInsn "cmp" for 0x401190>, <DisassemblerInsn "jl" for 0x401192>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c0f>, <DisassemblerInsn "mov" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1e>, <DisassemblerInsn "add" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "cmp" for 0x400c30>, <DisassemblerInsn "jge" for 0x400c36>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400597>, <DisassemblerInsn "and" for 0x40059e>, <DisassemblerInsn "cmp" for 0x4005a1>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "movzx" for 0x40027c>, <DisassemblerInsn "shl" for 0x400280>, <DisassemblerInsn "movzx" for 0x400284>, <DisassemblerInsn "shl" for 0x400288>, <DisassemblerInsn "or" for 0x40028b>, <DisassemblerInsn "movzx" for 0x40028e>, <DisassemblerInsn "or" for 0x400292>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "add" for 0x40029c>, <DisassemblerInsn "add" for 0x4002a0>, <DisassemblerInsn "cmp" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d6>, <DisassemblerInsn "lea" for 0x4009db>, <DisassemblerInsn "mov" for 0x4009e2>, <DisassemblerInsn "call" for 0x4009e4>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "mov" for 0x400522>, <DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "movzx" for 0x400560>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "and" for 0x40056c>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "and" for 0x400576>, <DisassemblerInsn "cmp" for 0x40057b>, <DisassemblerInsn "je" for 0x40057e>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400773>, <DisassemblerInsn "mov" for 0x40077a>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "cmp" for 0x400791>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x40079c>, <DisassemblerInsn "mov" for 0x4007a4>, <DisassemblerInsn "je" for 0x4007ab>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005fc>, <DisassemblerInsn "mov" for 0x400603>, <DisassemblerInsn "mov" for 0x40060b>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "shl" for 0x400614>, <DisassemblerInsn "and" for 0x400617>, <DisassemblerInsn "mov" for 0x40061c>, <DisassemblerInsn "rol" for 0x400620>, <DisassemblerInsn "movzx" for 0x400624>, <DisassemblerInsn "or" for 0x400627>, <DisassemblerInsn "add" for 0x40062a>, <DisassemblerInsn "shl" for 0x40062c>, <DisassemblerInsn "and" for 0x40062f>, <DisassemblerInsn "movzx" for 0x400635>, <DisassemblerInsn "or" for 0x400639>, <DisassemblerInsn "add" for 0x40063c>, <DisassemblerInsn "mov" for 0x40063e>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x400659>, <DisassemblerInsn "jmp" for 0x400660>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400327>, <DisassemblerInsn "mov" for 0x40032a>, <DisassemblerInsn "jl" for 0x400331>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400152>, <DisassemblerInsn "cmp" for 0x400159>, <DisassemblerInsn "je" for 0x40015f>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400665>, <DisassemblerInsn "mov" for 0x40066c>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "shr" for 0x400677>, <DisassemblerInsn "movzx" for 0x40067a>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "and" for 0x400681>, <DisassemblerInsn "rol" for 0x400685>, <DisassemblerInsn "add" for 0x400689>, <DisassemblerInsn "movzx" for 0x40068d>, <DisassemblerInsn "and" for 0x400690>, <DisassemblerInsn "add" for 0x400693>, <DisassemblerInsn "mov" for 0x400696>, <DisassemblerInsn "mov" for 0x40069b>, <DisassemblerInsn "mov" for 0x4006a3>, <DisassemblerInsn "mov" for 0x4006aa>, <DisassemblerInsn "mov" for 0x4006b1>, <DisassemblerInsn "jmp" for 0x4006b8>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x40058b>, <DisassemblerInsn "cmp" for 0x40058e>, <DisassemblerInsn "je" for 0x400591>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "mov" for 0x400e7d>, <DisassemblerInsn "mov" for 0x400e85>, <DisassemblerInsn "sub" for 0x400e8d>, <DisassemblerInsn "mov" for 0x400e90>, <DisassemblerInsn "shl" for 0x400e92>, <DisassemblerInsn "xor" for 0x400e95>, <DisassemblerInsn "cmp" for 0x400e97>, <DisassemblerInsn "cmovb" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea1>, <DisassemblerInsn "xor" for 0x400ea9>, <DisassemblerInsn "cmp" for 0x400eab>, <DisassemblerInsn "cmovb" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb4>, <DisassemblerInsn "add" for 0x400ebb>, <DisassemblerInsn "mov" for 0x400ebe>, <DisassemblerInsn "xor" for 0x400ec5>, <DisassemblerInsn "cmp" for 0x400ec7>, <DisassemblerInsn "mov" for 0x400ecb>, <DisassemblerInsn "je" for 0x400ed2>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "mov" for 0x4003e3>, <DisassemblerInsn "mov" for 0x4003eb>, <DisassemblerInsn "imul" for 0x4003ed>, <DisassemblerInsn "movsxd" for 0x4003f0>, <DisassemblerInsn "call" for 0x4003f3>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "mov" for 0x40042c>, <DisassemblerInsn "mov" for 0x400434>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x40044f>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "imul" for 0x40045b>, <DisassemblerInsn "movsxd" for 0x40045e>, <DisassemblerInsn "add" for 0x400461>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "mov" for 0x40046c>, <DisassemblerInsn "and" for 0x40046f>, <DisassemblerInsn "mov" for 0x400473>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "cmp" for 0x40047d>, <DisassemblerInsn "cmove" for 0x400481>, <DisassemblerInsn "add" for 0x400485>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "add" for 0x400490>, <DisassemblerInsn "mov" for 0x400494>, <DisassemblerInsn "cmp" for 0x40049c>, <DisassemblerInsn "ja" for 0x40049f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400391>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad3>, <DisassemblerInsn "mov" for 0x400ada>, <DisassemblerInsn "jmp" for 0x400ae1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401834>, <DisassemblerInsn "add" for 0x40183b>, <DisassemblerInsn "ret" for 0x401842>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba1>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "mov" for 0x400bb0>, <DisassemblerInsn "add" for 0x400bb3>, <DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "cmp" for 0x400bc2>, <DisassemblerInsn "jge" for 0x400bc8>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400892>, <DisassemblerInsn "mov" for 0x400899>, <DisassemblerInsn "mov" for 0x4008a1>, <DisassemblerInsn "sub" for 0x4008a9>, <DisassemblerInsn "movsxd" for 0x4008ac>, <DisassemblerInsn "cmp" for 0x4008af>, <DisassemblerInsn "jl" for 0x4008b2>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ad>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "movzx" for 0x4001df>, <DisassemblerInsn "add" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "sub" for 0x4001ec>, <DisassemblerInsn "cmovb" for 0x4001ee>, <DisassemblerInsn "add" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "xor" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "add" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "cmp" for 0x400247>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "jae" for 0x400252>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bca>, <DisassemblerInsn "mov" for 0x400bd1>, <DisassemblerInsn "mov" for 0x400bd9>, <DisassemblerInsn "shl" for 0x400be0>, <DisassemblerInsn "mov" for 0x400be3>, <DisassemblerInsn "mov" for 0x400be5>, <DisassemblerInsn "call" for 0x400be7>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400845>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "mov" for 0x400854>, <DisassemblerInsn "mov" for 0x40085c>, <DisassemblerInsn "mov" for 0x400863>, <DisassemblerInsn "mov" for 0x40086a>, <DisassemblerInsn "mov" for 0x400872>, <DisassemblerInsn "cmp" for 0x40087a>, <DisassemblerInsn "mov" for 0x40087d>, <DisassemblerInsn "mov" for 0x400885>, <DisassemblerInsn "jle" for 0x40088c>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40180c>, <DisassemblerInsn "mov" for 0x40180f>, <DisassemblerInsn "jl" for 0x401816>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "add" for 0x400198>, <DisassemblerInsn "call" for 0x40019c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "mov" for 0x4003c6>, <DisassemblerInsn "cmp" for 0x4003cd>, <DisassemblerInsn "mov" for 0x4003d1>, <DisassemblerInsn "jne" for 0x4003d9>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010f0>, <DisassemblerInsn "cmp" for 0x4010f4>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "jne" for 0x40110f>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "cmp" for 0x40119f>, <DisassemblerInsn "jle" for 0x4011a2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000cd>, <DisassemblerInsn "jge" for 0x4000d0>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "test" for 0x40038d>, <DisassemblerInsn "jne" for 0x40038f>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400993>, <DisassemblerInsn "cmp" for 0x40099b>, <DisassemblerInsn "jle" for 0x40099e>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "mov" for 0x4006c8>, <DisassemblerInsn "mov" for 0x4006d0>, <DisassemblerInsn "shl" for 0x4006d2>, <DisassemblerInsn "and" for 0x4006d5>, <DisassemblerInsn "movzx" for 0x4006da>, <DisassemblerInsn "or" for 0x4006de>, <DisassemblerInsn "add" for 0x4006e1>, <DisassemblerInsn "shr" for 0x4006e3>, <DisassemblerInsn "and" for 0x4006e6>, <DisassemblerInsn "add" for 0x4006e9>, <DisassemblerInsn "mov" for 0x4006ec>, <DisassemblerInsn "mov" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "mov" for 0x400716>, <DisassemblerInsn "mov" for 0x40071e>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400744>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "add" for 0x400752>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x40075f>, <DisassemblerInsn "sub" for 0x400767>, <DisassemblerInsn "cmp" for 0x40076a>, <DisassemblerInsn "jl" for 0x40076d>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "add" for 0x400375>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "call" for 0x400381>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fa>, <DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a09>, <DisassemblerInsn "mov" for 0x400a11>, <DisassemblerInsn "mov" for 0x400a19>, <DisassemblerInsn "mov" for 0x400a21>, <DisassemblerInsn "mov" for 0x400a28>, <DisassemblerInsn "mov" for 0x400a2b>, <DisassemblerInsn "imul" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a31>, <DisassemblerInsn "movsxd" for 0x400a38>, <DisassemblerInsn "add" for 0x400a3b>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "mov" for 0x400a46>, <DisassemblerInsn "mov" for 0x400a49>, <DisassemblerInsn "mov" for 0x400a4b>, <DisassemblerInsn "imul" for 0x400a4d>, <DisassemblerInsn "mov" for 0x400a50>, <DisassemblerInsn "movsxd" for 0x400a57>, <DisassemblerInsn "add" for 0x400a5a>, <DisassemblerInsn "mov" for 0x400a5d>, <DisassemblerInsn "movsxd" for 0x400a65>, <DisassemblerInsn "call" for 0x400a68>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e9>, <DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "jmp" for 0x4009f5>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400337>, <DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "call" for 0x40034c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "mov" for 0x4002e0>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "add" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400303>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400312>, <DisassemblerInsn "mov" for 0x400318>, <DisassemblerInsn "xor" for 0x400320>, <DisassemblerInsn "call" for 0x400322>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed8>, <DisassemblerInsn "mov" for 0x400ee0>, <DisassemblerInsn "lea" for 0x400ee8>, <DisassemblerInsn "add" for 0x400ef0>, <DisassemblerInsn "mov" for 0x400ef7>, <DisassemblerInsn "movzx" for 0x400eff>, <DisassemblerInsn "mov" for 0x400f02>, <DisassemblerInsn "xor" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f0c>, <DisassemblerInsn "xor" for 0x400f0e>, <DisassemblerInsn "mov" for 0x400f10>, <DisassemblerInsn "mov" for 0x400f18>, <DisassemblerInsn "mov" for 0x400f1f>, <DisassemblerInsn "mov" for 0x400f27>, <DisassemblerInsn "mov" for 0x400f2e>, <DisassemblerInsn "xor" for 0x400f36>, <DisassemblerInsn "mov" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f40>, <DisassemblerInsn "mov" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4e>, <DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f65>, <DisassemblerInsn "shr" for 0x400f67>, <DisassemblerInsn "mov" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f71>, <DisassemblerInsn "mov" for 0x400f73>, <DisassemblerInsn "mov" for 0x400f76>, <DisassemblerInsn "and" for 0x400f78>, <DisassemblerInsn "mov" for 0x400f7b>, <DisassemblerInsn "shr" for 0x400f82>, <DisassemblerInsn "mov" for 0x400f84>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "and" for 0x400f8d>, <DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "add" for 0x400f9a>, <DisassemblerInsn "mov" for 0x400f9d>, <DisassemblerInsn "cmp" for 0x400fa4>, <DisassemblerInsn "cmova" for 0x400fa6>, <DisassemblerInsn "mov" for 0x400fa9>, <DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "add" for 0x400fb7>, <DisassemblerInsn "mov" for 0x400fbb>, <DisassemblerInsn "xor" for 0x400fc3>, <DisassemblerInsn "cmp" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fc9>, <DisassemblerInsn "mov" for 0x400fd1>, <DisassemblerInsn "mov" for 0x400fd3>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "mov" for 0x400fe2>, <DisassemblerInsn "jne" for 0x400fe9>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004f5>, <DisassemblerInsn "mov" for 0x4004fd>, <DisassemblerInsn "mov" for 0x400504>, <DisassemblerInsn "mov" for 0x40050b>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "mov" for 0x400522>, <DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "mov" for 0x400531>, <DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "movzx" for 0x400560>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "and" for 0x40056c>, <DisassemblerInsn "mov" for 0x40056f>, <DisassemblerInsn "and" for 0x400576>, <DisassemblerInsn "cmp" for 0x40057b>, <DisassemblerInsn "je" for 0x40057e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400351>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "jl" for 0x40035b>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b9c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400028>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003f>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x400053>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400061>, <DisassemblerInsn "movsxd" for 0x400069>, <DisassemblerInsn "mov" for 0x40006c>, <DisassemblerInsn "add" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x400082>, <DisassemblerInsn "add" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "cmp" for 0x400090>, <DisassemblerInsn "sete" for 0x400096>, <DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "test" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a3>, <DisassemblerInsn "jne" for 0x4000ab>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400949>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "test" for 0x400958>, <DisassemblerInsn "setg" for 0x40095a>, <DisassemblerInsn "mov" for 0x40095e>, <DisassemblerInsn "sub" for 0x400961>, <DisassemblerInsn "setb" for 0x400964>, <DisassemblerInsn "and" for 0x400968>, <DisassemblerInsn "test" for 0x40096b>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "jne" for 0x40098d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "mov" for 0x400ac0>, <DisassemblerInsn "lea" for 0x400ac5>, <DisassemblerInsn "mov" for 0x400acc>, <DisassemblerInsn "call" for 0x400ace>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5a>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "mov" for 0x400c6c>, <DisassemblerInsn "mov" for 0x400c74>, <DisassemblerInsn "mov" for 0x400c7b>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c85>, <DisassemblerInsn "mov" for 0x400c8c>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c9b>, <DisassemblerInsn "imul" for 0x400ca2>, <DisassemblerInsn "add" for 0x400ca5>, <DisassemblerInsn "and" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400cae>, <DisassemblerInsn "shr" for 0x400cb5>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "add" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cbd>, <DisassemblerInsn "shl" for 0x400cc5>, <DisassemblerInsn "mov" for 0x400cc8>, <DisassemblerInsn "add" for 0x400cca>, <DisassemblerInsn "mov" for 0x400ccd>, <DisassemblerInsn "shl" for 0x400cd5>, <DisassemblerInsn "mov" for 0x400cd8>, <DisassemblerInsn "add" for 0x400cda>, <DisassemblerInsn "cmp" for 0x400cdd>, <DisassemblerInsn "ja" for 0x400ce0>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401740>, <DisassemblerInsn "mov" for 0x401748>, <DisassemblerInsn "mov" for 0x401750>, <DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "mov" for 0x40175b>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "mov" for 0x401764>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "cdq" for 0x401774>, <DisassemblerInsn "idiv" for 0x401775>, <DisassemblerInsn "mov" for 0x401777>, <DisassemblerInsn "mov" for 0x401779>, <DisassemblerInsn "movsxd" for 0x40177e>, <DisassemblerInsn "cmp" for 0x401781>, <DisassemblerInsn "jge" for 0x401784>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008b8>, <DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "mov" for 0x4008c7>, <DisassemblerInsn "mov" for 0x4008cf>, <DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "sub" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008df>, <DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "sub" for 0x4008e8>, <DisassemblerInsn "cmp" for 0x4008eb>, <DisassemblerInsn "cmovl" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008fa>, <DisassemblerInsn "call" for 0x4008fc>]'}], 'cfg_block_detailed_info': [{'block_Idx': 34, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x460]>', '<mov~~rdx, qword ptr [rsp + 0x4e0]>', '<mov~~dword ptr [rdx + 0x78], 0>', '<mov~~dword ptr [rdx + 0x7c], 2>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x318], rax>', '<cmp~~rax, rcx>', '<ja~~0x4017bd>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0x518]>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x4b8], ecx>', '<mov~~dword ptr [rax + 0x240], ecx>', '<movzx~~edx, word ptr [rdx + 0xa]>', '<mov~~dword ptr [rsp + 0x4bc], edx>', '<mov~~dword ptr [rax + 0x244], edx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x4c0], rax>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<jne~~0x400161>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jmp~~0x401834>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x500]>', '<add~~rdi, 0x238>', '<call~~0x500010>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x302]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rcx + 0x648]>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x2d4], eax>', '<mov~~r10d, dword ptr [rsp + 0x2d4]>', '<mov~~rdi, qword ptr [rsp + 0x2c8]>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~rsi, qword ptr [rsp + 0x2b8]>', '<mov~~eax, dword ptr [rsp + 0x2d8]>', '<mov~~rcx, qword ptr [rsp + 0x318]>', '<mov~~qword ptr [rsp + 0x290], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x270], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x318]>', '<mov~~dword ptr [rsp + 0x274], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x278], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x27c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x280], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x284], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x288], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x28c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~dword ptr [rsp + 0x29c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2a8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2b0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x2d4], eax>', '<jne~~0x400d48>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x500]>', '<add~~rdi, 8>', '<mov~~qword ptr [rsp], rdi>', '<call~~0x500018>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x478]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x130]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<mov~~cx, word ptr [rcx + 0xe]>', '<mov~~word ptr [rsp + 0x4b6], cx>', '<cmp~~cx, 0>', '<mov~~qword ptr [rsp + 0x528], rax>', '<je~~0x4002c8>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x310]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~rdi, qword ptr [rcx + 0x650]>', '<shl~~eax, 4>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~rsi, qword ptr [rsp + 0x510]>', '<call~~0x500050>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x304]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2f8]>', '<mov~~qword ptr [rdx + 0x648], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x310]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2f0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c7d>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x508]>', '<mov~~edx, dword ptr [rsp + 0x310]>', '<mov~~esi, dword ptr [rsp + 0x308]>', '<mov~~rax, qword ptr [rsp + 0x318]>', '<mov~~edi, dword ptr [rsp + 0x304]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4017bd>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x450]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x458], rcx>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<je~~0x401834>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jmp~~0x401834>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x400993>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~r10d, dword ptr [rsp + 0x2d4]>', '<mov~~rdi, qword ptr [rsp + 0x2c8]>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~rsi, qword ptr [rsp + 0x2b8]>', '<mov~~eax, dword ptr [rsp + 0x2d8]>', '<mov~~rcx, qword ptr [rsp + 0x318]>', '<mov~~qword ptr [rsp + 0x290], rdi>', '<mov~~r8d, r10d>', '<shr~~r8d, 3>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~r8d, r8d>', '<mov~~r9d, dword ptr [rcx + r8]>', '<mov~~ecx, r10d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x270], ecx>', '<shr~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x318]>', '<mov~~dword ptr [rsp + 0x274], r9d>', '<shl~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x278], r9d>', '<sar~~r9d, 0x16>', '<mov~~dword ptr [rsp + 0x27c], r9d>', '<add~~r10d, 0xa>', '<mov~~dword ptr [rsp + 0x280], r10d>', '<cmp~~eax, r10d>', '<mov~~r8d, eax>', '<cmova~~r8d, r10d>', '<mov~~dword ptr [rsp + 0x284], r8d>', '<mov~~dword ptr [rsi + rdi*8], r9d>', '<mov~~edi, r8d>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x288], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x28c], ecx>', '<shr~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~dword ptr [rsp + 0x29c], edi>', '<shl~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<sar~~edi, 0x16>', '<mov~~dword ptr [rsp + 0x2a4], edi>', '<add~~r8d, 0xa>', '<mov~~dword ptr [rsp + 0x2a8], r8d>', '<cmp~~eax, r8d>', '<cmova~~eax, r8d>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<mov~~dword ptr [rsi + rcx*8 + 4], edi>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x2b0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~dword ptr [rsp + 0x2d4], eax>', '<jne~~0x400d48>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x3c8]>', '<mov~~rdi, qword ptr [rsp + 0x3f0]>', '<mov~~rdx, qword ptr [rsp + 0x3d0]>', '<mov~~rax, qword ptr [rsp + 0x438]>', '<mov~~r8d, dword ptr [rsp + 0x3c4]>', '<mov~~ecx, dword ptr [rsp + 0x400]>', '<sub~~ecx, r8d>', '<mov~~dword ptr [rsp + 0x3a4], ecx>', '<sub~~rax, rdi>', '<cmp~~rax, rdx>', '<cmovl~~rdx, rax>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<call~~0x500030>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x404]>', '<mov~~edx, dword ptr [rsp + 0x410]>', '<mov~~sil, byte ptr [rsp + 0x40b]>', '<mov~~ecx, dword ptr [rsp + 0x40c]>', '<shl~~ecx, 2>', '<and~~ecx, 0x7c>', '<add~~ecx, 4>', '<cmp~~sil, 0xfc>', '<cmovb~~edx, ecx>', '<mov~~esi, 1>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3d8], rsi>', '<mov~~dword ptr [rsp + 0x3e0], edx>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<mov~~dword ptr [rsp + 0x3e8], eax>', '<jmp~~0x40070e>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x368]>', '<mov~~rcx, qword ptr [rsp + 0x380]>', '<mov~~eax, dword ptr [rsp + 0x370]>', '<shl~~rdx, 0x20>', '<sar~~rdx, 0x20>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x394], eax>', '<mov~~rcx, qword ptr [rsp + 0x378]>', '<mov~~esi, dword ptr [rsp + 0x3bc]>', '<mov~~r9, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x388]>', '<mov~~edx, dword ptr [rsp + 0x394]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x3ec], esi>', '<mov~~dword ptr [rsp + 0x414], edx>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~qword ptr [rsp + 0x420], rax>', '<jne~~0x40051b>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x4017e6>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4fc]>', '<mov~~rcx, qword ptr [rsp + 0x4e8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<mov~~eax, dword ptr [rsp + 0x4cc]>', '<add~~rsp, 0x548>', '<ret~~>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x460]>', '<mov~~cx, word ptr [rax]>', '<mov~~word ptr [rsp + 0x302], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x304], ecx>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~dword ptr [rsp + 0x308], ecx>', '<mov~~cx, word ptr [rax + 4]>', '<mov~~word ptr [rsp + 0x30e], cx>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x310], ecx>', '<mov~~ax, word ptr [rax + 6]>', '<movzx~~ecx, ax>', '<mov~~dword ptr [rsp + 0x314], ecx>', '<add~~ax, -1>', '<cmp~~ax, 0x19>', '<jb~~0x400ba1>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~rdx, qword ptr [rsp + 0x3f8]>', '<mov~~rsi, qword ptr [rsp + 0x3d8]>', '<mov~~ecx, dword ptr [rsp + 0x3e0]>', '<mov~~edi, dword ptr [rsp + 0x3e4]>', '<mov~~r8d, dword ptr [rsp + 0x3e8]>', '<mov~~dword ptr [rsp + 0x3bc], r8d>', '<mov~~dword ptr [rsp + 0x3c0], edi>', '<mov~~dword ptr [rsp + 0x3c4], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x3c8], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400993>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x302]>', '<mov~~ecx, dword ptr [rsp + 0x2dc]>', '<or~~ecx, 8>', '<mov~~dword ptr [rsp + 0x2d8], ecx>', '<cmp~~ax, 0>', '<je~~0x400e75>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4d8]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x17c3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x4bc]>', '<mov~~esi, dword ptr [rsp + 0x4b8]>', '<mov~~rdi, qword ptr [rsp + 0x4c0]>', '<call~~0x500008>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<add~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x358], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x364], eax>', '<jmp~~0x4009fa>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x198]>', '<mov~~rdi, qword ptr [rsp + 0x500]>', '<mov~~r8d, dword ptr [rsp + 0x314]>', '<mov~~ecx, 0x20>', '<sub~~ecx, r8d>', '<mov~~r8d, 0xffffffff>', '<shr~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x4e0]>', '<mov~~dword ptr [rsp + 0x144], r8d>', '<mov~~r8, rdi>', '<add~~r8, 0x650>', '<mov~~qword ptr [rsp + 0x148], r8>', '<mov~~r8, rdi>', '<add~~r8, 0x648>', '<mov~~qword ptr [rsp + 0x150], r8>', '<add~~rdi, 0x48>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x168], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x170], rsi>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<mov~~edx, dword ptr [rsp + 0x17c]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 0x11c], eax>', '<mov~~qword ptr [rsp + 0x120], rsi>', '<mov~~dword ptr [rsp + 0x12c], edx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<cmp~~edx, 3>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jle~~0x401740>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x320], rcx>', '<cmp~~qword ptr [rax + 8], 0>', '<jne~~0x400ae6>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x314]>', '<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xd83]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jae~~0x4002c8>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x448]>', '<mov~~rsi, qword ptr [rsp + 0x440]>', '<movzx~~edi, byte ptr [rsi]>', '<shl~~edi, 0x10>', '<movzx~~eax, byte ptr [rsi + 1]>', '<shl~~eax, 8>', '<or~~eax, edi>', '<movzx~~esi, byte ptr [rsi + 2]>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x42c], eax>', '<setne~~al>', '<sub~~rcx, rdx>', '<setb~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4004ed>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x260]>', '<mov~~edx, dword ptr [rsp + 0x268]>', '<mov~~dword ptr [rsp + 0x190], edx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x1a4], ecx>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x198], rax>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~edx, dword ptr [rsp + 0x314]>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<imul~~ecx, edx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x1a0], eax>', '<mov~~esi, 4>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x1a4]>', '<imul~~ecx, edx>', '<cmp~~eax, ecx>', '<jl~~0x4017bd>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x310]>', '<mov~~rdx, rax>', '<add~~rdx, 0x65c>', '<mov~~qword ptr [rsp + 0x2f0], rdx>', '<cmp~~dword ptr [rax + 0x65c], ecx>', '<jge~~0x400c7d>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<and~~eax, 0x20>', '<cmp~~eax, 0>', '<je~~0x4005fc>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x498]>', '<mov~~rcx, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x480]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~r8, qword ptr [rsp + 0x490]>', '<movzx~~r9d, byte ptr [rax]>', '<shl~~r9d, 0x10>', '<movzx~~edi, byte ptr [rax + 1]>', '<shl~~edi, 8>', '<or~~edi, r9d>', '<movzx~~r8d, byte ptr [r8]>', '<or~~edi, r8d>', '<mov~~dword ptr [rsi + rcx*4 + 0x248], edi>', '<add~~rax, 3>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x4a8], rcx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jne~~0x400210>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x478]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xed9]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3ec]>', '<mov~~edx, dword ptr [rsp + 0x414]>', '<mov~~rax, qword ptr [rsp + 0x418]>', '<mov~~rsi, qword ptr [rsp + 0x420]>', '<mov~~qword ptr [rsp + 0x3f0], rsi>', '<mov~~qword ptr [rsp + 0x3f8], rax>', '<mov~~dword ptr [rsp + 0x400], edx>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x40b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x410], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006ba>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rsp + 0x3c8]>', '<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~esi, dword ptr [rsp + 0x3c4]>', '<cmp~~esi, 0>', '<mov~~qword ptr [rsp + 0x3a8], rdx>', '<mov~~qword ptr [rsp + 0x3b0], rcx>', '<mov~~dword ptr [rsp + 0x3b8], eax>', '<je~~0x400845>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x3f8]>', '<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~eax, ecx>', '<shl~~eax, 0xc>', '<and~~eax, 0x10000>', '<mov~~di, word ptr [rsi + 1]>', '<rol~~di, 8>', '<movzx~~edi, di>', '<or~~eax, 1>', '<add~~eax, edi>', '<shl~~ecx, 6>', '<and~~ecx, 0x300>', '<movzx~~esi, byte ptr [rsi + 3]>', '<or~~ecx, 5>', '<add~~ecx, esi>', '<mov~~esi, 4>', '<mov~~qword ptr [rsp + 0x3d8], rsi>', '<mov~~dword ptr [rsp + 0x3e0], edx>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<mov~~dword ptr [rsp + 0x3e8], eax>', '<jmp~~0x40070e>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jl~~0x401834>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4c0]>', '<mov~~ecx, dword ptr [rsp + 0x4bc]>', '<cmp~~dword ptr [rax + 0x98], ecx>', '<je~~0x4001a1>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~rax, qword ptr [rsp + 0x3f8]>', '<mov~~dl, byte ptr [rax + 1]>', '<shr~~dl, 6>', '<movzx~~edx, dl>', '<mov~~ax, word ptr [rax + 1]>', '<and~~ax, 0xff3f>', '<rol~~ax, 8>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<and~~ecx, 0x3f>', '<add~~ecx, 4>', '<mov~~esi, 3>', '<mov~~qword ptr [rsp + 0x3d8], rsi>', '<mov~~dword ptr [rsp + 0x3e0], edx>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<mov~~dword ptr [rsp + 0x3e8], eax>', '<jmp~~0x40070e>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<and~~eax, 0x40>', '<cmp~~eax, 0>', '<je~~0x400665>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x30e]>', '<mov~~rsi, qword ptr [rsp + 0x2e8]>', '<mov~~rax, qword ptr [rsp + 0x508]>', '<sub~~rax, rsi>', '<mov~~edx, eax>', '<shl~~edx, 3>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~rax, rsi>', '<mov~~qword ptr [rsp + 0x258], rax>', '<xor~~eax, eax>', '<cmp~~edx, 0x7ffffff9>', '<cmovb~~eax, edx>', '<mov~~dword ptr [rsp + 0x260], eax>', '<add~~eax, 8>', '<mov~~dword ptr [rsp + 0x264], eax>', '<xor~~eax, eax>', '<cmp~~cx, 0>', '<mov~~dword ptr [rsp + 0x268], eax>', '<je~~0x401115>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x470]>', '<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~eax, dword ptr [rax]>', '<imul~~eax, dword ptr [rcx]>', '<movsxd~~rdi, eax>', '<call~~0x500038>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x460]>', '<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x458]>', '<mov~~qword ptr [rsp + 0x430], rdx>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~edi, dword ptr [rsi + 0x94]>', '<mov~~esi, dword ptr [rsi + 0x98]>', '<imul~~esi, edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x438], rdx>', '<mov~~dil, byte ptr [rax]>', '<and~~dil, 1>', '<mov~~edx, 5>', '<mov~~esi, 2>', '<cmp~~dil, 0>', '<cmove~~rdx, rsi>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x440], rax>', '<add~~rax, 3>', '<mov~~qword ptr [rsp + 0x448], rax>', '<cmp~~rax, rcx>', '<ja~~0x4009ce>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x400a9a>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4fc]>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jmp~~0x401834>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4cc]>', '<add~~rsp, 0x548>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x304]>', '<mov~~rdx, rax>', '<add~~rdx, 0x658>', '<mov~~qword ptr [rsp + 0x2f8], rdx>', '<cmp~~dword ptr [rax + 0x658], ecx>', '<jge~~0x400c0f>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3bc]>', '<mov~~rdx, qword ptr [rsp + 0x430]>', '<mov~~rax, qword ptr [rsp + 0x380]>', '<sub~~rax, rdx>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jl~~0x400993>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4002c8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d0]>', '<mov~~cx, word ptr [rsp + 0x4b6]>', '<movzx~~edx, cx>', '<add~~edx, -1>', '<mov~~ecx, 0xff>', '<mov~~esi, edx>', '<sub~~esi, ecx>', '<cmovb~~ecx, edx>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<mov~~rdx, qword ptr [rsp + 0x508]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~qword ptr [rsp + 0x480], rax>', '<mov~~qword ptr [rsp + 0x488], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x490], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jae~~0x4002c8>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x304]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<mov~~rdi, qword ptr [rcx + 0x648]>', '<shl~~eax, 3>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<call~~0x500048>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x3c0]>', '<mov~~rcx, qword ptr [rsp + 0x3a8]>', '<mov~~rsi, qword ptr [rsp + 0x3b0]>', '<mov~~eax, dword ptr [rsp + 0x3b8]>', '<mov~~dword ptr [rsp + 0x374], eax>', '<mov~~qword ptr [rsp + 0x378], rsi>', '<mov~~qword ptr [rsp + 0x380], rcx>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~dword ptr [rsp + 0x394], eax>', '<jle~~0x400932>']}, {'block_Idx': 90, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jl~~0x401834>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x500]>', '<add~~rdi, 8>', '<call~~0x500018>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x4e0]>', '<mov~~dword ptr [rcx + 0x78], 1>', '<mov~~dword ptr [rcx + 0x7c], 1>', '<mov~~rcx, rax>', '<add~~rcx, 0x238>', '<mov~~qword ptr [rsp + 0x450], rcx>', '<mov~~rax, qword ptr [rax + 0x238]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x458], rax>', '<jne~~0x400424>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x254], ecx>', '<mov~~dword ptr [rsp + 0x268], eax>', '<jne~~0x400f1f>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x194]>', '<cmp~~eax, 3>', '<jle~~0x4017e6>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4fc]>', '<mov~~rcx, qword ptr [rsp + 0x4f0]>', '<add~~rcx, 0x14>', '<mov~~qword ptr [rsp + 0x4d0], rcx>', '<cmp~~eax, 0x14>', '<jge~~0x4000fe>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x527]>', '<test~~al, 1>', '<jne~~0x400396>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x470]>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x4017e6>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x410]>', '<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~rsi, qword ptr [rsp + 0x3f8]>', '<mov~~eax, ecx>', '<shl~~eax, 3>', '<and~~eax, 0x300>', '<movzx~~esi, byte ptr [rsi + 1]>', '<or~~eax, 1>', '<add~~eax, esi>', '<shr~~ecx, 2>', '<and~~ecx, 7>', '<add~~ecx, 3>', '<mov~~esi, 2>', '<mov~~qword ptr [rsp + 0x3d8], rsi>', '<mov~~dword ptr [rsp + 0x3e0], edx>', '<mov~~dword ptr [rsp + 0x3e4], ecx>', '<mov~~dword ptr [rsp + 0x3e8], eax>', '<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~rdx, qword ptr [rsp + 0x3f8]>', '<mov~~rsi, qword ptr [rsp + 0x3d8]>', '<mov~~ecx, dword ptr [rsp + 0x3e0]>', '<mov~~edi, dword ptr [rsp + 0x3e4]>', '<mov~~r8d, dword ptr [rsp + 0x3e8]>', '<mov~~dword ptr [rsp + 0x3bc], r8d>', '<mov~~dword ptr [rsp + 0x3c0], edi>', '<mov~~dword ptr [rsp + 0x3c4], ecx>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x3c8], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<sub~~rax, rdx>', '<cmp~~rax, rcx>', '<jl~~0x400993>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x500]>', '<mov~~rax, qword ptr [rsp + 0x4e0]>', '<mov~~rdi, qword ptr [rax + 8]>', '<add~~rsi, 0x248>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x364]>', '<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~rcx, qword ptr [rsp + 0x450]>', '<mov~~r8, qword ptr [rsp + 0x358]>', '<mov~~rsi, qword ptr [rsp + 0x350]>', '<mov~~dword ptr [rsp + 0x348], edx>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~esi, edx>', '<imul~~esi, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0x32c], esi>', '<movsxd~~rsi, esi>', '<add~~rdi, rsi>', '<mov~~qword ptr [rsp + 0x330], rdi>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, eax>', '<imul~~ecx, edx>', '<mov~~dword ptr [rsp + 0x33c], ecx>', '<movsxd~~rcx, ecx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x340], rsi>', '<movsxd~~rdx, eax>', '<call~~0x500030>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jmp~~0x401834>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rsp + 0x4d8]>', '<mov~~edx, 1>', '<call~~0x500028>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4d8]>', '<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rdx, qword ptr [rsp + 0x528]>', '<mov~~qword ptr [rsp + 0x460], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x240>', '<mov~~qword ptr [rsp + 0x468], rdx>', '<mov~~edi, dword ptr [rax + 0x240]>', '<mov~~rdx, rax>', '<add~~rdx, 0x244>', '<mov~~qword ptr [rsp + 0x470], rdx>', '<mov~~esi, dword ptr [rax + 0x244]>', '<mov~~qword ptr [rsp + 0x478], rcx>', '<xor~~edx, edx>', '<call~~0x500020>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~ax, word ptr [rsp + 0x30e]>', '<mov~~rcx, qword ptr [rsp + 0x500]>', '<lea~~rdx, [rsp + 0x530]>', '<add~~rcx, 0x650>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0x240], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~dword ptr [rsp + 0x254], eax>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<mov~~esi, dword ptr [rsp + 0x234]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~eax, dword ptr [rsp + 0x264]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x1f0], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x1f4], ecx>', '<shr~~edi, cl>', '<mov~~dword ptr [rsp + 0x1f8], edi>', '<mov~~ecx, edi>', '<and~~ecx, 0xff>', '<mov~~dword ptr [rsp + 0x1fc], ecx>', '<add~~esi, 8>', '<mov~~dword ptr [rsp + 0x200], esi>', '<cmp~~eax, esi>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x204], eax>', '<mov~~dword ptr [rsp + rdx*4 + 0x530], ecx>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x208], rdx>', '<xor~~ecx, ecx>', '<cmp~~rdx, 4>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x234], edx>', '<mov~~qword ptr [rsp + 0x210], rcx>', '<mov~~dword ptr [rsp + 0x21c], eax>', '<jne~~0x400f47>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x430]>', '<mov~~rcx, qword ptr [rsp + 0x448]>', '<mov~~edx, dword ptr [rsp + 0x42c]>', '<mov~~dword ptr [rsp + 0x414], edx>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~qword ptr [rsp + 0x420], rax>', '<mov~~ecx, dword ptr [rsp + 0x3ec]>', '<mov~~edx, dword ptr [rsp + 0x414]>', '<mov~~rax, qword ptr [rsp + 0x418]>', '<mov~~rsi, qword ptr [rsp + 0x420]>', '<mov~~qword ptr [rsp + 0x3f0], rsi>', '<mov~~qword ptr [rsp + 0x3f8], rax>', '<mov~~dword ptr [rsp + 0x400], edx>', '<mov~~dword ptr [rsp + 0x404], ecx>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x40b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<mov~~ecx, eax>', '<and~~ecx, 3>', '<mov~~dword ptr [rsp + 0x410], ecx>', '<and~~eax, 0x80>', '<cmp~~eax, 0>', '<je~~0x4006ba>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x4cc], eax>', '<jl~~0x401834>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x4017bd>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x548>', '<mov~~qword ptr [rsp + 0x4d8], rdi>', '<mov~~qword ptr [rsp + 0x4e0], rsi>', '<mov~~qword ptr [rsp + 0x4e8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0x4fc], ecx>', '<mov~~rdx, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<movsxd~~rdx, ecx>', '<mov~~rcx, rax>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x508], rcx>', '<mov~~qword ptr [rsp + 0x510], rsi>', '<mov~~ecx, dword ptr [rax]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x518], rax>', '<cmp~~ecx, 0x5447566b>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x527], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x528], rax>', '<jne~~0x4000b2>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x378]>', '<mov~~esi, dword ptr [rsp + 0x3bc]>', '<mov~~r9, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x388]>', '<mov~~edx, dword ptr [rsp + 0x394]>', '<test~~edx, edx>', '<setg~~dil>', '<mov~~r8, rcx>', '<sub~~r8, r9>', '<setb~~r8b>', '<and~~dil, r8b>', '<test~~dil, 1>', '<mov~~dword ptr [rsp + 0x3ec], esi>', '<mov~~dword ptr [rsp + 0x414], edx>', '<mov~~qword ptr [rsp + 0x418], rcx>', '<mov~~qword ptr [rsp + 0x420], rax>', '<jne~~0x40051b>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x478]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0xe06]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~ecx, dword ptr [rsp + 0x310]>', '<mov~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x2f0]>', '<mov~~qword ptr [rdx + 0x650], rsi>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x508]>', '<mov~~edx, dword ptr [rsp + 0x310]>', '<mov~~esi, dword ptr [rsp + 0x308]>', '<mov~~rax, qword ptr [rsp + 0x318]>', '<mov~~edi, dword ptr [rsp + 0x304]>', '<imul~~edi, edi, 0x14>', '<add~~edi, 0x1f>', '<and~~edi, 0x3fffe0>', '<mov~~dword ptr [rsp + 0x2dc], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<shl~~esi, 4>', '<mov~~esi, esi>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x2e8], rax>', '<shl~~edx, 3>', '<mov~~edx, edx>', '<add~~rax, rdx>', '<cmp~~rax, rcx>', '<ja~~0x4017bd>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~edx, dword ptr [rsp + 0x140]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~ecx, 4>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, ecx>', '<cmp~~rax, rcx>', '<jge~~0x4017e6>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x380]>', '<mov~~esi, dword ptr [rsp + 0x3bc]>', '<mov~~rcx, qword ptr [rsp + 0x438]>', '<mov~~eax, dword ptr [rsp + 0x3c0]>', '<mov~~edx, dword ptr [rsp + 0x374]>', '<sub~~edx, eax>', '<mov~~dword ptr [rsp + 0x370], edx>', '<mov~~eax, eax>', '<sub~~rcx, rdi>', '<cmp~~rcx, rax>', '<cmovl~~rax, rcx>', '<mov~~qword ptr [rsp + 0x368], rax>', '<mov~~edx, eax>', '<call~~0x500040>']}], 'cfg_edge_info': [(15, 21), (32, 37), (96, 49), (33, 45), (29, 32), (8, 9), (9, 17), (11, 14), (28, 30), (92, 97), (22, 19), (17, 23), (2, 4), (75, 83), (98, 87), (70, 59), (22, 3), (53, 73), (82, 88), (59, 68), (85, 50), (56, 14), (45, 14), (39, 46), (49, 57), (27, 29), (68, 79), (72, 70), (30, 34), (50, 49), (64, 75), (65, 40), (3, 10), (0, 2), (46, 54), (83, 82), (1, 3), (40, 56), (10, 15), (96, 85), (90, 14), (78, 49), (36, 43), (81, 75), (16, 19), (29, 31), (58, 67), (51, 61), (4, 11), (5, 9), (61, 72), (52, 14), (41, 14), (34, 39), (16, 3), (41, 32), (73, 64), (76, 90), (42, 49), (63, 81), (43, 50), (75, 82), (19, 22), (70, 49), (82, 87), (47, 65), (86, 96), (87, 40), (27, 28), (30, 33), (54, 64), (12, 3), (92, 57), (32, 36), (85, 51), (23, 12), (21, 24), (60, 70), (78, 85), (64, 40), (10, 14), (36, 42), (120, 57), (51, 60), (81, 40), (61, 71), (73, 63), (57, 76), (37, 52), (24, 27), (12, 16), (87, 92), (19, 3), (99, 57), (8, 12), (2, 5), (34, 40), (31, 41), (43, 51), (59, 69), (89, 82), (0, 1), (46, 53), (39, 47), (49, 58), (71, 70), (54, 63), (79, 86), (21, 14), (90, 95), (50, 59), (79, 49), (5, 8)], 'cdg_edge_info': [(32, 37), (64, 14), (96, 49), (73, 81), (64, 87), (8, 9), (29, 41), (2, 11), (81, 14), (81, 87), (22, 19), (2, 4), (32, 14), (87, 57), (70, 59), (85, 50), (64, 82), (54, 81), (34, 14), (39, 46), (5, 23), (49, 57), (27, 29), (30, 34), (50, 49), (81, 82), (64, 75), (0, 2), (46, 54), (85, 70), (10, 15), (96, 85), (90, 14), (81, 75), (16, 19), (39, 14), (30, 45), (79, 96), (29, 31), (5, 9), (51, 61), (21, 27), (61, 72), (41, 14), (34, 39), (41, 32), (73, 64), (19, 22), (87, 56), (70, 49), (32, 52), (87, 40), (27, 28), (10, 21), (64, 56), (30, 33), (36, 49), (54, 64), (32, 36), (85, 51), (21, 24), (64, 40), (81, 56), (8, 17), (10, 14), (27, 30), (2, 10), (51, 60), (81, 40), (87, 90), (61, 71), (2, 3), (27, 32), (2, 12), (34, 56), (49, 90), (12, 16), (87, 92), (2, 5), (34, 40), (2, 14), (87, 76), (59, 69), (0, 1), (30, 14), (39, 47), (0, 10), (8, 23), (39, 56), (49, 58), (39, 65), (49, 67), (49, 76), (79, 86), (21, 14), (87, 14), (50, 59), (90, 95), (79, 49), (5, 8), (39, 40), (0, 3), (5, 17), (46, 73)], 'ddg_edge_info': [(15, 21), (86, 72), (24, 33), (73, 81), (33, 45), (50, 70), (24, 51), (29, 32), (0, 5), (29, 41), (9, 17), (3, 31), (29, 50), (3, 95), (0, 23), (3, 40), (24, 72), (75, 90), (3, 49), (52, 95), (0, 87), (24, 81), (16, 22), (39, 81), (5, 3), (22, 19), (31, 86), (3, 15), (31, 95), (17, 23), (0, 16), (31, 49), (92, 90), (3, 33), (32, 69), (86, 49), (31, 58), (5, 30), (86, 58), (86, 67), (33, 95), (24, 92), (70, 59), (22, 3), (24, 37), (85, 50), (0, 46), (31, 79), (85, 59), (29, 36), (34, 87), (39, 46), (0, 9), (0, 73), (5, 87), (24, 58), (31, 51), (86, 51), (24, 67), (60, 96), (86, 60), (72, 70), (24, 85), (24, 30), (81, 82), (10, 95), (0, 30), (76, 95), (31, 72), (3, 10), (85, 61), (0, 57), (23, 22), (0, 2), (60, 71), (85, 70), (41, 67), (24, 60), (40, 56), (3, 37), (24, 69), (96, 85), (81, 75), (24, 87), (16, 19), (0, 32), (24, 96), (0, 96), (39, 87), (3, 67), (58, 67), (5, 9), (4, 11), (40, 95), (12, 24), (29, 31), (31, 37), (85, 72), (3, 21), (29, 49), (24, 71), (41, 32), (76, 90), (0, 34), (31, 67), (31, 85), (86, 85), (24, 46), (70, 86), (27, 81), (4, 95), (19, 22), (24, 73), (27, 90), (71, 60), (24, 82), (0, 82), (0, 27), (31, 60), (39, 73), (0, 36), (31, 69), (82, 87), (39, 82), (86, 69), (0, 45), (71, 96), (24, 39), (23, 19), (31, 32), (31, 96), (86, 96), (70, 79), (24, 57), (21, 95), (24, 75), (47, 40), (0, 29), (39, 75), (12, 3), (32, 36), (86, 71), (23, 3), (0, 47), (23, 12), (24, 32), (85, 51), (85, 60), (31, 71), (60, 70), (24, 50), (12, 30), (24, 59), (0, 4), (3, 39), (0, 22), (85, 90), (29, 67), (0, 95), (11, 95), (24, 34), (29, 85), (15, 95), (24, 61), (36, 90), (24, 70), (0, 70), (3, 32), (2, 12), (0, 15), (29, 60), (31, 57), (57, 76), (86, 57), (0, 24), (32, 86), (37, 52), (5, 47), (24, 27), (15, 24), (49, 90), (24, 36), (23, 16), (12, 16), (87, 92), (19, 3), (56, 95), (45, 95), (31, 41), (0, 8), (0, 17), (3, 34), (31, 50), (0, 81), (86, 50), (32, 79), (31, 59), (86, 59), (29, 71), (24, 29), (70, 69), (24, 47), (27, 73), (85, 69), (39, 47), (5, 24), (70, 96), (0, 19), (2, 16), (71, 70), (31, 61), (86, 61), (31, 70), (24, 86), (86, 70), (24, 31), (86, 79), (24, 40), (90, 95), (24, 49), (34, 81), (5, 8), (0, 58), (0, 3), (31, 36), (85, 71), (0, 12), (0, 76), (37, 95), (60, 90), (46, 73), (24, 79), (41, 95), (27, 41)]}]}
{'tgv_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 42, 'instruction': 'movzwl\t(%rcx), %ecx'}, {'instIndex': 43, 'instruction': 'movl\t%ecx, 0x4b8(%rsp)                # 4-byte Spill'}, {'instIndex': 44, 'instruction': 'movl\t%ecx, 0x240(%rax)'}, {'instIndex': 45, 'instruction': 'movzwl\t10(%rdx), %edx'}, {'instIndex': 46, 'instruction': 'movl\t%edx, 0x4bc(%rsp)                # 4-byte Spill'}, {'instIndex': 47, 'instruction': 'movl\t%edx, 0x244(%rax)'}, {'instIndex': 48, 'instruction': 'movq\t(%rax), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, 0x4c0(%rsp)                # 8-byte Spill'}, {'instIndex': 50, 'instruction': 'cmpl\t%ecx, 0x94(%rax)'}, {'instIndex': 51, 'instruction': 'jne\t.LBB1_5'}, {'instIndex': 54, 'instruction': 'cmpl\t%ecx, 0x98(%rax)'}, {'instIndex': 55, 'instruction': 'je\t.LBB1_6'}, {'instIndex': 59, 'instruction': 'callq\tavcodec_set_dimensions@PLT'}, {'instIndex': 61, 'instruction': 'addq\t$0x238, %rdi                      # imm = 0x0xee'}, {'instIndex': 62, 'instruction': 'callq\tav_freep@PLT'}, {'instIndex': 64, 'instruction': 'addq\t$8, %rdi'}, {'instIndex': 65, 'instruction': 'callq\tav_frame_unref@PLT'}, {'instIndex': 68, 'instruction': 'movw\t14(%rcx), %cx'}, {'instIndex': 69, 'instruction': 'movw\t%cx, 0x4b6(%rsp)                 # 2-byte Spill'}, {'instIndex': 75, 'instruction': 'movzwl\t%cx, %edx'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 124, 'instruction': 'addq\t$0x240, %rdx                      # imm = 0x0xf0'}, {'instIndex': 125, 'instruction': 'movq\t%rdx, 0x468(%rsp)                # 8-byte Spill'}, {'instIndex': 126, 'instruction': 'movl\t0x240(%rax), %edi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 128, 'instruction': 'addq\t$0x244, %rdx                      # imm = 0x0xf4'}, {'instIndex': 129, 'instruction': 'movq\t%rdx, 0x470(%rsp)                # 8-byte Spill'}, {'instIndex': 130, 'instruction': 'movl\t0x244(%rax), %esi'}, {'instIndex': 131, 'instruction': 'movq\t%rcx, 0x478(%rsp)                # 8-byte Spill'}, {'instIndex': 132, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 133, 'instruction': 'callq\tav_image_check_size@PLT'}, {'instIndex': 134, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 135, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 136, 'instruction': 'jl\t.LBB1_80'}, {'instIndex': 139, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 140, 'instruction': 'callq\tff_get_buffer@PLT'}, {'instIndex': 141, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 0x4cc(%rsp)                # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'jl\t.LBB1_80'}]}]}
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/patch_info.txt
{'1': {'before': 'a/libavformat/cdg.c', 'after': 'b/libavformat/cdg.c'}}
{'1': [{'before': '-50,6', 'after': '+54,7', 'function': 'static int read_header'}, {'before': '-59,6', 'after': '+64,11', 'function': 'static int read_packet'}, {'before': '-66,6', 'after': '+76,7', 'function': 'static int read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9---b/libavformat/cdg.c
The case of compiler gcc with optimization no.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s---read_header---after
function id: 25
function flag: True
There are 49 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s---read_packet---after
function id: 26
function flag: True
There are 45 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg_gcc.s---read_packet---after
function id: 26
function flag: True
There are 45 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/no/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O0.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s---read_header---after
function id: 25
function flag: True
There are 49 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s---read_packet---after
function id: 26
function flag: True
There are 45 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg_gcc.s---read_packet---after
function id: 26
function flag: True
There are 45 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O0/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 24, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 26, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 28, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 30, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'jne\t.L8'}, {'instIndex': 32, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movl\t0x28(%rax), %eax'}, {'instIndex': 34, 'instruction': 'orl\t$1, %eax'}, {'instIndex': 35, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 36, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t%edx, 0x28(%rax)'}, {'instIndex': 38, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 40, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 41, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 42, 'instruction': 'movl\t0x14(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 44, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O1.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s---read_header---after
function id: 8
function flag: True
There are 48 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 79 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 9, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 79 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 9, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O1/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 9, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s---read_header---after
function id: 8
function flag: True
There are 46 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 78 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 78 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O2/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s---read_header---after
function id: 8
function flag: True
There are 46 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 78 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 78 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/O3/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 14, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0(%rbp), %edx'}, {'instIndex': 22, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 23, 'instruction': 'jne\t.L4'}, {'instIndex': 24, 'instruction': 'orl\t$1, 0x28(%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$1, 0(%rbp)'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%r12)'}, {'instIndex': 27, 'instruction': 'popq\t%rbx'}, {'instIndex': 28, 'instruction': 'popq\t%rbp'}, {'instIndex': 29, 'instruction': 'popq\t%r12'}, {'instIndex': 30, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s---read_header---after
function id: 9
function flag: True
There are 40 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 71 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 19, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg_gcc.s---read_packet---after
function id: 0
function flag: True
There are 71 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 19, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_after/Os/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 19, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'cmpl\t$0, (%r12)'}, {'instIndex': 22, 'instruction': 'jne\t.L4'}, {'instIndex': 23, 'instruction': 'orl\t$1, 0x28(%rbx)'}, {'instIndex': 24, 'instruction': 'movl\t$1, (%r12)'}, {'instIndex': 25, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 26, 'instruction': 'popq\t%rbx'}, {'instIndex': 27, 'instruction': 'popq\t%rbp'}, {'instIndex': 28, 'instruction': 'popq\t%r12'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s---read_header---after
function id: 0
function flag: True
There are 41 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s---read_packet---after
function id: 1
function flag: True
There are 38 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.s---read_packet---after
function id: 1
function flag: True
There are 38 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 41 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 38 instructions in binary file.
[4194581, 4194593, 4194603, 4194628]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.572636
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40011f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "or" for 0x400133>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "add" for 0x400154>, <DisassemblerInsn "ret" for 0x400158>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "add" for 0x400154>, <DisassemblerInsn "ret" for 0x400158>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "call" for 0x40011a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "movzx" for 0x400108>, <DisassemblerInsn "and" for 0x40010b>, <DisassemblerInsn "cmp" for 0x40010e>, <DisassemblerInsn "jne" for 0x400111>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<jmp~~0x4000dc>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x28]>', '<or~~ecx, 1>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400144>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400121>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 0x3f>', '<cmp~~eax, 9>', '<jne~~0x400115>']}], 'cfg_edge_info': [(2, 4), (5, 8), (4, 6), (4, 7), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 14 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 155 nodes and 172 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 13 nodes and 17 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 164 nodes and 192 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.633200
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/no/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O0.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s---read_header---after
function id: 0
function flag: True
There are 41 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s---read_packet---after
function id: 1
function flag: True
There are 38 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.s---read_packet---after
function id: 1
function flag: True
There are 38 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 41 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 38 instructions in binary file.
[4194581, 4194593, 4194603, 4194628]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.185097
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40011f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "or" for 0x400133>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "add" for 0x400154>, <DisassemblerInsn "ret" for 0x400158>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "add" for 0x400154>, <DisassemblerInsn "ret" for 0x400158>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "call" for 0x40011a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "movzx" for 0x400108>, <DisassemblerInsn "and" for 0x40010b>, <DisassemblerInsn "cmp" for 0x40010e>, <DisassemblerInsn "jne" for 0x400111>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<jmp~~0x4000dc>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x28]>', '<or~~ecx, 1>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 1>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400144>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400121>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 0x3f>', '<cmp~~eax, 9>', '<jne~~0x400115>']}], 'cfg_edge_info': [(2, 4), (5, 8), (4, 6), (4, 7), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 14 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 155 nodes and 172 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 13 nodes and 17 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 164 nodes and 192 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.634520
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O0/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 22, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 26, 'instruction': 'jne\t.LBB1_7'}, {'instIndex': 27, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x28(%rax), %ecx'}, {'instIndex': 29, 'instruction': 'orl\t$1, %ecx'}, {'instIndex': 30, 'instruction': 'movl\t%ecx, 0x28(%rax)'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 33, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 35, 'instruction': 'movl\t12(%rsp), %eax'}, {'instIndex': 36, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 37, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O1.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s---read_header---after
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 61 instructions in binary file.
[4194603, 4194649, 4194667, 4194692]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.189109
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "call" for 0x400130>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "and" for 0x40011f>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "call" for 0x400147>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40010f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "jl" for 0x4000f3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "jge" for 0x400157>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "and" for 0x400103>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "je" for 0x40010d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "cmp" for 0x400166>, <DisassemblerInsn "jne" for 0x400169>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "or" for 0x400178>, <DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x40012b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x400159>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jge~~0x400111>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 8], ecx>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400184>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rcx + 0x28]>', '<or~~edx, 1>', '<mov~~dword ptr [rcx + 0x28], edx>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 2), (10, 7), (9, 2), (6, 7), (3, 2), (2, 5), (7, 8)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 150 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 14 nodes and 20 edges in CFGEmulated.
It has 12 nodes and 15 edges in CDG.
It has 225 nodes and 260 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.839674
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O1/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s---read_header---after
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 61 instructions in binary file.
[4194603, 4194649, 4194667, 4194692]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.195976
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "call" for 0x400130>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "and" for 0x40011f>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "call" for 0x400147>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40010f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "jl" for 0x4000f3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "jge" for 0x400157>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "and" for 0x400103>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "je" for 0x40010d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "cmp" for 0x400166>, <DisassemblerInsn "jne" for 0x400169>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "or" for 0x400178>, <DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x40012b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x400159>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jge~~0x400111>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 8], ecx>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400184>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rcx + 0x28]>', '<or~~edx, 1>', '<mov~~dword ptr [rcx + 0x28], edx>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 2), (10, 7), (9, 2), (6, 7), (3, 2), (2, 5), (7, 8)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 150 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 14 nodes and 20 edges in CFGEmulated.
It has 12 nodes and 15 edges in CDG.
It has 225 nodes and 260 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.849247
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O2/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s---read_header---after
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 24 nodes and 34 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 61 instructions in binary file.
[4194603, 4194649, 4194667, 4194692]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.184742
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "call" for 0x400130>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "and" for 0x40011f>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "call" for 0x400147>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40010f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "jl" for 0x4000f3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "cmp" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "jge" for 0x400157>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "and" for 0x400103>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "je" for 0x40010d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "cmp" for 0x400166>, <DisassemblerInsn "jne" for 0x400169>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "or" for 0x400178>, <DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "add" for 0x400194>, <DisassemblerInsn "ret" for 0x400198>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x40012b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x400159>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jge~~0x400111>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400159>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 8], ecx>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400184>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rcx + 0x28]>', '<or~~edx, 1>', '<mov~~dword ptr [rcx + 0x28], edx>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 2), (10, 7), (9, 2), (6, 7), (3, 2), (2, 5), (7, 8)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 149 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 14 nodes and 20 edges in CFGEmulated.
It has 12 nodes and 15 edges in CDG.
It has 225 nodes and 260 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.842425
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/O3/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s---read_header---after
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.s---read_packet---after
function id: 1
function flag: True
There are 61 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.o---after
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 33 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 33 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 61 instructions in binary file.
[4194592, 4194638, 4194656, 4194681]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.185740
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "and" for 0x4000f8>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "je" for 0x400102>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "add" for 0x400189>, <DisassemblerInsn "ret" for 0x40018d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x40015b>, <DisassemblerInsn "jne" for 0x40015e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400104>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "cmp" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "jl" for 0x4000e8>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "cmp" for 0x400145>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "jge" for 0x40014c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "and" for 0x400114>, <DisassemblerInsn "cmp" for 0x400117>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "je" for 0x40011e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "call" for 0x40013c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "mov" for 0x400165>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "or" for 0x40016d>, <DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "mov" for 0x400173>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "add" for 0x400189>, <DisassemblerInsn "ret" for 0x40018d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "call" for 0x400125>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40014e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 8], ecx>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400179>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x400120>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jl~~0x40014e>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jge~~0x400106>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x40014e>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~edx, dword ptr [rcx + 0x28]>', '<or~~edx, 1>', '<mov~~dword ptr [rcx + 0x28], edx>', '<mov~~dword ptr [rax], 1>', '<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}], 'cfg_edge_info': [(2, 4), (1, 2), (10, 2), (10, 7), (9, 2), (6, 7), (3, 2), (2, 5), (7, 8)]}, {'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.o---after
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 150 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 14 nodes and 20 edges in CFGEmulated.
It has 12 nodes and 15 edges in CDG.
It has 225 nodes and 260 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.858928
{'read_header': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_after/Os/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 48, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 49, 'instruction': 'jne\t.LBB1_6'}, {'instIndex': 52, 'instruction': 'movl\t0x28(%rcx), %edx'}, {'instIndex': 53, 'instruction': 'orl\t$1, %edx'}, {'instIndex': 54, 'instruction': 'movl\t%edx, 0x28(%rcx)'}, {'instIndex': 55, 'instruction': 'movl\t$1, (%rax)'}, {'instIndex': 58, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 59, 'instruction': 'addq\t$0x38, %rsp'}, {'instIndex': 60, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': []}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9---a/libavformat/cdg.c
The case of compiler gcc with optimization no.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s---read_header---before
function id: 25
function flag: True
There are 49 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s---read_packet---before
function id: 26
function flag: True
There are 30 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg_gcc.s---read_packet---before
function id: 26
function flag: True
There are 30 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/no/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O0.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s---read_header---before
function id: 25
function flag: True
There are 49 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s---read_packet---before
function id: 26
function flag: True
There are 30 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg_gcc.s---read_packet---before
function id: 26
function flag: True
There are 30 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O0/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 21, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 25, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 27, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 28, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 29, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O1.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s---read_header---before
function id: 6
function flag: True
There are 48 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 74 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 74 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O1/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 7, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s---read_header---before
function id: 6
function flag: True
There are 46 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 72 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 72 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O2/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s---read_header---before
function id: 6
function flag: True
There are 46 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 72 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 72 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/O3/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 13, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s---read_header---before
function id: 7
function flag: True
There are 40 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 66 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 17, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 18, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'popq\t%rdx'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg_gcc.s---read_packet---before
function id: 0
function flag: True
There are 66 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 17, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 18, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'popq\t%rdx'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/gcc_before/Os/cdg.o
Binary file does not exist.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 17, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 18, 'instruction': 'call\tav_free_packet@PLT'}, {'instIndex': 20, 'instruction': 'movl\t$0, 0x24(%rbx)'}, {'instIndex': 21, 'instruction': 'popq\t%rdx'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'popq\t%rbp'}, {'instIndex': 24, 'instruction': 'ret'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s---read_header---before
function id: 0
function flag: True
There are 41 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s---read_packet---before
function id: 1
function flag: True
There are 26 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.s---read_packet---before
function id: 1
function flag: True
There are 26 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 29 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 41 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 29 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 26 instructions in binary file.
[4194567, 4194579]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.180243
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400111>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400105>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "movzx" for 0x4000fa>, <DisassemblerInsn "and" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400100>, <DisassemblerInsn "jne" for 0x400103>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "call" for 0x40010c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "add" for 0x400123>, <DisassemblerInsn "ret" for 0x400127>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<jmp~~0x4000ce>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400113>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 0x3f>', '<cmp~~eax, 9>', '<jne~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (5, 6), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 14 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 155 nodes and 172 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 7 nodes and 7 edges in CDG.
It has 110 nodes and 127 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.203335
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/no/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O0.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s---read_header---before
function id: 0
function flag: True
There are 41 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s---read_packet---before
function id: 1
function flag: True
There are 26 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.s---read_packet---before
function id: 1
function flag: True
There are 26 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 29 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 41 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 23 nodes and 29 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 26 instructions in binary file.
[4194567, 4194579]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.172176
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400111>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400105>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "movzx" for 0x4000fa>, <DisassemblerInsn "and" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400100>, <DisassemblerInsn "jne" for 0x400103>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "call" for 0x40010c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "add" for 0x400123>, <DisassemblerInsn "ret" for 0x400127>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<jmp~~0x4000ce>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400113>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<movzx~~eax, byte ptr [rax]>', '<and~~eax, 0x3f>', '<cmp~~eax, 9>', '<jne~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~dword ptr [rax + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 4]>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (5, 6), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 14 edges in CFGEmulated.
It has 10 nodes and 9 edges in CDG.
It has 155 nodes and 173 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 7 nodes and 7 edges in CDG.
It has 110 nodes and 127 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.208290
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O0/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 19, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t$0, 0x24(%rax)'}, {'instIndex': 23, 'instruction': 'movl\t4(%rsp), %eax'}, {'instIndex': 24, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 25, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O1.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s---read_header---before
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 48 instructions in binary file.
[4194594, 4194640]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.184390
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "add" for 0x400160>, <DisassemblerInsn "ret" for 0x400164>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "cmp" for 0x400147>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "jge" for 0x40014e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000df>, <DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "jl" for 0x4000ea>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400106>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "and" for 0x4000fa>, <DisassemblerInsn "cmp" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "je" for 0x400104>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012c>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "call" for 0x40013e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "and" for 0x400116>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "je" for 0x400120>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "call" for 0x400127>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 4], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jge~~0x400108>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x400150>']}, {'block_Idx': 4, 'blockInsts': ['<jmp~~0x400122>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}], 'cfg_edge_info': [(1, 2), (4, 5), (5, 6), (7, 2), (8, 2), (3, 2), (8, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 150 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 18 edges in CFGEmulated.
It has 9 nodes and 13 edges in CDG.
It has 163 nodes and 186 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.497561
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O1/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s---read_header---before
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 48 instructions in binary file.
[4194594, 4194640]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.184492
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "add" for 0x400160>, <DisassemblerInsn "ret" for 0x400164>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "cmp" for 0x400147>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "jge" for 0x40014e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000df>, <DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "jl" for 0x4000ea>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400106>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "and" for 0x4000fa>, <DisassemblerInsn "cmp" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "je" for 0x400104>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012c>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "call" for 0x40013e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "and" for 0x400116>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "je" for 0x400120>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "call" for 0x400127>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 4], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jge~~0x400108>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x400150>']}, {'block_Idx': 4, 'blockInsts': ['<jmp~~0x400122>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}], 'cfg_edge_info': [(1, 2), (4, 5), (5, 6), (7, 2), (8, 2), (3, 2), (8, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 149 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 18 edges in CFGEmulated.
It has 9 nodes and 13 edges in CDG.
It has 163 nodes and 186 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.485681
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O2/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s---read_header---before
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 22 nodes and 32 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 48 instructions in binary file.
[4194594, 4194640]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.181669
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "add" for 0x400160>, <DisassemblerInsn "ret" for 0x400164>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "cmp" for 0x400147>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "jge" for 0x40014e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000df>, <DisassemblerInsn "cmp" for 0x4000e3>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "jl" for 0x4000ea>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400106>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ec>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "and" for 0x4000fa>, <DisassemblerInsn "cmp" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "je" for 0x400104>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012c>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "call" for 0x40013e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "and" for 0x400116>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "je" for 0x400120>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400122>, <DisassemblerInsn "call" for 0x400127>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 4], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jge~~0x400108>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x400150>']}, {'block_Idx': 4, 'blockInsts': ['<jmp~~0x400122>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400150>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}], 'cfg_edge_info': [(1, 2), (4, 5), (5, 6), (7, 2), (8, 2), (3, 2), (8, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 149 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 18 edges in CFGEmulated.
It has 9 nodes and 13 edges in CDG.
It has 163 nodes and 186 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.472906
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/O3/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: cdg.c
Patched function: 1---static int read_header 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s---read_header---before
function id: 0
function flag: True
There are 43 instructions for function: read_header in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '54', 'end': 60}, 'before': {'start': '50', 'end': 55}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_header from assembly files.
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
Patched function: 1---static int read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.s---read_packet---before
function id: 1
function flag: True
There are 48 instructions for function: read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 74}, 'before': {'start': '59', 'end': 64}}}, {'modifyIndex': 2, 'line': {'after': {'start': '76', 'end': 82}, 'before': {'start': '66', 'end': 71}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.o---before
The extraction of function: read_header
Analyzing the binaries to generate subCFGs from patched function ...
It has 21 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 43 instructions in binary file.
[]
The extraction of function: read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 21 nodes and 31 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 48 instructions in binary file.
[4194583, 4194629]
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.181747
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400117>, <DisassemblerInsn "call" for 0x40011c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400138>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "mov" for 0x40013f>, <DisassemblerInsn "jge" for 0x400143>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "cmp" for 0x4000d8>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "jl" for 0x4000df>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000fb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x40014e>, <DisassemblerInsn "add" for 0x400155>, <DisassemblerInsn "ret" for 0x400159>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400126>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "call" for 0x400133>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "and" for 0x40010b>, <DisassemblerInsn "cmp" for 0x40010e>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "je" for 0x400115>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "and" for 0x4000ef>, <DisassemblerInsn "cmp" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "je" for 0x4000f9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 4], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jge~~0x4000fd>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x20], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jl~~0x400145>']}, {'block_Idx': 4, 'blockInsts': ['<jmp~~0x400117>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rcx + 0x24], 0>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~edx, 0x18>', '<call~~0x500018>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400145>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~cl, byte ptr [rcx]>', '<and~~cl, 0x3f>', '<cmp~~cl, 9>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400145>']}], 'cfg_edge_info': [(1, 2), (4, 5), (5, 6), (7, 2), (8, 2), (3, 2), (8, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'read_header': [], 'read_packet': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.o---before
The extraction of function: read_header
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 138 nodes and 149 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The extraction of function: read_packet
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 18 edges in CFGEmulated.
It has 9 nodes and 13 edges in CDG.
It has 163 nodes and 186 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:01.463438
{'read_header': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}], 'read_packet': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/abda15a990527557c20848f6ca2f82eb85e76dc9/clang_before/Os/cdg.o.
{'read_header': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}], 'read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 33, 'instruction': 'callq\tav_free_packet@PLT'}, {'instIndex': 45, 'instruction': 'movl\t$0, 0x24(%rcx)'}, {'instIndex': 46, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 47, 'instruction': 'retq'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': []}]}
The analysis of 16 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/patch_info.txt
{'1': {'before': 'a/libavfilter/avfilter.c', 'after': 'b/libavfilter/avfilter.c'}}
{'1': [{'before': '-201,13', 'after': '+201,14', 'function': 'int avfilter_poll_frame'}, {'before': '-215,7', 'after': '+216,7', 'function': 'void avfilter_start_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4---b/libavfilter/avfilter.c
The case of compiler gcc with optimization no.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/no/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/no/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/no/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O0/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O0/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O0/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O1/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O1/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O1/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O2/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O2/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O2/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O3/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O3/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/O3/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/Os/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/Os/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_after/Os/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization no.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/no/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/no/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/no/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O0/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O0/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O0/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O1/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O1/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O1/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O2/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O2/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O2/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O3/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O3/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/O3/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/Os/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/Os/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_after/Os/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4---a/libavfilter/avfilter.c
The case of compiler gcc with optimization no.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/no/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/no/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/no/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O0/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O0/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O0/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O1/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O1/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O1/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O2/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O2/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O2/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O3/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O3/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/O3/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/Os/avfilter_gcc.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/Os/avfilter_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/gcc_before/Os/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization no.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/no/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/no/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/no/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O0/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O0/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O0/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O1/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O1/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O1/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O2/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O2/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O2/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O3/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O3/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/O3/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: avfilter.c
Patched function: 1---int avfilter_poll_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/Os/avfilter.s
Assembly file does not exist.
Patched function: 1---void avfilter_start_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/Os/avfilter.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/ac8a116e870d44f537c30730e67498ae5f2fd8c4/clang_before/Os/avfilter.o
Binary file does not exist.
{'avfilter_poll_frame': [], 'avfilter_start_frame': []}
The analysis of 17 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/patch_info.txt
{'1': {'before': 'a/libavformat/mxf.c', 'after': 'b/libavformat/mxf.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb---b/libavformat/mxf.c
The case of compiler gcc with optimization no.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/no/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/O0/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/O1/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/O2/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/O3/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_after/Os/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/no/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O0.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/O0/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O1.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/O1/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O2.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/O2/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O3.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/O3/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization Os.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_after/Os/mxf.o
Binary file does not exist.
{}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb---a/libavformat/mxf.c
The case of compiler gcc with optimization no.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/no/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/O0/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/O1/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/O2/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/O3/mxf.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/gcc_before/Os/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/no/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O0.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/O0/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O1.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/O1/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O2.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/O2/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization O3.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/O3/mxf.o
Binary file does not exist.
{}
The case of compiler clang with optimization Os.
Patched source code file: mxf.c
/home/xu/SoftwarePatch/judged/negatives/divided/a/libav.libav/acf36dba185f6dd72709ba8984fe79ac3cd250bb/clang_before/Os/mxf.o
Binary file does not exist.
{}

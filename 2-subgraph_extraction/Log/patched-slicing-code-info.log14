The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9652d4fcfc9c07a726b35efc4ac644d9751b36d7/patch_info.txt
{'1': {'before': 'a/libavcodec/apedec.c', 'after': 'b/libavcodec/apedec.c'}}
{'1': [{'before': '-917,11', 'after': '+917,13', 'function': 'static int ape_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9652d4fcfc9c07a726b35efc4ac644d9751b36d7---b/libavcodec/apedec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9652d4fcfc9c07a726b35efc4ac644d9751b36d7---a/libavcodec/apedec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/95da34cd547dc01167350fd681d97e75ef782296/patch_info.txt
{'1': {'before': 'a/libavcodec/motion_est.c', 'after': 'b/libavcodec/motion_est.c'}}
{'1': [{'before': '-1299,7', 'after': '+1299,8', 'function': 'void ff_estimate_p_frame_motion'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/95da34cd547dc01167350fd681d97e75ef782296---b/libavcodec/motion_est.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/95da34cd547dc01167350fd681d97e75ef782296---a/libavcodec/motion_est.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9786bd4d94a72ce4245398c3067c016852d1fd55/patch_info.txt
{'1': {'before': 'a/libavcodec/rv10.c', 'after': 'b/libavcodec/rv10.c'}, '2': {'before': 'a/libavformat/rm.c', 'after': 'b/libavformat/rm.c'}}
{'1': [{'before': '-440,21', 'after': '+440,23', 'function': 'static int rv20_decode_picture_header'}], '2': [{'before': '-606,7', 'after': '+606,7', 'function': 'static int rm_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9786bd4d94a72ce4245398c3067c016852d1fd55---b/libavcodec/rv10.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9786bd4d94a72ce4245398c3067c016852d1fd55---a/libavcodec/rv10.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9786bd4d94a72ce4245398c3067c016852d1fd55---b/libavformat/rm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9786bd4d94a72ce4245398c3067c016852d1fd55---a/libavformat/rm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/958a2b5d6b05e6e04bc6e7fb0118bfe611eb792c/patch_info.txt
{'1': {'before': 'a/libavcodec/rv34.c', 'after': 'b/libavcodec/rv34.c'}}
{'1': [{'before': '-720,7', 'after': '+720,8', 'function': 'static void rv34_mc_2mv'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/958a2b5d6b05e6e04bc6e7fb0118bfe611eb792c---b/libavcodec/rv34.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/958a2b5d6b05e6e04bc6e7fb0118bfe611eb792c---a/libavcodec/rv34.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9ebb8e11248f85cb9a93aca6e2f91696f0621a89/patch_info.txt
{'1': {'before': 'a/libavcodec/h263.c', 'after': 'b/libavcodec/h263.c'}, '2': {'before': 'a/libavcodec/mpegvideo.c', 'after': 'b/libavcodec/mpegvideo.c'}}
{'1': [{'before': '-2112,11', 'after': '+2112,13', 'function': 'void ff_set_mpeg4_time'}], '2': [{'before': '-902,6', 'after': '+902,7', 'function': 'int MPV_encode_init'}, {'before': '-1962,16', 'after': '+1963,26', 'function': 'static int load_input_picture'}, {'before': '-2139,7', 'after': '+2150,8', 'function': 'int MPV_encode_picture'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9ebb8e11248f85cb9a93aca6e2f91696f0621a89---b/libavcodec/h263.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9ebb8e11248f85cb9a93aca6e2f91696f0621a89---a/libavcodec/h263.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9ebb8e11248f85cb9a93aca6e2f91696f0621a89---b/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9ebb8e11248f85cb9a93aca6e2f91696f0621a89---a/libavcodec/mpegvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/99180fe39d9a65eb803718a8f6004a11231bc734/patch_info.txt
{'1': {'before': 'a/libavcodec/msmpeg4.c', 'after': 'b/libavcodec/msmpeg4.c'}}
{'1': [{'before': '-868,9', 'after': '+868,10', 'function': 'static int msmpeg4_decode_block'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/99180fe39d9a65eb803718a8f6004a11231bc734---b/libavcodec/msmpeg4.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/99180fe39d9a65eb803718a8f6004a11231bc734---a/libavcodec/msmpeg4.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9c6b3b97d740465aee7526ddf77b3eea95a2957c/patch_info.txt
{'1': {'before': 'a/libavcodec/indeo5.c', 'after': 'b/libavcodec/indeo5.c'}, '2': {'before': 'a/libavcodec/ivi_common.c', 'after': 'b/libavcodec/ivi_common.c'}}
{'1': [{'before': '-185,25', 'after': '+185,25', 'function': 'static int decode_gop_header'}], '2': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9c6b3b97d740465aee7526ddf77b3eea95a2957c---b/libavcodec/indeo5.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9c6b3b97d740465aee7526ddf77b3eea95a2957c---a/libavcodec/indeo5.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9c6b3b97d740465aee7526ddf77b3eea95a2957c---b/libavcodec/ivi_common.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9c6b3b97d740465aee7526ddf77b3eea95a2957c---a/libavcodec/ivi_common.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/patch_info.txt
{'1': {'before': 'a/libavformat/output-example.c', 'after': 'b/libavformat/output-example.c'}}
{'1': [{'before': '-464,8', 'after': '+464,6', 'function': 'int main'}, {'before': '-473,6', 'after': '+471,8', 'function': 'int main'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4---b/libavformat/output-example.c
The case of compiler gcc with optimization no.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4---a/libavformat/output-example.c
The case of compiler gcc with optimization no.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: output-example.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/93f6d0475fcf6ad6e94a486eb8f40827e4b9bfa4/clang_before/Os: directory not exists.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97cda76a69afe59dae6168f8bf13a9170343d380/patch_info.txt
{'1': {'before': 'a/libswscale/utils.c', 'after': 'b/libswscale/utils.c'}}
{'1': [{'before': '-968,6', 'after': '+968,8', 'function': 'SwsContext *sws_getContext'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97cda76a69afe59dae6168f8bf13a9170343d380---b/libswscale/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97cda76a69afe59dae6168f8bf13a9170343d380---a/libswscale/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b8c8a9395c849639aea0f6b5300e991e93c3a73/patch_info.txt
{'1': {'before': 'a/libavcodec/svq1dec.c', 'after': 'b/libavcodec/svq1dec.c'}}
{'1': [{'before': '-191,7', 'after': '+191,7', 'function': 'static int svq1_decode_block_intra'}, {'before': '-253,7', 'after': '+253,7', 'function': 'static int svq1_decode_block_non_intra'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b8c8a9395c849639aea0f6b5300e991e93c3a73---b/libavcodec/svq1dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b8c8a9395c849639aea0f6b5300e991e93c3a73---a/libavcodec/svq1dec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9dd94f8379a0f7b3c820bf73c45fa888971c7432/patch_info.txt
{'1': {'before': 'a/libavformat/mov.c', 'after': 'b/libavformat/mov.c'}}
{'1': [{'before': '-1553,7', 'after': '+1553,7', 'function': 'static void mov_build_index'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9dd94f8379a0f7b3c820bf73c45fa888971c7432---b/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9dd94f8379a0f7b3c820bf73c45fa888971c7432---a/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94e58e5770d2a2295a13240f51ddba583e6d5360/patch_info.txt
{'1': {'before': 'a/libavcodec/mmvideo.c', 'after': 'b/libavcodec/mmvideo.c'}}
{'1': [{'before': '-90,6', 'after': '+90,9', 'function': 'static void mm_decode_intra'}, {'before': '-138,6', 'after': '+141,9', 'function': 'static void mm_decode_inter'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94e58e5770d2a2295a13240f51ddba583e6d5360---b/libavcodec/mmvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94e58e5770d2a2295a13240f51ddba583e6d5360---a/libavcodec/mmvideo.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e42e70cd668f26c44584058f7794b5c5bba401c/patch_info.txt
{'1': {'before': 'a/libavcodec/indeo3.c', 'after': 'b/libavcodec/indeo3.c'}}
{'1': [{'before': '-463,10', 'after': '+463,11', 'function': 'static void iv_Decode_Chunk'}, {'before': '-570,7', 'after': '+571,7', 'function': 'static void iv_Decode_Chunk'}, {'before': '-579,6', 'after': '+580,7', 'function': 'static void iv_Decode_Chunk'}, {'before': '-702,7', 'after': '+704,7', 'function': 'static void iv_Decode_Chunk'}, {'before': '-711,6', 'after': '+713,7', 'function': 'static void iv_Decode_Chunk'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e42e70cd668f26c44584058f7794b5c5bba401c---b/libavcodec/indeo3.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e42e70cd668f26c44584058f7794b5c5bba401c---a/libavcodec/indeo3.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/985180a1b85b366dc649fe1334ed27ac1941644f/patch_info.txt
{'1': {'before': 'a/libavcodec/utils.c', 'after': 'b/libavcodec/utils.c'}}
{'1': [{'before': '-523,6', 'after': '+523,10', 'function': 'void avcodec_string'}, {'before': '-605,6', 'after': '+609,10', 'function': 'void avcodec_string'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/985180a1b85b366dc649fe1334ed27ac1941644f---b/libavcodec/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/985180a1b85b366dc649fe1334ed27ac1941644f---a/libavcodec/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/patch_info.txt
{'1': {'before': 'a/libavcodec/h264.c', 'after': 'b/libavcodec/h264.c'}}
{'1': [{'before': '-8341,6', 'after': '+8341,9', 'function': 'static int decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a---b/libavcodec/h264.c
The case of compiler gcc with optimization no.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a---a/libavcodec/h264.c
The case of compiler gcc with optimization no.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9170e34537bd31f0abadee874ed28a855a6a619a/clang_before/Os: directory not exists.
The analysis of 16 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/patch_info.txt
{'1': {'before': 'a/libavcodec/mpegvideo_enc.c', 'after': 'b/libavcodec/mpegvideo_enc.c'}}
{'1': [{'before': '-395,6', 'after': '+395,14', 'function': 'av_cold int MPV_encode_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189---b/libavcodec/mpegvideo_enc.c
The case of compiler gcc with optimization no.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/no/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/no/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O0.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O0/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O0/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O1.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O1/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O1/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O2.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O2/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O2/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O3.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O3/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/O3/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization Os.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/Os/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_after/Os/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization no.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/no/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/no/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O0.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O0/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O0/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O1.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O1/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O1/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O2.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O2/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O2/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O3.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O3/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/O3/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization Os.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/Os/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_after/Os/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189---a/libavcodec/mpegvideo_enc.c
The case of compiler gcc with optimization no.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/no/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/no/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O0.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O0/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O0/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O1.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O1/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O1/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O2.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O2/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O2/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization O3.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O3/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/O3/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler gcc with optimization Os.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/Os/mpegvideo_enc_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/gcc_before/Os/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization no.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/no/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/no/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O0.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O0/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O0/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O1.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O1/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O1/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O2.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O2/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O2/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization O3.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O3/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/O3/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The case of compiler clang with optimization Os.
Patched source code file: mpegvideo_enc.c
Patched function: 1---av_cold int MPV_encode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/Os/mpegvideo_enc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/954a0b482a1463f0c2fa3edb758568e049585189/clang_before/Os/mpegvideo_enc.o
Binary file does not exist.
{'MPV_encode_init': []}
The analysis of 17 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/patch_info.txt
{'1': {'before': 'a/libavcodec/utils.c', 'after': 'b/libavcodec/utils.c'}}
{'1': [{'before': '-714,6', 'after': '+714,12', 'function': 'int attribute_align_arg avcodec_open2'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95---b/libavcodec/utils.c
The case of compiler gcc with optimization no.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/no/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/no/utils_gcc.s---avcodec_open2---after
function id: 111
function flag: True
There are 619 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movl\t0x100(%rax), %eax'}, {'instIndex': 293, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movl\t0x2c(%rax), %eax'}, {'instIndex': 297, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 298, 'instruction': 'je\t.L203'}, {'instIndex': 299, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 300, 'instruction': 'movl\t0x30(%rax), %eax'}, {'instIndex': 301, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 302, 'instruction': 'jne\t.L202'}, {'instIndex': 303, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 304, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 305, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 306, 'instruction': 'movl\t0x50(%rax), %edx'}, {'instIndex': 307, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 308, 'instruction': 'movl\t%edx, 0x30(%rax)'}, {'instIndex': 309, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 310, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 311, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 312, 'instruction': 'jne\t.L204'}, {'instIndex': 313, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 314, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 315, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 317, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 318, 'instruction': 'js\t.L236'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/no/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movl\t0x100(%rax), %eax'}, {'instIndex': 293, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movl\t0x2c(%rax), %eax'}, {'instIndex': 297, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 298, 'instruction': 'je\t.L203'}, {'instIndex': 299, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 300, 'instruction': 'movl\t0x30(%rax), %eax'}, {'instIndex': 301, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 302, 'instruction': 'jne\t.L202'}, {'instIndex': 303, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 304, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 305, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 306, 'instruction': 'movl\t0x50(%rax), %edx'}, {'instIndex': 307, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 308, 'instruction': 'movl\t%edx, 0x30(%rax)'}, {'instIndex': 309, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 310, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 311, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 312, 'instruction': 'jne\t.L204'}, {'instIndex': 313, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 314, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 315, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 317, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 318, 'instruction': 'js\t.L236'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O0/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O0/utils_gcc.s---avcodec_open2---after
function id: 111
function flag: True
There are 619 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movl\t0x100(%rax), %eax'}, {'instIndex': 293, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movl\t0x2c(%rax), %eax'}, {'instIndex': 297, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 298, 'instruction': 'je\t.L203'}, {'instIndex': 299, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 300, 'instruction': 'movl\t0x30(%rax), %eax'}, {'instIndex': 301, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 302, 'instruction': 'jne\t.L202'}, {'instIndex': 303, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 304, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 305, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 306, 'instruction': 'movl\t0x50(%rax), %edx'}, {'instIndex': 307, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 308, 'instruction': 'movl\t%edx, 0x30(%rax)'}, {'instIndex': 309, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 310, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 311, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 312, 'instruction': 'jne\t.L204'}, {'instIndex': 313, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 314, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 315, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 317, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 318, 'instruction': 'js\t.L236'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O0/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movl\t0x100(%rax), %eax'}, {'instIndex': 293, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movl\t0x2c(%rax), %eax'}, {'instIndex': 297, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 298, 'instruction': 'je\t.L203'}, {'instIndex': 299, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 300, 'instruction': 'movl\t0x30(%rax), %eax'}, {'instIndex': 301, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 302, 'instruction': 'jne\t.L202'}, {'instIndex': 303, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 304, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 305, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 306, 'instruction': 'movl\t0x50(%rax), %edx'}, {'instIndex': 307, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 308, 'instruction': 'movl\t%edx, 0x30(%rax)'}, {'instIndex': 309, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 310, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 311, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 312, 'instruction': 'jne\t.L204'}, {'instIndex': 313, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 314, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 315, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 317, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 318, 'instruction': 'js\t.L236'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O1/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O1/utils_gcc.s---avcodec_open2---after
function id: 222
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O1/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler gcc with optimization O2.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O2/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O2/utils_gcc.s---avcodec_open2---after
function id: 193
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O2/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler gcc with optimization O3.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O3/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O3/utils_gcc.s---avcodec_open2---after
function id: 161
function flag: True
There are 967 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 210, 'instruction': 'movl\t$0, 0x60(%rbp)'}, {'instIndex': 211, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 212, 'instruction': 'je\t.L278'}, {'instIndex': 213, 'instruction': 'cmpq\t$0, 0x2d8(%rbp)'}, {'instIndex': 214, 'instruction': 'je\t.L279'}, {'instIndex': 306, 'instruction': 'movl\t0x2c(%rbp), %ecx'}, {'instIndex': 307, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 308, 'instruction': 'je\t.L189'}, {'instIndex': 309, 'instruction': 'movl\t0x30(%rbp), %edx'}, {'instIndex': 310, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 311, 'instruction': 'jne\t.L188'}, {'instIndex': 312, 'instruction': 'movl\t0x50(%rbp), %eax'}, {'instIndex': 313, 'instruction': 'movl\t$1, 0x2c(%rbp)'}, {'instIndex': 314, 'instruction': 'movl\t%eax, 0x30(%rbp)'}, {'instIndex': 315, 'instruction': 'jmp\t.L188'}, {'instIndex': 328, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 329, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 330, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 331, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 332, 'instruction': 'js\t.L172'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/O3/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 210, 'instruction': 'movl\t$0, 0x60(%rbp)'}, {'instIndex': 211, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 212, 'instruction': 'je\t.L278'}, {'instIndex': 213, 'instruction': 'cmpq\t$0, 0x2d8(%rbp)'}, {'instIndex': 214, 'instruction': 'je\t.L279'}, {'instIndex': 306, 'instruction': 'movl\t0x2c(%rbp), %ecx'}, {'instIndex': 307, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 308, 'instruction': 'je\t.L189'}, {'instIndex': 309, 'instruction': 'movl\t0x30(%rbp), %edx'}, {'instIndex': 310, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 311, 'instruction': 'jne\t.L188'}, {'instIndex': 312, 'instruction': 'movl\t0x50(%rbp), %eax'}, {'instIndex': 313, 'instruction': 'movl\t$1, 0x2c(%rbp)'}, {'instIndex': 314, 'instruction': 'movl\t%eax, 0x30(%rbp)'}, {'instIndex': 315, 'instruction': 'jmp\t.L188'}, {'instIndex': 328, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 329, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 330, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 331, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 332, 'instruction': 'js\t.L172'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/Os/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/Os/utils_gcc.s---avcodec_open2---after
function id: 180
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_after/Os/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler clang with optimization no.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/no/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/no/utils.s---avcodec_open2---after
function id: 20
function flag: True
There are 517 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpl\t$1, 0x100(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 247, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 248, 'instruction': 'je\t.LBB20_61'}, {'instIndex': 249, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 250, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 251, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 252, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 253, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 254, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 255, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 256, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 257, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 258, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 259, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 260, 'instruction': 'jne\t.LBB20_66'}, {'instIndex': 261, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 262, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 263, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 264, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 265, 'instruction': 'jge\t.LBB20_65'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/no/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/no/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 1200 nodes and 1986 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 517 instructions in binary file.
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
The execution time of patched subCFG information extraction via angr: 0:00:02.012662
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402036>, <DisassemblerInsn "jne" for 0x40203a>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "cmp" for 0x40202b>, <DisassemblerInsn "je" for 0x40202f>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "mov" for 0x402088>, <DisassemblerInsn "movzx" for 0x40208f>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "cmp" for 0x40209b>, <DisassemblerInsn "jge" for 0x4020a1>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402071>, <DisassemblerInsn "cmp" for 0x402075>, <DisassemblerInsn "jge" for 0x40207a>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402067>, <DisassemblerInsn "call" for 0x40206c>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402081>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402050>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402024>]'}], 'cfg_block_detailed_info': [{'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402058>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x40203c>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x4020db>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402081>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 91, 'blockInsts': ['<jmp~~0x402083>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x2c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 1>', '<jne~~0x402058>']}], 'cfg_edge_info': [(79, 78), (78, 81), (87, 90), (81, 84), (76, 78), (85, 87), (87, 91), (82, 86), (84, 83), (83, 86), (82, 85), (78, 82), (81, 83), (84, 82), (83, 85)]}]}
{'avcodec_open2': [4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/no/utils.o---after
The extraction of function: avcodec_open2
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 182 nodes and 284 edges in CFGEmulated.
It has 182 nodes and 379 edges in CDG.
It has 2140 nodes and 3296 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
{4203008, 4203524, 4203526, 4203016, 4202508, 4202002, 4201494, 4203545, 4202013, 4203043, 4202534, 4202024, 4203564, 4202545, 4201522, 4201527, 4202556, 4202050, 4203587, 4201540, 4202052, 4201542, 4203081, 4203598, 4203600, 4203602, 4203604, 4203094, 4202584, 4202080, 4202599, 4202091, 4203629, 4202609, 4203121, 4202102, 4202620, 4203647, 4202625, 4202627, 4203655, 4203145, 4203665, 4203158, 4203160, 4202136, 4202141, 4203678, 4202659, 4203688, 4203183, 4203698, 4202169, 4203198, 4202174, 4203715, 4202702, 4203732, 4202198, 4202715, 4203227, 4201694, 4203235, 4202212, 4203753, 4201709, 4202746, 4202236, 4203263, 4201738, 4202764, 4202267, 4202784, 4202792, 4203306, 4202284, 4203319, 4202810, 4202298, 4202311, 4202833, 4203347, 4202841, 4202342, 4203371, 4201842, 4202868, 4203384, 4203386, 4202363, 4203388, 4201857, 4202377, 4203403, 4203414, 4201879, 4202906, 4201888, 4201893, 4202919, 4203431, 4202415, 4201392, 4203441, 4201911, 4202946, 4202436, 4201926, 4203465, 4201935, 4201940, 4203478, 4203480, 4202457, 4202970, 4201439, 4201954, 4202471, 4202983, 4202985, 4203495, 4201453, 4203512, 4201466, 4202495}
[118, 35, 31, 28, 106, 99, 11, 81, 152, 132, 19, 173, 20, 2, 29, 6, 32, 65, 85, 82, 155, 162, 165, 39, 154, 13, 33, 127, 62, 22, 149, 3, 7, 144, 0, 145, 164, 169, 16, 116, 100, 97, 159, 4, 176, 36, 141, 140, 166, 92, 45, 1, 70, 83, 21, 125, 179, 163, 46, 43, 178, 115, 124, 114, 77, 71, 121, 74, 55, 120, 58, 128, 72, 133, 52, 170, 160, 67, 75, 105, 24, 129, 89, 175, 44, 90, 37, 111, 95, 10, 27, 171, 142, 134, 84, 158, 42, 109, 8, 123, 101, 48, 38, 103, 112, 130, 122, 131, 98, 147, 17, 51, 138, 76, 107, 119, 73, 66, 146, 25, 135, 53, 94, 88, 87, 181, 117, 161, 113, 50, 93, 153, 5, 23, 150, 136, 126, 56, 180, 80, 91, 167, 63, 57, 172, 139, 110, 177, 40, 102, 137]
The execution time of patched slicing information extraction via angr: 0:00:19.958978
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402452>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cfc>, <DisassemblerInsn "movsxd" for 0x401d01>, <DisassemblerInsn "call" for 0x401d05>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ced>, <DisassemblerInsn "cmp" for 0x401cf2>, <DisassemblerInsn "jne" for 0x401cfa>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e7>, <DisassemblerInsn "xor" for 0x4020ec>, <DisassemblerInsn "cmp" for 0x4020ee>, <DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "je" for 0x4020f8>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "jmp" for 0x402007>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c65>, <DisassemblerInsn "lea" for 0x401c6a>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "call" for 0x401c73>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "add" for 0x401f20>, <DisassemblerInsn "call" for 0x401f27>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "jmp" for 0x402254>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021e7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40247f>, <DisassemblerInsn "je" for 0x402485>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022e3>, <DisassemblerInsn "mov" for 0x4022e8>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "movsxd" for 0x4022f3>, <DisassemblerInsn "cmp" for 0x4022f8>, <DisassemblerInsn "je" for 0x4022fd>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40246d>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "call" for 0x402479>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdf>, <DisassemblerInsn "cmp" for 0x401be4>, <DisassemblerInsn "jl" for 0x401beb>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402491>, <DisassemblerInsn "mov" for 0x402496>, <DisassemblerInsn "mov" for 0x40249b>, <DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "jmp" for 0x4024a6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c07>, <DisassemblerInsn "lea" for 0x401c0a>, <DisassemblerInsn "xor" for 0x401c0f>, <DisassemblerInsn "call" for 0x401c11>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d72>, <DisassemblerInsn "cmp" for 0x401d77>, <DisassemblerInsn "je" for 0x401d7f>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e10>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "jmp" for 0x401f42>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "xor" for 0x401edb>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "call" for 0x401edf>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402404>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402328>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "mov" for 0x4023fa>, <DisassemblerInsn "mov" for 0x4023ff>, <DisassemblerInsn "jmp" for 0x402402>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0d>, <DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "mov" for 0x401d19>, <DisassemblerInsn "cmp" for 0x401d1e>, <DisassemblerInsn "jne" for 0x401d26>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "movsxd" for 0x402169>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "je" for 0x402172>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9c>, <DisassemblerInsn "jmp" for 0x401ca4>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc6>, <DisassemblerInsn "cmp" for 0x401dca>, <DisassemblerInsn "jge" for 0x401dcd>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40237c>, <DisassemblerInsn "cmp" for 0x402381>, <DisassemblerInsn "je" for 0x402389>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e57>, <DisassemblerInsn "jne" for 0x401e5e>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "jmp" for 0x4024a6>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402337>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "movsxd" for 0x402347>, <DisassemblerInsn "cmp" for 0x40234c>, <DisassemblerInsn "jne" for 0x402351>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024e9>, <DisassemblerInsn "add" for 0x4024ed>, <DisassemblerInsn "ret" for 0x4024f1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "add" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c55>, <DisassemblerInsn "cmp" for 0x401c5b>, <DisassemblerInsn "je" for 0x401c5e>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219a>, <DisassemblerInsn "add" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a1>, <DisassemblerInsn "jmp" for 0x4021a5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbe>, <DisassemblerInsn "mov" for 0x401bc3>, <DisassemblerInsn "mov" for 0x401bcb>, <DisassemblerInsn "mov" for 0x401bd4>, <DisassemblerInsn "cmp" for 0x401bd9>, <DisassemblerInsn "jl" for 0x401bdd>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402402>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "mov" for 0x40220d>, <DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "movsxd" for 0x402218>, <DisassemblerInsn "cmp" for 0x40221d>, <DisassemblerInsn "je" for 0x402221>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232a>, <DisassemblerInsn "add" for 0x40232e>, <DisassemblerInsn "mov" for 0x402331>, <DisassemblerInsn "jmp" for 0x402335>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402454>, <DisassemblerInsn "add" for 0x40245a>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "cmp" for 0x402463>, <DisassemblerInsn "je" for 0x40246b>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "cmp" for 0x402111>, <DisassemblerInsn "setne" for 0x402119>, <DisassemblerInsn "mov" for 0x40211c>, <DisassemblerInsn "mov" for 0x402120>, <DisassemblerInsn "mov" for 0x402124>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402050>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "cmp" for 0x40202b>, <DisassemblerInsn "je" for 0x40202f>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402353>, <DisassemblerInsn "mov" for 0x402358>, <DisassemblerInsn "lea" for 0x40235d>, <DisassemblerInsn "mov" for 0x402364>, <DisassemblerInsn "call" for 0x402366>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401bfa>, <DisassemblerInsn "je" for 0x401c00>]'}, {'block_Idx': 176, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c32>, <DisassemblerInsn "je" for 0x401c35>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "lea" for 0x401d8d>, <DisassemblerInsn "call" for 0x401d92>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402245>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402296>]'}, {'block_Idx': 166, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "cmp" for 0x4023ac>, <DisassemblerInsn "je" for 0x4023af>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "jmp" for 0x401d30>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "jmp" for 0x401bf5>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "cmp" for 0x401e70>, <DisassemblerInsn "je" for 0x401e74>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "jge" for 0x401ebc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "mov" for 0x401cb6>, <DisassemblerInsn "mov" for 0x401cbb>, <DisassemblerInsn "mov" for 0x401cc2>, <DisassemblerInsn "cmp" for 0x401cc7>, <DisassemblerInsn "jne" for 0x401ccf>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021ac>, <DisassemblerInsn "mov" for 0x4021b3>, <DisassemblerInsn "movsxd" for 0x4021b7>, <DisassemblerInsn "cmp" for 0x4021bc>, <DisassemblerInsn "jne" for 0x4021c0>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402443>, <DisassemblerInsn "cmp" for 0x402447>, <DisassemblerInsn "jge" for 0x40244c>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402289>, <DisassemblerInsn "jmp" for 0x402291>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "cmp" for 0x401d3a>, <DisassemblerInsn "je" for 0x401d42>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "cmp" for 0x401e17>, <DisassemblerInsn "je" for 0x401e1b>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "jmp" for 0x401c3f>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213a>, <DisassemblerInsn "mov" for 0x40213f>, <DisassemblerInsn "cmp" for 0x402146>, <DisassemblerInsn "je" for 0x40214b>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402200>, <DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "mov" for 0x40220d>, <DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "movsxd" for 0x402218>, <DisassemblerInsn "cmp" for 0x40221d>, <DisassemblerInsn "je" for 0x402221>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402406>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "cmp" for 0x402412>, <DisassemblerInsn "je" for 0x402417>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "cmp" for 0x401f01>, <DisassemblerInsn "setne" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401e98>, <DisassemblerInsn "jl" for 0x401e9b>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "movsxd" for 0x402169>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "je" for 0x402172>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "lea" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "call" for 0x401ed1>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da0>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e9>, <DisassemblerInsn "mov" for 0x4021ee>, <DisassemblerInsn "cmp" for 0x4021f5>, <DisassemblerInsn "je" for 0x4021fa>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "call" for 0x401e3d>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "cmp" for 0x4022b4>, <DisassemblerInsn "jne" for 0x4022bc>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024d4>, <DisassemblerInsn "mov" for 0x4024d9>, <DisassemblerInsn "jmp" for 0x4024e4>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402196>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df5>, <DisassemblerInsn "mov" for 0x401dfa>, <DisassemblerInsn "mov" for 0x401e00>, <DisassemblerInsn "mov" for 0x401e05>, <DisassemblerInsn "call" for 0x401e0b>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023d6>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402378>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e65>, <DisassemblerInsn "jne" for 0x401e69>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9d>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "mov" for 0x401ead>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "call" for 0x401eb4>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a3>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "mov" for 0x4020ad>, <DisassemblerInsn "movzx" for 0x4020b4>, <DisassemblerInsn "mov" for 0x4020bb>, <DisassemblerInsn "lea" for 0x4020c0>, <DisassemblerInsn "mov" for 0x4020c7>, <DisassemblerInsn "call" for 0x4020c9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd1>, <DisassemblerInsn "jmp" for 0x401cd9>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225b>, <DisassemblerInsn "mov" for 0x402262>, <DisassemblerInsn "movsxd" for 0x402266>, <DisassemblerInsn "cmp" for 0x40226b>, <DisassemblerInsn "jne" for 0x40226f>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f71>, <DisassemblerInsn "cmp" for 0x401f76>, <DisassemblerInsn "jne" for 0x401f79>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "jmp" for 0x4023d1>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "cmp" for 0x401de7>, <DisassemblerInsn "je" for 0x401dee>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dcf>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c85>, <DisassemblerInsn "cmp" for 0x401c8a>, <DisassemblerInsn "jne" for 0x401c92>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "mov" for 0x4023b6>, <DisassemblerInsn "lea" for 0x4023bb>, <DisassemblerInsn "mov" for 0x4023c2>, <DisassemblerInsn "call" for 0x4023c4>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402247>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402198>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "cmp" for 0x401f5d>, <DisassemblerInsn "je" for 0x401f64>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022d6>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4024a8>, <DisassemblerInsn "call" for 0x4024ad>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "call" for 0x401c2c>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402298>, <DisassemblerInsn "mov" for 0x40229d>, <DisassemblerInsn "cmp" for 0x4022a4>, <DisassemblerInsn "je" for 0x4022a9>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402036>, <DisassemblerInsn "jne" for 0x40203a>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "cmp" for 0x401d9b>, <DisassemblerInsn "jge" for 0x401d9e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd4>, <DisassemblerInsn "cmp" for 0x401dd9>, <DisassemblerInsn "je" for 0x401de0>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "mov" for 0x402088>, <DisassemblerInsn "movzx" for 0x40208f>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "cmp" for 0x40209b>, <DisassemblerInsn "jge" for 0x4020a1>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402081>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402223>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222b>, <DisassemblerInsn "mov" for 0x402230>, <DisassemblerInsn "mov" for 0x402237>, <DisassemblerInsn "movsxd" for 0x40223b>, <DisassemblerInsn "cmp" for 0x402240>, <DisassemblerInsn "jne" for 0x402243>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40242c>, <DisassemblerInsn "mov" for 0x402431>, <DisassemblerInsn "mov" for 0x402438>, <DisassemblerInsn "mov" for 0x40243c>, <DisassemblerInsn "call" for 0x402441>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c2>, <DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "lea" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "call" for 0x4021d5>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "call" for 0x4023a2>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1d>, <DisassemblerInsn "cmp" for 0x401e22>, <DisassemblerInsn "je" for 0x401e26>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022db>, <DisassemblerInsn "mov" for 0x4022e3>, <DisassemblerInsn "mov" for 0x4022e8>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "movsxd" for 0x4022f3>, <DisassemblerInsn "cmp" for 0x4022f8>, <DisassemblerInsn "je" for 0x4022fd>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402071>, <DisassemblerInsn "cmp" for 0x402075>, <DisassemblerInsn "jge" for 0x40207a>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402419>, <DisassemblerInsn "mov" for 0x40241e>, <DisassemblerInsn "and" for 0x402424>, <DisassemblerInsn "cmp" for 0x402427>, <DisassemblerInsn "jne" for 0x40242a>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "xor" for 0x401eee>, <DisassemblerInsn "cmp" for 0x401ef0>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "je" for 0x401efa>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c3>, <DisassemblerInsn "add" for 0x4024c8>, <DisassemblerInsn "call" for 0x4024cf>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e7>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "call" for 0x4023f3>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cde>, <DisassemblerInsn "cmp" for 0x401ce3>, <DisassemblerInsn "jle" for 0x401ce7>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d8>, <DisassemblerInsn "cmp" for 0x4023dd>, <DisassemblerInsn "je" for 0x4023e5>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d70>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402024>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "cmp" for 0x401f80>, <DisassemblerInsn "jne" for 0x401f87>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "xor" for 0x40028b>, <DisassemblerInsn "sub" for 0x40028d>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "sar" for 0x40029c>, <DisassemblerInsn "xor" for 0x40029e>, <DisassemblerInsn "sub" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "xor" for 0x4002aa>, <DisassemblerInsn "sub" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "sar" for 0x4002bb>, <DisassemblerInsn "xor" for 0x4002bd>, <DisassemblerInsn "sub" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "ret" for 0x4002c9>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402450>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402120>, <DisassemblerInsn "mov" for 0x402124>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402326>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "jmp" for 0x4020d6>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e42>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fec>, <DisassemblerInsn "lea" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "call" for 0x401ffa>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "jmp" for 0x4021e2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c16>, <DisassemblerInsn "je" for 0x401c1e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402487>, <DisassemblerInsn "call" for 0x40248c>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402304>, <DisassemblerInsn "mov" for 0x40230b>, <DisassemblerInsn "mov" for 0x402310>, <DisassemblerInsn "mov" for 0x402317>, <DisassemblerInsn "movsxd" for 0x40231b>, <DisassemblerInsn "cmp" for 0x402320>, <DisassemblerInsn "jne" for 0x402324>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "cmp" for 0x402390>, <DisassemblerInsn "je" for 0x402394>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402174>, <DisassemblerInsn "mov" for 0x402179>, <DisassemblerInsn "mov" for 0x40217c>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402188>, <DisassemblerInsn "movsxd" for 0x40218c>, <DisassemblerInsn "cmp" for 0x402191>, <DisassemblerInsn "jne" for 0x402194>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b2>, <DisassemblerInsn "add" for 0x4024b7>, <DisassemblerInsn "call" for 0x4024be>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40244e>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "jbe" for 0x401f38>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40237a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "xor" for 0x401e91>, <DisassemblerInsn "call" for 0x401e93>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "cmp" for 0x401e49>, <DisassemblerInsn "jne" for 0x401e50>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "jmp" for 0x402373>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402276>, <DisassemblerInsn "lea" for 0x40227b>, <DisassemblerInsn "mov" for 0x402282>, <DisassemblerInsn "call" for 0x402284>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "cmp" for 0x402101>, <DisassemblerInsn "mov" for 0x402106>, <DisassemblerInsn "jne" for 0x40210a>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c44>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402067>, <DisassemblerInsn "call" for 0x40206c>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022be>, <DisassemblerInsn "mov" for 0x4022c3>, <DisassemblerInsn "lea" for 0x4022c8>, <DisassemblerInsn "mov" for 0x4022cf>, <DisassemblerInsn "call" for 0x4022d1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 118, 'blockInsts': ['<jmp~~0x402454>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x401db7>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rdi, dword ptr [rax + 0x10]>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d72>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x40], 0>', '<mov~~byte ptr [rsp + 2], al>', '<je~~0x402128>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x39c5]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402208>']}, {'block_Idx': 132, 'blockInsts': ['<jmp~~0x4021e9>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x40249e>']}, {'block_Idx': 173, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x402337>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rdi, [rip + 0x3164]>', '<mov~~esi, 2>', '<call~~qword ptr [rip + 0x3151]>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0xffffff8>', '<jl~~0x401bfa>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024e9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 8]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401da5>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<mov~~esi, edx>', '<call~~0x400260>']}, {'block_Idx': 155, 'blockInsts': ['<jmp~~0x402406>']}, {'block_Idx': 162, 'blockInsts': ['<jmp~~0x40232a>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<jmp~~0x402404>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d35>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x4021a7>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402454>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401dd4>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x4023d8>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x401e76>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024e9>']}, {'block_Idx': 149, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<jne~~0x402378>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3994]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x398b], eax>', '<mov~~eax, dword ptr [rip + 0x3985]>', '<cmp~~eax, 1>', '<je~~0x401c85>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402159>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~qword ptr [rsp + 0x18], rdx>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jl~~0x401bed>']}, {'block_Idx': 145, 'blockInsts': ['<jmp~~0x402404>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402256>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4022e3>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3186]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x317d], eax>', '<cmp~~qword ptr [rip + 0x3165], 0>', '<je~~0x40247f>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 1], al>', '<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x2c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x40203c>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33f9]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x401c16>']}, {'block_Idx': 176, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401c44>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x98]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x402256>']}, {'block_Idx': 140, 'blockInsts': ['<jmp~~0x402298>']}, {'block_Idx': 166, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<je~~0x4023d6>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402454>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x4024e9>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401ee4>']}, {'block_Idx': 83, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x401ee4>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x428], 0>', '<jne~~0x401cde>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<jne~~0x4021e7>']}, {'block_Idx': 179, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402450>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401d70>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<je~~0x401e42>']}, {'block_Idx': 178, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x4024e9>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x70], 0>', '<je~~0x4021e9>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402256>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x402452>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401ebe>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x4021a7>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x37a0]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x68], 0>', '<je~~0x402298>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x38]>', '<call~~0x400260>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<jne~~0x4022db>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], 0>', '<jmp~~0x402454>']}, {'block_Idx': 133, 'blockInsts': ['<jmp~~0x4021a7>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x308]>', '<call~~0x400260>']}, {'block_Idx': 170, 'blockInsts': ['<jmp~~0x402404>']}, {'block_Idx': 160, 'blockInsts': ['<jmp~~0x40237a>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x401e76>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~ecx, byte ptr [rax + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35eb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402454>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<jne~~0x402296>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x401faf>']}, {'block_Idx': 175, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<je~~0x401e12>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x100], ecx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x104], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 111, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x90], 0>', '<jne~~0x401c9c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], 0>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33c6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 142, 'blockInsts': ['<jmp~~0x402249>']}, {'block_Idx': 134, 'blockInsts': ['<jmp~~0x40219a>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], -1>', '<je~~0x401f7b>']}, {'block_Idx': 158, 'blockInsts': ['<jmp~~0x40237a>']}, {'block_Idx': 42, 'blockInsts': ['<lea~~rdi, [rsp + 8]>', '<call~~0x5000d0>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x39b1]>', '<mov~~esi, 1>', '<call~~qword ptr [rip + 0x399e]>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x40237c>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402058>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401da5>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<je~~0x401e12>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x4020db>']}, {'block_Idx': 112, 'blockInsts': ['<jmp~~0x402083>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x68]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402247>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x351c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffff>', '<jmp~~0x402454>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401e42>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x402337>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402081>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x404]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<jne~~0x402452>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x38], 0>', '<mov~~byte ptr [rsp + 3], al>', '<je~~0x401f0d>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x428>', '<call~~0x500060>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jle~~0x401da7>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x402402>']}, {'block_Idx': 53, 'blockInsts': ['<jmp~~0x401d72>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 1>', '<jne~~0x402058>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x401faf>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x304], ecx>', '<mov~~ecx, dword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x308], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0xc]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x34], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x38], ecx>', '<ret~~>']}, {'block_Idx': 181, 'blockInsts': ['<jmp~~0x402452>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 161, 'blockInsts': ['<jmp~~0x402337>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x369d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 5, 'blockInsts': ['<cmp~~qword ptr [rip + 0x39b2], 0>', '<je~~0x401c46>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x5000d0>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x78]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~rax, qword ptr [rcx + rdx*8]>', '<jne~~0x402328>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x4023d8>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x70]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402198>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 180, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0x80>', '<jbe~~0x401f47>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 167, 'blockInsts': ['<jmp~~0x40237c>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<jne~~0x401e76>']}, {'block_Idx': 172, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3495]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~byte ptr [rsp + 1], al>', '<jne~~0x402120>']}, {'block_Idx': 177, 'blockInsts': ['<jmp~~0x401c46>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3470]>', '<mov~~al, 0>', '<call~~0x500050>']}], 'cfg_edge_info': [(16, 20), (124, 129), (70, 73), (53, 32), (38, 44), (139, 163), (179, 181), (114, 118), (74, 82), (37, 42), (138, 149), (7, 10), (160, 167), (141, 129), (33, 38), (87, 73), (67, 70), (98, 103), (133, 125), (8, 176), (176, 178), (127, 136), (164, 130), (122, 179), (2, 4), (175, 42), (121, 126), (100, 103), (129, 139), (75, 83), (109, 115), (120, 124), (149, 160), (62, 67), (36, 48), (67, 63), (25, 27), (110, 116), (73, 76), (22, 3), (81, 80), (90, 92), (136, 135), (171, 175), (170, 155), (125, 132), (134, 144), (17, 16), (140, 123), (39, 46), (23, 29), (91, 93), (106, 109), (115, 121), (87, 50), (94, 98), (155, 114), (105, 113), (99, 42), (177, 7), (51, 50), (45, 16), (5, 7), (21, 25), (0, 2), (83, 73), (103, 106), (95, 93), (57, 63), (92, 94), (123, 127), (1, 3), (167, 127), (130, 142), (166, 171), (158, 167), (173, 149), (16, 19), (102, 107), (71, 74), (88, 90), (70, 63), (116, 115), (107, 112), (42, 56), (20, 19), (48, 35), (77, 80), (147, 166), (38, 43), (154, 126), (89, 88), (80, 85), (97, 101), (13, 16), (24, 16), (28, 32), (27, 33), (76, 81), (33, 37), (56, 66), (128, 137), (101, 98), (181, 118), (162, 169), (43, 50), (137, 158), (84, 88), (40, 33), (31, 39), (172, 42), (58, 87), (150, 161), (114, 119), (178, 3), (118, 16), (121, 125), (55, 42), (138, 150), (19, 22), (144, 154), (149, 159), (7, 11), (119, 118), (93, 99), (163, 42), (82, 87), (145, 155), (125, 131), (4, 6), (115, 120), (117, 114), (180, 42), (110, 117), (25, 28), (73, 77), (85, 42), (32, 36), (51, 58), (146, 165), (103, 105), (132, 120), (126, 134), (142, 152), (106, 110), (135, 146), (153, 42), (179, 180), (130, 141), (2, 1), (29, 3), (82, 73), (119, 122), (136, 147), (98, 102), (124, 130), (95, 94), (161, 149), (176, 177), (97, 100), (80, 84), (127, 135), (152, 164), (164, 129), (48, 55), (28, 31), (100, 102), (62, 63), (76, 80), (173, 150), (109, 114), (71, 75), (88, 91), (63, 71), (120, 123), (58, 50), (165, 155), (131, 153), (112, 103), (77, 81), (101, 100), (169, 173), (39, 45), (159, 172), (91, 92), (66, 72), (129, 140), (94, 97), (6, 5), (128, 138), (4, 5), (50, 57), (90, 93), (43, 51), (84, 89), (65, 57), (150, 162), (89, 91), (0, 1), (57, 62), (19, 23), (111, 42), (166, 170), (32, 35), (72, 16), (44, 43), (116, 114), (107, 111), (113, 42), (35, 40), (44, 52), (126, 133), (5, 8), (135, 145), (83, 74), (154, 125), (117, 115), (92, 95), (123, 128)], 'cdg_edge_info': [(120, 129), (80, 56), (16, 20), (90, 42), (39, 33), (38, 44), (179, 181), (125, 155), (103, 118), (48, 72), (103, 72), (38, 16), (129, 155), (94, 103), (38, 80), (115, 16), (149, 167), (107, 42), (33, 38), (67, 70), (119, 16), (90, 99), (125, 66), (33, 56), (116, 127), (39, 35), (176, 178), (127, 136), (129, 66), (136, 114), (2, 4), (164, 130), (48, 56), (103, 56), (121, 126), (176, 7), (100, 103), (80, 88), (129, 139), (109, 115), (80, 42), (176, 16), (38, 73), (149, 160), (120, 124), (67, 63), (136, 135), (110, 116), (149, 114), (90, 92), (125, 114), (125, 123), (116, 120), (91, 66), (128, 149), (125, 132), (48, 40), (129, 123), (149, 135), (128, 167), (91, 93), (38, 57), (103, 113), (106, 109), (32, 16), (98, 16), (150, 173), (94, 98), (115, 121), (166, 114), (95, 72), (33, 42), (90, 94), (98, 107), (101, 103), (48, 33), (136, 155), (48, 42), (103, 42), (95, 93), (0, 2), (103, 106), (83, 82), (57, 63), (126, 144), (95, 56), (33, 72), (149, 155), (166, 171), (135, 165), (28, 39), (16, 19), (71, 74), (88, 90), (107, 103), (71, 83), (117, 135), (70, 63), (125, 118), (107, 112), (128, 135), (125, 127), (48, 35), (125, 72), (39, 32), (32, 48), (116, 115), (129, 118), (136, 166), (149, 66), (129, 127), (154, 126), (89, 88), (80, 85), (97, 101), (166, 155), (129, 72), (16, 3), (115, 125), (28, 32), (19, 29), (33, 37), (125, 56), (25, 33), (128, 137), (101, 98), (125, 120), (166, 66), (5, 176), (91, 72), (129, 56), (117, 155), (92, 16), (128, 155), (95, 42), (114, 119), (138, 150), (179, 66), (19, 22), (149, 159), (91, 56), (120, 16), (109, 135), (125, 131), (95, 99), (90, 66), (136, 118), (128, 114), (125, 42), (100, 107), (117, 123), (110, 117), (25, 28), (94, 100), (73, 77), (129, 42), (32, 36), (97, 16), (149, 118), (51, 58), (149, 127), (103, 105), (149, 72), (109, 155), (107, 66), (135, 146), (106, 110), (2, 1), (179, 180), (33, 80), (91, 42), (119, 122), (71, 82), (166, 118), (136, 147), (129, 163), (149, 56), (166, 72), (98, 102), (80, 66), (95, 94), (124, 130), (80, 84), (176, 177), (127, 16), (176, 3), (116, 135), (179, 118), (33, 73), (48, 55), (2, 3), (126, 154), (179, 72), (100, 102), (128, 118), (91, 99), (173, 150), (28, 40), (119, 179), (128, 127), (117, 127), (71, 75), (109, 123), (166, 175), (88, 91), (166, 56), (130, 164), (67, 71), (77, 81), (101, 100), (33, 57), (33, 66), (179, 56), (150, 169), (2, 5), (91, 92), (90, 72), (28, 33), (129, 140), (116, 155), (103, 66), (117, 120), (94, 97), (48, 66), (149, 42), (128, 138), (84, 16), (90, 93), (84, 89), (43, 51), (33, 50), (44, 50), (89, 91), (90, 56), (0, 1), (107, 72), (2, 7), (19, 23), (91, 94), (103, 114), (28, 35), (2, 16), (57, 71), (166, 42), (123, 16), (166, 170), (109, 127), (149, 172), (33, 43), (44, 43), (107, 111), (80, 72), (107, 56), (70, 71), (116, 123), (179, 42), (129, 114), (125, 135), (39, 40), (0, 3), (83, 74), (125, 153), (129, 135), (117, 115), (92, 95), (123, 128), (109, 120), (95, 66), (130, 152)], 'ddg_edge_info': [(67, 77), (2, 176), (139, 163), (122, 3), (0, 23), (80, 95), (100, 110), (33, 29), (40, 77), (152, 129), (147, 23), (144, 125), (80, 122), (90, 154), (102, 128), (81, 105), (102, 137), (102, 146), (75, 129), (0, 126), (0, 135), (75, 138), (137, 122), (106, 116), (102, 164), (75, 147), (36, 48), (102, 20), (75, 3), (147, 171), (137, 136), (102, 29), (80, 90), (100, 105), (40, 63), (90, 149), (102, 114), (0, 94), (81, 91), (0, 103), (102, 123), (81, 100), (94, 119), (94, 128), (75, 124), (102, 150), (0, 130), (94, 146), (7, 16), (131, 42), (147, 166), (40, 58), (77, 107), (90, 126), (80, 103), (90, 135), (85, 29), (93, 42), (0, 89), (94, 114), (102, 127), (75, 110), (94, 123), (40, 152), (75, 119), (102, 136), (0, 125), (75, 128), (75, 137), (94, 150), (43, 77), (75, 146), (40, 44), (80, 89), (90, 130), (0, 75), (66, 20), (0, 84), (110, 117), (94, 100), (66, 29), (40, 129), (0, 93), (73, 77), (0, 102), (75, 105), (102, 122), (40, 138), (102, 131), (51, 58), (40, 147), (146, 165), (75, 114), (94, 127), (75, 123), (94, 136), (106, 110), (36, 33), (36, 42), (124, 164), (40, 3), (29, 3), (90, 116), (90, 125), (0, 70), (147, 3), (100, 166), (40, 124), (75, 91), (0, 88), (0, 97), (75, 100), (102, 117), (131, 153), (0, 106), (102, 126), (94, 122), (81, 152), (43, 58), (75, 127), (0, 56), (90, 120), (146, 119), (90, 129), (40, 110), (0, 74), (66, 19), (40, 119), (102, 103), (0, 92), (75, 95), (80, 164), (40, 128), (80, 173), (40, 137), (40, 146), (81, 147), (75, 122), (147, 119), (146, 20), (90, 97), (90, 106), (0, 51), (20, 29), (90, 115), (100, 147), (146, 114), (40, 105), (40, 114), (75, 81), (66, 23), (40, 123), (75, 90), (94, 103), (99, 29), (81, 169), (147, 114), (122, 179), (138, 169), (90, 92), (171, 175), (90, 101), (90, 110), (40, 91), (165, 122), (40, 100), (23, 29), (0, 73), (80, 154), (75, 85), (40, 127), (81, 128), (75, 94), (81, 137), (81, 146), (105, 113), (81, 164), (5, 16), (81, 20), (0, 32), (137, 19), (81, 29), (100, 119), (100, 128), (20, 19), (90, 105), (42, 56), (40, 95), (100, 146), (146, 122), (80, 149), (75, 80), (81, 114), (40, 122), (75, 89), (81, 123), (102, 173), (56, 66), (81, 150), (116, 117), (0, 171), (38, 63), (138, 150), (100, 114), (179, 29), (90, 91), (0, 36), (137, 23), (100, 123), (63, 74), (40, 81), (20, 23), (40, 90), (80, 126), (80, 135), (100, 150), (81, 127), (102, 159), (0, 139), (81, 136), (137, 135), (94, 164), (94, 173), (0, 166), (75, 169), (0, 4), (102, 42), (122, 20), (40, 67), (122, 29), (0, 40), (100, 127), (40, 85), (100, 136), (40, 94), (81, 95), (80, 130), (40, 103), (159, 42), (152, 164), (81, 122), (102, 154), (81, 131), (75, 164), (113, 29), (75, 173), (102, 19), (159, 172), (117, 166), (75, 20), (75, 29), (102, 169), (100, 122), (40, 80), (121, 154), (80, 116), (80, 125), (81, 90), (40, 89), (90, 166), (0, 120), (81, 117), (102, 149), (0, 129), (94, 154), (0, 147), (75, 150), (75, 159), (67, 75), (0, 3), (102, 23), (40, 57), (117, 179), (122, 19), (75, 42), (80, 120), (81, 85), (80, 129), (81, 94), (81, 103), (0, 115), (44, 63), (102, 135), (102, 144), (43, 67), (40, 169), (74, 82), (75, 136), (94, 149), (163, 29), (75, 154), (48, 29), (70, 75), (40, 43), (117, 165), (121, 126), (137, 3), (100, 103), (75, 19), (80, 88), (80, 97), (80, 106), (121, 144), (40, 70), (80, 115), (81, 80), (90, 147), (81, 89), (102, 121), (0, 101), (102, 130), (94, 126), (102, 139), (0, 119), (94, 135), (0, 128), (51, 75), (75, 131), (40, 164), (40, 173), (0, 137), (75, 149), (146, 29), (40, 20), (40, 29), (40, 38), (0, 2), (80, 92), (75, 23), (80, 101), (80, 110), (105, 42), (102, 107), (147, 20), (81, 84), (102, 116), (147, 29), (81, 93), (102, 125), (0, 105), (0, 114), (75, 117), (40, 150), (94, 130), (0, 123), (51, 70), (75, 126), (40, 159), (137, 119), (75, 135), (43, 75), (75, 144), (40, 33), (40, 42), (40, 51), (121, 125), (178, 3), (90, 119), (90, 128), (80, 105), (0, 82), (90, 146), (0, 91), (144, 126), (0, 100), (75, 103), (40, 136), (94, 116), (102, 120), (102, 129), (94, 125), (40, 154), (75, 121), (102, 138), (75, 130), (81, 173), (75, 139), (106, 117), (36, 40), (28, 36), (146, 19), (40, 19), (102, 3), (138, 173), (90, 114), (80, 91), (90, 123), (100, 164), (102, 106), (147, 19), (100, 173), (90, 150), (40, 131), (102, 115), (0, 95), (102, 124), (94, 120), (40, 149), (75, 116), (94, 129), (124, 130), (75, 125), (81, 159), (5, 20), (147, 122), (146, 23), (40, 23), (90, 100), (81, 42), (39, 36), (169, 173), (0, 63), (90, 127), (0, 72), (90, 136), (0, 81), (40, 117), (75, 84), (94, 97), (0, 90), (102, 110), (75, 93), (94, 106), (40, 126), (40, 135), (102, 119), (32, 33), (94, 115), (75, 102), (40, 144), (81, 154), (75, 120), (124, 152), (81, 19), (169, 150), (90, 95), (0, 58), (90, 122), (66, 3), (0, 67), (100, 154), (40, 121), (75, 88), (102, 105), (94, 101), (80, 166), (40, 130), (75, 97), (94, 110), (40, 139), (75, 106), (81, 149), (75, 115), (172, 29), (124, 129), (137, 166), (138, 149), (81, 23), (0, 44), (122, 42), (100, 149), (75, 74), (40, 116), (0, 80), (75, 83), (40, 125), (81, 126), (75, 92), (94, 105), (75, 101), (81, 135), (81, 144), (0, 165), (153, 29), (38, 57), (137, 179), (169, 149), (0, 39), (100, 126), (90, 103), (40, 84), (100, 135), (40, 93), (0, 57), (0, 66), (40, 102), (80, 147), (1, 3), (40, 120), (81, 121), (81, 130), (171, 42), (81, 139), (137, 147), (137, 165), (146, 3), (0, 25), (20, 3), (122, 23), (0, 43), (100, 130), (40, 88), (165, 119), (40, 97), (40, 106), (75, 73), (40, 115), (144, 154), (81, 116), (81, 125), (93, 99), (0, 146), (0, 164), (0, 173), (0, 20), (100, 107), (0, 29), (100, 116), (0, 38), (23, 3), (100, 125), (80, 119), (165, 114), (40, 92), (80, 128), (40, 101), (81, 102), (80, 146), (75, 77), (81, 120), (102, 152), (107, 29), (81, 129), (81, 138), (0, 150), (94, 166), (0, 159), (137, 146), (175, 29), (81, 3), (63, 71), (137, 20), (100, 120), (80, 114), (137, 29), (100, 129), (152, 130), (80, 123), (81, 88), (81, 97), (90, 164), (81, 106), (90, 173), (80, 150), (81, 115), (0, 127), (137, 114), (81, 124), (102, 147), (66, 72), (0, 136), (0, 154), (0, 1), (0, 19), (100, 106), (80, 100), (0, 28), (100, 115), (63, 75), (40, 73), (80, 127), (81, 92), (80, 136), (81, 101), (81, 110), (139, 42), (0, 122), (81, 119), (0, 131), (94, 147), (137, 127), (0, 149), (75, 152)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpl\t$1, 0x100(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 247, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 248, 'instruction': 'je\t.LBB20_61'}, {'instIndex': 249, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 250, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 251, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 252, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 253, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 254, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 255, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 256, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 257, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 258, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 259, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 260, 'instruction': 'jne\t.LBB20_66'}, {'instIndex': 261, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 262, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 263, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 264, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 265, 'instruction': 'jge\t.LBB20_65'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O0/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O0/utils.s---avcodec_open2---after
function id: 20
function flag: True
There are 517 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpl\t$1, 0x100(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 247, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 248, 'instruction': 'je\t.LBB20_61'}, {'instIndex': 249, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 250, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 251, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 252, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 253, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 254, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 255, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 256, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 257, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 258, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 259, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 260, 'instruction': 'jne\t.LBB20_66'}, {'instIndex': 261, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 262, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 263, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 264, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 265, 'instruction': 'jge\t.LBB20_65'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O0/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O0/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 1200 nodes and 1986 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 517 instructions in binary file.
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
The execution time of patched subCFG information extraction via angr: 0:00:02.199383
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402036>, <DisassemblerInsn "jne" for 0x40203a>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "cmp" for 0x40202b>, <DisassemblerInsn "je" for 0x40202f>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "mov" for 0x402088>, <DisassemblerInsn "movzx" for 0x40208f>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "cmp" for 0x40209b>, <DisassemblerInsn "jge" for 0x4020a1>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402071>, <DisassemblerInsn "cmp" for 0x402075>, <DisassemblerInsn "jge" for 0x40207a>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402067>, <DisassemblerInsn "call" for 0x40206c>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402081>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402050>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402024>]'}], 'cfg_block_detailed_info': [{'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402058>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x40203c>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x4020db>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402081>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 91, 'blockInsts': ['<jmp~~0x402083>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x2c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 1>', '<jne~~0x402058>']}], 'cfg_edge_info': [(79, 78), (78, 81), (87, 90), (81, 84), (76, 78), (85, 87), (87, 91), (82, 86), (84, 83), (83, 86), (82, 85), (78, 82), (81, 83), (84, 82), (83, 85)]}]}
{'avcodec_open2': [4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O0/utils.o---after
The extraction of function: avcodec_open2
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 182 nodes and 284 edges in CFGEmulated.
It has 182 nodes and 379 edges in CDG.
It has 2140 nodes and 3296 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202508, 4202534, 4202545, 4202556, 4202584, 4202599, 4202609]
{4203008, 4203524, 4203526, 4203016, 4202508, 4202002, 4201494, 4203545, 4202013, 4203043, 4202534, 4202024, 4203564, 4202545, 4201522, 4201527, 4202556, 4202050, 4203587, 4201540, 4202052, 4201542, 4203081, 4203598, 4203600, 4203602, 4203604, 4203094, 4202584, 4202080, 4202599, 4202091, 4203629, 4202609, 4203121, 4202102, 4202620, 4203647, 4202625, 4202627, 4203655, 4203145, 4203665, 4203158, 4203160, 4202136, 4202141, 4203678, 4202659, 4203688, 4203183, 4203698, 4202169, 4203198, 4202174, 4203715, 4202702, 4203732, 4202198, 4202715, 4203227, 4201694, 4203235, 4202212, 4203753, 4201709, 4202746, 4202236, 4203263, 4201738, 4202764, 4202267, 4202784, 4202792, 4203306, 4202284, 4203319, 4202810, 4202298, 4202311, 4202833, 4203347, 4202841, 4202342, 4203371, 4201842, 4202868, 4203384, 4203386, 4202363, 4203388, 4201857, 4202377, 4203403, 4203414, 4201879, 4202906, 4201888, 4201893, 4202919, 4203431, 4202415, 4201392, 4203441, 4201911, 4202946, 4202436, 4201926, 4203465, 4201935, 4201940, 4203478, 4203480, 4202457, 4202970, 4201439, 4201954, 4202471, 4202983, 4202985, 4203495, 4201453, 4203512, 4201466, 4202495}
[118, 35, 31, 28, 106, 99, 11, 81, 152, 132, 19, 173, 20, 2, 29, 6, 32, 65, 85, 82, 155, 162, 165, 39, 154, 13, 33, 127, 62, 22, 149, 3, 7, 144, 0, 145, 164, 169, 16, 116, 100, 97, 159, 4, 176, 36, 141, 140, 166, 92, 45, 1, 70, 83, 21, 125, 179, 163, 46, 43, 178, 115, 124, 114, 77, 71, 121, 74, 55, 120, 58, 128, 72, 133, 52, 170, 160, 67, 75, 105, 24, 129, 89, 175, 44, 90, 37, 111, 95, 10, 27, 171, 142, 134, 84, 158, 42, 109, 8, 123, 101, 48, 38, 103, 112, 130, 122, 131, 98, 147, 17, 51, 138, 76, 107, 119, 73, 66, 146, 25, 135, 53, 94, 88, 87, 181, 117, 161, 113, 50, 93, 153, 5, 23, 150, 136, 126, 56, 180, 80, 91, 167, 63, 57, 172, 139, 110, 177, 40, 102, 137]
The execution time of patched slicing information extraction via angr: 0:00:19.882943
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402452>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cfc>, <DisassemblerInsn "movsxd" for 0x401d01>, <DisassemblerInsn "call" for 0x401d05>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ced>, <DisassemblerInsn "cmp" for 0x401cf2>, <DisassemblerInsn "jne" for 0x401cfa>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020db>, <DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e7>, <DisassemblerInsn "xor" for 0x4020ec>, <DisassemblerInsn "cmp" for 0x4020ee>, <DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "je" for 0x4020f8>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "jmp" for 0x402007>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c65>, <DisassemblerInsn "lea" for 0x401c6a>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "call" for 0x401c73>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "add" for 0x401f20>, <DisassemblerInsn "call" for 0x401f27>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "add" for 0x40224d>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "jmp" for 0x402254>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021e7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40247f>, <DisassemblerInsn "je" for 0x402485>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022e3>, <DisassemblerInsn "mov" for 0x4022e8>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "movsxd" for 0x4022f3>, <DisassemblerInsn "cmp" for 0x4022f8>, <DisassemblerInsn "je" for 0x4022fd>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40246d>, <DisassemblerInsn "mov" for 0x402474>, <DisassemblerInsn "call" for 0x402479>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdf>, <DisassemblerInsn "cmp" for 0x401be4>, <DisassemblerInsn "jl" for 0x401beb>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402491>, <DisassemblerInsn "mov" for 0x402496>, <DisassemblerInsn "mov" for 0x40249b>, <DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "jmp" for 0x4024a6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c07>, <DisassemblerInsn "lea" for 0x401c0a>, <DisassemblerInsn "xor" for 0x401c0f>, <DisassemblerInsn "call" for 0x401c11>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d72>, <DisassemblerInsn "cmp" for 0x401d77>, <DisassemblerInsn "je" for 0x401d7f>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e10>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "jmp" for 0x401f42>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "xor" for 0x401edb>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "call" for 0x401edf>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402404>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402328>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "mov" for 0x4023fa>, <DisassemblerInsn "mov" for 0x4023ff>, <DisassemblerInsn "jmp" for 0x402402>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0d>, <DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "mov" for 0x401d19>, <DisassemblerInsn "cmp" for 0x401d1e>, <DisassemblerInsn "jne" for 0x401d26>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "movsxd" for 0x402169>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "je" for 0x402172>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9c>, <DisassemblerInsn "jmp" for 0x401ca4>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc6>, <DisassemblerInsn "cmp" for 0x401dca>, <DisassemblerInsn "jge" for 0x401dcd>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40237c>, <DisassemblerInsn "cmp" for 0x402381>, <DisassemblerInsn "je" for 0x402389>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e57>, <DisassemblerInsn "jne" for 0x401e5e>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "jmp" for 0x4024a6>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402337>, <DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "mov" for 0x402343>, <DisassemblerInsn "movsxd" for 0x402347>, <DisassemblerInsn "cmp" for 0x40234c>, <DisassemblerInsn "jne" for 0x402351>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024e9>, <DisassemblerInsn "add" for 0x4024ed>, <DisassemblerInsn "ret" for 0x4024f1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "add" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c55>, <DisassemblerInsn "cmp" for 0x401c5b>, <DisassemblerInsn "je" for 0x401c5e>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219a>, <DisassemblerInsn "add" for 0x40219e>, <DisassemblerInsn "mov" for 0x4021a1>, <DisassemblerInsn "jmp" for 0x4021a5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbe>, <DisassemblerInsn "mov" for 0x401bc3>, <DisassemblerInsn "mov" for 0x401bcb>, <DisassemblerInsn "mov" for 0x401bd4>, <DisassemblerInsn "cmp" for 0x401bd9>, <DisassemblerInsn "jl" for 0x401bdd>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402402>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "mov" for 0x40220d>, <DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "movsxd" for 0x402218>, <DisassemblerInsn "cmp" for 0x40221d>, <DisassemblerInsn "je" for 0x402221>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232a>, <DisassemblerInsn "add" for 0x40232e>, <DisassemblerInsn "mov" for 0x402331>, <DisassemblerInsn "jmp" for 0x402335>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402454>, <DisassemblerInsn "add" for 0x40245a>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "cmp" for 0x402463>, <DisassemblerInsn "je" for 0x40246b>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "cmp" for 0x402111>, <DisassemblerInsn "setne" for 0x402119>, <DisassemblerInsn "mov" for 0x40211c>, <DisassemblerInsn "mov" for 0x402120>, <DisassemblerInsn "mov" for 0x402124>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402041>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "mov" for 0x402050>, <DisassemblerInsn "mov" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "cmp" for 0x40202b>, <DisassemblerInsn "je" for 0x40202f>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402353>, <DisassemblerInsn "mov" for 0x402358>, <DisassemblerInsn "lea" for 0x40235d>, <DisassemblerInsn "mov" for 0x402364>, <DisassemblerInsn "call" for 0x402366>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401bfa>, <DisassemblerInsn "je" for 0x401c00>]'}, {'block_Idx': 176, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c32>, <DisassemblerInsn "je" for 0x401c35>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "lea" for 0x401d8d>, <DisassemblerInsn "call" for 0x401d92>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402245>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402296>]'}, {'block_Idx': 166, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "cmp" for 0x4023ac>, <DisassemblerInsn "je" for 0x4023af>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "jmp" for 0x401d30>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "jmp" for 0x401bf5>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "cmp" for 0x401e70>, <DisassemblerInsn "je" for 0x401e74>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "jge" for 0x401ebc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "mov" for 0x401cb6>, <DisassemblerInsn "mov" for 0x401cbb>, <DisassemblerInsn "mov" for 0x401cc2>, <DisassemblerInsn "cmp" for 0x401cc7>, <DisassemblerInsn "jne" for 0x401ccf>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021a7>, <DisassemblerInsn "mov" for 0x4021ac>, <DisassemblerInsn "mov" for 0x4021b3>, <DisassemblerInsn "movsxd" for 0x4021b7>, <DisassemblerInsn "cmp" for 0x4021bc>, <DisassemblerInsn "jne" for 0x4021c0>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402443>, <DisassemblerInsn "cmp" for 0x402447>, <DisassemblerInsn "jge" for 0x40244c>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402289>, <DisassemblerInsn "jmp" for 0x402291>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "cmp" for 0x401d3a>, <DisassemblerInsn "je" for 0x401d42>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "cmp" for 0x401e17>, <DisassemblerInsn "je" for 0x401e1b>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "jmp" for 0x401c3f>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213a>, <DisassemblerInsn "mov" for 0x40213f>, <DisassemblerInsn "cmp" for 0x402146>, <DisassemblerInsn "je" for 0x40214b>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402200>, <DisassemblerInsn "mov" for 0x402208>, <DisassemblerInsn "mov" for 0x40220d>, <DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "movsxd" for 0x402218>, <DisassemblerInsn "cmp" for 0x40221d>, <DisassemblerInsn "je" for 0x402221>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402406>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "cmp" for 0x402412>, <DisassemblerInsn "je" for 0x402417>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "cmp" for 0x401f01>, <DisassemblerInsn "setne" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401e98>, <DisassemblerInsn "jl" for 0x401e9b>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x40215e>, <DisassemblerInsn "mov" for 0x402165>, <DisassemblerInsn "movsxd" for 0x402169>, <DisassemblerInsn "cmp" for 0x40216e>, <DisassemblerInsn "je" for 0x402172>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "lea" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "call" for 0x401ed1>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da0>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e9>, <DisassemblerInsn "mov" for 0x4021ee>, <DisassemblerInsn "cmp" for 0x4021f5>, <DisassemblerInsn "je" for 0x4021fa>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "call" for 0x401e3d>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "cmp" for 0x4022b4>, <DisassemblerInsn "jne" for 0x4022bc>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024d4>, <DisassemblerInsn "mov" for 0x4024d9>, <DisassemblerInsn "jmp" for 0x4024e4>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402196>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df5>, <DisassemblerInsn "mov" for 0x401dfa>, <DisassemblerInsn "mov" for 0x401e00>, <DisassemblerInsn "mov" for 0x401e05>, <DisassemblerInsn "call" for 0x401e0b>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023d6>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402378>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e65>, <DisassemblerInsn "jne" for 0x401e69>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9d>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "mov" for 0x401ead>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "call" for 0x401eb4>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a3>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "mov" for 0x4020ad>, <DisassemblerInsn "movzx" for 0x4020b4>, <DisassemblerInsn "mov" for 0x4020bb>, <DisassemblerInsn "lea" for 0x4020c0>, <DisassemblerInsn "mov" for 0x4020c7>, <DisassemblerInsn "call" for 0x4020c9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd1>, <DisassemblerInsn "jmp" for 0x401cd9>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225b>, <DisassemblerInsn "mov" for 0x402262>, <DisassemblerInsn "movsxd" for 0x402266>, <DisassemblerInsn "cmp" for 0x40226b>, <DisassemblerInsn "jne" for 0x40226f>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f71>, <DisassemblerInsn "cmp" for 0x401f76>, <DisassemblerInsn "jne" for 0x401f79>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "jmp" for 0x4023d1>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "cmp" for 0x401de7>, <DisassemblerInsn "je" for 0x401dee>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dcf>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40207c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c85>, <DisassemblerInsn "cmp" for 0x401c8a>, <DisassemblerInsn "jne" for 0x401c92>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "mov" for 0x4023b6>, <DisassemblerInsn "lea" for 0x4023bb>, <DisassemblerInsn "mov" for 0x4023c2>, <DisassemblerInsn "call" for 0x4023c4>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402247>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402198>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "cmp" for 0x401f5d>, <DisassemblerInsn "je" for 0x401f64>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022d6>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4024a8>, <DisassemblerInsn "call" for 0x4024ad>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "call" for 0x401c2c>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402298>, <DisassemblerInsn "mov" for 0x40229d>, <DisassemblerInsn "cmp" for 0x4022a4>, <DisassemblerInsn "je" for 0x4022a9>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402036>, <DisassemblerInsn "jne" for 0x40203a>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "cmp" for 0x401d9b>, <DisassemblerInsn "jge" for 0x401d9e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd4>, <DisassemblerInsn "cmp" for 0x401dd9>, <DisassemblerInsn "je" for 0x401de0>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "mov" for 0x402088>, <DisassemblerInsn "movzx" for 0x40208f>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "cmp" for 0x40209b>, <DisassemblerInsn "jge" for 0x4020a1>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402081>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402223>, <DisassemblerInsn "mov" for 0x402228>, <DisassemblerInsn "mov" for 0x40222b>, <DisassemblerInsn "mov" for 0x402230>, <DisassemblerInsn "mov" for 0x402237>, <DisassemblerInsn "movsxd" for 0x40223b>, <DisassemblerInsn "cmp" for 0x402240>, <DisassemblerInsn "jne" for 0x402243>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40242c>, <DisassemblerInsn "mov" for 0x402431>, <DisassemblerInsn "mov" for 0x402438>, <DisassemblerInsn "mov" for 0x40243c>, <DisassemblerInsn "call" for 0x402441>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c2>, <DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "lea" for 0x4021cc>, <DisassemblerInsn "mov" for 0x4021d3>, <DisassemblerInsn "call" for 0x4021d5>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "cmp" for 0x40205d>, <DisassemblerInsn "jne" for 0x402065>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "call" for 0x4023a2>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1d>, <DisassemblerInsn "cmp" for 0x401e22>, <DisassemblerInsn "je" for 0x401e26>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022db>, <DisassemblerInsn "mov" for 0x4022e3>, <DisassemblerInsn "mov" for 0x4022e8>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "movsxd" for 0x4022f3>, <DisassemblerInsn "cmp" for 0x4022f8>, <DisassemblerInsn "je" for 0x4022fd>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402071>, <DisassemblerInsn "cmp" for 0x402075>, <DisassemblerInsn "jge" for 0x40207a>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402419>, <DisassemblerInsn "mov" for 0x40241e>, <DisassemblerInsn "and" for 0x402424>, <DisassemblerInsn "cmp" for 0x402427>, <DisassemblerInsn "jne" for 0x40242a>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "xor" for 0x401eee>, <DisassemblerInsn "cmp" for 0x401ef0>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "je" for 0x401efa>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c3>, <DisassemblerInsn "add" for 0x4024c8>, <DisassemblerInsn "call" for 0x4024cf>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e7>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "call" for 0x4023f3>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cde>, <DisassemblerInsn "cmp" for 0x401ce3>, <DisassemblerInsn "jle" for 0x401ce7>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d8>, <DisassemblerInsn "cmp" for 0x4023dd>, <DisassemblerInsn "je" for 0x4023e5>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d70>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402024>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "cmp" for 0x401f80>, <DisassemblerInsn "jne" for 0x401f87>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "xor" for 0x40028b>, <DisassemblerInsn "sub" for 0x40028d>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "sar" for 0x40029c>, <DisassemblerInsn "xor" for 0x40029e>, <DisassemblerInsn "sub" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "xor" for 0x4002aa>, <DisassemblerInsn "sub" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "sar" for 0x4002bb>, <DisassemblerInsn "xor" for 0x4002bd>, <DisassemblerInsn "sub" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "ret" for 0x4002c9>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402450>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402120>, <DisassemblerInsn "mov" for 0x402124>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "and" for 0x40212c>, <DisassemblerInsn "movzx" for 0x40212e>, <DisassemblerInsn "cmp" for 0x402131>, <DisassemblerInsn "je" for 0x402134>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402326>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "jmp" for 0x4020d6>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e42>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fec>, <DisassemblerInsn "lea" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "call" for 0x401ffa>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021da>, <DisassemblerInsn "jmp" for 0x4021e2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c16>, <DisassemblerInsn "je" for 0x401c1e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402487>, <DisassemblerInsn "call" for 0x40248c>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402304>, <DisassemblerInsn "mov" for 0x40230b>, <DisassemblerInsn "mov" for 0x402310>, <DisassemblerInsn "mov" for 0x402317>, <DisassemblerInsn "movsxd" for 0x40231b>, <DisassemblerInsn "cmp" for 0x402320>, <DisassemblerInsn "jne" for 0x402324>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "cmp" for 0x402390>, <DisassemblerInsn "je" for 0x402394>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402174>, <DisassemblerInsn "mov" for 0x402179>, <DisassemblerInsn "mov" for 0x40217c>, <DisassemblerInsn "mov" for 0x402181>, <DisassemblerInsn "mov" for 0x402188>, <DisassemblerInsn "movsxd" for 0x40218c>, <DisassemblerInsn "cmp" for 0x402191>, <DisassemblerInsn "jne" for 0x402194>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b2>, <DisassemblerInsn "add" for 0x4024b7>, <DisassemblerInsn "call" for 0x4024be>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40244e>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "jbe" for 0x401f38>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40237a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "xor" for 0x401e91>, <DisassemblerInsn "call" for 0x401e93>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "cmp" for 0x401e49>, <DisassemblerInsn "jne" for 0x401e50>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "jmp" for 0x402373>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402276>, <DisassemblerInsn "lea" for 0x40227b>, <DisassemblerInsn "mov" for 0x402282>, <DisassemblerInsn "call" for 0x402284>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "cmp" for 0x402101>, <DisassemblerInsn "mov" for 0x402106>, <DisassemblerInsn "jne" for 0x40210a>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c44>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402067>, <DisassemblerInsn "call" for 0x40206c>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022be>, <DisassemblerInsn "mov" for 0x4022c3>, <DisassemblerInsn "lea" for 0x4022c8>, <DisassemblerInsn "mov" for 0x4022cf>, <DisassemblerInsn "call" for 0x4022d1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 118, 'blockInsts': ['<jmp~~0x402454>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x401db7>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rdi, dword ptr [rax + 0x10]>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d72>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x40], 0>', '<mov~~byte ptr [rsp + 2], al>', '<je~~0x402128>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x39c5]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402208>']}, {'block_Idx': 132, 'blockInsts': ['<jmp~~0x4021e9>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x40249e>']}, {'block_Idx': 173, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x402337>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rdi, [rip + 0x3164]>', '<mov~~esi, 2>', '<call~~qword ptr [rip + 0x3151]>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0xffffff8>', '<jl~~0x401bfa>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024e9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 8]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401da5>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<mov~~esi, edx>', '<call~~0x400260>']}, {'block_Idx': 155, 'blockInsts': ['<jmp~~0x402406>']}, {'block_Idx': 162, 'blockInsts': ['<jmp~~0x40232a>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<jmp~~0x402404>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d35>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x4021a7>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402454>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401dd4>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x4023d8>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x401e76>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024e9>']}, {'block_Idx': 149, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<jne~~0x402378>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3994]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x398b], eax>', '<mov~~eax, dword ptr [rip + 0x3985]>', '<cmp~~eax, 1>', '<je~~0x401c85>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402159>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~qword ptr [rsp + 0x18], rdx>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jl~~0x401bed>']}, {'block_Idx': 145, 'blockInsts': ['<jmp~~0x402404>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402256>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4022e3>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3186]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x317d], eax>', '<cmp~~qword ptr [rip + 0x3165], 0>', '<je~~0x40247f>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 1], al>', '<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x2c], 1>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x40203c>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33f9]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x401c16>']}, {'block_Idx': 176, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401c44>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x98]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x402256>']}, {'block_Idx': 140, 'blockInsts': ['<jmp~~0x402298>']}, {'block_Idx': 166, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<je~~0x4023d6>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402454>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x4024e9>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401ee4>']}, {'block_Idx': 83, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x401ee4>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x428], 0>', '<jne~~0x401cde>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<jne~~0x4021e7>']}, {'block_Idx': 179, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402450>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401d70>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<je~~0x401e42>']}, {'block_Idx': 178, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x4024e9>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x70], 0>', '<je~~0x4021e9>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402256>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x402452>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401ebe>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x4021a7>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x37a0]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x68], 0>', '<je~~0x402298>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x38]>', '<call~~0x400260>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<jne~~0x4022db>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], 0>', '<jmp~~0x402454>']}, {'block_Idx': 133, 'blockInsts': ['<jmp~~0x4021a7>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x308]>', '<call~~0x400260>']}, {'block_Idx': 170, 'blockInsts': ['<jmp~~0x402404>']}, {'block_Idx': 160, 'blockInsts': ['<jmp~~0x40237a>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x401e76>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~ecx, byte ptr [rax + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35eb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402454>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<jne~~0x402296>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x401faf>']}, {'block_Idx': 175, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<je~~0x401e12>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x100], ecx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x104], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 111, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x90], 0>', '<jne~~0x401c9c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], 0>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33c6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 142, 'blockInsts': ['<jmp~~0x402249>']}, {'block_Idx': 134, 'blockInsts': ['<jmp~~0x40219a>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], -1>', '<je~~0x401f7b>']}, {'block_Idx': 158, 'blockInsts': ['<jmp~~0x40237a>']}, {'block_Idx': 42, 'blockInsts': ['<lea~~rdi, [rsp + 8]>', '<call~~0x5000d0>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x39b1]>', '<mov~~esi, 1>', '<call~~qword ptr [rip + 0x399e]>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x40237c>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402058>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401da5>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<je~~0x401e12>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x4020db>']}, {'block_Idx': 112, 'blockInsts': ['<jmp~~0x402083>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x68]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402247>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x351c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402083>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffff>', '<jmp~~0x402454>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401e42>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x402337>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402081>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x404]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<jne~~0x402452>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x38], 0>', '<mov~~byte ptr [rsp + 3], al>', '<je~~0x401f0d>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x428>', '<call~~0x500060>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jle~~0x401da7>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x402402>']}, {'block_Idx': 53, 'blockInsts': ['<jmp~~0x401d72>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 1>', '<jne~~0x402058>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x401faf>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x304], ecx>', '<mov~~ecx, dword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x308], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0xc]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x34], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x38], ecx>', '<ret~~>']}, {'block_Idx': 181, 'blockInsts': ['<jmp~~0x402452>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x402406>']}, {'block_Idx': 161, 'blockInsts': ['<jmp~~0x402337>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x369d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 5, 'blockInsts': ['<cmp~~qword ptr [rip + 0x39b2], 0>', '<je~~0x401c46>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x5000d0>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x78]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~rax, qword ptr [rcx + rdx*8]>', '<jne~~0x402328>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x4023d8>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x70]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402198>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 180, 'blockInsts': ['<jmp~~0x4024a8>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0x80>', '<jbe~~0x401f47>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 167, 'blockInsts': ['<jmp~~0x40237c>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<jne~~0x401e76>']}, {'block_Idx': 172, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x4024a8>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3495]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~byte ptr [rsp + 1], al>', '<jne~~0x402120>']}, {'block_Idx': 177, 'blockInsts': ['<jmp~~0x401c46>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3470]>', '<mov~~al, 0>', '<call~~0x500050>']}], 'cfg_edge_info': [(16, 20), (124, 129), (70, 73), (53, 32), (38, 44), (139, 163), (179, 181), (114, 118), (74, 82), (37, 42), (138, 149), (7, 10), (160, 167), (141, 129), (33, 38), (87, 73), (67, 70), (98, 103), (133, 125), (8, 176), (176, 178), (127, 136), (164, 130), (122, 179), (2, 4), (175, 42), (121, 126), (100, 103), (129, 139), (75, 83), (109, 115), (120, 124), (149, 160), (62, 67), (36, 48), (67, 63), (25, 27), (110, 116), (73, 76), (22, 3), (81, 80), (90, 92), (136, 135), (171, 175), (170, 155), (125, 132), (134, 144), (17, 16), (140, 123), (39, 46), (23, 29), (91, 93), (106, 109), (115, 121), (87, 50), (94, 98), (155, 114), (105, 113), (99, 42), (177, 7), (51, 50), (45, 16), (5, 7), (21, 25), (0, 2), (83, 73), (103, 106), (95, 93), (57, 63), (92, 94), (123, 127), (1, 3), (167, 127), (130, 142), (166, 171), (158, 167), (173, 149), (16, 19), (102, 107), (71, 74), (88, 90), (70, 63), (116, 115), (107, 112), (42, 56), (20, 19), (48, 35), (77, 80), (147, 166), (38, 43), (154, 126), (89, 88), (80, 85), (97, 101), (13, 16), (24, 16), (28, 32), (27, 33), (76, 81), (33, 37), (56, 66), (128, 137), (101, 98), (181, 118), (162, 169), (43, 50), (137, 158), (84, 88), (40, 33), (31, 39), (172, 42), (58, 87), (150, 161), (114, 119), (178, 3), (118, 16), (121, 125), (55, 42), (138, 150), (19, 22), (144, 154), (149, 159), (7, 11), (119, 118), (93, 99), (163, 42), (82, 87), (145, 155), (125, 131), (4, 6), (115, 120), (117, 114), (180, 42), (110, 117), (25, 28), (73, 77), (85, 42), (32, 36), (51, 58), (146, 165), (103, 105), (132, 120), (126, 134), (142, 152), (106, 110), (135, 146), (153, 42), (179, 180), (130, 141), (2, 1), (29, 3), (82, 73), (119, 122), (136, 147), (98, 102), (124, 130), (95, 94), (161, 149), (176, 177), (97, 100), (80, 84), (127, 135), (152, 164), (164, 129), (48, 55), (28, 31), (100, 102), (62, 63), (76, 80), (173, 150), (109, 114), (71, 75), (88, 91), (63, 71), (120, 123), (58, 50), (165, 155), (131, 153), (112, 103), (77, 81), (101, 100), (169, 173), (39, 45), (159, 172), (91, 92), (66, 72), (129, 140), (94, 97), (6, 5), (128, 138), (4, 5), (50, 57), (90, 93), (43, 51), (84, 89), (65, 57), (150, 162), (89, 91), (0, 1), (57, 62), (19, 23), (111, 42), (166, 170), (32, 35), (72, 16), (44, 43), (116, 114), (107, 111), (113, 42), (35, 40), (44, 52), (126, 133), (5, 8), (135, 145), (83, 74), (154, 125), (117, 115), (92, 95), (123, 128)], 'cdg_edge_info': [(120, 129), (80, 56), (16, 20), (90, 42), (39, 33), (38, 44), (179, 181), (125, 155), (103, 118), (48, 72), (103, 72), (38, 16), (129, 155), (94, 103), (38, 80), (115, 16), (149, 167), (107, 42), (33, 38), (67, 70), (119, 16), (90, 99), (125, 66), (33, 56), (116, 127), (39, 35), (176, 178), (127, 136), (129, 66), (136, 114), (2, 4), (164, 130), (48, 56), (103, 56), (121, 126), (176, 7), (100, 103), (80, 88), (129, 139), (109, 115), (80, 42), (176, 16), (38, 73), (149, 160), (120, 124), (67, 63), (136, 135), (110, 116), (149, 114), (90, 92), (125, 114), (125, 123), (116, 120), (91, 66), (128, 149), (125, 132), (48, 40), (129, 123), (149, 135), (128, 167), (91, 93), (38, 57), (103, 113), (106, 109), (32, 16), (98, 16), (150, 173), (94, 98), (115, 121), (166, 114), (95, 72), (33, 42), (90, 94), (98, 107), (101, 103), (48, 33), (136, 155), (48, 42), (103, 42), (95, 93), (0, 2), (103, 106), (83, 82), (57, 63), (126, 144), (95, 56), (33, 72), (149, 155), (166, 171), (135, 165), (28, 39), (16, 19), (71, 74), (88, 90), (107, 103), (71, 83), (117, 135), (70, 63), (125, 118), (107, 112), (128, 135), (125, 127), (48, 35), (125, 72), (39, 32), (32, 48), (116, 115), (129, 118), (136, 166), (149, 66), (129, 127), (154, 126), (89, 88), (80, 85), (97, 101), (166, 155), (129, 72), (16, 3), (115, 125), (28, 32), (19, 29), (33, 37), (125, 56), (25, 33), (128, 137), (101, 98), (125, 120), (166, 66), (5, 176), (91, 72), (129, 56), (117, 155), (92, 16), (128, 155), (95, 42), (114, 119), (138, 150), (179, 66), (19, 22), (149, 159), (91, 56), (120, 16), (109, 135), (125, 131), (95, 99), (90, 66), (136, 118), (128, 114), (125, 42), (100, 107), (117, 123), (110, 117), (25, 28), (94, 100), (73, 77), (129, 42), (32, 36), (97, 16), (149, 118), (51, 58), (149, 127), (103, 105), (149, 72), (109, 155), (107, 66), (135, 146), (106, 110), (2, 1), (179, 180), (33, 80), (91, 42), (119, 122), (71, 82), (166, 118), (136, 147), (129, 163), (149, 56), (166, 72), (98, 102), (80, 66), (95, 94), (124, 130), (80, 84), (176, 177), (127, 16), (176, 3), (116, 135), (179, 118), (33, 73), (48, 55), (2, 3), (126, 154), (179, 72), (100, 102), (128, 118), (91, 99), (173, 150), (28, 40), (119, 179), (128, 127), (117, 127), (71, 75), (109, 123), (166, 175), (88, 91), (166, 56), (130, 164), (67, 71), (77, 81), (101, 100), (33, 57), (33, 66), (179, 56), (150, 169), (2, 5), (91, 92), (90, 72), (28, 33), (129, 140), (116, 155), (103, 66), (117, 120), (94, 97), (48, 66), (149, 42), (128, 138), (84, 16), (90, 93), (84, 89), (43, 51), (33, 50), (44, 50), (89, 91), (90, 56), (0, 1), (107, 72), (2, 7), (19, 23), (91, 94), (103, 114), (28, 35), (2, 16), (57, 71), (166, 42), (123, 16), (166, 170), (109, 127), (149, 172), (33, 43), (44, 43), (107, 111), (80, 72), (107, 56), (70, 71), (116, 123), (179, 42), (129, 114), (125, 135), (39, 40), (0, 3), (83, 74), (125, 153), (129, 135), (117, 115), (92, 95), (123, 128), (109, 120), (95, 66), (130, 152)], 'ddg_edge_info': [(67, 77), (2, 176), (139, 163), (122, 3), (0, 23), (80, 95), (100, 110), (33, 29), (40, 77), (152, 129), (147, 23), (144, 125), (80, 122), (90, 154), (102, 128), (81, 105), (102, 137), (102, 146), (75, 129), (0, 126), (0, 135), (75, 138), (137, 122), (106, 116), (102, 164), (75, 147), (36, 48), (102, 20), (75, 3), (147, 171), (137, 136), (102, 29), (80, 90), (100, 105), (40, 63), (90, 149), (102, 114), (0, 94), (81, 91), (0, 103), (102, 123), (81, 100), (94, 119), (94, 128), (75, 124), (102, 150), (0, 130), (94, 146), (7, 16), (131, 42), (147, 166), (40, 58), (77, 107), (90, 126), (80, 103), (90, 135), (85, 29), (93, 42), (0, 89), (94, 114), (102, 127), (75, 110), (94, 123), (40, 152), (75, 119), (102, 136), (0, 125), (75, 128), (75, 137), (94, 150), (43, 77), (75, 146), (40, 44), (80, 89), (90, 130), (0, 75), (66, 20), (0, 84), (110, 117), (94, 100), (66, 29), (40, 129), (0, 93), (73, 77), (0, 102), (75, 105), (102, 122), (40, 138), (102, 131), (51, 58), (40, 147), (146, 165), (75, 114), (94, 127), (75, 123), (94, 136), (106, 110), (36, 33), (36, 42), (124, 164), (40, 3), (29, 3), (90, 116), (90, 125), (0, 70), (147, 3), (100, 166), (40, 124), (75, 91), (0, 88), (0, 97), (75, 100), (102, 117), (131, 153), (0, 106), (102, 126), (94, 122), (81, 152), (43, 58), (75, 127), (0, 56), (90, 120), (146, 119), (90, 129), (40, 110), (0, 74), (66, 19), (40, 119), (102, 103), (0, 92), (75, 95), (80, 164), (40, 128), (80, 173), (40, 137), (40, 146), (81, 147), (75, 122), (147, 119), (146, 20), (90, 97), (90, 106), (0, 51), (20, 29), (90, 115), (100, 147), (146, 114), (40, 105), (40, 114), (75, 81), (66, 23), (40, 123), (75, 90), (94, 103), (99, 29), (81, 169), (147, 114), (122, 179), (138, 169), (90, 92), (171, 175), (90, 101), (90, 110), (40, 91), (165, 122), (40, 100), (23, 29), (0, 73), (80, 154), (75, 85), (40, 127), (81, 128), (75, 94), (81, 137), (81, 146), (105, 113), (81, 164), (5, 16), (81, 20), (0, 32), (137, 19), (81, 29), (100, 119), (100, 128), (20, 19), (90, 105), (42, 56), (40, 95), (100, 146), (146, 122), (80, 149), (75, 80), (81, 114), (40, 122), (75, 89), (81, 123), (102, 173), (56, 66), (81, 150), (116, 117), (0, 171), (38, 63), (138, 150), (100, 114), (179, 29), (90, 91), (0, 36), (137, 23), (100, 123), (63, 74), (40, 81), (20, 23), (40, 90), (80, 126), (80, 135), (100, 150), (81, 127), (102, 159), (0, 139), (81, 136), (137, 135), (94, 164), (94, 173), (0, 166), (75, 169), (0, 4), (102, 42), (122, 20), (40, 67), (122, 29), (0, 40), (100, 127), (40, 85), (100, 136), (40, 94), (81, 95), (80, 130), (40, 103), (159, 42), (152, 164), (81, 122), (102, 154), (81, 131), (75, 164), (113, 29), (75, 173), (102, 19), (159, 172), (117, 166), (75, 20), (75, 29), (102, 169), (100, 122), (40, 80), (121, 154), (80, 116), (80, 125), (81, 90), (40, 89), (90, 166), (0, 120), (81, 117), (102, 149), (0, 129), (94, 154), (0, 147), (75, 150), (75, 159), (67, 75), (0, 3), (102, 23), (40, 57), (117, 179), (122, 19), (75, 42), (80, 120), (81, 85), (80, 129), (81, 94), (81, 103), (0, 115), (44, 63), (102, 135), (102, 144), (43, 67), (40, 169), (74, 82), (75, 136), (94, 149), (163, 29), (75, 154), (48, 29), (70, 75), (40, 43), (117, 165), (121, 126), (137, 3), (100, 103), (75, 19), (80, 88), (80, 97), (80, 106), (121, 144), (40, 70), (80, 115), (81, 80), (90, 147), (81, 89), (102, 121), (0, 101), (102, 130), (94, 126), (102, 139), (0, 119), (94, 135), (0, 128), (51, 75), (75, 131), (40, 164), (40, 173), (0, 137), (75, 149), (146, 29), (40, 20), (40, 29), (40, 38), (0, 2), (80, 92), (75, 23), (80, 101), (80, 110), (105, 42), (102, 107), (147, 20), (81, 84), (102, 116), (147, 29), (81, 93), (102, 125), (0, 105), (0, 114), (75, 117), (40, 150), (94, 130), (0, 123), (51, 70), (75, 126), (40, 159), (137, 119), (75, 135), (43, 75), (75, 144), (40, 33), (40, 42), (40, 51), (121, 125), (178, 3), (90, 119), (90, 128), (80, 105), (0, 82), (90, 146), (0, 91), (144, 126), (0, 100), (75, 103), (40, 136), (94, 116), (102, 120), (102, 129), (94, 125), (40, 154), (75, 121), (102, 138), (75, 130), (81, 173), (75, 139), (106, 117), (36, 40), (28, 36), (146, 19), (40, 19), (102, 3), (138, 173), (90, 114), (80, 91), (90, 123), (100, 164), (102, 106), (147, 19), (100, 173), (90, 150), (40, 131), (102, 115), (0, 95), (102, 124), (94, 120), (40, 149), (75, 116), (94, 129), (124, 130), (75, 125), (81, 159), (5, 20), (147, 122), (146, 23), (40, 23), (90, 100), (81, 42), (39, 36), (169, 173), (0, 63), (90, 127), (0, 72), (90, 136), (0, 81), (40, 117), (75, 84), (94, 97), (0, 90), (102, 110), (75, 93), (94, 106), (40, 126), (40, 135), (102, 119), (32, 33), (94, 115), (75, 102), (40, 144), (81, 154), (75, 120), (124, 152), (81, 19), (169, 150), (90, 95), (0, 58), (90, 122), (66, 3), (0, 67), (100, 154), (40, 121), (75, 88), (102, 105), (94, 101), (80, 166), (40, 130), (75, 97), (94, 110), (40, 139), (75, 106), (81, 149), (75, 115), (172, 29), (124, 129), (137, 166), (138, 149), (81, 23), (0, 44), (122, 42), (100, 149), (75, 74), (40, 116), (0, 80), (75, 83), (40, 125), (81, 126), (75, 92), (94, 105), (75, 101), (81, 135), (81, 144), (0, 165), (153, 29), (38, 57), (137, 179), (169, 149), (0, 39), (100, 126), (90, 103), (40, 84), (100, 135), (40, 93), (0, 57), (0, 66), (40, 102), (80, 147), (1, 3), (40, 120), (81, 121), (81, 130), (171, 42), (81, 139), (137, 147), (137, 165), (146, 3), (0, 25), (20, 3), (122, 23), (0, 43), (100, 130), (40, 88), (165, 119), (40, 97), (40, 106), (75, 73), (40, 115), (144, 154), (81, 116), (81, 125), (93, 99), (0, 146), (0, 164), (0, 173), (0, 20), (100, 107), (0, 29), (100, 116), (0, 38), (23, 3), (100, 125), (80, 119), (165, 114), (40, 92), (80, 128), (40, 101), (81, 102), (80, 146), (75, 77), (81, 120), (102, 152), (107, 29), (81, 129), (81, 138), (0, 150), (94, 166), (0, 159), (137, 146), (175, 29), (81, 3), (63, 71), (137, 20), (100, 120), (80, 114), (137, 29), (100, 129), (152, 130), (80, 123), (81, 88), (81, 97), (90, 164), (81, 106), (90, 173), (80, 150), (81, 115), (0, 127), (137, 114), (81, 124), (102, 147), (66, 72), (0, 136), (0, 154), (0, 1), (0, 19), (100, 106), (80, 100), (0, 28), (100, 115), (63, 75), (40, 73), (80, 127), (81, 92), (80, 136), (81, 101), (81, 110), (139, 42), (0, 122), (81, 119), (0, 131), (94, 147), (137, 127), (0, 149), (75, 152)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpl\t$1, 0x100(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 247, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 248, 'instruction': 'je\t.LBB20_61'}, {'instIndex': 249, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 250, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 251, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 252, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 253, 'instruction': 'movl\t$1, 0x2c(%rax)'}, {'instIndex': 254, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 255, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 256, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 257, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 258, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 259, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 260, 'instruction': 'jne\t.LBB20_66'}, {'instIndex': 261, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 262, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 263, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 264, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 265, 'instruction': 'jge\t.LBB20_65'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O1/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O1/utils.s---avcodec_open2---after
function id: 17
function flag: True
There are 676 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 311, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 312, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 313, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 315, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 316, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 317, 'instruction': 'movq\t%rcx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 318, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 319, 'instruction': 'je\t.LBB17_44'}, {'instIndex': 321, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 322, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 325, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 326, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 327, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 330, 'instruction': 'cmpq\t$0, 0x2d8(%rcx)'}, {'instIndex': 331, 'instruction': 'movl\t%eax, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 332, 'instruction': 'jne\t.LBB17_47'}, {'instIndex': 334, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 335, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 336, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 337, 'instruction': 'movl\t%ecx, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 338, 'instruction': 'movl\t%eax, 0x184(%rsp)                 # 4-byte Spill'}, {'instIndex': 339, 'instruction': 'jl\t.LBB17_87'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O1/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O1/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 958 nodes and 1689 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 676 instructions in binary file.
[4203387, 4203414, 4203443, 4203457, 4203485, 4203517, 4203530]
The execution time of patched subCFG information extraction via angr: 0:00:02.504027
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "mov" for 0x402336>, <DisassemblerInsn "cmp" for 0x40233d>, <DisassemblerInsn "sete" for 0x402340>, <DisassemblerInsn "cmp" for 0x402343>, <DisassemblerInsn "sete" for 0x402346>, <DisassemblerInsn "or" for 0x402349>, <DisassemblerInsn "test" for 0x40234b>, <DisassemblerInsn "jne" for 0x40234d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b3>, <DisassemblerInsn "cmp" for 0x4023bb>, <DisassemblerInsn "jne" for 0x4023bf>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d1>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023da>, <DisassemblerInsn "mov" for 0x4023dd>, <DisassemblerInsn "mov" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "jne" for 0x4023fb>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "mov" for 0x40239e>, <DisassemblerInsn "add" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a5>, <DisassemblerInsn "cmp" for 0x4023ad>, <DisassemblerInsn "je" for 0x4023b1>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40237b>, <DisassemblerInsn "mov" for 0x402382>, <DisassemblerInsn "mov" for 0x40238a>, <DisassemblerInsn "cmp" for 0x402391>, <DisassemblerInsn "jne" for 0x402394>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40240a>, <DisassemblerInsn "mov" for 0x40240d>, <DisassemblerInsn "mov" for 0x40240f>, <DisassemblerInsn "mov" for 0x402416>, <DisassemblerInsn "jl" for 0x40241d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a65>, <DisassemblerInsn "lea" for 0x402a68>, <DisassemblerInsn "call" for 0x402a70>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023dd>, <DisassemblerInsn "mov" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "jne" for 0x4023fb>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402423>, <DisassemblerInsn "mov" for 0x40242b>, <DisassemblerInsn "mov" for 0x402433>, <DisassemblerInsn "mov" for 0x40243a>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "mov" for 0x402444>, <DisassemblerInsn "movzx" for 0x40244c>, <DisassemblerInsn "mov" for 0x402453>, <DisassemblerInsn "cmp" for 0x40245a>, <DisassemblerInsn "jle" for 0x402460>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023fd>, <DisassemblerInsn "call" for 0x402405>]'}], 'cfg_block_detailed_info': [{'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40237b>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4023dd>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x402423>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x4023c1>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4023dd>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jl~~0x402a5e>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x184]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1f0]>', '<call~~0x5000d0>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x402423>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edx, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402495>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(71, 26), (71, 70), (66, 70), (65, 68), (63, 66), (67, 70), (69, 71), (61, 63), (65, 67), (68, 67), (66, 69), (68, 66), (63, 65), (67, 69)]}]}
{'avcodec_open2': [4203387, 4203414, 4203443, 4203457, 4203485, 4203517, 4203530]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O1/utils.o---after
The extraction of function: avcodec_open2
[4203387, 4203414, 4203443, 4203457, 4203485, 4203517, 4203530]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 150 nodes and 248 edges in CFGEmulated.
It has 150 nodes and 326 edges in CDG.
It has 2533 nodes and 3385 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4203387, 4203414, 4203443, 4203457, 4203485, 4203517, 4203530]
{4204544, 4205057, 4203530, 4204047, 4202515, 4205076, 4204573, 4203555, 4202024, 4204076, 4203053, 4202541, 4205103, 4205105, 4205118, 4203073, 4204106, 4204636, 4205150, 4203618, 4204649, 4204144, 4203121, 4204659, 4205173, 4202614, 4203652, 4205193, 4203669, 4205206, 4204700, 4202656, 4204197, 4203692, 4203184, 4205236, 4204727, 4202168, 4203204, 4202694, 4203719, 4204239, 4204753, 4203750, 4203239, 4202218, 4204787, 4204279, 4204797, 4203780, 4204292, 4202247, 4203273, 4204319, 4201760, 4204832, 4203810, 4203300, 4202291, 4204348, 4204865, 4204867, 4202819, 4203848, 4203343, 4202836, 4204375, 4204891, 4204896, 4202850, 4202344, 4203370, 4201836, 4202868, 4204408, 4203387, 4203904, 4204940, 4202386, 4203414, 4204440, 4201888, 4202402, 4202922, 4204973, 4202927, 4203443, 4202419, 4203955, 4204988, 4203457, 4201931, 4202956, 4202448, 4202961, 4205013, 4204507, 4203485, 4201954, 4204517, 4202471, 4204007, 4202988, 4204020, 4203517}
[27, 97, 82, 48, 147, 110, 90, 19, 40, 52, 77, 134, 139, 138, 85, 11, 118, 111, 72, 64, 143, 28, 78, 83, 35, 113, 137, 130, 71, 88, 94, 20, 44, 41, 101, 47, 59, 84, 114, 103, 15, 127, 92, 0, 17, 29, 34, 98, 22, 42, 32, 6, 117, 63, 70, 76, 149, 136, 3, 55, 86, 45, 144, 51, 16, 4, 74, 115, 122, 102, 39, 99, 148, 89, 105, 80, 107, 21, 116, 91, 31, 135, 8, 13, 100, 26, 75, 60, 128, 61, 108, 50, 33, 95, 54, 1, 96, 81, 125, 43, 145, 62, 10, 140, 106, 58, 2, 65, 68, 129, 132, 23, 121, 46, 123, 120, 73, 7, 124, 104, 18, 131, 109, 9]
The execution time of patched slicing information extraction via angr: 0:00:25.442076
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f68>, <DisassemblerInsn "cmp" for 0x401f70>, <DisassemblerInsn "je" for 0x401f78>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402484>, <DisassemblerInsn "mov" for 0x402489>, <DisassemblerInsn "jmp" for 0x402490>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40236a>, <DisassemblerInsn "mov" for 0x40236f>, <DisassemblerInsn "jmp" for 0x402376>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401fa2>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028b7>, <DisassemblerInsn "mov" for 0x4028bc>, <DisassemblerInsn "mov" for 0x4028c1>, <DisassemblerInsn "mov" for 0x4028c8>, <DisassemblerInsn "jmp" for 0x4028cf>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025e7>, <DisassemblerInsn "test" for 0x4025ee>, <DisassemblerInsn "jne" for 0x4025f0>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40240a>, <DisassemblerInsn "mov" for 0x40240d>, <DisassemblerInsn "mov" for 0x40240f>, <DisassemblerInsn "mov" for 0x402416>, <DisassemblerInsn "jl" for 0x40241d>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a2f>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402013>, <DisassemblerInsn "mov" for 0x40201b>, <DisassemblerInsn "mov" for 0x402021>, <DisassemblerInsn "cmp" for 0x402028>, <DisassemblerInsn "je" for 0x40202b>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "mov" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020f7>, <DisassemblerInsn "xor" for 0x4020fd>, <DisassemblerInsn "sub" for 0x402100>, <DisassemblerInsn "mov" for 0x402103>, <DisassemblerInsn "mov" for 0x402109>, <DisassemblerInsn "sar" for 0x402110>, <DisassemblerInsn "mov" for 0x402113>, <DisassemblerInsn "xor" for 0x40211a>, <DisassemblerInsn "sub" for 0x40211c>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "xor" for 0x402121>, <DisassemblerInsn "sub" for 0x402123>, <DisassemblerInsn "sar" for 0x402125>, <DisassemblerInsn "xor" for 0x402127>, <DisassemblerInsn "sub" for 0x402129>, <DisassemblerInsn "mov" for 0x40212b>, <DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402135>, <DisassemblerInsn "mov" for 0x402137>, <DisassemblerInsn "cmp" for 0x40213e>, <DisassemblerInsn "jne" for 0x402141>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234f>, <DisassemblerInsn "mov" for 0x402357>, <DisassemblerInsn "lea" for 0x40235c>, <DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "call" for 0x402365>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402943>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "sub" for 0x40294b>, <DisassemblerInsn "mov" for 0x40294e>, <DisassemblerInsn "je" for 0x402955>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402873>, <DisassemblerInsn "mov" for 0x40287b>, <DisassemblerInsn "mov" for 0x402882>, <DisassemblerInsn "xor" for 0x402884>, <DisassemblerInsn "cmp" for 0x402886>, <DisassemblerInsn "mov" for 0x402888>, <DisassemblerInsn "mov" for 0x40288f>, <DisassemblerInsn "je" for 0x402896>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028f3>, <DisassemblerInsn "call" for 0x4028f8>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023fd>, <DisassemblerInsn "call" for 0x402405>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e74>, <DisassemblerInsn "call" for 0x401e79>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a5>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b5>, <DisassemblerInsn "mov" for 0x4026ba>, <DisassemblerInsn "mov" for 0x4026bd>, <DisassemblerInsn "cmp" for 0x4026c1>, <DisassemblerInsn "sete" for 0x4026c4>, <DisassemblerInsn "mov" for 0x4026c7>, <DisassemblerInsn "test" for 0x4026cb>, <DisassemblerInsn "jne" for 0x4026cd>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402580>, <DisassemblerInsn "mov" for 0x402588>, <DisassemblerInsn "mov" for 0x402590>, <DisassemblerInsn "mov" for 0x402598>, <DisassemblerInsn "mov" for 0x40259b>, <DisassemblerInsn "cmp" for 0x4025a2>, <DisassemblerInsn "sete" for 0x4025a5>, <DisassemblerInsn "mov" for 0x4025a8>, <DisassemblerInsn "test" for 0x4025af>, <DisassemblerInsn "jne" for 0x4025b1>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c4>, <DisassemblerInsn "mov" for 0x4022cc>, <DisassemblerInsn "add" for 0x4022cf>, <DisassemblerInsn "mov" for 0x4022d6>, <DisassemblerInsn "cmp" for 0x4022de>, <DisassemblerInsn "jne" for 0x4022e5>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "add" for 0x40224c>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "cmp" for 0x40225d>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "ja" for 0x40226b>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40289c>, <DisassemblerInsn "mov" for 0x4028a4>, <DisassemblerInsn "lea" for 0x4028a9>, <DisassemblerInsn "mov" for 0x4028b0>, <DisassemblerInsn "call" for 0x4028b2>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "mov" for 0x402a4a>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a55>, <DisassemblerInsn "jmp" for 0x402a5c>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40237b>, <DisassemblerInsn "mov" for 0x402382>, <DisassemblerInsn "mov" for 0x40238a>, <DisassemblerInsn "cmp" for 0x402391>, <DisassemblerInsn "jne" for 0x402394>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d1>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023da>, <DisassemblerInsn "mov" for 0x4023dd>, <DisassemblerInsn "mov" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "jne" for 0x4023fb>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "mov" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f1a>, <DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "cmp" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f26>, <DisassemblerInsn "je" for 0x401f2d>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40285c>, <DisassemblerInsn "cmp" for 0x402864>, <DisassemblerInsn "je" for 0x402867>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027e5>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "lea" for 0x4027f2>, <DisassemblerInsn "mov" for 0x4027f9>, <DisassemblerInsn "call" for 0x4027fb>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026cf>, <DisassemblerInsn "mov" for 0x4026d3>, <DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "mov" for 0x4026db>, <DisassemblerInsn "add" for 0x4026e0>, <DisassemblerInsn "cmp" for 0x4026e4>, <DisassemblerInsn "mov" for 0x4026e6>, <DisassemblerInsn "mov" for 0x4026ee>, <DisassemblerInsn "jne" for 0x4026f5>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021cc>, <DisassemblerInsn "jge" for 0x4021cf>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402495>, <DisassemblerInsn "xor" for 0x40249d>, <DisassemblerInsn "cmp" for 0x40249f>, <DisassemblerInsn "mov" for 0x4024a3>, <DisassemblerInsn "je" for 0x4024aa>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402960>, <DisassemblerInsn "mov" for 0x402968>, <DisassemblerInsn "mov" for 0x40296f>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x402976>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "cmp" for 0x40297f>, <DisassemblerInsn "mov" for 0x402983>, <DisassemblerInsn "je" for 0x40298a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eb8>, <DisassemblerInsn "mov" for 0x401ec0>, <DisassemblerInsn "mov" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "add" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "cmp" for 0x401ee1>, <DisassemblerInsn "jle" for 0x401ee4>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402135>, <DisassemblerInsn "mov" for 0x402137>, <DisassemblerInsn "cmp" for 0x40213e>, <DisassemblerInsn "jne" for 0x402141>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "cmp" for 0x401f4a>, <DisassemblerInsn "je" for 0x401f4e>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029ad>, <DisassemblerInsn "mov" for 0x4029b2>, <DisassemblerInsn "call" for 0x4029ba>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f60>, <DisassemblerInsn "call" for 0x401f63>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021aa>, <DisassemblerInsn "jl" for 0x4021ad>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b3>, <DisassemblerInsn "cmp" for 0x4023bb>, <DisassemblerInsn "jne" for 0x4023bf>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402920>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "mov" for 0x402932>, <DisassemblerInsn "test" for 0x402936>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "je" for 0x40293f>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40264a>, <DisassemblerInsn "mov" for 0x402652>, <DisassemblerInsn "mov" for 0x402654>, <DisassemblerInsn "cmp" for 0x40265b>, <DisassemblerInsn "sete" for 0x40265e>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "test" for 0x402668>, <DisassemblerInsn "jne" for 0x40266a>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "jmp" for 0x401e23>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4027d9>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024ac>, <DisassemblerInsn "mov" for 0x4024b4>, <DisassemblerInsn "cmp" for 0x4024b9>, <DisassemblerInsn "mov" for 0x4024be>, <DisassemblerInsn "jne" for 0x4024c5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d20>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "lea" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d47>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "cmp" for 0x401d58>, <DisassemblerInsn "mov" for 0x401d5f>, <DisassemblerInsn "ja" for 0x401d66>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a01>, <DisassemblerInsn "lea" for 0x402a06>, <DisassemblerInsn "mov" for 0x402a0d>, <DisassemblerInsn "call" for 0x402a12>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd0>, <DisassemblerInsn "cmp" for 0x401fd7>, <DisassemblerInsn "mov" for 0x401fda>, <DisassemblerInsn "jl" for 0x401fe1>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fef>, <DisassemblerInsn "add" for 0x401ff2>, <DisassemblerInsn "mov" for 0x401ff9>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "mov" for 0x402007>, <DisassemblerInsn "cmp" for 0x40200e>, <DisassemblerInsn "je" for 0x402011>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40298c>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402998>, <DisassemblerInsn "and" for 0x40299e>, <DisassemblerInsn "cmp" for 0x4029a1>, <DisassemblerInsn "mov" for 0x4029a4>, <DisassemblerInsn "jne" for 0x4029ab>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fac>, <DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "lea" for 0x401fc3>, <DisassemblerInsn "call" for 0x401fcb>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f92>, <DisassemblerInsn "mov" for 0x401f95>, <DisassemblerInsn "jl" for 0x401f9c>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7a>, <DisassemblerInsn "mov" for 0x401f82>, <DisassemblerInsn "lea" for 0x401f85>, <DisassemblerInsn "call" for 0x401f8d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "add" for 0x401de8>, <DisassemblerInsn "mov" for 0x401deb>, <DisassemblerInsn "mov" for 0x401df1>, <DisassemblerInsn "cmp" for 0x401df7>, <DisassemblerInsn "je" for 0x401dfa>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026f7>, <DisassemblerInsn "test" for 0x4026fe>, <DisassemblerInsn "jne" for 0x402700>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021af>, <DisassemblerInsn "mov" for 0x4021b7>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "mov" for 0x4021c2>, <DisassemblerInsn "xor" for 0x4021c5>, <DisassemblerInsn "call" for 0x4021c7>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ec>, <DisassemblerInsn "mov" for 0x4021f4>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "mov" for 0x402204>, <DisassemblerInsn "mov" for 0x40220a>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "mov" for 0x40221e>, <DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "je" for 0x40222b>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "mov" for 0x402336>, <DisassemblerInsn "cmp" for 0x40233d>, <DisassemblerInsn "sete" for 0x402340>, <DisassemblerInsn "cmp" for 0x402343>, <DisassemblerInsn "sete" for 0x402346>, <DisassemblerInsn "or" for 0x402349>, <DisassemblerInsn "test" for 0x40234b>, <DisassemblerInsn "jne" for 0x40234d>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4029bc>, <DisassemblerInsn "mov" for 0x4029bf>, <DisassemblerInsn "mov" for 0x4029c1>, <DisassemblerInsn "mov" for 0x4029c8>, <DisassemblerInsn "jl" for 0x4029cf>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4027e3>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "mov" for 0x401d8e>, <DisassemblerInsn "lea" for 0x401d91>, <DisassemblerInsn "xor" for 0x401d99>, <DisassemblerInsn "call" for 0x401d9b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402154>, <DisassemblerInsn "cmp" for 0x40215c>, <DisassemblerInsn "jne" for 0x402160>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402423>, <DisassemblerInsn "mov" for 0x40242b>, <DisassemblerInsn "mov" for 0x402433>, <DisassemblerInsn "mov" for 0x40243a>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "mov" for 0x402444>, <DisassemblerInsn "movzx" for 0x40244c>, <DisassemblerInsn "mov" for 0x402453>, <DisassemblerInsn "cmp" for 0x40245a>, <DisassemblerInsn "jle" for 0x402460>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "add" for 0x4020ab>, <DisassemblerInsn "mov" for 0x4020af>, <DisassemblerInsn "mov" for 0x4020b7>, <DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "cmp" for 0x4020c1>, <DisassemblerInsn "je" for 0x4020c4>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402800>, <DisassemblerInsn "mov" for 0x402805>, <DisassemblerInsn "mov" for 0x40280a>, <DisassemblerInsn "mov" for 0x402811>, <DisassemblerInsn "jmp" for 0x402818>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402174>, <DisassemblerInsn "mov" for 0x40217c>, <DisassemblerInsn "mov" for 0x402183>, <DisassemblerInsn "mov" for 0x40218b>, <DisassemblerInsn "add" for 0x40218e>, <DisassemblerInsn "mov" for 0x402195>, <DisassemblerInsn "mov" for 0x40219d>, <DisassemblerInsn "xor" for 0x4021a3>, <DisassemblerInsn "call" for 0x4021a5>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a14>, <DisassemblerInsn "mov" for 0x402a18>, <DisassemblerInsn "test" for 0x402a1f>, <DisassemblerInsn "mov" for 0x402a22>, <DisassemblerInsn "jne" for 0x402a29>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da0>, <DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "cmp" for 0x401daf>, <DisassemblerInsn "je" for 0x401db3>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402302>, <DisassemblerInsn "mov" for 0x402304>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "mov" for 0x402309>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "mov" for 0x402319>, <DisassemblerInsn "cmp" for 0x40231f>, <DisassemblerInsn "jne" for 0x402322>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x402780>, <DisassemblerInsn "lea" for 0x402785>, <DisassemblerInsn "mov" for 0x40278c>, <DisassemblerInsn "call" for 0x40278e>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40260f>, <DisassemblerInsn "mov" for 0x402614>, <DisassemblerInsn "mov" for 0x402619>, <DisassemblerInsn "mov" for 0x402620>, <DisassemblerInsn "jmp" for 0x402627>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40273c>, <DisassemblerInsn "mov" for 0x402744>, <DisassemblerInsn "mov" for 0x402748>, <DisassemblerInsn "cmp" for 0x40274d>, <DisassemblerInsn "je" for 0x402751>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402076>, <DisassemblerInsn "mov" for 0x40207e>, <DisassemblerInsn "add" for 0x402081>, <DisassemblerInsn "mov" for 0x402085>, <DisassemblerInsn "mov" for 0x40208d>, <DisassemblerInsn "mov" for 0x402090>, <DisassemblerInsn "cmp" for 0x402097>, <DisassemblerInsn "je" for 0x40209a>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40262c>, <DisassemblerInsn "mov" for 0x402634>, <DisassemblerInsn "mov" for 0x402638>, <DisassemblerInsn "cmp" for 0x402640>, <DisassemblerInsn "je" for 0x402644>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dcd>, <DisassemblerInsn "cmp" for 0x401dd2>, <DisassemblerInsn "mov" for 0x401dd5>, <DisassemblerInsn "jne" for 0x401ddc>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "mov" for 0x402469>, <DisassemblerInsn "mov" for 0x402471>, <DisassemblerInsn "lea" for 0x402476>, <DisassemblerInsn "mov" for 0x40247d>, <DisassemblerInsn "call" for 0x40247f>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025f4>, <DisassemblerInsn "mov" for 0x4025fc>, <DisassemblerInsn "lea" for 0x402601>, <DisassemblerInsn "mov" for 0x402608>, <DisassemblerInsn "call" for 0x40260a>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "mov" for 0x40239e>, <DisassemblerInsn "add" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a5>, <DisassemblerInsn "cmp" for 0x4023ad>, <DisassemblerInsn "je" for 0x4023b1>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402757>, <DisassemblerInsn "mov" for 0x40275f>, <DisassemblerInsn "mov" for 0x402766>, <DisassemblerInsn "xor" for 0x40276b>, <DisassemblerInsn "cmp" for 0x40276d>, <DisassemblerInsn "mov" for 0x402771>, <DisassemblerInsn "jne" for 0x402776>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a31>, <DisassemblerInsn "call" for 0x402a39>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402798>, <DisassemblerInsn "mov" for 0x40279d>, <DisassemblerInsn "mov" for 0x4027a2>, <DisassemblerInsn "mov" for 0x4027a7>, <DisassemblerInsn "test" for 0x4027ab>, <DisassemblerInsn "sete" for 0x4027ae>, <DisassemblerInsn "mov" for 0x4027b1>, <DisassemblerInsn "sub" for 0x4027b5>, <DisassemblerInsn "mov" for 0x4027b8>, <DisassemblerInsn "sete" for 0x4027bd>, <DisassemblerInsn "or" for 0x4027c0>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "add" for 0x4027c6>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "test" for 0x4027cf>, <DisassemblerInsn "mov" for 0x4027d2>, <DisassemblerInsn "jne" for 0x4027d7>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024e6>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "cmp" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024f7>, <DisassemblerInsn "je" for 0x4024fe>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "lea" for 0x401fc3>, <DisassemblerInsn "call" for 0x401fcb>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402793>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e38>, <DisassemblerInsn "add" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "cmp" for 0x401e4a>, <DisassemblerInsn "sete" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e55>, <DisassemblerInsn "setne" for 0x401e59>, <DisassemblerInsn "and" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "test" for 0x401e63>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "jne" for 0x401e6d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "mov" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e0>, <DisassemblerInsn "add" for 0x4029e6>, <DisassemblerInsn "mov" for 0x4029e9>, <DisassemblerInsn "mov" for 0x4029ef>, <DisassemblerInsn "mov" for 0x4029f6>, <DisassemblerInsn "cmp" for 0x4029fb>, <DisassemblerInsn "je" for 0x4029ff>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402522>, <DisassemblerInsn "mov" for 0x40252a>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "cmp" for 0x402533>, <DisassemblerInsn "sete" for 0x402536>, <DisassemblerInsn "mov" for 0x402539>, <DisassemblerInsn "test" for 0x402540>, <DisassemblerInsn "jne" for 0x402542>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef8>, <DisassemblerInsn "movsxd" for 0x401eff>, <DisassemblerInsn "call" for 0x401f02>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402309>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "mov" for 0x402319>, <DisassemblerInsn "cmp" for 0x40231f>, <DisassemblerInsn "jne" for 0x402322>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a96>, <DisassemblerInsn "mov" for 0x402a9e>, <DisassemblerInsn "mov" for 0x402aa1>, <DisassemblerInsn "mov" for 0x402aa8>, <DisassemblerInsn "jmp" for 0x402aaf>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027db>, <DisassemblerInsn "test" for 0x4027df>, <DisassemblerInsn "jne" for 0x4027e1>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40221e>, <DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "je" for 0x40222b>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402670>, <DisassemblerInsn "mov" for 0x402677>, <DisassemblerInsn "mov" for 0x40267e>, <DisassemblerInsn "mov" for 0x402686>, <DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "mov" for 0x40268d>, <DisassemblerInsn "cmp" for 0x402692>, <DisassemblerInsn "mov" for 0x402694>, <DisassemblerInsn "mov" for 0x40269c>, <DisassemblerInsn "je" for 0x4026a3>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "cmp" for 0x40214b>, <DisassemblerInsn "jne" for 0x402152>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a5e>, <DisassemblerInsn "mov" for 0x402a65>, <DisassemblerInsn "lea" for 0x402a68>, <DisassemblerInsn "call" for 0x402a70>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402504>, <DisassemblerInsn "mov" for 0x40250c>, <DisassemblerInsn "mov" for 0x402510>, <DisassemblerInsn "cmp" for 0x402518>, <DisassemblerInsn "je" for 0x40251c>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a89>, <DisassemblerInsn "call" for 0x402a91>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "cmp" for 0x401d74>, <DisassemblerInsn "sete" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7b>, <DisassemblerInsn "test" for 0x401d82>, <DisassemblerInsn "jne" for 0x401d84>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c7>, <DisassemblerInsn "cmp" for 0x4024cf>, <DisassemblerInsn "setne" for 0x4024d7>, <DisassemblerInsn "and" for 0x4024da>, <DisassemblerInsn "movzx" for 0x4024dc>, <DisassemblerInsn "mov" for 0x4024df>, <DisassemblerInsn "mov" for 0x4024e6>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "cmp" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024f7>, <DisassemblerInsn "je" for 0x4024fe>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023dd>, <DisassemblerInsn "mov" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "jne" for 0x4023fb>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402941>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a75>, <DisassemblerInsn "add" for 0x402a7d>, <DisassemblerInsn "call" for 0x402a84>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028fd>, <DisassemblerInsn "mov" for 0x402904>, <DisassemblerInsn "mov" for 0x402906>, <DisassemblerInsn "mov" for 0x40290e>, <DisassemblerInsn "xor" for 0x402910>, <DisassemblerInsn "mov" for 0x402912>, <DisassemblerInsn "mov" for 0x402919>, <DisassemblerInsn "mov" for 0x402920>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "mov" for 0x402932>, <DisassemblerInsn "test" for 0x402936>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "je" for 0x40293f>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021d1>, <DisassemblerInsn "mov" for 0x4021d9>, <DisassemblerInsn "lea" for 0x4021de>, <DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "call" for 0x4021e7>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e6f>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40295b>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40281d>, <DisassemblerInsn "mov" for 0x402824>, <DisassemblerInsn "mov" for 0x40282c>, <DisassemblerInsn "mov" for 0x402833>, <DisassemblerInsn "cmp" for 0x402838>, <DisassemblerInsn "sete" for 0x40283c>, <DisassemblerInsn "mov" for 0x40283f>, <DisassemblerInsn "xor" for 0x402843>, <DisassemblerInsn "test" for 0x402845>, <DisassemblerInsn "mov" for 0x402848>, <DisassemblerInsn "mov" for 0x40284f>, <DisassemblerInsn "jne" for 0x402856>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402162>, <DisassemblerInsn "cmp" for 0x40216a>, <DisassemblerInsn "je" for 0x40216e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ab4>, <DisassemblerInsn "add" for 0x402abb>, <DisassemblerInsn "ret" for 0x402ac2>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40222d>, <DisassemblerInsn "add" for 0x402235>, <DisassemblerInsn "call" for 0x40223c>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402281>, <DisassemblerInsn "mov" for 0x402289>, <DisassemblerInsn "mov" for 0x40228c>, <DisassemblerInsn "add" for 0x40228f>, <DisassemblerInsn "mov" for 0x402296>, <DisassemblerInsn "mov" for 0x40229e>, <DisassemblerInsn "mov" for 0x4022a4>, <DisassemblerInsn "cmp" for 0x4022ab>, <DisassemblerInsn "je" for 0x4022ae>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402702>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4028f1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "cmp" for 0x401ef2>, <DisassemblerInsn "jne" for 0x401ef6>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025ba>, <DisassemblerInsn "mov" for 0x4025c1>, <DisassemblerInsn "mov" for 0x4025c8>, <DisassemblerInsn "add" for 0x4025d0>, <DisassemblerInsn "cmp" for 0x4025d4>, <DisassemblerInsn "mov" for 0x4025d6>, <DisassemblerInsn "mov" for 0x4025de>, <DisassemblerInsn "jne" for 0x4025e5>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40202d>, <DisassemblerInsn "mov" for 0x402035>, <DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "xor" for 0x402043>, <DisassemblerInsn "sub" for 0x402045>, <DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "sar" for 0x402054>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "xor" for 0x40205d>, <DisassemblerInsn "sub" for 0x40205f>, <DisassemblerInsn "mov" for 0x402061>, <DisassemblerInsn "xor" for 0x402064>, <DisassemblerInsn "sub" for 0x402066>, <DisassemblerInsn "sar" for 0x402068>, <DisassemblerInsn "xor" for 0x40206a>, <DisassemblerInsn "sub" for 0x40206c>, <DisassemblerInsn "mov" for 0x40206e>, <DisassemblerInsn "jmp" for 0x402071>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028d1>, <DisassemblerInsn "mov" for 0x4028d8>, <DisassemblerInsn "xor" for 0x4028dc>, <DisassemblerInsn "test" for 0x4028de>, <DisassemblerInsn "mov" for 0x4028e1>, <DisassemblerInsn "mov" for 0x4028e8>, <DisassemblerInsn "jne" for 0x4028ef>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4025f2>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022b0>, <DisassemblerInsn "mov" for 0x4022b7>, <DisassemblerInsn "cmp" for 0x4022bf>, <DisassemblerInsn "jne" for 0x4022c2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db5>, <DisassemblerInsn "lea" for 0x401dbd>, <DisassemblerInsn "mov" for 0x401dc4>, <DisassemblerInsn "call" for 0x401dc9>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402869>, <DisassemblerInsn "call" for 0x40286e>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402548>, <DisassemblerInsn "mov" for 0x40254f>, <DisassemblerInsn "mov" for 0x402556>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "mov" for 0x402561>, <DisassemblerInsn "mov" for 0x402568>, <DisassemblerInsn "cmp" for 0x40256d>, <DisassemblerInsn "mov" for 0x40256f>, <DisassemblerInsn "mov" for 0x402577>, <DisassemblerInsn "je" for 0x40257e>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "cmp" for 0x401ea7>, <DisassemblerInsn "mov" for 0x401eab>, <DisassemblerInsn "je" for 0x401eb2>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271f>, <DisassemblerInsn "mov" for 0x402724>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "mov" for 0x402730>, <DisassemblerInsn "jmp" for 0x402737>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402704>, <DisassemblerInsn "mov" for 0x40270c>, <DisassemblerInsn "lea" for 0x402711>, <DisassemblerInsn "mov" for 0x402718>, <DisassemblerInsn "call" for 0x40271a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dfc>, <DisassemblerInsn "mov" for 0x401e04>, <DisassemblerInsn "lea" for 0x401e09>, <DisassemblerInsn "mov" for 0x401e10>, <DisassemblerInsn "call" for 0x401e12>]'}], 'cfg_block_detailed_info': [{'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401fb3>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jmp~~0x402a5e>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jmp~~0x402a5e>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x401fb3>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x402920>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xcf]>', '<test~~al, 1>', '<jne~~0x4025f4>']}, {'block_Idx': 90, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jl~~0x402a5e>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x402a31>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x164], eax>', '<cmp~~eax, 0>', '<je~~0x402076>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~esi, dword ptr [rsp + 0x14c]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edi, dword ptr [rsp + 0x15c]>', '<mov~~r8, qword ptr [rsp + 0x168]>', '<mov~~dword ptr [r8], edi>', '<mov~~dword ptr [rcx + 0x308], esi>', '<xor~~r8d, r8d>', '<sub~~r8d, edi>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<sar~~edx, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x138], eax>', '<cmp~~eax, 0>', '<jne~~0x402174>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3f37]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<sub~~ecx, 3>', '<mov~~dword ptr [rsp + 0x184], eax>', '<je~~0x402a5e>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<cmp~~edx, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<je~~0x402920>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c8>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<call~~0x5000c0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x7b], al>', '<test~~al, 1>', '<jne~~0x402704>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, -1>', '<sete~~al>', '<mov~~byte ptr [rsp + 0xbb], al>', '<test~~al, 1>', '<jne~~0x4025f4>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x104>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x402309>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x184], eax>', '<ja~~0x402a5e>']}, {'block_Idx': 143, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3add]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1f0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<jmp~~0x402ab4>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10c]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4023dd>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x402423>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<je~~0x4029d5>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4028d1>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b69]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x7b]>', '<mov~~edx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<add~~rcx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~byte ptr [rsp + 0x8f], al>', '<jne~~0x4026a5>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40221e>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<je~~0x4024e6>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<je~~0x4029d5>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<cmp~~eax, 0>', '<jle~~0x401fa4>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x138], eax>', '<cmp~~eax, 0>', '<jne~~0x402174>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x188], rax>', '<cmp~~rax, 0>', '<je~~0x401f68>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<call~~rax>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x190]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 59, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x4021d1>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4023dd>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x402960>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x97], al>', '<test~~al, 1>', '<jne~~0x402704>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jmp~~0x4029d5>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x402798>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<jne~~0x4024e6>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1f8>', '<mov~~qword ptr [rsp + 0x1d0], rdi>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<lea~~rax, [rsp + 0x1f0]>', '<mov~~qword ptr [rsp + 0x1f0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<ja~~0x402ab4>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x37d3]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x180], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jl~~0x402a5e>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x168], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x174], eax>', '<cmp~~eax, 0>', '<je~~0x402076>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x4029d5>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<lea~~rsi, [rsp + 0x1f0]>', '<call~~0x5000b8>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jl~~0x402a5e>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1f0]>', '<call~~0x5000b8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x4400]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x43f7], eax>', '<mov~~eax, dword ptr [rip + 0x43f1]>', '<cmp~~eax, 1>', '<je~~0x401e28>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x8f]>', '<test~~al, 1>', '<jne~~0x402704>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402241>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40237b>']}, {'block_Idx': 149, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1bc], ecx>', '<mov~~dword ptr [rsp + 0x184], eax>', '<jl~~0x402a5e>']}, {'block_Idx': 136, 'blockInsts': ['<jmp~~0x40281d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1f0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x402174>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~edx, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402495>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<cmp~~eax, 0>', '<je~~0x40212d>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x402920>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x308>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~esi, dword ptr [rax + 0x308]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x1cf]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<jne~~0x402ab4>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x4431]>', '<mov~~qword ptr [rsp + 0x1c0], rax>', '<cmp~~rax, 0>', '<je~~0x401de2>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~esi, dword ptr [rcx + 8]>', '<mov~~dword ptr [rdx], esi>', '<mov~~ecx, dword ptr [rcx + 0xc]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x40234f>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3bb8]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x402920>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<cmp~~rax, 0>', '<je~~0x40281d>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<cmp~~eax, 0>', '<je~~0x40212d>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x40273c>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<jne~~0x402ab4>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3e3a]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3cec]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x4023c1>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x402798>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<call~~0x5000d0>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rsi, qword ptr [rcx + rax*8]>', '<test~~rsi, rsi>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x37], cl>', '<sub~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<sete~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x47], cl>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x4027db>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xe8]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x402960>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<lea~~rsi, [rsp + 0x1f0]>', '<call~~0x5000b8>']}, {'block_Idx': 135, 'blockInsts': ['<jmp~~0x40281d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x401e74>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1bc]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x3802]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x37f9], eax>', '<mov~~rax, qword ptr [rip + 0x37e2]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x402a14>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<cmp~~eax, -1>', '<sete~~al>', '<mov~~byte ptr [rsp + 0xd7], al>', '<test~~al, 1>', '<jne~~0x4025f4>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<movsxd~~rdi, eax>', '<call~~0x500040>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x40234f>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jmp~~0x4029d5>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x37]>', '<test~~al, 1>', '<jne~~0x4027e5>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402241>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x97]>', '<mov~~esi, dword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<mov~~ecx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~byte ptr [rsp + 0x8f], al>', '<je~~0x4026f7>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x402174>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x184]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1f0]>', '<call~~0x5000d0>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<cmp~~rax, 0>', '<je~~0x40262c>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<call~~0x500060>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1cf], al>', '<test~~al, 1>', '<jne~~0x401da0>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xe8]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x402960>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x402423>']}, {'block_Idx': 125, 'blockInsts': ['<jmp~~0x402943>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~dword ptr [rax], edx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x402960>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x408f]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4029d5>']}, {'block_Idx': 140, 'blockInsts': ['<jmp~~0x402ab4>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~rax, 0>', '<sete~~dl>', '<mov~~byte ptr [rsp + 0x36], dl>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x402920>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x40221e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1ec]>', '<add~~rsp, 0x1f8>', '<ret~~>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, -1>', '<je~~0x4022c4>']}, {'block_Idx': 129, 'blockInsts': ['<jmp~~0x40273c>']}, {'block_Idx': 132, 'blockInsts': ['<jmp~~0x4028f3>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x401f68>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xbb]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rcx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~byte ptr [rsp + 0xcf], al>', '<jne~~0x402580>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~esi, dword ptr [rsp + 0x164]>', '<mov~~ecx, dword ptr [rsp + 0x174]>', '<xor~~edi, edi>', '<sub~~edi, ecx>', '<mov~~ecx, dword ptr [rax + 0x300]>', '<mov~~dword ptr [rsp + 0x160], ecx>', '<sar~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x160]>', '<xor~~edx, edx>', '<sub~~edx, edi>', '<mov~~dword ptr [rax + 0x34], edx>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<sar~~edx, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax + 0x38], ecx>', '<jmp~~0x40212d>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~dl, byte ptr [rsp + 0x36]>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x402920>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x40262c>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x402309>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<lea~~rdi, [rip + 0x441c]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c8>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xd7]>', '<mov~~esi, dword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0xbc], edx>', '<mov~~ecx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~byte ptr [rsp + 0xcf], al>', '<je~~0x4025e7>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x1a8], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<je~~0x4029d5>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x402920>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c04]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x442b]>', '<mov~~al, 0>', '<call~~0x500050>']}], 'cfg_edge_info': [(96, 95), (81, 85), (90, 33), (98, 101), (70, 64), (42, 48), (127, 116), (134, 140), (31, 29), (103, 109), (83, 85), (106, 114), (13, 17), (115, 135), (72, 75), (52, 51), (99, 102), (130, 117), (107, 115), (20, 22), (116, 127), (148, 6), (29, 34), (140, 2), (8, 11), (39, 44), (23, 27), (147, 114), (123, 114), (47, 27), (123, 132), (135, 106), (58, 51), (82, 33), (48, 31), (17, 16), (86, 88), (97, 33), (95, 100), (120, 99), (74, 77), (75, 76), (100, 105), (113, 124), (111, 105), (94, 98), (101, 149), (145, 94), (44, 51), (105, 122), (108, 118), (125, 134), (51, 59), (0, 2), (80, 83), (139, 114), (1, 3), (68, 72), (27, 31), (96, 94), (16, 19), (102, 107), (64, 68), (50, 51), (110, 120), (59, 63), (109, 131), (28, 2), (103, 108), (89, 97), (106, 113), (92, 96), (34, 39), (13, 16), (15, 13), (55, 58), (54, 60), (72, 74), (88, 92), (81, 86), (111, 121), (128, 137), (129, 102), (29, 33), (77, 82), (61, 65), (122, 114), (23, 26), (94, 13), (78, 81), (149, 13), (98, 13), (55, 51), (42, 33), (73, 75), (99, 103), (84, 81), (20, 23), (114, 94), (4, 6), (60, 13), (95, 99), (104, 111), (113, 123), (71, 62), (91, 95), (45, 52), (6, 8), (137, 144), (108, 117), (46, 44), (84, 83), (35, 41), (43, 54), (86, 89), (121, 111), (118, 130), (75, 77), (138, 145), (132, 138), (35, 13), (76, 78), (85, 90), (102, 106), (90, 86), (62, 70), (139, 143), (52, 50), (70, 65), (131, 114), (64, 33), (124, 139), (80, 84), (8, 10), (1, 4), (16, 2), (117, 109), (145, 125), (27, 32), (83, 86), (144, 114), (88, 91), (73, 72), (63, 71), (128, 136), (3, 4), (18, 20), (50, 55), (21, 28), (61, 64), (130, 118), (107, 116), (78, 80), (116, 128), (7, 148), (136, 106), (22, 29), (65, 64), (134, 33), (39, 45), (34, 40), (19, 21), (74, 76), (92, 91), (110, 105), (100, 104), (149, 33), (41, 27), (117, 129), (18, 13), (58, 61), (32, 42), (118, 109), (26, 35), (44, 50), (143, 147), (104, 110), (0, 1), (40, 46), (71, 61), (91, 94), (41, 47), (33, 43), (4, 7), (59, 62), (121, 110), (148, 2), (40, 39), (10, 13), (45, 44), (76, 77), (68, 73), (114, 125), (6, 9)], 'cdg_edge_info': [(96, 95), (81, 85), (90, 33), (42, 48), (59, 64), (116, 116), (76, 43), (98, 101), (134, 140), (20, 29), (118, 131), (148, 13), (90, 60), (103, 109), (110, 102), (83, 85), (74, 82), (29, 59), (106, 114), (100, 110), (13, 17), (98, 149), (72, 75), (134, 60), (96, 106), (107, 106), (107, 115), (130, 117), (139, 147), (76, 54), (148, 6), (29, 34), (23, 27), (29, 43), (123, 114), (29, 70), (58, 51), (96, 99), (42, 43), (86, 88), (86, 33), (74, 13), (95, 100), (86, 97), (74, 77), (23, 29), (75, 76), (29, 54), (100, 105), (113, 124), (111, 105), (94, 98), (103, 131), (86, 60), (149, 43), (34, 62), (74, 43), (145, 94), (42, 54), (108, 118), (75, 60), (0, 2), (78, 86), (23, 31), (92, 94), (42, 29), (123, 145), (96, 94), (16, 19), (102, 107), (64, 68), (76, 33), (134, 2), (34, 64), (29, 13), (59, 63), (16, 28), (64, 13), (128, 144), (74, 54), (84, 86), (76, 60), (103, 108), (103, 117), (4, 148), (42, 13), (64, 43), (92, 96), (106, 113), (13, 16), (123, 138), (42, 31), (27, 42), (55, 58), (72, 74), (16, 21), (88, 92), (110, 122), (111, 121), (128, 137), (134, 13), (29, 33), (78, 81), (23, 35), (29, 51), (75, 82), (134, 43), (64, 54), (110, 106), (113, 139), (42, 33), (91, 102), (111, 114), (100, 114), (64, 72), (73, 75), (88, 94), (34, 59), (99, 103), (58, 62), (20, 23), (114, 94), (84, 81), (78, 83), (113, 114), (104, 111), (13, 2), (107, 128), (113, 123), (110, 99), (71, 62), (128, 114), (117, 114), (91, 95), (45, 52), (74, 33), (134, 54), (6, 8), (34, 70), (149, 54), (84, 83), (74, 60), (35, 41), (121, 111), (86, 89), (118, 130), (75, 77), (0, 4), (35, 13), (0, 13), (90, 13), (76, 78), (145, 13), (91, 106), (90, 86), (75, 43), (139, 143), (52, 50), (70, 65), (92, 13), (118, 114), (90, 43), (64, 33), (80, 84), (96, 13), (0, 6), (117, 109), (145, 125), (83, 86), (91, 99), (64, 60), (145, 134), (29, 60), (73, 72), (88, 91), (35, 27), (58, 59), (50, 55), (75, 54), (107, 116), (130, 118), (42, 60), (78, 80), (90, 54), (117, 102), (134, 33), (39, 45), (34, 40), (74, 76), (92, 91), (110, 105), (100, 104), (76, 82), (110, 114), (149, 33), (29, 62), (111, 122), (100, 122), (35, 29), (86, 13), (149, 60), (81, 90), (58, 70), (118, 109), (0, 1), (40, 46), (75, 13), (88, 13), (103, 114), (86, 43), (83, 90), (71, 70), (34, 51), (29, 64), (114, 13), (117, 131), (35, 31), (96, 102), (55, 64), (121, 110), (59, 71), (148, 2), (29, 39), (40, 39), (117, 106), (128, 106), (76, 13), (76, 77), (68, 73), (114, 125), (86, 54), (75, 33), (114, 134)], 'ddg_edge_info': [(137, 145), (95, 139), (90, 33), (101, 33), (65, 107), (65, 116), (99, 118), (40, 50), (65, 134), (73, 74), (62, 74), (52, 51), (62, 83), (115, 98), (0, 108), (62, 92), (31, 86), (62, 101), (109, 33), (31, 95), (62, 110), (74, 75), (31, 104), (95, 107), (31, 113), (95, 116), (65, 102), (82, 33), (117, 149), (65, 111), (128, 149), (109, 145), (143, 21), (65, 138), (101, 149), (62, 78), (145, 94), (31, 72), (62, 96), (51, 59), (110, 145), (31, 99), (95, 102), (31, 108), (95, 111), (96, 94), (65, 88), (106, 138), (109, 131), (65, 106), (63, 33), (65, 115), (143, 16), (109, 149), (65, 124), (124, 21), (105, 17), (92, 96), (62, 64), (54, 60), (62, 73), (0, 98), (31, 76), (63, 145), (137, 94), (0, 107), (31, 85), (51, 63), (31, 94), (31, 103), (95, 106), (98, 13), (65, 74), (106, 124), (65, 83), (65, 92), (117, 139), (65, 101), (99, 103), (143, 2), (128, 139), (65, 110), (60, 13), (124, 16), (105, 21), (0, 75), (62, 68), (85, 33), (0, 84), (31, 62), (62, 77), (31, 80), (137, 98), (31, 89), (43, 54), (101, 13), (64, 113), (76, 78), (65, 78), (85, 145), (68, 74), (65, 96), (65, 105), (124, 2), (115, 33), (143, 33), (105, 16), (0, 70), (39, 52), (83, 86), (63, 117), (39, 70), (109, 13), (31, 75), (0, 106), (115, 145), (31, 84), (143, 145), (116, 128), (65, 64), (134, 33), (68, 60), (65, 73), (86, 123), (109, 134), (105, 2), (8, 60), (31, 34), (63, 103), (0, 65), (0, 74), (83, 90), (31, 52), (63, 121), (0, 83), (63, 130), (31, 70), (115, 149), (124, 145), (46, 55), (65, 68), (77, 33), (65, 77), (68, 73), (65, 86), (62, 17), (54, 13), (0, 51), (63, 89), (31, 29), (63, 98), (63, 107), (138, 21), (63, 116), (0, 78), (13, 17), (31, 65), (72, 75), (62, 138), (85, 121), (85, 130), (86, 95), (65, 72), (96, 145), (21, 2), (6, 13), (62, 21), (54, 17), (63, 84), (0, 46), (8, 59), (137, 33), (0, 55), (8, 68), (31, 33), (63, 102), (0, 64), (85, 13), (138, 16), (0, 73), (63, 111), (143, 94), (31, 51), (104, 121), (94, 98), (62, 124), (115, 139), (85, 107), (105, 122), (108, 118), (85, 116), (31, 145), (85, 134), (86, 99), (109, 101), (46, 63), (115, 13), (96, 149), (62, 16), (63, 70), (0, 41), (54, 21), (0, 50), (63, 88), (138, 2), (63, 106), (0, 68), (143, 98), (124, 94), (13, 16), (65, 17), (115, 134), (72, 74), (62, 128), (62, 137), (85, 102), (137, 149), (85, 111), (46, 58), (8, 13), (62, 2), (42, 33), (63, 65), (0, 27), (63, 74), (54, 16), (63, 83), (0, 45), (20, 23), (63, 92), (52, 55), (63, 101), (33, 60), (104, 111), (62, 105), (124, 98), (105, 94), (65, 21), (62, 123), (45, 52), (34, 52), (85, 88), (31, 117), (137, 144), (85, 106), (34, 70), (108, 117), (85, 115), (85, 124), (86, 89), (118, 130), (0, 4), (138, 145), (96, 139), (0, 13), (8, 35), (54, 2), (90, 86), (1, 148), (0, 31), (0, 40), (63, 78), (52, 50), (115, 106), (64, 33), (62, 100), (110, 149), (62, 109), (16, 2), (115, 124), (65, 16), (62, 118), (145, 134), (105, 98), (85, 92), (31, 121), (85, 101), (31, 130), (85, 110), (107, 116), (130, 118), (64, 145), (0, 8), (65, 128), (0, 17), (65, 137), (100, 104), (63, 64), (137, 13), (63, 73), (31, 13), (62, 86), (52, 63), (115, 101), (62, 95), (104, 110), (65, 2), (62, 104), (31, 98), (62, 113), (31, 107), (31, 116), (85, 96), (137, 134), (122, 145), (85, 105), (31, 134), (65, 123), (0, 21), (63, 68), (62, 72), (52, 58), (110, 139), (62, 99), (51, 62), (62, 108), (31, 102), (31, 111), (138, 94), (106, 123), (101, 17), (65, 100), (130, 117), (65, 109), (65, 118), (0, 16), (124, 33), (76, 145), (62, 76), (73, 76), (62, 85), (0, 101), (109, 17), (62, 94), (144, 145), (31, 88), (62, 103), (97, 33), (95, 100), (143, 149), (31, 106), (85, 86), (31, 115), (95, 118), (138, 98), (101, 21), (63, 13), (65, 95), (64, 139), (65, 104), (65, 113), (86, 145), (0, 2), (80, 83), (27, 86), (105, 33), (62, 80), (102, 116), (63, 134), (31, 74), (62, 89), (109, 21), (31, 83), (137, 101), (31, 92), (103, 108), (51, 70), (31, 101), (95, 104), (89, 33), (31, 110), (95, 113), (105, 145), (101, 16), (76, 90), (46, 86), (68, 86), (65, 99), (63, 17), (65, 108), (29, 33), (65, 117), (77, 82), (94, 13), (40, 51), (39, 55), (8, 86), (113, 139), (62, 75), (62, 84), (63, 138), (109, 16), (31, 78), (31, 96), (95, 99), (95, 108), (101, 2), (105, 149), (65, 76), (65, 85), (88, 96), (65, 94), (147, 145), (63, 21), (65, 103), (143, 13), (121, 111), (85, 17), (31, 46), (27, 94), (63, 115), (31, 55), (63, 124), (0, 86), (109, 2), (62, 70), (31, 64), (31, 73), (0, 104), (143, 134), (124, 139), (95, 103), (85, 138), (65, 80), (68, 76), (65, 89), (63, 16), (115, 17), (65, 98), (68, 94), (128, 145), (117, 145), (139, 145), (86, 139), (143, 17), (21, 28), (124, 13), (0, 63), (0, 72), (63, 110), (85, 21), (31, 50), (62, 65), (39, 63), (8, 94), (149, 33), (138, 33), (63, 128), (31, 68), (63, 137), (115, 138), (31, 77), (96, 54), (124, 134), (143, 147), (124, 143), (65, 75), (63, 2), (65, 84), (115, 21), (121, 110), (62, 33), (124, 17), (105, 13), (0, 58), (63, 96), (8, 71), (63, 105), (85, 16), (31, 45), (0, 76), (63, 123), (52, 86), (0, 85), (31, 63), (94, 101), (62, 145), (105, 134), (85, 128), (17, 21), (108, 130), (85, 137), (86, 102), (115, 16), (85, 2), (63, 100), (31, 40), (63, 109), (63, 118), (0, 80), (143, 101), (31, 58), (131, 145), (13, 28), (31, 143), (85, 123), (86, 88), (17, 16), (46, 70), (86, 106), (115, 2), (27, 29), (137, 17), (63, 77), (0, 39), (31, 17), (63, 86), (63, 95), (63, 104), (63, 113), (115, 123), (124, 101), (62, 117), (34, 46), (123, 145), (65, 33), (85, 100), (85, 109), (17, 2), (28, 2), (31, 138), (85, 118), (86, 92), (109, 94), (89, 97), (8, 29), (65, 145), (63, 72), (137, 21), (111, 121), (0, 34), (0, 43), (31, 21), (0, 52), (4, 13), (63, 99), (138, 13), (31, 39), (149, 13), (63, 108), (23, 35), (1, 16), (62, 121), (105, 101), (62, 130), (85, 95), (31, 124), (85, 104), (85, 113), (106, 145), (109, 98), (138, 134), (86, 96), (0, 20), (62, 13), (76, 149), (137, 16), (8, 42), (63, 76), (31, 16), (29, 83), (63, 85), (63, 94), (138, 17), (62, 98), (115, 113), (62, 107), (35, 13), (62, 116), (85, 90), (62, 134), (85, 99), (45, 63), (31, 128), (85, 108), (31, 137), (85, 117), (137, 2), (63, 62), (31, 2), (63, 71), (63, 80), (52, 70), (62, 102), (62, 111), (74, 76), (31, 105), (85, 94), (45, 58), (31, 123), (85, 103), (0, 1), (65, 121), (40, 46), (65, 130), (76, 139), (0, 28), (63, 75), (33, 43), (115, 94), (62, 88), (148, 2), (62, 106), (31, 100), (65, 13), (62, 115), (31, 109), (85, 89), (31, 118), (85, 98), (138, 101)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 311, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 312, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 313, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 315, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 316, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 317, 'instruction': 'movq\t%rcx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 318, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 319, 'instruction': 'je\t.LBB17_44'}, {'instIndex': 321, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 322, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 325, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 326, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 327, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 330, 'instruction': 'cmpq\t$0, 0x2d8(%rcx)'}, {'instIndex': 331, 'instruction': 'movl\t%eax, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 332, 'instruction': 'jne\t.LBB17_47'}, {'instIndex': 334, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 335, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 336, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 337, 'instruction': 'movl\t%ecx, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 338, 'instruction': 'movl\t%eax, 0x184(%rsp)                 # 4-byte Spill'}, {'instIndex': 339, 'instruction': 'jl\t.LBB17_87'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O2/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O2/utils.s---avcodec_open2---after
function id: 17
function flag: True
There are 629 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O2/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O2/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 946 nodes and 1670 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 629 instructions in binary file.
[4205040, 4205067, 4205096, 4205110, 4205138, 4205186, 4205199]
The execution time of patched subCFG information extraction via angr: 0:00:02.434671
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a8f>, <DisassemblerInsn "cmp" for 0x402a96>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "jl" for 0x402aa0>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "mov" for 0x402aad>, <DisassemblerInsn "mov" for 0x402ab5>, <DisassemblerInsn "mov" for 0x402ab8>, <DisassemblerInsn "mov" for 0x402ac0>, <DisassemblerInsn "mov" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acf>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402ade>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "movzx" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "cmp" for 0x402afb>, <DisassemblerInsn "jle" for 0x402b01>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f3d>, <DisassemblerInsn "mov" for 0x402f44>, <DisassemblerInsn "lea" for 0x402f47>, <DisassemblerInsn "call" for 0x402f4f>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a36>, <DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "mov" for 0x402a4c>, <DisassemblerInsn "mov" for 0x402a4f>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a61>, <DisassemblerInsn "cmp" for 0x402a69>, <DisassemblerInsn "mov" for 0x402a71>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "jne" for 0x402a80>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029f0>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "cmp" for 0x402a06>, <DisassemblerInsn "jne" for 0x402a09>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "call" for 0x402a8a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a3>, <DisassemblerInsn "mov" for 0x4029aa>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "sete" for 0x4029b5>, <DisassemblerInsn "cmp" for 0x4029b8>, <DisassemblerInsn "sete" for 0x4029bb>, <DisassemblerInsn "or" for 0x4029be>, <DisassemblerInsn "test" for 0x4029c0>, <DisassemblerInsn "jne" for 0x4029c2>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acf>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402ade>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "movzx" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "cmp" for 0x402afb>, <DisassemblerInsn "jle" for 0x402b01>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a0b>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "add" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1a>, <DisassemblerInsn "cmp" for 0x402a22>, <DisassemblerInsn "je" for 0x402a26>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a61>, <DisassemblerInsn "cmp" for 0x402a69>, <DisassemblerInsn "mov" for 0x402a71>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "jne" for 0x402a80>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a28>, <DisassemblerInsn "cmp" for 0x402a30>, <DisassemblerInsn "jne" for 0x402a34>]'}], 'cfg_block_detailed_info': [{'block_Idx': 72, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x402f3d>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402b36>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402ac7>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x402a52>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4029f0>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402b36>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402a36>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402ac7>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402a52>']}], 'cfg_edge_info': [(64, 66), (70, 72), (66, 68), (67, 71), (69, 68), (68, 71), (72, 75), (62, 64), (67, 70), (68, 70), (72, 26), (69, 67), (64, 67), (66, 69)]}]}
{'avcodec_open2': [4205040, 4205067, 4205096, 4205110, 4205138, 4205186, 4205199]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O2/utils.o---after
The extraction of function: avcodec_open2
[4205040, 4205067, 4205096, 4205110, 4205138, 4205186, 4205199]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 141 nodes and 229 edges in CFGEmulated.
It has 141 nodes and 357 edges in CDG.
It has 2264 nodes and 3015 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205040, 4205067, 4205096, 4205110, 4205138, 4205186, 4205199]
{4205572, 4206086, 4205067, 4204570, 4205599, 4206113, 4205096, 4205616, 4206130, 4205110, 4203582, 4206144, 4204106, 4205643, 4205138, 4205659, 4204635, 4206184, 4204655, 4203640, 4205691, 4204160, 4205186, 4206220, 4205199, 4205718, 4206235, 4204703, 4205222, 4203690, 4205746, 4206260, 4205255, 4203720, 4205773, 4205790, 4204766, 4203232, 4206304, 4204786, 4206323, 4205817, 4205315, 4206350, 4206352, 4205843, 4204309, 4204823, 4206365, 4205349, 4203817, 4203308, 4205869, 4205871, 4205366, 4203835, 4206397, 4205381, 4203334, 4205900, 4204365, 4204881, 4203859, 4206420, 4205403, 4203360, 4203875, 4206440, 4205930, 4203892, 4206453, 4203381, 4205433, 4204929, 4204417, 4205961, 4203403, 4205455, 4203921, 4206483, 4203426, 4204963, 4205988, 4204453, 4203944, 4206005, 4205499, 4204996, 4206031, 4203988, 4204504, 4204509, 4205023, 4205535, 4206055, 4203496, 4205040, 4206070, 4204538, 4204543}
[91, 132, 140, 84, 7, 63, 112, 17, 121, 99, 86, 51, 68, 73, 8, 41, 104, 114, 133, 31, 69, 100, 44, 122, 56, 101, 102, 46, 27, 26, 83, 124, 22, 33, 106, 54, 131, 138, 43, 135, 87, 123, 93, 62, 4, 92, 130, 16, 129, 139, 40, 75, 58, 18, 67, 15, 113, 116, 85, 21, 52, 50, 108, 78, 74, 117, 125, 103, 13, 79, 20, 60, 111, 90, 9, 82, 3, 19, 107, 118, 77, 29, 55, 35, 10, 76, 134, 45, 136, 2, 6, 34, 61, 97, 64, 89, 109, 11, 28, 1, 126, 95, 32, 0, 39, 47, 48, 72, 105, 127, 66, 42, 98, 23, 96, 81]
The execution time of patched slicing information extraction via angr: 0:00:26.485611
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a8f>, <DisassemblerInsn "cmp" for 0x402a96>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "jl" for 0x402aa0>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402df6>, <DisassemblerInsn "mov" for 0x402dfa>, <DisassemblerInsn "cmp" for 0x402e02>, <DisassemblerInsn "je" for 0x402e04>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e9b>, <DisassemblerInsn "mov" for 0x402e9e>, <DisassemblerInsn "mov" for 0x402ea0>, <DisassemblerInsn "mov" for 0x402ea7>, <DisassemblerInsn "jl" for 0x402eae>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a36>, <DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "mov" for 0x402a4c>, <DisassemblerInsn "mov" for 0x402a4f>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a61>, <DisassemblerInsn "cmp" for 0x402a69>, <DisassemblerInsn "mov" for 0x402a71>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "jne" for 0x402a80>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402375>, <DisassemblerInsn "lea" for 0x40237d>, <DisassemblerInsn "mov" for 0x402384>, <DisassemblerInsn "call" for 0x402389>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4027d8>, <DisassemblerInsn "jl" for 0x4027db>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dcf>, <DisassemblerInsn "mov" for 0x402dd4>, <DisassemblerInsn "mov" for 0x402ddc>, <DisassemblerInsn "mov" for 0x402dde>, <DisassemblerInsn "call" for 0x402de2>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ee0>, <DisassemblerInsn "lea" for 0x402ee5>, <DisassemblerInsn "mov" for 0x402eec>, <DisassemblerInsn "call" for 0x402ef1>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d89>, <DisassemblerInsn "mov" for 0x402d91>, <DisassemblerInsn "lea" for 0x402d96>, <DisassemblerInsn "mov" for 0x402d9d>, <DisassemblerInsn "call" for 0x402d9f>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b25>, <DisassemblerInsn "mov" for 0x402b2a>, <DisassemblerInsn "jmp" for 0x402b31>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a82>, <DisassemblerInsn "call" for 0x402a8a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402754>, <DisassemblerInsn "mov" for 0x40275c>, <DisassemblerInsn "test" for 0x402762>, <DisassemblerInsn "setne" for 0x402764>, <DisassemblerInsn "xor" for 0x402767>, <DisassemblerInsn "or" for 0x40276a>, <DisassemblerInsn "xor" for 0x40276c>, <DisassemblerInsn "test" for 0x40276e>, <DisassemblerInsn "mov" for 0x402771>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "jne" for 0x40277f>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402917>, <DisassemblerInsn "mov" for 0x40291e>, <DisassemblerInsn "mov" for 0x402926>, <DisassemblerInsn "add" for 0x402929>, <DisassemblerInsn "mov" for 0x402930>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "cmp" for 0x40293e>, <DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402948>, <DisassemblerInsn "jne" for 0x40294f>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402981>, <DisassemblerInsn "mov" for 0x402989>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402997>, <DisassemblerInsn "cmp" for 0x40299e>, <DisassemblerInsn "jne" for 0x4029a1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e8>, <DisassemblerInsn "mov" for 0x4023f0>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "add" for 0x4023fb>, <DisassemblerInsn "mov" for 0x402402>, <DisassemblerInsn "cmp" for 0x40240a>, <DisassemblerInsn "sete" for 0x402412>, <DisassemblerInsn "cmp" for 0x402415>, <DisassemblerInsn "setne" for 0x402419>, <DisassemblerInsn "and" for 0x40241c>, <DisassemblerInsn "mov" for 0x40241e>, <DisassemblerInsn "test" for 0x402423>, <DisassemblerInsn "mov" for 0x402426>, <DisassemblerInsn "jne" for 0x40242d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fc>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "cmp" for 0x40250b>, <DisassemblerInsn "je" for 0x40250f>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b8f>, <DisassemblerInsn "mov" for 0x402b96>, <DisassemblerInsn "mov" for 0x402b9e>, <DisassemblerInsn "mov" for 0x402ba1>, <DisassemblerInsn "xor" for 0x402ba8>, <DisassemblerInsn "mov" for 0x402baa>, <DisassemblerInsn "mov" for 0x402bb2>, <DisassemblerInsn "jmp" for 0x402bb9>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d13>, <DisassemblerInsn "mov" for 0x402d18>, <DisassemblerInsn "xor" for 0x402d1b>, <DisassemblerInsn "cmp" for 0x402d1d>, <DisassemblerInsn "mov" for 0x402d21>, <DisassemblerInsn "mov" for 0x402d26>, <DisassemblerInsn "je" for 0x402d2b>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402da4>, <DisassemblerInsn "mov" for 0x402da9>, <DisassemblerInsn "jmp" for 0x402db0>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "lea" for 0x402584>, <DisassemblerInsn "call" for 0x40258c>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028de>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "cmp" for 0x4028ed>, <DisassemblerInsn "je" for 0x4028f0>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e68>, <DisassemblerInsn "mov" for 0x402e6f>, <DisassemblerInsn "mov" for 0x402e77>, <DisassemblerInsn "and" for 0x402e7d>, <DisassemblerInsn "cmp" for 0x402e80>, <DisassemblerInsn "mov" for 0x402e83>, <DisassemblerInsn "jne" for 0x402e8a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402680>, <DisassemblerInsn "mov" for 0x402688>, <DisassemblerInsn "add" for 0x40268b>, <DisassemblerInsn "mov" for 0x40268f>, <DisassemblerInsn "mov" for 0x402697>, <DisassemblerInsn "mov" for 0x40269a>, <DisassemblerInsn "cmp" for 0x4026a1>, <DisassemblerInsn "je" for 0x4026a4>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d2d>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027a5>, <DisassemblerInsn "mov" for 0x4027ad>, <DisassemblerInsn "mov" for 0x4027b5>, <DisassemblerInsn "mov" for 0x4027bc>, <DisassemblerInsn "add" for 0x4027c3>, <DisassemblerInsn "mov" for 0x4027c9>, <DisassemblerInsn "xor" for 0x4027d1>, <DisassemblerInsn "call" for 0x4027d3>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cde>, <DisassemblerInsn "mov" for 0x402ce6>, <DisassemblerInsn "mov" for 0x402cea>, <DisassemblerInsn "cmp" for 0x402cef>, <DisassemblerInsn "je" for 0x402cf3>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c4b>, <DisassemblerInsn "mov" for 0x402c50>, <DisassemblerInsn "mov" for 0x402c52>, <DisassemblerInsn "cmp" for 0x402c56>, <DisassemblerInsn "je" for 0x402c59>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ee>, <DisassemblerInsn "mov" for 0x4025f5>, <DisassemblerInsn "mov" for 0x4025fd>, <DisassemblerInsn "xor" for 0x402604>, <DisassemblerInsn "sub" for 0x402607>, <DisassemblerInsn "mov" for 0x40260a>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "sar" for 0x402617>, <DisassemblerInsn "mov" for 0x40261a>, <DisassemblerInsn "xor" for 0x402621>, <DisassemblerInsn "sub" for 0x402623>, <DisassemblerInsn "mov" for 0x402626>, <DisassemblerInsn "xor" for 0x402629>, <DisassemblerInsn "sub" for 0x40262b>, <DisassemblerInsn "sar" for 0x40262d>, <DisassemblerInsn "mov" for 0x40262f>, <DisassemblerInsn "xor" for 0x402637>, <DisassemblerInsn "sub" for 0x402639>, <DisassemblerInsn "mov" for 0x40263b>, <DisassemblerInsn "mov" for 0x40263e>, <DisassemblerInsn "jmp" for 0x402645>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402529>, <DisassemblerInsn "cmp" for 0x402531>, <DisassemblerInsn "je" for 0x402539>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b8>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c1>, <DisassemblerInsn "call" for 0x4024c3>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029df>, <DisassemblerInsn "mov" for 0x4029e4>, <DisassemblerInsn "jmp" for 0x4029eb>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402cb0>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402565>, <DisassemblerInsn "mov" for 0x40256d>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "lea" for 0x402584>, <DisassemblerInsn "call" for 0x40258c>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f3d>, <DisassemblerInsn "mov" for 0x402f44>, <DisassemblerInsn "lea" for 0x402f47>, <DisassemblerInsn "call" for 0x402f4f>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402db5>, <DisassemblerInsn "mov" for 0x402dbd>, <DisassemblerInsn "mov" for 0x402dc4>, <DisassemblerInsn "cmp" for 0x402dc9>, <DisassemblerInsn "je" for 0x402dcd>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f68>, <DisassemblerInsn "call" for 0x402f70>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e32>, <DisassemblerInsn "mov" for 0x402e3a>, <DisassemblerInsn "mov" for 0x402e3e>, <DisassemblerInsn "mov" for 0x402e40>, <DisassemblerInsn "mov" for 0x402e47>, <DisassemblerInsn "mov" for 0x402e4f>, <DisassemblerInsn "mov" for 0x402e52>, <DisassemblerInsn "mov" for 0x402e56>, <DisassemblerInsn "cmp" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "je" for 0x402e66>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e21>, <DisassemblerInsn "mov" for 0x402e26>, <DisassemblerInsn "jmp" for 0x402e2d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f54>, <DisassemblerInsn "add" for 0x402f5c>, <DisassemblerInsn "call" for 0x402f63>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e06>, <DisassemblerInsn "mov" for 0x402e0e>, <DisassemblerInsn "lea" for 0x402e13>, <DisassemblerInsn "mov" for 0x402e1a>, <DisassemblerInsn "call" for 0x402e1c>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acf>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402ade>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "movzx" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "cmp" for 0x402afb>, <DisassemblerInsn "jle" for 0x402b01>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ccd>, <DisassemblerInsn "mov" for 0x402cd2>, <DisassemblerInsn "jmp" for 0x402cd9>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b5b>, <DisassemblerInsn "mov" for 0x402b63>, <DisassemblerInsn "mov" for 0x402b67>, <DisassemblerInsn "cmp" for 0x402b6f>, <DisassemblerInsn "je" for 0x402b73>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40285b>, <DisassemblerInsn "add" for 0x402863>, <DisassemblerInsn "call" for 0x40286a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402360>, <DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "cmp" for 0x40236f>, <DisassemblerInsn "je" for 0x402373>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b45>, <DisassemblerInsn "cmp" for 0x402b4d>, <DisassemblerInsn "je" for 0x402b55>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c7b>, <DisassemblerInsn "mov" for 0x402c80>, <DisassemblerInsn "mov" for 0x402c85>, <DisassemblerInsn "cmp" for 0x402c88>, <DisassemblerInsn "mov" for 0x402c8b>, <DisassemblerInsn "mov" for 0x402c90>, <DisassemblerInsn "je" for 0x402c94>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ef3>, <DisassemblerInsn "mov" for 0x402ef7>, <DisassemblerInsn "test" for 0x402efe>, <DisassemblerInsn "mov" for 0x402f01>, <DisassemblerInsn "jne" for 0x402f08>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d6a>, <DisassemblerInsn "mov" for 0x402d6f>, <DisassemblerInsn "mov" for 0x402d74>, <DisassemblerInsn "add" for 0x402d79>, <DisassemblerInsn "mov" for 0x402d7d>, <DisassemblerInsn "cmp" for 0x402d82>, <DisassemblerInsn "je" for 0x402d85>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "mov" for 0x40238d>, <DisassemblerInsn "cmp" for 0x402392>, <DisassemblerInsn "mov" for 0x402395>, <DisassemblerInsn "jne" for 0x40239c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025d4>, <DisassemblerInsn "mov" for 0x4025dc>, <DisassemblerInsn "mov" for 0x4025e2>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "je" for 0x4025ec>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40281a>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "mov" for 0x40282a>, <DisassemblerInsn "mov" for 0x402832>, <DisassemblerInsn "mov" for 0x402838>, <DisassemblerInsn "mov" for 0x40283e>, <DisassemblerInsn "mov" for 0x402845>, <DisassemblerInsn "mov" for 0x40284c>, <DisassemblerInsn "cmp" for 0x402854>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40284c>, <DisassemblerInsn "cmp" for 0x402854>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "mov" for 0x402449>, <DisassemblerInsn "add" for 0x40244c>, <DisassemblerInsn "mov" for 0x402453>, <DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "cmp" for 0x402467>, <DisassemblerInsn "mov" for 0x40246b>, <DisassemblerInsn "je" for 0x402472>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027dd>, <DisassemblerInsn "mov" for 0x4027e5>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "mov" for 0x4027f0>, <DisassemblerInsn "xor" for 0x4027f3>, <DisassemblerInsn "call" for 0x4027f5>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023dc>, <DisassemblerInsn "jmp" for 0x4023e3>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "mov" for 0x402d37>, <DisassemblerInsn "lea" for 0x402d3c>, <DisassemblerInsn "mov" for 0x402d43>, <DisassemblerInsn "call" for 0x402d45>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c96>, <DisassemblerInsn "mov" for 0x402c9a>, <DisassemblerInsn "mov" for 0x402c9f>, <DisassemblerInsn "add" for 0x402ca3>, <DisassemblerInsn "mov" for 0x402ca7>, <DisassemblerInsn "cmp" for 0x402cac>, <DisassemblerInsn "je" for 0x402cae>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a28>, <DisassemblerInsn "cmp" for 0x402a30>, <DisassemblerInsn "jne" for 0x402a34>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f10>, <DisassemblerInsn "call" for 0x402f18>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402728>, <DisassemblerInsn "mov" for 0x402730>, <DisassemblerInsn "mov" for 0x402737>, <DisassemblerInsn "mov" for 0x40273d>, <DisassemblerInsn "mov" for 0x402744>, <DisassemblerInsn "jmp" for 0x40274b>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a6>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b4>, <DisassemblerInsn "mov" for 0x4026bc>, <DisassemblerInsn "mov" for 0x4026c4>, <DisassemblerInsn "mov" for 0x4026cc>, <DisassemblerInsn "mov" for 0x4026ce>, <DisassemblerInsn "xor" for 0x4026d4>, <DisassemblerInsn "sub" for 0x4026d7>, <DisassemblerInsn "mov" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "sar" for 0x4026e7>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "xor" for 0x4026f1>, <DisassemblerInsn "sub" for 0x4026f3>, <DisassemblerInsn "mov" for 0x4026f6>, <DisassemblerInsn "xor" for 0x4026f8>, <DisassemblerInsn "sub" for 0x4026fa>, <DisassemblerInsn "sar" for 0x4026fc>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "xor" for 0x402706>, <DisassemblerInsn "sub" for 0x402708>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270c>, <DisassemblerInsn "jmp" for 0x402713>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb2>, <DisassemblerInsn "mov" for 0x402cba>, <DisassemblerInsn "lea" for 0x402cbf>, <DisassemblerInsn "mov" for 0x402cc6>, <DisassemblerInsn "call" for 0x402cc8>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029cc>, <DisassemblerInsn "lea" for 0x4029d1>, <DisassemblerInsn "mov" for 0x4029d8>, <DisassemblerInsn "call" for 0x4029da>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "mov" for 0x4028f9>, <DisassemblerInsn "mov" for 0x402901>, <DisassemblerInsn "mov" for 0x402907>, <DisassemblerInsn "mov" for 0x40290e>, <DisassemblerInsn "jmp" for 0x402915>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c1f>, <DisassemblerInsn "mov" for 0x402c24>, <DisassemblerInsn "jmp" for 0x402c2b>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bbb>, <DisassemblerInsn "mov" for 0x402bc0>, <DisassemblerInsn "mov" for 0x402bc8>, <DisassemblerInsn "cmp" for 0x402bcb>, <DisassemblerInsn "mov" for 0x402bce>, <DisassemblerInsn "mov" for 0x402bd6>, <DisassemblerInsn "je" for 0x402bdd>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c04>, <DisassemblerInsn "mov" for 0x402c0c>, <DisassemblerInsn "lea" for 0x402c11>, <DisassemblerInsn "mov" for 0x402c18>, <DisassemblerInsn "call" for 0x402c1a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eb4>, <DisassemblerInsn "mov" for 0x402ebb>, <DisassemblerInsn "mov" for 0x402ebf>, <DisassemblerInsn "add" for 0x402ec5>, <DisassemblerInsn "mov" for 0x402ec8>, <DisassemblerInsn "mov" for 0x402ece>, <DisassemblerInsn "mov" for 0x402ed5>, <DisassemblerInsn "cmp" for 0x402eda>, <DisassemblerInsn "je" for 0x402ede>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029f0>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "cmp" for 0x402a06>, <DisassemblerInsn "jne" for 0x402a09>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402478>, <DisassemblerInsn "mov" for 0x402480>, <DisassemblerInsn "mov" for 0x402488>, <DisassemblerInsn "mov" for 0x40248b>, <DisassemblerInsn "add" for 0x402492>, <DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "cmp" for 0x4024a1>, <DisassemblerInsn "jle" for 0x4024a4>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f75>, <DisassemblerInsn "mov" for 0x402f7d>, <DisassemblerInsn "mov" for 0x402f80>, <DisassemblerInsn "mov" for 0x402f87>, <DisassemblerInsn "jmp" for 0x402f8e>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bdf>, <DisassemblerInsn "mov" for 0x402be6>, <DisassemblerInsn "mov" for 0x402bee>, <DisassemblerInsn "add" for 0x402bf5>, <DisassemblerInsn "mov" for 0x402bf9>, <DisassemblerInsn "cmp" for 0x402bfe>, <DisassemblerInsn "je" for 0x402c00>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b03>, <DisassemblerInsn "mov" for 0x402b0a>, <DisassemblerInsn "mov" for 0x402b12>, <DisassemblerInsn "lea" for 0x402b17>, <DisassemblerInsn "mov" for 0x402b1e>, <DisassemblerInsn "call" for 0x402b20>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023c4>, <DisassemblerInsn "lea" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d0>, <DisassemblerInsn "call" for 0x4023d2>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a59>, <DisassemblerInsn "mov" for 0x402a61>, <DisassemblerInsn "cmp" for 0x402a69>, <DisassemblerInsn "mov" for 0x402a71>, <DisassemblerInsn "mov" for 0x402a79>, <DisassemblerInsn "jne" for 0x402a80>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402346>, <DisassemblerInsn "mov" for 0x40234e>, <DisassemblerInsn "lea" for 0x402351>, <DisassemblerInsn "xor" for 0x402359>, <DisassemblerInsn "call" for 0x40235b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402f0e>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cf9>, <DisassemblerInsn "mov" for 0x402d01>, <DisassemblerInsn "mov" for 0x402d08>, <DisassemblerInsn "cmp" for 0x402d0d>, <DisassemblerInsn "je" for 0x402d11>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402c02>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a3>, <DisassemblerInsn "mov" for 0x4029aa>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "sete" for 0x4029b5>, <DisassemblerInsn "cmp" for 0x4029b8>, <DisassemblerInsn "sete" for 0x4029bb>, <DisassemblerInsn "or" for 0x4029be>, <DisassemblerInsn "test" for 0x4029c0>, <DisassemblerInsn "jne" for 0x4029c2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402591>, <DisassemblerInsn "cmp" for 0x402598>, <DisassemblerInsn "mov" for 0x40259b>, <DisassemblerInsn "jl" for 0x4025a2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "xor" for 0x402789>, <DisassemblerInsn "cmp" for 0x40278b>, <DisassemblerInsn "mov" for 0x40278f>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402798>, <DisassemblerInsn "je" for 0x40279f>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c8>, <DisassemblerInsn "mov" for 0x4024cb>, <DisassemblerInsn "mov" for 0x4024d3>, <DisassemblerInsn "mov" for 0x4024db>, <DisassemblerInsn "mov" for 0x4024de>, <DisassemblerInsn "cmp" for 0x4024e3>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "je" for 0x4024ee>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40242f>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4027fa>, <DisassemblerInsn "jge" for 0x4027fd>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d87>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402715>, <DisassemblerInsn "cmp" for 0x40271c>, <DisassemblerInsn "mov" for 0x40271f>, <DisassemblerInsn "je" for 0x402726>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d4c>, <DisassemblerInsn "mov" for 0x402d51>, <DisassemblerInsn "mov" for 0x402d56>, <DisassemblerInsn "cmp" for 0x402d5a>, <DisassemblerInsn "mov" for 0x402d5e>, <DisassemblerInsn "mov" for 0x402d63>, <DisassemblerInsn "je" for 0x402d68>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f93>, <DisassemblerInsn "add" for 0x402f9a>, <DisassemblerInsn "ret" for 0x402fa1>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a2>, <DisassemblerInsn "add" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ab>, <DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "cmp" for 0x4023b7>, <DisassemblerInsn "je" for 0x4023ba>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025a8>, <DisassemblerInsn "mov" for 0x4025b0>, <DisassemblerInsn "add" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025ba>, <DisassemblerInsn "mov" for 0x4025c2>, <DisassemblerInsn "mov" for 0x4025c8>, <DisassemblerInsn "cmp" for 0x4025cf>, <DisassemblerInsn "je" for 0x4025d2>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40286f>, <DisassemblerInsn "mov" for 0x402877>, <DisassemblerInsn "add" for 0x40287a>, <DisassemblerInsn "mov" for 0x40287e>, <DisassemblerInsn "mov" for 0x402886>, <DisassemblerInsn "cmp" for 0x40288b>, <DisassemblerInsn "mov" for 0x402892>, <DisassemblerInsn "ja" for 0x402899>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c30>, <DisassemblerInsn "mov" for 0x402c38>, <DisassemblerInsn "mov" for 0x402c3c>, <DisassemblerInsn "cmp" for 0x402c41>, <DisassemblerInsn "je" for 0x402c45>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40289f>, <DisassemblerInsn "mov" for 0x4028a7>, <DisassemblerInsn "mov" for 0x4028af>, <DisassemblerInsn "mov" for 0x4028b7>, <DisassemblerInsn "mov" for 0x4028ba>, <DisassemblerInsn "add" for 0x4028bd>, <DisassemblerInsn "mov" for 0x4028c4>, <DisassemblerInsn "mov" for 0x4028cc>, <DisassemblerInsn "mov" for 0x4028d2>, <DisassemblerInsn "cmp" for 0x4028d9>, <DisassemblerInsn "je" for 0x4028dc>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b36>, <DisassemblerInsn "cmp" for 0x402b3e>, <DisassemblerInsn "jne" for 0x402b43>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c5b>, <DisassemblerInsn "mov" for 0x402c5f>, <DisassemblerInsn "mov" for 0x402c67>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "xor" for 0x402c6e>, <DisassemblerInsn "mov" for 0x402c70>, <DisassemblerInsn "mov" for 0x402c75>, <DisassemblerInsn "jmp" for 0x402c79>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "call" for 0x402439>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f1d>, <DisassemblerInsn "mov" for 0x402f25>, <DisassemblerInsn "mov" for 0x402f29>, <DisassemblerInsn "mov" for 0x402f31>, <DisassemblerInsn "mov" for 0x402f34>, <DisassemblerInsn "jmp" for 0x402f3b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "cmp" for 0x402334>, <DisassemblerInsn "sete" for 0x402338>, <DisassemblerInsn "mov" for 0x40233b>, <DisassemblerInsn "test" for 0x402342>, <DisassemblerInsn "jne" for 0x402344>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402de7>, <DisassemblerInsn "mov" for 0x402de9>, <DisassemblerInsn "mov" for 0x402ded>, <DisassemblerInsn "cmp" for 0x402df1>, <DisassemblerInsn "je" for 0x402df4>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aa6>, <DisassemblerInsn "mov" for 0x402aad>, <DisassemblerInsn "mov" for 0x402ab5>, <DisassemblerInsn "mov" for 0x402ab8>, <DisassemblerInsn "mov" for 0x402ac0>, <DisassemblerInsn "mov" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acf>, <DisassemblerInsn "mov" for 0x402ad7>, <DisassemblerInsn "mov" for 0x402ade>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "movzx" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "cmp" for 0x402afb>, <DisassemblerInsn "jle" for 0x402b01>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402543>, <DisassemblerInsn "lea" for 0x402546>, <DisassemblerInsn "call" for 0x40254e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4022e0>, <DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "lea" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "cmp" for 0x402318>, <DisassemblerInsn "mov" for 0x40231f>, <DisassemblerInsn "ja" for 0x402326>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40264a>, <DisassemblerInsn "mov" for 0x402652>, <DisassemblerInsn "add" for 0x402655>, <DisassemblerInsn "mov" for 0x402659>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "mov" for 0x402664>, <DisassemblerInsn "cmp" for 0x40266b>, <DisassemblerInsn "sete" for 0x40266e>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "test" for 0x402678>, <DisassemblerInsn "jne" for 0x40267a>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402511>, <DisassemblerInsn "mov" for 0x402519>, <DisassemblerInsn "mov" for 0x402521>, <DisassemblerInsn "call" for 0x402524>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402563>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402951>, <DisassemblerInsn "mov" for 0x402959>, <DisassemblerInsn "mov" for 0x402961>, <DisassemblerInsn "mov" for 0x402969>, <DisassemblerInsn "mov" for 0x40296c>, <DisassemblerInsn "mov" for 0x40296e>, <DisassemblerInsn "mov" for 0x402971>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "mov" for 0x402981>, <DisassemblerInsn "mov" for 0x402989>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402997>, <DisassemblerInsn "cmp" for 0x40299e>, <DisassemblerInsn "jne" for 0x4029a1>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e8c>, <DisassemblerInsn "mov" for 0x402e91>, <DisassemblerInsn "call" for 0x402e99>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d4a>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027ff>, <DisassemblerInsn "mov" for 0x402807>, <DisassemblerInsn "lea" for 0x40280c>, <DisassemblerInsn "mov" for 0x402813>, <DisassemblerInsn "call" for 0x402815>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402553>, <DisassemblerInsn "mov" for 0x402556>, <DisassemblerInsn "jl" for 0x40255d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b79>, <DisassemblerInsn "mov" for 0x402b81>, <DisassemblerInsn "mov" for 0x402b83>, <DisassemblerInsn "cmp" for 0x402b8a>, <DisassemblerInsn "je" for 0x402b8d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024aa>, <DisassemblerInsn "cmp" for 0x4024b2>, <DisassemblerInsn "jne" for 0x4024b6>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e40>, <DisassemblerInsn "mov" for 0x402e47>, <DisassemblerInsn "mov" for 0x402e4f>, <DisassemblerInsn "mov" for 0x402e52>, <DisassemblerInsn "mov" for 0x402e56>, <DisassemblerInsn "cmp" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "je" for 0x402e66>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a0b>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "add" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1a>, <DisassemblerInsn "cmp" for 0x402a22>, <DisassemblerInsn "je" for 0x402a26>]'}], 'cfg_block_detailed_info': [{'block_Idx': 91, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x402f3d>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x402e40>']}, {'block_Idx': 140, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x19c], ecx>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x402f3d>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402ac7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<lea~~rdi, [rip + 0x41ec]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x4027ff>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x3684]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3955]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13b]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jne~~0x4027a5>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xd8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x402981>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x4029c4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402434>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<cmp~~rax, 0>', '<je~~0x402529>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402bdf>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x402d89>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402917>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402eb4>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<je~~0x402715>']}, {'block_Idx': 122, 'blockInsts': ['<jmp~~0x402d6a>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x10c]>', '<mov~~esi, dword ptr [rsp + 0x110]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0x100], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x402db5>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x402cb2>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402728>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x402574>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x17c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 124, 'blockInsts': ['<jmp~~0x402c7b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x402e40>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x188]>', '<call~~0x500060>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402eb4>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3903]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402b36>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x402c30>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x4201]>', '<mov~~qword ptr [rsp + 0x1a0], rax>', '<cmp~~rax, 0>', '<je~~0x4023a2>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x402e40>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x402cb2>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x1af]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x402f93>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x402db5>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x402f93>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x40264a>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x40286f>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x40286f>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402eb4>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x402eb4>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3991]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x402cde>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x402a52>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jmp~~0x4027a5>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x114], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402728>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x39e6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c52]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x402981>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x402f3d>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x402c04>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a6c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x36b3]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x36aa], eax>', '<mov~~rax, qword ptr [rip + 0x3693]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x402ef3>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x402a52>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<cmp~~eax, 0>', '<jle~~0x402565>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x402eb4>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x402c30>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b29]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x41fb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402ac7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1d0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x402f10>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x402d2f>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x402bbb>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4029f0>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x160], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x402f3d>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<je~~0x40284c>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402eb4>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x402eb4>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40284c>']}, {'block_Idx': 134, 'blockInsts': ['<jmp~~0x402d4c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x140], eax>', '<je~~0x40274d>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x402d89>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<add~~rsp, 0x1d8>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x41d0]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x41c7], eax>', '<mov~~eax, dword ptr [rip + 0x41c1]>', '<cmp~~eax, 1>', '<je~~0x4023e8>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<cmp~~eax, 0>', '<je~~0x40264a>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x164], eax>', '<ja~~0x402f3d>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x402cde>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<cmp~~eax, -1>', '<je~~0x402917>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x402b5b>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x402c96>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jmp~~0x402f93>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1af], al>', '<test~~al, 1>', '<jne~~0x402360>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x402e32>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402b36>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1d8>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<lea~~rax, [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x1d0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<ja~~0x402f93>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13b], al>', '<test~~al, 1>', '<jne~~0x402715>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x402574>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x4029c4>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~rax>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x402db5>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3df1]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x402f3d>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x402c04>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x402529>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402eb4>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402a36>']}], 'cfg_edge_info': [(64, 69), (81, 85), (42, 48), (44, 45), (107, 113), (87, 89), (101, 106), (135, 138), (31, 29), (74, 73), (136, 121), (97, 102), (85, 82), (121, 133), (13, 17), (79, 81), (132, 96), (130, 108), (98, 103), (82, 86), (90, 99), (20, 22), (108, 123), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (85, 84), (132, 135), (72, 77), (48, 31), (17, 16), (140, 13), (89, 93), (100, 105), (114, 122), (99, 33), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (129, 134), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (64, 68), (81, 84), (127, 106), (28, 2), (116, 124), (84, 86), (75, 62), (97, 101), (103, 117), (133, 33), (92, 96), (34, 39), (13, 16), (15, 13), (93, 97), (55, 58), (54, 60), (102, 109), (125, 111), (29, 33), (23, 26), (11, 18), (42, 33), (139, 2), (116, 101), (79, 82), (7, 139), (82, 87), (123, 33), (100, 13), (58, 62), (20, 23), (51, 56), (4, 6), (95, 90), (60, 13), (78, 83), (126, 132), (89, 92), (104, 111), (105, 140), (91, 95), (45, 52), (63, 67), (140, 33), (6, 8), (73, 77), (129, 106), (134, 136), (35, 41), (67, 76), (43, 54), (112, 126), (35, 13), (91, 33), (62, 61), (136, 129), (139, 6), (56, 63), (111, 118), (77, 79), (75, 61), (130, 116), (124, 130), (86, 91), (87, 90), (101, 107), (107, 114), (96, 13), (8, 10), (1, 4), (106, 112), (16, 2), (113, 127), (27, 32), (102, 108), (3, 4), (18, 20), (84, 87), (69, 68), (98, 104), (61, 64), (21, 28), (106, 96), (118, 125), (22, 29), (39, 45), (19, 21), (34, 40), (114, 121), (125, 103), (83, 33), (138, 33), (109, 116), (41, 27), (93, 98), (18, 13), (131, 100), (96, 100), (58, 61), (32, 42), (51, 55), (72, 78), (26, 35), (95, 89), (44, 50), (126, 131), (0, 1), (76, 66), (40, 46), (111, 97), (92, 93), (45, 51), (63, 66), (33, 43), (4, 7), (52, 56), (117, 33), (40, 39), (10, 13), (131, 13), (122, 129), (68, 73), (6, 9)], 'cdg_edge_info': [(140, 43), (64, 69), (81, 85), (55, 66), (42, 48), (89, 13), (44, 45), (107, 113), (55, 75), (130, 60), (87, 89), (27, 13), (20, 29), (93, 13), (8, 18), (114, 54), (136, 121), (97, 102), (111, 101), (85, 82), (92, 97), (63, 61), (13, 17), (92, 106), (79, 81), (132, 96), (61, 54), (130, 108), (107, 106), (98, 103), (73, 83), (82, 86), (29, 34), (100, 140), (77, 83), (39, 44), (23, 27), (29, 43), (95, 43), (85, 84), (29, 61), (132, 135), (114, 129), (72, 77), (42, 43), (136, 43), (23, 29), (40, 45), (29, 45), (72, 43), (29, 54), (95, 54), (114, 122), (100, 105), (29, 63), (92, 101), (73, 60), (125, 43), (55, 63), (63, 13), (98, 43), (73, 78), (42, 54), (102, 123), (114, 33), (77, 78), (95, 93), (69, 74), (0, 2), (23, 31), (51, 13), (114, 60), (87, 43), (68, 72), (1, 3), (29, 75), (29, 56), (61, 33), (72, 54), (114, 133), (42, 29), (102, 43), (91, 43), (16, 19), (55, 56), (116, 106), (125, 54), (64, 13), (16, 28), (102, 116), (140, 54), (84, 86), (51, 61), (75, 62), (4, 139), (129, 136), (92, 96), (87, 54), (13, 16), (81, 13), (42, 31), (27, 42), (16, 21), (125, 111), (102, 109), (102, 54), (91, 54), (34, 66), (34, 75), (132, 43), (29, 33), (95, 33), (95, 97), (87, 93), (23, 35), (95, 106), (95, 60), (42, 33), (139, 2), (79, 82), (116, 101), (82, 87), (20, 23), (95, 90), (132, 54), (72, 33), (95, 99), (126, 132), (89, 92), (13, 2), (136, 54), (125, 33), (72, 60), (91, 95), (39, 66), (79, 84), (63, 67), (140, 33), (34, 61), (6, 8), (39, 75), (63, 76), (125, 60), (111, 125), (139, 13), (129, 106), (73, 77), (61, 60), (140, 60), (69, 73), (98, 54), (130, 123), (87, 33), (95, 101), (87, 97), (73, 43), (0, 4), (87, 106), (132, 138), (0, 13), (101, 13), (102, 33), (91, 33), (77, 43), (136, 129), (139, 6), (39, 13), (34, 63), (125, 117), (102, 60), (91, 60), (82, 91), (130, 43), (72, 83), (77, 79), (114, 43), (130, 116), (107, 114), (98, 111), (87, 90), (101, 107), (87, 99), (106, 112), (0, 6), (73, 54), (27, 32), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (132, 33), (35, 27), (18, 20), (98, 104), (69, 68), (84, 87), (34, 13), (61, 64), (136, 33), (42, 60), (132, 60), (106, 96), (130, 54), (87, 101), (34, 40), (136, 60), (114, 121), (125, 103), (93, 98), (136, 133), (39, 63), (106, 126), (98, 33), (131, 100), (35, 29), (72, 78), (96, 100), (51, 55), (97, 13), (95, 89), (126, 131), (98, 60), (116, 130), (0, 1), (76, 66), (111, 97), (39, 56), (76, 75), (92, 93), (45, 51), (111, 106), (87, 60), (35, 31), (4, 7), (84, 91), (61, 68), (73, 33), (98, 117), (40, 39), (29, 39), (77, 33), (68, 73), (29, 66), (130, 33), (77, 60), (61, 43)], 'ddg_edge_info': [(7, 17), (66, 103), (67, 68), (90, 33), (67, 77), (8, 18), (121, 133), (77, 126), (62, 74), (62, 92), (31, 86), (62, 101), (31, 95), (66, 62), (31, 104), (31, 113), (72, 114), (114, 129), (66, 89), (113, 21), (7, 21), (62, 69), (102, 114), (39, 76), (62, 78), (31, 72), (86, 17), (31, 81), (31, 90), (95, 93), (31, 108), (66, 75), (66, 84), (113, 16), (55, 56), (7, 16), (72, 136), (105, 17), (129, 136), (98, 130), (62, 64), (54, 60), (125, 111), (102, 109), (62, 73), (31, 67), (0, 107), (86, 21), (31, 85), (67, 17), (95, 97), (66, 61), (31, 103), (113, 2), (7, 2), (123, 33), (113, 105), (60, 13), (105, 21), (0, 75), (91, 95), (0, 84), (62, 68), (31, 62), (62, 77), (39, 75), (73, 77), (86, 16), (31, 89), (43, 54), (67, 21), (95, 92), (95, 101), (64, 95), (136, 129), (64, 131), (98, 102), (3, 130), (113, 100), (105, 16), (0, 79), (86, 2), (31, 66), (66, 33), (32, 31), (31, 75), (3, 4), (0, 106), (31, 84), (67, 16), (66, 136), (3, 98), (86, 114), (109, 116), (3, 125), (105, 2), (8, 60), (0, 56), (31, 34), (0, 74), (112, 135), (31, 61), (67, 2), (84, 91), (86, 100), (131, 13), (66, 131), (68, 73), (86, 109), (3, 102), (67, 105), (67, 114), (86, 136), (62, 17), (54, 13), (0, 51), (8, 64), (31, 29), (39, 51), (0, 69), (31, 56), (13, 17), (56, 67), (93, 125), (108, 123), (86, 95), (86, 104), (67, 100), (112, 13), (86, 113), (67, 109), (21, 2), (6, 13), (86, 131), (62, 21), (67, 136), (54, 17), (0, 55), (77, 140), (31, 33), (0, 64), (0, 73), (31, 51), (99, 33), (31, 136), (20, 136), (66, 112), (86, 90), (66, 121), (67, 86), (66, 130), (67, 95), (68, 72), (86, 108), (67, 104), (61, 33), (67, 113), (62, 16), (54, 21), (8, 63), (0, 68), (66, 13), (13, 16), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (3, 69), (67, 72), (66, 107), (66, 116), (67, 81), (66, 125), (67, 90), (86, 103), (8, 13), (86, 112), (67, 108), (62, 2), (0, 18), (42, 33), (0, 27), (54, 16), (20, 23), (61, 131), (33, 60), (104, 111), (62, 105), (62, 114), (140, 33), (66, 93), (31, 135), (66, 102), (66, 111), (130, 114), (67, 76), (86, 89), (67, 85), (86, 98), (66, 129), (0, 4), (67, 103), (0, 13), (91, 33), (1, 139), (8, 35), (54, 2), (0, 31), (0, 40), (131, 105), (44, 55), (62, 100), (62, 109), (16, 2), (31, 112), (66, 79), (64, 60), (31, 121), (73, 136), (62, 136), (121, 33), (66, 97), (31, 130), (67, 62), (66, 106), (86, 93), (67, 89), (0, 8), (0, 17), (83, 33), (31, 13), (61, 112), (69, 125), (112, 105), (62, 86), (62, 95), (62, 104), (31, 98), (62, 113), (31, 107), (66, 74), (31, 116), (31, 125), (66, 92), (66, 101), (67, 66), (67, 75), (67, 84), (107, 129), (0, 3), (0, 21), (62, 72), (112, 100), (62, 81), (62, 90), (3, 13), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (31, 111), (66, 78), (31, 129), (67, 61), (107, 106), (0, 7), (0, 16), (135, 33), (113, 131), (113, 140), (62, 85), (31, 79), (3, 8), (3, 17), (62, 103), (86, 33), (31, 97), (95, 100), (140, 13), (66, 64), (31, 106), (66, 73), (84, 109), (72, 125), (0, 2), (113, 126), (105, 33), (27, 95), (81, 84), (31, 74), (62, 89), (0, 105), (31, 92), (84, 95), (3, 21), (31, 101), (66, 68), (78, 33), (103, 117), (67, 33), (66, 77), (95, 131), (29, 33), (98, 114), (77, 91), (113, 112), (40, 51), (139, 2), (108, 33), (8, 95), (7, 139), (31, 69), (0, 100), (62, 84), (31, 78), (3, 7), (0, 109), (51, 56), (3, 16), (95, 90), (105, 140), (113, 13), (112, 17), (67, 131), (89, 131), (101, 114), (62, 61), (0, 77), (31, 55), (0, 86), (31, 64), (32, 29), (0, 95), (31, 73), (3, 2), (0, 104), (106, 112), (112, 21), (86, 121), (3, 114), (97, 130), (86, 130), (98, 104), (21, 28), (69, 77), (8, 76), (0, 72), (101, 136), (66, 17), (0, 81), (138, 33), (39, 63), (31, 68), (32, 33), (86, 13), (31, 77), (32, 42), (64, 74), (95, 89), (116, 130), (86, 107), (112, 16), (86, 116), (67, 112), (86, 125), (67, 121), (67, 130), (69, 72), (113, 106), (62, 33), (105, 13), (0, 67), (23, 32), (31, 45), (66, 21), (0, 85), (39, 67), (72, 73), (64, 69), (67, 13), (135, 138), (3, 77), (17, 21), (112, 2), (97, 102), (86, 102), (67, 98), (86, 111), (67, 107), (67, 116), (86, 129), (67, 125), (90, 99), (0, 44), (0, 62), (31, 40), (66, 16), (112, 132), (13, 28), (62, 131), (72, 77), (3, 72), (17, 16), (86, 97), (67, 93), (86, 106), (67, 102), (27, 29), (67, 111), (67, 129), (0, 39), (31, 17), (29, 84), (103, 33), (66, 2), (31, 44), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (66, 114), (67, 79), (86, 92), (86, 101), (133, 33), (67, 97), (67, 106), (8, 29), (0, 34), (0, 43), (31, 21), (4, 13), (0, 61), (31, 39), (23, 35), (44, 67), (112, 131), (62, 112), (1, 16), (62, 121), (62, 130), (64, 72), (66, 100), (100, 13), (66, 109), (67, 74), (78, 83), (126, 132), (67, 92), (86, 105), (67, 101), (0, 20), (62, 13), (8, 42), (111, 125), (31, 16), (27, 131), (62, 98), (112, 126), (62, 107), (35, 13), (62, 116), (34, 45), (62, 125), (66, 86), (56, 63), (66, 95), (66, 104), (67, 69), (66, 113), (67, 78), (130, 116), (86, 91), (18, 54), (31, 2), (69, 114), (62, 93), (62, 102), (8, 131), (62, 111), (31, 105), (66, 72), (31, 114), (66, 81), (62, 129), (93, 98), (66, 90), (18, 13), (7, 13), (67, 64), (66, 108), (67, 73), (126, 131), (0, 1), (0, 28), (33, 43), (73, 79), (62, 79), (4, 7), (69, 136), (117, 33), (61, 132), (62, 97), (62, 106), (31, 100), (31, 109), (66, 85), (113, 17), (7, 8)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O3/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O3/utils.s---avcodec_open2---after
function id: 17
function flag: True
There are 629 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O3/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O3/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 972 nodes and 1729 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 629 instructions in binary file.
[4206672, 4206699, 4206728, 4206742, 4206770, 4206818, 4206831]
The execution time of patched subCFG information extraction via angr: 0:00:02.261035
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403096>, <DisassemblerInsn "mov" for 0x40309e>, <DisassemblerInsn "mov" for 0x4030a6>, <DisassemblerInsn "mov" for 0x4030ac>, <DisassemblerInsn "mov" for 0x4030af>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c1>, <DisassemblerInsn "cmp" for 0x4030c9>, <DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "mov" for 0x4030d9>, <DisassemblerInsn "jne" for 0x4030e0>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "cmp" for 0x403066>, <DisassemblerInsn "jne" for 0x403069>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030e2>, <DisassemblerInsn "call" for 0x4030ea>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403127>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "movzx" for 0x40314d>, <DisassemblerInsn "mov" for 0x403154>, <DisassemblerInsn "cmp" for 0x40315b>, <DisassemblerInsn "jle" for 0x403161>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "cmp" for 0x403012>, <DisassemblerInsn "sete" for 0x403015>, <DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "sete" for 0x40301b>, <DisassemblerInsn "or" for 0x40301e>, <DisassemblerInsn "test" for 0x403020>, <DisassemblerInsn "jne" for 0x403022>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030ef>, <DisassemblerInsn "cmp" for 0x4030f6>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "jl" for 0x403100>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40306b>, <DisassemblerInsn "mov" for 0x403073>, <DisassemblerInsn "add" for 0x403076>, <DisassemblerInsn "mov" for 0x40307a>, <DisassemblerInsn "cmp" for 0x403082>, <DisassemblerInsn "je" for 0x403086>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c1>, <DisassemblerInsn "cmp" for 0x4030c9>, <DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "mov" for 0x4030d9>, <DisassemblerInsn "jne" for 0x4030e0>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "cmp" for 0x403090>, <DisassemblerInsn "jne" for 0x403094>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40359d>, <DisassemblerInsn "mov" for 0x4035a4>, <DisassemblerInsn "lea" for 0x4035a7>, <DisassemblerInsn "call" for 0x4035af>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403106>, <DisassemblerInsn "mov" for 0x40310d>, <DisassemblerInsn "mov" for 0x403115>, <DisassemblerInsn "mov" for 0x403118>, <DisassemblerInsn "mov" for 0x403120>, <DisassemblerInsn "mov" for 0x403127>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "movzx" for 0x40314d>, <DisassemblerInsn "mov" for 0x403154>, <DisassemblerInsn "cmp" for 0x40315b>, <DisassemblerInsn "jle" for 0x403161>]'}], 'cfg_block_detailed_info': [{'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x403127>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4030b2>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x403196>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x403050>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40359d>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x403096>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x403127>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4030b2>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x403196>']}], 'cfg_edge_info': [(64, 66), (70, 72), (66, 68), (67, 71), (69, 68), (68, 71), (72, 75), (62, 64), (67, 70), (68, 70), (72, 26), (69, 67), (64, 67), (66, 69)]}]}
{'avcodec_open2': [4206672, 4206699, 4206728, 4206742, 4206770, 4206818, 4206831]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/O3/utils.o---after
The extraction of function: avcodec_open2
[4206672, 4206699, 4206728, 4206742, 4206770, 4206818, 4206831]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 141 nodes and 229 edges in CFGEmulated.
It has 141 nodes and 357 edges in CDG.
It has 2264 nodes and 3013 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4206672, 4206699, 4206728, 4206742, 4206770, 4206818, 4206831]
{4205058, 4206595, 4207620, 4206085, 4205576, 4207637, 4207131, 4206628, 4207663, 4205620, 4206136, 4206141, 4206655, 4207167, 4207687, 4205128, 4206672, 4207702, 4206170, 4206175, 4207204, 4207718, 4206699, 4206202, 4207231, 4207745, 4206728, 4207248, 4207762, 4206742, 4205214, 4207776, 4205738, 4207275, 4206770, 4207291, 4206267, 4207816, 4206287, 4205272, 4207323, 4205792, 4206818, 4207852, 4206831, 4207350, 4207867, 4206335, 4206854, 4205322, 4207378, 4207892, 4206887, 4205352, 4207405, 4207422, 4206398, 4204864, 4207936, 4206418, 4207955, 4205396, 4207449, 4206947, 4207982, 4207984, 4207475, 4205941, 4206455, 4207997, 4206981, 4205449, 4204940, 4207501, 4207503, 4206998, 4205467, 4208029, 4207013, 4204966, 4207532, 4205997, 4206513, 4205491, 4208052, 4207035, 4204992, 4205507, 4208072, 4207562, 4205524, 4208085, 4205013, 4207065, 4206561, 4206049, 4207593, 4205035, 4207087, 4205553, 4208115}
[73, 138, 8, 46, 95, 83, 66, 100, 125, 139, 29, 86, 60, 19, 136, 104, 1, 77, 3, 96, 130, 84, 21, 0, 39, 35, 10, 123, 131, 62, 11, 23, 51, 9, 117, 69, 50, 89, 13, 56, 26, 45, 103, 129, 90, 132, 64, 126, 113, 102, 79, 17, 85, 111, 121, 58, 47, 40, 67, 54, 122, 81, 2, 34, 22, 133, 75, 92, 27, 68, 74, 112, 16, 6, 116, 41, 135, 124, 52, 109, 105, 7, 55, 108, 98, 15, 32, 4, 134, 78, 33, 93, 106, 101, 127, 44, 97, 72, 43, 107, 140, 118, 63, 87, 61, 18, 114, 31, 48, 76, 99, 82, 20, 91, 28, 42]
The execution time of patched slicing information extraction via angr: 0:00:25.345629
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fe1>, <DisassemblerInsn "mov" for 0x402fe9>, <DisassemblerInsn "mov" for 0x402ff0>, <DisassemblerInsn "mov" for 0x402ff7>, <DisassemblerInsn "cmp" for 0x402ffe>, <DisassemblerInsn "jne" for 0x403001>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403481>, <DisassemblerInsn "mov" for 0x403486>, <DisassemblerInsn "jmp" for 0x40348d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "add" for 0x402a5b>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "cmp" for 0x402a6a>, <DisassemblerInsn "sete" for 0x402a72>, <DisassemblerInsn "cmp" for 0x402a75>, <DisassemblerInsn "setne" for 0x402a79>, <DisassemblerInsn "and" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "test" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "jne" for 0x402a8d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c4e>, <DisassemblerInsn "mov" for 0x402c55>, <DisassemblerInsn "mov" for 0x402c5d>, <DisassemblerInsn "xor" for 0x402c64>, <DisassemblerInsn "sub" for 0x402c67>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "mov" for 0x402c70>, <DisassemblerInsn "sar" for 0x402c77>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "xor" for 0x402c81>, <DisassemblerInsn "sub" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c86>, <DisassemblerInsn "xor" for 0x402c89>, <DisassemblerInsn "sub" for 0x402c8b>, <DisassemblerInsn "sar" for 0x402c8d>, <DisassemblerInsn "mov" for 0x402c8f>, <DisassemblerInsn "xor" for 0x402c97>, <DisassemblerInsn "sub" for 0x402c99>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "mov" for 0x402c9e>, <DisassemblerInsn "jmp" for 0x402ca5>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403106>, <DisassemblerInsn "mov" for 0x40310d>, <DisassemblerInsn "mov" for 0x403115>, <DisassemblerInsn "mov" for 0x403118>, <DisassemblerInsn "mov" for 0x403120>, <DisassemblerInsn "mov" for 0x403127>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "movzx" for 0x40314d>, <DisassemblerInsn "mov" for 0x403154>, <DisassemblerInsn "cmp" for 0x40315b>, <DisassemblerInsn "jle" for 0x403161>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40303f>, <DisassemblerInsn "mov" for 0x403044>, <DisassemblerInsn "jmp" for 0x40304b>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "mov" for 0x402e67>, <DisassemblerInsn "lea" for 0x402e6c>, <DisassemblerInsn "mov" for 0x402e73>, <DisassemblerInsn "call" for 0x402e75>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034c8>, <DisassemblerInsn "mov" for 0x4034cf>, <DisassemblerInsn "mov" for 0x4034d7>, <DisassemblerInsn "and" for 0x4034dd>, <DisassemblerInsn "cmp" for 0x4034e0>, <DisassemblerInsn "mov" for 0x4034e3>, <DisassemblerInsn "jne" for 0x4034ea>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40321b>, <DisassemblerInsn "mov" for 0x403220>, <DisassemblerInsn "mov" for 0x403228>, <DisassemblerInsn "cmp" for 0x40322b>, <DisassemblerInsn "mov" for 0x40322e>, <DisassemblerInsn "mov" for 0x403236>, <DisassemblerInsn "je" for 0x40323d>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "mov" for 0x4029ed>, <DisassemblerInsn "cmp" for 0x4029f2>, <DisassemblerInsn "mov" for 0x4029f5>, <DisassemblerInsn "jne" for 0x4029fc>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bf1>, <DisassemblerInsn "cmp" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402bfb>, <DisassemblerInsn "jl" for 0x402c02>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030e2>, <DisassemblerInsn "call" for 0x4030ea>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4035d5>, <DisassemblerInsn "mov" for 0x4035dd>, <DisassemblerInsn "mov" for 0x4035e0>, <DisassemblerInsn "mov" for 0x4035e7>, <DisassemblerInsn "jmp" for 0x4035ee>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40356e>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033ac>, <DisassemblerInsn "mov" for 0x4033b1>, <DisassemblerInsn "mov" for 0x4033b6>, <DisassemblerInsn "cmp" for 0x4033ba>, <DisassemblerInsn "mov" for 0x4033be>, <DisassemblerInsn "mov" for 0x4033c3>, <DisassemblerInsn "je" for 0x4033c8>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031ef>, <DisassemblerInsn "mov" for 0x4031f6>, <DisassemblerInsn "mov" for 0x4031fe>, <DisassemblerInsn "mov" for 0x403201>, <DisassemblerInsn "xor" for 0x403208>, <DisassemblerInsn "mov" for 0x40320a>, <DisassemblerInsn "mov" for 0x403212>, <DisassemblerInsn "jmp" for 0x403219>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40298c>, <DisassemblerInsn "cmp" for 0x402994>, <DisassemblerInsn "sete" for 0x402998>, <DisassemblerInsn "mov" for 0x40299b>, <DisassemblerInsn "test" for 0x4029a2>, <DisassemblerInsn "jne" for 0x4029a4>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "cmp" for 0x403012>, <DisassemblerInsn "sete" for 0x403015>, <DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "sete" for 0x40301b>, <DisassemblerInsn "or" for 0x40301e>, <DisassemblerInsn "test" for 0x403020>, <DisassemblerInsn "jne" for 0x403022>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a6>, <DisassemblerInsn "mov" for 0x4029ae>, <DisassemblerInsn "lea" for 0x4029b1>, <DisassemblerInsn "xor" for 0x4029b9>, <DisassemblerInsn "call" for 0x4029bb>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034a0>, <DisassemblerInsn "mov" for 0x4034a7>, <DisassemblerInsn "mov" for 0x4034af>, <DisassemblerInsn "mov" for 0x4034b2>, <DisassemblerInsn "mov" for 0x4034b6>, <DisassemblerInsn "cmp" for 0x4034bb>, <DisassemblerInsn "mov" for 0x4034bf>, <DisassemblerInsn "je" for 0x4034c6>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032db>, <DisassemblerInsn "mov" for 0x4032e0>, <DisassemblerInsn "mov" for 0x4032e5>, <DisassemblerInsn "cmp" for 0x4032e8>, <DisassemblerInsn "mov" for 0x4032eb>, <DisassemblerInsn "mov" for 0x4032f0>, <DisassemblerInsn "je" for 0x4032f4>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403096>, <DisassemblerInsn "mov" for 0x40309e>, <DisassemblerInsn "mov" for 0x4030a6>, <DisassemblerInsn "mov" for 0x4030ac>, <DisassemblerInsn "mov" for 0x4030af>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c1>, <DisassemblerInsn "cmp" for 0x4030c9>, <DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "mov" for 0x4030d9>, <DisassemblerInsn "jne" for 0x4030e0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403570>, <DisassemblerInsn "call" for 0x403578>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402940>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "mov" for 0x40294f>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "lea" for 0x40295f>, <DisassemblerInsn "mov" for 0x402967>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "cmp" for 0x402978>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "ja" for 0x402986>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402caa>, <DisassemblerInsn "mov" for 0x402cb2>, <DisassemblerInsn "add" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cb9>, <DisassemblerInsn "mov" for 0x402cc1>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "cmp" for 0x402ccb>, <DisassemblerInsn "sete" for 0x402cce>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "test" for 0x402cd8>, <DisassemblerInsn "jne" for 0x402cda>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b28>, <DisassemblerInsn "mov" for 0x402b2b>, <DisassemblerInsn "mov" for 0x402b33>, <DisassemblerInsn "mov" for 0x402b3b>, <DisassemblerInsn "mov" for 0x402b3e>, <DisassemblerInsn "cmp" for 0x402b43>, <DisassemblerInsn "mov" for 0x402b47>, <DisassemblerInsn "je" for 0x402b4e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a8f>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40332d>, <DisassemblerInsn "mov" for 0x403332>, <DisassemblerInsn "jmp" for 0x403339>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403492>, <DisassemblerInsn "mov" for 0x40349a>, <DisassemblerInsn "mov" for 0x40349e>, <DisassemblerInsn "mov" for 0x4034a0>, <DisassemblerInsn "mov" for 0x4034a7>, <DisassemblerInsn "mov" for 0x4034af>, <DisassemblerInsn "mov" for 0x4034b2>, <DisassemblerInsn "mov" for 0x4034b6>, <DisassemblerInsn "cmp" for 0x4034bb>, <DisassemblerInsn "mov" for 0x4034bf>, <DisassemblerInsn "je" for 0x4034c6>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ebb>, <DisassemblerInsn "add" for 0x402ec3>, <DisassemblerInsn "call" for 0x402eca>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a94>, <DisassemblerInsn "call" for 0x402a99>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b0a>, <DisassemblerInsn "cmp" for 0x402b12>, <DisassemblerInsn "jne" for 0x402b16>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dad>, <DisassemblerInsn "mov" for 0x402db4>, <DisassemblerInsn "mov" for 0x402dbc>, <DisassemblerInsn "test" for 0x402dc2>, <DisassemblerInsn "setne" for 0x402dc4>, <DisassemblerInsn "xor" for 0x402dc7>, <DisassemblerInsn "or" for 0x402dca>, <DisassemblerInsn "xor" for 0x402dcc>, <DisassemblerInsn "test" for 0x402dce>, <DisassemblerInsn "mov" for 0x402dd1>, <DisassemblerInsn "mov" for 0x402dd8>, <DisassemblerInsn "jne" for 0x402ddf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a24>, <DisassemblerInsn "lea" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a30>, <DisassemblerInsn "call" for 0x402a32>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40327f>, <DisassemblerInsn "mov" for 0x403284>, <DisassemblerInsn "jmp" for 0x40328b>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f3e>, <DisassemblerInsn "mov" for 0x402f45>, <DisassemblerInsn "cmp" for 0x402f4d>, <DisassemblerInsn "je" for 0x402f50>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d06>, <DisassemblerInsn "mov" for 0x402d0d>, <DisassemblerInsn "mov" for 0x402d14>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d2c>, <DisassemblerInsn "mov" for 0x402d2e>, <DisassemblerInsn "xor" for 0x402d34>, <DisassemblerInsn "sub" for 0x402d37>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "mov" for 0x402d40>, <DisassemblerInsn "sar" for 0x402d47>, <DisassemblerInsn "mov" for 0x402d4a>, <DisassemblerInsn "xor" for 0x402d51>, <DisassemblerInsn "sub" for 0x402d53>, <DisassemblerInsn "mov" for 0x402d56>, <DisassemblerInsn "xor" for 0x402d58>, <DisassemblerInsn "sub" for 0x402d5a>, <DisassemblerInsn "sar" for 0x402d5c>, <DisassemblerInsn "mov" for 0x402d5e>, <DisassemblerInsn "xor" for 0x402d66>, <DisassemblerInsn "sub" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d6a>, <DisassemblerInsn "mov" for 0x402d6c>, <DisassemblerInsn "jmp" for 0x402d73>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403196>, <DisassemblerInsn "cmp" for 0x40319e>, <DisassemblerInsn "jne" for 0x4031a3>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403514>, <DisassemblerInsn "mov" for 0x40351b>, <DisassemblerInsn "mov" for 0x40351f>, <DisassemblerInsn "add" for 0x403525>, <DisassemblerInsn "mov" for 0x403528>, <DisassemblerInsn "mov" for 0x40352e>, <DisassemblerInsn "mov" for 0x403535>, <DisassemblerInsn "cmp" for 0x40353a>, <DisassemblerInsn "je" for 0x40353e>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e05>, <DisassemblerInsn "mov" for 0x402e0d>, <DisassemblerInsn "mov" for 0x402e15>, <DisassemblerInsn "mov" for 0x402e1c>, <DisassemblerInsn "add" for 0x402e23>, <DisassemblerInsn "mov" for 0x402e29>, <DisassemblerInsn "xor" for 0x402e31>, <DisassemblerInsn "call" for 0x402e33>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b18>, <DisassemblerInsn "mov" for 0x402b1f>, <DisassemblerInsn "mov" for 0x402b21>, <DisassemblerInsn "call" for 0x402b23>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d75>, <DisassemblerInsn "cmp" for 0x402d7c>, <DisassemblerInsn "mov" for 0x402d7f>, <DisassemblerInsn "je" for 0x402d86>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403264>, <DisassemblerInsn "mov" for 0x40326c>, <DisassemblerInsn "lea" for 0x403271>, <DisassemblerInsn "mov" for 0x403278>, <DisassemblerInsn "call" for 0x40327a>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033ca>, <DisassemblerInsn "mov" for 0x4033cf>, <DisassemblerInsn "mov" for 0x4033d4>, <DisassemblerInsn "add" for 0x4033d9>, <DisassemblerInsn "mov" for 0x4033dd>, <DisassemblerInsn "cmp" for 0x4033e2>, <DisassemblerInsn "je" for 0x4033e5>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403163>, <DisassemblerInsn "mov" for 0x40316a>, <DisassemblerInsn "mov" for 0x403172>, <DisassemblerInsn "lea" for 0x403177>, <DisassemblerInsn "mov" for 0x40317e>, <DisassemblerInsn "call" for 0x403180>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403456>, <DisassemblerInsn "mov" for 0x40345a>, <DisassemblerInsn "cmp" for 0x403462>, <DisassemblerInsn "je" for 0x403464>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eff>, <DisassemblerInsn "mov" for 0x402f07>, <DisassemblerInsn "mov" for 0x402f0f>, <DisassemblerInsn "mov" for 0x402f17>, <DisassemblerInsn "mov" for 0x402f1a>, <DisassemblerInsn "add" for 0x402f1d>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "mov" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "cmp" for 0x402f39>, <DisassemblerInsn "je" for 0x402f3c>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403447>, <DisassemblerInsn "mov" for 0x403449>, <DisassemblerInsn "mov" for 0x40344d>, <DisassemblerInsn "cmp" for 0x403451>, <DisassemblerInsn "je" for 0x403454>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40338f>, <DisassemblerInsn "mov" for 0x403397>, <DisassemblerInsn "lea" for 0x40339c>, <DisassemblerInsn "mov" for 0x4033a3>, <DisassemblerInsn "call" for 0x4033a5>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032ab>, <DisassemblerInsn "mov" for 0x4032b0>, <DisassemblerInsn "mov" for 0x4032b2>, <DisassemblerInsn "cmp" for 0x4032b6>, <DisassemblerInsn "je" for 0x4032b9>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "cmp" for 0x403066>, <DisassemblerInsn "jne" for 0x403069>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403540>, <DisassemblerInsn "lea" for 0x403545>, <DisassemblerInsn "mov" for 0x40354c>, <DisassemblerInsn "call" for 0x403551>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "cmp" for 0x403090>, <DisassemblerInsn "jne" for 0x403094>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40323f>, <DisassemblerInsn "mov" for 0x403246>, <DisassemblerInsn "mov" for 0x40324e>, <DisassemblerInsn "add" for 0x403255>, <DisassemblerInsn "mov" for 0x403259>, <DisassemblerInsn "cmp" for 0x40325e>, <DisassemblerInsn "je" for 0x403260>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033e9>, <DisassemblerInsn "mov" for 0x4033f1>, <DisassemblerInsn "lea" for 0x4033f6>, <DisassemblerInsn "mov" for 0x4033fd>, <DisassemblerInsn "call" for 0x4033ff>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eac>, <DisassemblerInsn "cmp" for 0x402eb4>, <DisassemblerInsn "je" for 0x402eb9>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b71>, <DisassemblerInsn "mov" for 0x402b79>, <DisassemblerInsn "mov" for 0x402b81>, <DisassemblerInsn "call" for 0x402b84>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c34>, <DisassemblerInsn "mov" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c42>, <DisassemblerInsn "cmp" for 0x402c49>, <DisassemblerInsn "je" for 0x402c4c>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e3d>, <DisassemblerInsn "mov" for 0x402e45>, <DisassemblerInsn "mov" for 0x402e4d>, <DisassemblerInsn "mov" for 0x402e50>, <DisassemblerInsn "xor" for 0x402e53>, <DisassemblerInsn "call" for 0x402e55>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4035c8>, <DisassemblerInsn "call" for 0x4035d0>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40338d>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40306b>, <DisassemblerInsn "mov" for 0x403073>, <DisassemblerInsn "add" for 0x403076>, <DisassemblerInsn "mov" for 0x40307a>, <DisassemblerInsn "cmp" for 0x403082>, <DisassemblerInsn "je" for 0x403086>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4035f3>, <DisassemblerInsn "add" for 0x4035fa>, <DisassemblerInsn "ret" for 0x403601>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c10>, <DisassemblerInsn "add" for 0x402c13>, <DisassemblerInsn "mov" for 0x402c1a>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c28>, <DisassemblerInsn "cmp" for 0x402c2f>, <DisassemblerInsn "je" for 0x402c32>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bc5>, <DisassemblerInsn "mov" for 0x402bcd>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "lea" for 0x402be4>, <DisassemblerInsn "call" for 0x402bec>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403404>, <DisassemblerInsn "mov" for 0x403409>, <DisassemblerInsn "jmp" for 0x403410>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e7a>, <DisassemblerInsn "mov" for 0x402e82>, <DisassemblerInsn "mov" for 0x402e8a>, <DisassemblerInsn "mov" for 0x402e92>, <DisassemblerInsn "mov" for 0x402e98>, <DisassemblerInsn "mov" for 0x402e9e>, <DisassemblerInsn "mov" for 0x402ea5>, <DisassemblerInsn "mov" for 0x402eac>, <DisassemblerInsn "cmp" for 0x402eb4>, <DisassemblerInsn "je" for 0x402eb9>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031a5>, <DisassemblerInsn "cmp" for 0x4031ad>, <DisassemblerInsn "je" for 0x4031b5>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b89>, <DisassemblerInsn "cmp" for 0x402b91>, <DisassemblerInsn "je" for 0x402b99>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f77>, <DisassemblerInsn "mov" for 0x402f7e>, <DisassemblerInsn "mov" for 0x402f86>, <DisassemblerInsn "add" for 0x402f89>, <DisassemblerInsn "mov" for 0x402f90>, <DisassemblerInsn "mov" for 0x402f98>, <DisassemblerInsn "cmp" for 0x402f9e>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "jne" for 0x402faf>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f52>, <DisassemblerInsn "mov" for 0x402f59>, <DisassemblerInsn "mov" for 0x402f61>, <DisassemblerInsn "mov" for 0x402f67>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "jmp" for 0x402f75>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40342f>, <DisassemblerInsn "mov" for 0x403434>, <DisassemblerInsn "mov" for 0x40343c>, <DisassemblerInsn "mov" for 0x40343e>, <DisassemblerInsn "call" for 0x403442>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403553>, <DisassemblerInsn "mov" for 0x403557>, <DisassemblerInsn "test" for 0x40355e>, <DisassemblerInsn "mov" for 0x403561>, <DisassemblerInsn "jne" for 0x403568>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a02>, <DisassemblerInsn "add" for 0x402a08>, <DisassemblerInsn "mov" for 0x402a0b>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "cmp" for 0x402a17>, <DisassemblerInsn "je" for 0x402a1a>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032f6>, <DisassemblerInsn "mov" for 0x4032fa>, <DisassemblerInsn "mov" for 0x4032ff>, <DisassemblerInsn "add" for 0x403303>, <DisassemblerInsn "mov" for 0x403307>, <DisassemblerInsn "cmp" for 0x40330c>, <DisassemblerInsn "je" for 0x40330e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "mov" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b63>, <DisassemblerInsn "cmp" for 0x402b6b>, <DisassemblerInsn "je" for 0x402b6f>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403466>, <DisassemblerInsn "mov" for 0x40346e>, <DisassemblerInsn "lea" for 0x403473>, <DisassemblerInsn "mov" for 0x40347a>, <DisassemblerInsn "call" for 0x40347c>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403310>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d88>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "mov" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9d>, <DisassemblerInsn "mov" for 0x402da4>, <DisassemblerInsn "jmp" for 0x402dab>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032bb>, <DisassemblerInsn "mov" for 0x4032bf>, <DisassemblerInsn "mov" for 0x4032c7>, <DisassemblerInsn "mov" for 0x4032ca>, <DisassemblerInsn "xor" for 0x4032ce>, <DisassemblerInsn "mov" for 0x4032d0>, <DisassemblerInsn "mov" for 0x4032d5>, <DisassemblerInsn "jmp" for 0x4032d9>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034ec>, <DisassemblerInsn "mov" for 0x4034f1>, <DisassemblerInsn "call" for 0x4034f9>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "lea" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e4>, <DisassemblerInsn "call" for 0x4029e9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402de1>, <DisassemblerInsn "xor" for 0x402de9>, <DisassemblerInsn "cmp" for 0x402deb>, <DisassemblerInsn "mov" for 0x402def>, <DisassemblerInsn "mov" for 0x402df1>, <DisassemblerInsn "mov" for 0x402df8>, <DisassemblerInsn "je" for 0x402dff>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403312>, <DisassemblerInsn "mov" for 0x40331a>, <DisassemblerInsn "lea" for 0x40331f>, <DisassemblerInsn "mov" for 0x403326>, <DisassemblerInsn "call" for 0x403328>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031d9>, <DisassemblerInsn "mov" for 0x4031e1>, <DisassemblerInsn "mov" for 0x4031e3>, <DisassemblerInsn "cmp" for 0x4031ea>, <DisassemblerInsn "je" for 0x4031ed>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3c>, <DisassemblerInsn "jmp" for 0x402a43>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b9b>, <DisassemblerInsn "mov" for 0x402ba3>, <DisassemblerInsn "lea" for 0x402ba6>, <DisassemblerInsn "call" for 0x402bae>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c7>, <DisassemblerInsn "cmp" for 0x4029cf>, <DisassemblerInsn "je" for 0x4029d3>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4033e7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403024>, <DisassemblerInsn "mov" for 0x40302c>, <DisassemblerInsn "lea" for 0x403031>, <DisassemblerInsn "mov" for 0x403038>, <DisassemblerInsn "call" for 0x40303a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40359d>, <DisassemblerInsn "mov" for 0x4035a4>, <DisassemblerInsn "lea" for 0x4035a7>, <DisassemblerInsn "call" for 0x4035af>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031bb>, <DisassemblerInsn "mov" for 0x4031c3>, <DisassemblerInsn "mov" for 0x4031c7>, <DisassemblerInsn "cmp" for 0x4031cf>, <DisassemblerInsn "je" for 0x4031d3>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403415>, <DisassemblerInsn "mov" for 0x40341d>, <DisassemblerInsn "mov" for 0x403424>, <DisassemblerInsn "cmp" for 0x403429>, <DisassemblerInsn "je" for 0x40342d>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40333e>, <DisassemblerInsn "mov" for 0x403346>, <DisassemblerInsn "mov" for 0x40334a>, <DisassemblerInsn "cmp" for 0x40334f>, <DisassemblerInsn "je" for 0x403353>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4033aa>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "add" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cef>, <DisassemblerInsn "mov" for 0x402cf7>, <DisassemblerInsn "mov" for 0x402cfa>, <DisassemblerInsn "cmp" for 0x402d01>, <DisassemblerInsn "je" for 0x402d04>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403290>, <DisassemblerInsn "mov" for 0x403298>, <DisassemblerInsn "mov" for 0x40329c>, <DisassemblerInsn "cmp" for 0x4032a1>, <DisassemblerInsn "je" for 0x4032a5>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fb1>, <DisassemblerInsn "mov" for 0x402fb9>, <DisassemblerInsn "mov" for 0x402fc1>, <DisassemblerInsn "mov" for 0x402fc9>, <DisassemblerInsn "mov" for 0x402fcc>, <DisassemblerInsn "mov" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "mov" for 0x402fd3>, <DisassemblerInsn "mov" for 0x402fda>, <DisassemblerInsn "mov" for 0x402fe1>, <DisassemblerInsn "mov" for 0x402fe9>, <DisassemblerInsn "mov" for 0x402ff0>, <DisassemblerInsn "mov" for 0x402ff7>, <DisassemblerInsn "cmp" for 0x402ffe>, <DisassemblerInsn "jne" for 0x403001>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4035b4>, <DisassemblerInsn "add" for 0x4035bc>, <DisassemblerInsn "call" for 0x4035c3>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403359>, <DisassemblerInsn "mov" for 0x403361>, <DisassemblerInsn "mov" for 0x403368>, <DisassemblerInsn "cmp" for 0x40336d>, <DisassemblerInsn "je" for 0x403371>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4034fb>, <DisassemblerInsn "mov" for 0x4034fe>, <DisassemblerInsn "mov" for 0x403500>, <DisassemblerInsn "mov" for 0x403507>, <DisassemblerInsn "jl" for 0x40350e>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403262>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e38>, <DisassemblerInsn "jl" for 0x402e3b>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403127>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "mov" for 0x403137>, <DisassemblerInsn "mov" for 0x40313e>, <DisassemblerInsn "mov" for 0x403145>, <DisassemblerInsn "movzx" for 0x40314d>, <DisassemblerInsn "mov" for 0x403154>, <DisassemblerInsn "cmp" for 0x40315b>, <DisassemblerInsn "jle" for 0x403161>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "mov" for 0x402ed7>, <DisassemblerInsn "add" for 0x402eda>, <DisassemblerInsn "mov" for 0x402ede>, <DisassemblerInsn "mov" for 0x402ee6>, <DisassemblerInsn "cmp" for 0x402eeb>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "ja" for 0x402ef9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a9e>, <DisassemblerInsn "mov" for 0x402aa1>, <DisassemblerInsn "mov" for 0x402aa9>, <DisassemblerInsn "add" for 0x402aac>, <DisassemblerInsn "mov" for 0x402ab3>, <DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac2>, <DisassemblerInsn "cmp" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "je" for 0x402ad2>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403373>, <DisassemblerInsn "mov" for 0x403378>, <DisassemblerInsn "xor" for 0x40337b>, <DisassemblerInsn "cmp" for 0x40337d>, <DisassemblerInsn "mov" for 0x403381>, <DisassemblerInsn "mov" for 0x403386>, <DisassemblerInsn "je" for 0x40338b>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "lea" for 0x402be4>, <DisassemblerInsn "call" for 0x402bec>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402bc3>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e5a>, <DisassemblerInsn "jge" for 0x402e5d>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403185>, <DisassemblerInsn "mov" for 0x40318a>, <DisassemblerInsn "jmp" for 0x403191>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030b9>, <DisassemblerInsn "mov" for 0x4030c1>, <DisassemblerInsn "cmp" for 0x4030c9>, <DisassemblerInsn "mov" for 0x4030d1>, <DisassemblerInsn "mov" for 0x4030d9>, <DisassemblerInsn "jne" for 0x4030e0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ad8>, <DisassemblerInsn "mov" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae8>, <DisassemblerInsn "mov" for 0x402aeb>, <DisassemblerInsn "add" for 0x402af2>, <DisassemblerInsn "mov" for 0x402af9>, <DisassemblerInsn "cmp" for 0x402b01>, <DisassemblerInsn "jle" for 0x402b04>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030ef>, <DisassemblerInsn "cmp" for 0x4030f6>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "jl" for 0x403100>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40357d>, <DisassemblerInsn "mov" for 0x403585>, <DisassemblerInsn "mov" for 0x403589>, <DisassemblerInsn "mov" for 0x403591>, <DisassemblerInsn "mov" for 0x403594>, <DisassemblerInsn "jmp" for 0x40359b>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402bb3>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "jl" for 0x402bbd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x403024>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402a94>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402d88>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x403196>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3f91]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x403514>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x403264>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x4035f3>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x160], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40359d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x403514>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x403570>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4033e9>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x40323f>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1af], al>', '<test~~al, 1>', '<jne~~0x4029c0>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x403050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1d0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x403514>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x403312>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x403127>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1d8>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<lea~~rax, [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x1d0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<ja~~0x4035f3>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13b], al>', '<test~~al, 1>', '<jne~~0x402d75>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x403514>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x403514>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x403514>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x402b89>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13b]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jne~~0x402e05>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x439b]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402f77>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x114], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402d88>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x4031bb>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x3853]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x384a], eax>', '<mov~~rax, qword ptr [rip + 0x3833]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x403553>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x10c]>', '<mov~~esi, dword ptr [rsp + 0x110]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0x100], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x17c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x140], eax>', '<je~~0x402dad>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c0c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x403415>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3cc9]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x4034a0>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<cmp~~eax, -1>', '<je~~0x402f77>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x403492>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3b31]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x403312>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4030b2>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x3824]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4030b2>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x403290>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3af5]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402ecf>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x402caa>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x188]>', '<call~~0x500060>']}, {'block_Idx': 122, 'blockInsts': ['<jmp~~0x4033ca>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x403096>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<add~~rsp, 0x1d8>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<cmp~~eax, 0>', '<je~~0x402caa>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402ecf>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x4034a0>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x402bd4>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xd8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x402fe1>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x402fe1>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x1af]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x4035f3>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x4370]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x4367], eax>', '<mov~~eax, dword ptr [rip + 0x4361]>', '<cmp~~eax, 1>', '<je~~0x402a48>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x40333e>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<cmp~~rax, 0>', '<je~~0x402b89>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3aa3]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 124, 'blockInsts': ['<jmp~~0x4032db>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jmp~~0x402e05>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4032f6>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~rax>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<lea~~rdi, [rip + 0x438c]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<je~~0x402eac>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b86]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x403264>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x403514>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x43a1]>', '<mov~~qword ptr [rsp + 0x1a0], rax>', '<cmp~~rax, 0>', '<je~~0x402a02>']}, {'block_Idx': 134, 'blockInsts': ['<jmp~~0x4033ac>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3df2]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x403290>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x4034a0>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x403415>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x403415>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<je~~0x402d75>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x40333e>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x403024>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x40338f>']}, {'block_Idx': 140, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x19c], ecx>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40359d>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x40321b>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x402e5f>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x403196>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x164], eax>', '<ja~~0x40359d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x403514>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4033e9>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x402bd4>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x402eac>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40359d>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x403127>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<cmp~~eax, 0>', '<jle~~0x402bc5>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40359d>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jmp~~0x4035f3>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40359d>']}], 'cfg_edge_info': [(64, 69), (81, 85), (42, 48), (44, 45), (107, 113), (101, 106), (87, 89), (135, 138), (31, 29), (74, 73), (136, 121), (97, 102), (85, 82), (121, 133), (13, 17), (79, 81), (132, 96), (130, 108), (98, 103), (82, 86), (90, 99), (20, 22), (29, 34), (108, 123), (8, 11), (39, 44), (23, 27), (47, 27), (85, 84), (132, 135), (72, 77), (48, 31), (17, 16), (140, 13), (89, 93), (100, 105), (114, 122), (99, 33), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (129, 134), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (127, 106), (81, 84), (64, 68), (28, 2), (116, 124), (84, 86), (75, 62), (97, 101), (103, 117), (133, 33), (92, 96), (34, 39), (13, 16), (15, 13), (93, 97), (55, 58), (54, 60), (125, 111), (102, 109), (29, 33), (23, 26), (11, 18), (42, 33), (139, 2), (79, 82), (116, 101), (7, 139), (82, 87), (123, 33), (100, 13), (58, 62), (20, 23), (4, 6), (51, 56), (95, 90), (60, 13), (78, 83), (126, 132), (104, 111), (89, 92), (105, 140), (91, 95), (45, 52), (63, 67), (140, 33), (6, 8), (73, 77), (129, 106), (134, 136), (35, 41), (67, 76), (43, 54), (112, 126), (35, 13), (91, 33), (62, 61), (136, 129), (139, 6), (56, 63), (111, 118), (77, 79), (75, 61), (130, 116), (124, 130), (86, 91), (87, 90), (101, 107), (107, 114), (8, 10), (96, 13), (106, 112), (1, 4), (16, 2), (113, 127), (27, 32), (102, 108), (3, 4), (18, 20), (84, 87), (69, 68), (98, 104), (61, 64), (21, 28), (106, 96), (118, 125), (22, 29), (39, 45), (34, 40), (19, 21), (114, 121), (125, 103), (83, 33), (138, 33), (109, 116), (41, 27), (93, 98), (18, 13), (131, 100), (96, 100), (72, 78), (58, 61), (32, 42), (51, 55), (26, 35), (95, 89), (44, 50), (126, 131), (0, 1), (76, 66), (40, 46), (111, 97), (92, 93), (45, 51), (63, 66), (41, 47), (33, 43), (4, 7), (52, 56), (117, 33), (40, 39), (10, 13), (131, 13), (122, 129), (68, 73), (6, 9)], 'cdg_edge_info': [(140, 43), (64, 69), (55, 66), (81, 85), (42, 48), (44, 45), (89, 13), (107, 113), (55, 75), (130, 60), (87, 89), (27, 13), (20, 29), (93, 13), (8, 18), (114, 54), (136, 121), (97, 102), (111, 101), (85, 82), (92, 97), (63, 61), (92, 106), (13, 17), (79, 81), (132, 96), (61, 54), (107, 106), (98, 103), (82, 86), (130, 108), (73, 83), (100, 140), (29, 34), (77, 83), (39, 44), (23, 27), (29, 43), (95, 43), (85, 84), (29, 61), (132, 135), (114, 129), (72, 77), (42, 43), (136, 43), (23, 29), (40, 45), (29, 45), (72, 43), (29, 54), (114, 122), (100, 105), (95, 54), (92, 101), (29, 63), (73, 60), (125, 43), (55, 63), (63, 13), (98, 43), (73, 78), (42, 54), (102, 123), (114, 33), (77, 78), (95, 93), (0, 2), (69, 74), (51, 13), (23, 31), (114, 60), (1, 3), (68, 72), (72, 54), (29, 56), (87, 43), (61, 33), (114, 133), (42, 29), (102, 43), (91, 43), (16, 19), (55, 56), (116, 106), (125, 54), (64, 13), (16, 28), (102, 116), (140, 54), (84, 86), (51, 61), (75, 62), (4, 139), (129, 136), (92, 96), (13, 16), (87, 54), (42, 31), (81, 13), (27, 42), (16, 21), (125, 111), (102, 109), (91, 54), (102, 54), (34, 66), (34, 75), (132, 43), (29, 33), (95, 33), (95, 97), (87, 93), (23, 35), (95, 106), (95, 60), (42, 33), (139, 2), (116, 101), (79, 82), (82, 87), (20, 23), (95, 90), (132, 54), (72, 33), (95, 99), (126, 132), (89, 92), (13, 2), (136, 54), (125, 33), (72, 60), (91, 95), (39, 66), (79, 84), (63, 67), (140, 33), (139, 13), (39, 75), (73, 77), (63, 76), (125, 60), (111, 125), (34, 61), (129, 106), (6, 8), (35, 41), (61, 60), (140, 60), (69, 73), (98, 54), (130, 123), (95, 101), (87, 33), (87, 97), (73, 43), (0, 4), (87, 106), (132, 138), (102, 33), (91, 33), (101, 13), (0, 13), (77, 43), (136, 129), (139, 6), (39, 13), (34, 63), (125, 117), (102, 60), (91, 60), (82, 91), (130, 43), (72, 83), (77, 79), (107, 114), (98, 111), (114, 43), (130, 116), (87, 90), (101, 107), (87, 99), (106, 112), (0, 6), (73, 54), (27, 32), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (132, 33), (35, 27), (18, 20), (84, 87), (130, 54), (98, 104), (136, 33), (69, 68), (106, 96), (34, 13), (132, 60), (42, 60), (61, 64), (87, 101), (34, 40), (136, 60), (114, 121), (39, 63), (93, 98), (136, 133), (125, 103), (106, 126), (98, 33), (35, 29), (131, 100), (72, 78), (96, 100), (51, 55), (97, 13), (95, 89), (126, 131), (98, 60), (116, 130), (0, 1), (76, 66), (111, 97), (39, 56), (76, 75), (92, 93), (61, 43), (111, 106), (45, 51), (87, 60), (35, 31), (4, 7), (84, 91), (61, 68), (73, 33), (98, 117), (29, 39), (40, 39), (77, 33), (68, 73), (29, 66), (130, 33), (77, 60), (29, 75)], 'ddg_edge_info': [(7, 17), (66, 103), (67, 68), (90, 33), (67, 77), (8, 18), (121, 133), (77, 126), (62, 74), (62, 92), (125, 130), (31, 86), (62, 101), (31, 95), (66, 62), (31, 104), (31, 113), (114, 129), (66, 89), (113, 21), (7, 21), (62, 69), (39, 76), (102, 114), (62, 78), (31, 72), (86, 17), (31, 81), (31, 90), (95, 93), (31, 108), (66, 75), (66, 84), (113, 16), (55, 56), (7, 16), (72, 136), (129, 136), (105, 17), (62, 64), (125, 102), (54, 60), (62, 73), (125, 111), (102, 109), (31, 67), (0, 107), (86, 21), (31, 85), (67, 17), (66, 61), (95, 97), (31, 103), (113, 2), (7, 2), (123, 33), (113, 105), (60, 13), (105, 21), (0, 75), (91, 95), (0, 84), (62, 68), (31, 62), (62, 77), (39, 75), (73, 77), (86, 16), (31, 89), (95, 92), (67, 21), (43, 54), (95, 101), (64, 95), (136, 129), (64, 131), (98, 102), (3, 130), (113, 100), (105, 16), (0, 79), (86, 2), (31, 66), (66, 33), (32, 31), (31, 75), (3, 4), (0, 106), (31, 84), (67, 16), (3, 98), (66, 136), (86, 114), (109, 116), (3, 125), (105, 2), (8, 60), (0, 56), (31, 34), (0, 74), (112, 135), (31, 61), (67, 2), (84, 91), (86, 100), (131, 13), (66, 131), (68, 73), (86, 109), (3, 102), (67, 105), (67, 114), (86, 136), (62, 17), (54, 13), (0, 51), (8, 64), (31, 29), (39, 51), (0, 69), (31, 56), (13, 17), (56, 67), (93, 125), (108, 123), (86, 95), (86, 104), (67, 100), (112, 13), (86, 113), (67, 109), (21, 2), (6, 13), (86, 131), (8, 41), (62, 21), (67, 136), (54, 17), (0, 55), (77, 140), (31, 33), (0, 64), (0, 73), (31, 51), (99, 33), (31, 136), (66, 112), (86, 90), (66, 121), (67, 86), (66, 130), (67, 95), (68, 72), (86, 108), (67, 104), (61, 33), (8, 27), (67, 113), (62, 16), (0, 41), (54, 21), (8, 63), (0, 68), (66, 13), (13, 16), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (66, 107), (67, 72), (66, 116), (67, 81), (66, 125), (67, 90), (86, 103), (8, 13), (86, 112), (67, 108), (62, 2), (0, 18), (42, 33), (0, 27), (54, 16), (20, 23), (61, 131), (33, 60), (104, 111), (62, 105), (62, 114), (140, 33), (66, 93), (31, 135), (66, 102), (66, 111), (67, 76), (130, 114), (86, 89), (67, 85), (86, 98), (66, 129), (0, 4), (67, 103), (91, 33), (0, 13), (1, 139), (8, 35), (54, 2), (0, 31), (0, 40), (131, 105), (44, 55), (62, 100), (62, 109), (16, 2), (64, 60), (31, 112), (66, 79), (31, 121), (73, 136), (62, 136), (121, 33), (66, 97), (67, 62), (31, 130), (66, 106), (86, 93), (67, 89), (130, 136), (0, 8), (0, 17), (83, 33), (31, 13), (61, 112), (112, 105), (62, 86), (62, 95), (62, 104), (31, 98), (62, 113), (31, 107), (66, 74), (31, 116), (31, 125), (66, 92), (66, 101), (67, 66), (67, 75), (67, 84), (107, 129), (0, 3), (0, 21), (62, 72), (112, 100), (62, 81), (62, 90), (3, 13), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (31, 111), (66, 78), (114, 136), (31, 129), (67, 61), (107, 106), (0, 7), (0, 16), (135, 33), (113, 131), (113, 140), (125, 114), (62, 85), (31, 79), (3, 8), (3, 17), (62, 103), (86, 33), (31, 97), (66, 64), (140, 13), (95, 100), (31, 106), (84, 109), (66, 73), (0, 2), (113, 126), (105, 33), (81, 84), (31, 74), (62, 89), (0, 105), (31, 92), (3, 21), (84, 95), (31, 101), (66, 68), (78, 33), (67, 33), (103, 117), (66, 77), (95, 131), (29, 33), (98, 114), (77, 91), (113, 112), (40, 51), (139, 2), (108, 33), (8, 95), (7, 139), (31, 69), (0, 100), (62, 84), (31, 78), (3, 7), (0, 109), (51, 56), (95, 90), (3, 16), (105, 140), (113, 13), (112, 17), (67, 131), (101, 114), (62, 61), (0, 77), (31, 55), (0, 86), (31, 64), (32, 29), (0, 95), (31, 73), (3, 2), (0, 104), (106, 112), (112, 21), (86, 121), (3, 114), (97, 130), (86, 130), (98, 104), (21, 28), (69, 77), (8, 76), (0, 72), (101, 136), (0, 81), (39, 63), (138, 33), (66, 17), (31, 68), (32, 33), (86, 13), (31, 77), (32, 42), (64, 74), (95, 89), (116, 130), (86, 107), (112, 16), (86, 116), (67, 112), (86, 125), (67, 121), (67, 130), (69, 72), (113, 106), (62, 33), (105, 13), (0, 67), (23, 32), (31, 45), (66, 21), (39, 67), (0, 85), (72, 73), (64, 69), (67, 13), (135, 138), (17, 21), (112, 2), (97, 102), (86, 102), (67, 98), (86, 111), (67, 107), (67, 116), (86, 129), (67, 125), (90, 99), (0, 44), (0, 62), (31, 40), (66, 16), (112, 132), (13, 28), (62, 131), (72, 77), (17, 16), (86, 97), (67, 93), (86, 106), (67, 102), (27, 29), (67, 111), (67, 129), (0, 39), (31, 17), (29, 84), (103, 33), (66, 2), (31, 44), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (66, 114), (67, 79), (86, 92), (86, 101), (133, 33), (67, 97), (67, 106), (8, 29), (0, 34), (0, 43), (31, 21), (4, 13), (0, 61), (31, 39), (23, 35), (44, 67), (112, 131), (62, 112), (1, 16), (62, 121), (62, 130), (64, 72), (66, 100), (100, 13), (66, 109), (67, 74), (78, 83), (126, 132), (67, 92), (86, 105), (67, 101), (0, 20), (62, 13), (8, 42), (111, 125), (31, 16), (62, 98), (112, 126), (62, 107), (35, 13), (62, 116), (34, 45), (62, 125), (66, 86), (56, 63), (66, 95), (66, 104), (67, 69), (66, 113), (67, 78), (130, 116), (86, 91), (18, 54), (31, 2), (62, 93), (62, 102), (8, 131), (44, 75), (62, 111), (31, 105), (66, 72), (31, 114), (93, 98), (66, 81), (62, 129), (66, 90), (18, 13), (7, 13), (67, 64), (66, 108), (67, 73), (126, 131), (0, 1), (0, 28), (73, 79), (62, 79), (4, 7), (33, 43), (69, 136), (117, 33), (61, 132), (62, 97), (62, 106), (31, 100), (31, 109), (66, 85), (113, 17), (7, 8)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/Os/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/Os/utils.s---avcodec_open2---after
function id: 17
function flag: True
There are 629 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/Os/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/Os/utils.o---after
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 864 nodes and 1547 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 629 instructions in binary file.
[4203582, 4203609, 4203638, 4203652, 4203680, 4203728, 4203741]
The execution time of patched subCFG information extraction via angr: 0:00:02.259978
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402445>, <DisassemblerInsn "mov" for 0x40244d>, <DisassemblerInsn "cmp" for 0x402454>, <DisassemblerInsn "jne" for 0x402457>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "movzx" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "cmp" for 0x402549>, <DisassemblerInsn "jle" for 0x40254f>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024d0>, <DisassemblerInsn "call" for 0x4024d8>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402484>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x40249a>, <DisassemblerInsn "mov" for 0x40249d>, <DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024af>, <DisassemblerInsn "cmp" for 0x4024b7>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c7>, <DisassemblerInsn "jne" for 0x4024ce>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402476>, <DisassemblerInsn "cmp" for 0x40247e>, <DisassemblerInsn "jne" for 0x402482>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "cmp" for 0x4024e4>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "jl" for 0x4024ee>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40298b>, <DisassemblerInsn "mov" for 0x402992>, <DisassemblerInsn "lea" for 0x402995>, <DisassemblerInsn "call" for 0x40299d>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fb>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "mov" for 0x402506>, <DisassemblerInsn "mov" for 0x40250e>, <DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "movzx" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "cmp" for 0x402549>, <DisassemblerInsn "jle" for 0x40254f>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "cmp" for 0x402400>, <DisassemblerInsn "sete" for 0x402403>, <DisassemblerInsn "cmp" for 0x402406>, <DisassemblerInsn "sete" for 0x402409>, <DisassemblerInsn "or" for 0x40240c>, <DisassemblerInsn "test" for 0x40240e>, <DisassemblerInsn "jne" for 0x402410>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402459>, <DisassemblerInsn "mov" for 0x402461>, <DisassemblerInsn "add" for 0x402464>, <DisassemblerInsn "mov" for 0x402468>, <DisassemblerInsn "cmp" for 0x402470>, <DisassemblerInsn "je" for 0x402474>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024af>, <DisassemblerInsn "cmp" for 0x4024b7>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c7>, <DisassemblerInsn "jne" for 0x4024ce>]'}], 'cfg_block_detailed_info': [{'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4024a0>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402584>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402515>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4024a0>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40298b>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402584>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40243e>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402484>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402515>']}], 'cfg_edge_info': [(64, 66), (70, 72), (66, 68), (67, 71), (69, 68), (68, 71), (72, 75), (62, 64), (67, 70), (68, 70), (72, 26), (69, 67), (64, 67), (66, 69)]}]}
{'avcodec_open2': [4203582, 4203609, 4203638, 4203652, 4203680, 4203728, 4203741]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_after/Os/utils.o---after
The extraction of function: avcodec_open2
[4203582, 4203609, 4203638, 4203652, 4203680, 4203728, 4203741]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 141 nodes and 229 edges in CFGEmulated.
It has 141 nodes and 357 edges in CDG.
It has 2264 nodes and 3014 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4203582, 4203609, 4203638, 4203652, 4203680, 4203728, 4203741]
{4204547, 4204041, 4203538, 4204573, 4202530, 4203046, 4203051, 4203565, 4204077, 4204597, 4202038, 4203582, 4204612, 4203080, 4203085, 4204114, 4204628, 4203609, 4203112, 4204141, 4204655, 4203638, 4204158, 4204672, 4203652, 4202124, 4204686, 4202648, 4204185, 4203680, 4204201, 4203177, 4204726, 4203197, 4202182, 4204233, 4202702, 4203728, 4204762, 4203741, 4204260, 4204777, 4203245, 4203764, 4202232, 4204288, 4204802, 4203797, 4202262, 4204315, 4204332, 4203308, 4201774, 4204846, 4203328, 4204865, 4202306, 4204359, 4203857, 4204892, 4204894, 4204385, 4202851, 4203365, 4204907, 4203891, 4202359, 4201850, 4204411, 4204413, 4203908, 4202377, 4204939, 4203923, 4201876, 4204442, 4202907, 4203423, 4202401, 4204962, 4203945, 4201902, 4202417, 4204982, 4204472, 4202434, 4204995, 4201923, 4203975, 4203471, 4202959, 4204503, 4201945, 4203997, 4202463, 4205025, 4201968, 4203505, 4204530, 4202995, 4202486}
[51, 72, 74, 73, 13, 92, 69, 122, 26, 139, 67, 129, 18, 133, 113, 10, 32, 102, 117, 17, 78, 21, 90, 127, 23, 40, 2, 34, 43, 81, 4, 29, 114, 50, 130, 75, 134, 56, 20, 55, 33, 28, 136, 132, 85, 138, 112, 16, 97, 84, 93, 60, 47, 9, 62, 124, 99, 35, 111, 77, 58, 95, 3, 96, 48, 108, 45, 101, 66, 11, 44, 27, 63, 121, 125, 86, 135, 0, 103, 107, 6, 116, 41, 31, 61, 1, 64, 7, 87, 109, 82, 52, 68, 105, 91, 42, 98, 8, 46, 15, 118, 22, 89, 76, 106, 104, 19, 126, 39, 79, 83, 123, 100, 140, 131, 54]
The execution time of patched slicing information extraction via angr: 0:00:30.354514
{'avcodec_open2': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219b>, <DisassemblerInsn "mov" for 0x4021a2>, <DisassemblerInsn "mov" for 0x4021aa>, <DisassemblerInsn "test" for 0x4021b0>, <DisassemblerInsn "setne" for 0x4021b2>, <DisassemblerInsn "xor" for 0x4021b5>, <DisassemblerInsn "or" for 0x4021b8>, <DisassemblerInsn "xor" for 0x4021ba>, <DisassemblerInsn "test" for 0x4021bc>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "mov" for 0x4021c6>, <DisassemblerInsn "jne" for 0x4021cd>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239f>, <DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "mov" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b7>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "mov" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023bf>, <DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c8>, <DisassemblerInsn "mov" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "jne" for 0x4023ef>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402340>, <DisassemblerInsn "mov" for 0x402347>, <DisassemblerInsn "mov" for 0x40234f>, <DisassemblerInsn "mov" for 0x402355>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "jmp" for 0x402363>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "jne" for 0x4023ef>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402902>, <DisassemblerInsn "mov" for 0x402909>, <DisassemblerInsn "mov" for 0x40290d>, <DisassemblerInsn "add" for 0x402913>, <DisassemblerInsn "mov" for 0x402916>, <DisassemblerInsn "mov" for 0x40291c>, <DisassemblerInsn "mov" for 0x402923>, <DisassemblerInsn "cmp" for 0x402928>, <DisassemblerInsn "je" for 0x40292c>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402593>, <DisassemblerInsn "cmp" for 0x40259b>, <DisassemblerInsn "je" for 0x4025a3>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402333>, <DisassemblerInsn "cmp" for 0x40233b>, <DisassemblerInsn "je" for 0x40233e>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40277b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "call" for 0x401f11>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd9>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "cmp" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de3>, <DisassemblerInsn "jne" for 0x401dea>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40222b>, <DisassemblerInsn "mov" for 0x402233>, <DisassemblerInsn "mov" for 0x40223b>, <DisassemblerInsn "mov" for 0x40223e>, <DisassemblerInsn "xor" for 0x402241>, <DisassemblerInsn "call" for 0x402243>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b8>, <DisassemblerInsn "mov" for 0x4027bd>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "add" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027cb>, <DisassemblerInsn "cmp" for 0x4027d0>, <DisassemblerInsn "je" for 0x4027d3>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e8f>, <DisassemblerInsn "mov" for 0x401e97>, <DisassemblerInsn "add" for 0x401e9a>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea9>, <DisassemblerInsn "mov" for 0x401eb0>, <DisassemblerInsn "cmp" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401eb9>, <DisassemblerInsn "je" for 0x401ec0>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027f2>, <DisassemblerInsn "mov" for 0x4027f7>, <DisassemblerInsn "jmp" for 0x4027fe>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40277d>, <DisassemblerInsn "mov" for 0x402785>, <DisassemblerInsn "lea" for 0x40278a>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "call" for 0x402793>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e7d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "lea" for 0x401f94>, <DisassemblerInsn "call" for 0x401f9c>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402699>, <DisassemblerInsn "mov" for 0x40269e>, <DisassemblerInsn "mov" for 0x4026a0>, <DisassemblerInsn "cmp" for 0x4026a4>, <DisassemblerInsn "je" for 0x4026a7>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40266d>, <DisassemblerInsn "mov" for 0x402672>, <DisassemblerInsn "jmp" for 0x402679>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "lea" for 0x402933>, <DisassemblerInsn "mov" for 0x40293a>, <DisassemblerInsn "call" for 0x40293f>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402412>, <DisassemblerInsn "mov" for 0x40241a>, <DisassemblerInsn "lea" for 0x40241f>, <DisassemblerInsn "mov" for 0x402426>, <DisassemblerInsn "call" for 0x402428>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40295e>, <DisassemblerInsn "call" for 0x402966>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402551>, <DisassemblerInsn "mov" for 0x402558>, <DisassemblerInsn "mov" for 0x402560>, <DisassemblerInsn "lea" for 0x402565>, <DisassemblerInsn "mov" for 0x40256c>, <DisassemblerInsn "call" for 0x40256e>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402798>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef8>, <DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jne" for 0x401f04>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x402030>, <DisassemblerInsn "cmp" for 0x402037>, <DisassemblerInsn "je" for 0x40203a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029e1>, <DisassemblerInsn "add" for 0x4029e8>, <DisassemblerInsn "ret" for 0x4029ef>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "mov" for 0x401ffe>, <DisassemblerInsn "add" for 0x402001>, <DisassemblerInsn "mov" for 0x402008>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "mov" for 0x402016>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "je" for 0x402020>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a2>, <DisassemblerInsn "add" for 0x4029aa>, <DisassemblerInsn "call" for 0x4029b1>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402459>, <DisassemblerInsn "mov" for 0x402461>, <DisassemblerInsn "add" for 0x402464>, <DisassemblerInsn "mov" for 0x402468>, <DisassemblerInsn "cmp" for 0x402470>, <DisassemblerInsn "je" for 0x402474>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "mov" for 0x401db5>, <DisassemblerInsn "cmp" for 0x401dbd>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdf>, <DisassemblerInsn "cmp" for 0x401fe6>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "jl" for 0x401ff0>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402761>, <DisassemblerInsn "mov" for 0x402766>, <DisassemblerInsn "xor" for 0x402769>, <DisassemblerInsn "cmp" for 0x40276b>, <DisassemblerInsn "mov" for 0x40276f>, <DisassemblerInsn "mov" for 0x402774>, <DisassemblerInsn "je" for 0x402779>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020fb>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x40211a>, <DisassemblerInsn "mov" for 0x40211c>, <DisassemblerInsn "xor" for 0x402122>, <DisassemblerInsn "sub" for 0x402125>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "sar" for 0x402135>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "xor" for 0x40213f>, <DisassemblerInsn "sub" for 0x402141>, <DisassemblerInsn "mov" for 0x402144>, <DisassemblerInsn "xor" for 0x402146>, <DisassemblerInsn "sub" for 0x402148>, <DisassemblerInsn "sar" for 0x40214a>, <DisassemblerInsn "mov" for 0x40214c>, <DisassemblerInsn "xor" for 0x402154>, <DisassemblerInsn "sub" for 0x402156>, <DisassemblerInsn "mov" for 0x402158>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "jmp" for 0x402161>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "mov" for 0x4026ce>, <DisassemblerInsn "mov" for 0x4026d3>, <DisassemblerInsn "cmp" for 0x4026d6>, <DisassemblerInsn "mov" for 0x4026d9>, <DisassemblerInsn "mov" for 0x4026de>, <DisassemblerInsn "je" for 0x4026e2>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402286>, <DisassemblerInsn "mov" for 0x40228c>, <DisassemblerInsn "mov" for 0x402293>, <DisassemblerInsn "mov" for 0x40229a>, <DisassemblerInsn "cmp" for 0x4022a2>, <DisassemblerInsn "je" for 0x4022a7>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4027d5>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021f3>, <DisassemblerInsn "mov" for 0x4021fb>, <DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "mov" for 0x40220a>, <DisassemblerInsn "add" for 0x402211>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "xor" for 0x40221f>, <DisassemblerInsn "call" for 0x402221>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "add" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee7>, <DisassemblerInsn "cmp" for 0x401eef>, <DisassemblerInsn "jle" for 0x401ef2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021cf>, <DisassemblerInsn "xor" for 0x4021d7>, <DisassemblerInsn "cmp" for 0x4021d9>, <DisassemblerInsn "mov" for 0x4021dd>, <DisassemblerInsn "mov" for 0x4021df>, <DisassemblerInsn "mov" for 0x4021e6>, <DisassemblerInsn "je" for 0x4021ed>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40298b>, <DisassemblerInsn "mov" for 0x402992>, <DisassemblerInsn "lea" for 0x402995>, <DisassemblerInsn "call" for 0x40299d>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40296b>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x402977>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "mov" for 0x402982>, <DisassemblerInsn "jmp" for 0x402989>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40279a>, <DisassemblerInsn "mov" for 0x40279f>, <DisassemblerInsn "mov" for 0x4027a4>, <DisassemblerInsn "cmp" for 0x4027a8>, <DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "mov" for 0x4027b1>, <DisassemblerInsn "je" for 0x4027b6>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402844>, <DisassemblerInsn "mov" for 0x402848>, <DisassemblerInsn "cmp" for 0x402850>, <DisassemblerInsn "je" for 0x402852>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402476>, <DisassemblerInsn "cmp" for 0x40247e>, <DisassemblerInsn "jne" for 0x402482>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40286f>, <DisassemblerInsn "mov" for 0x402874>, <DisassemblerInsn "jmp" for 0x40287b>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40281d>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "mov" for 0x40282a>, <DisassemblerInsn "mov" for 0x40282c>, <DisassemblerInsn "call" for 0x402830>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402945>, <DisassemblerInsn "test" for 0x40294c>, <DisassemblerInsn "mov" for 0x40294f>, <DisassemblerInsn "jne" for 0x402956>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40267e>, <DisassemblerInsn "mov" for 0x402686>, <DisassemblerInsn "mov" for 0x40268a>, <DisassemblerInsn "cmp" for 0x40268f>, <DisassemblerInsn "je" for 0x402693>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402484>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x40249a>, <DisassemblerInsn "mov" for 0x40249d>, <DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024af>, <DisassemblerInsn "cmp" for 0x4024b7>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c7>, <DisassemblerInsn "jne" for 0x4024ce>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025a9>, <DisassemblerInsn "mov" for 0x4025b1>, <DisassemblerInsn "mov" for 0x4025b5>, <DisassemblerInsn "cmp" for 0x4025bd>, <DisassemblerInsn "je" for 0x4025c1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c3>, <DisassemblerInsn "mov" for 0x4029cb>, <DisassemblerInsn "mov" for 0x4029ce>, <DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "jmp" for 0x4029dc>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "mov" for 0x401f67>, <DisassemblerInsn "mov" for 0x401f6f>, <DisassemblerInsn "call" for 0x401f72>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "lea" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1e>, <DisassemblerInsn "call" for 0x401e20>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "add" for 0x4022b1>, <DisassemblerInsn "call" for 0x4022b8>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026fe>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402573>, <DisassemblerInsn "mov" for 0x402578>, <DisassemblerInsn "jmp" for 0x40257f>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f19>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f29>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "je" for 0x401f3c>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40262d>, <DisassemblerInsn "mov" for 0x402634>, <DisassemblerInsn "mov" for 0x40263c>, <DisassemblerInsn "add" for 0x402643>, <DisassemblerInsn "mov" for 0x402647>, <DisassemblerInsn "cmp" for 0x40264c>, <DisassemblerInsn "je" for 0x40264e>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "cmp" for 0x402400>, <DisassemblerInsn "sete" for 0x402403>, <DisassemblerInsn "cmp" for 0x402406>, <DisassemblerInsn "sete" for 0x402409>, <DisassemblerInsn "or" for 0x40240c>, <DisassemblerInsn "test" for 0x40240e>, <DisassemblerInsn "jne" for 0x402410>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229a>, <DisassemblerInsn "cmp" for 0x4022a2>, <DisassemblerInsn "je" for 0x4022a7>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fb>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "mov" for 0x402506>, <DisassemblerInsn "mov" for 0x40250e>, <DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "movzx" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "cmp" for 0x402549>, <DisassemblerInsn "jle" for 0x40254f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "lea" for 0x401d9f>, <DisassemblerInsn "xor" for 0x401da7>, <DisassemblerInsn "call" for 0x401da9>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40288e>, <DisassemblerInsn "mov" for 0x402895>, <DisassemblerInsn "mov" for 0x40289d>, <DisassemblerInsn "mov" for 0x4028a0>, <DisassemblerInsn "mov" for 0x4028a4>, <DisassemblerInsn "cmp" for 0x4028a9>, <DisassemblerInsn "mov" for 0x4028ad>, <DisassemblerInsn "je" for 0x4028b4>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401fb1>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402700>, <DisassemblerInsn "mov" for 0x402708>, <DisassemblerInsn "lea" for 0x40270d>, <DisassemblerInsn "mov" for 0x402714>, <DisassemblerInsn "call" for 0x402716>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402163>, <DisassemblerInsn "cmp" for 0x40216a>, <DisassemblerInsn "mov" for 0x40216d>, <DisassemblerInsn "je" for 0x402174>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40272c>, <DisassemblerInsn "mov" for 0x402734>, <DisassemblerInsn "mov" for 0x402738>, <DisassemblerInsn "cmp" for 0x40273d>, <DisassemblerInsn "je" for 0x402741>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40224d>, <DisassemblerInsn "mov" for 0x402255>, <DisassemblerInsn "lea" for 0x40225a>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "call" for 0x402263>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "call" for 0x401e87>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d6>, <DisassemblerInsn "add" for 0x4020d9>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "mov" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "cmp" for 0x4020ef>, <DisassemblerInsn "je" for 0x4020f2>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f77>, <DisassemblerInsn "cmp" for 0x401f7f>, <DisassemblerInsn "je" for 0x401f87>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "jl" for 0x402229>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027d7>, <DisassemblerInsn "mov" for 0x4027df>, <DisassemblerInsn "lea" for 0x4027e4>, <DisassemblerInsn "mov" for 0x4027eb>, <DisassemblerInsn "call" for 0x4027ed>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402609>, <DisassemblerInsn "mov" for 0x40260e>, <DisassemblerInsn "mov" for 0x402616>, <DisassemblerInsn "cmp" for 0x402619>, <DisassemblerInsn "mov" for 0x40261c>, <DisassemblerInsn "mov" for 0x402624>, <DisassemblerInsn "je" for 0x40262b>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024d0>, <DisassemblerInsn "call" for 0x4024d8>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402854>, <DisassemblerInsn "mov" for 0x40285c>, <DisassemblerInsn "lea" for 0x402861>, <DisassemblerInsn "mov" for 0x402868>, <DisassemblerInsn "call" for 0x40286a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d2e>, <DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d45>, <DisassemblerInsn "lea" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d55>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "cmp" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6d>, <DisassemblerInsn "ja" for 0x401d74>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402652>, <DisassemblerInsn "mov" for 0x40265a>, <DisassemblerInsn "lea" for 0x40265f>, <DisassemblerInsn "mov" for 0x402666>, <DisassemblerInsn "call" for 0x402668>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402747>, <DisassemblerInsn "mov" for 0x40274f>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "cmp" for 0x40275b>, <DisassemblerInsn "je" for 0x40275f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "add" for 0x401df6>, <DisassemblerInsn "mov" for 0x401df9>, <DisassemblerInsn "mov" for 0x401dff>, <DisassemblerInsn "cmp" for 0x401e05>, <DisassemblerInsn "je" for 0x401e08>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026e4>, <DisassemblerInsn "mov" for 0x4026e8>, <DisassemblerInsn "mov" for 0x4026ed>, <DisassemblerInsn "add" for 0x4026f1>, <DisassemblerInsn "mov" for 0x4026f5>, <DisassemblerInsn "cmp" for 0x4026fa>, <DisassemblerInsn "je" for 0x4026fc>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f4a>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "cmp" for 0x401f59>, <DisassemblerInsn "je" for 0x401f5d>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc2>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "lea" for 0x401fd2>, <DisassemblerInsn "call" for 0x401fda>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022bd>, <DisassemblerInsn "mov" for 0x4022c5>, <DisassemblerInsn "add" for 0x4022c8>, <DisassemblerInsn "mov" for 0x4022cc>, <DisassemblerInsn "mov" for 0x4022d4>, <DisassemblerInsn "cmp" for 0x4022d9>, <DisassemblerInsn "mov" for 0x4022e0>, <DisassemblerInsn "ja" for 0x4022e7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "cmp" for 0x401d82>, <DisassemblerInsn "sete" for 0x401d86>, <DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "test" for 0x401d90>, <DisassemblerInsn "jne" for 0x401d92>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ed>, <DisassemblerInsn "mov" for 0x4022f5>, <DisassemblerInsn "mov" for 0x4022fd>, <DisassemblerInsn "mov" for 0x402305>, <DisassemblerInsn "mov" for 0x402308>, <DisassemblerInsn "add" for 0x40230b>, <DisassemblerInsn "mov" for 0x402312>, <DisassemblerInsn "mov" for 0x40231a>, <DisassemblerInsn "mov" for 0x402320>, <DisassemblerInsn "cmp" for 0x402327>, <DisassemblerInsn "je" for 0x40232a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "lea" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dd2>, <DisassemblerInsn "call" for 0x401dd7>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "movzx" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "cmp" for 0x402549>, <DisassemblerInsn "jle" for 0x40254f>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a9>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b5>, <DisassemblerInsn "mov" for 0x4026b8>, <DisassemblerInsn "xor" for 0x4026bc>, <DisassemblerInsn "mov" for 0x4026be>, <DisassemblerInsn "mov" for 0x4026c3>, <DisassemblerInsn "jmp" for 0x4026c7>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a7>, <DisassemblerInsn "mov" for 0x4024af>, <DisassemblerInsn "cmp" for 0x4024b7>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c7>, <DisassemblerInsn "jne" for 0x4024ce>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402176>, <DisassemblerInsn "mov" for 0x40217e>, <DisassemblerInsn "mov" for 0x402185>, <DisassemblerInsn "mov" for 0x40218b>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "jmp" for 0x402199>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402365>, <DisassemblerInsn "mov" for 0x40236c>, <DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "add" for 0x402377>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402386>, <DisassemblerInsn "cmp" for 0x40238c>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "jne" for 0x40239d>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028da>, <DisassemblerInsn "mov" for 0x4028df>, <DisassemblerInsn "call" for 0x4028e7>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "cmp" for 0x4024e4>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "jl" for 0x4024ee>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "jl" for 0x401fab>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025cf>, <DisassemblerInsn "mov" for 0x4025d1>, <DisassemblerInsn "cmp" for 0x4025d8>, <DisassemblerInsn "je" for 0x4025db>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "add" for 0x401e49>, <DisassemblerInsn "mov" for 0x401e50>, <DisassemblerInsn "cmp" for 0x401e58>, <DisassemblerInsn "sete" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e63>, <DisassemblerInsn "setne" for 0x401e67>, <DisassemblerInsn "and" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e6c>, <DisassemblerInsn "test" for 0x401e71>, <DisassemblerInsn "mov" for 0x401e74>, <DisassemblerInsn "jne" for 0x401e7b>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x40204b>, <DisassemblerInsn "xor" for 0x402052>, <DisassemblerInsn "sub" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "mov" for 0x40205e>, <DisassemblerInsn "sar" for 0x402065>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "xor" for 0x40206f>, <DisassemblerInsn "sub" for 0x402071>, <DisassemblerInsn "mov" for 0x402074>, <DisassemblerInsn "xor" for 0x402077>, <DisassemblerInsn "sub" for 0x402079>, <DisassemblerInsn "sar" for 0x40207b>, <DisassemblerInsn "mov" for 0x40207d>, <DisassemblerInsn "xor" for 0x402085>, <DisassemblerInsn "sub" for 0x402087>, <DisassemblerInsn "mov" for 0x402089>, <DisassemblerInsn "mov" for 0x40208c>, <DisassemblerInsn "jmp" for 0x402093>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e25>, <DisassemblerInsn "mov" for 0x401e2a>, <DisassemblerInsn "jmp" for 0x401e31>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402650>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "mov" for 0x401fc2>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "lea" for 0x401fd2>, <DisassemblerInsn "call" for 0x401fda>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402584>, <DisassemblerInsn "cmp" for 0x40258c>, <DisassemblerInsn "jne" for 0x402591>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402248>, <DisassemblerInsn "jge" for 0x40224b>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402803>, <DisassemblerInsn "mov" for 0x40280b>, <DisassemblerInsn "mov" for 0x402812>, <DisassemblerInsn "cmp" for 0x402817>, <DisassemblerInsn "je" for 0x40281b>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e4>, <DisassemblerInsn "mov" for 0x4025ec>, <DisassemblerInsn "mov" for 0x4025ef>, <DisassemblerInsn "xor" for 0x4025f6>, <DisassemblerInsn "mov" for 0x4025f8>, <DisassemblerInsn "mov" for 0x402600>, <DisassemblerInsn "jmp" for 0x402607>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40295c>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402835>, <DisassemblerInsn "mov" for 0x402837>, <DisassemblerInsn "mov" for 0x40283b>, <DisassemblerInsn "cmp" for 0x40283f>, <DisassemblerInsn "je" for 0x402842>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402098>, <DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "add" for 0x4020a3>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020af>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "cmp" for 0x4020b9>, <DisassemblerInsn "sete" for 0x4020bc>, <DisassemblerInsn "mov" for 0x4020bf>, <DisassemblerInsn "test" for 0x4020c6>, <DisassemblerInsn "jne" for 0x4020c8>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402445>, <DisassemblerInsn "mov" for 0x40244d>, <DisassemblerInsn "cmp" for 0x402454>, <DisassemblerInsn "jne" for 0x402457>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40242d>, <DisassemblerInsn "mov" for 0x402432>, <DisassemblerInsn "jmp" for 0x402439>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271b>, <DisassemblerInsn "mov" for 0x402720>, <DisassemblerInsn "jmp" for 0x402727>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028b6>, <DisassemblerInsn "mov" for 0x4028bd>, <DisassemblerInsn "mov" for 0x4028c5>, <DisassemblerInsn "and" for 0x4028cb>, <DisassemblerInsn "cmp" for 0x4028ce>, <DisassemblerInsn "mov" for 0x4028d1>, <DisassemblerInsn "jne" for 0x4028d8>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028ec>, <DisassemblerInsn "mov" for 0x4028ee>, <DisassemblerInsn "mov" for 0x4028f5>, <DisassemblerInsn "jl" for 0x4028fc>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402880>, <DisassemblerInsn "mov" for 0x402888>, <DisassemblerInsn "mov" for 0x40288c>, <DisassemblerInsn "mov" for 0x40288e>, <DisassemblerInsn "mov" for 0x402895>, <DisassemblerInsn "mov" for 0x40289d>, <DisassemblerInsn "mov" for 0x4028a0>, <DisassemblerInsn "mov" for 0x4028a4>, <DisassemblerInsn "cmp" for 0x4028a9>, <DisassemblerInsn "mov" for 0x4028ad>, <DisassemblerInsn "je" for 0x4028b4>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "call" for 0x4029be>]'}], 'cfg_block_detailed_info': [{'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x13b]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jne~~0x4021f3>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402412>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x4023cf>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402412>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x3185]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x317c], eax>', '<mov~~rax, qword ptr [rip + 0x3165]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x402941>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x40288e>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402365>']}, {'block_Idx': 122, 'blockInsts': ['<jmp~~0x4027b8>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x17c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x4029e1>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x402803>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x188], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402902>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3463]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x402902>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x402700>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x3156]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3724]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35fb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x402803>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x401f77>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x402098>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<add~~rsp, 0x1d8>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<cmp~~eax, 0>', '<je~~0x402098>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402484>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x3cd3]>', '<mov~~qword ptr [rsp + 0x1a0], rax>', '<cmp~~rax, 0>', '<je~~0x401df0>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x160], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40298b>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4027d7>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x114], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402176>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x402700>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x4022bd>']}, {'block_Idx': 134, 'blockInsts': ['<jmp~~0x40279a>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x10c]>', '<mov~~esi, dword ptr [rsp + 0x110]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0x100], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<cmp~~eax, 0>', '<jle~~0x401fb3>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<je~~0x40229a>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jmp~~0x4029e1>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4027d7>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x40288e>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x30], 0>', '<jne~~0x4024a0>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x1af]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<jne~~0x4029e1>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x40272c>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rax + 0x30], ecx>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402515>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x40267e>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x402902>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3ccd]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 124, 'blockInsts': ['<jmp~~0x4026c9>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402902>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x40267e>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40243e>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x4022bd>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402584>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1d0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402902>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x401fc2>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x34b8]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x140], eax>', '<je~~0x40219b>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x402803>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x38c3]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<je~~0x402163>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401fc2>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40224d>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3427]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x402652>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000c0>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33d5]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1d8>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<lea~~rax, [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x1d0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<ja~~0x4029e1>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x353e]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x40277d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3ca2]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x3c99], eax>', '<mov~~eax, dword ptr [rip + 0x3c93]>', '<cmp~~eax, 1>', '<je~~0x401e36>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x40272c>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<cmp~~rax, 0>', '<je~~0x401f77>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x164], eax>', '<ja~~0x40298b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1af], al>', '<test~~al, 1>', '<jne~~0x401dae>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<cmp~~eax, -1>', '<je~~0x402365>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<lea~~rdi, [rip + 0x3cbe]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402584>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x4026e4>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jne~~0x402515>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x10c], ecx>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jmp~~0x4021f3>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xd8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x4023cf>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~rax>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40298b>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40298b>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x402652>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x401e82>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~edx, dword ptr [rsp + 0x144]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x140], eax>', '<jmp~~0x402176>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jmp~~0x402902>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x402609>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rsi, [rsp + 0x1d0]>', '<call~~0x5000b8>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x4025a9>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40229a>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x40288e>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x40262d>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40295e>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x402880>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x13b], al>', '<test~~al, 1>', '<jne~~0x402163>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~eax, 1>', '<jne~~0x4024a0>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40298b>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<jne~~0x402902>']}, {'block_Idx': 140, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x19c], ecx>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jl~~0x40298b>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<je~~0x402902>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x188]>', '<call~~0x500060>']}], 'cfg_edge_info': [(64, 69), (81, 85), (42, 48), (44, 45), (107, 113), (101, 106), (87, 89), (135, 138), (31, 29), (74, 73), (136, 121), (97, 102), (85, 82), (121, 133), (13, 17), (79, 81), (132, 96), (130, 108), (98, 103), (82, 86), (90, 99), (20, 22), (108, 123), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (85, 84), (132, 135), (72, 77), (48, 31), (17, 16), (140, 13), (89, 93), (100, 105), (114, 122), (99, 33), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (129, 134), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (127, 106), (81, 84), (64, 68), (28, 2), (116, 124), (84, 86), (75, 62), (97, 101), (103, 117), (133, 33), (92, 96), (34, 39), (13, 16), (15, 13), (93, 97), (55, 58), (54, 60), (125, 111), (102, 109), (29, 33), (23, 26), (11, 18), (42, 33), (139, 2), (79, 82), (116, 101), (7, 139), (82, 87), (123, 33), (100, 13), (58, 62), (20, 23), (51, 56), (4, 6), (95, 90), (60, 13), (78, 83), (126, 132), (104, 111), (89, 92), (105, 140), (91, 95), (45, 52), (63, 67), (140, 33), (6, 8), (73, 77), (129, 106), (134, 136), (35, 41), (67, 76), (43, 54), (112, 126), (35, 13), (91, 33), (62, 61), (136, 129), (139, 6), (56, 63), (111, 118), (77, 79), (75, 61), (130, 116), (124, 130), (86, 91), (87, 90), (101, 107), (107, 114), (8, 10), (96, 13), (106, 112), (1, 4), (16, 2), (113, 127), (27, 32), (102, 108), (3, 4), (18, 20), (84, 87), (69, 68), (98, 104), (61, 64), (21, 28), (106, 96), (118, 125), (22, 29), (39, 45), (34, 40), (19, 21), (114, 121), (125, 103), (83, 33), (138, 33), (109, 116), (41, 27), (93, 98), (18, 13), (131, 100), (96, 100), (72, 78), (58, 61), (32, 42), (51, 55), (26, 35), (95, 89), (44, 50), (126, 131), (0, 1), (76, 66), (40, 46), (111, 97), (92, 93), (45, 51), (63, 66), (41, 47), (33, 43), (4, 7), (52, 56), (117, 33), (40, 39), (10, 13), (131, 13), (122, 129), (68, 73), (6, 9)], 'cdg_edge_info': [(140, 43), (64, 69), (55, 66), (81, 85), (42, 48), (89, 13), (44, 45), (107, 113), (55, 75), (130, 60), (87, 89), (27, 13), (20, 29), (93, 13), (8, 18), (114, 54), (136, 121), (97, 102), (85, 82), (111, 101), (63, 61), (92, 97), (13, 17), (92, 106), (79, 81), (132, 96), (61, 54), (107, 106), (98, 103), (82, 86), (130, 108), (73, 83), (29, 34), (100, 140), (77, 83), (39, 44), (23, 27), (29, 43), (95, 43), (85, 84), (29, 61), (132, 135), (114, 129), (72, 77), (42, 43), (136, 43), (23, 29), (40, 45), (29, 45), (72, 43), (29, 54), (114, 122), (100, 105), (95, 54), (92, 101), (29, 63), (73, 60), (125, 43), (55, 63), (63, 13), (98, 43), (73, 78), (42, 54), (102, 123), (114, 33), (77, 78), (95, 93), (0, 2), (69, 74), (51, 13), (23, 31), (29, 75), (87, 43), (1, 3), (68, 72), (114, 60), (29, 56), (61, 33), (72, 54), (114, 133), (42, 29), (102, 43), (91, 43), (55, 56), (16, 19), (116, 106), (125, 54), (64, 13), (16, 28), (102, 116), (140, 54), (84, 86), (51, 61), (75, 62), (4, 139), (129, 136), (92, 96), (13, 16), (87, 54), (81, 13), (42, 31), (27, 42), (16, 21), (125, 111), (102, 109), (91, 54), (102, 54), (34, 66), (34, 75), (132, 43), (29, 33), (95, 33), (95, 97), (87, 93), (23, 35), (95, 106), (95, 60), (42, 33), (139, 2), (116, 101), (79, 82), (82, 87), (20, 23), (95, 90), (72, 33), (132, 54), (95, 99), (126, 132), (89, 92), (13, 2), (136, 54), (125, 33), (72, 60), (91, 95), (39, 66), (79, 84), (63, 67), (140, 33), (34, 61), (6, 8), (139, 13), (63, 76), (39, 75), (125, 60), (73, 77), (111, 125), (129, 106), (35, 41), (61, 60), (140, 60), (69, 73), (98, 54), (130, 123), (87, 33), (95, 101), (87, 97), (73, 43), (0, 4), (87, 106), (132, 138), (102, 33), (101, 13), (91, 33), (0, 13), (77, 43), (136, 129), (139, 6), (39, 13), (34, 63), (125, 117), (102, 60), (91, 60), (82, 91), (130, 43), (72, 83), (77, 79), (130, 116), (107, 114), (98, 111), (114, 43), (87, 90), (101, 107), (87, 99), (106, 112), (0, 6), (73, 54), (27, 32), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (132, 33), (35, 27), (18, 20), (69, 68), (84, 87), (130, 54), (61, 64), (136, 33), (106, 96), (42, 60), (132, 60), (34, 13), (98, 104), (87, 101), (34, 40), (136, 60), (114, 121), (39, 63), (93, 98), (136, 133), (125, 103), (106, 126), (98, 33), (35, 29), (131, 100), (72, 78), (96, 100), (51, 55), (97, 13), (95, 89), (126, 131), (98, 60), (116, 130), (0, 1), (76, 66), (111, 97), (39, 56), (76, 75), (92, 93), (111, 106), (45, 51), (87, 60), (35, 31), (4, 7), (84, 91), (61, 68), (73, 33), (98, 117), (29, 39), (40, 39), (77, 33), (68, 73), (29, 66), (130, 33), (77, 60), (61, 43)], 'ddg_edge_info': [(7, 17), (66, 103), (67, 68), (90, 33), (67, 77), (8, 18), (121, 133), (77, 126), (62, 74), (62, 92), (125, 130), (31, 86), (62, 101), (31, 95), (66, 62), (31, 104), (31, 113), (114, 129), (66, 89), (113, 21), (7, 21), (3, 136), (62, 69), (39, 76), (102, 114), (62, 78), (31, 72), (86, 17), (31, 81), (31, 90), (95, 93), (31, 108), (66, 75), (66, 84), (113, 16), (55, 56), (7, 16), (72, 136), (129, 136), (105, 17), (98, 130), (62, 64), (54, 60), (125, 111), (102, 109), (62, 73), (31, 67), (0, 107), (86, 21), (31, 85), (67, 17), (66, 61), (95, 97), (31, 103), (113, 2), (7, 2), (123, 33), (113, 105), (60, 13), (105, 21), (0, 75), (91, 95), (62, 68), (0, 84), (31, 62), (39, 75), (73, 77), (62, 77), (86, 16), (31, 89), (95, 92), (67, 21), (43, 54), (95, 101), (64, 95), (136, 129), (64, 131), (98, 102), (3, 130), (113, 100), (105, 16), (0, 79), (86, 2), (31, 66), (66, 33), (32, 31), (31, 75), (3, 4), (0, 106), (31, 84), (67, 16), (3, 98), (66, 136), (86, 114), (109, 116), (3, 125), (105, 2), (8, 60), (0, 56), (31, 34), (0, 74), (112, 135), (31, 61), (67, 2), (84, 91), (86, 100), (131, 13), (66, 131), (68, 73), (86, 109), (3, 102), (67, 105), (67, 114), (62, 17), (86, 136), (54, 13), (0, 51), (8, 64), (31, 29), (39, 51), (0, 69), (31, 56), (13, 17), (56, 67), (93, 125), (108, 123), (86, 95), (86, 104), (67, 100), (112, 13), (86, 113), (67, 109), (21, 2), (6, 13), (86, 131), (8, 41), (62, 21), (67, 136), (54, 17), (0, 55), (77, 140), (31, 33), (0, 64), (0, 73), (31, 51), (99, 33), (31, 136), (66, 112), (86, 90), (66, 121), (67, 86), (66, 130), (67, 95), (68, 72), (86, 108), (67, 104), (61, 33), (8, 27), (67, 113), (62, 16), (0, 41), (54, 21), (8, 63), (0, 68), (66, 13), (13, 16), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (66, 107), (67, 72), (66, 116), (67, 81), (66, 125), (67, 90), (86, 103), (8, 13), (86, 112), (67, 108), (62, 2), (0, 18), (42, 33), (0, 27), (54, 16), (20, 23), (61, 131), (33, 60), (104, 111), (62, 105), (62, 114), (140, 33), (66, 93), (31, 135), (66, 102), (66, 111), (130, 114), (67, 76), (86, 89), (67, 85), (86, 98), (66, 129), (0, 4), (67, 103), (91, 33), (0, 13), (1, 139), (8, 35), (54, 2), (0, 31), (0, 40), (131, 105), (44, 55), (62, 100), (62, 109), (16, 2), (31, 112), (64, 60), (66, 79), (31, 121), (73, 136), (62, 136), (31, 130), (66, 97), (67, 62), (121, 33), (66, 106), (86, 93), (67, 89), (0, 8), (0, 17), (83, 33), (31, 13), (61, 112), (112, 105), (62, 86), (62, 95), (62, 104), (31, 98), (62, 113), (31, 107), (66, 74), (31, 116), (31, 125), (66, 92), (66, 101), (67, 66), (67, 75), (67, 84), (107, 129), (0, 3), (0, 21), (62, 72), (112, 100), (62, 81), (62, 90), (3, 13), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (31, 111), (66, 78), (114, 136), (31, 129), (67, 61), (107, 106), (0, 7), (0, 16), (135, 33), (113, 131), (113, 140), (125, 114), (62, 85), (31, 79), (3, 8), (3, 17), (62, 103), (86, 33), (31, 97), (66, 64), (140, 13), (95, 100), (31, 106), (66, 73), (84, 109), (0, 2), (113, 126), (105, 33), (81, 84), (31, 74), (0, 105), (62, 89), (125, 136), (31, 92), (3, 21), (84, 95), (31, 101), (66, 68), (78, 33), (67, 33), (103, 117), (66, 77), (95, 131), (29, 33), (98, 114), (77, 91), (113, 112), (40, 51), (139, 2), (108, 33), (8, 95), (7, 139), (31, 69), (0, 100), (62, 84), (31, 78), (3, 7), (0, 109), (51, 56), (95, 90), (3, 16), (105, 140), (113, 13), (112, 17), (67, 131), (101, 114), (62, 61), (0, 77), (31, 55), (0, 86), (31, 64), (32, 29), (0, 95), (31, 73), (3, 2), (0, 104), (106, 112), (112, 21), (86, 121), (3, 114), (97, 130), (86, 130), (98, 104), (21, 28), (69, 77), (8, 76), (0, 72), (101, 136), (66, 17), (0, 81), (39, 63), (138, 33), (31, 68), (32, 33), (86, 13), (31, 77), (32, 42), (64, 74), (95, 89), (116, 130), (86, 107), (112, 16), (86, 116), (67, 112), (86, 125), (67, 121), (67, 130), (69, 72), (113, 106), (62, 33), (105, 13), (0, 67), (23, 32), (31, 45), (66, 21), (39, 67), (0, 85), (72, 73), (64, 69), (67, 13), (135, 138), (17, 21), (112, 2), (97, 102), (86, 102), (67, 98), (86, 111), (67, 107), (67, 116), (86, 129), (67, 125), (90, 99), (0, 44), (0, 62), (31, 40), (66, 16), (112, 132), (13, 28), (62, 131), (72, 77), (17, 16), (86, 97), (67, 93), (86, 106), (67, 102), (27, 29), (67, 111), (67, 129), (0, 39), (31, 17), (29, 84), (103, 33), (66, 2), (31, 44), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (66, 114), (67, 79), (86, 92), (86, 101), (133, 33), (67, 97), (67, 106), (8, 29), (0, 34), (0, 43), (31, 21), (4, 13), (0, 61), (31, 39), (23, 35), (44, 67), (112, 131), (62, 112), (1, 16), (62, 121), (62, 130), (64, 72), (66, 100), (100, 13), (66, 109), (67, 74), (78, 83), (126, 132), (67, 92), (86, 105), (67, 101), (0, 20), (62, 13), (8, 42), (111, 125), (31, 16), (62, 98), (112, 126), (62, 107), (35, 13), (62, 116), (34, 45), (62, 125), (66, 86), (56, 63), (66, 95), (66, 104), (67, 69), (66, 113), (130, 116), (67, 78), (86, 91), (18, 54), (31, 2), (62, 93), (62, 102), (8, 131), (44, 75), (62, 111), (31, 105), (66, 72), (31, 114), (66, 81), (62, 129), (93, 98), (66, 90), (18, 13), (7, 13), (67, 64), (66, 108), (67, 73), (126, 131), (0, 1), (0, 28), (33, 43), (62, 79), (73, 79), (4, 7), (69, 136), (117, 33), (62, 97), (61, 132), (62, 106), (31, 100), (31, 109), (66, 85), (113, 17), (7, 8)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 344, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 345, 'instruction': 'cmpl\t$1, %eax'}, {'instIndex': 346, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 348, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 349, 'instruction': 'addq\t$0x2c, %rcx'}, {'instIndex': 350, 'instruction': 'movq\t%rcx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 351, 'instruction': 'cmpl\t$0, 0x2c(%rax)'}, {'instIndex': 352, 'instruction': 'je\t.LBB17_45'}, {'instIndex': 354, 'instruction': 'cmpl\t$0, 0x30(%rax)'}, {'instIndex': 355, 'instruction': 'jne\t.LBB17_46'}, {'instIndex': 358, 'instruction': 'movl\t$1, (%rcx)'}, {'instIndex': 359, 'instruction': 'movl\t0x50(%rax), %ecx'}, {'instIndex': 360, 'instruction': 'movl\t%ecx, 0x30(%rax)'}, {'instIndex': 364, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 365, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 366, 'instruction': 'movl\t%eax, 0xc4(%rsp)                 # 4-byte Spill'}, {'instIndex': 367, 'instruction': 'jne\t.LBB17_49'}, {'instIndex': 369, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 371, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 372, 'instruction': 'movl\t%eax, 0x164(%rsp)                 # 4-byte Spill'}, {'instIndex': 373, 'instruction': 'jl\t.LBB17_84'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95---a/libavcodec/utils.c
The case of compiler gcc with optimization no.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/no/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/no/utils_gcc.s---avcodec_open2---before
function id: 111
function flag: True
There are 601 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 293, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 297, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 298, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 299, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 300, 'instruction': 'js\t.L234'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/no/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 293, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 297, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 298, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 299, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 300, 'instruction': 'js\t.L234'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O0/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O0/utils_gcc.s---avcodec_open2---before
function id: 111
function flag: True
There are 601 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 293, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 297, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 298, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 299, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 300, 'instruction': 'js\t.L234'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O0/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 289, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 290, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 291, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 292, 'instruction': 'movq\t0x2d8(%rax), %rax'}, {'instIndex': 293, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 294, 'instruction': 'jne\t.L202'}, {'instIndex': 295, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 296, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 297, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 298, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 299, 'instruction': 'cmpl\t$0, 0x28(%rsp)'}, {'instIndex': 300, 'instruction': 'js\t.L234'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O1/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O1/utils_gcc.s---avcodec_open2---before
function id: 222
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O1/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler gcc with optimization O2.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O2/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O2/utils_gcc.s---avcodec_open2---before
function id: 193
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O2/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler gcc with optimization O3.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O3/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O3/utils_gcc.s---avcodec_open2---before
function id: 161
function flag: True
There are 954 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 209, 'instruction': 'cmpq\t$0, 0x2d8(%rbp)'}, {'instIndex': 210, 'instruction': 'movl\t$0, 0x60(%rbp)'}, {'instIndex': 211, 'instruction': 'je\t.L276'}, {'instIndex': 315, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 316, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 317, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 318, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 319, 'instruction': 'js\t.L172'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/O3/utils.o
Binary file does not exist.
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 209, 'instruction': 'cmpq\t$0, 0x2d8(%rbp)'}, {'instIndex': 210, 'instruction': 'movl\t$0, 0x60(%rbp)'}, {'instIndex': 211, 'instruction': 'je\t.L276'}, {'instIndex': 315, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 316, 'instruction': 'call\tff_thread_init@PLT'}, {'instIndex': 317, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 318, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 319, 'instruction': 'js\t.L172'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/Os/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/Os/utils_gcc.s---avcodec_open2---before
function id: 180
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/gcc_before/Os/utils.o
Binary file does not exist.
{'avcodec_open2': []}
The case of compiler clang with optimization no.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/no/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/no/utils.s---avcodec_open2---before
function id: 20
function flag: True
There are 502 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 247, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 249, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 250, 'instruction': 'jge\t.LBB20_61'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/no/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/no/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 1196 nodes and 1978 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 502 instructions in binary file.
[4202508, 4202535, 4202545]
The execution time of patched subCFG information extraction via angr: 0:00:02.226677
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "movzx" for 0x40204f>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "cmp" for 0x40205b>, <DisassemblerInsn "jge" for 0x402061>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203c>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402035>, <DisassemblerInsn "jge" for 0x40203a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402041>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402025>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "call" for 0x40202c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x40209b>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402041>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x402043>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402043>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(79, 78), (78, 81), (83, 87), (76, 78), (83, 86), (78, 82), (81, 83)]}]}
{'avcodec_open2': [4202508, 4202535, 4202545]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/no/utils.o---before
The extraction of function: avcodec_open2
[4202508, 4202535, 4202545]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 178 nodes and 276 edges in CFGEmulated.
It has 178 nodes and 369 edges in CDG.
It has 2059 nodes and 3050 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202508, 4202535, 4202545]
{4203523, 4203017, 4202508, 4203534, 4203536, 4203538, 4202002, 4203540, 4203030, 4201494, 4202013, 4202535, 4202024, 4203565, 4202545, 4201522, 4203057, 4201527, 4202556, 4203583, 4202561, 4202050, 4202563, 4201540, 4202052, 4201542, 4203591, 4203081, 4203601, 4203094, 4203096, 4203614, 4202080, 4202595, 4203624, 4202091, 4203119, 4203634, 4202102, 4203134, 4203651, 4202638, 4203668, 4202136, 4202651, 4203163, 4202141, 4203171, 4203689, 4202169, 4202682, 4202174, 4203199, 4202700, 4202198, 4201694, 4202720, 4202212, 4202728, 4203242, 4201709, 4203255, 4202746, 4202236, 4201738, 4202769, 4203283, 4202777, 4202267, 4203307, 4202284, 4202804, 4203320, 4202298, 4203322, 4203324, 4202311, 4203339, 4203350, 4202842, 4202342, 4203367, 4202855, 4203377, 4201842, 4202363, 4201857, 4202882, 4202377, 4203401, 4203414, 4201879, 4203416, 4202906, 4201888, 4201893, 4202919, 4203431, 4202921, 4202415, 4201392, 4201911, 4203448, 4202944, 4202436, 4203460, 4201926, 4203462, 4202952, 4201935, 4201940, 4202457, 4203481, 4201439, 4201954, 4202979, 4202471, 4203500, 4201453, 4201466, 4202495}
[168, 35, 19, 102, 31, 28, 169, 3, 99, 11, 29, 81, 159, 2, 6, 32, 65, 85, 109, 82, 39, 129, 13, 158, 114, 33, 62, 7, 149, 101, 0, 176, 137, 117, 119, 135, 107, 127, 143, 4, 16, 172, 141, 36, 154, 161, 142, 120, 42, 92, 45, 1, 167, 70, 83, 21, 128, 46, 20, 145, 43, 174, 175, 146, 77, 66, 71, 56, 132, 165, 156, 123, 151, 74, 55, 155, 130, 58, 171, 157, 113, 52, 162, 67, 75, 24, 122, 163, 136, 89, 44, 90, 37, 106, 95, 97, 10, 105, 27, 108, 126, 84, 124, 8, 134, 160, 103, 150, 72, 48, 38, 131, 166, 115, 98, 51, 17, 76, 73, 25, 138, 112, 121, 53, 94, 88, 87, 22, 118, 50, 93, 140, 5, 133, 116, 177, 125, 40, 91, 80, 63, 23, 57, 111, 173, 110, 148]
The execution time of patched slicing information extraction via angr: 0:00:19.207750
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232b>, <DisassemblerInsn "jmp" for 0x402333>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da5>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40243f>, <DisassemblerInsn "je" for 0x402445>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40209b>, <DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "xor" for 0x4020ac>, <DisassemblerInsn "cmp" for 0x4020ae>, <DisassemblerInsn "mov" for 0x4020b4>, <DisassemblerInsn "je" for 0x4020b8>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cfc>, <DisassemblerInsn "movsxd" for 0x401d01>, <DisassemblerInsn "call" for 0x401d05>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ced>, <DisassemblerInsn "cmp" for 0x401cf2>, <DisassemblerInsn "jne" for 0x401cfa>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022a8>, <DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "movsxd" for 0x4022b3>, <DisassemblerInsn "cmp" for 0x4022b8>, <DisassemblerInsn "je" for 0x4022bd>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a9>, <DisassemblerInsn "add" for 0x4024ad>, <DisassemblerInsn "ret" for 0x4024b1>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "jmp" for 0x402007>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c65>, <DisassemblerInsn "lea" for 0x401c6a>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "call" for 0x401c73>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402451>, <DisassemblerInsn "mov" for 0x402456>, <DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x40245e>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "jmp" for 0x402466>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "add" for 0x401f20>, <DisassemblerInsn "call" for 0x401f27>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "jmp" for 0x402251>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdf>, <DisassemblerInsn "cmp" for 0x401be4>, <DisassemblerInsn "jl" for 0x401beb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c07>, <DisassemblerInsn "lea" for 0x401c0a>, <DisassemblerInsn "xor" for 0x401c0f>, <DisassemblerInsn "call" for 0x401c11>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d72>, <DisassemblerInsn "cmp" for 0x401d77>, <DisassemblerInsn "je" for 0x401d7f>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e10>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "jmp" for 0x401f42>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "jmp" for 0x402096>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "xor" for 0x401edb>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "call" for 0x401edf>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0d>, <DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "mov" for 0x401d19>, <DisassemblerInsn "cmp" for 0x401d1e>, <DisassemblerInsn "jne" for 0x401d26>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402156>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9c>, <DisassemblerInsn "jmp" for 0x401ca4>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022e8>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402412>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc6>, <DisassemblerInsn "cmp" for 0x401dca>, <DisassemblerInsn "jge" for 0x401dcd>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e57>, <DisassemblerInsn "jne" for 0x401e5e>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "add" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c55>, <DisassemblerInsn "cmp" for 0x401c5b>, <DisassemblerInsn "je" for 0x401c5e>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219a>, <DisassemblerInsn "jmp" for 0x4021a2>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402063>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "mov" for 0x40206d>, <DisassemblerInsn "movzx" for 0x402074>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "lea" for 0x402080>, <DisassemblerInsn "mov" for 0x402087>, <DisassemblerInsn "call" for 0x402089>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbe>, <DisassemblerInsn "mov" for 0x401bc3>, <DisassemblerInsn "mov" for 0x401bcb>, <DisassemblerInsn "mov" for 0x401bd4>, <DisassemblerInsn "cmp" for 0x401bd9>, <DisassemblerInsn "jl" for 0x401bdd>]'}, {'block_Idx': 176, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40240e>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402205>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402111>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "mov" for 0x402125>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "cmp" for 0x40212e>, <DisassemblerInsn "je" for 0x402132>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "mov" for 0x40225d>, <DisassemblerInsn "cmp" for 0x402264>, <DisassemblerInsn "je" for 0x402269>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402231>, <DisassemblerInsn "mov" for 0x402236>, <DisassemblerInsn "lea" for 0x40223b>, <DisassemblerInsn "mov" for 0x402242>, <DisassemblerInsn "call" for 0x402244>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203c>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402182>, <DisassemblerInsn "mov" for 0x402187>, <DisassemblerInsn "lea" for 0x40218c>, <DisassemblerInsn "mov" for 0x402193>, <DisassemblerInsn "call" for 0x402195>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402356>, <DisassemblerInsn "mov" for 0x40235b>, <DisassemblerInsn "call" for 0x402362>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401bfa>, <DisassemblerInsn "je" for 0x401c00>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402414>, <DisassemblerInsn "add" for 0x40241a>, <DisassemblerInsn "mov" for 0x40241d>, <DisassemblerInsn "cmp" for 0x402423>, <DisassemblerInsn "je" for 0x40242b>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c32>, <DisassemblerInsn "je" for 0x401c35>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023c2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "lea" for 0x401d8d>, <DisassemblerInsn "call" for 0x401d92>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402296>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b8>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "mov" for 0x4023bf>, <DisassemblerInsn "jmp" for 0x4023c2>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "mov" for 0x4023ac>, <DisassemblerInsn "call" for 0x4023b3>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c0>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "mov" for 0x4021cd>, <DisassemblerInsn "mov" for 0x4021d4>, <DisassemblerInsn "movsxd" for 0x4021d8>, <DisassemblerInsn "cmp" for 0x4021dd>, <DisassemblerInsn "je" for 0x4021e1>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "lea" for 0x402468>, <DisassemblerInsn "call" for 0x40246d>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "jmp" for 0x401d30>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "jmp" for 0x401bf5>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "mov" for 0x402376>, <DisassemblerInsn "lea" for 0x40237b>, <DisassemblerInsn "mov" for 0x402382>, <DisassemblerInsn "call" for 0x402384>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "cmp" for 0x401e70>, <DisassemblerInsn "je" for 0x401e74>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "jge" for 0x401ebc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "mov" for 0x401cb6>, <DisassemblerInsn "mov" for 0x401cbb>, <DisassemblerInsn "mov" for 0x401cc2>, <DisassemblerInsn "cmp" for 0x401cc7>, <DisassemblerInsn "jne" for 0x401ccf>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021a7>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "cmp" for 0x401d3a>, <DisassemblerInsn "je" for 0x401d42>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40242d>, <DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "call" for 0x402439>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022fc>, <DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "movsxd" for 0x402307>, <DisassemblerInsn "cmp" for 0x40230c>, <DisassemblerInsn "jne" for 0x402311>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "cmp" for 0x401e17>, <DisassemblerInsn "je" for 0x401e1b>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "jmp" for 0x401c3f>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402403>, <DisassemblerInsn "cmp" for 0x402407>, <DisassemblerInsn "jge" for 0x40240c>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022bf>, <DisassemblerInsn "mov" for 0x4022c4>, <DisassemblerInsn "mov" for 0x4022cb>, <DisassemblerInsn "mov" for 0x4022d0>, <DisassemblerInsn "mov" for 0x4022d7>, <DisassemblerInsn "movsxd" for 0x4022db>, <DisassemblerInsn "cmp" for 0x4022e0>, <DisassemblerInsn "jne" for 0x4022e4>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "cmp" for 0x401f01>, <DisassemblerInsn "setne" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402483>, <DisassemblerInsn "add" for 0x402488>, <DisassemblerInsn "call" for 0x40248f>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401e98>, <DisassemblerInsn "jl" for 0x401e9b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402472>, <DisassemblerInsn "add" for 0x402477>, <DisassemblerInsn "call" for 0x40247e>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234b>, <DisassemblerInsn "cmp" for 0x402350>, <DisassemblerInsn "je" for 0x402354>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ea>, <DisassemblerInsn "add" for 0x4022ee>, <DisassemblerInsn "mov" for 0x4022f1>, <DisassemblerInsn "jmp" for 0x4022f5>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402338>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "cmp" for 0x402341>, <DisassemblerInsn "je" for 0x402349>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023c4>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "lea" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "call" for 0x401ed1>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da0>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "mov" for 0x402318>, <DisassemblerInsn "lea" for 0x40231d>, <DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "call" for 0x402326>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402158>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "call" for 0x401e3d>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402389>, <DisassemblerInsn "jmp" for 0x402391>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022e6>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df5>, <DisassemblerInsn "mov" for 0x401dfa>, <DisassemblerInsn "mov" for 0x401e00>, <DisassemblerInsn "mov" for 0x401e05>, <DisassemblerInsn "call" for 0x401e0b>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "cmp" for 0x40236c>, <DisassemblerInsn "je" for 0x40236f>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e65>, <DisassemblerInsn "jne" for 0x401e69>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9d>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "mov" for 0x401ead>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "call" for 0x401eb4>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd1>, <DisassemblerInsn "jmp" for 0x401cd9>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402134>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movsxd" for 0x40214c>, <DisassemblerInsn "cmp" for 0x402151>, <DisassemblerInsn "jne" for 0x402154>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40233a>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402256>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f71>, <DisassemblerInsn "cmp" for 0x401f76>, <DisassemblerInsn "jne" for 0x401f79>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "cmp" for 0x401de7>, <DisassemblerInsn "je" for 0x401dee>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dcf>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "mov" for 0x4020bf>, <DisassemblerInsn "cmp" for 0x4020c1>, <DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "jne" for 0x4020ca>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "call" for 0x40202c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c85>, <DisassemblerInsn "cmp" for 0x401c8a>, <DisassemblerInsn "jne" for 0x401c92>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402041>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e3>, <DisassemblerInsn "mov" for 0x4021e8>, <DisassemblerInsn "mov" for 0x4021eb>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "mov" for 0x4021f7>, <DisassemblerInsn "movsxd" for 0x4021fb>, <DisassemblerInsn "cmp" for 0x402200>, <DisassemblerInsn "jne" for 0x402203>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "cmp" for 0x401f5d>, <DisassemblerInsn "je" for 0x401f64>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40226f>, <DisassemblerInsn "cmp" for 0x402274>, <DisassemblerInsn "jne" for 0x40227c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "call" for 0x401c2c>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229b>, <DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022a8>, <DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "movsxd" for 0x4022b3>, <DisassemblerInsn "cmp" for 0x4022b8>, <DisassemblerInsn "je" for 0x4022bd>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "mov" for 0x4021cd>, <DisassemblerInsn "mov" for 0x4021d4>, <DisassemblerInsn "movsxd" for 0x4021d8>, <DisassemblerInsn "cmp" for 0x4021dd>, <DisassemblerInsn "je" for 0x4021e1>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402035>, <DisassemblerInsn "jge" for 0x40203a>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "mov" for 0x402125>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "cmp" for 0x40212e>, <DisassemblerInsn "je" for 0x402132>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "jmp" for 0x4024a4>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "cmp" for 0x401d9b>, <DisassemblerInsn "jge" for 0x401d9e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd4>, <DisassemblerInsn "cmp" for 0x401dd9>, <DisassemblerInsn "je" for 0x401de0>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402398>, <DisassemblerInsn "cmp" for 0x40239d>, <DisassemblerInsn "je" for 0x4023a5>]'}, {'block_Idx': 166, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d9>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "and" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023e7>, <DisassemblerInsn "jne" for 0x4023ea>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "movzx" for 0x40204f>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "cmp" for 0x40205b>, <DisassemblerInsn "jge" for 0x402061>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1d>, <DisassemblerInsn "cmp" for 0x401e22>, <DisassemblerInsn "je" for 0x401e26>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "xor" for 0x401eee>, <DisassemblerInsn "cmp" for 0x401ef0>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "je" for 0x401efa>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cde>, <DisassemblerInsn "cmp" for 0x401ce3>, <DisassemblerInsn "jle" for 0x401ce7>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402207>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020cc>, <DisassemblerInsn "cmp" for 0x4020d1>, <DisassemblerInsn "setne" for 0x4020d9>, <DisassemblerInsn "mov" for 0x4020dc>, <DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402167>, <DisassemblerInsn "mov" for 0x40216c>, <DisassemblerInsn "mov" for 0x402173>, <DisassemblerInsn "movsxd" for 0x402177>, <DisassemblerInsn "cmp" for 0x40217c>, <DisassemblerInsn "jne" for 0x402180>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d70>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402025>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "cmp" for 0x401f80>, <DisassemblerInsn "jne" for 0x401f87>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "xor" for 0x40028b>, <DisassemblerInsn "sub" for 0x40028d>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "sar" for 0x40029c>, <DisassemblerInsn "xor" for 0x40029e>, <DisassemblerInsn "sub" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "xor" for 0x4002aa>, <DisassemblerInsn "sub" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "sar" for 0x4002bb>, <DisassemblerInsn "xor" for 0x4002bd>, <DisassemblerInsn "sub" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "ret" for 0x4002c9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40245e>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "jmp" for 0x402466>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "mov" for 0x4023fc>, <DisassemblerInsn "call" for 0x402401>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e42>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fec>, <DisassemblerInsn "lea" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "call" for 0x401ffa>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "add" for 0x40215e>, <DisassemblerInsn "mov" for 0x402161>, <DisassemblerInsn "jmp" for 0x402165>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c16>, <DisassemblerInsn "je" for 0x401c1e>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40227e>, <DisassemblerInsn "mov" for 0x402283>, <DisassemblerInsn "lea" for 0x402288>, <DisassemblerInsn "mov" for 0x40228f>, <DisassemblerInsn "call" for 0x402291>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021a9>, <DisassemblerInsn "mov" for 0x4021ae>, <DisassemblerInsn "cmp" for 0x4021b5>, <DisassemblerInsn "je" for 0x4021ba>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402410>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402216>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "movsxd" for 0x402226>, <DisassemblerInsn "cmp" for 0x40222b>, <DisassemblerInsn "jne" for 0x40222f>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "jbe" for 0x401f38>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "xor" for 0x401e91>, <DisassemblerInsn "call" for 0x401e93>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402447>, <DisassemblerInsn "call" for 0x40244c>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "cmp" for 0x401e49>, <DisassemblerInsn "jne" for 0x401e50>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "cmp" for 0x402106>, <DisassemblerInsn "je" for 0x40210b>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c44>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c6>, <DisassemblerInsn "mov" for 0x4023cb>, <DisassemblerInsn "cmp" for 0x4023d2>, <DisassemblerInsn "je" for 0x4023d7>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x40220d>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "jmp" for 0x402214>]'}], 'cfg_block_detailed_info': [{'block_Idx': 168, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x401db7>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x40245e>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x40], 0>', '<mov~~byte ptr [rsp + 2], al>', '<je~~0x4020e8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rdi, dword ptr [rax + 0x10]>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d72>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x4022f7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3985]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024a9>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0xffffff8>', '<jl~~0x401bfa>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 8]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401da5>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<mov~~esi, edx>', '<call~~0x400260>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d35>']}, {'block_Idx': 129, 'blockInsts': ['<jmp~~0x402167>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402414>']}, {'block_Idx': 158, 'blockInsts': ['<jmp~~0x4022ea>']}, {'block_Idx': 114, 'blockInsts': ['<jmp~~0x402414>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401dd4>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x401e76>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3954]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x394b], eax>', '<mov~~eax, dword ptr [rip + 0x3945]>', '<cmp~~eax, 1>', '<je~~0x401c85>']}, {'block_Idx': 149, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~ecx, byte ptr [rax + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35eb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~qword ptr [rsp + 0x18], rdx>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jl~~0x401bed>']}, {'block_Idx': 176, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 137, 'blockInsts': ['<jmp~~0x402216>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x402167>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x40233c>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3495]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x351c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 143, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x401c16>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3186]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x317d], eax>', '<cmp~~qword ptr [rip + 0x3165], 0>', '<je~~0x40243f>']}, {'block_Idx': 172, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401c44>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x4023c4>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x98]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 154, 'blockInsts': ['<jmp~~0x40233a>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<jmp~~0x4023c4>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402216>']}, {'block_Idx': 42, 'blockInsts': ['<lea~~rdi, [rsp + 8]>', '<call~~0x5000d0>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402414>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x4024a9>']}, {'block_Idx': 167, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33c6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401ee4>']}, {'block_Idx': 83, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x401ee4>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x428], 0>', '<jne~~0x401cde>']}, {'block_Idx': 128, 'blockInsts': ['<jmp~~0x4021a9>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401d70>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rdi, [rip + 0x3164]>', '<mov~~esi, 2>', '<call~~qword ptr [rip + 0x3151]>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<jne~~0x402338>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<je~~0x401e42>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x4024a9>']}, {'block_Idx': 175, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402410>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x78]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~rax, qword ptr [rcx + rdx*8]>', '<jne~~0x4022e8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x428>', '<call~~0x500060>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401ebe>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x402398>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4022a3>']}, {'block_Idx': 156, 'blockInsts': ['<jmp~~0x40233a>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x402398>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x4023c6>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3760]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 155, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33f9]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 130, 'blockInsts': ['<jmp~~0x40215a>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x38]>', '<call~~0x400260>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x4022f7>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x308]>', '<call~~0x400260>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<je~~0x402396>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x401e76>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402414>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x70]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402158>']}, {'block_Idx': 163, 'blockInsts': ['<jmp~~0x40233c>']}, {'block_Idx': 136, 'blockInsts': ['<jmp~~0x402258>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x401faf>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<je~~0x401e12>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x100], ecx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x104], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~byte ptr [rsp + 1], al>', '<jne~~0x4020e0>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x90], 0>', '<jne~~0x401c9c>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], 0>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 108, 'blockInsts': ['<jmp~~0x402043>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x68]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402207>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], -1>', '<je~~0x401f7b>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<jne~~0x40229b>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x3971]>', '<mov~~esi, 1>', '<call~~qword ptr [rip + 0x395e]>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x4022f7>']}, {'block_Idx': 160, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402216>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402041>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x402167>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], 0>', '<jmp~~0x402414>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401da5>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<je~~0x401e12>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x4023c2>']}, {'block_Idx': 166, 'blockInsts': ['<jmp~~0x4023c4>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x404]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<jne~~0x402412>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x40209b>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401e42>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffff>', '<jmp~~0x402414>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x38], 0>', '<mov~~byte ptr [rsp + 3], al>', '<je~~0x401f0d>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jle~~0x401da7>']}, {'block_Idx': 138, 'blockInsts': ['<jmp~~0x402209>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 1], al>', '<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<jne~~0x4021a7>']}, {'block_Idx': 53, 'blockInsts': ['<jmp~~0x401d72>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402043>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x401faf>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x304], ecx>', '<mov~~ecx, dword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x308], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0xc]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x34], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x38], ecx>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024a9>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x365d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402119>']}, {'block_Idx': 5, 'blockInsts': ['<cmp~~qword ptr [rip + 0x3972], 0>', '<je~~0x401c46>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3470]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x68], 0>', '<je~~0x402258>']}, {'block_Idx': 177, 'blockInsts': ['<jmp~~0x402412>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<jne~~0x402256>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0x80>', '<jbe~~0x401f47>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x5000d0>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<jne~~0x401e76>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x70], 0>', '<je~~0x4021a9>']}, {'block_Idx': 173, 'blockInsts': ['<jmp~~0x401c46>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x402412>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4021c8>']}], 'cfg_edge_info': [(16, 20), (146, 157), (98, 101), (70, 73), (53, 32), (38, 44), (74, 82), (37, 42), (175, 177), (7, 10), (107, 42), (169, 145), (87, 73), (67, 70), (33, 38), (113, 110), (156, 163), (163, 123), (129, 121), (2, 4), (109, 42), (75, 83), (123, 132), (62, 67), (36, 48), (67, 63), (25, 27), (108, 98), (73, 76), (22, 3), (105, 111), (81, 80), (90, 92), (145, 156), (116, 120), (124, 133), (173, 7), (17, 16), (39, 46), (23, 29), (166, 151), (91, 93), (121, 128), (130, 140), (87, 50), (94, 98), (140, 150), (177, 114), (158, 165), (99, 42), (131, 141), (45, 16), (51, 50), (5, 7), (21, 25), (134, 146), (83, 73), (0, 2), (95, 93), (57, 63), (115, 114), (92, 94), (1, 3), (16, 19), (171, 42), (119, 123), (71, 74), (88, 90), (70, 63), (162, 167), (42, 56), (20, 19), (154, 163), (48, 35), (125, 136), (77, 80), (38, 43), (112, 111), (103, 108), (89, 88), (80, 85), (126, 137), (106, 113), (138, 148), (143, 162), (13, 16), (175, 176), (24, 16), (28, 32), (150, 122), (76, 81), (27, 33), (33, 37), (56, 66), (43, 50), (84, 88), (40, 33), (31, 39), (157, 145), (58, 87), (97, 103), (133, 154), (115, 118), (55, 42), (123, 131), (19, 22), (132, 143), (7, 11), (117, 121), (110, 115), (93, 99), (105, 110), (120, 126), (82, 87), (145, 155), (4, 6), (160, 125), (141, 151), (121, 127), (127, 149), (25, 28), (111, 116), (73, 77), (85, 42), (32, 36), (165, 169), (51, 58), (2, 1), (142, 161), (172, 174), (128, 116), (122, 130), (29, 3), (168, 42), (102, 106), (174, 3), (114, 16), (82, 73), (131, 142), (162, 166), (8, 172), (146, 158), (98, 102), (95, 94), (112, 110), (103, 107), (159, 42), (80, 84), (106, 112), (132, 131), (48, 55), (28, 31), (150, 121), (62, 63), (76, 80), (71, 75), (88, 91), (119, 124), (148, 160), (63, 71), (58, 50), (169, 146), (151, 110), (176, 42), (77, 81), (116, 119), (161, 151), (101, 109), (113, 111), (126, 138), (39, 45), (91, 92), (135, 159), (66, 72), (110, 114), (94, 97), (6, 5), (155, 168), (149, 42), (120, 125), (4, 5), (50, 57), (90, 93), (43, 51), (84, 89), (124, 134), (65, 57), (89, 91), (134, 145), (0, 1), (57, 62), (19, 23), (137, 125), (117, 122), (32, 35), (72, 16), (44, 43), (35, 40), (160, 126), (118, 175), (44, 52), (167, 171), (125, 135), (5, 8), (83, 74), (172, 173), (136, 119), (122, 129), (92, 95), (102, 105), (111, 117)], 'cdg_edge_info': [(5, 172), (16, 20), (80, 56), (98, 101), (125, 119), (105, 116), (90, 42), (98, 110), (145, 42), (116, 125), (39, 33), (38, 44), (91, 98), (48, 72), (103, 72), (122, 140), (38, 16), (94, 103), (175, 177), (115, 16), (132, 151), (121, 151), (38, 80), (33, 38), (162, 42), (67, 70), (119, 16), (90, 99), (125, 66), (124, 131), (33, 56), (145, 163), (39, 35), (2, 4), (48, 56), (103, 56), (175, 42), (112, 123), (80, 88), (123, 132), (80, 42), (113, 131), (38, 73), (67, 63), (125, 114), (132, 162), (90, 92), (105, 111), (125, 123), (145, 156), (91, 66), (124, 133), (116, 120), (48, 40), (145, 110), (94, 16), (121, 119), (112, 116), (91, 93), (38, 57), (121, 128), (32, 16), (124, 163), (126, 160), (95, 72), (113, 151), (33, 42), (90, 94), (162, 110), (48, 33), (111, 16), (48, 42), (105, 131), (103, 42), (95, 93), (134, 146), (0, 2), (83, 82), (121, 66), (57, 63), (95, 56), (33, 72), (28, 39), (16, 19), (71, 74), (124, 110), (88, 90), (71, 83), (70, 63), (145, 151), (162, 167), (131, 161), (48, 35), (125, 72), (39, 32), (32, 48), (125, 136), (145, 114), (132, 114), (112, 111), (103, 108), (121, 114), (89, 88), (80, 85), (121, 123), (98, 66), (113, 119), (106, 113), (16, 3), (172, 3), (28, 32), (19, 29), (175, 176), (150, 122), (162, 151), (33, 37), (125, 56), (25, 33), (111, 121), (90, 98), (95, 66), (162, 114), (91, 72), (92, 16), (98, 114), (121, 116), (95, 42), (115, 118), (124, 151), (112, 131), (126, 148), (19, 22), (175, 114), (132, 143), (125, 159), (110, 115), (124, 114), (91, 56), (120, 126), (145, 155), (162, 171), (125, 131), (95, 99), (121, 127), (121, 72), (113, 123), (115, 175), (90, 66), (145, 66), (125, 42), (25, 28), (73, 77), (32, 36), (51, 58), (146, 165), (98, 109), (121, 56), (162, 66), (113, 116), (98, 72), (2, 1), (172, 174), (145, 123), (33, 80), (105, 151), (91, 42), (131, 142), (102, 106), (71, 82), (162, 166), (175, 66), (80, 66), (98, 102), (103, 98), (95, 94), (98, 56), (103, 107), (80, 84), (112, 119), (116, 16), (121, 131), (132, 131), (33, 73), (2, 3), (48, 55), (106, 112), (91, 99), (28, 40), (71, 75), (125, 110), (119, 124), (88, 91), (122, 150), (121, 42), (169, 146), (67, 71), (124, 123), (77, 81), (105, 119), (146, 169), (33, 57), (113, 111), (33, 66), (2, 5), (91, 92), (90, 72), (28, 33), (145, 72), (48, 66), (103, 66), (94, 97), (172, 7), (84, 16), (172, 16), (112, 151), (98, 42), (90, 93), (84, 89), (43, 51), (33, 50), (44, 50), (124, 134), (95, 98), (89, 91), (90, 56), (0, 1), (145, 56), (162, 72), (2, 7), (19, 23), (91, 94), (125, 151), (2, 16), (28, 35), (57, 71), (117, 122), (123, 16), (175, 72), (33, 43), (44, 43), (121, 110), (80, 72), (70, 71), (105, 123), (160, 126), (132, 110), (162, 56), (125, 135), (145, 168), (39, 40), (124, 145), (0, 3), (83, 74), (172, 173), (145, 131), (92, 95), (102, 105), (175, 56), (111, 117), (121, 149)], 'ddg_edge_info': [(67, 77), (101, 42), (0, 23), (80, 95), (33, 29), (40, 77), (90, 145), (80, 122), (80, 131), (133, 143), (0, 126), (94, 142), (0, 135), (94, 160), (94, 169), (36, 48), (75, 165), (117, 140), (70, 77), (75, 3), (80, 90), (77, 103), (40, 63), (140, 150), (0, 94), (159, 29), (81, 91), (94, 119), (0, 121), (75, 124), (75, 133), (51, 77), (94, 146), (75, 142), (75, 160), (7, 16), (133, 3), (97, 165), (40, 58), (90, 126), (85, 29), (133, 115), (93, 42), (80, 112), (0, 89), (134, 169), (0, 98), (90, 162), (40, 143), (75, 110), (94, 123), (0, 116), (75, 119), (94, 132), (0, 125), (94, 150), (43, 77), (75, 146), (117, 121), (120, 126), (97, 133), (148, 126), (97, 142), (143, 20), (140, 122), (40, 44), (143, 29), (97, 160), (80, 89), (90, 121), (97, 169), (80, 98), (0, 75), (133, 110), (66, 20), (0, 84), (66, 29), (102, 113), (0, 93), (73, 77), (0, 102), (94, 118), (165, 169), (51, 58), (0, 111), (75, 123), (40, 165), (75, 132), (36, 33), (36, 42), (40, 3), (29, 3), (174, 3), (120, 148), (97, 146), (97, 155), (90, 116), (90, 125), (0, 70), (90, 143), (165, 146), (75, 91), (40, 124), (0, 88), (0, 97), (40, 133), (143, 118), (40, 142), (97, 20), (94, 122), (142, 19), (97, 29), (75, 118), (43, 58), (40, 160), (75, 127), (135, 159), (120, 125), (97, 123), (97, 132), (143, 19), (140, 121), (90, 102), (97, 150), (90, 111), (0, 56), (134, 145), (40, 110), (0, 74), (66, 19), (40, 119), (102, 112), (75, 95), (0, 92), (40, 146), (75, 113), (142, 23), (75, 122), (81, 165), (97, 118), (97, 127), (97, 145), (90, 106), (0, 51), (20, 29), (90, 115), (90, 124), (75, 81), (66, 23), (165, 145), (75, 90), (40, 123), (94, 103), (40, 132), (81, 133), (99, 29), (118, 42), (81, 142), (81, 160), (81, 169), (97, 113), (97, 122), (97, 131), (90, 92), (90, 101), (90, 110), (40, 91), (23, 29), (168, 29), (80, 145), (0, 73), (40, 118), (75, 85), (118, 19), (94, 98), (40, 127), (75, 94), (133, 175), (81, 146), (81, 155), (0, 167), (5, 16), (97, 117), (97, 126), (81, 20), (0, 32), (81, 29), (42, 56), (20, 19), (40, 95), (40, 113), (75, 80), (149, 29), (118, 23), (75, 89), (81, 123), (40, 122), (133, 161), (81, 132), (56, 66), (81, 150), (0, 162), (97, 103), (38, 63), (97, 112), (161, 115), (90, 91), (0, 36), (63, 74), (40, 81), (20, 23), (40, 90), (80, 126), (167, 42), (81, 118), (80, 162), (81, 127), (142, 3), (81, 145), (75, 169), (97, 98), (0, 4), (161, 110), (142, 115), (40, 67), (0, 40), (40, 85), (80, 121), (40, 94), (81, 95), (133, 142), (81, 113), (81, 122), (81, 131), (0, 143), (75, 155), (0, 161), (142, 110), (75, 20), (75, 29), (80, 116), (40, 80), (103, 29), (80, 125), (81, 90), (40, 89), (80, 143), (81, 117), (171, 29), (94, 145), (75, 150), (67, 75), (133, 20), (167, 171), (133, 29), (0, 3), (40, 57), (80, 102), (80, 111), (75, 42), (133, 123), (81, 85), (81, 94), (133, 132), (118, 3), (44, 63), (0, 115), (81, 112), (94, 131), (0, 124), (43, 67), (0, 133), (74, 82), (40, 169), (0, 142), (75, 145), (48, 29), (70, 75), (148, 125), (40, 43), (80, 88), (75, 19), (135, 42), (80, 106), (40, 70), (80, 115), (133, 118), (81, 80), (80, 124), (81, 89), (0, 101), (81, 98), (0, 110), (94, 126), (0, 119), (40, 155), (75, 131), (51, 75), (97, 42), (75, 140), (143, 167), (94, 162), (40, 20), (40, 29), (40, 38), (0, 2), (143, 23), (80, 92), (75, 23), (80, 101), (80, 110), (127, 42), (90, 142), (81, 84), (133, 131), (81, 93), (113, 162), (90, 160), (94, 112), (97, 19), (94, 121), (90, 169), (40, 150), (75, 117), (0, 123), (51, 70), (75, 126), (0, 132), (75, 135), (106, 113), (43, 75), (143, 162), (97, 140), (40, 33), (40, 42), (120, 160), (40, 51), (90, 119), (0, 82), (90, 146), (0, 91), (94, 116), (40, 145), (75, 112), (97, 23), (94, 125), (0, 118), (75, 121), (94, 143), (127, 149), (36, 40), (28, 36), (40, 19), (97, 135), (117, 150), (2, 172), (80, 91), (142, 161), (90, 123), (90, 132), (102, 106), (94, 102), (90, 150), (0, 95), (75, 98), (40, 131), (94, 111), (40, 140), (75, 116), (75, 125), (75, 134), (5, 20), (97, 121), (40, 23), (97, 148), (81, 42), (101, 109), (39, 36), (90, 118), (0, 63), (0, 72), (0, 81), (75, 84), (40, 117), (40, 126), (0, 90), (75, 93), (94, 106), (32, 33), (40, 135), (75, 102), (94, 115), (75, 111), (94, 124), (75, 120), (117, 122), (97, 116), (97, 125), (81, 19), (143, 3), (97, 134), (90, 95), (97, 143), (118, 175), (0, 58), (66, 3), (90, 122), (0, 67), (90, 131), (40, 112), (134, 165), (40, 121), (75, 88), (94, 101), (75, 97), (143, 115), (94, 110), (75, 106), (81, 140), (40, 148), (75, 115), (97, 102), (97, 111), (97, 120), (81, 23), (0, 44), (40, 98), (75, 74), (0, 80), (40, 116), (75, 83), (40, 125), (81, 126), (97, 3), (143, 110), (75, 92), (40, 134), (81, 135), (75, 101), (142, 20), (142, 29), (38, 57), (97, 106), (97, 115), (161, 118), (97, 124), (0, 39), (40, 84), (90, 112), (40, 93), (0, 57), (134, 146), (0, 66), (40, 102), (40, 111), (1, 3), (40, 120), (81, 121), (81, 148), (0, 160), (0, 169), (97, 101), (97, 110), (97, 119), (142, 118), (0, 25), (20, 3), (90, 98), (0, 43), (40, 88), (40, 97), (112, 113), (80, 142), (75, 73), (40, 106), (40, 115), (81, 116), (80, 160), (81, 125), (80, 169), (81, 134), (93, 99), (0, 146), (81, 143), (0, 155), (133, 19), (0, 20), (0, 29), (0, 38), (23, 3), (80, 119), (40, 92), (40, 101), (81, 102), (80, 146), (81, 111), (75, 77), (118, 20), (81, 120), (118, 29), (0, 150), (175, 29), (133, 23), (81, 3), (148, 160), (63, 71), (80, 123), (81, 88), (80, 132), (81, 97), (81, 106), (113, 175), (80, 150), (81, 115), (0, 127), (133, 162), (81, 124), (66, 72), (0, 145), (75, 148), (155, 168), (0, 1), (0, 19), (155, 42), (0, 28), (63, 75), (40, 73), (80, 118), (81, 92), (113, 161), (81, 101), (81, 110), (109, 29), (0, 122), (81, 119), (0, 131), (75, 143)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 247, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 249, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 250, 'instruction': 'jge\t.LBB20_61'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O0/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O0/utils.s---avcodec_open2---before
function id: 20
function flag: True
There are 502 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 247, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 249, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 250, 'instruction': 'jge\t.LBB20_61'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O0/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O0/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 1196 nodes and 1978 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 502 instructions in binary file.
[4202508, 4202535, 4202545]
The execution time of patched subCFG information extraction via angr: 0:00:02.190082
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "movzx" for 0x40204f>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "cmp" for 0x40205b>, <DisassemblerInsn "jge" for 0x402061>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203c>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402035>, <DisassemblerInsn "jge" for 0x40203a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402041>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402025>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "call" for 0x40202c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x40209b>']}, {'block_Idx': 86, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402041>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 87, 'blockInsts': ['<jmp~~0x402043>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402043>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(79, 78), (78, 81), (83, 87), (76, 78), (83, 86), (78, 82), (81, 83)]}]}
{'avcodec_open2': [4202508, 4202535, 4202545]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O0/utils.o---before
The extraction of function: avcodec_open2
[4202508, 4202535, 4202545]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 178 nodes and 276 edges in CFGEmulated.
It has 178 nodes and 369 edges in CDG.
It has 2059 nodes and 3046 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202508, 4202535, 4202545]
{4203523, 4203017, 4202508, 4203534, 4203536, 4203538, 4202002, 4203540, 4203030, 4201494, 4202013, 4202535, 4202024, 4203565, 4202545, 4201522, 4203057, 4201527, 4202556, 4203583, 4202561, 4202050, 4202563, 4201540, 4202052, 4201542, 4203591, 4203081, 4203601, 4203094, 4203096, 4203614, 4202080, 4202595, 4203624, 4202091, 4203119, 4203634, 4202102, 4203134, 4203651, 4202638, 4203668, 4202136, 4202651, 4203163, 4202141, 4203171, 4203689, 4202169, 4202682, 4202174, 4203199, 4202700, 4202198, 4201694, 4202720, 4202212, 4202728, 4203242, 4201709, 4203255, 4202746, 4202236, 4201738, 4202769, 4203283, 4202777, 4202267, 4203307, 4202284, 4202804, 4203320, 4202298, 4203322, 4203324, 4202311, 4203339, 4203350, 4202842, 4202342, 4203367, 4202855, 4203377, 4201842, 4202363, 4201857, 4202882, 4202377, 4203401, 4203414, 4201879, 4203416, 4202906, 4201888, 4201893, 4202919, 4203431, 4202921, 4202415, 4201392, 4201911, 4203448, 4202944, 4202436, 4203460, 4201926, 4203462, 4202952, 4201935, 4201940, 4202457, 4203481, 4201439, 4201954, 4202979, 4202471, 4203500, 4201453, 4201466, 4202495}
[168, 35, 19, 102, 31, 28, 169, 3, 99, 11, 29, 81, 159, 2, 6, 32, 65, 85, 109, 82, 39, 129, 13, 158, 114, 33, 62, 7, 149, 101, 0, 176, 137, 117, 119, 135, 107, 127, 143, 4, 16, 172, 141, 36, 154, 161, 142, 120, 42, 92, 45, 1, 167, 70, 83, 21, 128, 46, 20, 145, 43, 174, 175, 146, 77, 66, 71, 56, 132, 165, 156, 123, 151, 74, 55, 155, 130, 58, 171, 157, 113, 52, 162, 67, 75, 24, 122, 163, 136, 89, 44, 90, 37, 106, 95, 97, 10, 105, 27, 108, 126, 84, 124, 8, 134, 160, 103, 150, 72, 48, 38, 131, 166, 115, 98, 51, 17, 76, 73, 25, 138, 112, 121, 53, 94, 88, 87, 22, 118, 50, 93, 140, 5, 133, 116, 177, 125, 40, 91, 80, 63, 23, 57, 111, 173, 110, 148]
The execution time of patched slicing information extraction via angr: 0:00:19.190545
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232b>, <DisassemblerInsn "jmp" for 0x402333>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da5>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40243f>, <DisassemblerInsn "je" for 0x402445>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40209b>, <DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "xor" for 0x4020ac>, <DisassemblerInsn "cmp" for 0x4020ae>, <DisassemblerInsn "mov" for 0x4020b4>, <DisassemblerInsn "je" for 0x4020b8>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cfc>, <DisassemblerInsn "movsxd" for 0x401d01>, <DisassemblerInsn "call" for 0x401d05>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ced>, <DisassemblerInsn "cmp" for 0x401cf2>, <DisassemblerInsn "jne" for 0x401cfa>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022a8>, <DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "movsxd" for 0x4022b3>, <DisassemblerInsn "cmp" for 0x4022b8>, <DisassemblerInsn "je" for 0x4022bd>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a9>, <DisassemblerInsn "add" for 0x4024ad>, <DisassemblerInsn "ret" for 0x4024b1>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "jmp" for 0x402007>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "mov" for 0x401c65>, <DisassemblerInsn "lea" for 0x401c6a>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "call" for 0x401c73>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402451>, <DisassemblerInsn "mov" for 0x402456>, <DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x40245e>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "jmp" for 0x402466>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1b>, <DisassemblerInsn "add" for 0x401f20>, <DisassemblerInsn "call" for 0x401f27>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "jmp" for 0x402251>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bdf>, <DisassemblerInsn "cmp" for 0x401be4>, <DisassemblerInsn "jl" for 0x401beb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c07>, <DisassemblerInsn "lea" for 0x401c0a>, <DisassemblerInsn "xor" for 0x401c0f>, <DisassemblerInsn "call" for 0x401c11>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d72>, <DisassemblerInsn "cmp" for 0x401d77>, <DisassemblerInsn "je" for 0x401d7f>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e10>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "jmp" for 0x401f42>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "jmp" for 0x402096>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "xor" for 0x401edb>, <DisassemblerInsn "mov" for 0x401edd>, <DisassemblerInsn "call" for 0x401edf>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0d>, <DisassemblerInsn "mov" for 0x401d12>, <DisassemblerInsn "mov" for 0x401d19>, <DisassemblerInsn "cmp" for 0x401d1e>, <DisassemblerInsn "jne" for 0x401d26>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402156>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9c>, <DisassemblerInsn "jmp" for 0x401ca4>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022e8>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402412>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc6>, <DisassemblerInsn "cmp" for 0x401dca>, <DisassemblerInsn "jge" for 0x401dcd>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e57>, <DisassemblerInsn "jne" for 0x401e5e>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "add" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c55>, <DisassemblerInsn "cmp" for 0x401c5b>, <DisassemblerInsn "je" for 0x401c5e>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219a>, <DisassemblerInsn "jmp" for 0x4021a2>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402063>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "mov" for 0x40206d>, <DisassemblerInsn "movzx" for 0x402074>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "lea" for 0x402080>, <DisassemblerInsn "mov" for 0x402087>, <DisassemblerInsn "call" for 0x402089>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401bb0>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbe>, <DisassemblerInsn "mov" for 0x401bc3>, <DisassemblerInsn "mov" for 0x401bcb>, <DisassemblerInsn "mov" for 0x401bd4>, <DisassemblerInsn "cmp" for 0x401bd9>, <DisassemblerInsn "jl" for 0x401bdd>]'}, {'block_Idx': 176, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40240e>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402205>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402111>, <DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "mov" for 0x402125>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "cmp" for 0x40212e>, <DisassemblerInsn "je" for 0x402132>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "mov" for 0x40225d>, <DisassemblerInsn "cmp" for 0x402264>, <DisassemblerInsn "je" for 0x402269>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402231>, <DisassemblerInsn "mov" for 0x402236>, <DisassemblerInsn "lea" for 0x40223b>, <DisassemblerInsn "mov" for 0x402242>, <DisassemblerInsn "call" for 0x402244>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40203c>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402182>, <DisassemblerInsn "mov" for 0x402187>, <DisassemblerInsn "lea" for 0x40218c>, <DisassemblerInsn "mov" for 0x402193>, <DisassemblerInsn "call" for 0x402195>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402356>, <DisassemblerInsn "mov" for 0x40235b>, <DisassemblerInsn "call" for 0x402362>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401bfa>, <DisassemblerInsn "je" for 0x401c00>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402414>, <DisassemblerInsn "add" for 0x40241a>, <DisassemblerInsn "mov" for 0x40241d>, <DisassemblerInsn "cmp" for 0x402423>, <DisassemblerInsn "je" for 0x40242b>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c32>, <DisassemblerInsn "je" for 0x401c35>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023c2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "lea" for 0x401d8d>, <DisassemblerInsn "call" for 0x401d92>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402296>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023b8>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "mov" for 0x4023bf>, <DisassemblerInsn "jmp" for 0x4023c2>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "mov" for 0x4023ac>, <DisassemblerInsn "call" for 0x4023b3>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c0>, <DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "mov" for 0x4021cd>, <DisassemblerInsn "mov" for 0x4021d4>, <DisassemblerInsn "movsxd" for 0x4021d8>, <DisassemblerInsn "cmp" for 0x4021dd>, <DisassemblerInsn "je" for 0x4021e1>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "lea" for 0x402468>, <DisassemblerInsn "call" for 0x40246d>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc4>, <DisassemblerInsn "mov" for 0x401fc9>, <DisassemblerInsn "mov" for 0x401fcf>, <DisassemblerInsn "cmp" for 0x401fd4>, <DisassemblerInsn "je" for 0x401fd7>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "jmp" for 0x401d30>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "jmp" for 0x401bf5>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402371>, <DisassemblerInsn "mov" for 0x402376>, <DisassemblerInsn "lea" for 0x40237b>, <DisassemblerInsn "mov" for 0x402382>, <DisassemblerInsn "call" for 0x402384>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "cmp" for 0x401e70>, <DisassemblerInsn "je" for 0x401e74>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401eb9>, <DisassemblerInsn "jge" for 0x401ebc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "mov" for 0x401cb6>, <DisassemblerInsn "mov" for 0x401cbb>, <DisassemblerInsn "mov" for 0x401cc2>, <DisassemblerInsn "cmp" for 0x401cc7>, <DisassemblerInsn "jne" for 0x401ccf>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4021a7>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "cmp" for 0x401d3a>, <DisassemblerInsn "je" for 0x401d42>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40242d>, <DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "call" for 0x402439>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022fc>, <DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "movsxd" for 0x402307>, <DisassemblerInsn "cmp" for 0x40230c>, <DisassemblerInsn "jne" for 0x402311>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "cmp" for 0x401e17>, <DisassemblerInsn "je" for 0x401e1b>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "jmp" for 0x401c3f>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402403>, <DisassemblerInsn "cmp" for 0x402407>, <DisassemblerInsn "jge" for 0x40240c>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022bf>, <DisassemblerInsn "mov" for 0x4022c4>, <DisassemblerInsn "mov" for 0x4022cb>, <DisassemblerInsn "mov" for 0x4022d0>, <DisassemblerInsn "mov" for 0x4022d7>, <DisassemblerInsn "movsxd" for 0x4022db>, <DisassemblerInsn "cmp" for 0x4022e0>, <DisassemblerInsn "jne" for 0x4022e4>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401efc>, <DisassemblerInsn "cmp" for 0x401f01>, <DisassemblerInsn "setne" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402483>, <DisassemblerInsn "add" for 0x402488>, <DisassemblerInsn "call" for 0x40248f>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401e98>, <DisassemblerInsn "jl" for 0x401e9b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402472>, <DisassemblerInsn "add" for 0x402477>, <DisassemblerInsn "call" for 0x40247e>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234b>, <DisassemblerInsn "cmp" for 0x402350>, <DisassemblerInsn "je" for 0x402354>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ea>, <DisassemblerInsn "add" for 0x4022ee>, <DisassemblerInsn "mov" for 0x4022f1>, <DisassemblerInsn "jmp" for 0x4022f5>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402338>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40233c>, <DisassemblerInsn "cmp" for 0x402341>, <DisassemblerInsn "je" for 0x402349>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023c4>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "lea" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "call" for 0x401ed1>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401da0>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "mov" for 0x402318>, <DisassemblerInsn "lea" for 0x40231d>, <DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "call" for 0x402326>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402158>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e2d>, <DisassemblerInsn "mov" for 0x401e32>, <DisassemblerInsn "mov" for 0x401e35>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "call" for 0x401e3d>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402389>, <DisassemblerInsn "jmp" for 0x402391>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4022e6>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df5>, <DisassemblerInsn "mov" for 0x401dfa>, <DisassemblerInsn "mov" for 0x401e00>, <DisassemblerInsn "mov" for 0x401e05>, <DisassemblerInsn "call" for 0x401e0b>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "cmp" for 0x40236c>, <DisassemblerInsn "je" for 0x40236f>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e65>, <DisassemblerInsn "jne" for 0x401e69>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9d>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "mov" for 0x401ead>, <DisassemblerInsn "xor" for 0x401eb2>, <DisassemblerInsn "call" for 0x401eb4>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd1>, <DisassemblerInsn "jmp" for 0x401cd9>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402134>, <DisassemblerInsn "mov" for 0x402139>, <DisassemblerInsn "mov" for 0x40213c>, <DisassemblerInsn "mov" for 0x402141>, <DisassemblerInsn "mov" for 0x402148>, <DisassemblerInsn "movsxd" for 0x40214c>, <DisassemblerInsn "cmp" for 0x402151>, <DisassemblerInsn "jne" for 0x402154>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40233a>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402256>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f71>, <DisassemblerInsn "cmp" for 0x401f76>, <DisassemblerInsn "jne" for 0x401f79>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "cmp" for 0x401de7>, <DisassemblerInsn "je" for 0x401dee>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f9c>, <DisassemblerInsn "mov" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fa9>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dcf>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "mov" for 0x4020bf>, <DisassemblerInsn "cmp" for 0x4020c1>, <DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "jne" for 0x4020ca>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "cmp" for 0x401fde>, <DisassemblerInsn "je" for 0x401fe5>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402027>, <DisassemblerInsn "call" for 0x40202c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c85>, <DisassemblerInsn "cmp" for 0x401c8a>, <DisassemblerInsn "jne" for 0x401c92>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "mov" for 0x401dac>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402041>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e3>, <DisassemblerInsn "mov" for 0x4021e8>, <DisassemblerInsn "mov" for 0x4021eb>, <DisassemblerInsn "mov" for 0x4021f0>, <DisassemblerInsn "mov" for 0x4021f7>, <DisassemblerInsn "movsxd" for 0x4021fb>, <DisassemblerInsn "cmp" for 0x402200>, <DisassemblerInsn "jne" for 0x402203>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f47>, <DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "cmp" for 0x401f5d>, <DisassemblerInsn "je" for 0x401f64>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40226f>, <DisassemblerInsn "cmp" for 0x402274>, <DisassemblerInsn "jne" for 0x40227c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "call" for 0x401c2c>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229b>, <DisassemblerInsn "mov" for 0x4022a3>, <DisassemblerInsn "mov" for 0x4022a8>, <DisassemblerInsn "mov" for 0x4022af>, <DisassemblerInsn "movsxd" for 0x4022b3>, <DisassemblerInsn "cmp" for 0x4022b8>, <DisassemblerInsn "je" for 0x4022bd>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021c8>, <DisassemblerInsn "mov" for 0x4021cd>, <DisassemblerInsn "mov" for 0x4021d4>, <DisassemblerInsn "movsxd" for 0x4021d8>, <DisassemblerInsn "cmp" for 0x4021dd>, <DisassemblerInsn "je" for 0x4021e1>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402031>, <DisassemblerInsn "cmp" for 0x402035>, <DisassemblerInsn "jge" for 0x40203a>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402119>, <DisassemblerInsn "mov" for 0x40211e>, <DisassemblerInsn "mov" for 0x402125>, <DisassemblerInsn "movsxd" for 0x402129>, <DisassemblerInsn "cmp" for 0x40212e>, <DisassemblerInsn "je" for 0x402132>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402494>, <DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "jmp" for 0x4024a4>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "cmp" for 0x401d9b>, <DisassemblerInsn "jge" for 0x401d9e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd4>, <DisassemblerInsn "cmp" for 0x401dd9>, <DisassemblerInsn "je" for 0x401de0>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402398>, <DisassemblerInsn "cmp" for 0x40239d>, <DisassemblerInsn "je" for 0x4023a5>]'}, {'block_Idx': 166, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402396>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d9>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "and" for 0x4023e4>, <DisassemblerInsn "cmp" for 0x4023e7>, <DisassemblerInsn "jne" for 0x4023ea>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x402048>, <DisassemblerInsn "movzx" for 0x40204f>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "cmp" for 0x40205b>, <DisassemblerInsn "jge" for 0x402061>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1d>, <DisassemblerInsn "cmp" for 0x401e22>, <DisassemblerInsn "je" for 0x401e26>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "jmp" for 0x401c80>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "and" for 0x401f11>, <DisassemblerInsn "movzx" for 0x401f13>, <DisassemblerInsn "cmp" for 0x401f16>, <DisassemblerInsn "je" for 0x401f19>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "xor" for 0x401eee>, <DisassemblerInsn "cmp" for 0x401ef0>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "je" for 0x401efa>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cde>, <DisassemblerInsn "cmp" for 0x401ce3>, <DisassemblerInsn "jle" for 0x401ce7>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402207>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020cc>, <DisassemblerInsn "cmp" for 0x4020d1>, <DisassemblerInsn "setne" for 0x4020d9>, <DisassemblerInsn "mov" for 0x4020dc>, <DisassemblerInsn "mov" for 0x4020e0>, <DisassemblerInsn "mov" for 0x4020e4>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "and" for 0x4020ec>, <DisassemblerInsn "movzx" for 0x4020ee>, <DisassemblerInsn "cmp" for 0x4020f1>, <DisassemblerInsn "je" for 0x4020f4>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402167>, <DisassemblerInsn "mov" for 0x40216c>, <DisassemblerInsn "mov" for 0x402173>, <DisassemblerInsn "movsxd" for 0x402177>, <DisassemblerInsn "cmp" for 0x40217c>, <DisassemblerInsn "jne" for 0x402180>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401d70>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40200c>, <DisassemblerInsn "mov" for 0x402011>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "jne" for 0x402025>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "cmp" for 0x401f80>, <DisassemblerInsn "jne" for 0x401f87>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400276>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "xor" for 0x40028b>, <DisassemblerInsn "sub" for 0x40028d>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "sar" for 0x40029c>, <DisassemblerInsn "xor" for 0x40029e>, <DisassemblerInsn "sub" for 0x4002a0>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "xor" for 0x4002aa>, <DisassemblerInsn "sub" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "sar" for 0x4002bb>, <DisassemblerInsn "xor" for 0x4002bd>, <DisassemblerInsn "sub" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "ret" for 0x4002c9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40245e>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "jmp" for 0x402466>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "mov" for 0x4023fc>, <DisassemblerInsn "call" for 0x402401>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e42>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fec>, <DisassemblerInsn "lea" for 0x401ff1>, <DisassemblerInsn "mov" for 0x401ff8>, <DisassemblerInsn "call" for 0x401ffa>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "add" for 0x40215e>, <DisassemblerInsn "mov" for 0x402161>, <DisassemblerInsn "jmp" for 0x402165>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401c16>, <DisassemblerInsn "je" for 0x401c1e>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40227e>, <DisassemblerInsn "mov" for 0x402283>, <DisassemblerInsn "lea" for 0x402288>, <DisassemblerInsn "mov" for 0x40228f>, <DisassemblerInsn "call" for 0x402291>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021a9>, <DisassemblerInsn "mov" for 0x4021ae>, <DisassemblerInsn "cmp" for 0x4021b5>, <DisassemblerInsn "je" for 0x4021ba>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402410>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402216>, <DisassemblerInsn "mov" for 0x40221b>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "movsxd" for 0x402226>, <DisassemblerInsn "cmp" for 0x40222b>, <DisassemblerInsn "jne" for 0x40222f>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "lea" for 0x401dbc>, <DisassemblerInsn "call" for 0x401dc1>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb4>, <DisassemblerInsn "mov" for 0x401fba>, <DisassemblerInsn "cmp" for 0x401fbf>, <DisassemblerInsn "jne" for 0x401fc2>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "jbe" for 0x401f38>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e7b>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e86>, <DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "xor" for 0x401e91>, <DisassemblerInsn "call" for 0x401e93>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402447>, <DisassemblerInsn "call" for 0x40244c>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "cmp" for 0x401e49>, <DisassemblerInsn "jne" for 0x401e50>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "cmp" for 0x402106>, <DisassemblerInsn "je" for 0x40210b>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c44>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c6>, <DisassemblerInsn "mov" for 0x4023cb>, <DisassemblerInsn "cmp" for 0x4023d2>, <DisassemblerInsn "je" for 0x4023d7>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "add" for 0x40220d>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "jmp" for 0x402214>]'}], 'cfg_block_detailed_info': [{'block_Idx': 168, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x401db7>']}, {'block_Idx': 19, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x40245e>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x40], 0>', '<mov~~byte ptr [rsp + 2], al>', '<je~~0x4020e8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rdi, dword ptr [rax + 0x10]>', '<call~~0x500040>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d72>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x4022f7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3985]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024a9>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0xffffff8>', '<jl~~0x401bfa>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 8]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401da5>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<mov~~esi, edx>', '<call~~0x400260>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x98], 0>', '<jne~~0x401d35>']}, {'block_Idx': 129, 'blockInsts': ['<jmp~~0x402167>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402414>']}, {'block_Idx': 158, 'blockInsts': ['<jmp~~0x4022ea>']}, {'block_Idx': 114, 'blockInsts': ['<jmp~~0x402414>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401dd4>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x401e76>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3954]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x394b], eax>', '<mov~~eax, dword ptr [rip + 0x3945]>', '<cmp~~eax, 1>', '<je~~0x401c85>']}, {'block_Idx': 149, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~ecx, byte ptr [rax + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35eb]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~qword ptr [rsp + 0x18], rdx>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jl~~0x401bed>']}, {'block_Idx': 176, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 137, 'blockInsts': ['<jmp~~0x402216>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x402167>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x40233c>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3495]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x351c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 143, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x401c16>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3186]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x317d], eax>', '<cmp~~qword ptr [rip + 0x3165], 0>', '<je~~0x40243f>']}, {'block_Idx': 172, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x401c44>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x4023c4>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x98]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 154, 'blockInsts': ['<jmp~~0x40233a>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<jmp~~0x4023c4>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x390]>', '<call~~0x5000c8>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402216>']}, {'block_Idx': 42, 'blockInsts': ['<lea~~rdi, [rsp + 8]>', '<call~~0x5000d0>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x40200c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402414>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x4024a9>']}, {'block_Idx': 167, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33c6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401ee4>']}, {'block_Idx': 83, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x401ee4>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x428], 0>', '<jne~~0x401cde>']}, {'block_Idx': 128, 'blockInsts': ['<jmp~~0x4021a9>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401d70>']}, {'block_Idx': 20, 'blockInsts': ['<lea~~rdi, [rip + 0x3164]>', '<mov~~esi, 2>', '<call~~qword ptr [rip + 0x3151]>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<jne~~0x402338>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<je~~0x401e42>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffff>', '<jmp~~0x4024a9>']}, {'block_Idx': 175, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402410>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x78]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~rax, qword ptr [rcx + rdx*8]>', '<jne~~0x4022e8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 3], al>', '<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x428>', '<call~~0x500060>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401ebe>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x402398>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4022a3>']}, {'block_Idx': 156, 'blockInsts': ['<jmp~~0x40233a>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x402398>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x4023c6>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3760]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 155, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33f9]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 130, 'blockInsts': ['<jmp~~0x40215a>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x38]>', '<call~~0x400260>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffea>', '<jmp~~0x402468>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x4022f7>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rax + 0x308]>', '<call~~0x400260>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<je~~0x402396>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x401e76>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xfffffff4>', '<jmp~~0x402414>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x70]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402158>']}, {'block_Idx': 163, 'blockInsts': ['<jmp~~0x40233c>']}, {'block_Idx': 136, 'blockInsts': ['<jmp~~0x402258>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x401faf>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<je~~0x401e12>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x100], ecx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x104], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x402468>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~byte ptr [rsp + 1], al>', '<jne~~0x4020e0>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], 4>', '<je~~0x40200c>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x90], 0>', '<jne~~0x401c9c>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x98], 0>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 108, 'blockInsts': ['<jmp~~0x402043>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rcx + 0x90]>', '<mov~~rcx, qword ptr [rcx + 0x68]>', '<movsxd~~rdx, dword ptr [rsp + 4]>', '<cmp~~eax, dword ptr [rcx + rdx*4]>', '<jne~~0x402207>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], rcx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x100], -1>', '<je~~0x401f7b>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<jne~~0x40229b>']}, {'block_Idx': 8, 'blockInsts': ['<lea~~rdi, [rip + 0x3971]>', '<mov~~esi, 1>', '<call~~qword ptr [rip + 0x395e]>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~dword ptr [rsp + 4], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~qword ptr [rax + rcx*8], 0>', '<je~~0x4022f7>']}, {'block_Idx': 160, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<je~~0x402216>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~dword ptr [rsp + 0x14], 0>', '<jge~~0x402041>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<je~~0x402167>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rax + 0x90], 0>', '<jmp~~0x402414>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<cmp~~eax, 0>', '<jge~~0x401da5>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<je~~0x401e12>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x390], 0>', '<je~~0x4023c2>']}, {'block_Idx': 166, 'blockInsts': ['<jmp~~0x4023c4>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x404]>', '<and~~eax, 1>', '<cmp~~eax, 0>', '<jne~~0x402412>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<movzx~~eax, byte ptr [rax + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<cmp~~eax, dword ptr [rcx + 0x300]>', '<jge~~0x40209b>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x401e42>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0xffffffff>', '<jmp~~0x402414>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~al, byte ptr [rsp + 3]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x401f2c>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x38], 0>', '<mov~~byte ptr [rsp + 3], al>', '<je~~0x401f0d>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x10], 0>', '<jle~~0x401da7>']}, {'block_Idx': 138, 'blockInsts': ['<jmp~~0x402209>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 1], al>', '<mov~~al, byte ptr [rsp + 1]>', '<mov~~byte ptr [rsp + 2], al>', '<mov~~al, byte ptr [rsp + 2]>', '<and~~al, 1>', '<movzx~~eax, al>', '<cmp~~eax, 0>', '<je~~0x4023c6>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], -1>', '<jne~~0x4021a7>']}, {'block_Idx': 53, 'blockInsts': ['<jmp~~0x401d72>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax + 0x60], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~qword ptr [rax + 0x2d8], 0>', '<jne~~0x402043>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x401faf>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~dword ptr [rsp - 0x10], edx>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x304], ecx>', '<mov~~ecx, dword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x308], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0xc]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x34], ecx>', '<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rsp - 8]>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<sar~~eax, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x38], ecx>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<jmp~~0x4024a9>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 50, 'blockInsts': ['<jmp~~0x401e44>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x365d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x402119>']}, {'block_Idx': 5, 'blockInsts': ['<cmp~~qword ptr [rip + 0x3972], 0>', '<je~~0x401c46>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3470]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x68], 0>', '<je~~0x402258>']}, {'block_Idx': 177, 'blockInsts': ['<jmp~~0x402412>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<movsxd~~rcx, dword ptr [rsp + 4]>', '<cmp~~dword ptr [rax + rcx*4], 0>', '<jne~~0x402256>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<lea~~rsi, [rsp + 8]>', '<call~~0x5000b8>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x401fe7>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x54], 0x80>', '<jbe~~0x401f47>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~edi, dword ptr [rax + 0x304]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~esi, dword ptr [rax + 0x308]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x5000d0>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~dword ptr [rax + 0x304], 0>', '<jne~~0x401e76>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x70], 0>', '<je~~0x4021a9>']}, {'block_Idx': 173, 'blockInsts': ['<jmp~~0x401c46>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x90]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x402412>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x4021c8>']}], 'cfg_edge_info': [(16, 20), (146, 157), (98, 101), (70, 73), (53, 32), (38, 44), (74, 82), (37, 42), (175, 177), (7, 10), (107, 42), (169, 145), (87, 73), (67, 70), (33, 38), (113, 110), (156, 163), (163, 123), (129, 121), (2, 4), (109, 42), (75, 83), (123, 132), (62, 67), (36, 48), (67, 63), (25, 27), (108, 98), (73, 76), (22, 3), (105, 111), (81, 80), (90, 92), (145, 156), (116, 120), (124, 133), (173, 7), (17, 16), (39, 46), (23, 29), (166, 151), (91, 93), (121, 128), (130, 140), (87, 50), (94, 98), (140, 150), (177, 114), (158, 165), (99, 42), (131, 141), (45, 16), (51, 50), (5, 7), (21, 25), (134, 146), (83, 73), (0, 2), (95, 93), (57, 63), (115, 114), (92, 94), (1, 3), (16, 19), (171, 42), (119, 123), (71, 74), (88, 90), (70, 63), (162, 167), (42, 56), (20, 19), (154, 163), (48, 35), (125, 136), (77, 80), (38, 43), (112, 111), (103, 108), (89, 88), (80, 85), (126, 137), (106, 113), (138, 148), (143, 162), (13, 16), (175, 176), (24, 16), (28, 32), (150, 122), (76, 81), (27, 33), (33, 37), (56, 66), (43, 50), (84, 88), (40, 33), (31, 39), (157, 145), (58, 87), (97, 103), (133, 154), (115, 118), (55, 42), (123, 131), (19, 22), (132, 143), (7, 11), (117, 121), (110, 115), (93, 99), (105, 110), (120, 126), (82, 87), (145, 155), (4, 6), (160, 125), (141, 151), (121, 127), (127, 149), (25, 28), (111, 116), (73, 77), (85, 42), (32, 36), (165, 169), (51, 58), (2, 1), (142, 161), (172, 174), (128, 116), (122, 130), (29, 3), (168, 42), (102, 106), (174, 3), (114, 16), (82, 73), (131, 142), (162, 166), (8, 172), (146, 158), (98, 102), (95, 94), (112, 110), (103, 107), (159, 42), (80, 84), (106, 112), (132, 131), (48, 55), (28, 31), (150, 121), (62, 63), (76, 80), (71, 75), (88, 91), (119, 124), (148, 160), (63, 71), (58, 50), (169, 146), (151, 110), (176, 42), (77, 81), (116, 119), (161, 151), (101, 109), (113, 111), (126, 138), (39, 45), (91, 92), (135, 159), (66, 72), (110, 114), (94, 97), (6, 5), (155, 168), (149, 42), (120, 125), (4, 5), (50, 57), (90, 93), (43, 51), (84, 89), (124, 134), (65, 57), (89, 91), (134, 145), (0, 1), (57, 62), (19, 23), (137, 125), (117, 122), (32, 35), (72, 16), (44, 43), (35, 40), (160, 126), (118, 175), (44, 52), (167, 171), (125, 135), (5, 8), (83, 74), (172, 173), (136, 119), (122, 129), (92, 95), (102, 105), (111, 117)], 'cdg_edge_info': [(5, 172), (16, 20), (80, 56), (98, 101), (125, 119), (105, 116), (90, 42), (98, 110), (145, 42), (116, 125), (39, 33), (38, 44), (91, 98), (48, 72), (103, 72), (122, 140), (38, 16), (94, 103), (175, 177), (115, 16), (132, 151), (121, 151), (38, 80), (33, 38), (162, 42), (67, 70), (119, 16), (90, 99), (125, 66), (124, 131), (33, 56), (145, 163), (39, 35), (2, 4), (48, 56), (103, 56), (175, 42), (112, 123), (80, 88), (123, 132), (80, 42), (113, 131), (38, 73), (67, 63), (125, 114), (132, 162), (90, 92), (105, 111), (125, 123), (145, 156), (91, 66), (124, 133), (116, 120), (48, 40), (145, 110), (94, 16), (121, 119), (112, 116), (91, 93), (38, 57), (121, 128), (32, 16), (124, 163), (126, 160), (95, 72), (113, 151), (33, 42), (90, 94), (162, 110), (48, 33), (111, 16), (48, 42), (105, 131), (103, 42), (95, 93), (134, 146), (0, 2), (83, 82), (121, 66), (57, 63), (95, 56), (33, 72), (28, 39), (16, 19), (71, 74), (124, 110), (88, 90), (71, 83), (70, 63), (145, 151), (162, 167), (131, 161), (48, 35), (125, 72), (39, 32), (32, 48), (125, 136), (145, 114), (132, 114), (112, 111), (103, 108), (121, 114), (89, 88), (80, 85), (121, 123), (98, 66), (113, 119), (106, 113), (16, 3), (172, 3), (28, 32), (19, 29), (175, 176), (150, 122), (162, 151), (33, 37), (125, 56), (25, 33), (111, 121), (90, 98), (95, 66), (162, 114), (91, 72), (92, 16), (98, 114), (121, 116), (95, 42), (115, 118), (124, 151), (112, 131), (126, 148), (19, 22), (175, 114), (132, 143), (125, 159), (110, 115), (124, 114), (91, 56), (120, 126), (145, 155), (162, 171), (125, 131), (95, 99), (121, 127), (121, 72), (113, 123), (115, 175), (90, 66), (145, 66), (125, 42), (25, 28), (73, 77), (32, 36), (51, 58), (146, 165), (98, 109), (121, 56), (162, 66), (113, 116), (98, 72), (2, 1), (172, 174), (145, 123), (33, 80), (105, 151), (91, 42), (131, 142), (102, 106), (71, 82), (162, 166), (175, 66), (80, 66), (98, 102), (103, 98), (95, 94), (98, 56), (103, 107), (80, 84), (112, 119), (116, 16), (121, 131), (132, 131), (33, 73), (2, 3), (48, 55), (106, 112), (91, 99), (28, 40), (71, 75), (125, 110), (119, 124), (88, 91), (122, 150), (121, 42), (169, 146), (67, 71), (124, 123), (77, 81), (105, 119), (146, 169), (33, 57), (113, 111), (33, 66), (2, 5), (91, 92), (90, 72), (28, 33), (145, 72), (48, 66), (103, 66), (94, 97), (172, 7), (84, 16), (172, 16), (112, 151), (98, 42), (90, 93), (84, 89), (43, 51), (33, 50), (44, 50), (124, 134), (95, 98), (89, 91), (90, 56), (0, 1), (145, 56), (162, 72), (2, 7), (19, 23), (91, 94), (125, 151), (2, 16), (28, 35), (57, 71), (117, 122), (123, 16), (175, 72), (33, 43), (44, 43), (121, 110), (80, 72), (70, 71), (105, 123), (160, 126), (132, 110), (162, 56), (125, 135), (145, 168), (39, 40), (124, 145), (0, 3), (83, 74), (172, 173), (145, 131), (92, 95), (102, 105), (175, 56), (111, 117), (121, 149)], 'ddg_edge_info': [(67, 77), (101, 42), (0, 23), (80, 95), (33, 29), (40, 77), (90, 145), (80, 122), (80, 131), (133, 143), (0, 126), (94, 142), (0, 135), (94, 160), (94, 169), (36, 48), (75, 165), (117, 140), (75, 3), (80, 90), (77, 103), (40, 63), (140, 150), (0, 94), (159, 29), (81, 91), (94, 119), (0, 121), (75, 124), (75, 133), (94, 146), (75, 142), (75, 160), (7, 16), (133, 3), (97, 165), (40, 58), (90, 126), (85, 29), (133, 115), (93, 42), (80, 112), (0, 89), (134, 169), (0, 98), (90, 162), (40, 143), (75, 110), (94, 123), (0, 116), (75, 119), (94, 132), (0, 125), (94, 150), (43, 77), (75, 146), (117, 121), (120, 126), (97, 133), (148, 126), (97, 142), (143, 20), (140, 122), (40, 44), (143, 29), (97, 160), (80, 89), (90, 121), (97, 169), (80, 98), (0, 75), (133, 110), (66, 20), (0, 84), (66, 29), (102, 113), (0, 93), (73, 77), (0, 102), (94, 118), (165, 169), (51, 58), (0, 111), (75, 123), (40, 165), (75, 132), (36, 33), (36, 42), (40, 3), (29, 3), (174, 3), (120, 148), (97, 146), (97, 155), (90, 116), (90, 125), (0, 70), (90, 143), (165, 146), (75, 91), (40, 124), (0, 88), (0, 97), (40, 133), (143, 118), (40, 142), (97, 20), (94, 122), (142, 19), (97, 29), (75, 118), (43, 58), (40, 160), (75, 127), (135, 159), (120, 125), (97, 123), (97, 132), (143, 19), (140, 121), (90, 102), (97, 150), (90, 111), (0, 56), (134, 145), (40, 110), (0, 74), (66, 19), (40, 119), (102, 112), (75, 95), (0, 92), (40, 146), (75, 113), (142, 23), (75, 122), (81, 165), (97, 118), (97, 127), (97, 145), (90, 106), (0, 51), (20, 29), (90, 115), (90, 124), (75, 81), (66, 23), (165, 145), (75, 90), (40, 123), (94, 103), (40, 132), (81, 133), (99, 29), (118, 42), (81, 142), (81, 160), (81, 169), (97, 113), (97, 122), (97, 131), (90, 92), (90, 101), (90, 110), (40, 91), (23, 29), (168, 29), (80, 145), (0, 73), (40, 118), (75, 85), (118, 19), (94, 98), (40, 127), (75, 94), (133, 175), (81, 146), (81, 155), (0, 167), (5, 16), (97, 117), (97, 126), (81, 20), (0, 32), (81, 29), (42, 56), (20, 19), (40, 95), (40, 113), (75, 80), (149, 29), (118, 23), (75, 89), (81, 123), (40, 122), (133, 161), (81, 132), (56, 66), (81, 150), (0, 162), (97, 103), (38, 63), (97, 112), (161, 115), (90, 91), (0, 36), (63, 74), (40, 81), (20, 23), (40, 90), (80, 126), (167, 42), (81, 118), (80, 162), (81, 127), (142, 3), (81, 145), (75, 169), (97, 98), (0, 4), (161, 110), (142, 115), (40, 67), (0, 40), (40, 85), (80, 121), (40, 94), (81, 95), (133, 142), (81, 113), (81, 122), (81, 131), (0, 143), (75, 155), (0, 161), (142, 110), (75, 20), (75, 29), (80, 116), (40, 80), (103, 29), (80, 125), (81, 90), (40, 89), (80, 143), (81, 117), (171, 29), (94, 145), (75, 150), (67, 75), (133, 20), (167, 171), (133, 29), (0, 3), (40, 57), (80, 102), (80, 111), (75, 42), (133, 123), (81, 85), (81, 94), (133, 132), (118, 3), (44, 63), (0, 115), (81, 112), (94, 131), (0, 124), (43, 67), (0, 133), (74, 82), (40, 169), (0, 142), (75, 145), (48, 29), (70, 75), (148, 125), (40, 43), (80, 88), (75, 19), (135, 42), (80, 106), (40, 70), (80, 115), (133, 118), (81, 80), (80, 124), (81, 89), (0, 101), (81, 98), (0, 110), (94, 126), (0, 119), (40, 155), (75, 131), (51, 75), (97, 42), (75, 140), (143, 167), (94, 162), (40, 20), (40, 29), (40, 38), (0, 2), (143, 23), (80, 92), (75, 23), (80, 101), (80, 110), (127, 42), (90, 142), (81, 84), (133, 131), (81, 93), (113, 162), (90, 160), (94, 112), (97, 19), (94, 121), (90, 169), (40, 150), (75, 117), (0, 123), (51, 70), (75, 126), (0, 132), (75, 135), (106, 113), (43, 75), (143, 162), (97, 140), (40, 33), (40, 42), (120, 160), (40, 51), (90, 119), (0, 82), (90, 146), (0, 91), (94, 116), (40, 145), (75, 112), (97, 23), (94, 125), (0, 118), (75, 121), (94, 143), (127, 149), (36, 40), (28, 36), (40, 19), (97, 135), (117, 150), (2, 172), (80, 91), (142, 161), (90, 123), (90, 132), (102, 106), (94, 102), (90, 150), (0, 95), (75, 98), (40, 131), (94, 111), (40, 140), (75, 116), (75, 125), (75, 134), (5, 20), (97, 121), (40, 23), (97, 148), (81, 42), (101, 109), (39, 36), (90, 118), (0, 63), (0, 72), (0, 81), (75, 84), (40, 117), (40, 126), (0, 90), (75, 93), (94, 106), (32, 33), (40, 135), (75, 102), (94, 115), (75, 111), (94, 124), (75, 120), (117, 122), (97, 116), (97, 125), (81, 19), (143, 3), (97, 134), (90, 95), (97, 143), (118, 175), (0, 58), (66, 3), (90, 122), (0, 67), (90, 131), (40, 112), (134, 165), (40, 121), (75, 88), (94, 101), (75, 97), (143, 115), (94, 110), (75, 106), (81, 140), (40, 148), (75, 115), (97, 102), (97, 111), (97, 120), (81, 23), (0, 44), (40, 98), (75, 74), (0, 80), (40, 116), (75, 83), (40, 125), (81, 126), (97, 3), (143, 110), (75, 92), (40, 134), (81, 135), (75, 101), (142, 20), (142, 29), (38, 57), (97, 106), (97, 115), (161, 118), (97, 124), (0, 39), (40, 84), (90, 112), (40, 93), (0, 57), (134, 146), (0, 66), (40, 102), (40, 111), (1, 3), (40, 120), (81, 121), (81, 148), (0, 160), (0, 169), (97, 101), (97, 110), (97, 119), (142, 118), (0, 25), (20, 3), (90, 98), (0, 43), (40, 88), (40, 97), (112, 113), (80, 142), (75, 73), (40, 106), (40, 115), (81, 116), (80, 160), (81, 125), (80, 169), (81, 134), (93, 99), (0, 146), (81, 143), (0, 155), (133, 19), (0, 20), (0, 29), (0, 38), (23, 3), (80, 119), (40, 92), (40, 101), (81, 102), (80, 146), (81, 111), (75, 77), (118, 20), (81, 120), (118, 29), (0, 150), (175, 29), (133, 23), (81, 3), (148, 160), (63, 71), (80, 123), (81, 88), (80, 132), (81, 97), (81, 106), (113, 175), (80, 150), (81, 115), (0, 127), (133, 162), (81, 124), (66, 72), (0, 145), (75, 148), (155, 168), (0, 1), (0, 19), (155, 42), (0, 28), (63, 75), (40, 73), (80, 118), (81, 92), (113, 161), (81, 101), (81, 110), (109, 29), (0, 122), (81, 119), (0, 131), (75, 143)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 241, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 242, 'instruction': 'movl\t$0, 0x60(%rax)'}, {'instIndex': 243, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 244, 'instruction': 'cmpq\t$0, 0x2d8(%rax)'}, {'instIndex': 245, 'instruction': 'jne\t.LBB20_62'}, {'instIndex': 246, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 247, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 248, 'instruction': 'movl\t%eax, 0x14(%rsp)'}, {'instIndex': 249, 'instruction': 'cmpl\t$0, 0x14(%rsp)'}, {'instIndex': 250, 'instruction': 'jge\t.LBB20_61'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O1/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O1/utils.s---avcodec_open2---before
function id: 17
function flag: True
There are 657 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 310, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 311, 'instruction': 'cmpq\t$0, 0x2d8(%rcx)'}, {'instIndex': 312, 'instruction': 'movl\t%eax, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 313, 'instruction': 'jne\t.LBB17_43'}, {'instIndex': 315, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 317, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 318, 'instruction': 'movl\t%ecx, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 319, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 320, 'instruction': 'jl\t.LBB17_83'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O1/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O1/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 954 nodes and 1681 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 657 instructions in binary file.
[4203380, 4203419, 4203432]
The execution time of patched subCFG information extraction via angr: 0:00:02.603608
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "mov" for 0x40237b>, <DisassemblerInsn "mov" for 0x402383>, <DisassemblerInsn "cmp" for 0x40238a>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "jne" for 0x402399>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "cmp" for 0x402336>, <DisassemblerInsn "sete" for 0x402339>, <DisassemblerInsn "cmp" for 0x40233c>, <DisassemblerInsn "sete" for 0x40233f>, <DisassemblerInsn "or" for 0x402342>, <DisassemblerInsn "test" for 0x402344>, <DisassemblerInsn "jne" for 0x402346>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d1>, <DisassemblerInsn "mov" for 0x4023d8>, <DisassemblerInsn "mov" for 0x4023df>, <DisassemblerInsn "mov" for 0x4023e2>, <DisassemblerInsn "movzx" for 0x4023ea>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "cmp" for 0x4023f8>, <DisassemblerInsn "jle" for 0x4023fe>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ab>, <DisassemblerInsn "mov" for 0x4023ad>, <DisassemblerInsn "mov" for 0x4023b4>, <DisassemblerInsn "jl" for 0x4023bb>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "call" for 0x4023a3>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fc>, <DisassemblerInsn "mov" for 0x402a03>, <DisassemblerInsn "lea" for 0x402a06>, <DisassemblerInsn "call" for 0x402a0e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x170]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x4023c1>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x402374>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402433>']}, {'block_Idx': 67, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jl~~0x4029fc>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~0x5000c0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1e0]>', '<call~~0x5000d0>']}], 'cfg_edge_info': [(67, 26), (63, 66), (61, 63), (65, 67), (67, 66), (63, 65)]}]}
{'avcodec_open2': [4203380, 4203419, 4203432]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O1/utils.o---before
The extraction of function: avcodec_open2
[4203380, 4203419, 4203432]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 146 nodes and 240 edges in CFGEmulated.
It has 146 nodes and 315 edges in CDG.
It has 2434 nodes and 3256 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4203380, 4203419, 4203432]
{4203520, 4204551, 4204046, 4204561, 4205075, 4202515, 4203554, 4205095, 4202024, 4203053, 4202541, 4203571, 4205108, 4204602, 4203073, 4204099, 4203594, 4205138, 4204629, 4203621, 4204141, 4204655, 4203121, 4202614, 4203652, 4204689, 4204181, 4204699, 4202656, 4203682, 4204194, 4203184, 4202168, 4204221, 4204734, 4203712, 4203204, 4202694, 4204250, 4204767, 4204769, 4203750, 4203239, 4202218, 4204277, 4204793, 4204798, 4202247, 4203273, 4204310, 4203806, 4201760, 4203300, 4204842, 4202291, 4204342, 4202819, 4203336, 4204875, 4203857, 4202836, 4204890, 4202850, 4203363, 4202344, 4201836, 4204915, 4203380, 4202868, 4204409, 4204419, 4203909, 4202386, 4203922, 4203419, 4204446, 4204959, 4201888, 4202402, 4203432, 4202922, 4203949, 4202927, 4204978, 4202419, 4204475, 4203457, 4203978, 4201931, 4202956, 4205005, 4205007, 4202448, 4202961, 4205020, 4201954, 4202471, 4204008, 4202988, 4204538, 4205052}
[27, 103, 85, 87, 48, 99, 132, 125, 94, 40, 52, 127, 54, 110, 11, 2, 72, 64, 88, 123, 78, 145, 91, 81, 35, 107, 114, 33, 71, 106, 13, 96, 102, 20, 44, 101, 139, 41, 104, 133, 47, 59, 15, 134, 0, 121, 29, 34, 22, 136, 42, 32, 112, 6, 63, 70, 76, 120, 143, 3, 55, 130, 45, 51, 119, 77, 4, 74, 90, 86, 39, 109, 144, 116, 111, 118, 93, 100, 31, 8, 98, 26, 75, 61, 17, 105, 126, 92, 131, 50, 80, 16, 1, 117, 113, 43, 28, 10, 19, 140, 58, 21, 124, 141, 65, 84, 68, 97, 23, 46, 73, 7, 95, 82, 18, 135, 128, 62, 60, 9]
The execution time of patched slicing information extraction via angr: 0:00:24.226419
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f68>, <DisassemblerInsn "cmp" for 0x401f70>, <DisassemblerInsn "je" for 0x401f78>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026f5>, <DisassemblerInsn "mov" for 0x4026fd>, <DisassemblerInsn "mov" for 0x402704>, <DisassemblerInsn "xor" for 0x402709>, <DisassemblerInsn "cmp" for 0x40270b>, <DisassemblerInsn "mov" for 0x40270f>, <DisassemblerInsn "jne" for 0x402714>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402400>, <DisassemblerInsn "mov" for 0x402407>, <DisassemblerInsn "mov" for 0x40240f>, <DisassemblerInsn "lea" for 0x402414>, <DisassemblerInsn "mov" for 0x40241b>, <DisassemblerInsn "call" for 0x40241d>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402484>, <DisassemblerInsn "mov" for 0x40248b>, <DisassemblerInsn "cmp" for 0x402492>, <DisassemblerInsn "mov" for 0x402495>, <DisassemblerInsn "je" for 0x40249c>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401fa2>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025f0>, <DisassemblerInsn "mov" for 0x4025f2>, <DisassemblerInsn "cmp" for 0x4025f9>, <DisassemblerInsn "sete" for 0x4025fc>, <DisassemblerInsn "mov" for 0x4025ff>, <DisassemblerInsn "test" for 0x402606>, <DisassemblerInsn "jne" for 0x402608>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402781>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026a0>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292a>, <DisassemblerInsn "mov" for 0x40292e>, <DisassemblerInsn "mov" for 0x402936>, <DisassemblerInsn "and" for 0x40293c>, <DisassemblerInsn "cmp" for 0x40293f>, <DisassemblerInsn "mov" for 0x402942>, <DisassemblerInsn "jne" for 0x402949>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402013>, <DisassemblerInsn "mov" for 0x40201b>, <DisassemblerInsn "mov" for 0x402021>, <DisassemblerInsn "cmp" for 0x402028>, <DisassemblerInsn "je" for 0x40202b>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d5>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "mov" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020ec>, <DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020f7>, <DisassemblerInsn "xor" for 0x4020fd>, <DisassemblerInsn "sub" for 0x402100>, <DisassemblerInsn "mov" for 0x402103>, <DisassemblerInsn "mov" for 0x402109>, <DisassemblerInsn "sar" for 0x402110>, <DisassemblerInsn "mov" for 0x402113>, <DisassemblerInsn "xor" for 0x40211a>, <DisassemblerInsn "sub" for 0x40211c>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "xor" for 0x402121>, <DisassemblerInsn "sub" for 0x402123>, <DisassemblerInsn "sar" for 0x402125>, <DisassemblerInsn "xor" for 0x402127>, <DisassemblerInsn "sub" for 0x402129>, <DisassemblerInsn "mov" for 0x40212b>, <DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402135>, <DisassemblerInsn "mov" for 0x402137>, <DisassemblerInsn "cmp" for 0x40213e>, <DisassemblerInsn "jne" for 0x402141>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026bd>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "mov" for 0x4026c7>, <DisassemblerInsn "mov" for 0x4026ce>, <DisassemblerInsn "jmp" for 0x4026d5>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a27>, <DisassemblerInsn "call" for 0x402a2f>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028be>, <DisassemblerInsn "mov" for 0x4028c5>, <DisassemblerInsn "mov" for 0x4028cc>, <DisassemblerInsn "mov" for 0x4028d0>, <DisassemblerInsn "test" for 0x4028d4>, <DisassemblerInsn "mov" for 0x4028d6>, <DisassemblerInsn "je" for 0x4028dd>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e74>, <DisassemblerInsn "call" for 0x401e79>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "add" for 0x402a59>, <DisassemblerInsn "ret" for 0x402a60>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022c4>, <DisassemblerInsn "mov" for 0x4022cc>, <DisassemblerInsn "add" for 0x4022cf>, <DisassemblerInsn "mov" for 0x4022d6>, <DisassemblerInsn "cmp" for 0x4022de>, <DisassemblerInsn "jne" for 0x4022e5>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402241>, <DisassemblerInsn "mov" for 0x402249>, <DisassemblerInsn "add" for 0x40224c>, <DisassemblerInsn "mov" for 0x402250>, <DisassemblerInsn "mov" for 0x402258>, <DisassemblerInsn "cmp" for 0x40225d>, <DisassemblerInsn "mov" for 0x402264>, <DisassemblerInsn "ja" for 0x40226b>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40244a>, <DisassemblerInsn "mov" for 0x402452>, <DisassemblerInsn "cmp" for 0x402457>, <DisassemblerInsn "mov" for 0x40245c>, <DisassemblerInsn "jne" for 0x402463>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402777>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "mov" for 0x40237b>, <DisassemblerInsn "mov" for 0x402383>, <DisassemblerInsn "cmp" for 0x40238a>, <DisassemblerInsn "mov" for 0x402392>, <DisassemblerInsn "jne" for 0x402399>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40295a>, <DisassemblerInsn "mov" for 0x40295d>, <DisassemblerInsn "mov" for 0x40295f>, <DisassemblerInsn "mov" for 0x402966>, <DisassemblerInsn "jl" for 0x40296d>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "mov" for 0x4024aa>, <DisassemblerInsn "mov" for 0x4024ae>, <DisassemblerInsn "cmp" for 0x4024b6>, <DisassemblerInsn "je" for 0x4024ba>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d1>, <DisassemblerInsn "mov" for 0x4023d8>, <DisassemblerInsn "mov" for 0x4023df>, <DisassemblerInsn "mov" for 0x4023e2>, <DisassemblerInsn "movzx" for 0x4023ea>, <DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "cmp" for 0x4023f8>, <DisassemblerInsn "jle" for 0x4023fe>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f07>, <DisassemblerInsn "mov" for 0x401f0a>, <DisassemblerInsn "mov" for 0x401f12>, <DisassemblerInsn "mov" for 0x401f1a>, <DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "cmp" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f26>, <DisassemblerInsn "je" for 0x401f2d>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40251e>, <DisassemblerInsn "mov" for 0x402526>, <DisassemblerInsn "mov" for 0x40252e>, <DisassemblerInsn "mov" for 0x402536>, <DisassemblerInsn "mov" for 0x402539>, <DisassemblerInsn "cmp" for 0x402540>, <DisassemblerInsn "sete" for 0x402543>, <DisassemblerInsn "mov" for 0x402546>, <DisassemblerInsn "test" for 0x40254d>, <DisassemblerInsn "jne" for 0x40254f>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402643>, <DisassemblerInsn "mov" for 0x40264b>, <DisassemblerInsn "mov" for 0x402653>, <DisassemblerInsn "mov" for 0x402658>, <DisassemblerInsn "mov" for 0x40265b>, <DisassemblerInsn "cmp" for 0x40265f>, <DisassemblerInsn "sete" for 0x402662>, <DisassemblerInsn "mov" for 0x402665>, <DisassemblerInsn "test" for 0x402669>, <DisassemblerInsn "jne" for 0x40266b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029fc>, <DisassemblerInsn "mov" for 0x402a03>, <DisassemblerInsn "lea" for 0x402a06>, <DisassemblerInsn "call" for 0x402a0e>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021cc>, <DisassemblerInsn "jge" for 0x4021cf>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402585>, <DisassemblerInsn "test" for 0x40258c>, <DisassemblerInsn "jne" for 0x40258e>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "mov" for 0x40297e>, <DisassemblerInsn "add" for 0x402984>, <DisassemblerInsn "mov" for 0x402987>, <DisassemblerInsn "mov" for 0x40298d>, <DisassemblerInsn "mov" for 0x402994>, <DisassemblerInsn "cmp" for 0x402999>, <DisassemblerInsn "je" for 0x40299d>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c0>, <DisassemblerInsn "mov" for 0x4024c8>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "cmp" for 0x4024d1>, <DisassemblerInsn "sete" for 0x4024d4>, <DisassemblerInsn "mov" for 0x4024d7>, <DisassemblerInsn "test" for 0x4024de>, <DisassemblerInsn "jne" for 0x4024e0>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027bb>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "mov" for 0x4027ca>, <DisassemblerInsn "mov" for 0x4027d1>, <DisassemblerInsn "cmp" for 0x4027d6>, <DisassemblerInsn "sete" for 0x4027da>, <DisassemblerInsn "mov" for 0x4027dd>, <DisassemblerInsn "xor" for 0x4027e1>, <DisassemblerInsn "test" for 0x4027e3>, <DisassemblerInsn "mov" for 0x4027e6>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "jne" for 0x4027f4>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eb8>, <DisassemblerInsn "mov" for 0x401ec0>, <DisassemblerInsn "mov" for 0x401ec8>, <DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "add" for 0x401ed2>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "cmp" for 0x401ee1>, <DisassemblerInsn "jle" for 0x401ee4>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40212d>, <DisassemblerInsn "mov" for 0x402135>, <DisassemblerInsn "mov" for 0x402137>, <DisassemblerInsn "cmp" for 0x40213e>, <DisassemblerInsn "jne" for 0x402141>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402592>, <DisassemblerInsn "mov" for 0x40259a>, <DisassemblerInsn "lea" for 0x40259f>, <DisassemblerInsn "mov" for 0x4025a6>, <DisassemblerInsn "call" for 0x4025a8>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40283a>, <DisassemblerInsn "mov" for 0x402842>, <DisassemblerInsn "lea" for 0x402847>, <DisassemblerInsn "mov" for 0x40284e>, <DisassemblerInsn "call" for 0x402850>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3b>, <DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "cmp" for 0x401f4a>, <DisassemblerInsn "je" for 0x401f4e>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40260e>, <DisassemblerInsn "mov" for 0x402615>, <DisassemblerInsn "mov" for 0x40261c>, <DisassemblerInsn "mov" for 0x402624>, <DisassemblerInsn "mov" for 0x402627>, <DisassemblerInsn "mov" for 0x40262b>, <DisassemblerInsn "cmp" for 0x402630>, <DisassemblerInsn "mov" for 0x402632>, <DisassemblerInsn "mov" for 0x40263a>, <DisassemblerInsn "je" for 0x402641>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402783>, <DisassemblerInsn "mov" for 0x40278b>, <DisassemblerInsn "lea" for 0x402790>, <DisassemblerInsn "mov" for 0x402797>, <DisassemblerInsn "call" for 0x402799>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f60>, <DisassemblerInsn "call" for 0x401f63>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4021aa>, <DisassemblerInsn "jl" for 0x4021ad>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "jmp" for 0x401e23>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402891>, <DisassemblerInsn "call" for 0x402896>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d20>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "lea" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d47>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "cmp" for 0x401d58>, <DisassemblerInsn "mov" for 0x401d5f>, <DisassemblerInsn "ja" for 0x401d66>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4028df>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd0>, <DisassemblerInsn "cmp" for 0x401fd7>, <DisassemblerInsn "mov" for 0x401fda>, <DisassemblerInsn "jl" for 0x401fe1>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fe7>, <DisassemblerInsn "mov" for 0x401fef>, <DisassemblerInsn "add" for 0x401ff2>, <DisassemblerInsn "mov" for 0x401ff9>, <DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "mov" for 0x402007>, <DisassemblerInsn "cmp" for 0x40200e>, <DisassemblerInsn "je" for 0x402011>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "mov" for 0x401fac>, <DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "lea" for 0x401fc3>, <DisassemblerInsn "call" for 0x401fcb>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4028f9>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401f92>, <DisassemblerInsn "mov" for 0x401f95>, <DisassemblerInsn "jl" for 0x401f9c>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7a>, <DisassemblerInsn "mov" for 0x401f82>, <DisassemblerInsn "lea" for 0x401f85>, <DisassemblerInsn "call" for 0x401f8d>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402736>, <DisassemblerInsn "mov" for 0x40273b>, <DisassemblerInsn "mov" for 0x402740>, <DisassemblerInsn "mov" for 0x402745>, <DisassemblerInsn "test" for 0x402749>, <DisassemblerInsn "sete" for 0x40274c>, <DisassemblerInsn "mov" for 0x40274f>, <DisassemblerInsn "sub" for 0x402753>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "sete" for 0x40275b>, <DisassemblerInsn "or" for 0x40275e>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "add" for 0x402764>, <DisassemblerInsn "mov" for 0x402768>, <DisassemblerInsn "test" for 0x40276d>, <DisassemblerInsn "mov" for 0x402770>, <DisassemblerInsn "jne" for 0x402775>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "add" for 0x401de8>, <DisassemblerInsn "mov" for 0x401deb>, <DisassemblerInsn "mov" for 0x401df1>, <DisassemblerInsn "cmp" for 0x401df7>, <DisassemblerInsn "je" for 0x401dfa>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021af>, <DisassemblerInsn "mov" for 0x4021b7>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "mov" for 0x4021c2>, <DisassemblerInsn "xor" for 0x4021c5>, <DisassemblerInsn "call" for 0x4021c7>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021ec>, <DisassemblerInsn "mov" for 0x4021f4>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "mov" for 0x402204>, <DisassemblerInsn "mov" for 0x40220a>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "mov" for 0x40221e>, <DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "je" for 0x40222b>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402324>, <DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402334>, <DisassemblerInsn "cmp" for 0x402336>, <DisassemblerInsn "sete" for 0x402339>, <DisassemblerInsn "cmp" for 0x40233c>, <DisassemblerInsn "sete" for 0x40233f>, <DisassemblerInsn "or" for 0x402342>, <DisassemblerInsn "test" for 0x402344>, <DisassemblerInsn "jne" for 0x402346>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402807>, <DisassemblerInsn "call" for 0x40280c>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402855>, <DisassemblerInsn "mov" for 0x40285a>, <DisassemblerInsn "mov" for 0x40285f>, <DisassemblerInsn "mov" for 0x402866>, <DisassemblerInsn "jmp" for 0x40286d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d86>, <DisassemblerInsn "mov" for 0x401d8e>, <DisassemblerInsn "lea" for 0x401d91>, <DisassemblerInsn "xor" for 0x401d99>, <DisassemblerInsn "call" for 0x401d9b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402154>, <DisassemblerInsn "cmp" for 0x40215c>, <DisassemblerInsn "jne" for 0x402160>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028e1>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "sub" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028ec>, <DisassemblerInsn "je" for 0x4028f3>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a8>, <DisassemblerInsn "add" for 0x4020ab>, <DisassemblerInsn "mov" for 0x4020af>, <DisassemblerInsn "mov" for 0x4020b7>, <DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "cmp" for 0x4020c1>, <DisassemblerInsn "je" for 0x4020c4>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402174>, <DisassemblerInsn "mov" for 0x40217c>, <DisassemblerInsn "mov" for 0x402183>, <DisassemblerInsn "mov" for 0x40218b>, <DisassemblerInsn "add" for 0x40218e>, <DisassemblerInsn "mov" for 0x402195>, <DisassemblerInsn "mov" for 0x40219d>, <DisassemblerInsn "xor" for 0x4021a3>, <DisassemblerInsn "call" for 0x4021a5>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40286f>, <DisassemblerInsn "mov" for 0x402876>, <DisassemblerInsn "xor" for 0x40287a>, <DisassemblerInsn "test" for 0x40287c>, <DisassemblerInsn "mov" for 0x40287f>, <DisassemblerInsn "mov" for 0x402886>, <DisassemblerInsn "jne" for 0x40288d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402348>, <DisassemblerInsn "mov" for 0x402350>, <DisassemblerInsn "lea" for 0x402355>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "call" for 0x40235e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401da0>, <DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "cmp" for 0x401daf>, <DisassemblerInsn "je" for 0x401db3>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "mov" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402302>, <DisassemblerInsn "mov" for 0x402304>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "mov" for 0x402309>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "mov" for 0x402319>, <DisassemblerInsn "cmp" for 0x40231f>, <DisassemblerInsn "jne" for 0x402322>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028fe>, <DisassemblerInsn "mov" for 0x402906>, <DisassemblerInsn "mov" for 0x40290d>, <DisassemblerInsn "mov" for 0x402911>, <DisassemblerInsn "mov" for 0x402914>, <DisassemblerInsn "mov" for 0x402918>, <DisassemblerInsn "cmp" for 0x40291d>, <DisassemblerInsn "mov" for 0x402921>, <DisassemblerInsn "je" for 0x402928>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ab>, <DisassemblerInsn "mov" for 0x4023ad>, <DisassemblerInsn "mov" for 0x4023b4>, <DisassemblerInsn "jl" for 0x4023bb>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402076>, <DisassemblerInsn "mov" for 0x40207e>, <DisassemblerInsn "add" for 0x402081>, <DisassemblerInsn "mov" for 0x402085>, <DisassemblerInsn "mov" for 0x40208d>, <DisassemblerInsn "mov" for 0x402090>, <DisassemblerInsn "cmp" for 0x402097>, <DisassemblerInsn "je" for 0x40209a>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027fa>, <DisassemblerInsn "cmp" for 0x402802>, <DisassemblerInsn "je" for 0x402805>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dcd>, <DisassemblerInsn "cmp" for 0x401dd2>, <DisassemblerInsn "mov" for 0x401dd5>, <DisassemblerInsn "jne" for 0x401ddc>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402590>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402716>, <DisassemblerInsn "mov" for 0x40271e>, <DisassemblerInsn "lea" for 0x402723>, <DisassemblerInsn "mov" for 0x40272a>, <DisassemblerInsn "call" for 0x40272c>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ad>, <DisassemblerInsn "mov" for 0x4025b2>, <DisassemblerInsn "mov" for 0x4025b7>, <DisassemblerInsn "mov" for 0x4025be>, <DisassemblerInsn "jmp" for 0x4025c5>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402422>, <DisassemblerInsn "mov" for 0x402427>, <DisassemblerInsn "jmp" for 0x40242e>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024e6>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fc>, <DisassemblerInsn "mov" for 0x4024ff>, <DisassemblerInsn "mov" for 0x402506>, <DisassemblerInsn "cmp" for 0x40250b>, <DisassemblerInsn "mov" for 0x40250d>, <DisassemblerInsn "mov" for 0x402515>, <DisassemblerInsn "je" for 0x40251c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "lea" for 0x401fc3>, <DisassemblerInsn "call" for 0x401fcb>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e38>, <DisassemblerInsn "add" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "cmp" for 0x401e4a>, <DisassemblerInsn "sete" for 0x401e52>, <DisassemblerInsn "cmp" for 0x401e55>, <DisassemblerInsn "setne" for 0x401e59>, <DisassemblerInsn "and" for 0x401e5c>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "test" for 0x401e63>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "jne" for 0x401e6d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026e2>, <DisassemblerInsn "mov" for 0x4026e6>, <DisassemblerInsn "cmp" for 0x4026eb>, <DisassemblerInsn "je" for 0x4026ef>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef8>, <DisassemblerInsn "movsxd" for 0x401eff>, <DisassemblerInsn "call" for 0x401f02>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402309>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "mov" for 0x402319>, <DisassemblerInsn "cmp" for 0x40231f>, <DisassemblerInsn "jne" for 0x402322>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40221e>, <DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "je" for 0x40222b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40299f>, <DisassemblerInsn "lea" for 0x4029a4>, <DisassemblerInsn "mov" for 0x4029ab>, <DisassemblerInsn "call" for 0x4029b0>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a2>, <DisassemblerInsn "mov" for 0x4026aa>, <DisassemblerInsn "lea" for 0x4026af>, <DisassemblerInsn "mov" for 0x4026b6>, <DisassemblerInsn "call" for 0x4026b8>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40266d>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "mov" for 0x402675>, <DisassemblerInsn "mov" for 0x402679>, <DisassemblerInsn "add" for 0x40267e>, <DisassemblerInsn "cmp" for 0x402682>, <DisassemblerInsn "mov" for 0x402684>, <DisassemblerInsn "mov" for 0x40268c>, <DisassemblerInsn "jne" for 0x402693>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402465>, <DisassemblerInsn "cmp" for 0x40246d>, <DisassemblerInsn "setne" for 0x402475>, <DisassemblerInsn "and" for 0x402478>, <DisassemblerInsn "movzx" for 0x40247a>, <DisassemblerInsn "mov" for 0x40247d>, <DisassemblerInsn "mov" for 0x402484>, <DisassemblerInsn "mov" for 0x40248b>, <DisassemblerInsn "cmp" for 0x402492>, <DisassemblerInsn "mov" for 0x402495>, <DisassemblerInsn "je" for 0x40249c>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402731>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402143>, <DisassemblerInsn "cmp" for 0x40214b>, <DisassemblerInsn "jne" for 0x402152>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239b>, <DisassemblerInsn "call" for 0x4023a3>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029b2>, <DisassemblerInsn "mov" for 0x4029b6>, <DisassemblerInsn "test" for 0x4029bd>, <DisassemblerInsn "mov" for 0x4029c0>, <DisassemblerInsn "jne" for 0x4029c7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "cmp" for 0x401d74>, <DisassemblerInsn "sete" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7b>, <DisassemblerInsn "test" for 0x401d82>, <DisassemblerInsn "jne" for 0x401d84>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402551>, <DisassemblerInsn "mov" for 0x402558>, <DisassemblerInsn "mov" for 0x40255f>, <DisassemblerInsn "mov" for 0x402566>, <DisassemblerInsn "add" for 0x40256e>, <DisassemblerInsn "cmp" for 0x402572>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "jne" for 0x402583>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402695>, <DisassemblerInsn "test" for 0x40269c>, <DisassemblerInsn "jne" for 0x40269e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "add" for 0x402a1b>, <DisassemblerInsn "call" for 0x402a22>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029dc>, <DisassemblerInsn "mov" for 0x4029e4>, <DisassemblerInsn "mov" for 0x4029e8>, <DisassemblerInsn "mov" for 0x4029f0>, <DisassemblerInsn "mov" for 0x4029f3>, <DisassemblerInsn "jmp" for 0x4029fa>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e6f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4029cd>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40279e>, <DisassemblerInsn "mov" for 0x4027a3>, <DisassemblerInsn "mov" for 0x4027a8>, <DisassemblerInsn "mov" for 0x4027af>, <DisassemblerInsn "jmp" for 0x4027b6>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402162>, <DisassemblerInsn "cmp" for 0x40216a>, <DisassemblerInsn "je" for 0x40216e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029cf>, <DisassemblerInsn "call" for 0x4029d7>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402779>, <DisassemblerInsn "test" for 0x40277d>, <DisassemblerInsn "jne" for 0x40277f>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40289b>, <DisassemblerInsn "mov" for 0x4028a2>, <DisassemblerInsn "mov" for 0x4028a4>, <DisassemblerInsn "mov" for 0x4028ac>, <DisassemblerInsn "xor" for 0x4028ae>, <DisassemblerInsn "mov" for 0x4028b0>, <DisassemblerInsn "mov" for 0x4028b7>, <DisassemblerInsn "mov" for 0x4028be>, <DisassemblerInsn "mov" for 0x4028c5>, <DisassemblerInsn "mov" for 0x4028cc>, <DisassemblerInsn "mov" for 0x4028d0>, <DisassemblerInsn "test" for 0x4028d4>, <DisassemblerInsn "mov" for 0x4028d6>, <DisassemblerInsn "je" for 0x4028dd>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40222d>, <DisassemblerInsn "add" for 0x402235>, <DisassemblerInsn "call" for 0x40223c>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402433>, <DisassemblerInsn "xor" for 0x40243b>, <DisassemblerInsn "cmp" for 0x40243d>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "je" for 0x402448>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402271>, <DisassemblerInsn "mov" for 0x402279>, <DisassemblerInsn "mov" for 0x402281>, <DisassemblerInsn "mov" for 0x402289>, <DisassemblerInsn "mov" for 0x40228c>, <DisassemblerInsn "add" for 0x40228f>, <DisassemblerInsn "mov" for 0x402296>, <DisassemblerInsn "mov" for 0x40229e>, <DisassemblerInsn "mov" for 0x4022a4>, <DisassemblerInsn "cmp" for 0x4022ab>, <DisassemblerInsn "je" for 0x4022ae>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "mov" for 0x402950>, <DisassemblerInsn "call" for 0x402958>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eea>, <DisassemblerInsn "cmp" for 0x401ef2>, <DisassemblerInsn "jne" for 0x401ef6>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40202d>, <DisassemblerInsn "mov" for 0x402035>, <DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "xor" for 0x402043>, <DisassemblerInsn "sub" for 0x402045>, <DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "sar" for 0x402054>, <DisassemblerInsn "mov" for 0x402056>, <DisassemblerInsn "xor" for 0x40205d>, <DisassemblerInsn "sub" for 0x40205f>, <DisassemblerInsn "mov" for 0x402061>, <DisassemblerInsn "xor" for 0x402064>, <DisassemblerInsn "sub" for 0x402066>, <DisassemblerInsn "sar" for 0x402068>, <DisassemblerInsn "xor" for 0x40206a>, <DisassemblerInsn "sub" for 0x40206c>, <DisassemblerInsn "mov" for 0x40206e>, <DisassemblerInsn "jmp" for 0x402071>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022b0>, <DisassemblerInsn "mov" for 0x4022b7>, <DisassemblerInsn "cmp" for 0x4022bf>, <DisassemblerInsn "jne" for 0x4022c2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db5>, <DisassemblerInsn "lea" for 0x401dbd>, <DisassemblerInsn "mov" for 0x401dc4>, <DisassemblerInsn "call" for 0x401dc9>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025d6>, <DisassemblerInsn "cmp" for 0x4025de>, <DisassemblerInsn "je" for 0x4025e2>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "mov" for 0x402368>, <DisassemblerInsn "jmp" for 0x40236f>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e7e>, <DisassemblerInsn "mov" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "add" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "cmp" for 0x401ea7>, <DisassemblerInsn "mov" for 0x401eab>, <DisassemblerInsn "je" for 0x401eb2>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402811>, <DisassemblerInsn "mov" for 0x402819>, <DisassemblerInsn "mov" for 0x402820>, <DisassemblerInsn "xor" for 0x402822>, <DisassemblerInsn "cmp" for 0x402824>, <DisassemblerInsn "mov" for 0x402826>, <DisassemblerInsn "mov" for 0x40282d>, <DisassemblerInsn "je" for 0x402834>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40288f>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021d1>, <DisassemblerInsn "mov" for 0x4021d9>, <DisassemblerInsn "lea" for 0x4021de>, <DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "call" for 0x4021e7>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "mov" for 0x402a3c>, <DisassemblerInsn "mov" for 0x402a3f>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "jmp" for 0x402a4d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dfc>, <DisassemblerInsn "mov" for 0x401e04>, <DisassemblerInsn "lea" for 0x401e09>, <DisassemblerInsn "mov" for 0x401e10>, <DisassemblerInsn "call" for 0x401e12>]'}], 'cfg_block_detailed_info': [{'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401fb3>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x402736>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3e3c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xe8]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x4028fe>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x401fb3>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x97], al>', '<test~~al, 1>', '<jne~~0x4026a2>']}, {'block_Idx': 132, 'blockInsts': ['<jmp~~0x4027bb>']}, {'block_Idx': 125, 'blockInsts': ['<jmp~~0x4026da>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<jne~~0x402973>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<cmp~~eax, 0>', '<je~~0x402076>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~esi, dword ptr [rsp + 0x13c]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~edi, dword ptr [rsp + 0x14c]>', '<mov~~r8, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [r8], edi>', '<mov~~dword ptr [rcx + 0x308], esi>', '<xor~~r8d, r8d>', '<sub~~r8d, edi>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x12c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x12c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rdx], edi>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<sar~~edx, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x128], eax>', '<cmp~~eax, 0>', '<jne~~0x402174>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x4028be>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x198]>', '<call~~0x500060>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x4028fe>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1dc]>', '<add~~rsp, 0x1e8>', '<ret~~>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x104>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<cmp~~dword ptr [rax + 0x104], 0>', '<jne~~0x402309>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x174], eax>', '<ja~~0x4029fc>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~eax, 1>', '<cmp~~qword ptr [rcx + 0x20], 0>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<jne~~0x402484>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x402736>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x170]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~dword ptr [rcx + 0x60], 0>', '<cmp~~qword ptr [rcx + 0x2d8], 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jne~~0x4023c1>']}, {'block_Idx': 145, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1ac], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jl~~0x4029fc>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<cmp~~rax, 0>', '<je~~0x4025ca>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402433>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<je~~0x402973>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, -1>', '<sete~~al>', '<mov~~byte ptr [rsp + 0xbb], al>', '<test~~al, 1>', '<jne~~0x402592>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x7b], al>', '<test~~al, 1>', '<jne~~0x4026a2>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1e0]>', '<call~~0x5000d0>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40221e>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xcf]>', '<test~~al, 1>', '<jne~~0x402592>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x3804]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x37fb], eax>', '<mov~~rax, qword ptr [rip + 0x37e4]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4029b2>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xd0], eax>', '<cmp~~eax, -1>', '<sete~~al>', '<mov~~byte ptr [rsp + 0xd7], al>', '<test~~al, 1>', '<jne~~0x402592>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<cmp~~rax, 0>', '<sete~~dl>', '<mov~~byte ptr [rsp + 0x36], dl>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x4028be>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<cmp~~eax, 0>', '<jle~~0x401fa4>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x128], eax>', '<cmp~~eax, 0>', '<jne~~0x402174>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3cee]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3adf]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x178], rax>', '<cmp~~rax, 0>', '<je~~0x401f68>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x97]>', '<mov~~esi, dword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~edx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<mov~~ecx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~byte ptr [rsp + 0x8f], al>', '<je~~0x402695>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b6b]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 59, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x4021d1>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<jmp~~0x402973>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1e8>', '<mov~~qword ptr [rsp + 0x1c0], rdi>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~qword ptr [rsp + 0x1d0], rdx>', '<lea~~rax, [rsp + 0x1e0]>', '<mov~~qword ptr [rsp + 0x1e0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<ja~~0x402a52>']}, {'block_Idx': 121, 'blockInsts': ['<jmp~~0x4028e1>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x170], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jl~~0x4029fc>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x164], eax>', '<cmp~~eax, 0>', '<je~~0x402076>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<lea~~rsi, [rsp + 0x1e0]>', '<call~~0x5000b8>']}, {'block_Idx': 136, 'blockInsts': ['<jmp~~0x402a52>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jl~~0x4029fc>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1e0]>', '<call~~0x5000b8>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rsi, qword ptr [rcx + rax*8]>', '<test~~rsi, rsi>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x37], cl>', '<sub~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<sete~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x47], cl>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x402779>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x43a0]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x4397], eax>', '<mov~~eax, dword ptr [rip + 0x4391]>', '<cmp~~eax, 1>', '<je~~0x401e28>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402241>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x402374>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<call~~0x5000c8>']}, {'block_Idx': 143, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x4028be>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1e0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~dword ptr [rax + 0x34], 0>', '<jne~~0x402174>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<sub~~ecx, 3>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x4029fc>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<cmp~~eax, 0>', '<je~~0x40212d>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~edi, dword ptr [rsp + 0x128]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x308>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<mov~~esi, dword ptr [rax + 0x308]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~dl, byte ptr [rsp + 0x36]>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x4028be>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3ede]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x43d1]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<cmp~~rax, 0>', '<je~~0x401de2>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rcx + 8]>', '<mov~~dword ptr [rdx], esi>', '<mov~~ecx, dword ptr [rcx + 0xc]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402348>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<je~~0x402973>']}, {'block_Idx': 86, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jl~~0x4029fc>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<cmp~~eax, 0>', '<je~~0x40212d>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40286f>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<jne~~0x402a52>']}, {'block_Idx': 116, 'blockInsts': ['<jmp~~0x4025ca>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3bba]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x4028be>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x4029fc>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xd7]>', '<mov~~esi, dword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~edx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0xbc], edx>', '<mov~~ecx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~byte ptr [rsp + 0xcf], al>', '<je~~0x402585>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<lea~~rsi, [rsp + 0x1e0]>', '<call~~0x5000b8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x1a0], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<jne~~0x401e74>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<cmp~~rax, 0>', '<je~~0x4027bb>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<movsxd~~rdi, eax>', '<call~~0x500040>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402348>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402241>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x37d5]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c06]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x7b]>', '<mov~~edx, dword ptr [rsp + 0x7c]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<add~~rcx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~byte ptr [rsp + 0x8f], al>', '<jne~~0x402643>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xe8]>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x4028fe>']}, {'block_Idx': 131, 'blockInsts': ['<jmp~~0x4027bb>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~dword ptr [rax + 0x308], 0>', '<jne~~0x402174>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~0x5000c0>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x1bf]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<jne~~0x402a52>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x1bf], al>', '<test~~al, 1>', '<jne~~0x401da0>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xbb]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~esi, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<add~~rcx, 1>', '<cmp~~edx, esi>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~byte ptr [rsp + 0xcf], al>', '<jne~~0x40251e>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x8f]>', '<test~~al, 1>', '<jne~~0x4026a2>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1dc], eax>', '<jmp~~0x402a52>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x402973>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4029cf>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~ecx, 0xffffffea>', '<mov~~eax, 3>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jmp~~0x4028be>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<cmp~~dword ptr [rax + 0x38], 0>', '<je~~0x40221e>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<call~~0x5000d0>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x37]>', '<test~~al, 1>', '<jne~~0x402783>']}, {'block_Idx': 141, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~dword ptr [rax], edx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x24], eax>', '<test~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x4028fe>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf0]>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<je~~0x402484>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, -1>', '<je~~0x4022c4>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<call~~rax>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x401f68>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~esi, dword ptr [rsp + 0x154]>', '<mov~~ecx, dword ptr [rsp + 0x164]>', '<xor~~edi, edi>', '<sub~~edi, ecx>', '<mov~~ecx, dword ptr [rax + 0x300]>', '<mov~~dword ptr [rsp + 0x150], ecx>', '<sar~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x150]>', '<xor~~edx, edx>', '<sub~~edx, edi>', '<mov~~dword ptr [rax + 0x34], edx>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<sar~~edx, cl>', '<xor~~ecx, ecx>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax + 0x38], ecx>', '<jmp~~0x40212d>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x114]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jne~~0x402309>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<lea~~rdi, [rip + 0x43bc]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x4026da>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x4029fc>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1c0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<je~~0x402973>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~edx, eax>', '<xor~~eax, eax>', '<cmp~~edx, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<je~~0x4028be>']}, {'block_Idx': 128, 'blockInsts': ['<jmp~~0x402891>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x402f]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<jmp~~0x402973>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x43cb]>', '<mov~~al, 0>', '<call~~0x500050>']}], 'cfg_edge_info': [(81, 85), (42, 48), (70, 64), (145, 33), (97, 145), (31, 29), (13, 17), (72, 75), (144, 6), (52, 51), (98, 103), (20, 22), (87, 91), (105, 127), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (103, 111), (92, 90), (112, 123), (106, 116), (143, 110), (58, 51), (119, 128), (99, 104), (82, 33), (107, 117), (124, 133), (48, 31), (17, 16), (86, 33), (74, 77), (75, 76), (116, 95), (96, 101), (107, 101), (126, 114), (90, 94), (118, 110), (44, 51), (86, 81), (51, 59), (0, 2), (141, 90), (104, 114), (121, 130), (68, 72), (1, 3), (136, 2), (27, 31), (135, 110), (16, 19), (64, 68), (81, 84), (50, 51), (59, 63), (7, 144), (28, 2), (114, 126), (34, 39), (13, 16), (15, 13), (93, 33), (55, 58), (54, 60), (85, 93), (88, 92), (72, 74), (102, 109), (84, 88), (134, 141), (77, 82), (61, 65), (23, 26), (94, 13), (78, 81), (29, 33), (55, 51), (141, 121), (42, 33), (73, 75), (127, 110), (120, 135), (20, 23), (4, 6), (60, 13), (113, 105), (95, 99), (103, 112), (110, 90), (112, 124), (71, 62), (91, 95), (45, 52), (88, 87), (100, 107), (109, 119), (6, 8), (99, 105), (132, 102), (46, 44), (35, 41), (43, 54), (114, 105), (133, 140), (106, 101), (104, 113), (75, 77), (113, 125), (117, 107), (35, 13), (90, 13), (76, 78), (145, 13), (62, 70), (128, 134), (139, 143), (52, 50), (98, 102), (70, 65), (87, 90), (135, 139), (64, 33), (8, 10), (1, 4), (16, 2), (27, 32), (73, 72), (110, 121), (63, 71), (3, 4), (18, 20), (140, 110), (50, 55), (84, 87), (61, 64), (78, 80), (124, 132), (123, 112), (21, 28), (80, 86), (101, 118), (65, 64), (39, 45), (130, 136), (22, 29), (34, 40), (74, 76), (19, 21), (92, 91), (94, 97), (41, 27), (102, 110), (18, 13), (96, 100), (111, 131), (126, 113), (58, 61), (32, 42), (26, 35), (44, 50), (95, 98), (0, 1), (40, 46), (71, 61), (119, 110), (100, 106), (144, 2), (41, 47), (131, 102), (33, 43), (4, 7), (59, 62), (40, 39), (117, 106), (10, 13), (45, 44), (91, 96), (125, 98), (76, 77), (68, 73), (109, 120), (6, 9), (130, 33)], 'cdg_edge_info': [(81, 85), (42, 48), (59, 64), (144, 13), (110, 130), (145, 33), (130, 60), (76, 43), (20, 29), (99, 127), (145, 60), (74, 82), (29, 59), (114, 127), (13, 17), (84, 13), (72, 75), (144, 6), (96, 106), (98, 103), (110, 13), (87, 91), (76, 54), (124, 140), (113, 110), (29, 34), (103, 102), (23, 27), (29, 43), (103, 111), (92, 90), (29, 70), (58, 51), (42, 43), (99, 104), (107, 117), (124, 133), (99, 113), (86, 33), (74, 13), (23, 29), (74, 77), (75, 76), (29, 54), (106, 118), (86, 60), (107, 101), (96, 101), (34, 62), (126, 114), (90, 94), (107, 110), (74, 43), (96, 110), (42, 54), (86, 81), (75, 60), (0, 2), (141, 90), (23, 31), (78, 86), (106, 102), (87, 98), (104, 114), (109, 110), (103, 124), (42, 29), (124, 110), (16, 19), (88, 90), (64, 68), (76, 33), (64, 13), (34, 64), (59, 63), (29, 13), (81, 84), (16, 28), (81, 93), (119, 141), (74, 54), (109, 120), (76, 60), (106, 95), (42, 13), (64, 43), (114, 126), (13, 16), (42, 31), (81, 13), (76, 81), (55, 58), (72, 74), (16, 21), (88, 92), (102, 109), (27, 42), (119, 134), (145, 43), (99, 110), (84, 88), (29, 33), (81, 43), (114, 110), (23, 35), (29, 51), (87, 102), (75, 82), (64, 54), (42, 33), (141, 121), (34, 59), (73, 75), (64, 72), (109, 135), (58, 62), (20, 23), (84, 90), (113, 105), (130, 2), (95, 99), (103, 112), (87, 95), (13, 2), (110, 90), (81, 54), (71, 62), (100, 107), (45, 52), (74, 33), (88, 87), (109, 119), (6, 8), (34, 70), (99, 105), (74, 60), (35, 41), (113, 98), (114, 105), (106, 101), (130, 13), (75, 77), (106, 110), (0, 4), (117, 107), (35, 13), (0, 13), (76, 78), (75, 43), (130, 43), (52, 50), (70, 65), (92, 13), (64, 33), (135, 139), (0, 6), (113, 127), (64, 60), (92, 98), (29, 60), (73, 72), (110, 121), (35, 27), (58, 59), (141, 130), (50, 55), (75, 54), (84, 87), (130, 54), (81, 33), (113, 102), (78, 80), (112, 112), (42, 60), (145, 54), (39, 45), (130, 136), (81, 60), (34, 40), (74, 76), (92, 91), (76, 82), (29, 62), (94, 97), (102, 110), (86, 13), (96, 100), (35, 29), (126, 113), (141, 13), (58, 70), (96, 118), (106, 98), (107, 118), (135, 143), (0, 1), (88, 13), (75, 13), (40, 46), (86, 43), (119, 110), (94, 145), (71, 70), (34, 51), (29, 64), (92, 102), (144, 2), (55, 64), (35, 31), (59, 71), (4, 144), (29, 39), (40, 39), (117, 106), (76, 13), (76, 77), (91, 96), (92, 95), (68, 73), (86, 54), (75, 33), (124, 102), (130, 33)], 'ddg_edge_info': [(101, 33), (133, 13), (65, 107), (134, 94), (40, 50), (65, 134), (80, 95), (80, 104), (111, 119), (80, 113), (101, 145), (73, 74), (62, 74), (52, 51), (62, 92), (62, 101), (120, 33), (31, 95), (74, 75), (31, 104), (31, 113), (65, 102), (99, 104), (82, 33), (107, 117), (133, 17), (65, 111), (65, 120), (80, 81), (80, 90), (140, 141), (80, 99), (80, 117), (91, 114), (62, 78), (81, 91), (31, 72), (0, 94), (0, 103), (63, 141), (31, 81), (62, 96), (51, 59), (31, 90), (102, 141), (31, 99), (65, 88), (65, 97), (64, 141), (65, 106), (63, 33), (65, 124), (80, 85), (105, 17), (80, 94), (133, 97), (80, 103), (93, 33), (62, 64), (91, 100), (80, 112), (54, 60), (91, 109), (62, 73), (31, 76), (62, 91), (97, 21), (31, 85), (51, 63), (31, 94), (31, 103), (64, 109), (65, 74), (65, 92), (139, 130), (65, 101), (120, 135), (109, 135), (60, 13), (105, 21), (80, 98), (101, 130), (0, 75), (91, 95), (113, 141), (62, 68), (85, 33), (91, 104), (31, 62), (139, 13), (62, 77), (0, 102), (97, 16), (31, 80), (43, 54), (84, 92), (143, 141), (117, 107), (101, 13), (90, 13), (65, 78), (68, 74), (65, 96), (120, 130), (65, 105), (139, 143), (120, 139), (80, 84), (105, 16), (0, 70), (39, 52), (91, 99), (63, 117), (63, 126), (39, 70), (97, 2), (139, 17), (0, 97), (120, 13), (31, 75), (31, 84), (124, 141), (135, 141), (65, 64), (134, 33), (68, 60), (65, 73), (65, 91), (105, 2), (8, 60), (31, 34), (63, 103), (0, 65), (63, 112), (0, 74), (31, 52), (91, 103), (91, 112), (63, 130), (31, 70), (111, 17), (139, 97), (124, 145), (46, 55), (127, 141), (105, 141), (117, 106), (77, 33), (65, 68), (65, 77), (68, 73), (76, 86), (62, 17), (54, 13), (145, 33), (101, 97), (97, 145), (90, 97), (0, 51), (31, 29), (63, 98), (63, 107), (91, 98), (0, 78), (104, 126), (13, 17), (31, 65), (72, 75), (105, 127), (111, 21), (120, 97), (65, 72), (80, 33), (21, 2), (6, 13), (8, 41), (62, 21), (54, 17), (63, 84), (0, 46), (8, 59), (0, 55), (8, 68), (31, 33), (0, 64), (63, 102), (63, 111), (0, 73), (31, 51), (63, 120), (62, 124), (62, 133), (111, 16), (86, 81), (78, 86), (46, 63), (8, 27), (62, 16), (63, 70), (0, 41), (134, 130), (54, 21), (119, 141), (0, 50), (63, 88), (63, 97), (63, 106), (0, 68), (105, 90), (13, 16), (62, 119), (65, 17), (72, 74), (85, 93), (81, 141), (111, 2), (134, 13), (78, 81), (46, 58), (8, 13), (62, 2), (42, 33), (1, 144), (63, 65), (0, 27), (63, 74), (54, 16), (0, 45), (20, 23), (80, 126), (63, 92), (52, 55), (111, 141), (63, 101), (33, 60), (112, 124), (62, 105), (62, 114), (105, 94), (65, 21), (34, 52), (45, 52), (31, 117), (31, 126), (62, 141), (45, 70), (34, 70), (133, 21), (0, 4), (0, 13), (65, 133), (145, 13), (111, 109), (54, 2), (8, 35), (0, 31), (0, 40), (63, 78), (52, 50), (80, 130), (81, 95), (92, 141), (64, 33), (62, 100), (62, 109), (16, 2), (65, 16), (31, 112), (31, 130), (31, 139), (80, 13), (133, 16), (65, 119), (0, 8), (134, 97), (0, 17), (63, 64), (80, 107), (63, 73), (31, 13), (80, 134), (52, 63), (62, 95), (65, 2), (62, 104), (31, 98), (62, 113), (31, 107), (31, 134), (144, 2), (133, 2), (65, 114), (111, 90), (0, 21), (76, 141), (65, 141), (80, 102), (63, 68), (100, 117), (80, 111), (113, 145), (62, 72), (80, 120), (81, 85), (62, 81), (52, 58), (62, 90), (133, 141), (91, 135), (62, 99), (51, 62), (31, 102), (31, 111), (95, 114), (31, 120), (101, 17), (106, 141), (64, 135), (65, 100), (65, 109), (111, 94), (92, 90), (80, 88), (0, 16), (80, 97), (76, 145), (80, 106), (62, 76), (80, 124), (73, 76), (139, 21), (62, 85), (120, 17), (81, 98), (62, 94), (133, 145), (31, 88), (62, 103), (86, 33), (97, 33), (31, 97), (31, 106), (101, 21), (63, 13), (126, 114), (65, 95), (65, 104), (65, 113), (0, 2), (141, 90), (80, 92), (80, 101), (105, 33), (113, 135), (91, 107), (81, 84), (139, 16), (62, 80), (63, 134), (31, 74), (120, 21), (102, 134), (31, 92), (51, 70), (31, 101), (114, 126), (105, 145), (101, 16), (65, 81), (88, 92), (65, 90), (63, 17), (65, 99), (29, 33), (65, 117), (77, 82), (94, 13), (40, 51), (133, 90), (80, 96), (39, 55), (80, 105), (139, 2), (91, 102), (62, 75), (102, 120), (62, 84), (120, 16), (31, 78), (0, 100), (31, 96), (95, 99), (124, 135), (103, 112), (101, 2), (65, 76), (65, 85), (46, 81), (68, 81), (65, 94), (68, 90), (63, 21), (65, 103), (139, 141), (65, 112), (80, 91), (133, 94), (8, 81), (31, 46), (8, 90), (31, 55), (101, 141), (62, 70), (63, 124), (120, 2), (31, 64), (63, 133), (31, 73), (0, 104), (65, 80), (68, 76), (63, 16), (65, 98), (139, 145), (120, 141), (21, 28), (80, 86), (101, 118), (0, 63), (0, 72), (31, 50), (62, 65), (63, 119), (0, 81), (39, 63), (31, 68), (102, 119), (97, 13), (31, 77), (134, 17), (105, 130), (111, 33), (65, 75), (63, 2), (65, 84), (62, 33), (105, 13), (0, 58), (63, 96), (8, 71), (111, 145), (63, 105), (31, 45), (63, 114), (0, 76), (91, 96), (31, 63), (130, 33), (97, 17), (139, 90), (134, 21), (17, 21), (101, 90), (98, 112), (63, 91), (63, 100), (31, 40), (92, 145), (63, 109), (0, 80), (52, 81), (31, 58), (81, 135), (13, 28), (134, 16), (139, 94), (120, 90), (80, 17), (17, 16), (46, 70), (27, 29), (90, 94), (63, 77), (101, 94), (0, 39), (31, 17), (111, 135), (63, 95), (63, 104), (63, 113), (104, 114), (62, 117), (34, 46), (105, 97), (62, 126), (65, 33), (134, 2), (17, 2), (28, 2), (120, 94), (80, 21), (133, 33), (8, 29), (63, 72), (0, 34), (0, 43), (63, 81), (111, 130), (31, 21), (63, 90), (0, 52), (134, 141), (4, 13), (63, 99), (80, 133), (92, 135), (31, 39), (23, 35), (62, 112), (1, 16), (62, 130), (31, 124), (31, 133), (111, 13), (106, 145), (80, 16), (0, 20), (100, 107), (62, 13), (8, 42), (63, 76), (31, 16), (80, 119), (63, 85), (111, 134), (63, 94), (133, 140), (81, 102), (62, 98), (104, 113), (62, 107), (35, 13), (31, 119), (62, 134), (45, 63), (80, 2), (65, 126), (118, 141), (76, 135), (111, 102), (63, 62), (31, 2), (63, 71), (111, 120), (80, 114), (29, 78), (63, 80), (141, 130), (81, 88), (80, 141), (52, 70), (62, 102), (62, 111), (74, 76), (31, 105), (62, 120), (31, 114), (45, 58), (106, 135), (96, 100), (126, 113), (31, 141), (0, 1), (134, 90), (40, 46), (65, 130), (111, 97), (100, 106), (80, 100), (0, 28), (63, 75), (80, 109), (33, 43), (81, 92), (133, 130), (62, 88), (139, 33), (62, 97), (31, 91), (62, 106), (81, 119), (31, 100), (65, 13), (31, 109)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 310, 'instruction': 'movl\t$0, 0x60(%rcx)'}, {'instIndex': 311, 'instruction': 'cmpq\t$0, 0x2d8(%rcx)'}, {'instIndex': 312, 'instruction': 'movl\t%eax, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 313, 'instruction': 'jne\t.LBB17_43'}, {'instIndex': 315, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 316, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 317, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 318, 'instruction': 'movl\t%ecx, 0xfc(%rsp)                 # 4-byte Spill'}, {'instIndex': 319, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 320, 'instruction': 'jl\t.LBB17_83'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O2/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O2/utils.s---avcodec_open2---before
function id: 17
function flag: True
There are 611 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O2/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O2/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 942 nodes and 1662 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 611 instructions in binary file.
[4205040, 4205095, 4205108]
The execution time of patched subCFG information extraction via angr: 0:00:02.475225
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a3>, <DisassemblerInsn "mov" for 0x4029aa>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "sete" for 0x4029b5>, <DisassemblerInsn "cmp" for 0x4029b8>, <DisassemblerInsn "sete" for 0x4029bb>, <DisassemblerInsn "or" for 0x4029be>, <DisassemblerInsn "test" for 0x4029c0>, <DisassemblerInsn "jne" for 0x4029c2>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029f0>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "mov" for 0x402a07>, <DisassemblerInsn "cmp" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1e>, <DisassemblerInsn "jne" for 0x402a25>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a6c>, <DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "movzx" for 0x402a92>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "cmp" for 0x402aa0>, <DisassemblerInsn "jle" for 0x402aa6>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a5d>, <DisassemblerInsn "mov" for 0x402a65>, <DisassemblerInsn "mov" for 0x402a6c>, <DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "movzx" for 0x402a92>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "cmp" for 0x402aa0>, <DisassemblerInsn "jle" for 0x402aa6>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ee2>, <DisassemblerInsn "mov" for 0x402ee9>, <DisassemblerInsn "lea" for 0x402eec>, <DisassemblerInsn "call" for 0x402ef4>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "cmp" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jl" for 0x402a45>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a27>, <DisassemblerInsn "call" for 0x402a2f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4029f0>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x402a6c>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402adb>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402adb>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402ee2>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(64, 66), (66, 68), (68, 26), (68, 71), (62, 64), (64, 67)]}]}
{'avcodec_open2': [4205040, 4205095, 4205108]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O2/utils.o---before
The extraction of function: avcodec_open2
[4205040, 4205095, 4205108]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 137 nodes and 221 edges in CFGEmulated.
It has 137 nodes and 346 edges in CDG.
It has 2164 nodes and 2879 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4205040, 4205095, 4205108]
{4205568, 4206093, 4204570, 4205600, 4205095, 4206129, 4205108, 4203572, 4205627, 4203582, 4206144, 4204106, 4205131, 4205655, 4206169, 4204635, 4205164, 4204655, 4205682, 4203640, 4204160, 4205699, 4206213, 4206232, 4205726, 4204703, 4204198, 4205224, 4203690, 4206261, 4205752, 4203704, 4206274, 4203720, 4205258, 4205778, 4205780, 4205275, 4204766, 4203232, 4206306, 4205290, 4205809, 4204786, 4203764, 4206329, 4205312, 4206349, 4205839, 4203793, 4204309, 4204823, 4206362, 4205342, 4204328, 4203817, 4203308, 4205870, 4205364, 4206392, 4203835, 4203334, 4205897, 4204365, 4204881, 4203859, 4205914, 4205408, 4203360, 4203875, 4203877, 4205940, 4203892, 4203381, 4204929, 4204417, 4205444, 4203403, 4205964, 4203921, 4205979, 4204963, 4204453, 4203944, 4205481, 4205995, 4203452, 4204996, 4205508, 4206022, 4203988, 4205525, 4206039, 4204504, 4203479, 4204509, 4205023, 4206053, 4203496, 4204014, 4205040, 4205552, 4204538, 4204543}
[7, 63, 51, 60, 68, 73, 8, 33, 41, 54, 103, 31, 69, 44, 56, 120, 97, 119, 46, 27, 19, 83, 26, 22, 2, 93, 113, 108, 87, 62, 4, 104, 94, 92, 112, 135, 40, 75, 58, 18, 67, 15, 130, 128, 86, 121, 52, 50, 78, 74, 107, 79, 20, 9, 89, 3, 102, 134, 77, 29, 55, 35, 10, 76, 16, 95, 99, 17, 45, 96, 118, 6, 34, 61, 81, 64, 132, 28, 100, 11, 91, 114, 122, 98, 1, 126, 123, 21, 88, 32, 0, 39, 127, 43, 47, 117, 48, 72, 110, 131, 85, 13, 66, 42, 105, 125, 101, 23, 136, 82, 129, 109]
The execution time of patched slicing information extraction via angr: 0:00:24.738933
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402375>, <DisassemblerInsn "lea" for 0x40237d>, <DisassemblerInsn "mov" for 0x402384>, <DisassemblerInsn "call" for 0x402389>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4027d8>, <DisassemblerInsn "jl" for 0x4027db>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40274d>, <DisassemblerInsn "mov" for 0x402754>, <DisassemblerInsn "mov" for 0x40275c>, <DisassemblerInsn "test" for 0x402762>, <DisassemblerInsn "setne" for 0x402764>, <DisassemblerInsn "xor" for 0x402767>, <DisassemblerInsn "or" for 0x40276a>, <DisassemblerInsn "xor" for 0x40276c>, <DisassemblerInsn "test" for 0x40276e>, <DisassemblerInsn "mov" for 0x402771>, <DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "jne" for 0x40277f>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f1a>, <DisassemblerInsn "mov" for 0x402f22>, <DisassemblerInsn "mov" for 0x402f25>, <DisassemblerInsn "mov" for 0x402f2c>, <DisassemblerInsn "jmp" for 0x402f33>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402917>, <DisassemblerInsn "mov" for 0x40291e>, <DisassemblerInsn "mov" for 0x402926>, <DisassemblerInsn "add" for 0x402929>, <DisassemblerInsn "mov" for 0x402930>, <DisassemblerInsn "mov" for 0x402938>, <DisassemblerInsn "cmp" for 0x40293e>, <DisassemblerInsn "mov" for 0x402941>, <DisassemblerInsn "mov" for 0x402948>, <DisassemblerInsn "jne" for 0x40294f>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402981>, <DisassemblerInsn "mov" for 0x402989>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402997>, <DisassemblerInsn "cmp" for 0x40299e>, <DisassemblerInsn "jne" for 0x4029a1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e8>, <DisassemblerInsn "mov" for 0x4023f0>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "add" for 0x4023fb>, <DisassemblerInsn "mov" for 0x402402>, <DisassemblerInsn "cmp" for 0x40240a>, <DisassemblerInsn "sete" for 0x402412>, <DisassemblerInsn "cmp" for 0x402415>, <DisassemblerInsn "setne" for 0x402419>, <DisassemblerInsn "and" for 0x40241c>, <DisassemblerInsn "mov" for 0x40241e>, <DisassemblerInsn "test" for 0x402423>, <DisassemblerInsn "mov" for 0x402426>, <DisassemblerInsn "jne" for 0x40242d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ee2>, <DisassemblerInsn "mov" for 0x402ee9>, <DisassemblerInsn "lea" for 0x402eec>, <DisassemblerInsn "call" for 0x402ef4>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "mov" for 0x4024fc>, <DisassemblerInsn "mov" for 0x402503>, <DisassemblerInsn "cmp" for 0x40250b>, <DisassemblerInsn "je" for 0x40250f>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f0d>, <DisassemblerInsn "call" for 0x402f15>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c9e>, <DisassemblerInsn "mov" for 0x402ca6>, <DisassemblerInsn "mov" for 0x402cad>, <DisassemblerInsn "cmp" for 0x402cb2>, <DisassemblerInsn "je" for 0x402cb6>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "lea" for 0x402584>, <DisassemblerInsn "call" for 0x40258c>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028de>, <DisassemblerInsn "mov" for 0x4028e5>, <DisassemblerInsn "cmp" for 0x4028ed>, <DisassemblerInsn "je" for 0x4028f0>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402680>, <DisassemblerInsn "mov" for 0x402688>, <DisassemblerInsn "add" for 0x40268b>, <DisassemblerInsn "mov" for 0x40268f>, <DisassemblerInsn "mov" for 0x402697>, <DisassemblerInsn "mov" for 0x40269a>, <DisassemblerInsn "cmp" for 0x4026a1>, <DisassemblerInsn "je" for 0x4026a4>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027a5>, <DisassemblerInsn "mov" for 0x4027ad>, <DisassemblerInsn "mov" for 0x4027b5>, <DisassemblerInsn "mov" for 0x4027bc>, <DisassemblerInsn "add" for 0x4027c3>, <DisassemblerInsn "mov" for 0x4027c9>, <DisassemblerInsn "xor" for 0x4027d1>, <DisassemblerInsn "call" for 0x4027d3>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402c55>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c8b>, <DisassemblerInsn "mov" for 0x402c8f>, <DisassemblerInsn "cmp" for 0x402c94>, <DisassemblerInsn "je" for 0x402c98>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c72>, <DisassemblerInsn "mov" for 0x402c77>, <DisassemblerInsn "jmp" for 0x402c7e>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ee>, <DisassemblerInsn "mov" for 0x4025f5>, <DisassemblerInsn "mov" for 0x4025fd>, <DisassemblerInsn "xor" for 0x402604>, <DisassemblerInsn "sub" for 0x402607>, <DisassemblerInsn "mov" for 0x40260a>, <DisassemblerInsn "mov" for 0x402610>, <DisassemblerInsn "sar" for 0x402617>, <DisassemblerInsn "mov" for 0x40261a>, <DisassemblerInsn "xor" for 0x402621>, <DisassemblerInsn "sub" for 0x402623>, <DisassemblerInsn "mov" for 0x402626>, <DisassemblerInsn "xor" for 0x402629>, <DisassemblerInsn "sub" for 0x40262b>, <DisassemblerInsn "sar" for 0x40262d>, <DisassemblerInsn "mov" for 0x40262f>, <DisassemblerInsn "xor" for 0x402637>, <DisassemblerInsn "sub" for 0x402639>, <DisassemblerInsn "mov" for 0x40263b>, <DisassemblerInsn "mov" for 0x40263e>, <DisassemblerInsn "jmp" for 0x402645>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402529>, <DisassemblerInsn "cmp" for 0x402531>, <DisassemblerInsn "je" for 0x402539>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402eb3>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029df>, <DisassemblerInsn "mov" for 0x4029e4>, <DisassemblerInsn "jmp" for 0x4029eb>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b8>, <DisassemblerInsn "mov" for 0x4024bf>, <DisassemblerInsn "mov" for 0x4024c1>, <DisassemblerInsn "call" for 0x4024c3>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402565>, <DisassemblerInsn "mov" for 0x40256d>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x40257c>, <DisassemblerInsn "lea" for 0x402584>, <DisassemblerInsn "call" for 0x40258c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f38>, <DisassemblerInsn "add" for 0x402f3f>, <DisassemblerInsn "ret" for 0x402f46>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bd5>, <DisassemblerInsn "mov" for 0x402bdd>, <DisassemblerInsn "mov" for 0x402be1>, <DisassemblerInsn "cmp" for 0x402be6>, <DisassemblerInsn "je" for 0x402bea>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bc4>, <DisassemblerInsn "mov" for 0x402bc9>, <DisassemblerInsn "jmp" for 0x402bd0>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d74>, <DisassemblerInsn "mov" for 0x402d79>, <DisassemblerInsn "mov" for 0x402d81>, <DisassemblerInsn "mov" for 0x402d83>, <DisassemblerInsn "call" for 0x402d87>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a34>, <DisassemblerInsn "cmp" for 0x402a3b>, <DisassemblerInsn "mov" for 0x402a3e>, <DisassemblerInsn "jl" for 0x402a45>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40285b>, <DisassemblerInsn "add" for 0x402863>, <DisassemblerInsn "call" for 0x40286a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402360>, <DisassemblerInsn "mov" for 0x402367>, <DisassemblerInsn "cmp" for 0x40236f>, <DisassemblerInsn "je" for 0x402373>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c57>, <DisassemblerInsn "mov" for 0x402c5f>, <DisassemblerInsn "lea" for 0x402c64>, <DisassemblerInsn "mov" for 0x402c6b>, <DisassemblerInsn "call" for 0x402c6d>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b1e>, <DisassemblerInsn "mov" for 0x402b26>, <DisassemblerInsn "mov" for 0x402b28>, <DisassemblerInsn "cmp" for 0x402b2f>, <DisassemblerInsn "je" for 0x402b32>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402de5>, <DisassemblerInsn "mov" for 0x402dec>, <DisassemblerInsn "mov" for 0x402df4>, <DisassemblerInsn "mov" for 0x402df7>, <DisassemblerInsn "mov" for 0x402dfb>, <DisassemblerInsn "cmp" for 0x402e00>, <DisassemblerInsn "mov" for 0x402e04>, <DisassemblerInsn "je" for 0x402e0b>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c3b>, <DisassemblerInsn "mov" for 0x402c3f>, <DisassemblerInsn "mov" for 0x402c44>, <DisassemblerInsn "add" for 0x402c48>, <DisassemblerInsn "mov" for 0x402c4c>, <DisassemblerInsn "cmp" for 0x402c51>, <DisassemblerInsn "je" for 0x402c53>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40238b>, <DisassemblerInsn "mov" for 0x40238d>, <DisassemblerInsn "cmp" for 0x402392>, <DisassemblerInsn "mov" for 0x402395>, <DisassemblerInsn "jne" for 0x40239c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025d4>, <DisassemblerInsn "mov" for 0x4025dc>, <DisassemblerInsn "mov" for 0x4025e2>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "je" for 0x4025ec>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40281a>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "mov" for 0x40282a>, <DisassemblerInsn "mov" for 0x402832>, <DisassemblerInsn "mov" for 0x402838>, <DisassemblerInsn "mov" for 0x40283e>, <DisassemblerInsn "mov" for 0x402845>, <DisassemblerInsn "mov" for 0x40284c>, <DisassemblerInsn "cmp" for 0x402854>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40284c>, <DisassemblerInsn "cmp" for 0x402854>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402441>, <DisassemblerInsn "mov" for 0x402449>, <DisassemblerInsn "add" for 0x40244c>, <DisassemblerInsn "mov" for 0x402453>, <DisassemblerInsn "mov" for 0x40245b>, <DisassemblerInsn "mov" for 0x402462>, <DisassemblerInsn "cmp" for 0x402467>, <DisassemblerInsn "mov" for 0x40246b>, <DisassemblerInsn "je" for 0x402472>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027dd>, <DisassemblerInsn "mov" for 0x4027e5>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "mov" for 0x4027f0>, <DisassemblerInsn "xor" for 0x4027f3>, <DisassemblerInsn "call" for 0x4027f5>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023dc>, <DisassemblerInsn "jmp" for 0x4023e3>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402d2c>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d9b>, <DisassemblerInsn "mov" for 0x402d9f>, <DisassemblerInsn "cmp" for 0x402da7>, <DisassemblerInsn "je" for 0x402da9>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aa8>, <DisassemblerInsn "mov" for 0x402aaf>, <DisassemblerInsn "mov" for 0x402ab7>, <DisassemblerInsn "lea" for 0x402abc>, <DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "call" for 0x402ac5>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b60>, <DisassemblerInsn "mov" for 0x402b65>, <DisassemblerInsn "mov" for 0x402b6d>, <DisassemblerInsn "cmp" for 0x402b70>, <DisassemblerInsn "mov" for 0x402b73>, <DisassemblerInsn "mov" for 0x402b7b>, <DisassemblerInsn "je" for 0x402b82>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402728>, <DisassemblerInsn "mov" for 0x402730>, <DisassemblerInsn "mov" for 0x402737>, <DisassemblerInsn "mov" for 0x40273d>, <DisassemblerInsn "mov" for 0x402744>, <DisassemblerInsn "jmp" for 0x40274b>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a6>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "mov" for 0x4026b4>, <DisassemblerInsn "mov" for 0x4026bc>, <DisassemblerInsn "mov" for 0x4026c4>, <DisassemblerInsn "mov" for 0x4026cc>, <DisassemblerInsn "mov" for 0x4026ce>, <DisassemblerInsn "xor" for 0x4026d4>, <DisassemblerInsn "sub" for 0x4026d7>, <DisassemblerInsn "mov" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026e0>, <DisassemblerInsn "sar" for 0x4026e7>, <DisassemblerInsn "mov" for 0x4026ea>, <DisassemblerInsn "xor" for 0x4026f1>, <DisassemblerInsn "sub" for 0x4026f3>, <DisassemblerInsn "mov" for 0x4026f6>, <DisassemblerInsn "xor" for 0x4026f8>, <DisassemblerInsn "sub" for 0x4026fa>, <DisassemblerInsn "sar" for 0x4026fc>, <DisassemblerInsn "mov" for 0x4026fe>, <DisassemblerInsn "xor" for 0x402706>, <DisassemblerInsn "sub" for 0x402708>, <DisassemblerInsn "mov" for 0x40270a>, <DisassemblerInsn "mov" for 0x40270c>, <DisassemblerInsn "jmp" for 0x402713>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c4>, <DisassemblerInsn "mov" for 0x4029cc>, <DisassemblerInsn "lea" for 0x4029d1>, <DisassemblerInsn "mov" for 0x4029d8>, <DisassemblerInsn "call" for 0x4029da>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "mov" for 0x4028f9>, <DisassemblerInsn "mov" for 0x402901>, <DisassemblerInsn "mov" for 0x402907>, <DisassemblerInsn "mov" for 0x40290e>, <DisassemblerInsn "jmp" for 0x402915>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b84>, <DisassemblerInsn "mov" for 0x402b8b>, <DisassemblerInsn "mov" for 0x402b93>, <DisassemblerInsn "add" for 0x402b9a>, <DisassemblerInsn "mov" for 0x402b9e>, <DisassemblerInsn "cmp" for 0x402ba3>, <DisassemblerInsn "je" for 0x402ba5>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029f0>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "mov" for 0x402a07>, <DisassemblerInsn "cmp" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a16>, <DisassemblerInsn "mov" for 0x402a1e>, <DisassemblerInsn "jne" for 0x402a25>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402478>, <DisassemblerInsn "mov" for 0x402480>, <DisassemblerInsn "mov" for 0x402488>, <DisassemblerInsn "mov" for 0x40248b>, <DisassemblerInsn "add" for 0x402492>, <DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "cmp" for 0x4024a1>, <DisassemblerInsn "jle" for 0x4024a4>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023c4>, <DisassemblerInsn "lea" for 0x4023c9>, <DisassemblerInsn "mov" for 0x4023d0>, <DisassemblerInsn "call" for 0x4023d2>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b00>, <DisassemblerInsn "mov" for 0x402b08>, <DisassemblerInsn "mov" for 0x402b0c>, <DisassemblerInsn "cmp" for 0x402b14>, <DisassemblerInsn "je" for 0x402b18>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402346>, <DisassemblerInsn "mov" for 0x40234e>, <DisassemblerInsn "lea" for 0x402351>, <DisassemblerInsn "xor" for 0x402359>, <DisassemblerInsn "call" for 0x40235b>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d5a>, <DisassemblerInsn "mov" for 0x402d62>, <DisassemblerInsn "mov" for 0x402d69>, <DisassemblerInsn "cmp" for 0x402d6e>, <DisassemblerInsn "je" for 0x402d72>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dc6>, <DisassemblerInsn "mov" for 0x402dcb>, <DisassemblerInsn "jmp" for 0x402dd2>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a3>, <DisassemblerInsn "mov" for 0x4029aa>, <DisassemblerInsn "cmp" for 0x4029b2>, <DisassemblerInsn "sete" for 0x4029b5>, <DisassemblerInsn "cmp" for 0x4029b8>, <DisassemblerInsn "sete" for 0x4029bb>, <DisassemblerInsn "or" for 0x4029be>, <DisassemblerInsn "test" for 0x4029c0>, <DisassemblerInsn "jne" for 0x4029c2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402591>, <DisassemblerInsn "cmp" for 0x402598>, <DisassemblerInsn "mov" for 0x40259b>, <DisassemblerInsn "jl" for 0x4025a2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "xor" for 0x402789>, <DisassemblerInsn "cmp" for 0x40278b>, <DisassemblerInsn "mov" for 0x40278f>, <DisassemblerInsn "mov" for 0x402791>, <DisassemblerInsn "mov" for 0x402798>, <DisassemblerInsn "je" for 0x40279f>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024c8>, <DisassemblerInsn "mov" for 0x4024cb>, <DisassemblerInsn "mov" for 0x4024d3>, <DisassemblerInsn "mov" for 0x4024db>, <DisassemblerInsn "mov" for 0x4024de>, <DisassemblerInsn "cmp" for 0x4024e3>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "je" for 0x4024ee>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40242f>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4027fa>, <DisassemblerInsn "jge" for 0x4027fd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e98>, <DisassemblerInsn "mov" for 0x402e9c>, <DisassemblerInsn "test" for 0x402ea3>, <DisassemblerInsn "mov" for 0x402ea6>, <DisassemblerInsn "jne" for 0x402ead>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aca>, <DisassemblerInsn "mov" for 0x402acf>, <DisassemblerInsn "jmp" for 0x402ad6>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ba9>, <DisassemblerInsn "mov" for 0x402bb1>, <DisassemblerInsn "lea" for 0x402bb6>, <DisassemblerInsn "mov" for 0x402bbd>, <DisassemblerInsn "call" for 0x402bbf>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e85>, <DisassemblerInsn "lea" for 0x402e8a>, <DisassemblerInsn "mov" for 0x402e91>, <DisassemblerInsn "call" for 0x402e96>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402715>, <DisassemblerInsn "cmp" for 0x40271c>, <DisassemblerInsn "mov" for 0x40271f>, <DisassemblerInsn "je" for 0x402726>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e0d>, <DisassemblerInsn "mov" for 0x402e14>, <DisassemblerInsn "mov" for 0x402e1c>, <DisassemblerInsn "and" for 0x402e22>, <DisassemblerInsn "cmp" for 0x402e25>, <DisassemblerInsn "mov" for 0x402e28>, <DisassemblerInsn "jne" for 0x402e2f>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402cd2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023a2>, <DisassemblerInsn "add" for 0x4023a8>, <DisassemblerInsn "mov" for 0x4023ab>, <DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "cmp" for 0x4023b7>, <DisassemblerInsn "je" for 0x4023ba>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025a8>, <DisassemblerInsn "mov" for 0x4025b0>, <DisassemblerInsn "add" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025ba>, <DisassemblerInsn "mov" for 0x4025c2>, <DisassemblerInsn "mov" for 0x4025c8>, <DisassemblerInsn "cmp" for 0x4025cf>, <DisassemblerInsn "je" for 0x4025d2>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40286f>, <DisassemblerInsn "mov" for 0x402877>, <DisassemblerInsn "add" for 0x40287a>, <DisassemblerInsn "mov" for 0x40287e>, <DisassemblerInsn "mov" for 0x402886>, <DisassemblerInsn "cmp" for 0x40288b>, <DisassemblerInsn "mov" for 0x402892>, <DisassemblerInsn "ja" for 0x402899>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a27>, <DisassemblerInsn "call" for 0x402a2f>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40289f>, <DisassemblerInsn "mov" for 0x4028a7>, <DisassemblerInsn "mov" for 0x4028af>, <DisassemblerInsn "mov" for 0x4028b7>, <DisassemblerInsn "mov" for 0x4028ba>, <DisassemblerInsn "add" for 0x4028bd>, <DisassemblerInsn "mov" for 0x4028c4>, <DisassemblerInsn "mov" for 0x4028cc>, <DisassemblerInsn "mov" for 0x4028d2>, <DisassemblerInsn "cmp" for 0x4028d9>, <DisassemblerInsn "je" for 0x4028dc>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cf1>, <DisassemblerInsn "mov" for 0x402cf6>, <DisassemblerInsn "mov" for 0x402cfb>, <DisassemblerInsn "cmp" for 0x402cff>, <DisassemblerInsn "mov" for 0x402d03>, <DisassemblerInsn "mov" for 0x402d08>, <DisassemblerInsn "je" for 0x402d0d>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ec2>, <DisassemblerInsn "mov" for 0x402eca>, <DisassemblerInsn "mov" for 0x402ece>, <DisassemblerInsn "mov" for 0x402ed6>, <DisassemblerInsn "mov" for 0x402ed9>, <DisassemblerInsn "jmp" for 0x402ee0>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b34>, <DisassemblerInsn "mov" for 0x402b3b>, <DisassemblerInsn "mov" for 0x402b43>, <DisassemblerInsn "mov" for 0x402b46>, <DisassemblerInsn "xor" for 0x402b4d>, <DisassemblerInsn "mov" for 0x402b4f>, <DisassemblerInsn "mov" for 0x402b57>, <DisassemblerInsn "jmp" for 0x402b5e>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402434>, <DisassemblerInsn "call" for 0x402439>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4b>, <DisassemblerInsn "mov" for 0x402a52>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a5d>, <DisassemblerInsn "mov" for 0x402a65>, <DisassemblerInsn "mov" for 0x402a6c>, <DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "movzx" for 0x402a92>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "cmp" for 0x402aa0>, <DisassemblerInsn "jle" for 0x402aa6>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402ba7>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d8c>, <DisassemblerInsn "mov" for 0x402d8e>, <DisassemblerInsn "mov" for 0x402d92>, <DisassemblerInsn "cmp" for 0x402d96>, <DisassemblerInsn "je" for 0x402d99>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf5>, <DisassemblerInsn "mov" for 0x402bf7>, <DisassemblerInsn "cmp" for 0x402bfb>, <DisassemblerInsn "je" for 0x402bfe>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "cmp" for 0x402334>, <DisassemblerInsn "sete" for 0x402338>, <DisassemblerInsn "mov" for 0x40233b>, <DisassemblerInsn "test" for 0x402342>, <DisassemblerInsn "jne" for 0x402344>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c20>, <DisassemblerInsn "mov" for 0x402c25>, <DisassemblerInsn "mov" for 0x402c2a>, <DisassemblerInsn "cmp" for 0x402c2d>, <DisassemblerInsn "mov" for 0x402c30>, <DisassemblerInsn "mov" for 0x402c35>, <DisassemblerInsn "je" for 0x402c39>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402cef>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eb5>, <DisassemblerInsn "call" for 0x402ebd>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402aea>, <DisassemblerInsn "cmp" for 0x402af2>, <DisassemblerInsn "je" for 0x402afa>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402543>, <DisassemblerInsn "lea" for 0x402546>, <DisassemblerInsn "call" for 0x40254e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4022e0>, <DisassemblerInsn "mov" for 0x4022e7>, <DisassemblerInsn "mov" for 0x4022ef>, <DisassemblerInsn "mov" for 0x4022f7>, <DisassemblerInsn "lea" for 0x4022ff>, <DisassemblerInsn "mov" for 0x402307>, <DisassemblerInsn "mov" for 0x402313>, <DisassemblerInsn "cmp" for 0x402318>, <DisassemblerInsn "mov" for 0x40231f>, <DisassemblerInsn "ja" for 0x402326>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40264a>, <DisassemblerInsn "mov" for 0x402652>, <DisassemblerInsn "add" for 0x402655>, <DisassemblerInsn "mov" for 0x402659>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "mov" for 0x402664>, <DisassemblerInsn "cmp" for 0x40266b>, <DisassemblerInsn "sete" for 0x40266e>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "test" for 0x402678>, <DisassemblerInsn "jne" for 0x40267a>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dd7>, <DisassemblerInsn "mov" for 0x402ddf>, <DisassemblerInsn "mov" for 0x402de3>, <DisassemblerInsn "mov" for 0x402de5>, <DisassemblerInsn "mov" for 0x402dec>, <DisassemblerInsn "mov" for 0x402df4>, <DisassemblerInsn "mov" for 0x402df7>, <DisassemblerInsn "mov" for 0x402dfb>, <DisassemblerInsn "cmp" for 0x402e00>, <DisassemblerInsn "mov" for 0x402e04>, <DisassemblerInsn "je" for 0x402e0b>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "add" for 0x402f01>, <DisassemblerInsn "call" for 0x402f08>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402511>, <DisassemblerInsn "mov" for 0x402519>, <DisassemblerInsn "mov" for 0x402521>, <DisassemblerInsn "call" for 0x402524>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d2e>, <DisassemblerInsn "mov" for 0x402d36>, <DisassemblerInsn "lea" for 0x402d3b>, <DisassemblerInsn "mov" for 0x402d42>, <DisassemblerInsn "call" for 0x402d44>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402563>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402951>, <DisassemblerInsn "mov" for 0x402959>, <DisassemblerInsn "mov" for 0x402961>, <DisassemblerInsn "mov" for 0x402969>, <DisassemblerInsn "mov" for 0x40296c>, <DisassemblerInsn "mov" for 0x40296e>, <DisassemblerInsn "mov" for 0x402971>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "mov" for 0x402981>, <DisassemblerInsn "mov" for 0x402989>, <DisassemblerInsn "mov" for 0x402990>, <DisassemblerInsn "mov" for 0x402997>, <DisassemblerInsn "cmp" for 0x40299e>, <DisassemblerInsn "jne" for 0x4029a1>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb8>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "xor" for 0x402cc0>, <DisassemblerInsn "cmp" for 0x402cc2>, <DisassemblerInsn "mov" for 0x402cc6>, <DisassemblerInsn "mov" for 0x402ccb>, <DisassemblerInsn "je" for 0x402cd0>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dab>, <DisassemblerInsn "mov" for 0x402db3>, <DisassemblerInsn "lea" for 0x402db8>, <DisassemblerInsn "mov" for 0x402dbf>, <DisassemblerInsn "call" for 0x402dc1>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402adb>, <DisassemblerInsn "cmp" for 0x402ae3>, <DisassemblerInsn "jne" for 0x402ae8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e59>, <DisassemblerInsn "mov" for 0x402e60>, <DisassemblerInsn "mov" for 0x402e64>, <DisassemblerInsn "add" for 0x402e6a>, <DisassemblerInsn "mov" for 0x402e6d>, <DisassemblerInsn "mov" for 0x402e73>, <DisassemblerInsn "mov" for 0x402e7a>, <DisassemblerInsn "cmp" for 0x402e7f>, <DisassemblerInsn "je" for 0x402e83>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027ff>, <DisassemblerInsn "mov" for 0x402807>, <DisassemblerInsn "lea" for 0x40280c>, <DisassemblerInsn "mov" for 0x402813>, <DisassemblerInsn "call" for 0x402815>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402553>, <DisassemblerInsn "mov" for 0x402556>, <DisassemblerInsn "jl" for 0x40255d>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c04>, <DisassemblerInsn "mov" for 0x402c0c>, <DisassemblerInsn "mov" for 0x402c0f>, <DisassemblerInsn "xor" for 0x402c13>, <DisassemblerInsn "mov" for 0x402c15>, <DisassemblerInsn "mov" for 0x402c1a>, <DisassemblerInsn "jmp" for 0x402c1e>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d14>, <DisassemblerInsn "mov" for 0x402d19>, <DisassemblerInsn "add" for 0x402d1e>, <DisassemblerInsn "mov" for 0x402d22>, <DisassemblerInsn "cmp" for 0x402d27>, <DisassemblerInsn "je" for 0x402d2a>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e31>, <DisassemblerInsn "mov" for 0x402e36>, <DisassemblerInsn "call" for 0x402e3e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024aa>, <DisassemblerInsn "cmp" for 0x4024b2>, <DisassemblerInsn "jne" for 0x4024b6>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e40>, <DisassemblerInsn "mov" for 0x402e43>, <DisassemblerInsn "mov" for 0x402e45>, <DisassemblerInsn "mov" for 0x402e4c>, <DisassemblerInsn "jl" for 0x402e53>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a6c>, <DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "movzx" for 0x402a92>, <DisassemblerInsn "mov" for 0x402a99>, <DisassemblerInsn "cmp" for 0x402aa0>, <DisassemblerInsn "jle" for 0x402aa6>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d49>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "jmp" for 0x402d55>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cd4>, <DisassemblerInsn "mov" for 0x402cdc>, <DisassemblerInsn "lea" for 0x402ce1>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "call" for 0x402cea>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<lea~~rdi, [rip + 0x418c]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x4027ff>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x12b]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x4027a5>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x402e59>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jne~~0x402981>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x4029c4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402434>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x158], rax>', '<cmp~~rax, 0>', '<je~~0x402529>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500060>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x402cd4>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402917>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<je~~0x402715>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~esi, dword ptr [rsp + 0x100]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x402c20>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x402d5a>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x134]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x12c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x12c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402728>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x402574>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x402eb5>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1bc]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x402c83>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402ee2>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x41a1]>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0>', '<je~~0x4023a2>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x39e1]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x402ba9>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x402e59>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x402c83>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x402f38>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<je~~0x40264a>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x40286f>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x40286f>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x402e59>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x402e59>']}, {'block_Idx': 130, 'blockInsts': ['<jmp~~0x402cf1>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x402de5>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b24]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x402ba9>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jmp~~0x4027a5>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402728>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3bf2]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x402981>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x402bd5>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x402a6c>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<cmp~~eax, 0>', '<jle~~0x402565>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x419b]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x402bd5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1c0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x402de5>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4029f0>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x150], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402ee2>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<je~~0x40284c>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x402e59>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x402e59>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40284c>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x402f38>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a67]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x367f]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x130], eax>', '<je~~0x40274d>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402e59>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x402d0f>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x4170]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x4167], eax>', '<mov~~eax, dword ptr [rip + 0x4161]>', '<cmp~~eax, 1>', '<je~~0x4023e8>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x40264a>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x154], eax>', '<ja~~0x402ee2>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x1a8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<cmp~~eax, -1>', '<je~~0x402917>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x402d2e>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jmp~~0x402f38>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x402b84>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402adb>']}, {'block_Idx': 114, 'blockInsts': ['<jmp~~0x402b60>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x402dd7>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x402c57>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x19f], al>', '<test~~al, 1>', '<jne~~0x402360>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x402c57>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x402d5a>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000d0>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x402de5>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<lea~~rax, [rsp + 0x1c0]>', '<mov~~qword ptr [rsp + 0x1c0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<ja~~0x402f38>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x12b], al>', '<test~~al, 1>', '<jne~~0x402715>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x402e59>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3950]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x402574>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x4029c4>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x402d2e>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x38fe]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x402b00>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x36ae]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x36a5], eax>', '<mov~~rax, qword ptr [rip + 0x368e]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x402e98>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3d91]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402ee2>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x402c3b>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x402d5a>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~rax>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x402529>']}, {'block_Idx': 136, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402ee2>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402adb>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402ee2>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x398c]>', '<mov~~al, 0>', '<call~~0x500050>']}], 'cfg_edge_info': [(64, 69), (50, 52), (42, 48), (44, 45), (31, 29), (103, 109), (74, 73), (97, 102), (131, 134), (13, 17), (79, 81), (81, 87), (82, 86), (20, 22), (87, 91), (125, 130), (128, 92), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (86, 95), (104, 119), (72, 77), (126, 112), (98, 105), (48, 31), (99, 113), (17, 16), (46, 52), (89, 93), (96, 101), (110, 118), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (91, 86), (122, 128), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (64, 68), (7, 135), (28, 2), (123, 102), (75, 62), (112, 120), (92, 96), (34, 39), (13, 16), (15, 13), (125, 102), (136, 13), (93, 97), (54, 60), (55, 58), (88, 92), (82, 85), (29, 33), (121, 107), (95, 33), (108, 122), (23, 26), (103, 110), (132, 125), (97, 103), (11, 18), (42, 33), (79, 82), (120, 126), (58, 62), (112, 97), (20, 23), (51, 56), (4, 6), (60, 13), (78, 83), (85, 88), (45, 52), (100, 107), (110, 117), (129, 33), (94, 100), (73, 77), (63, 67), (6, 8), (35, 41), (67, 76), (43, 54), (87, 33), (130, 132), (89, 94), (35, 13), (62, 61), (127, 96), (107, 93), (88, 89), (56, 63), (135, 2), (92, 13), (77, 79), (75, 61), (107, 114), (119, 33), (96, 13), (8, 10), (1, 4), (16, 2), (27, 32), (102, 108), (109, 123), (3, 4), (18, 20), (98, 104), (69, 68), (136, 33), (61, 64), (21, 28), (118, 125), (22, 29), (39, 45), (134, 33), (19, 21), (102, 92), (34, 40), (101, 136), (83, 33), (114, 121), (93, 98), (41, 27), (117, 129), (126, 104), (18, 13), (58, 61), (32, 42), (51, 55), (105, 112), (26, 35), (72, 78), (121, 99), (44, 50), (135, 6), (132, 117), (0, 1), (91, 85), (76, 66), (40, 46), (122, 127), (45, 51), (63, 66), (94, 99), (128, 131), (41, 47), (113, 33), (33, 43), (4, 7), (52, 56), (127, 13), (40, 39), (10, 13), (9, 15), (68, 73), (85, 89), (6, 9)], 'cdg_edge_info': [(64, 69), (55, 66), (89, 13), (42, 48), (44, 45), (55, 75), (82, 93), (27, 13), (98, 119), (93, 13), (20, 29), (82, 102), (8, 18), (91, 89), (103, 109), (63, 61), (13, 17), (79, 81), (107, 97), (88, 93), (61, 54), (126, 119), (73, 83), (88, 102), (82, 86), (98, 112), (82, 95), (20, 22), (87, 91), (128, 92), (29, 34), (77, 83), (8, 11), (23, 27), (39, 44), (29, 43), (103, 102), (40, 52), (29, 61), (72, 77), (126, 112), (42, 43), (110, 125), (98, 105), (82, 33), (82, 97), (125, 132), (136, 43), (85, 13), (40, 45), (23, 29), (72, 43), (91, 93), (29, 45), (29, 54), (29, 63), (73, 60), (110, 54), (55, 63), (96, 101), (63, 13), (88, 97), (110, 118), (98, 43), (73, 78), (42, 54), (77, 78), (69, 74), (0, 2), (91, 86), (51, 13), (23, 31), (122, 128), (87, 43), (68, 72), (72, 54), (1, 3), (29, 75), (61, 33), (29, 56), (42, 29), (126, 43), (91, 43), (55, 56), (79, 87), (64, 13), (16, 28), (110, 129), (112, 102), (51, 61), (75, 62), (128, 43), (92, 96), (13, 16), (87, 54), (42, 31), (125, 102), (27, 42), (16, 21), (88, 92), (91, 54), (34, 66), (82, 85), (34, 75), (121, 43), (132, 43), (121, 107), (29, 33), (23, 26), (103, 110), (23, 35), (132, 125), (97, 103), (110, 33), (82, 60), (42, 33), (91, 102), (79, 82), (110, 60), (94, 43), (94, 107), (112, 97), (20, 23), (121, 54), (72, 33), (132, 54), (13, 2), (136, 54), (72, 60), (91, 95), (45, 52), (85, 88), (39, 66), (110, 117), (94, 100), (34, 61), (39, 75), (73, 77), (63, 76), (63, 67), (82, 89), (94, 54), (102, 122), (61, 60), (35, 41), (69, 73), (98, 54), (107, 121), (87, 33), (73, 43), (132, 129), (112, 126), (0, 4), (89, 94), (0, 13), (91, 33), (91, 97), (127, 96), (107, 93), (77, 43), (88, 89), (39, 13), (34, 63), (128, 134), (91, 60), (126, 54), (135, 2), (72, 83), (77, 79), (121, 113), (73, 54), (27, 32), (128, 54), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (121, 33), (35, 27), (94, 113), (132, 33), (18, 20), (69, 68), (98, 104), (61, 64), (135, 13), (34, 13), (42, 60), (132, 60), (136, 33), (121, 60), (34, 40), (102, 92), (136, 60), (94, 33), (93, 98), (39, 63), (126, 104), (98, 33), (97, 13), (35, 29), (72, 78), (121, 99), (51, 55), (94, 60), (44, 50), (132, 117), (98, 60), (82, 43), (0, 1), (96, 136), (91, 85), (40, 46), (76, 66), (110, 43), (39, 56), (122, 127), (76, 75), (45, 51), (126, 33), (94, 99), (128, 131), (87, 60), (35, 31), (107, 102), (41, 47), (4, 7), (126, 60), (44, 52), (4, 135), (73, 33), (61, 68), (128, 33), (40, 39), (29, 39), (82, 54), (77, 33), (128, 60), (68, 73), (29, 66), (77, 60), (61, 43)], 'ddg_edge_info': [(26, 21), (7, 17), (66, 103), (67, 68), (101, 33), (67, 77), (8, 18), (11, 23), (50, 91), (62, 74), (81, 87), (81, 96), (61, 127), (81, 105), (31, 86), (62, 101), (103, 102), (66, 62), (62, 110), (31, 104), (66, 89), (26, 16), (72, 132), (126, 112), (7, 21), (99, 113), (0, 9), (62, 69), (39, 76), (62, 78), (81, 91), (31, 72), (0, 103), (81, 100), (31, 81), (62, 96), (31, 99), (122, 128), (31, 108), (26, 2), (66, 75), (55, 56), (7, 16), (131, 33), (62, 64), (136, 13), (54, 60), (61, 108), (62, 73), (81, 86), (31, 67), (91, 127), (62, 91), (31, 85), (67, 17), (31, 94), (66, 61), (31, 103), (7, 2), (7, 11), (64, 127), (3, 126), (60, 13), (50, 67), (108, 17), (0, 75), (62, 68), (31, 62), (94, 100), (62, 77), (39, 75), (73, 77), (0, 102), (3, 9), (31, 89), (43, 54), (67, 21), (101, 13), (3, 121), (135, 2), (104, 33), (108, 21), (0, 79), (102, 108), (31, 66), (66, 33), (32, 31), (109, 13), (31, 75), (3, 4), (67, 16), (134, 33), (3, 98), (117, 129), (81, 17), (97, 132), (8, 60), (50, 75), (0, 56), (31, 34), (91, 85), (108, 16), (27, 91), (0, 74), (31, 52), (31, 61), (67, 2), (108, 128), (47, 32), (9, 15), (109, 102), (68, 73), (67, 105), (81, 21), (50, 52), (62, 17), (67, 132), (54, 13), (98, 110), (0, 51), (108, 2), (8, 64), (31, 29), (91, 89), (39, 51), (0, 69), (131, 134), (31, 56), (13, 17), (56, 67), (87, 91), (66, 117), (47, 27), (86, 95), (66, 126), (67, 100), (67, 109), (21, 2), (81, 16), (67, 127), (62, 21), (98, 105), (54, 17), (0, 46), (0, 55), (31, 33), (0, 64), (0, 73), (91, 93), (31, 51), (94, 98), (99, 33), (66, 112), (108, 127), (66, 121), (67, 86), (109, 101), (68, 72), (81, 2), (67, 104), (61, 33), (79, 87), (62, 16), (11, 32), (0, 41), (54, 21), (0, 50), (8, 63), (0, 68), (66, 13), (13, 16), (81, 132), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (3, 69), (67, 72), (108, 122), (66, 107), (67, 81), (109, 96), (66, 125), (8, 13), (67, 99), (67, 108), (62, 2), (1, 135), (42, 33), (11, 18), (0, 18), (0, 27), (11, 27), (79, 91), (54, 16), (20, 23), (33, 60), (81, 109), (62, 105), (81, 127), (45, 52), (31, 117), (73, 132), (129, 33), (62, 132), (31, 126), (66, 93), (66, 102), (67, 76), (26, 47), (107, 121), (67, 85), (67, 94), (89, 94), (0, 4), (67, 103), (11, 13), (0, 13), (11, 22), (8, 35), (54, 2), (11, 31), (0, 31), (0, 40), (69, 121), (44, 55), (81, 104), (62, 100), (96, 13), (62, 109), (16, 2), (31, 112), (64, 60), (66, 79), (62, 127), (31, 121), (66, 88), (66, 97), (67, 62), (67, 89), (0, 8), (11, 17), (0, 17), (83, 33), (11, 26), (31, 13), (62, 86), (44, 50), (81, 99), (81, 108), (62, 104), (22, 31), (81, 117), (31, 98), (122, 127), (66, 74), (31, 107), (31, 125), (66, 101), (67, 66), (113, 33), (67, 75), (0, 3), (11, 21), (0, 21), (62, 72), (81, 85), (62, 81), (81, 94), (81, 103), (3, 13), (62, 99), (81, 112), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (66, 78), (72, 121), (101, 17), (66, 96), (67, 61), (126, 110), (26, 32), (0, 7), (11, 16), (0, 16), (110, 125), (81, 89), (0, 101), (62, 85), (81, 98), (31, 79), (27, 127), (3, 8), (109, 17), (62, 94), (31, 88), (3, 17), (62, 103), (94, 126), (86, 33), (31, 97), (66, 64), (66, 73), (101, 21), (46, 91), (11, 2), (0, 2), (77, 87), (69, 110), (8, 91), (7, 135), (0, 96), (81, 93), (31, 74), (62, 89), (0, 105), (109, 21), (8, 127), (3, 21), (31, 101), (66, 68), (67, 33), (78, 33), (31, 110), (66, 77), (15, 13), (101, 16), (26, 13), (7, 9), (121, 107), (29, 33), (132, 125), (40, 51), (7, 8), (0, 91), (31, 69), (0, 100), (109, 16), (31, 78), (3, 7), (51, 56), (3, 16), (31, 96), (101, 2), (47, 31), (3, 110), (39, 50), (91, 88), (31, 46), (62, 61), (0, 77), (91, 97), (31, 55), (109, 2), (31, 64), (32, 29), (31, 73), (3, 2), (3, 11), (119, 33), (72, 110), (108, 131), (46, 67), (67, 117), (67, 126), (81, 33), (21, 28), (69, 77), (8, 76), (0, 72), (31, 50), (101, 136), (0, 81), (66, 17), (39, 63), (31, 68), (32, 33), (31, 77), (32, 42), (64, 74), (105, 112), (35, 47), (9, 13), (67, 112), (109, 127), (67, 121), (89, 121), (109, 136), (69, 72), (62, 33), (127, 13), (0, 67), (23, 32), (31, 45), (91, 96), (66, 21), (39, 67), (94, 110), (72, 73), (64, 69), (67, 13), (3, 77), (17, 21), (9, 17), (67, 98), (46, 75), (67, 107), (109, 122), (67, 125), (0, 44), (20, 22), (0, 62), (108, 13), (31, 40), (66, 16), (104, 119), (81, 126), (13, 28), (72, 77), (64, 91), (66, 110), (3, 72), (46, 52), (17, 16), (67, 93), (9, 21), (109, 108), (67, 102), (27, 29), (0, 39), (31, 17), (20, 26), (66, 2), (91, 86), (31, 44), (81, 121), (62, 117), (34, 46), (62, 126), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (67, 79), (26, 41), (9, 16), (67, 88), (66, 132), (3, 94), (67, 97), (97, 110), (8, 29), (81, 13), (125, 132), (0, 34), (0, 43), (29, 79), (31, 21), (0, 52), (4, 13), (0, 61), (95, 33), (31, 39), (81, 107), (23, 35), (44, 67), (62, 112), (81, 125), (1, 16), (62, 121), (34, 50), (127, 101), (64, 72), (66, 91), (66, 100), (26, 27), (93, 126), (66, 109), (67, 74), (9, 2), (78, 83), (66, 127), (67, 101), (0, 11), (67, 110), (0, 20), (11, 20), (100, 107), (62, 13), (8, 42), (31, 16), (81, 102), (87, 33), (62, 98), (112, 126), (62, 107), (35, 13), (34, 45), (62, 125), (66, 86), (56, 63), (108, 101), (66, 104), (26, 31), (67, 69), (67, 78), (67, 96), (18, 54), (31, 2), (81, 88), (77, 136), (69, 132), (81, 97), (136, 33), (61, 128), (62, 93), (62, 102), (22, 29), (31, 105), (66, 72), (93, 98), (66, 81), (108, 96), (26, 17), (31, 132), (66, 99), (67, 64), (7, 13), (20, 132), (18, 13), (66, 108), (67, 73), (26, 35), (67, 91), (0, 1), (40, 46), (0, 28), (77, 122), (41, 47), (33, 43), (62, 79), (52, 56), (4, 7), (62, 88), (81, 101), (117, 33), (62, 97), (81, 110), (31, 91), (31, 100), (31, 109), (103, 125), (66, 85), (31, 127), (66, 94)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O3/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O3/utils.s---avcodec_open2---before
function id: 17
function flag: True
There are 611 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O3/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O3/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 968 nodes and 1721 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 611 instructions in binary file.
[4206672, 4206727, 4206740]
The execution time of patched subCFG information extraction via angr: 0:00:02.243833
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030dc>, <DisassemblerInsn "mov" for 0x4030e3>, <DisassemblerInsn "mov" for 0x4030ea>, <DisassemblerInsn "movzx" for 0x4030f2>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "cmp" for 0x403100>, <DisassemblerInsn "jle" for 0x403106>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "cmp" for 0x403012>, <DisassemblerInsn "sete" for 0x403015>, <DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "sete" for 0x40301b>, <DisassemblerInsn "or" for 0x40301e>, <DisassemblerInsn "test" for 0x403020>, <DisassemblerInsn "jne" for 0x403022>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "mov" for 0x403067>, <DisassemblerInsn "cmp" for 0x40306e>, <DisassemblerInsn "mov" for 0x403076>, <DisassemblerInsn "mov" for 0x40307e>, <DisassemblerInsn "jne" for 0x403085>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403542>, <DisassemblerInsn "mov" for 0x403549>, <DisassemblerInsn "lea" for 0x40354c>, <DisassemblerInsn "call" for 0x403554>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030ab>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030ba>, <DisassemblerInsn "mov" for 0x4030bd>, <DisassemblerInsn "mov" for 0x4030c5>, <DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030dc>, <DisassemblerInsn "mov" for 0x4030e3>, <DisassemblerInsn "mov" for 0x4030ea>, <DisassemblerInsn "movzx" for 0x4030f2>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "cmp" for 0x403100>, <DisassemblerInsn "jle" for 0x403106>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403087>, <DisassemblerInsn "call" for 0x40308f>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403094>, <DisassemblerInsn "cmp" for 0x40309b>, <DisassemblerInsn "mov" for 0x40309e>, <DisassemblerInsn "jl" for 0x4030a5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x40313b>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x403050>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x4030cc>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x40313b>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x403542>']}], 'cfg_edge_info': [(64, 66), (66, 68), (68, 26), (68, 71), (62, 64), (64, 67)]}]}
{'avcodec_open2': [4206672, 4206727, 4206740]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/O3/utils.o---before
The extraction of function: avcodec_open2
[4206672, 4206727, 4206740]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 137 nodes and 221 edges in CFGEmulated.
It has 137 nodes and 346 edges in CDG.
It has 2164 nodes and 2876 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4206672, 4206727, 4206740]
{4206595, 4206085, 4205576, 4207113, 4207627, 4205084, 4206628, 4207140, 4207654, 4205620, 4207157, 4207671, 4206136, 4205111, 4206141, 4206655, 4207685, 4205128, 4205646, 4206672, 4207184, 4206170, 4206175, 4207200, 4207725, 4206202, 4207232, 4206727, 4207761, 4206740, 4205204, 4207259, 4205214, 4207776, 4205738, 4206763, 4207287, 4207801, 4206267, 4206796, 4206287, 4207314, 4205272, 4205792, 4207331, 4207845, 4207864, 4207358, 4206335, 4205830, 4206856, 4205322, 4207893, 4207384, 4205336, 4207906, 4205352, 4206890, 4207410, 4207412, 4206907, 4206398, 4204864, 4207938, 4206922, 4207441, 4206418, 4205396, 4207961, 4206944, 4207981, 4207471, 4205425, 4205941, 4206455, 4207994, 4206974, 4205960, 4205449, 4204940, 4207502, 4206996, 4208024, 4205467, 4204966, 4207529, 4205997, 4206513, 4205491, 4207546, 4207040, 4204992, 4205507, 4205509, 4207572, 4205524, 4205013, 4206561, 4206049, 4207076, 4205035, 4207596, 4205553, 4207611}
[73, 8, 46, 83, 128, 66, 92, 135, 29, 132, 17, 89, 129, 1, 77, 99, 3, 136, 28, 101, 54, 0, 108, 39, 85, 19, 134, 35, 10, 112, 118, 62, 110, 11, 23, 87, 97, 51, 9, 69, 125, 50, 56, 26, 45, 94, 96, 109, 98, 64, 79, 102, 88, 91, 127, 43, 120, 58, 16, 47, 103, 40, 67, 114, 104, 34, 22, 75, 27, 68, 113, 13, 119, 74, 6, 105, 33, 41, 60, 52, 2, 131, 7, 55, 15, 32, 130, 82, 4, 107, 78, 86, 123, 122, 44, 93, 72, 100, 117, 121, 18, 63, 95, 81, 61, 31, 48, 76, 21, 20, 126, 42]
The execution time of patched slicing information extraction via angr: 0:00:25.120572
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fe1>, <DisassemblerInsn "mov" for 0x402fe9>, <DisassemblerInsn "mov" for 0x402ff0>, <DisassemblerInsn "mov" for 0x402ff7>, <DisassemblerInsn "cmp" for 0x402ffe>, <DisassemblerInsn "jne" for 0x403001>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a48>, <DisassemblerInsn "mov" for 0x402a50>, <DisassemblerInsn "mov" for 0x402a58>, <DisassemblerInsn "add" for 0x402a5b>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "cmp" for 0x402a6a>, <DisassemblerInsn "sete" for 0x402a72>, <DisassemblerInsn "cmp" for 0x402a75>, <DisassemblerInsn "setne" for 0x402a79>, <DisassemblerInsn "and" for 0x402a7c>, <DisassemblerInsn "mov" for 0x402a7e>, <DisassemblerInsn "test" for 0x402a83>, <DisassemblerInsn "mov" for 0x402a86>, <DisassemblerInsn "jne" for 0x402a8d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c4e>, <DisassemblerInsn "mov" for 0x402c55>, <DisassemblerInsn "mov" for 0x402c5d>, <DisassemblerInsn "xor" for 0x402c64>, <DisassemblerInsn "sub" for 0x402c67>, <DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "mov" for 0x402c70>, <DisassemblerInsn "sar" for 0x402c77>, <DisassemblerInsn "mov" for 0x402c7a>, <DisassemblerInsn "xor" for 0x402c81>, <DisassemblerInsn "sub" for 0x402c83>, <DisassemblerInsn "mov" for 0x402c86>, <DisassemblerInsn "xor" for 0x402c89>, <DisassemblerInsn "sub" for 0x402c8b>, <DisassemblerInsn "sar" for 0x402c8d>, <DisassemblerInsn "mov" for 0x402c8f>, <DisassemblerInsn "xor" for 0x402c97>, <DisassemblerInsn "sub" for 0x402c99>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "mov" for 0x402c9e>, <DisassemblerInsn "jmp" for 0x402ca5>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40303f>, <DisassemblerInsn "mov" for 0x403044>, <DisassemblerInsn "jmp" for 0x40304b>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033fb>, <DisassemblerInsn "mov" for 0x4033ff>, <DisassemblerInsn "cmp" for 0x403407>, <DisassemblerInsn "je" for 0x403409>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e5f>, <DisassemblerInsn "mov" for 0x402e67>, <DisassemblerInsn "lea" for 0x402e6c>, <DisassemblerInsn "mov" for 0x402e73>, <DisassemblerInsn "call" for 0x402e75>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403445>, <DisassemblerInsn "mov" for 0x40344c>, <DisassemblerInsn "mov" for 0x403454>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345b>, <DisassemblerInsn "cmp" for 0x403460>, <DisassemblerInsn "mov" for 0x403464>, <DisassemblerInsn "je" for 0x40346b>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "mov" for 0x4029ed>, <DisassemblerInsn "cmp" for 0x4029f2>, <DisassemblerInsn "mov" for 0x4029f5>, <DisassemblerInsn "jne" for 0x4029fc>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bf1>, <DisassemblerInsn "cmp" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402bfb>, <DisassemblerInsn "jl" for 0x402c02>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403351>, <DisassemblerInsn "mov" for 0x403356>, <DisassemblerInsn "mov" for 0x40335b>, <DisassemblerInsn "cmp" for 0x40335f>, <DisassemblerInsn "mov" for 0x403363>, <DisassemblerInsn "mov" for 0x403368>, <DisassemblerInsn "je" for 0x40336d>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034e5>, <DisassemblerInsn "lea" for 0x4034ea>, <DisassemblerInsn "mov" for 0x4034f1>, <DisassemblerInsn "call" for 0x4034f6>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403160>, <DisassemblerInsn "mov" for 0x403168>, <DisassemblerInsn "mov" for 0x40316c>, <DisassemblerInsn "cmp" for 0x403174>, <DisassemblerInsn "je" for 0x403178>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033a9>, <DisassemblerInsn "mov" for 0x4033ae>, <DisassemblerInsn "jmp" for 0x4033b5>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40298c>, <DisassemblerInsn "cmp" for 0x402994>, <DisassemblerInsn "sete" for 0x402998>, <DisassemblerInsn "mov" for 0x40299b>, <DisassemblerInsn "test" for 0x4029a2>, <DisassemblerInsn "jne" for 0x4029a4>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403003>, <DisassemblerInsn "mov" for 0x40300a>, <DisassemblerInsn "cmp" for 0x403012>, <DisassemblerInsn "sete" for 0x403015>, <DisassemblerInsn "cmp" for 0x403018>, <DisassemblerInsn "sete" for 0x40301b>, <DisassemblerInsn "or" for 0x40301e>, <DisassemblerInsn "test" for 0x403020>, <DisassemblerInsn "jne" for 0x403022>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403209>, <DisassemblerInsn "mov" for 0x403211>, <DisassemblerInsn "lea" for 0x403216>, <DisassemblerInsn "mov" for 0x40321d>, <DisassemblerInsn "call" for 0x40321f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029a6>, <DisassemblerInsn "mov" for 0x4029ae>, <DisassemblerInsn "lea" for 0x4029b1>, <DisassemblerInsn "xor" for 0x4029b9>, <DisassemblerInsn "call" for 0x4029bb>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4034a0>, <DisassemblerInsn "mov" for 0x4034a3>, <DisassemblerInsn "mov" for 0x4034a5>, <DisassemblerInsn "mov" for 0x4034ac>, <DisassemblerInsn "jl" for 0x4034b3>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403522>, <DisassemblerInsn "mov" for 0x40352a>, <DisassemblerInsn "mov" for 0x40352e>, <DisassemblerInsn "mov" for 0x403536>, <DisassemblerInsn "mov" for 0x403539>, <DisassemblerInsn "jmp" for 0x403540>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403491>, <DisassemblerInsn "mov" for 0x403496>, <DisassemblerInsn "call" for 0x40349e>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40356d>, <DisassemblerInsn "call" for 0x403575>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x402940>, <DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "mov" for 0x40294f>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "lea" for 0x40295f>, <DisassemblerInsn "mov" for 0x402967>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "cmp" for 0x402978>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "ja" for 0x402986>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033d4>, <DisassemblerInsn "mov" for 0x4033d9>, <DisassemblerInsn "mov" for 0x4033e1>, <DisassemblerInsn "mov" for 0x4033e3>, <DisassemblerInsn "call" for 0x4033e7>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402caa>, <DisassemblerInsn "mov" for 0x402cb2>, <DisassemblerInsn "add" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cb9>, <DisassemblerInsn "mov" for 0x402cc1>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "cmp" for 0x402ccb>, <DisassemblerInsn "sete" for 0x402cce>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "test" for 0x402cd8>, <DisassemblerInsn "jne" for 0x402cda>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40313b>, <DisassemblerInsn "cmp" for 0x403143>, <DisassemblerInsn "jne" for 0x403148>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403513>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403426>, <DisassemblerInsn "mov" for 0x40342b>, <DisassemblerInsn "jmp" for 0x403432>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b28>, <DisassemblerInsn "mov" for 0x402b2b>, <DisassemblerInsn "mov" for 0x402b33>, <DisassemblerInsn "mov" for 0x402b3b>, <DisassemblerInsn "mov" for 0x402b3e>, <DisassemblerInsn "cmp" for 0x402b43>, <DisassemblerInsn "mov" for 0x402b47>, <DisassemblerInsn "je" for 0x402b4e>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a8f>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40329b>, <DisassemblerInsn "mov" for 0x40329f>, <DisassemblerInsn "mov" for 0x4032a4>, <DisassemblerInsn "add" for 0x4032a8>, <DisassemblerInsn "mov" for 0x4032ac>, <DisassemblerInsn "cmp" for 0x4032b1>, <DisassemblerInsn "je" for 0x4032b3>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403332>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ebb>, <DisassemblerInsn "add" for 0x402ec3>, <DisassemblerInsn "call" for 0x402eca>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403318>, <DisassemblerInsn "mov" for 0x40331d>, <DisassemblerInsn "xor" for 0x403320>, <DisassemblerInsn "cmp" for 0x403322>, <DisassemblerInsn "mov" for 0x403326>, <DisassemblerInsn "mov" for 0x40332b>, <DisassemblerInsn "je" for 0x403330>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a94>, <DisassemblerInsn "call" for 0x402a99>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b0a>, <DisassemblerInsn "cmp" for 0x402b12>, <DisassemblerInsn "jne" for 0x402b16>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403094>, <DisassemblerInsn "cmp" for 0x40309b>, <DisassemblerInsn "mov" for 0x40309e>, <DisassemblerInsn "jl" for 0x4030a5>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032e3>, <DisassemblerInsn "mov" for 0x4032eb>, <DisassemblerInsn "mov" for 0x4032ef>, <DisassemblerInsn "cmp" for 0x4032f4>, <DisassemblerInsn "je" for 0x4032f8>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dad>, <DisassemblerInsn "mov" for 0x402db4>, <DisassemblerInsn "mov" for 0x402dbc>, <DisassemblerInsn "test" for 0x402dc2>, <DisassemblerInsn "setne" for 0x402dc4>, <DisassemblerInsn "xor" for 0x402dc7>, <DisassemblerInsn "or" for 0x402dca>, <DisassemblerInsn "xor" for 0x402dcc>, <DisassemblerInsn "test" for 0x402dce>, <DisassemblerInsn "mov" for 0x402dd1>, <DisassemblerInsn "mov" for 0x402dd8>, <DisassemblerInsn "jne" for 0x402ddf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a1c>, <DisassemblerInsn "mov" for 0x402a24>, <DisassemblerInsn "lea" for 0x402a29>, <DisassemblerInsn "mov" for 0x402a30>, <DisassemblerInsn "call" for 0x402a32>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f3e>, <DisassemblerInsn "mov" for 0x402f45>, <DisassemblerInsn "cmp" for 0x402f4d>, <DisassemblerInsn "je" for 0x402f50>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40336f>, <DisassemblerInsn "mov" for 0x403374>, <DisassemblerInsn "mov" for 0x403379>, <DisassemblerInsn "add" for 0x40337e>, <DisassemblerInsn "mov" for 0x403382>, <DisassemblerInsn "cmp" for 0x403387>, <DisassemblerInsn "je" for 0x40338a>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d06>, <DisassemblerInsn "mov" for 0x402d0d>, <DisassemblerInsn "mov" for 0x402d14>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "mov" for 0x402d2c>, <DisassemblerInsn "mov" for 0x402d2e>, <DisassemblerInsn "xor" for 0x402d34>, <DisassemblerInsn "sub" for 0x402d37>, <DisassemblerInsn "mov" for 0x402d3a>, <DisassemblerInsn "mov" for 0x402d40>, <DisassemblerInsn "sar" for 0x402d47>, <DisassemblerInsn "mov" for 0x402d4a>, <DisassemblerInsn "xor" for 0x402d51>, <DisassemblerInsn "sub" for 0x402d53>, <DisassemblerInsn "mov" for 0x402d56>, <DisassemblerInsn "xor" for 0x402d58>, <DisassemblerInsn "sub" for 0x402d5a>, <DisassemblerInsn "sar" for 0x402d5c>, <DisassemblerInsn "mov" for 0x402d5e>, <DisassemblerInsn "xor" for 0x402d66>, <DisassemblerInsn "sub" for 0x402d68>, <DisassemblerInsn "mov" for 0x402d6a>, <DisassemblerInsn "mov" for 0x402d6c>, <DisassemblerInsn "jmp" for 0x402d73>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e05>, <DisassemblerInsn "mov" for 0x402e0d>, <DisassemblerInsn "mov" for 0x402e15>, <DisassemblerInsn "mov" for 0x402e1c>, <DisassemblerInsn "add" for 0x402e23>, <DisassemblerInsn "mov" for 0x402e29>, <DisassemblerInsn "xor" for 0x402e31>, <DisassemblerInsn "call" for 0x402e33>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b18>, <DisassemblerInsn "mov" for 0x402b1f>, <DisassemblerInsn "mov" for 0x402b21>, <DisassemblerInsn "call" for 0x402b23>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d75>, <DisassemblerInsn "cmp" for 0x402d7c>, <DisassemblerInsn "mov" for 0x402d7f>, <DisassemblerInsn "je" for 0x402d86>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40317e>, <DisassemblerInsn "mov" for 0x403186>, <DisassemblerInsn "mov" for 0x403188>, <DisassemblerInsn "cmp" for 0x40318f>, <DisassemblerInsn "je" for 0x403192>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40346d>, <DisassemblerInsn "mov" for 0x403474>, <DisassemblerInsn "mov" for 0x40347c>, <DisassemblerInsn "and" for 0x403482>, <DisassemblerInsn "cmp" for 0x403485>, <DisassemblerInsn "mov" for 0x403488>, <DisassemblerInsn "jne" for 0x40348f>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403334>, <DisassemblerInsn "mov" for 0x40333c>, <DisassemblerInsn "lea" for 0x403341>, <DisassemblerInsn "mov" for 0x403348>, <DisassemblerInsn "call" for 0x40334a>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403250>, <DisassemblerInsn "mov" for 0x403255>, <DisassemblerInsn "mov" for 0x403257>, <DisassemblerInsn "cmp" for 0x40325b>, <DisassemblerInsn "je" for 0x40325e>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eff>, <DisassemblerInsn "mov" for 0x402f07>, <DisassemblerInsn "mov" for 0x402f0f>, <DisassemblerInsn "mov" for 0x402f17>, <DisassemblerInsn "mov" for 0x402f1a>, <DisassemblerInsn "add" for 0x402f1d>, <DisassemblerInsn "mov" for 0x402f24>, <DisassemblerInsn "mov" for 0x402f2c>, <DisassemblerInsn "mov" for 0x402f32>, <DisassemblerInsn "cmp" for 0x402f39>, <DisassemblerInsn "je" for 0x402f3c>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403050>, <DisassemblerInsn "mov" for 0x403057>, <DisassemblerInsn "mov" for 0x40305f>, <DisassemblerInsn "mov" for 0x403067>, <DisassemblerInsn "cmp" for 0x40306e>, <DisassemblerInsn "mov" for 0x403076>, <DisassemblerInsn "mov" for 0x40307e>, <DisassemblerInsn "jne" for 0x403085>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033ba>, <DisassemblerInsn "mov" for 0x4033c2>, <DisassemblerInsn "mov" for 0x4033c9>, <DisassemblerInsn "cmp" for 0x4033ce>, <DisassemblerInsn "je" for 0x4033d2>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40314a>, <DisassemblerInsn "cmp" for 0x403152>, <DisassemblerInsn "je" for 0x40315a>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030ab>, <DisassemblerInsn "mov" for 0x4030b2>, <DisassemblerInsn "mov" for 0x4030ba>, <DisassemblerInsn "mov" for 0x4030bd>, <DisassemblerInsn "mov" for 0x4030c5>, <DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030dc>, <DisassemblerInsn "mov" for 0x4030e3>, <DisassemblerInsn "mov" for 0x4030ea>, <DisassemblerInsn "movzx" for 0x4030f2>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "cmp" for 0x403100>, <DisassemblerInsn "jle" for 0x403106>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403437>, <DisassemblerInsn "mov" for 0x40343f>, <DisassemblerInsn "mov" for 0x403443>, <DisassemblerInsn "mov" for 0x403445>, <DisassemblerInsn "mov" for 0x40344c>, <DisassemblerInsn "mov" for 0x403454>, <DisassemblerInsn "mov" for 0x403457>, <DisassemblerInsn "mov" for 0x40345b>, <DisassemblerInsn "cmp" for 0x403460>, <DisassemblerInsn "mov" for 0x403464>, <DisassemblerInsn "je" for 0x40346b>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403559>, <DisassemblerInsn "add" for 0x403561>, <DisassemblerInsn "call" for 0x403568>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4032b5>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402eac>, <DisassemblerInsn "cmp" for 0x402eb4>, <DisassemblerInsn "je" for 0x402eb9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034f8>, <DisassemblerInsn "mov" for 0x4034fc>, <DisassemblerInsn "test" for 0x403503>, <DisassemblerInsn "mov" for 0x403506>, <DisassemblerInsn "jne" for 0x40350d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b71>, <DisassemblerInsn "mov" for 0x402b79>, <DisassemblerInsn "mov" for 0x402b81>, <DisassemblerInsn "call" for 0x402b84>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032fe>, <DisassemblerInsn "mov" for 0x403306>, <DisassemblerInsn "mov" for 0x40330d>, <DisassemblerInsn "cmp" for 0x403312>, <DisassemblerInsn "je" for 0x403316>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c34>, <DisassemblerInsn "mov" for 0x402c3c>, <DisassemblerInsn "mov" for 0x402c42>, <DisassemblerInsn "cmp" for 0x402c49>, <DisassemblerInsn "je" for 0x402c4c>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e3d>, <DisassemblerInsn "mov" for 0x402e45>, <DisassemblerInsn "mov" for 0x402e4d>, <DisassemblerInsn "mov" for 0x402e50>, <DisassemblerInsn "xor" for 0x402e53>, <DisassemblerInsn "call" for 0x402e55>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403207>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032b7>, <DisassemblerInsn "mov" for 0x4032bf>, <DisassemblerInsn "lea" for 0x4032c4>, <DisassemblerInsn "mov" for 0x4032cb>, <DisassemblerInsn "call" for 0x4032cd>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c10>, <DisassemblerInsn "add" for 0x402c13>, <DisassemblerInsn "mov" for 0x402c1a>, <DisassemblerInsn "mov" for 0x402c22>, <DisassemblerInsn "mov" for 0x402c28>, <DisassemblerInsn "cmp" for 0x402c2f>, <DisassemblerInsn "je" for 0x402c32>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bc5>, <DisassemblerInsn "mov" for 0x402bcd>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "lea" for 0x402be4>, <DisassemblerInsn "call" for 0x402bec>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e7a>, <DisassemblerInsn "mov" for 0x402e82>, <DisassemblerInsn "mov" for 0x402e8a>, <DisassemblerInsn "mov" for 0x402e92>, <DisassemblerInsn "mov" for 0x402e98>, <DisassemblerInsn "mov" for 0x402e9e>, <DisassemblerInsn "mov" for 0x402ea5>, <DisassemblerInsn "mov" for 0x402eac>, <DisassemblerInsn "cmp" for 0x402eb4>, <DisassemblerInsn "je" for 0x402eb9>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b89>, <DisassemblerInsn "cmp" for 0x402b91>, <DisassemblerInsn "je" for 0x402b99>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f77>, <DisassemblerInsn "mov" for 0x402f7e>, <DisassemblerInsn "mov" for 0x402f86>, <DisassemblerInsn "add" for 0x402f89>, <DisassemblerInsn "mov" for 0x402f90>, <DisassemblerInsn "mov" for 0x402f98>, <DisassemblerInsn "cmp" for 0x402f9e>, <DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "mov" for 0x402fa8>, <DisassemblerInsn "jne" for 0x402faf>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403224>, <DisassemblerInsn "mov" for 0x403229>, <DisassemblerInsn "jmp" for 0x403230>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034b9>, <DisassemblerInsn "mov" for 0x4034c0>, <DisassemblerInsn "mov" for 0x4034c4>, <DisassemblerInsn "add" for 0x4034ca>, <DisassemblerInsn "mov" for 0x4034cd>, <DisassemblerInsn "mov" for 0x4034d3>, <DisassemblerInsn "mov" for 0x4034da>, <DisassemblerInsn "cmp" for 0x4034df>, <DisassemblerInsn "je" for 0x4034e3>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032d2>, <DisassemblerInsn "mov" for 0x4032d7>, <DisassemblerInsn "jmp" for 0x4032de>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f52>, <DisassemblerInsn "mov" for 0x402f59>, <DisassemblerInsn "mov" for 0x402f61>, <DisassemblerInsn "mov" for 0x402f67>, <DisassemblerInsn "mov" for 0x402f6e>, <DisassemblerInsn "jmp" for 0x402f75>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a02>, <DisassemblerInsn "add" for 0x402a08>, <DisassemblerInsn "mov" for 0x402a0b>, <DisassemblerInsn "mov" for 0x402a11>, <DisassemblerInsn "cmp" for 0x402a17>, <DisassemblerInsn "je" for 0x402a1a>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403260>, <DisassemblerInsn "mov" for 0x403264>, <DisassemblerInsn "mov" for 0x40326c>, <DisassemblerInsn "mov" for 0x40326f>, <DisassemblerInsn "xor" for 0x403273>, <DisassemblerInsn "mov" for 0x403275>, <DisassemblerInsn "mov" for 0x40327a>, <DisassemblerInsn "jmp" for 0x40327e>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403542>, <DisassemblerInsn "mov" for 0x403549>, <DisassemblerInsn "lea" for 0x40354c>, <DisassemblerInsn "call" for 0x403554>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "mov" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b63>, <DisassemblerInsn "cmp" for 0x402b6b>, <DisassemblerInsn "je" for 0x402b6f>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40357a>, <DisassemblerInsn "mov" for 0x403582>, <DisassemblerInsn "mov" for 0x403585>, <DisassemblerInsn "mov" for 0x40358c>, <DisassemblerInsn "jmp" for 0x403593>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d88>, <DisassemblerInsn "mov" for 0x402d90>, <DisassemblerInsn "mov" for 0x402d97>, <DisassemblerInsn "mov" for 0x402d9d>, <DisassemblerInsn "mov" for 0x402da4>, <DisassemblerInsn "jmp" for 0x402dab>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403598>, <DisassemblerInsn "add" for 0x40359f>, <DisassemblerInsn "ret" for 0x4035a6>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40340b>, <DisassemblerInsn "mov" for 0x403413>, <DisassemblerInsn "lea" for 0x403418>, <DisassemblerInsn "mov" for 0x40341f>, <DisassemblerInsn "call" for 0x403421>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "lea" for 0x4029dd>, <DisassemblerInsn "mov" for 0x4029e4>, <DisassemblerInsn "call" for 0x4029e9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402de1>, <DisassemblerInsn "xor" for 0x402de9>, <DisassemblerInsn "cmp" for 0x402deb>, <DisassemblerInsn "mov" for 0x402def>, <DisassemblerInsn "mov" for 0x402df1>, <DisassemblerInsn "mov" for 0x402df8>, <DisassemblerInsn "je" for 0x402dff>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a37>, <DisassemblerInsn "mov" for 0x402a3c>, <DisassemblerInsn "jmp" for 0x402a43>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b9b>, <DisassemblerInsn "mov" for 0x402ba3>, <DisassemblerInsn "lea" for 0x402ba6>, <DisassemblerInsn "call" for 0x402bae>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40338c>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4030cc>, <DisassemblerInsn "mov" for 0x4030d4>, <DisassemblerInsn "mov" for 0x4030dc>, <DisassemblerInsn "mov" for 0x4030e3>, <DisassemblerInsn "mov" for 0x4030ea>, <DisassemblerInsn "movzx" for 0x4030f2>, <DisassemblerInsn "mov" for 0x4030f9>, <DisassemblerInsn "cmp" for 0x403100>, <DisassemblerInsn "jle" for 0x403106>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029c0>, <DisassemblerInsn "mov" for 0x4029c7>, <DisassemblerInsn "cmp" for 0x4029cf>, <DisassemblerInsn "je" for 0x4029d3>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031e4>, <DisassemblerInsn "mov" for 0x4031eb>, <DisassemblerInsn "mov" for 0x4031f3>, <DisassemblerInsn "add" for 0x4031fa>, <DisassemblerInsn "mov" for 0x4031fe>, <DisassemblerInsn "cmp" for 0x403203>, <DisassemblerInsn "je" for 0x403205>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403024>, <DisassemblerInsn "mov" for 0x40302c>, <DisassemblerInsn "lea" for 0x403031>, <DisassemblerInsn "mov" for 0x403038>, <DisassemblerInsn "call" for 0x40303a>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403108>, <DisassemblerInsn "mov" for 0x40310f>, <DisassemblerInsn "mov" for 0x403117>, <DisassemblerInsn "lea" for 0x40311c>, <DisassemblerInsn "mov" for 0x403123>, <DisassemblerInsn "call" for 0x403125>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40334f>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033ec>, <DisassemblerInsn "mov" for 0x4033ee>, <DisassemblerInsn "mov" for 0x4033f2>, <DisassemblerInsn "cmp" for 0x4033f6>, <DisassemblerInsn "je" for 0x4033f9>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ce0>, <DisassemblerInsn "mov" for 0x402ce8>, <DisassemblerInsn "add" for 0x402ceb>, <DisassemblerInsn "mov" for 0x402cef>, <DisassemblerInsn "mov" for 0x402cf7>, <DisassemblerInsn "mov" for 0x402cfa>, <DisassemblerInsn "cmp" for 0x402d01>, <DisassemblerInsn "je" for 0x402d04>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403235>, <DisassemblerInsn "mov" for 0x40323d>, <DisassemblerInsn "mov" for 0x403241>, <DisassemblerInsn "cmp" for 0x403246>, <DisassemblerInsn "je" for 0x40324a>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fb1>, <DisassemblerInsn "mov" for 0x402fb9>, <DisassemblerInsn "mov" for 0x402fc1>, <DisassemblerInsn "mov" for 0x402fc9>, <DisassemblerInsn "mov" for 0x402fcc>, <DisassemblerInsn "mov" for 0x402fce>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "mov" for 0x402fd3>, <DisassemblerInsn "mov" for 0x402fda>, <DisassemblerInsn "mov" for 0x402fe1>, <DisassemblerInsn "mov" for 0x402fe9>, <DisassemblerInsn "mov" for 0x402ff0>, <DisassemblerInsn "mov" for 0x402ff7>, <DisassemblerInsn "cmp" for 0x402ffe>, <DisassemblerInsn "jne" for 0x403001>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403194>, <DisassemblerInsn "mov" for 0x40319b>, <DisassemblerInsn "mov" for 0x4031a3>, <DisassemblerInsn "mov" for 0x4031a6>, <DisassemblerInsn "xor" for 0x4031ad>, <DisassemblerInsn "mov" for 0x4031af>, <DisassemblerInsn "mov" for 0x4031b7>, <DisassemblerInsn "jmp" for 0x4031be>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "mov" for 0x403396>, <DisassemblerInsn "lea" for 0x40339b>, <DisassemblerInsn "mov" for 0x4033a2>, <DisassemblerInsn "call" for 0x4033a4>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4031c0>, <DisassemblerInsn "mov" for 0x4031c5>, <DisassemblerInsn "mov" for 0x4031cd>, <DisassemblerInsn "cmp" for 0x4031d0>, <DisassemblerInsn "mov" for 0x4031d3>, <DisassemblerInsn "mov" for 0x4031db>, <DisassemblerInsn "je" for 0x4031e2>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a9e>, <DisassemblerInsn "mov" for 0x402aa1>, <DisassemblerInsn "mov" for 0x402aa9>, <DisassemblerInsn "add" for 0x402aac>, <DisassemblerInsn "mov" for 0x402ab3>, <DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac2>, <DisassemblerInsn "cmp" for 0x402ac7>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "je" for 0x402ad2>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e38>, <DisassemblerInsn "jl" for 0x402e3b>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40312a>, <DisassemblerInsn "mov" for 0x40312f>, <DisassemblerInsn "jmp" for 0x403136>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403087>, <DisassemblerInsn "call" for 0x40308f>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "mov" for 0x402ed7>, <DisassemblerInsn "add" for 0x402eda>, <DisassemblerInsn "mov" for 0x402ede>, <DisassemblerInsn "mov" for 0x402ee6>, <DisassemblerInsn "cmp" for 0x402eeb>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "ja" for 0x402ef9>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdc>, <DisassemblerInsn "lea" for 0x402be4>, <DisassemblerInsn "call" for 0x402bec>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402bc3>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402e5a>, <DisassemblerInsn "jge" for 0x402e5d>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403515>, <DisassemblerInsn "call" for 0x40351d>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ad8>, <DisassemblerInsn "mov" for 0x402ae0>, <DisassemblerInsn "mov" for 0x402ae8>, <DisassemblerInsn "mov" for 0x402aeb>, <DisassemblerInsn "add" for 0x402af2>, <DisassemblerInsn "mov" for 0x402af9>, <DisassemblerInsn "cmp" for 0x402b01>, <DisassemblerInsn "jle" for 0x402b04>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403280>, <DisassemblerInsn "mov" for 0x403285>, <DisassemblerInsn "mov" for 0x40328a>, <DisassemblerInsn "cmp" for 0x40328d>, <DisassemblerInsn "mov" for 0x403290>, <DisassemblerInsn "mov" for 0x403295>, <DisassemblerInsn "je" for 0x403299>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402bb3>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "jl" for 0x402bbd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x403024>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x402a94>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x134]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x12c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x12c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402d88>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x403445>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3f31]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4034b9>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x403598>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x150], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x403542>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x40338e>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x381f]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x403235>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x19f], al>', '<test~~al, 1>', '<jne~~0x4029c0>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x403050>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c07]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1c0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 136, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x403542>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jmp~~0x403598>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~rax>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500060>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<lea~~rax, [rsp + 0x1c0]>', '<mov~~qword ptr [rsp + 0x1c0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<ja~~0x403598>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x12b], al>', '<test~~al, 1>', '<jne~~0x402d75>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x403160>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x403515>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4034b9>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4034b9>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x4032e3>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x40336f>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x40338e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x402b89>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x403542>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x4033ba>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x12b]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x402e05>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x433b]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402f77>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x4033ba>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402d88>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~esi, dword ptr [rsp + 0x100]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x130], eax>', '<je~~0x402dad>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x403209>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x4034b9>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3b2c]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x4032b7>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x1a8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<cmp~~eax, -1>', '<je~~0x402f77>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x4030cc>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x403445>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x403445>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x40313b>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4034b9>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x403280>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402ecf>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x403598>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x403334>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<je~~0x402caa>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 114, 'blockInsts': ['<jmp~~0x4031c0>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3b81]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x402caa>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x402ecf>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x402bd4>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jne~~0x402fe1>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x384e]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x3845], eax>', '<mov~~rax, qword ptr [rip + 0x382e]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4034f8>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x402fe1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x4310]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x4307], eax>', '<mov~~eax, dword ptr [rip + 0x4301]>', '<cmp~~eax, 1>', '<je~~0x402a48>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x40329b>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x158], rax>', '<cmp~~rax, 0>', '<je~~0x402b89>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x4034b9>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jmp~~0x402e05>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1bc]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a9e]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<lea~~rdi, [rip + 0x432c]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<je~~0x402eac>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x4034b9>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 130, 'blockInsts': ['<jmp~~0x403351>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x40313b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x4341]>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0>', '<je~~0x402a02>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x403235>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3d92]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3cc4]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x4033ba>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x403437>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<je~~0x402d75>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x4032e3>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x403024>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x4031e4>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3af0]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x403209>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4034b9>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x402e5f>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x403542>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x154], eax>', '<ja~~0x403542>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x402bd4>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x402eac>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000d0>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<cmp~~eax, 0>', '<jle~~0x402bc5>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4032b7>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x403542>']}], 'cfg_edge_info': [(64, 69), (50, 52), (42, 48), (44, 45), (31, 29), (103, 109), (74, 73), (97, 102), (131, 134), (13, 17), (79, 81), (81, 87), (82, 86), (20, 22), (87, 91), (128, 92), (125, 130), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (86, 95), (104, 119), (72, 77), (126, 112), (98, 105), (48, 31), (99, 113), (46, 52), (17, 16), (89, 93), (96, 101), (110, 118), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (91, 86), (122, 128), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (64, 68), (7, 135), (28, 2), (123, 102), (75, 62), (112, 120), (92, 96), (34, 39), (13, 16), (15, 13), (125, 102), (93, 97), (136, 13), (54, 60), (55, 58), (88, 92), (82, 85), (29, 33), (121, 107), (95, 33), (108, 122), (23, 26), (103, 110), (132, 125), (97, 103), (11, 18), (42, 33), (79, 82), (120, 126), (58, 62), (112, 97), (51, 56), (20, 23), (4, 6), (60, 13), (78, 83), (85, 88), (45, 52), (100, 107), (63, 67), (110, 117), (6, 8), (73, 77), (129, 33), (94, 100), (35, 41), (67, 76), (43, 54), (87, 33), (130, 132), (89, 94), (35, 13), (62, 61), (127, 96), (107, 93), (88, 89), (56, 63), (135, 2), (77, 79), (92, 13), (75, 61), (107, 114), (119, 33), (8, 10), (96, 13), (1, 4), (16, 2), (27, 32), (102, 108), (109, 123), (3, 4), (18, 20), (98, 104), (69, 68), (136, 33), (61, 64), (21, 28), (118, 125), (22, 29), (39, 45), (134, 33), (34, 40), (102, 92), (19, 21), (101, 136), (83, 33), (93, 98), (114, 121), (41, 27), (117, 129), (126, 104), (18, 13), (121, 99), (72, 78), (58, 61), (105, 112), (26, 35), (32, 42), (51, 55), (44, 50), (135, 6), (132, 117), (0, 1), (76, 66), (91, 85), (40, 46), (122, 127), (45, 51), (63, 66), (94, 99), (128, 131), (41, 47), (113, 33), (33, 43), (4, 7), (52, 56), (127, 13), (40, 39), (10, 13), (9, 15), (68, 73), (85, 89), (6, 9)], 'cdg_edge_info': [(64, 69), (55, 66), (42, 48), (44, 45), (89, 13), (55, 75), (82, 93), (98, 119), (82, 102), (20, 29), (27, 13), (93, 13), (103, 109), (8, 18), (91, 89), (63, 61), (13, 17), (79, 81), (107, 97), (88, 93), (61, 54), (126, 119), (73, 83), (88, 102), (82, 86), (98, 112), (82, 95), (20, 22), (87, 91), (128, 92), (29, 34), (77, 83), (8, 11), (39, 44), (103, 102), (29, 43), (23, 27), (40, 52), (29, 61), (72, 77), (42, 43), (126, 112), (110, 125), (98, 105), (82, 33), (82, 97), (125, 132), (136, 43), (85, 13), (40, 45), (23, 29), (72, 43), (91, 93), (29, 45), (29, 54), (29, 63), (73, 60), (110, 54), (110, 118), (55, 63), (63, 13), (73, 78), (98, 43), (96, 101), (88, 97), (42, 54), (77, 78), (0, 2), (69, 74), (91, 86), (51, 13), (23, 31), (122, 128), (1, 3), (68, 72), (72, 54), (87, 43), (29, 56), (61, 33), (42, 29), (126, 43), (91, 43), (55, 56), (79, 87), (64, 13), (16, 28), (110, 129), (112, 102), (51, 61), (75, 62), (128, 43), (92, 96), (13, 16), (87, 54), (42, 31), (125, 102), (27, 42), (16, 21), (88, 92), (91, 54), (34, 66), (82, 85), (34, 75), (121, 43), (132, 43), (29, 33), (121, 107), (23, 26), (103, 110), (23, 35), (132, 125), (97, 103), (110, 33), (82, 60), (42, 33), (91, 102), (79, 82), (110, 60), (94, 43), (94, 107), (112, 97), (20, 23), (132, 54), (121, 54), (72, 33), (13, 2), (136, 54), (72, 60), (91, 95), (85, 88), (39, 66), (45, 52), (63, 67), (110, 117), (34, 61), (39, 75), (73, 77), (63, 76), (94, 100), (82, 89), (94, 54), (102, 122), (35, 41), (61, 60), (69, 73), (98, 54), (107, 121), (87, 33), (73, 43), (132, 129), (89, 94), (112, 126), (0, 4), (91, 33), (0, 13), (91, 97), (127, 96), (77, 43), (107, 93), (88, 89), (39, 13), (34, 63), (128, 134), (91, 60), (126, 54), (135, 2), (72, 83), (77, 79), (121, 113), (73, 54), (27, 32), (128, 54), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (132, 33), (121, 33), (35, 27), (94, 113), (18, 20), (98, 104), (69, 68), (34, 13), (135, 13), (136, 33), (42, 60), (121, 60), (132, 60), (61, 64), (34, 40), (136, 60), (102, 92), (94, 33), (39, 63), (93, 98), (126, 104), (98, 33), (35, 29), (97, 13), (72, 78), (94, 60), (51, 55), (121, 99), (44, 50), (132, 117), (98, 60), (82, 43), (0, 1), (76, 66), (96, 136), (40, 46), (91, 85), (110, 43), (39, 56), (122, 127), (76, 75), (61, 43), (45, 51), (126, 33), (94, 99), (128, 131), (87, 60), (35, 31), (41, 47), (107, 102), (4, 7), (126, 60), (44, 52), (61, 68), (4, 135), (73, 33), (128, 33), (29, 39), (40, 39), (82, 54), (77, 33), (128, 60), (68, 73), (29, 66), (77, 60), (29, 75)], 'ddg_edge_info': [(26, 21), (7, 17), (66, 103), (67, 68), (101, 33), (67, 77), (8, 18), (11, 23), (50, 91), (62, 74), (81, 87), (81, 96), (61, 127), (81, 105), (31, 86), (62, 101), (103, 102), (66, 62), (62, 110), (31, 104), (66, 89), (26, 16), (72, 132), (126, 112), (7, 21), (99, 113), (0, 9), (62, 69), (39, 76), (62, 78), (81, 91), (31, 72), (0, 103), (81, 100), (31, 81), (62, 96), (31, 99), (31, 108), (66, 75), (26, 2), (122, 128), (55, 56), (7, 16), (131, 33), (62, 64), (136, 13), (54, 60), (61, 108), (62, 73), (81, 86), (31, 67), (91, 127), (62, 91), (31, 85), (67, 17), (31, 94), (66, 61), (31, 103), (7, 2), (7, 11), (64, 127), (3, 126), (50, 67), (60, 13), (108, 17), (0, 75), (62, 68), (94, 100), (31, 62), (62, 77), (39, 75), (73, 77), (0, 102), (3, 9), (31, 127), (31, 89), (43, 54), (67, 21), (101, 13), (3, 121), (135, 2), (104, 33), (108, 21), (0, 79), (102, 108), (31, 66), (66, 33), (32, 31), (109, 13), (31, 75), (3, 4), (67, 16), (134, 33), (3, 98), (117, 129), (81, 17), (97, 132), (8, 60), (50, 75), (0, 56), (31, 34), (91, 85), (108, 16), (27, 91), (0, 74), (31, 52), (31, 61), (67, 2), (108, 128), (47, 32), (9, 15), (109, 102), (68, 73), (67, 105), (81, 21), (50, 52), (62, 17), (67, 132), (54, 13), (98, 110), (0, 51), (108, 2), (8, 64), (31, 29), (39, 51), (91, 89), (0, 69), (131, 134), (31, 56), (13, 17), (56, 67), (87, 91), (66, 117), (47, 27), (86, 95), (66, 126), (67, 100), (67, 109), (21, 2), (81, 16), (67, 127), (62, 21), (98, 105), (54, 17), (0, 46), (0, 55), (31, 33), (0, 64), (91, 93), (0, 73), (31, 51), (94, 98), (99, 33), (66, 112), (108, 127), (66, 121), (67, 86), (109, 101), (68, 72), (81, 2), (67, 104), (61, 33), (79, 87), (62, 16), (11, 32), (0, 41), (54, 21), (0, 50), (8, 63), (0, 68), (66, 13), (13, 16), (81, 132), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (66, 107), (67, 72), (108, 122), (67, 81), (109, 96), (66, 125), (8, 13), (67, 99), (67, 108), (0, 18), (1, 135), (42, 33), (62, 2), (11, 18), (11, 27), (0, 27), (79, 91), (54, 16), (20, 23), (33, 60), (81, 109), (62, 105), (81, 127), (45, 52), (31, 117), (73, 132), (129, 33), (62, 132), (31, 126), (66, 93), (66, 102), (67, 76), (67, 85), (107, 121), (26, 47), (67, 94), (89, 94), (0, 4), (67, 103), (0, 13), (11, 13), (11, 22), (8, 35), (54, 2), (11, 31), (0, 31), (0, 40), (44, 55), (81, 104), (62, 100), (96, 13), (62, 109), (16, 2), (64, 60), (31, 112), (62, 127), (66, 79), (31, 121), (66, 88), (66, 97), (67, 62), (67, 89), (0, 8), (11, 17), (0, 17), (83, 33), (11, 26), (31, 13), (62, 86), (44, 50), (81, 99), (81, 108), (62, 104), (22, 31), (81, 117), (31, 98), (122, 127), (66, 74), (31, 107), (31, 125), (66, 101), (67, 66), (113, 33), (67, 75), (0, 3), (0, 21), (11, 21), (62, 72), (81, 85), (62, 81), (81, 94), (81, 103), (3, 13), (62, 99), (81, 112), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (66, 78), (101, 17), (66, 96), (67, 61), (126, 110), (26, 32), (0, 7), (121, 126), (11, 16), (0, 16), (110, 125), (81, 89), (0, 101), (62, 85), (109, 17), (81, 98), (3, 8), (125, 132), (62, 94), (27, 127), (31, 88), (3, 17), (62, 103), (31, 79), (86, 33), (31, 97), (66, 64), (66, 73), (101, 21), (46, 91), (0, 2), (11, 2), (77, 87), (69, 110), (8, 91), (7, 135), (0, 96), (81, 93), (31, 74), (0, 105), (62, 89), (109, 21), (8, 127), (3, 21), (31, 101), (66, 68), (67, 33), (78, 33), (31, 110), (66, 77), (26, 13), (101, 16), (15, 13), (7, 9), (29, 33), (121, 107), (40, 51), (132, 125), (0, 91), (31, 69), (0, 100), (109, 16), (31, 78), (3, 7), (51, 56), (3, 16), (31, 96), (101, 2), (47, 31), (3, 110), (39, 50), (91, 88), (31, 46), (62, 61), (91, 97), (0, 77), (31, 55), (109, 2), (31, 64), (32, 29), (31, 73), (3, 2), (3, 11), (119, 33), (72, 110), (108, 131), (46, 67), (67, 117), (67, 126), (81, 33), (21, 28), (69, 77), (8, 76), (0, 72), (31, 50), (66, 17), (0, 81), (39, 63), (101, 136), (31, 68), (32, 33), (31, 77), (32, 42), (105, 112), (64, 74), (35, 47), (9, 13), (67, 112), (109, 127), (89, 121), (67, 121), (109, 136), (69, 72), (121, 110), (62, 33), (127, 13), (0, 67), (23, 32), (31, 45), (91, 96), (66, 21), (39, 67), (94, 110), (72, 73), (64, 69), (67, 13), (17, 21), (9, 17), (67, 98), (46, 75), (67, 107), (109, 122), (67, 125), (0, 44), (20, 22), (0, 62), (108, 13), (31, 40), (66, 16), (104, 119), (81, 126), (13, 28), (72, 77), (64, 91), (66, 110), (17, 16), (46, 52), (9, 21), (67, 93), (109, 108), (67, 102), (27, 29), (0, 39), (31, 17), (20, 26), (66, 2), (91, 86), (31, 44), (81, 121), (62, 117), (34, 46), (62, 126), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (26, 41), (67, 79), (9, 16), (67, 88), (3, 94), (66, 132), (67, 97), (97, 110), (8, 29), (81, 13), (0, 34), (29, 79), (0, 43), (31, 21), (0, 52), (4, 13), (95, 33), (0, 61), (31, 39), (81, 107), (23, 35), (44, 67), (62, 112), (81, 125), (1, 16), (62, 121), (34, 50), (127, 101), (64, 72), (66, 91), (66, 100), (26, 27), (93, 126), (66, 109), (67, 74), (9, 2), (78, 83), (66, 127), (67, 101), (0, 11), (67, 110), (11, 20), (0, 20), (100, 107), (62, 13), (8, 42), (31, 16), (81, 102), (87, 33), (62, 98), (112, 126), (62, 107), (35, 13), (34, 45), (62, 125), (66, 86), (56, 63), (108, 101), (66, 104), (26, 31), (67, 69), (67, 78), (67, 96), (18, 54), (31, 2), (81, 88), (77, 136), (69, 132), (81, 97), (136, 33), (61, 128), (62, 93), (62, 102), (22, 29), (31, 105), (66, 72), (93, 98), (66, 81), (108, 96), (26, 17), (20, 132), (18, 13), (31, 132), (67, 64), (66, 99), (7, 13), (66, 108), (26, 35), (67, 73), (67, 91), (0, 1), (40, 46), (0, 28), (77, 122), (41, 47), (62, 79), (4, 7), (52, 56), (33, 43), (62, 88), (81, 101), (117, 33), (62, 97), (81, 110), (31, 91), (31, 100), (31, 109), (103, 125), (66, 85), (7, 8), (66, 94)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utils.c
Patched function: 1---int attribute_align_arg avcodec_open2 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/Os/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/Os/utils.s---avcodec_open2---before
function id: 17
function flag: True
There are 611 instructions for function: avcodec_open2 in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '714', 'end': 725}, 'before': {'start': '714', 'end': 719}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/Os/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/Os/utils.o---before
The extraction of function: avcodec_open2
Analyzing the binaries to generate subCFGs from patched function ...
It has 860 nodes and 1539 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 611 instructions in binary file.
[4203582, 4203637, 4203650]
The execution time of patched subCFG information extraction via angr: 0:00:02.252816
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402475>, <DisassemblerInsn "call" for 0x40247d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402930>, <DisassemblerInsn "mov" for 0x402937>, <DisassemblerInsn "lea" for 0x40293a>, <DisassemblerInsn "call" for 0x402942>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024ba>, <DisassemblerInsn "mov" for 0x4024c2>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "mov" for 0x4024d1>, <DisassemblerInsn "mov" for 0x4024d8>, <DisassemblerInsn "movzx" for 0x4024e0>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "cmp" for 0x4024ee>, <DisassemblerInsn "jle" for 0x4024f4>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "cmp" for 0x402400>, <DisassemblerInsn "sete" for 0x402403>, <DisassemblerInsn "cmp" for 0x402406>, <DisassemblerInsn "sete" for 0x402409>, <DisassemblerInsn "or" for 0x40240c>, <DisassemblerInsn "test" for 0x40240e>, <DisassemblerInsn "jne" for 0x402410>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402482>, <DisassemblerInsn "cmp" for 0x402489>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "jl" for 0x402493>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402445>, <DisassemblerInsn "mov" for 0x40244d>, <DisassemblerInsn "mov" for 0x402455>, <DisassemblerInsn "cmp" for 0x40245c>, <DisassemblerInsn "mov" for 0x402464>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "jne" for 0x402473>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a8>, <DisassemblerInsn "mov" for 0x4024ab>, <DisassemblerInsn "mov" for 0x4024b3>, <DisassemblerInsn "mov" for 0x4024ba>, <DisassemblerInsn "mov" for 0x4024c2>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "mov" for 0x4024d1>, <DisassemblerInsn "mov" for 0x4024d8>, <DisassemblerInsn "movzx" for 0x4024e0>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "cmp" for 0x4024ee>, <DisassemblerInsn "jle" for 0x4024f4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402529>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40243e>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402930>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x4024ba>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402529>']}], 'cfg_edge_info': [(64, 66), (66, 68), (68, 26), (68, 71), (62, 64), (64, 67)]}]}
{'avcodec_open2': [4203582, 4203637, 4203650]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9a7dc618c50902e7a171f2deda6430d52c277a95/clang_before/Os/utils.o---before
The extraction of function: avcodec_open2
[4203582, 4203637, 4203650]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 137 nodes and 221 edges in CFGEmulated.
It has 137 nodes and 346 edges in CDG.
It has 2164 nodes and 2880 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4203582, 4203637, 4203650]
{4201994, 4203538, 4204050, 4204564, 4202530, 4204067, 4204581, 4203046, 4202021, 4203051, 4203565, 4204595, 4202038, 4202556, 4203582, 4204094, 4203080, 4203085, 4204110, 4204635, 4203112, 4204142, 4203637, 4204671, 4203650, 4202114, 4204169, 4202124, 4204686, 4202648, 4203673, 4204197, 4204711, 4203177, 4203706, 4203197, 4204224, 4202182, 4202702, 4204241, 4204755, 4204774, 4204268, 4203245, 4202740, 4203766, 4202232, 4204803, 4204294, 4202246, 4204816, 4202262, 4203800, 4204320, 4204322, 4203817, 4203308, 4201774, 4204848, 4203832, 4204351, 4203328, 4202306, 4204871, 4203854, 4204891, 4204381, 4202335, 4202851, 4203365, 4204904, 4203884, 4202870, 4202359, 4201850, 4204412, 4203906, 4204934, 4202377, 4201876, 4204439, 4202907, 4203423, 4202401, 4204456, 4203950, 4201902, 4202417, 4202419, 4204482, 4202434, 4201923, 4203471, 4202959, 4203986, 4201945, 4204506, 4202463, 4204521, 4203505, 4202995, 4202486, 4204023, 4204537}
[120, 105, 88, 51, 72, 74, 60, 73, 69, 33, 98, 26, 135, 96, 67, 18, 10, 32, 113, 130, 89, 102, 129, 78, 117, 86, 131, 93, 54, 127, 2, 112, 16, 125, 23, 40, 82, 34, 4, 110, 104, 29, 121, 17, 50, 122, 75, 56, 20, 55, 13, 81, 47, 9, 62, 19, 35, 119, 126, 92, 77, 58, 85, 95, 103, 3, 136, 87, 114, 48, 94, 45, 109, 66, 11, 91, 44, 27, 43, 99, 0, 28, 107, 6, 100, 41, 31, 61, 1, 64, 7, 52, 21, 68, 97, 42, 101, 8, 46, 15, 128, 118, 22, 132, 76, 123, 39, 79, 83, 108, 134, 63]
The execution time of patched slicing information extraction via angr: 0:00:27.813075
{'avcodec_open2': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026a3>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40264e>, <DisassemblerInsn "mov" for 0x402652>, <DisassemblerInsn "mov" for 0x40265a>, <DisassemblerInsn "mov" for 0x40265d>, <DisassemblerInsn "xor" for 0x402661>, <DisassemblerInsn "mov" for 0x402663>, <DisassemblerInsn "mov" for 0x402668>, <DisassemblerInsn "jmp" for 0x40266c>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402538>, <DisassemblerInsn "cmp" for 0x402540>, <DisassemblerInsn "je" for 0x402548>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40219b>, <DisassemblerInsn "mov" for 0x4021a2>, <DisassemblerInsn "mov" for 0x4021aa>, <DisassemblerInsn "test" for 0x4021b0>, <DisassemblerInsn "setne" for 0x4021b2>, <DisassemblerInsn "xor" for 0x4021b5>, <DisassemblerInsn "or" for 0x4021b8>, <DisassemblerInsn "xor" for 0x4021ba>, <DisassemblerInsn "test" for 0x4021bc>, <DisassemblerInsn "mov" for 0x4021bf>, <DisassemblerInsn "mov" for 0x4021c6>, <DisassemblerInsn "jne" for 0x4021cd>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40239f>, <DisassemblerInsn "mov" for 0x4023a7>, <DisassemblerInsn "mov" for 0x4023af>, <DisassemblerInsn "mov" for 0x4023b7>, <DisassemblerInsn "mov" for 0x4023ba>, <DisassemblerInsn "mov" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023bf>, <DisassemblerInsn "mov" for 0x4023c1>, <DisassemblerInsn "mov" for 0x4023c8>, <DisassemblerInsn "mov" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "jne" for 0x4023ef>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402340>, <DisassemblerInsn "mov" for 0x402347>, <DisassemblerInsn "mov" for 0x40234f>, <DisassemblerInsn "mov" for 0x402355>, <DisassemblerInsn "mov" for 0x40235c>, <DisassemblerInsn "jmp" for 0x402363>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402968>, <DisassemblerInsn "mov" for 0x402970>, <DisassemblerInsn "mov" for 0x402973>, <DisassemblerInsn "mov" for 0x40297a>, <DisassemblerInsn "jmp" for 0x402981>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d7>, <DisassemblerInsn "mov" for 0x4023de>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "cmp" for 0x4023ec>, <DisassemblerInsn "jne" for 0x4023ef>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40232c>, <DisassemblerInsn "mov" for 0x402333>, <DisassemblerInsn "cmp" for 0x40233b>, <DisassemblerInsn "je" for 0x40233e>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402930>, <DisassemblerInsn "mov" for 0x402937>, <DisassemblerInsn "lea" for 0x40293a>, <DisassemblerInsn "call" for 0x402942>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40263e>, <DisassemblerInsn "mov" for 0x402643>, <DisassemblerInsn "mov" for 0x402645>, <DisassemblerInsn "cmp" for 0x402649>, <DisassemblerInsn "je" for 0x40264c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f06>, <DisassemblerInsn "mov" for 0x401f0d>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "call" for 0x401f11>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd9>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "cmp" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de3>, <DisassemblerInsn "jne" for 0x401dea>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40285b>, <DisassemblerInsn "mov" for 0x402862>, <DisassemblerInsn "mov" for 0x40286a>, <DisassemblerInsn "and" for 0x402870>, <DisassemblerInsn "cmp" for 0x402873>, <DisassemblerInsn "mov" for 0x402876>, <DisassemblerInsn "jne" for 0x40287d>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40222b>, <DisassemblerInsn "mov" for 0x402233>, <DisassemblerInsn "mov" for 0x40223b>, <DisassemblerInsn "mov" for 0x40223e>, <DisassemblerInsn "xor" for 0x402241>, <DisassemblerInsn "call" for 0x402243>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e8f>, <DisassemblerInsn "mov" for 0x401e97>, <DisassemblerInsn "add" for 0x401e9a>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "mov" for 0x401ea9>, <DisassemblerInsn "mov" for 0x401eb0>, <DisassemblerInsn "cmp" for 0x401eb5>, <DisassemblerInsn "mov" for 0x401eb9>, <DisassemblerInsn "je" for 0x401ec0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e7d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f89>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "lea" for 0x401f94>, <DisassemblerInsn "call" for 0x401f9c>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402612>, <DisassemblerInsn "mov" for 0x402617>, <DisassemblerInsn "jmp" for 0x40261e>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40277a>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40254e>, <DisassemblerInsn "mov" for 0x402556>, <DisassemblerInsn "mov" for 0x40255a>, <DisassemblerInsn "cmp" for 0x402562>, <DisassemblerInsn "je" for 0x402566>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027a8>, <DisassemblerInsn "mov" for 0x4027b0>, <DisassemblerInsn "mov" for 0x4027b7>, <DisassemblerInsn "cmp" for 0x4027bc>, <DisassemblerInsn "je" for 0x4027c0>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402797>, <DisassemblerInsn "mov" for 0x40279c>, <DisassemblerInsn "jmp" for 0x4027a3>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402412>, <DisassemblerInsn "mov" for 0x40241a>, <DisassemblerInsn "lea" for 0x40241f>, <DisassemblerInsn "mov" for 0x402426>, <DisassemblerInsn "call" for 0x402428>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40277c>, <DisassemblerInsn "mov" for 0x402784>, <DisassemblerInsn "lea" for 0x402789>, <DisassemblerInsn "mov" for 0x402790>, <DisassemblerInsn "call" for 0x402792>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024f6>, <DisassemblerInsn "mov" for 0x4024fd>, <DisassemblerInsn "mov" for 0x402505>, <DisassemblerInsn "lea" for 0x40250a>, <DisassemblerInsn "mov" for 0x402511>, <DisassemblerInsn "call" for 0x402513>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027f9>, <DisassemblerInsn "mov" for 0x402801>, <DisassemblerInsn "lea" for 0x402806>, <DisassemblerInsn "mov" for 0x40280d>, <DisassemblerInsn "call" for 0x40280f>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402623>, <DisassemblerInsn "mov" for 0x40262b>, <DisassemblerInsn "mov" for 0x40262f>, <DisassemblerInsn "cmp" for 0x402634>, <DisassemblerInsn "je" for 0x402638>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40295b>, <DisassemblerInsn "call" for 0x402963>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402825>, <DisassemblerInsn "mov" for 0x40282d>, <DisassemblerInsn "mov" for 0x402831>, <DisassemblerInsn "mov" for 0x402833>, <DisassemblerInsn "mov" for 0x40283a>, <DisassemblerInsn "mov" for 0x402842>, <DisassemblerInsn "mov" for 0x402845>, <DisassemblerInsn "mov" for 0x402849>, <DisassemblerInsn "cmp" for 0x40284e>, <DisassemblerInsn "mov" for 0x402852>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402986>, <DisassemblerInsn "add" for 0x40298d>, <DisassemblerInsn "ret" for 0x402994>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "mov" for 0x40268d>, <DisassemblerInsn "mov" for 0x402692>, <DisassemblerInsn "add" for 0x402696>, <DisassemblerInsn "mov" for 0x40269a>, <DisassemblerInsn "cmp" for 0x40269f>, <DisassemblerInsn "je" for 0x4026a1>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028e6>, <DisassemblerInsn "mov" for 0x4028ea>, <DisassemblerInsn "test" for 0x4028f1>, <DisassemblerInsn "mov" for 0x4028f4>, <DisassemblerInsn "jne" for 0x4028fb>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40275d>, <DisassemblerInsn "mov" for 0x402762>, <DisassemblerInsn "mov" for 0x402767>, <DisassemblerInsn "add" for 0x40276c>, <DisassemblerInsn "mov" for 0x402770>, <DisassemblerInsn "cmp" for 0x402775>, <DisassemblerInsn "je" for 0x402778>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef8>, <DisassemblerInsn "cmp" for 0x401f00>, <DisassemblerInsn "jne" for 0x401f04>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x40202a>, <DisassemblerInsn "mov" for 0x402030>, <DisassemblerInsn "cmp" for 0x402037>, <DisassemblerInsn "je" for 0x40203a>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024ba>, <DisassemblerInsn "mov" for 0x4024c2>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "mov" for 0x4024d1>, <DisassemblerInsn "mov" for 0x4024d8>, <DisassemblerInsn "movzx" for 0x4024e0>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "cmp" for 0x4024ee>, <DisassemblerInsn "jle" for 0x4024f4>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "mov" for 0x401ffe>, <DisassemblerInsn "add" for 0x402001>, <DisassemblerInsn "mov" for 0x402008>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "mov" for 0x402016>, <DisassemblerInsn "cmp" for 0x40201d>, <DisassemblerInsn "je" for 0x402020>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "mov" for 0x401db5>, <DisassemblerInsn "cmp" for 0x401dbd>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402706>, <DisassemblerInsn "mov" for 0x40270b>, <DisassemblerInsn "xor" for 0x40270e>, <DisassemblerInsn "cmp" for 0x402710>, <DisassemblerInsn "mov" for 0x402714>, <DisassemblerInsn "mov" for 0x402719>, <DisassemblerInsn "je" for 0x40271e>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026a5>, <DisassemblerInsn "mov" for 0x4026ad>, <DisassemblerInsn "lea" for 0x4026b2>, <DisassemblerInsn "mov" for 0x4026b9>, <DisassemblerInsn "call" for 0x4026bb>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdf>, <DisassemblerInsn "cmp" for 0x401fe6>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "jl" for 0x401ff0>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ae>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "cmp" for 0x4025be>, <DisassemblerInsn "mov" for 0x4025c1>, <DisassemblerInsn "mov" for 0x4025c9>, <DisassemblerInsn "je" for 0x4025d0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028d3>, <DisassemblerInsn "lea" for 0x4028d8>, <DisassemblerInsn "mov" for 0x4028df>, <DisassemblerInsn "call" for 0x4028e4>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f4>, <DisassemblerInsn "mov" for 0x4020fb>, <DisassemblerInsn "mov" for 0x402102>, <DisassemblerInsn "mov" for 0x40210a>, <DisassemblerInsn "mov" for 0x402112>, <DisassemblerInsn "mov" for 0x40211a>, <DisassemblerInsn "mov" for 0x40211c>, <DisassemblerInsn "xor" for 0x402122>, <DisassemblerInsn "sub" for 0x402125>, <DisassemblerInsn "mov" for 0x402128>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "sar" for 0x402135>, <DisassemblerInsn "mov" for 0x402138>, <DisassemblerInsn "xor" for 0x40213f>, <DisassemblerInsn "sub" for 0x402141>, <DisassemblerInsn "mov" for 0x402144>, <DisassemblerInsn "xor" for 0x402146>, <DisassemblerInsn "sub" for 0x402148>, <DisassemblerInsn "sar" for 0x40214a>, <DisassemblerInsn "mov" for 0x40214c>, <DisassemblerInsn "xor" for 0x402154>, <DisassemblerInsn "sub" for 0x402156>, <DisassemblerInsn "mov" for 0x402158>, <DisassemblerInsn "mov" for 0x40215a>, <DisassemblerInsn "jmp" for 0x402161>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027da>, <DisassemblerInsn "mov" for 0x4027dc>, <DisassemblerInsn "mov" for 0x4027e0>, <DisassemblerInsn "cmp" for 0x4027e4>, <DisassemblerInsn "je" for 0x4027e7>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402268>, <DisassemblerInsn "mov" for 0x402270>, <DisassemblerInsn "mov" for 0x402278>, <DisassemblerInsn "mov" for 0x402280>, <DisassemblerInsn "mov" for 0x402286>, <DisassemblerInsn "mov" for 0x40228c>, <DisassemblerInsn "mov" for 0x402293>, <DisassemblerInsn "mov" for 0x40229a>, <DisassemblerInsn "cmp" for 0x4022a2>, <DisassemblerInsn "je" for 0x4022a7>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021f3>, <DisassemblerInsn "mov" for 0x4021fb>, <DisassemblerInsn "mov" for 0x402203>, <DisassemblerInsn "mov" for 0x40220a>, <DisassemblerInsn "add" for 0x402211>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "xor" for 0x40221f>, <DisassemblerInsn "call" for 0x402221>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed6>, <DisassemblerInsn "mov" for 0x401ed9>, <DisassemblerInsn "add" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee7>, <DisassemblerInsn "cmp" for 0x401eef>, <DisassemblerInsn "jle" for 0x401ef2>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021cf>, <DisassemblerInsn "xor" for 0x4021d7>, <DisassemblerInsn "cmp" for 0x4021d9>, <DisassemblerInsn "mov" for 0x4021dd>, <DisassemblerInsn "mov" for 0x4021df>, <DisassemblerInsn "mov" for 0x4021e6>, <DisassemblerInsn "je" for 0x4021ed>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4028a7>, <DisassemblerInsn "mov" for 0x4028ae>, <DisassemblerInsn "mov" for 0x4028b2>, <DisassemblerInsn "add" for 0x4028b8>, <DisassemblerInsn "mov" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c1>, <DisassemblerInsn "mov" for 0x4028c8>, <DisassemblerInsn "cmp" for 0x4028cd>, <DisassemblerInsn "je" for 0x4028d1>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402475>, <DisassemblerInsn "call" for 0x40247d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "mov" for 0x401f67>, <DisassemblerInsn "mov" for 0x401f6f>, <DisassemblerInsn "call" for 0x401f72>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "lea" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1e>, <DisassemblerInsn "call" for 0x401e20>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "add" for 0x4022b1>, <DisassemblerInsn "call" for 0x4022b8>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402901>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "mov" for 0x401f19>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "mov" for 0x401f29>, <DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "cmp" for 0x401f31>, <DisassemblerInsn "mov" for 0x401f35>, <DisassemblerInsn "je" for 0x401f3c>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026c0>, <DisassemblerInsn "mov" for 0x4026c5>, <DisassemblerInsn "jmp" for 0x4026cc>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40266e>, <DisassemblerInsn "mov" for 0x402673>, <DisassemblerInsn "mov" for 0x402678>, <DisassemblerInsn "cmp" for 0x40267b>, <DisassemblerInsn "mov" for 0x40267e>, <DisassemblerInsn "mov" for 0x402683>, <DisassemblerInsn "je" for 0x402687>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402833>, <DisassemblerInsn "mov" for 0x40283a>, <DisassemblerInsn "mov" for 0x402842>, <DisassemblerInsn "mov" for 0x402845>, <DisassemblerInsn "mov" for 0x402849>, <DisassemblerInsn "cmp" for 0x40284e>, <DisassemblerInsn "mov" for 0x402852>, <DisassemblerInsn "je" for 0x402859>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023f1>, <DisassemblerInsn "mov" for 0x4023f8>, <DisassemblerInsn "cmp" for 0x402400>, <DisassemblerInsn "sete" for 0x402403>, <DisassemblerInsn "cmp" for 0x402406>, <DisassemblerInsn "sete" for 0x402409>, <DisassemblerInsn "or" for 0x40240c>, <DisassemblerInsn "test" for 0x40240e>, <DisassemblerInsn "jne" for 0x402410>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40229a>, <DisassemblerInsn "cmp" for 0x4022a2>, <DisassemblerInsn "je" for 0x4022a7>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402529>, <DisassemblerInsn "cmp" for 0x402531>, <DisassemblerInsn "jne" for 0x402536>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402518>, <DisassemblerInsn "mov" for 0x40251d>, <DisassemblerInsn "jmp" for 0x402524>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026ec>, <DisassemblerInsn "mov" for 0x4026f4>, <DisassemblerInsn "mov" for 0x4026fb>, <DisassemblerInsn "cmp" for 0x402700>, <DisassemblerInsn "je" for 0x402704>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "lea" for 0x401d9f>, <DisassemblerInsn "xor" for 0x401da7>, <DisassemblerInsn "call" for 0x401da9>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40288e>, <DisassemblerInsn "mov" for 0x402891>, <DisassemblerInsn "mov" for 0x402893>, <DisassemblerInsn "mov" for 0x40289a>, <DisassemblerInsn "jl" for 0x4028a1>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402482>, <DisassemblerInsn "cmp" for 0x402489>, <DisassemblerInsn "mov" for 0x40248c>, <DisassemblerInsn "jl" for 0x402493>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4025f5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401fb1>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40256c>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "mov" for 0x402576>, <DisassemblerInsn "cmp" for 0x40257d>, <DisassemblerInsn "je" for 0x402580>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402163>, <DisassemblerInsn "cmp" for 0x40216a>, <DisassemblerInsn "mov" for 0x40216d>, <DisassemblerInsn "je" for 0x402174>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402722>, <DisassemblerInsn "mov" for 0x40272a>, <DisassemblerInsn "lea" for 0x40272f>, <DisassemblerInsn "mov" for 0x402736>, <DisassemblerInsn "call" for 0x402738>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40224d>, <DisassemblerInsn "mov" for 0x402255>, <DisassemblerInsn "lea" for 0x40225a>, <DisassemblerInsn "mov" for 0x402261>, <DisassemblerInsn "call" for 0x402263>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e82>, <DisassemblerInsn "call" for 0x401e87>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402499>, <DisassemblerInsn "mov" for 0x4024a0>, <DisassemblerInsn "mov" for 0x4024a8>, <DisassemblerInsn "mov" for 0x4024ab>, <DisassemblerInsn "mov" for 0x4024b3>, <DisassemblerInsn "mov" for 0x4024ba>, <DisassemblerInsn "mov" for 0x4024c2>, <DisassemblerInsn "mov" for 0x4024ca>, <DisassemblerInsn "mov" for 0x4024d1>, <DisassemblerInsn "mov" for 0x4024d8>, <DisassemblerInsn "movzx" for 0x4024e0>, <DisassemblerInsn "mov" for 0x4024e7>, <DisassemblerInsn "cmp" for 0x4024ee>, <DisassemblerInsn "jle" for 0x4024f4>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d6>, <DisassemblerInsn "add" for 0x4020d9>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "mov" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "cmp" for 0x4020ef>, <DisassemblerInsn "je" for 0x4020f2>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f77>, <DisassemblerInsn "cmp" for 0x401f7f>, <DisassemblerInsn "je" for 0x401f87>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402947>, <DisassemblerInsn "add" for 0x40294f>, <DisassemblerInsn "call" for 0x402956>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025f7>, <DisassemblerInsn "mov" for 0x4025ff>, <DisassemblerInsn "lea" for 0x402604>, <DisassemblerInsn "mov" for 0x40260b>, <DisassemblerInsn "call" for 0x40260d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d2e>, <DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d45>, <DisassemblerInsn "lea" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d55>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "cmp" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6d>, <DisassemblerInsn "ja" for 0x401d74>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402910>, <DisassemblerInsn "mov" for 0x402918>, <DisassemblerInsn "mov" for 0x40291c>, <DisassemblerInsn "mov" for 0x402924>, <DisassemblerInsn "mov" for 0x402927>, <DisassemblerInsn "jmp" for 0x40292e>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025d9>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "add" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025ec>, <DisassemblerInsn "cmp" for 0x4025f1>, <DisassemblerInsn "je" for 0x4025f3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "add" for 0x401df6>, <DisassemblerInsn "mov" for 0x401df9>, <DisassemblerInsn "mov" for 0x401dff>, <DisassemblerInsn "cmp" for 0x401e05>, <DisassemblerInsn "je" for 0x401e08>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402582>, <DisassemblerInsn "mov" for 0x402589>, <DisassemblerInsn "mov" for 0x402591>, <DisassemblerInsn "mov" for 0x402594>, <DisassemblerInsn "xor" for 0x40259b>, <DisassemblerInsn "mov" for 0x40259d>, <DisassemblerInsn "mov" for 0x4025a5>, <DisassemblerInsn "jmp" for 0x4025ac>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f4a>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "cmp" for 0x401f59>, <DisassemblerInsn "je" for 0x401f5d>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc2>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "lea" for 0x401fd2>, <DisassemblerInsn "call" for 0x401fda>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022bd>, <DisassemblerInsn "mov" for 0x4022c5>, <DisassemblerInsn "add" for 0x4022c8>, <DisassemblerInsn "mov" for 0x4022cc>, <DisassemblerInsn "mov" for 0x4022d4>, <DisassemblerInsn "cmp" for 0x4022d9>, <DisassemblerInsn "mov" for 0x4022e0>, <DisassemblerInsn "ja" for 0x4022e7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "cmp" for 0x401d82>, <DisassemblerInsn "sete" for 0x401d86>, <DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "test" for 0x401d90>, <DisassemblerInsn "jne" for 0x401d92>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022ed>, <DisassemblerInsn "mov" for 0x4022f5>, <DisassemblerInsn "mov" for 0x4022fd>, <DisassemblerInsn "mov" for 0x402305>, <DisassemblerInsn "mov" for 0x402308>, <DisassemblerInsn "add" for 0x40230b>, <DisassemblerInsn "mov" for 0x402312>, <DisassemblerInsn "mov" for 0x40231a>, <DisassemblerInsn "mov" for 0x402320>, <DisassemblerInsn "cmp" for 0x402327>, <DisassemblerInsn "je" for 0x40232a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "lea" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dd2>, <DisassemblerInsn "call" for 0x401dd7>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402176>, <DisassemblerInsn "mov" for 0x40217e>, <DisassemblerInsn "mov" for 0x402185>, <DisassemblerInsn "mov" for 0x40218b>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "jmp" for 0x402199>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402903>, <DisassemblerInsn "call" for 0x40290b>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402365>, <DisassemblerInsn "mov" for 0x40236c>, <DisassemblerInsn "mov" for 0x402374>, <DisassemblerInsn "add" for 0x402377>, <DisassemblerInsn "mov" for 0x40237e>, <DisassemblerInsn "mov" for 0x402386>, <DisassemblerInsn "cmp" for 0x40238c>, <DisassemblerInsn "mov" for 0x40238f>, <DisassemblerInsn "mov" for 0x402396>, <DisassemblerInsn "jne" for 0x40239d>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026d1>, <DisassemblerInsn "mov" for 0x4026d9>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "cmp" for 0x4026e2>, <DisassemblerInsn "je" for 0x4026e6>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa4>, <DisassemblerInsn "jl" for 0x401fab>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40287f>, <DisassemblerInsn "mov" for 0x402884>, <DisassemblerInsn "call" for 0x40288c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "add" for 0x401e49>, <DisassemblerInsn "mov" for 0x401e50>, <DisassemblerInsn "cmp" for 0x401e58>, <DisassemblerInsn "sete" for 0x401e60>, <DisassemblerInsn "cmp" for 0x401e63>, <DisassemblerInsn "setne" for 0x401e67>, <DisassemblerInsn "and" for 0x401e6a>, <DisassemblerInsn "mov" for 0x401e6c>, <DisassemblerInsn "test" for 0x401e71>, <DisassemblerInsn "mov" for 0x401e74>, <DisassemblerInsn "jne" for 0x401e7b>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402043>, <DisassemblerInsn "mov" for 0x40204b>, <DisassemblerInsn "xor" for 0x402052>, <DisassemblerInsn "sub" for 0x402055>, <DisassemblerInsn "mov" for 0x402058>, <DisassemblerInsn "mov" for 0x40205e>, <DisassemblerInsn "sar" for 0x402065>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "xor" for 0x40206f>, <DisassemblerInsn "sub" for 0x402071>, <DisassemblerInsn "mov" for 0x402074>, <DisassemblerInsn "xor" for 0x402077>, <DisassemblerInsn "sub" for 0x402079>, <DisassemblerInsn "sar" for 0x40207b>, <DisassemblerInsn "mov" for 0x40207d>, <DisassemblerInsn "xor" for 0x402085>, <DisassemblerInsn "sub" for 0x402087>, <DisassemblerInsn "mov" for 0x402089>, <DisassemblerInsn "mov" for 0x40208c>, <DisassemblerInsn "jmp" for 0x402093>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e25>, <DisassemblerInsn "mov" for 0x401e2a>, <DisassemblerInsn "jmp" for 0x401e31>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027e9>, <DisassemblerInsn "mov" for 0x4027ed>, <DisassemblerInsn "cmp" for 0x4027f5>, <DisassemblerInsn "je" for 0x4027f7>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402720>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "mov" for 0x401fc2>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "lea" for 0x401fd2>, <DisassemblerInsn "call" for 0x401fda>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40273f>, <DisassemblerInsn "mov" for 0x402744>, <DisassemblerInsn "mov" for 0x402749>, <DisassemblerInsn "cmp" for 0x40274d>, <DisassemblerInsn "mov" for 0x402751>, <DisassemblerInsn "mov" for 0x402756>, <DisassemblerInsn "je" for 0x40275b>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402248>, <DisassemblerInsn "jge" for 0x40224b>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40273d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402098>, <DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "add" for 0x4020a3>, <DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020af>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "cmp" for 0x4020b9>, <DisassemblerInsn "sete" for 0x4020bc>, <DisassemblerInsn "mov" for 0x4020bf>, <DisassemblerInsn "test" for 0x4020c6>, <DisassemblerInsn "jne" for 0x4020c8>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402445>, <DisassemblerInsn "mov" for 0x40244d>, <DisassemblerInsn "mov" for 0x402455>, <DisassemblerInsn "cmp" for 0x40245c>, <DisassemblerInsn "mov" for 0x402464>, <DisassemblerInsn "mov" for 0x40246c>, <DisassemblerInsn "jne" for 0x402473>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40242d>, <DisassemblerInsn "mov" for 0x402432>, <DisassemblerInsn "jmp" for 0x402439>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "mov" for 0x4027c7>, <DisassemblerInsn "mov" for 0x4027cf>, <DisassemblerInsn "mov" for 0x4027d1>, <DisassemblerInsn "call" for 0x4027d5>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402814>, <DisassemblerInsn "mov" for 0x402819>, <DisassemblerInsn "jmp" for 0x402820>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x402226>, <DisassemblerInsn "jl" for 0x402229>]'}], 'cfg_block_detailed_info': [{'block_Idx': 120, 'blockInsts': ['<jmp~~0x40266e>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x50]>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x402689>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<je~~0x402833>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x12b]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<test~~eax, eax>', '<setne~~dl>', '<xor~~cl, 1>', '<or~~dl, cl>', '<xor~~ecx, ecx>', '<test~~dl, 1>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x4021f3>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rax + 8]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~dword ptr [rdx], eax>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402412>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x104]>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x4023cf>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp]>', '<mov~~qword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x4028a7>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<cmp~~eax, dword ptr [rcx + 0xc]>', '<jne~~0x402412>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<je~~0x402365>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x154]>', '<mov~~dword ptr [rsp], eax>', '<lea~~rdi, [rsp + 0x1c0]>', '<call~~0x5000d0>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<cmp~~eax, 0>', '<je~~0x4026a5>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~eax, eax>', '<mov~~edi, eax>', '<call~~0x500040>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x402986>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x404]>', '<and~~ecx, 1>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x4028a7>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rax + 0x34]>', '<mov~~esi, dword ptr [rax + 0x38]>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x428>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rax + 0x428], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4028a7>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4028a7>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rax]>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 130, 'blockInsts': ['<jmp~~0x40273f>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x70]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<cmp~~rax, 0>', '<je~~0x402623>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x402833>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x36c4]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3422]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35f6]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x33d0]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x68]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 0>', '<je~~0x4026d1>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500060>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rax], ecx>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4028a7>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1bc]>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0x68]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<cmp~~eax, ecx>', '<je~~0x4026d1>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jne~~0x402986>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<cmp~~rax, rcx>', '<je~~0x4027a8>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<cmp~~qword ptr [rax], 0>', '<jne~~0x401f77>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<cmp~~eax, 0>', '<je~~0x402098>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402529>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x304>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~eax, dword ptr [rax + 0x304]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<je~~0x402098>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rip + 0x3c73]>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0>', '<je~~0x401df0>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x40277c>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x34b3]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x150], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402930>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, -1>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x4025f7>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<lea~~rdi, [rip + 0x3151]>', '<mov~~esi, 2>', '<call~~rax>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rsi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rdi], eax>', '<mov~~dword ptr [rcx + 0x308], edx>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rcx + 0x300]>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402176>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<cmp~~eax, 0>', '<je~~0x402825>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx], 0>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rax + 0x34], 0>', '<mov~~dword ptr [rax + 0x38], 0>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x4022bd>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~esi, dword ptr [rsp + 0x100]>', '<add~~rax, 0x308>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<xor~~edx, edx>', '<call~~0x500058>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<add~~rcx, 0x98>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<cmp~~eax, 0>', '<jle~~0x401fb3>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x38], 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<je~~0x40229a>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rip + 0x3180]>', '<add~~eax, -1>', '<mov~~dword ptr [rip + 0x3177], eax>', '<mov~~rax, qword ptr [rip + 0x3160]>', '<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4028e6>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~0x5000c0>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~qword ptr [rdi], rax>', '<call~~0x5000b0>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3c6d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x3e8>', '<call~~0x500060>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x402903>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4028a7>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rax + rcx*4]>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x68], eax>', '<je~~0x4026a5>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<je~~0x4028a7>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<sete~~cl>', '<cmp~~eax, 4>', '<sete~~al>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40243e>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x30], 0>', '<je~~0x4022bd>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<cmp~~qword ptr [rax + 0x20], 0>', '<jne~~0x40254e>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rax, qword ptr [rax + 0x390]>', '<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x402722>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rsi, qword ptr [rax]>', '<lea~~rdi, [rsp + 0x1c0]>', '<xor~~edx, edx>', '<call~~0x5000a8>']}, {'block_Idx': 136, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402930>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402930>']}, {'block_Idx': 114, 'blockInsts': ['<jmp~~0x4025ae>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x401fc2>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<cmp~~eax, -1>', '<je~~0x4025f7>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x130], eax>', '<je~~0x40219b>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x345e]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x18>', '<lea~~rdx, [rip + 0x3863]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edi, 0x18>', '<call~~0x500040>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xc0]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<movzx~~ecx, byte ptr [rcx + 0x80]>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<cmp~~dword ptr [rax + 0x300], ecx>', '<jle~~0x402529>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~eax, dword ptr [rax + 0x38]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<je~~0x402163>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x401fc2>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<add~~rdi, 0x98>', '<call~~0x500060>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3539]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<lea~~rax, [rsp + 0x1c0]>', '<mov~~qword ptr [rsp + 0x1c0], 0>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rdi + 0x28], 0xffffff7>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<ja~~0x402986>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~rdx, qword ptr [rsp + 0x1c0]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~dword ptr [rsp + 0x1bc], eax>', '<jmp~~0x402986>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<add~~rdx, 1>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<cmp~~eax, ecx>', '<je~~0x402623>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rip + 0x3c42]>', '<add~~eax, 1>', '<mov~~dword ptr [rip + 0x3c39], eax>', '<mov~~eax, dword ptr [rip + 0x3c33]>', '<cmp~~eax, 1>', '<je~~0x401e36>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x4025d2>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x158], rax>', '<cmp~~rax, 0>', '<je~~0x401f77>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rax, rcx>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xffffffea>', '<cmp~~dword ptr [rcx + 0x54], 0x80>', '<mov~~dword ptr [rsp + 0x154], eax>', '<ja~~0x402930>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~rax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x19f], al>', '<test~~al, 1>', '<jne~~0x401dae>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x1a8]>', '<mov~~qword ptr [rcx], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~eax, dword ptr [rax + 0x100]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<cmp~~eax, -1>', '<je~~0x402365>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x190]>', '<lea~~rdi, [rip + 0x3c5e]>', '<mov~~esi, 1>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rax + 0x308]>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jmp~~0x4021f3>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<call~~0x5000d0>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x104>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~eax, dword ptr [rax + 0x104]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xd0], ecx>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jne~~0x4023cf>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x48], rax>', '<cmp~~rax, 0>', '<je~~0x4027a8>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jl~~0x402930>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<call~~rax>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x90>', '<mov~~qword ptr [rsp + 0x180], rdx>', '<cmp~~qword ptr [rax + 0x90], 0>', '<sete~~al>', '<cmp~~rcx, 0>', '<setne~~cl>', '<and~~cl, al>', '<mov~~eax, 0xffffffea>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jne~~0x401e82>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x134]>', '<xor~~r8d, r8d>', '<sub~~r8d, eax>', '<mov~~ecx, dword ptr [rsi + 0x300]>', '<mov~~dword ptr [rsp + 0x12c], ecx>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x12c]>', '<xor~~edi, edi>', '<sub~~edi, r8d>', '<mov~~dword ptr [rsi + 0x34], edi>', '<xor~~esi, esi>', '<sub~~esi, edx>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<xor~~edx, edx>', '<sub~~edx, esi>', '<mov~~dword ptr [rcx + 0x38], edx>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x402176>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x18c], eax>', '<jmp~~0x4028a7>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x402833>']}, {'block_Idx': 118, 'blockInsts': ['<jmp~~0x40275d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rax], 0>', '<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<lea~~rsi, [rsp + 0x1c0]>', '<call~~0x5000b8>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x40277c>']}, {'block_Idx': 76, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x40229a>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x4027a8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x34>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, dword ptr [rax + 0x34]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x12b], al>', '<test~~al, 1>', '<jne~~0x402163>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~dword ptr [rdx + 0x60], 0>', '<cmp~~qword ptr [rdx + 0x2d8], 0>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<jne~~0x4024ba>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<call~~0x5000c8>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x154], eax>', '<jmp~~0x402930>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40224d>']}], 'cfg_edge_info': [(64, 69), (50, 52), (42, 48), (44, 45), (31, 29), (103, 109), (74, 73), (97, 102), (131, 134), (13, 17), (79, 81), (81, 87), (82, 86), (20, 22), (87, 91), (128, 92), (125, 130), (29, 34), (8, 11), (39, 44), (23, 27), (47, 27), (86, 95), (104, 119), (72, 77), (126, 112), (98, 105), (48, 31), (99, 113), (46, 52), (17, 16), (89, 93), (96, 101), (110, 118), (73, 78), (77, 78), (76, 58), (69, 74), (0, 2), (91, 86), (122, 128), (66, 75), (68, 72), (1, 3), (61, 33), (27, 31), (55, 56), (16, 19), (64, 68), (7, 135), (28, 2), (123, 102), (75, 62), (112, 120), (92, 96), (34, 39), (13, 16), (15, 13), (125, 102), (93, 97), (136, 13), (54, 60), (55, 58), (88, 92), (82, 85), (29, 33), (121, 107), (95, 33), (108, 122), (23, 26), (103, 110), (132, 125), (97, 103), (11, 18), (42, 33), (79, 82), (120, 126), (58, 62), (112, 97), (20, 23), (51, 56), (4, 6), (60, 13), (78, 83), (85, 88), (45, 52), (100, 107), (63, 67), (110, 117), (6, 8), (129, 33), (94, 100), (73, 77), (35, 41), (67, 76), (43, 54), (87, 33), (130, 132), (89, 94), (35, 13), (62, 61), (127, 96), (107, 93), (88, 89), (56, 63), (135, 2), (92, 13), (77, 79), (75, 61), (107, 114), (119, 33), (8, 10), (96, 13), (1, 4), (16, 2), (27, 32), (102, 108), (109, 123), (3, 4), (18, 20), (98, 104), (69, 68), (136, 33), (61, 64), (21, 28), (118, 125), (22, 29), (39, 45), (134, 33), (34, 40), (102, 92), (19, 21), (101, 136), (83, 33), (93, 98), (114, 121), (41, 27), (117, 129), (126, 104), (18, 13), (72, 78), (58, 61), (32, 42), (105, 112), (26, 35), (51, 55), (121, 99), (44, 50), (135, 6), (132, 117), (0, 1), (76, 66), (91, 85), (40, 46), (122, 127), (45, 51), (63, 66), (94, 99), (128, 131), (41, 47), (113, 33), (33, 43), (4, 7), (52, 56), (127, 13), (40, 39), (10, 13), (9, 15), (68, 73), (85, 89), (6, 9)], 'cdg_edge_info': [(64, 69), (55, 66), (89, 13), (42, 48), (44, 45), (55, 75), (82, 93), (98, 119), (82, 102), (93, 13), (20, 29), (27, 13), (8, 18), (103, 109), (91, 89), (63, 61), (13, 17), (79, 81), (107, 97), (88, 93), (61, 54), (126, 119), (88, 102), (82, 86), (73, 83), (98, 112), (82, 95), (20, 22), (87, 91), (128, 92), (29, 34), (8, 11), (77, 83), (39, 44), (29, 43), (103, 102), (23, 27), (40, 52), (29, 61), (72, 77), (42, 43), (126, 112), (110, 125), (98, 105), (82, 33), (82, 97), (125, 132), (136, 43), (23, 29), (40, 45), (29, 45), (85, 13), (91, 93), (72, 43), (29, 54), (29, 63), (73, 60), (110, 54), (110, 118), (96, 101), (63, 13), (88, 97), (98, 43), (73, 78), (55, 63), (42, 54), (77, 78), (0, 2), (69, 74), (91, 86), (51, 13), (23, 31), (122, 128), (1, 3), (68, 72), (72, 54), (87, 43), (29, 56), (61, 33), (42, 29), (126, 43), (91, 43), (55, 56), (79, 87), (64, 13), (16, 28), (110, 129), (112, 102), (51, 61), (75, 62), (128, 43), (92, 96), (87, 54), (13, 16), (42, 31), (125, 102), (27, 42), (16, 21), (88, 92), (91, 54), (82, 85), (34, 66), (34, 75), (121, 43), (132, 43), (29, 33), (121, 107), (23, 26), (103, 110), (23, 35), (132, 125), (97, 103), (110, 33), (82, 60), (42, 33), (91, 102), (79, 82), (110, 60), (94, 43), (94, 107), (112, 97), (20, 23), (121, 54), (72, 33), (132, 54), (13, 2), (136, 54), (72, 60), (91, 95), (85, 88), (39, 66), (45, 52), (63, 67), (110, 117), (34, 61), (39, 75), (73, 77), (63, 76), (94, 100), (82, 89), (94, 54), (102, 122), (35, 41), (61, 60), (69, 73), (98, 54), (107, 121), (87, 33), (73, 43), (132, 129), (0, 4), (89, 94), (112, 126), (91, 33), (0, 13), (91, 97), (77, 43), (127, 96), (107, 93), (88, 89), (39, 13), (34, 63), (128, 134), (91, 60), (126, 54), (135, 2), (72, 83), (77, 79), (121, 113), (73, 54), (27, 32), (128, 54), (39, 61), (29, 60), (34, 56), (102, 108), (77, 54), (121, 33), (132, 33), (35, 27), (94, 113), (18, 20), (69, 68), (98, 104), (61, 64), (34, 13), (136, 33), (42, 60), (132, 60), (121, 60), (135, 13), (34, 40), (102, 92), (136, 60), (94, 33), (93, 98), (39, 63), (126, 104), (98, 33), (35, 29), (97, 13), (72, 78), (121, 99), (51, 55), (94, 60), (44, 50), (132, 117), (98, 60), (82, 43), (0, 1), (96, 136), (76, 66), (40, 46), (91, 85), (110, 43), (39, 56), (76, 75), (122, 127), (61, 43), (45, 51), (126, 33), (94, 99), (128, 131), (87, 60), (35, 31), (41, 47), (107, 102), (4, 7), (126, 60), (44, 52), (61, 68), (73, 33), (4, 135), (128, 33), (29, 39), (40, 39), (82, 54), (77, 33), (128, 60), (68, 73), (29, 66), (77, 60), (29, 75)], 'ddg_edge_info': [(26, 21), (7, 17), (66, 103), (67, 68), (101, 33), (67, 77), (8, 18), (11, 23), (50, 91), (62, 74), (81, 87), (81, 96), (110, 132), (61, 127), (81, 105), (31, 86), (62, 101), (103, 102), (66, 62), (62, 110), (31, 104), (66, 89), (26, 16), (72, 132), (126, 112), (7, 21), (99, 113), (0, 9), (62, 69), (39, 76), (62, 78), (81, 91), (31, 72), (0, 103), (81, 100), (31, 81), (62, 96), (31, 99), (31, 108), (66, 75), (26, 2), (122, 128), (55, 56), (7, 16), (131, 33), (62, 64), (136, 13), (54, 60), (61, 108), (62, 73), (81, 86), (31, 67), (91, 127), (62, 91), (31, 85), (67, 17), (31, 94), (66, 61), (31, 103), (7, 2), (7, 11), (64, 127), (3, 126), (60, 13), (50, 67), (108, 17), (0, 75), (62, 68), (31, 62), (94, 100), (39, 75), (73, 77), (62, 77), (0, 102), (3, 9), (31, 89), (43, 54), (67, 21), (101, 13), (3, 121), (135, 2), (104, 33), (108, 21), (0, 79), (102, 108), (31, 66), (66, 33), (32, 31), (109, 13), (31, 75), (3, 4), (67, 16), (134, 33), (3, 98), (117, 129), (81, 17), (97, 132), (8, 60), (50, 75), (0, 56), (31, 34), (91, 85), (108, 16), (0, 74), (31, 52), (31, 61), (67, 2), (108, 128), (47, 32), (9, 15), (109, 102), (68, 73), (67, 105), (81, 21), (50, 52), (62, 17), (54, 13), (67, 132), (98, 110), (0, 51), (108, 2), (8, 64), (31, 29), (39, 51), (0, 69), (91, 89), (131, 134), (31, 56), (13, 17), (56, 67), (87, 91), (66, 117), (47, 27), (86, 95), (66, 126), (67, 100), (67, 109), (21, 2), (81, 16), (121, 98), (8, 41), (67, 127), (62, 21), (98, 105), (54, 17), (0, 46), (0, 55), (31, 33), (0, 64), (91, 93), (0, 73), (31, 51), (94, 98), (99, 33), (66, 112), (108, 127), (66, 121), (67, 86), (109, 101), (68, 72), (81, 2), (67, 104), (61, 33), (8, 27), (79, 87), (62, 16), (11, 32), (0, 41), (54, 21), (0, 50), (8, 63), (0, 68), (66, 13), (13, 16), (81, 132), (56, 66), (31, 131), (66, 98), (56, 75), (34, 75), (66, 107), (67, 72), (108, 122), (67, 81), (109, 96), (66, 125), (8, 13), (67, 99), (67, 108), (11, 18), (0, 18), (1, 135), (42, 33), (62, 2), (11, 27), (0, 27), (79, 91), (54, 16), (20, 23), (33, 60), (81, 109), (62, 105), (81, 127), (45, 52), (31, 117), (73, 132), (129, 33), (62, 132), (31, 126), (66, 93), (66, 102), (67, 76), (67, 85), (107, 121), (26, 47), (67, 94), (89, 94), (0, 4), (67, 103), (11, 13), (0, 13), (11, 22), (8, 35), (54, 2), (11, 31), (0, 31), (0, 40), (44, 55), (81, 104), (62, 100), (96, 13), (62, 109), (16, 2), (64, 60), (31, 112), (62, 127), (66, 79), (31, 121), (66, 88), (66, 97), (67, 62), (67, 89), (0, 8), (11, 17), (0, 17), (83, 33), (11, 26), (31, 13), (44, 50), (62, 86), (81, 99), (81, 108), (62, 104), (22, 31), (81, 117), (31, 98), (31, 107), (66, 74), (122, 127), (31, 125), (66, 101), (67, 66), (113, 33), (67, 75), (0, 3), (11, 21), (0, 21), (62, 72), (81, 85), (62, 81), (81, 94), (81, 103), (3, 13), (62, 99), (81, 112), (31, 93), (62, 108), (74, 73), (31, 102), (66, 69), (66, 78), (101, 17), (66, 96), (67, 61), (126, 110), (26, 32), (0, 7), (121, 126), (11, 16), (0, 16), (110, 125), (81, 89), (0, 101), (62, 85), (109, 17), (81, 98), (3, 8), (62, 94), (125, 132), (31, 79), (31, 88), (3, 17), (62, 103), (86, 33), (31, 97), (66, 64), (66, 73), (101, 21), (46, 91), (0, 2), (11, 2), (77, 87), (8, 91), (7, 135), (0, 96), (81, 93), (31, 74), (62, 89), (0, 105), (109, 21), (8, 127), (3, 21), (31, 101), (66, 68), (67, 33), (78, 33), (31, 110), (66, 77), (26, 13), (101, 16), (15, 13), (7, 9), (29, 33), (121, 107), (132, 125), (40, 51), (7, 8), (0, 91), (31, 69), (0, 100), (109, 16), (31, 78), (3, 7), (51, 56), (3, 16), (31, 96), (101, 2), (47, 31), (3, 110), (39, 50), (91, 88), (31, 46), (62, 61), (0, 77), (91, 97), (31, 55), (109, 2), (31, 64), (32, 29), (31, 73), (3, 2), (3, 11), (119, 33), (108, 131), (46, 67), (67, 117), (67, 126), (3, 132), (81, 33), (21, 28), (69, 77), (8, 76), (0, 72), (31, 50), (66, 17), (0, 81), (39, 63), (101, 136), (31, 68), (32, 33), (31, 77), (32, 42), (105, 112), (64, 74), (35, 47), (9, 13), (67, 112), (109, 127), (67, 121), (89, 121), (109, 136), (69, 72), (121, 110), (62, 33), (127, 13), (0, 67), (23, 32), (31, 45), (91, 96), (66, 21), (39, 67), (94, 110), (72, 73), (64, 69), (67, 13), (17, 21), (9, 17), (67, 98), (46, 75), (67, 107), (109, 122), (67, 125), (0, 44), (20, 22), (0, 62), (108, 13), (31, 40), (66, 16), (104, 119), (81, 126), (13, 28), (72, 77), (64, 91), (66, 110), (46, 52), (17, 16), (9, 21), (67, 93), (109, 108), (67, 102), (27, 29), (0, 39), (31, 17), (20, 26), (66, 2), (91, 86), (31, 44), (81, 121), (62, 117), (34, 46), (62, 126), (64, 68), (35, 32), (17, 2), (28, 2), (66, 105), (67, 79), (26, 41), (9, 16), (67, 88), (3, 94), (66, 132), (67, 97), (97, 110), (8, 29), (81, 13), (0, 34), (29, 79), (0, 43), (31, 21), (0, 52), (4, 13), (0, 61), (95, 33), (31, 39), (81, 107), (23, 35), (44, 67), (62, 112), (81, 125), (1, 16), (62, 121), (34, 50), (127, 101), (64, 72), (66, 91), (66, 100), (26, 27), (93, 126), (66, 109), (9, 2), (67, 74), (78, 83), (126, 132), (66, 127), (67, 101), (0, 11), (67, 110), (11, 20), (0, 20), (100, 107), (62, 13), (8, 42), (31, 16), (81, 102), (87, 33), (62, 98), (112, 126), (62, 107), (35, 13), (34, 45), (62, 125), (66, 86), (56, 63), (108, 101), (66, 104), (67, 69), (26, 31), (67, 78), (67, 96), (18, 54), (31, 2), (81, 88), (77, 136), (69, 132), (81, 97), (136, 33), (61, 128), (62, 93), (62, 102), (22, 29), (44, 75), (31, 105), (66, 72), (93, 98), (66, 81), (108, 96), (26, 17), (31, 132), (66, 99), (67, 64), (18, 13), (7, 13), (66, 108), (67, 73), (26, 35), (67, 91), (0, 1), (40, 46), (0, 28), (77, 122), (41, 47), (62, 79), (4, 7), (52, 56), (33, 43), (62, 88), (81, 101), (117, 33), (62, 97), (81, 110), (31, 91), (31, 100), (31, 109), (103, 125), (66, 85), (31, 127), (66, 94)]}]}
{'avcodec_open2': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 345, 'instruction': 'movl\t$0, 0x60(%rdx)'}, {'instIndex': 346, 'instruction': 'cmpq\t$0, 0x2d8(%rdx)'}, {'instIndex': 347, 'instruction': 'movq\t%rcx, 0xb8(%rsp)                 # 8-byte Spill'}, {'instIndex': 348, 'instruction': 'movl\t%eax, 0xc0(%rsp)                 # 4-byte Spill'}, {'instIndex': 349, 'instruction': 'jne\t.LBB17_45'}, {'instIndex': 351, 'instruction': 'callq\tff_thread_init@PLT'}, {'instIndex': 353, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 354, 'instruction': 'movl\t%eax, 0x154(%rsp)                 # 4-byte Spill'}, {'instIndex': 355, 'instruction': 'jl\t.LBB17_80'}]}]}
The analysis of 18 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/patch_info.txt
{'1': {'before': 'a/libswscale/ppc/swscale_altivec.c', 'after': 'b/libswscale/ppc/swscale_altivec.c'}, '2': {'before': 'a/libswscale/swscale.c', 'after': 'b/libswscale/swscale.c'}, '3': {'before': 'a/libswscale/x86/swscale_template.c', 'after': 'b/libswscale/x86/swscale_template.c'}}
{'1': [{'before': '-222,8', 'after': '+222,7', 'function': 'yuv2yuvX_altivec_real'}], '2': [{'before': '-1804,10', 'after': '+1804,8', 'function': 'static void rgb24ToUV_half_c'}, {'before': '-1886,7', 'after': '+1884,7', 'function': 'static av_always_inline void hyscale'}, {'before': '-1924,8', 'after': '+1922,8', 'function': 'static av_always_inline void hcscale'}], '3': [{'before': '-1906,8', 'after': '+1906,7', 'function': 'static void RENAME'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---b/libswscale/ppc/swscale_altivec.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/no/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/no/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O0.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O0/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O0/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O1.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O1/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O1/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O2.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O2/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O2/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O3.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O3/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/O3/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization Os.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/Os/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_after/Os/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization no.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/no/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/no/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O0.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O0/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O0/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O1.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O1/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O1/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O2.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O2/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O2/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O3.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O3/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/O3/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization Os.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/Os/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_after/Os/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---a/libswscale/ppc/swscale_altivec.c
The case of compiler gcc with optimization no.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/no/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/no/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O0.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O0/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O0/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O1.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O1/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O1/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O2.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O2/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O2/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization O3.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O3/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/O3/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler gcc with optimization Os.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/Os/swscale_altivec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/gcc_before/Os/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization no.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/no/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/no/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O0.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O0/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O0/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O1.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O1/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O1/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O2.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O2/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O2/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization O3.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O3/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/O3/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The case of compiler clang with optimization Os.
Patched source code file: swscale_altivec.c
Patched function: 1---yuv2yuvX_altivec_real 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/Os/swscale_altivec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e/clang_before/Os/swscale_altivec.o
Binary file does not exist.
{'yuv2yuvX_altivec_real': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---b/libswscale/swscale.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---a/libswscale/swscale.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---b/libswscale/x86/swscale_template.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/97535ffb9795f59c4fbfacfe1541d752ed47218e---a/libswscale/x86/swscale_template.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 19 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b0dfb27ab5e911547d86142cd8f67d296692bad/patch_info.txt
{}
{}
The analysis of 20 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/patch_info.txt
{'1': {'before': 'a/libavcodec/mpeg12.c', 'after': 'b/libavcodec/mpeg12.c'}}
{'1': [{'before': '-2329,8', 'after': '+2329,10', 'function': 'static int mpeg_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761---b/libavcodec/mpeg12.c
The case of compiler gcc with optimization no.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/no/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/no/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O0/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O0/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O1/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O1/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O2/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O2/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O3/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/O3/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/Os/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_after/Os/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/no/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/no/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O0/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O0/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O1/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O1/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O2/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O2/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O3/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/O3/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/Os/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_after/Os/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761---a/libavcodec/mpeg12.c
The case of compiler gcc with optimization no.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/no/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/no/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O0/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O0/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O1/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O1/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O2/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O2/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O3/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/O3/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/Os/mpeg12_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/gcc_before/Os/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization no.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/no/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/no/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O0/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O0/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O1/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O1/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O2/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O2/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O3/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/O3/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: mpeg12.c
Patched function: 1---static int mpeg_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/Os/mpeg12.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9bd005bdbcb6494557cff7392a141fb3f9c3c761/clang_before/Os/mpeg12.o
Binary file does not exist.
{'mpeg_decode_frame': []}
The analysis of 21 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/patch_info.txt
{'1': {'before': 'a/libavcodec/aacdec.c', 'after': 'b/libavcodec/aacdec.c'}}
{'1': [{'before': '-589,10', 'after': '+589,11', 'function': 'static av_cold int aac_decode_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad---b/libavcodec/aacdec.c
The case of compiler gcc with optimization no.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/no/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/no/aacdec_gcc.s---aac_decode_init---after
function id: 85
function flag: True
There are 511 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x1c(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 85, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 86, 'instruction': 'jne\t.L176'}, {'instIndex': 87, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 90, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 94, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 95, 'instruction': 'call\toutput_configure'}, {'instIndex': 96, 'instruction': 'jmp\t.L168'}, {'instIndex': 97, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 99, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 100, 'instruction': 'jle\t.L168'}, {'instIndex': 101, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 102, 'instruction': 'jmp\t.L169'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/no/aacdec.o
Binary file does not exist.
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x1c(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 85, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 86, 'instruction': 'jne\t.L176'}, {'instIndex': 87, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 90, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 94, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 95, 'instruction': 'call\toutput_configure'}, {'instIndex': 96, 'instruction': 'jmp\t.L168'}, {'instIndex': 97, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 99, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 100, 'instruction': 'jle\t.L168'}, {'instIndex': 101, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 102, 'instruction': 'jmp\t.L169'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O0/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O0/aacdec_gcc.s---aac_decode_init---after
function id: 85
function flag: True
There are 511 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x1c(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 85, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 86, 'instruction': 'jne\t.L176'}, {'instIndex': 87, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 90, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 94, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 95, 'instruction': 'call\toutput_configure'}, {'instIndex': 96, 'instruction': 'jmp\t.L168'}, {'instIndex': 97, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 99, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 100, 'instruction': 'jle\t.L168'}, {'instIndex': 101, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 102, 'instruction': 'jmp\t.L169'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O0/aacdec.o
Binary file does not exist.
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x1c(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'movl\t%eax, 0x24(%rsp)'}, {'instIndex': 85, 'instruction': 'cmpl\t$0, 0x24(%rsp)'}, {'instIndex': 86, 'instruction': 'jne\t.L176'}, {'instIndex': 87, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 88, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 90, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 91, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 94, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 95, 'instruction': 'call\toutput_configure'}, {'instIndex': 96, 'instruction': 'jmp\t.L168'}, {'instIndex': 97, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 99, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 100, 'instruction': 'jle\t.L168'}, {'instIndex': 101, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 102, 'instruction': 'jmp\t.L169'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O1/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O1/aacdec_gcc.s---aac_decode_init---after
function id: 610
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O1/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization O2.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O2/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O2/aacdec_gcc.s---aac_decode_init---after
function id: 572
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O2/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization O3.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O3/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O3/aacdec_gcc.s---aac_decode_init---after
function id: 1349
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/O3/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization Os.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/Os/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/Os/aacdec_gcc.s---aac_decode_init---after
function id: 342
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_after/Os/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler clang with optimization no.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/no/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/no/aacdec.s---aac_decode_init---after
function id: 0
function flag: True
There are 454 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_19'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.LBB0_15'}, {'instIndex': 75, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 76, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 77, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 78, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 81, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 82, 'instruction': 'callq\toutput_configure'}, {'instIndex': 83, 'instruction': 'jmp\t.LBB0_18'}, {'instIndex': 84, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 86, 'instruction': 'jl\t.LBB0_17'}, {'instIndex': 87, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB0_48'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB0_19'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/no/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/no/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1682 nodes and 3034 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 454 instructions in binary file.
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
The execution time of patched subCFG information extraction via angr: 0:00:03.748332
{'aac_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e3>, <DisassemblerInsn "jl" for 0x4001ea>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400200>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "cmp" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "lea" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d9>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "lea" for 0x400187>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "call" for 0x400197>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a85>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001fc>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jne~~0x4001db>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401280>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x400200>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401190>']}], 'cfg_edge_info': [(6, 12), (27, 31), (12, 17), (24, 27), (25, 29), (11, 16), (6, 11), (12, 16), (25, 28), (29, 13), (21, 25), (31, 16), (28, 31), (17, 21), (21, 24), (11, 17)]}]}
{'aac_decode_init': [4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/no/aacdec.o---after
The extraction of function: aac_decode_init
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 546 nodes and 841 edges in CFGEmulated.
It has 546 nodes and 1649 edges in CDG.
It has 4778 nodes and 7305 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
{4194816, 4194304, 4194818, 4196997, 4195338, 4196235, 4195340, 4196237, 4196621, 4196749, 4194571, 4194835, 4194457, 4194716, 4195486, 4194462, 4195488, 4196386, 4196388, 4194727, 4194478, 4196911, 4194607, 4195634, 4194483, 4195636, 4194869, 4196537, 4196542, 4194626, 4194499, 4196804, 4195782, 4195784, 4196936, 4194640, 4194901, 4194903, 4194777, 4196570, 4194651, 4194779, 4195933, 4194397, 4195935, 4196961, 4195042, 4195044, 4196971, 4194796, 4196084, 4196981, 4195190, 4196086, 4195192, 4196598, 4196986, 4196859, 4194812, 4194557, 4194814, 4194687}
[147, 100, 92, 20, 0, 160, 267, 29, 81, 14, 371, 2, 46, 243, 33, 367, 99, 288, 359, 82, 227, 129, 122, 251, 1, 268, 55, 236, 108, 93, 347, 39, 387, 61, 34, 305, 27, 355, 26, 194, 224, 391, 396, 351, 9, 35, 85, 98, 266, 71, 330, 183, 56, 86, 246, 375, 28, 312, 342, 273, 217, 3, 47, 501, 281, 232, 72, 76, 379, 151, 329, 40, 21, 262, 385, 107, 205, 363, 4, 52]
The execution time of patched slicing information extraction via angr: 0:03:21.023301
{'aac_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049e>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e3>, <DisassemblerInsn "jl" for 0x4001ea>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x40010b>, <DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "movzx" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x400039>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400044>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "cmp" for 0x400057>, <DisassemblerInsn "jle" for 0x40005b>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4004a0>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "movzx" for 0x4004bf>, <DisassemblerInsn "mov" for 0x4004c3>, <DisassemblerInsn "mov" for 0x4004ca>, <DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "mov" for 0x4004d5>, <DisassemblerInsn "lea" for 0x4004d9>, <DisassemblerInsn "add" for 0x4004e0>, <DisassemblerInsn "mov" for 0x4004e4>, <DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "xor" for 0x4004ef>, <DisassemblerInsn "xor" for 0x4004f2>, <DisassemblerInsn "mov" for 0x4004f5>, <DisassemblerInsn "mov" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400504>, <DisassemblerInsn "mov" for 0x40050c>, <DisassemblerInsn "mov" for 0x400515>, <DisassemblerInsn "mov" for 0x40051d>, <DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "call" for 0x40052d>]'}, {'block_Idx': 267, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "ret" for 0x401186>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 371, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a48>, <DisassemblerInsn "movss" for 0x400a4f>, <DisassemblerInsn "mov" for 0x400a57>, <DisassemblerInsn "call" for 0x400a5c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "call" for 0x400094>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "movss" for 0x400222>, <DisassemblerInsn "movss" for 0x40022a>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 243, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "add" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "jmp" for 0x400140>]'}, {'block_Idx': 367, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2f>, <DisassemblerInsn "movss" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "call" for 0x400a43>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 288, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400824>, <DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400832>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "movzx" for 0x400843>, <DisassemblerInsn "mov" for 0x400847>, <DisassemblerInsn "mov" for 0x40084e>, <DisassemblerInsn "mov" for 0x400852>, <DisassemblerInsn "mov" for 0x400859>, <DisassemblerInsn "lea" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "xor" for 0x400876>, <DisassemblerInsn "xor" for 0x400879>, <DisassemblerInsn "mov" for 0x40087c>, <DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400883>, <DisassemblerInsn "mov" for 0x40088b>, <DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x40089c>, <DisassemblerInsn "mov" for 0x4008a4>, <DisassemblerInsn "mov" for 0x4008ac>, <DisassemblerInsn "call" for 0x4008b4>]'}, {'block_Idx': 359, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c4>, <DisassemblerInsn "add" for 0x4009cc>, <DisassemblerInsn "movss" for 0x4009d3>, <DisassemblerInsn "cvtss2sd" for 0x4009dc>, <DisassemblerInsn "movsd" for 0x4009e0>, <DisassemblerInsn "divsd" for 0x4009e8>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009f1>, <DisassemblerInsn "call" for 0x4009f6>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 227, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401190>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119e>, <DisassemblerInsn "cmp" for 0x4011a2>, <DisassemblerInsn "jl" for 0x4011a7>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40040c>, <DisassemblerInsn "mov" for 0x400413>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "movzx" for 0x40042b>, <DisassemblerInsn "mov" for 0x40042f>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043a>, <DisassemblerInsn "mov" for 0x400441>, <DisassemblerInsn "lea" for 0x400445>, <DisassemblerInsn "add" for 0x40044c>, <DisassemblerInsn "mov" for 0x400450>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "xor" for 0x40045b>, <DisassemblerInsn "xor" for 0x40045e>, <DisassemblerInsn "mov" for 0x400461>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x400491>, <DisassemblerInsn "call" for 0x400499>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40040a>]'}, {'block_Idx': 251, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4006f6>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "movzx" for 0x400715>, <DisassemblerInsn "mov" for 0x400719>, <DisassemblerInsn "mov" for 0x400720>, <DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072b>, <DisassemblerInsn "lea" for 0x40072f>, <DisassemblerInsn "add" for 0x400736>, <DisassemblerInsn "mov" for 0x40073d>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "xor" for 0x400748>, <DisassemblerInsn "xor" for 0x40074b>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "mov" for 0x40077e>, <DisassemblerInsn "call" for 0x400786>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000be>]'}, {'block_Idx': 268, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40078d>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "mov" for 0x4007a5>, <DisassemblerInsn "movzx" for 0x4007ac>, <DisassemblerInsn "mov" for 0x4007b0>, <DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "mov" for 0x4007bb>, <DisassemblerInsn "mov" for 0x4007c2>, <DisassemblerInsn "lea" for 0x4007c6>, <DisassemblerInsn "add" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "xor" for 0x4007df>, <DisassemblerInsn "xor" for 0x4007e2>, <DisassemblerInsn "mov" for 0x4007e5>, <DisassemblerInsn "mov" for 0x4007e8>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "mov" for 0x4007fc>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "call" for 0x40081d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400255>]'}, {'block_Idx': 236, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40065f>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400677>, <DisassemblerInsn "movzx" for 0x40067e>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "mov" for 0x400689>, <DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "mov" for 0x400694>, <DisassemblerInsn "lea" for 0x400698>, <DisassemblerInsn "add" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a6>, <DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "xor" for 0x4006b1>, <DisassemblerInsn "xor" for 0x4006b4>, <DisassemblerInsn "mov" for 0x4006b7>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c6>, <DisassemblerInsn "mov" for 0x4006ce>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "call" for 0x4006ef>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "lea" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 347, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "call" for 0x400908>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 387, 'blockInsts': '[<DisassemblerInsn "push" for 0x401490>, <DisassemblerInsn "cmp" for 0x401491>, <DisassemblerInsn "jne" for 0x401498>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "jge" for 0x40009c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400200>]'}, {'block_Idx': 305, 'blockInsts': '[<DisassemblerInsn "call" for 0x4008b9>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 355, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "add" for 0x400995>, <DisassemblerInsn "movss" for 0x40099c>, <DisassemblerInsn "cvtss2sd" for 0x4009a5>, <DisassemblerInsn "movsd" for 0x4009a9>, <DisassemblerInsn "divsd" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b5>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "call" for 0x4009bf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012b>]'}, {'block_Idx': 194, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400534>, <DisassemblerInsn "mov" for 0x40053b>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "movzx" for 0x400553>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "lea" for 0x40056d>, <DisassemblerInsn "add" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "xor" for 0x400583>, <DisassemblerInsn "xor" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "mov" for 0x4005a0>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005c1>]'}, {'block_Idx': 224, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005c8>, <DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d6>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "movzx" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005fd>, <DisassemblerInsn "lea" for 0x400601>, <DisassemblerInsn "add" for 0x400608>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "xor" for 0x40061a>, <DisassemblerInsn "xor" for 0x40061d>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "mov" for 0x40062f>, <DisassemblerInsn "mov" for 0x400637>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "call" for 0x400658>]'}, {'block_Idx': 391, 'blockInsts': '[<DisassemblerInsn "pop" for 0x4014e7>, <DisassemblerInsn "ret" for 0x4014e8>]'}, {'block_Idx': 396, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a7a>, <DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 351, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40090d>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "lea" for 0x400925>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400931>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "xor" for 0x40094a>, <DisassemblerInsn "xor" for 0x40094d>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400953>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "mov" for 0x400978>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "call" for 0x400988>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "ret" for 0x401186>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "lea" for 0x400187>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "call" for 0x400197>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4002e4>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002fc>, <DisassemblerInsn "movzx" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400312>, <DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "lea" for 0x40031d>, <DisassemblerInsn "add" for 0x400324>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "xor" for 0x400333>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "mov" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x400371>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400376>]'}, {'block_Idx': 266, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401256>, <DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "jmp" for 0x4000a9>]'}, {'block_Idx': 330, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008be>, <DisassemblerInsn "add" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "call" for 0x4008d5>]'}, {'block_Idx': 183, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400532>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400257>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "movzx" for 0x400276>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "lea" for 0x40028d>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "xor" for 0x40029f>, <DisassemblerInsn "xor" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a5>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "call" for 0x4002dd>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "cmp" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 246, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006f4>]'}, {'block_Idx': 375, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a61>, <DisassemblerInsn "call" for 0x400a66>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 312, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401471>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 342, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008da>, <DisassemblerInsn "add" for 0x4008e2>, <DisassemblerInsn "mov" for 0x4008e9>, <DisassemblerInsn "call" for 0x4008f1>]'}, {'block_Idx': 273, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401280>, <DisassemblerInsn "mov" for 0x401284>, <DisassemblerInsn "mov" for 0x401289>, <DisassemblerInsn "mov" for 0x40128e>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129c>, <DisassemblerInsn "mov" for 0x4012a1>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "mov" for 0x4012b1>, <DisassemblerInsn "cmp" for 0x4012b6>, <DisassemblerInsn "je" for 0x4012bb>]'}, {'block_Idx': 217, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005c6>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401080>, <DisassemblerInsn "mov" for 0x401084>, <DisassemblerInsn "cmp" for 0x401089>, <DisassemblerInsn "jg" for 0x40108d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "movss" for 0x400244>, <DisassemblerInsn "movss" for 0x40024c>, <DisassemblerInsn "jmp" for 0x400255>]'}, {'block_Idx': 501, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 281, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400822>]'}, {'block_Idx': 232, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40065d>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ae>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002e2>]'}, {'block_Idx': 379, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a6b>, <DisassemblerInsn "call" for 0x400a70>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d9>]'}, {'block_Idx': 329, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401471>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "cmp" for 0x40020a>, <DisassemblerInsn "jne" for 0x400211>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 262, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40078b>]'}, {'block_Idx': 385, 'blockInsts': '[<DisassemblerInsn "call" for 0x400a75>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400378>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "mov" for 0x400390>, <DisassemblerInsn "movzx" for 0x400397>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "lea" for 0x4003b1>, <DisassemblerInsn "add" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "xor" for 0x4003c7>, <DisassemblerInsn "xor" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cd>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003ed>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x400405>]'}, {'block_Idx': 205, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401071>, <DisassemblerInsn "add" for 0x401075>, <DisassemblerInsn "ret" for 0x401079>]'}, {'block_Idx': 363, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fb>, <DisassemblerInsn "add" for 0x400a03>, <DisassemblerInsn "movss" for 0x400a0a>, <DisassemblerInsn "cvtss2sd" for 0x400a13>, <DisassemblerInsn "movsd" for 0x400a17>, <DisassemblerInsn "divsd" for 0x400a1f>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "xor" for 0x400a28>, <DisassemblerInsn "call" for 0x400a2a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ee0>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef3>, <DisassemblerInsn "mov" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "mov" for 0x400f05>, <DisassemblerInsn "mov" for 0x400f09>, <DisassemblerInsn "cmp" for 0x400f0e>, <DisassemblerInsn "jge" for 0x400f11>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401071>, <DisassemblerInsn "add" for 0x401075>, <DisassemblerInsn "ret" for 0x401079>]'}], 'cfg_block_detailed_info': [{'block_Idx': 147, 'blockInsts': ['<jmp~~0x4004a0>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a85>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001fc>']}, {'block_Idx': 20, 'blockInsts': ['<movsxd~~rcx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rip + 0xffeee]>', '<movzx~~eax, byte ptr [rax + rcx]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<jne~~0x40012d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x168>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rax + 0x98]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jle~~0x4000b3>']}, {'block_Idx': 160, 'blockInsts': ['<lea~~rax, [rip + 0xc509]>', '<mov~~qword ptr [rip + 0xb2ca], rax>', '<mov~~dword ptr [rip + 0xb2cc], 0x148>', '<mov~~rax, qword ptr [rip + 0xffb59]>', '<movzx~~edx, word ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffb5e]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rip + 0xffb63]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<lea~~rdi, [rip + 0xb230]>', '<add~~rdi, 0x60>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 267, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp - 4], 0xb>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x148], eax>', '<mov~~ecx, dword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x144], 0>', '<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 371, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff661]>', '<movss~~xmm0, dword ptr [rip + 0x9c85]>', '<mov~~esi, 0x80>', '<call~~0x5000a0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rax]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<add~~rdx, 8>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~r8d, dword ptr [rax + 0x28]>', '<call~~0x400ee0>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 3>', '<movss~~xmm0, dword ptr [rip + 0xa4ae]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400255>']}, {'block_Idx': 243, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x144], eax>', '<jmp~~0x4000fd>']}, {'block_Idx': 367, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff662]>', '<movss~~xmm0, dword ptr [rip + 0x9ca2]>', '<mov~~esi, 0x400>', '<call~~0x5000a0>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 288, 'blockInsts': ['<lea~~rax, [rip + 0xe205]>', '<mov~~qword ptr [rip + 0xafd6], rax>', '<mov~~dword ptr [rip + 0xafd8], 0x1ce>', '<mov~~rax, qword ptr [rip + 0xff7d5]>', '<movzx~~edx, word ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rip + 0xff7da]>', '<mov~~rcx, qword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rip + 0xff7df]>', '<mov~~rax, qword ptr [rax + 0x50]>', '<lea~~rdi, [rip + 0xaeac]>', '<add~~rdi, 0xf0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 359, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1788>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d20]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 227, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 1>', '<jl~~0x4011b0>']}, {'block_Idx': 129, 'blockInsts': ['<lea~~rax, [rip + 0xc0ed]>', '<mov~~qword ptr [rip + 0xb346], rax>', '<mov~~dword ptr [rip + 0xb348], 0x12c>', '<mov~~rax, qword ptr [rip + 0xffbed]>', '<movzx~~edx, word ptr [rax + 6]>', '<mov~~rax, qword ptr [rip + 0xffbf2]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rip + 0xffbf7]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<lea~~rdi, [rip + 0xb2c4]>', '<add~~rdi, 0x48>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 122, 'blockInsts': ['<jmp~~0x40040c>']}, {'block_Idx': 251, 'blockInsts': ['<lea~~rax, [rip + 0xd573]>', '<mov~~qword ptr [rip + 0xb0d4], rax>', '<mov~~dword ptr [rip + 0xb0d6], 0x1fe>', '<mov~~rax, qword ptr [rip + 0xff903]>', '<movzx~~edx, word ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xff908]>', '<mov~~rcx, qword ptr [rax + 0x40]>', '<mov~~rax, qword ptr [rip + 0xff90d]>', '<mov~~rax, qword ptr [rax + 0x40]>', '<lea~~rdi, [rip + 0xafda]>', '<add~~rdi, 0xc0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rax + 0x50]>', '<call~~0x401080>']}, {'block_Idx': 268, 'blockInsts': ['<lea~~rax, [rip + 0xdcdc]>', '<mov~~qword ptr [rip + 0xb055], rax>', '<mov~~dword ptr [rip + 0xb057], 0x16e>', '<mov~~rax, qword ptr [rip + 0xff86c]>', '<movzx~~edx, word ptr [rax + 0x12]>', '<mov~~rax, qword ptr [rip + 0xff871]>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~rax, qword ptr [rip + 0xff876]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<lea~~rdi, [rip + 0xaf43]>', '<add~~rdi, 0xd8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x400257>']}, {'block_Idx': 236, 'blockInsts': ['<lea~~rax, [rip + 0xd1da]>', '<mov~~qword ptr [rip + 0xb153], rax>', '<mov~~dword ptr [rip + 0xb155], 0x10c>', '<mov~~rax, qword ptr [rip + 0xff99a]>', '<movzx~~edx, word ptr [rax + 0xe]>', '<mov~~rax, qword ptr [rip + 0xff99f]>', '<mov~~rcx, qword ptr [rax + 0x38]>', '<mov~~rax, qword ptr [rip + 0xff9a4]>', '<mov~~rax, qword ptr [rax + 0x38]>', '<lea~~rdi, [rip + 0xb071]>', '<add~~rdi, 0xa8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 108, 'blockInsts': ['<jmp~~0x400200>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401280>']}, {'block_Idx': 347, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x3690], 0x1f2e3d4c>', '<call~~0x500060>']}, {'block_Idx': 39, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 387, 'blockInsts': ['<push~~rax>', '<cmp~~dword ptr [rip + 0x16274], 0>', '<jne~~0x4014e7>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000ae>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 305, 'blockInsts': ['<call~~0x500048>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40012f>']}, {'block_Idx': 355, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1720>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d5f]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400142>']}, {'block_Idx': 194, 'blockInsts': ['<lea~~rax, [rip + 0xc995]>', '<mov~~qword ptr [rip + 0xb24e], rax>', '<mov~~dword ptr [rip + 0xb250], 0x126>', '<mov~~rax, qword ptr [rip + 0xffac5]>', '<movzx~~edx, word ptr [rax + 0xa]>', '<mov~~rax, qword ptr [rip + 0xffaca]>', '<mov~~rcx, qword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffacf]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<lea~~rdi, [rip + 0xb19c]>', '<add~~rdi, 0x78>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 224, 'blockInsts': ['<lea~~rax, [rip + 0xcda1]>', '<mov~~qword ptr [rip + 0xb1d2], rax>', '<mov~~dword ptr [rip + 0xb1d4], 0x132>', '<mov~~rax, qword ptr [rip + 0xffa31]>', '<movzx~~edx, word ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rip + 0xffa36]>', '<mov~~rcx, qword ptr [rax + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffa3b]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<lea~~rdi, [rip + 0xb108]>', '<add~~rdi, 0x90>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 391, 'blockInsts': ['<pop~~rax>', '<ret~~>']}, {'block_Idx': 396, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 351, 'blockInsts': ['<lea~~rax, [rip + 0xe85c]>', '<mov~~qword ptr [rip + 0xeddd], rax>', '<mov~~dword ptr [rip + 0xeddf], 0x160>', '<lea~~rdi, [rip + 0xedc4]>', '<mov~~esi, 7>', '<mov~~edx, 0x79>', '<mov~~rcx, qword ptr [rip + 0xff733]>', '<mov~~r9d, 1>', '<mov~~rax, qword ptr [rip + 0xff736]>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401190>']}, {'block_Idx': 85, 'blockInsts': ['<lea~~rax, [rip + 0xb535]>', '<mov~~qword ptr [rip + 0xb43e], rax>', '<mov~~dword ptr [rip + 0xb440], 0x10e>', '<mov~~rax, qword ptr [rip + 0xffd15]>', '<movzx~~edx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rip + 0xffd1a]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffd1f]>', '<mov~~rax, qword ptr [rax + 8]>', '<lea~~rdi, [rip + 0xb3ec]>', '<add~~rdi, 0x18>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400378>']}, {'block_Idx': 266, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x44], 1>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xffffffff>', '<jmp~~0x400a85>']}, {'block_Idx': 330, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1858>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500050>']}, {'block_Idx': 183, 'blockInsts': ['<jmp~~0x400534>']}, {'block_Idx': 56, 'blockInsts': ['<lea~~rax, [rip + 0xaff2]>', '<mov~~qword ptr [rip + 0xb4b3], rax>', '<mov~~dword ptr [rip + 0xb4b5], 0x130>', '<mov~~rax, qword ptr [rip + 0xffda2]>', '<movzx~~edx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffda8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdae]>', '<mov~~rax, qword ptr [rax]>', '<lea~~rdi, [rip + 0xb47c]>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jne~~0x4001db>']}, {'block_Idx': 246, 'blockInsts': ['<jmp~~0x4006f6>']}, {'block_Idx': 375, 'blockInsts': ['<mov~~edi, 0xa>', '<call~~0x5000b8>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 312, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 0x3c0], 0>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 342, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x3670>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500058>']}, {'block_Idx': 273, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x20], r8d>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~rax, qword ptr [rsp + 0x30]>', '<je~~0x4012d1>']}, {'block_Idx': 217, 'blockInsts': ['<jmp~~0x4005c8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, 0x16771>', '<cmp~~eax, dword ptr [rsp - 8]>', '<jg~~0x40109c>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 1>', '<movss~~xmm0, dword ptr [rip + 0xa488]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400257>']}, {'block_Idx': 501, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 281, 'blockInsts': ['<jmp~~0x400824>']}, {'block_Idx': 232, 'blockInsts': ['<jmp~~0x40065f>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4002e4>']}, {'block_Idx': 379, 'blockInsts': ['<mov~~edi, 7>', '<call~~0x5000b8>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 329, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x474], 3>', '<jne~~0x400235>']}, {'block_Idx': 21, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 262, 'blockInsts': ['<jmp~~0x40078d>']}, {'block_Idx': 385, 'blockInsts': ['<call~~0x401490>']}, {'block_Idx': 107, 'blockInsts': ['<lea~~rax, [rip + 0xb8e1]>', '<mov~~qword ptr [rip + 0xb3c2], rax>', '<mov~~dword ptr [rip + 0xb3c4], 0x226>', '<mov~~rax, qword ptr [rip + 0xffc81]>', '<movzx~~edx, word ptr [rax + 4]>', '<mov~~rax, qword ptr [rip + 0xffc86]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xffc8b]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<lea~~rdi, [rip + 0xb358]>', '<add~~rdi, 0x30>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 205, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 363, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x17f0>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x9ce1]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<xor~~edx, edx>', '<call~~0x500088>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~dword ptr [rsp + 0x2c], r8d>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<jge~~0x400f22>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(26, 21), (232, 236), (347, 351), (160, 183), (107, 122), (81, 14), (267, 86), (56, 76), (35, 227), (147, 160), (29, 34), (2, 4), (92, 99), (342, 347), (108, 34), (281, 288), (359, 363), (2, 61), (217, 224), (93, 273), (236, 246), (39, 21), (98, 107), (288, 305), (20, 26), (305, 330), (0, 2), (9, 14), (40, 47), (1, 3), (55, 56), (99, 108), (367, 371), (100, 82), (14, 21), (86, 92), (194, 217), (61, 72), (363, 367), (27, 33), (1, 14), (21, 29), (72, 40), (28, 34), (385, 387), (47, 56), (183, 194), (29, 35), (243, 86), (76, 85), (39, 20), (371, 375), (312, 151), (71, 82), (266, 86), (151, 108), (61, 71), (329, 151), (93, 151), (251, 262), (129, 147), (224, 232), (33, 39), (385, 396), (21, 28), (52, 61), (86, 93), (375, 379), (34, 40), (92, 100), (391, 396), (379, 385), (0, 1), (40, 46), (28, 35), (501, 151), (35, 86), (330, 342), (205, 61), (268, 281), (246, 251), (20, 27), (14, 20), (355, 359), (46, 55), (122, 129), (262, 268), (351, 355), (85, 98)], 'cdg_edge_info': [(29, 194), (92, 232), (61, 107), (92, 351), (86, 246), (92, 122), (92, 305), (28, 122), (61, 363), (28, 76), (61, 262), (28, 85), (0, 14), (28, 268), (86, 56), (28, 396), (29, 251), (86, 129), (86, 367), (29, 379), (28, 359), (92, 371), (86, 385), (61, 246), (86, 330), (29, 34), (29, 98), (29, 107), (86, 40), (92, 99), (86, 232), (86, 351), (29, 363), (86, 122), (28, 224), (28, 288), (92, 108), (86, 305), (92, 236), (92, 355), (29, 262), (61, 56), (61, 129), (61, 367), (20, 33), (61, 385), (92, 147), (29, 347), (92, 330), (28, 217), (28, 281), (29, 246), (61, 40), (61, 342), (86, 371), (61, 232), (61, 351), (61, 122), (61, 305), (28, 183), (0, 2), (92, 76), (28, 375), (40, 47), (92, 85), (92, 268), (29, 56), (86, 108), (92, 396), (86, 236), (86, 355), (29, 367), (92, 359), (29, 385), (29, 86), (61, 371), (86, 147), (29, 40), (28, 194), (86, 92), (61, 72), (29, 342), (29, 232), (29, 351), (92, 160), (92, 224), (29, 305), (92, 288), (86, 183), (28, 160), (86, 375), (61, 236), (61, 355), (86, 76), (86, 85), (21, 29), (0, 61), (28, 251), (86, 268), (28, 379), (86, 396), (61, 147), (92, 217), (92, 281), (61, 330), (28, 34), (86, 359), (28, 98), (29, 371), (28, 107), (92, 183), (28, 363), (29, 35), (86, 151), (92, 375), (92, 82), (28, 262), (86, 160), (61, 76), (86, 224), (61, 85), (29, 236), (86, 288), (29, 355), (61, 268), (92, 347), (61, 396), (29, 129), (39, 20), (28, 347), (61, 359), (29, 147), (28, 246), (29, 330), (92, 194), (86, 34), (86, 98), (86, 217), (86, 281), (61, 160), (86, 363), (29, 122), (61, 224), (61, 288), (29, 76), (28, 56), (29, 85), (29, 268), (28, 367), (92, 251), (61, 71), (29, 396), (92, 379), (20, 39), (86, 347), (29, 359), (28, 86), (92, 34), (61, 217), (92, 98), (28, 40), (61, 281), (92, 107), (28, 342), (28, 232), (28, 351), (86, 194), (92, 363), (28, 305), (21, 28), (61, 183), (29, 160), (86, 93), (92, 262), (29, 224), (29, 288), (61, 375), (61, 82), (92, 100), (61, 347), (86, 251), (92, 246), (86, 379), (28, 371), (29, 217), (29, 281), (61, 194), (0, 1), (86, 342), (40, 46), (40, 55), (28, 35), (86, 107), (29, 183), (92, 56), (29, 375), (28, 355), (28, 236), (92, 129), (86, 262), (92, 367), (61, 251), (28, 129), (92, 385), (14, 20), (61, 379), (28, 147), (28, 385), (0, 21), (28, 330), (92, 40), (92, 342), (61, 98)], 'ddg_edge_info': [(347, 351), (2, 359), (0, 14), (86, 47), (14, 40), (194, 236), (236, 251), (33, 20), (86, 56), (93, 342), (14, 342), (33, 29), (330, 355), (56, 85), (56, 268), (86, 40), (129, 194), (14, 33), (100, 396), (342, 347), (160, 224), (224, 236), (359, 363), (56, 160), (2, 363), (14, 35), (56, 224), (92, 330), (46, 363), (56, 288), (14, 355), (351, 355), (85, 107), (288, 305), (305, 330), (29, 93), (2, 347), (0, 2), (330, 359), (40, 47), (194, 224), (14, 92), (14, 330), (40, 56), (93, 330), (93, 40), (251, 288), (47, 363), (367, 371), (14, 21), (86, 92), (29, 40), (160, 194), (40, 342), (86, 46), (363, 367), (107, 160), (14, 359), (56, 194), (224, 251), (2, 342), (71, 396), (86, 396), (33, 21), (92, 46), (93, 355), (330, 347), (56, 251), (29, 35), (0, 20), (56, 107), (14, 46), (0, 29), (371, 375), (29, 92), (40, 330), (2, 355), (46, 355), (14, 39), (56, 236), (2, 330), (236, 268), (93, 359), (251, 351), (330, 363), (47, 355), (56, 129), (33, 39), (86, 93), (375, 379), (46, 359), (0, 35), (379, 385), (14, 363), (93, 363), (268, 288), (0, 1), (40, 46), (92, 47), (14, 347), (93, 347), (129, 160), (47, 359), (330, 342), (107, 129), (14, 20), (355, 359), (14, 29), (86, 100), (14, 93), (92, 40), (251, 268), (14, 47), (288, 351), (92, 342), (14, 56)]}]}
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_19'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.LBB0_15'}, {'instIndex': 75, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 76, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 77, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 78, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 81, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 82, 'instruction': 'callq\toutput_configure'}, {'instIndex': 83, 'instruction': 'jmp\t.LBB0_18'}, {'instIndex': 84, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 86, 'instruction': 'jl\t.LBB0_17'}, {'instIndex': 87, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB0_48'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB0_19'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O0/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O0/aacdec.s---aac_decode_init---after
function id: 0
function flag: True
There are 454 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_19'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.LBB0_15'}, {'instIndex': 75, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 76, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 77, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 78, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 81, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 82, 'instruction': 'callq\toutput_configure'}, {'instIndex': 83, 'instruction': 'jmp\t.LBB0_18'}, {'instIndex': 84, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 86, 'instruction': 'jl\t.LBB0_17'}, {'instIndex': 87, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB0_48'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB0_19'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O0/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O0/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1682 nodes and 3034 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 454 instructions in binary file.
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
The execution time of patched subCFG information extraction via angr: 0:00:05.080278
{'aac_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e3>, <DisassemblerInsn "jl" for 0x4001ea>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400200>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "cmp" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "lea" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d9>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "lea" for 0x400187>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "call" for 0x400197>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a85>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001fc>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jne~~0x4001db>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401280>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x400200>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401190>']}], 'cfg_edge_info': [(6, 12), (27, 31), (12, 17), (24, 27), (25, 29), (11, 16), (6, 11), (12, 16), (25, 28), (29, 13), (21, 25), (31, 16), (28, 31), (17, 21), (21, 24), (11, 17)]}]}
{'aac_decode_init': [4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O0/aacdec.o---after
The extraction of function: aac_decode_init
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 546 nodes and 841 edges in CFGEmulated.
It has 546 nodes and 1649 edges in CDG.
It has 4778 nodes and 7305 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194640, 4194651, 4194687, 4194716, 4194727, 4194777, 4194779, 4194796, 4194814]
{4194816, 4194304, 4194818, 4196997, 4195338, 4196235, 4195340, 4196237, 4196621, 4196749, 4194571, 4194835, 4194457, 4194716, 4195486, 4194462, 4195488, 4196386, 4196388, 4194727, 4194478, 4196911, 4194607, 4195634, 4194483, 4195636, 4194869, 4196537, 4196542, 4194626, 4194499, 4196804, 4195782, 4195784, 4196936, 4194640, 4194901, 4194903, 4194777, 4196570, 4194651, 4194779, 4195933, 4194397, 4195935, 4196961, 4195042, 4195044, 4196971, 4194796, 4196084, 4196981, 4195190, 4196086, 4195192, 4196598, 4196986, 4196859, 4194812, 4194557, 4194814, 4194687}
[147, 100, 92, 20, 0, 160, 267, 29, 81, 14, 371, 2, 46, 243, 33, 367, 99, 288, 359, 82, 227, 129, 122, 251, 1, 268, 55, 236, 108, 93, 347, 39, 387, 61, 34, 305, 27, 355, 26, 194, 224, 391, 396, 351, 9, 35, 85, 98, 266, 71, 330, 183, 56, 86, 246, 375, 28, 312, 342, 273, 217, 3, 47, 501, 281, 232, 72, 76, 379, 151, 329, 40, 21, 262, 385, 107, 205, 363, 4, 52]
The execution time of patched slicing information extraction via angr: 0:03:19.172041
{'aac_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40049e>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e3>, <DisassemblerInsn "jl" for 0x4001ea>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x40010b>, <DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "movzx" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x400039>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400044>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "cmp" for 0x400057>, <DisassemblerInsn "jle" for 0x40005b>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4004a0>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "movzx" for 0x4004bf>, <DisassemblerInsn "mov" for 0x4004c3>, <DisassemblerInsn "mov" for 0x4004ca>, <DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "mov" for 0x4004d5>, <DisassemblerInsn "lea" for 0x4004d9>, <DisassemblerInsn "add" for 0x4004e0>, <DisassemblerInsn "mov" for 0x4004e4>, <DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "xor" for 0x4004ef>, <DisassemblerInsn "xor" for 0x4004f2>, <DisassemblerInsn "mov" for 0x4004f5>, <DisassemblerInsn "mov" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400504>, <DisassemblerInsn "mov" for 0x40050c>, <DisassemblerInsn "mov" for 0x400515>, <DisassemblerInsn "mov" for 0x40051d>, <DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "call" for 0x40052d>]'}, {'block_Idx': 267, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "ret" for 0x401186>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 371, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a48>, <DisassemblerInsn "movss" for 0x400a4f>, <DisassemblerInsn "mov" for 0x400a57>, <DisassemblerInsn "call" for 0x400a5c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "call" for 0x400094>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "movss" for 0x400222>, <DisassemblerInsn "movss" for 0x40022a>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 243, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "add" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "jmp" for 0x400140>]'}, {'block_Idx': 367, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2f>, <DisassemblerInsn "movss" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3e>, <DisassemblerInsn "call" for 0x400a43>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 288, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400824>, <DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400832>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "movzx" for 0x400843>, <DisassemblerInsn "mov" for 0x400847>, <DisassemblerInsn "mov" for 0x40084e>, <DisassemblerInsn "mov" for 0x400852>, <DisassemblerInsn "mov" for 0x400859>, <DisassemblerInsn "lea" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "mov" for 0x40086b>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "xor" for 0x400876>, <DisassemblerInsn "xor" for 0x400879>, <DisassemblerInsn "mov" for 0x40087c>, <DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400883>, <DisassemblerInsn "mov" for 0x40088b>, <DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x40089c>, <DisassemblerInsn "mov" for 0x4008a4>, <DisassemblerInsn "mov" for 0x4008ac>, <DisassemblerInsn "call" for 0x4008b4>]'}, {'block_Idx': 359, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c4>, <DisassemblerInsn "add" for 0x4009cc>, <DisassemblerInsn "movss" for 0x4009d3>, <DisassemblerInsn "cvtss2sd" for 0x4009dc>, <DisassemblerInsn "movsd" for 0x4009e0>, <DisassemblerInsn "divsd" for 0x4009e8>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009f1>, <DisassemblerInsn "call" for 0x4009f6>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 227, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401190>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119e>, <DisassemblerInsn "cmp" for 0x4011a2>, <DisassemblerInsn "jl" for 0x4011a7>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40040c>, <DisassemblerInsn "mov" for 0x400413>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "movzx" for 0x40042b>, <DisassemblerInsn "mov" for 0x40042f>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x40043a>, <DisassemblerInsn "mov" for 0x400441>, <DisassemblerInsn "lea" for 0x400445>, <DisassemblerInsn "add" for 0x40044c>, <DisassemblerInsn "mov" for 0x400450>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "xor" for 0x40045b>, <DisassemblerInsn "xor" for 0x40045e>, <DisassemblerInsn "mov" for 0x400461>, <DisassemblerInsn "mov" for 0x400464>, <DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "mov" for 0x400489>, <DisassemblerInsn "mov" for 0x400491>, <DisassemblerInsn "call" for 0x400499>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40040a>]'}, {'block_Idx': 251, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4006f6>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "movzx" for 0x400715>, <DisassemblerInsn "mov" for 0x400719>, <DisassemblerInsn "mov" for 0x400720>, <DisassemblerInsn "mov" for 0x400724>, <DisassemblerInsn "mov" for 0x40072b>, <DisassemblerInsn "lea" for 0x40072f>, <DisassemblerInsn "add" for 0x400736>, <DisassemblerInsn "mov" for 0x40073d>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "xor" for 0x400748>, <DisassemblerInsn "xor" for 0x40074b>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "mov" for 0x40077e>, <DisassemblerInsn "call" for 0x400786>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000be>]'}, {'block_Idx': 268, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40078d>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "mov" for 0x4007a5>, <DisassemblerInsn "movzx" for 0x4007ac>, <DisassemblerInsn "mov" for 0x4007b0>, <DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "mov" for 0x4007bb>, <DisassemblerInsn "mov" for 0x4007c2>, <DisassemblerInsn "lea" for 0x4007c6>, <DisassemblerInsn "add" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "xor" for 0x4007df>, <DisassemblerInsn "xor" for 0x4007e2>, <DisassemblerInsn "mov" for 0x4007e5>, <DisassemblerInsn "mov" for 0x4007e8>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "mov" for 0x4007fc>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "call" for 0x40081d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400255>]'}, {'block_Idx': 236, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40065f>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400677>, <DisassemblerInsn "movzx" for 0x40067e>, <DisassemblerInsn "mov" for 0x400682>, <DisassemblerInsn "mov" for 0x400689>, <DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "mov" for 0x400694>, <DisassemblerInsn "lea" for 0x400698>, <DisassemblerInsn "add" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a6>, <DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "xor" for 0x4006b1>, <DisassemblerInsn "xor" for 0x4006b4>, <DisassemblerInsn "mov" for 0x4006b7>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c6>, <DisassemblerInsn "mov" for 0x4006ce>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "call" for 0x4006ef>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "lea" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "call" for 0x4001d4>]'}, {'block_Idx': 347, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "call" for 0x400908>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 387, 'blockInsts': '[<DisassemblerInsn "push" for 0x401490>, <DisassemblerInsn "cmp" for 0x401491>, <DisassemblerInsn "jne" for 0x401498>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "jge" for 0x40009c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400200>]'}, {'block_Idx': 305, 'blockInsts': '[<DisassemblerInsn "call" for 0x4008b9>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 355, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "add" for 0x400995>, <DisassemblerInsn "movss" for 0x40099c>, <DisassemblerInsn "cvtss2sd" for 0x4009a5>, <DisassemblerInsn "movsd" for 0x4009a9>, <DisassemblerInsn "divsd" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b5>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "call" for 0x4009bf>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012b>]'}, {'block_Idx': 194, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400534>, <DisassemblerInsn "mov" for 0x40053b>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "movzx" for 0x400553>, <DisassemblerInsn "mov" for 0x400557>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "mov" for 0x400569>, <DisassemblerInsn "lea" for 0x40056d>, <DisassemblerInsn "add" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "xor" for 0x400583>, <DisassemblerInsn "xor" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x40058c>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "mov" for 0x4005a0>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "call" for 0x4005c1>]'}, {'block_Idx': 224, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005c8>, <DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d6>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "movzx" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005fd>, <DisassemblerInsn "lea" for 0x400601>, <DisassemblerInsn "add" for 0x400608>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "xor" for 0x40061a>, <DisassemblerInsn "xor" for 0x40061d>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "mov" for 0x40062f>, <DisassemblerInsn "mov" for 0x400637>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "call" for 0x400658>]'}, {'block_Idx': 391, 'blockInsts': '[<DisassemblerInsn "pop" for 0x4014e7>, <DisassemblerInsn "ret" for 0x4014e8>]'}, {'block_Idx': 396, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a7a>, <DisassemblerInsn "mov" for 0x400a85>, <DisassemblerInsn "add" for 0x400a8c>, <DisassemblerInsn "ret" for 0x400a93>]'}, {'block_Idx': 351, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40090d>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "lea" for 0x400925>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400931>, <DisassemblerInsn "mov" for 0x400936>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "xor" for 0x40094a>, <DisassemblerInsn "xor" for 0x40094d>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "mov" for 0x400953>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "mov" for 0x400978>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "call" for 0x400988>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "ret" for 0x401186>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "lea" for 0x400187>, <DisassemblerInsn "mov" for 0x40018c>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "call" for 0x400197>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4002e4>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002fc>, <DisassemblerInsn "movzx" for 0x400303>, <DisassemblerInsn "mov" for 0x400307>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400312>, <DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "lea" for 0x40031d>, <DisassemblerInsn "add" for 0x400324>, <DisassemblerInsn "mov" for 0x400328>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "xor" for 0x400333>, <DisassemblerInsn "xor" for 0x400336>, <DisassemblerInsn "mov" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "call" for 0x400371>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400376>]'}, {'block_Idx': 266, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401256>, <DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "add" for 0x40126e>, <DisassemblerInsn "ret" for 0x401272>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "jmp" for 0x4000a9>]'}, {'block_Idx': 330, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008be>, <DisassemblerInsn "add" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "call" for 0x4008d5>]'}, {'block_Idx': 183, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400532>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400257>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "movzx" for 0x400276>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "lea" for 0x40028d>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "xor" for 0x40029f>, <DisassemblerInsn "xor" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a5>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "call" for 0x4002dd>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "cmp" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 246, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006f4>]'}, {'block_Idx': 375, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a61>, <DisassemblerInsn "call" for 0x400a66>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 312, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401471>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 342, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008da>, <DisassemblerInsn "add" for 0x4008e2>, <DisassemblerInsn "mov" for 0x4008e9>, <DisassemblerInsn "call" for 0x4008f1>]'}, {'block_Idx': 273, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401280>, <DisassemblerInsn "mov" for 0x401284>, <DisassemblerInsn "mov" for 0x401289>, <DisassemblerInsn "mov" for 0x40128e>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129c>, <DisassemblerInsn "mov" for 0x4012a1>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "mov" for 0x4012b1>, <DisassemblerInsn "cmp" for 0x4012b6>, <DisassemblerInsn "je" for 0x4012bb>]'}, {'block_Idx': 217, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005c6>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401080>, <DisassemblerInsn "mov" for 0x401084>, <DisassemblerInsn "cmp" for 0x401089>, <DisassemblerInsn "jg" for 0x40108d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "movss" for 0x400244>, <DisassemblerInsn "movss" for 0x40024c>, <DisassemblerInsn "jmp" for 0x400255>]'}, {'block_Idx': 501, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 281, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400822>]'}, {'block_Idx': 232, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40065d>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ae>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002e2>]'}, {'block_Idx': 379, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a6b>, <DisassemblerInsn "call" for 0x400a70>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001d9>]'}, {'block_Idx': 329, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401471>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x40147d>, <DisassemblerInsn "ret" for 0x401481>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "cmp" for 0x40020a>, <DisassemblerInsn "jne" for 0x400211>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 262, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40078b>]'}, {'block_Idx': 385, 'blockInsts': '[<DisassemblerInsn "call" for 0x400a75>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400378>, <DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "mov" for 0x400390>, <DisassemblerInsn "movzx" for 0x400397>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "lea" for 0x4003b1>, <DisassemblerInsn "add" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "xor" for 0x4003c7>, <DisassemblerInsn "xor" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cd>, <DisassemblerInsn "mov" for 0x4003d0>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "mov" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003ed>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x400405>]'}, {'block_Idx': 205, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401071>, <DisassemblerInsn "add" for 0x401075>, <DisassemblerInsn "ret" for 0x401079>]'}, {'block_Idx': 363, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fb>, <DisassemblerInsn "add" for 0x400a03>, <DisassemblerInsn "movss" for 0x400a0a>, <DisassemblerInsn "cvtss2sd" for 0x400a13>, <DisassemblerInsn "movsd" for 0x400a17>, <DisassemblerInsn "divsd" for 0x400a1f>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "xor" for 0x400a28>, <DisassemblerInsn "call" for 0x400a2a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ee0>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400eee>, <DisassemblerInsn "mov" for 0x400ef3>, <DisassemblerInsn "mov" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "mov" for 0x400f05>, <DisassemblerInsn "mov" for 0x400f09>, <DisassemblerInsn "cmp" for 0x400f0e>, <DisassemblerInsn "jge" for 0x400f11>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401071>, <DisassemblerInsn "add" for 0x401075>, <DisassemblerInsn "ret" for 0x401079>]'}], 'cfg_block_detailed_info': [{'block_Idx': 147, 'blockInsts': ['<jmp~~0x4004a0>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a85>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001fc>']}, {'block_Idx': 20, 'blockInsts': ['<movsxd~~rcx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rip + 0xffeee]>', '<movzx~~eax, byte ptr [rax + rcx]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<jne~~0x40012d>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x168>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rax + 0x98]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jle~~0x4000b3>']}, {'block_Idx': 160, 'blockInsts': ['<lea~~rax, [rip + 0xc509]>', '<mov~~qword ptr [rip + 0xb2ca], rax>', '<mov~~dword ptr [rip + 0xb2cc], 0x148>', '<mov~~rax, qword ptr [rip + 0xffb59]>', '<movzx~~edx, word ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffb5e]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rip + 0xffb63]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<lea~~rdi, [rip + 0xb230]>', '<add~~rdi, 0x60>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 267, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp - 4], 0xb>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x148], eax>', '<mov~~ecx, dword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x144], 0>', '<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 371, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff661]>', '<movss~~xmm0, dword ptr [rip + 0x9c85]>', '<mov~~esi, 0x80>', '<call~~0x5000a0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rax]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<add~~rdx, 8>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~r8d, dword ptr [rax + 0x28]>', '<call~~0x400ee0>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 3>', '<movss~~xmm0, dword ptr [rip + 0xa4ae]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400255>']}, {'block_Idx': 243, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x144], eax>', '<jmp~~0x4000fd>']}, {'block_Idx': 367, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff662]>', '<movss~~xmm0, dword ptr [rip + 0x9ca2]>', '<mov~~esi, 0x400>', '<call~~0x5000a0>']}, {'block_Idx': 99, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 288, 'blockInsts': ['<lea~~rax, [rip + 0xe205]>', '<mov~~qword ptr [rip + 0xafd6], rax>', '<mov~~dword ptr [rip + 0xafd8], 0x1ce>', '<mov~~rax, qword ptr [rip + 0xff7d5]>', '<movzx~~edx, word ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rip + 0xff7da]>', '<mov~~rcx, qword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rip + 0xff7df]>', '<mov~~rax, qword ptr [rax + 0x50]>', '<lea~~rdi, [rip + 0xaeac]>', '<add~~rdi, 0xf0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 359, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1788>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d20]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 227, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 1>', '<jl~~0x4011b0>']}, {'block_Idx': 129, 'blockInsts': ['<lea~~rax, [rip + 0xc0ed]>', '<mov~~qword ptr [rip + 0xb346], rax>', '<mov~~dword ptr [rip + 0xb348], 0x12c>', '<mov~~rax, qword ptr [rip + 0xffbed]>', '<movzx~~edx, word ptr [rax + 6]>', '<mov~~rax, qword ptr [rip + 0xffbf2]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rip + 0xffbf7]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<lea~~rdi, [rip + 0xb2c4]>', '<add~~rdi, 0x48>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 122, 'blockInsts': ['<jmp~~0x40040c>']}, {'block_Idx': 251, 'blockInsts': ['<lea~~rax, [rip + 0xd573]>', '<mov~~qword ptr [rip + 0xb0d4], rax>', '<mov~~dword ptr [rip + 0xb0d6], 0x1fe>', '<mov~~rax, qword ptr [rip + 0xff903]>', '<movzx~~edx, word ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xff908]>', '<mov~~rcx, qword ptr [rax + 0x40]>', '<mov~~rax, qword ptr [rip + 0xff90d]>', '<mov~~rax, qword ptr [rax + 0x40]>', '<lea~~rdi, [rip + 0xafda]>', '<add~~rdi, 0xc0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rax + 0x50]>', '<call~~0x401080>']}, {'block_Idx': 268, 'blockInsts': ['<lea~~rax, [rip + 0xdcdc]>', '<mov~~qword ptr [rip + 0xb055], rax>', '<mov~~dword ptr [rip + 0xb057], 0x16e>', '<mov~~rax, qword ptr [rip + 0xff86c]>', '<movzx~~edx, word ptr [rax + 0x12]>', '<mov~~rax, qword ptr [rip + 0xff871]>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~rax, qword ptr [rip + 0xff876]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<lea~~rdi, [rip + 0xaf43]>', '<add~~rdi, 0xd8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x400257>']}, {'block_Idx': 236, 'blockInsts': ['<lea~~rax, [rip + 0xd1da]>', '<mov~~qword ptr [rip + 0xb153], rax>', '<mov~~dword ptr [rip + 0xb155], 0x10c>', '<mov~~rax, qword ptr [rip + 0xff99a]>', '<movzx~~edx, word ptr [rax + 0xe]>', '<mov~~rax, qword ptr [rip + 0xff99f]>', '<mov~~rcx, qword ptr [rax + 0x38]>', '<mov~~rax, qword ptr [rip + 0xff9a4]>', '<mov~~rax, qword ptr [rax + 0x38]>', '<lea~~rdi, [rip + 0xb071]>', '<add~~rdi, 0xa8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 108, 'blockInsts': ['<jmp~~0x400200>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401280>']}, {'block_Idx': 347, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x3690], 0x1f2e3d4c>', '<call~~0x500060>']}, {'block_Idx': 39, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 387, 'blockInsts': ['<push~~rax>', '<cmp~~dword ptr [rip + 0x16274], 0>', '<jne~~0x4014e7>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000ae>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 305, 'blockInsts': ['<call~~0x500048>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40012f>']}, {'block_Idx': 355, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1720>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d5f]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400142>']}, {'block_Idx': 194, 'blockInsts': ['<lea~~rax, [rip + 0xc995]>', '<mov~~qword ptr [rip + 0xb24e], rax>', '<mov~~dword ptr [rip + 0xb250], 0x126>', '<mov~~rax, qword ptr [rip + 0xffac5]>', '<movzx~~edx, word ptr [rax + 0xa]>', '<mov~~rax, qword ptr [rip + 0xffaca]>', '<mov~~rcx, qword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffacf]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<lea~~rdi, [rip + 0xb19c]>', '<add~~rdi, 0x78>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 224, 'blockInsts': ['<lea~~rax, [rip + 0xcda1]>', '<mov~~qword ptr [rip + 0xb1d2], rax>', '<mov~~dword ptr [rip + 0xb1d4], 0x132>', '<mov~~rax, qword ptr [rip + 0xffa31]>', '<movzx~~edx, word ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rip + 0xffa36]>', '<mov~~rcx, qword ptr [rax + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffa3b]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<lea~~rdi, [rip + 0xb108]>', '<add~~rdi, 0x90>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 391, 'blockInsts': ['<pop~~rax>', '<ret~~>']}, {'block_Idx': 396, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 351, 'blockInsts': ['<lea~~rax, [rip + 0xe85c]>', '<mov~~qword ptr [rip + 0xeddd], rax>', '<mov~~dword ptr [rip + 0xeddf], 0x160>', '<lea~~rdi, [rip + 0xedc4]>', '<mov~~esi, 7>', '<mov~~edx, 0x79>', '<mov~~rcx, qword ptr [rip + 0xff733]>', '<mov~~r9d, 1>', '<mov~~rax, qword ptr [rip + 0xff736]>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401190>']}, {'block_Idx': 85, 'blockInsts': ['<lea~~rax, [rip + 0xb535]>', '<mov~~qword ptr [rip + 0xb43e], rax>', '<mov~~dword ptr [rip + 0xb440], 0x10e>', '<mov~~rax, qword ptr [rip + 0xffd15]>', '<movzx~~edx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rip + 0xffd1a]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffd1f]>', '<mov~~rax, qword ptr [rax + 8]>', '<lea~~rdi, [rip + 0xb3ec]>', '<add~~rdi, 0x18>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400378>']}, {'block_Idx': 266, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x44], 1>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xffffffff>', '<jmp~~0x400a85>']}, {'block_Idx': 330, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1858>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500050>']}, {'block_Idx': 183, 'blockInsts': ['<jmp~~0x400534>']}, {'block_Idx': 56, 'blockInsts': ['<lea~~rax, [rip + 0xaff2]>', '<mov~~qword ptr [rip + 0xb4b3], rax>', '<mov~~dword ptr [rip + 0xb4b5], 0x130>', '<mov~~rax, qword ptr [rip + 0xffda2]>', '<movzx~~edx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffda8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdae]>', '<mov~~rax, qword ptr [rax]>', '<lea~~rdi, [rip + 0xb47c]>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jne~~0x4001db>']}, {'block_Idx': 246, 'blockInsts': ['<jmp~~0x4006f6>']}, {'block_Idx': 375, 'blockInsts': ['<mov~~edi, 0xa>', '<call~~0x5000b8>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x400200>']}, {'block_Idx': 312, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 0x3c0], 0>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 342, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x3670>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500058>']}, {'block_Idx': 273, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x20], r8d>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~rax, qword ptr [rsp + 0x30]>', '<je~~0x4012d1>']}, {'block_Idx': 217, 'blockInsts': ['<jmp~~0x4005c8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, 0x16771>', '<cmp~~eax, dword ptr [rsp - 8]>', '<jg~~0x40109c>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 1>', '<movss~~xmm0, dword ptr [rip + 0xa488]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400257>']}, {'block_Idx': 501, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 281, 'blockInsts': ['<jmp~~0x400824>']}, {'block_Idx': 232, 'blockInsts': ['<jmp~~0x40065f>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x400202>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4002e4>']}, {'block_Idx': 379, 'blockInsts': ['<mov~~edi, 7>', '<call~~0x5000b8>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 329, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x474], 3>', '<jne~~0x400235>']}, {'block_Idx': 21, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 262, 'blockInsts': ['<jmp~~0x40078d>']}, {'block_Idx': 385, 'blockInsts': ['<call~~0x401490>']}, {'block_Idx': 107, 'blockInsts': ['<lea~~rax, [rip + 0xb8e1]>', '<mov~~qword ptr [rip + 0xb3c2], rax>', '<mov~~dword ptr [rip + 0xb3c4], 0x226>', '<mov~~rax, qword ptr [rip + 0xffc81]>', '<movzx~~edx, word ptr [rax + 4]>', '<mov~~rax, qword ptr [rip + 0xffc86]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xffc8b]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<lea~~rdi, [rip + 0xb358]>', '<add~~rdi, 0x30>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 205, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 363, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x17f0>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x9ce1]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<xor~~edx, edx>', '<call~~0x500088>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~dword ptr [rsp + 0x2c], r8d>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<jge~~0x400f22>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(26, 21), (232, 236), (347, 351), (160, 183), (107, 122), (81, 14), (267, 86), (56, 76), (35, 227), (147, 160), (29, 34), (2, 4), (92, 99), (342, 347), (108, 34), (281, 288), (359, 363), (2, 61), (217, 224), (93, 273), (236, 246), (39, 21), (98, 107), (288, 305), (20, 26), (305, 330), (0, 2), (9, 14), (40, 47), (1, 3), (55, 56), (99, 108), (367, 371), (100, 82), (14, 21), (86, 92), (194, 217), (61, 72), (363, 367), (27, 33), (1, 14), (21, 29), (72, 40), (28, 34), (385, 387), (47, 56), (183, 194), (29, 35), (243, 86), (76, 85), (39, 20), (371, 375), (312, 151), (71, 82), (266, 86), (151, 108), (61, 71), (329, 151), (93, 151), (251, 262), (129, 147), (224, 232), (33, 39), (385, 396), (21, 28), (52, 61), (86, 93), (375, 379), (34, 40), (92, 100), (391, 396), (379, 385), (0, 1), (40, 46), (28, 35), (501, 151), (35, 86), (330, 342), (205, 61), (268, 281), (246, 251), (20, 27), (14, 20), (355, 359), (46, 55), (122, 129), (262, 268), (351, 355), (85, 98)], 'cdg_edge_info': [(29, 194), (92, 232), (61, 107), (92, 351), (86, 246), (92, 122), (92, 305), (28, 122), (61, 363), (28, 76), (61, 262), (28, 85), (0, 14), (28, 268), (86, 56), (28, 396), (29, 251), (86, 129), (86, 367), (29, 379), (28, 359), (92, 371), (86, 385), (61, 246), (86, 330), (29, 34), (29, 98), (29, 107), (86, 40), (92, 99), (86, 232), (86, 351), (29, 363), (86, 122), (28, 224), (28, 288), (92, 108), (86, 305), (92, 236), (92, 355), (29, 262), (61, 56), (61, 129), (61, 367), (20, 33), (61, 385), (92, 147), (29, 347), (92, 330), (28, 217), (28, 281), (29, 246), (61, 40), (61, 342), (86, 371), (61, 232), (61, 351), (61, 122), (61, 305), (28, 183), (0, 2), (92, 76), (28, 375), (40, 47), (92, 85), (92, 268), (29, 56), (86, 108), (92, 396), (86, 236), (86, 355), (29, 367), (92, 359), (29, 385), (29, 86), (61, 371), (86, 147), (29, 40), (28, 194), (86, 92), (61, 72), (29, 342), (29, 232), (29, 351), (92, 160), (92, 224), (29, 305), (92, 288), (86, 183), (28, 160), (86, 375), (61, 236), (61, 355), (86, 76), (86, 85), (21, 29), (0, 61), (28, 251), (86, 268), (28, 379), (86, 396), (61, 147), (92, 217), (92, 281), (61, 330), (28, 34), (86, 359), (28, 98), (29, 371), (28, 107), (92, 183), (28, 363), (29, 35), (86, 151), (92, 375), (92, 82), (28, 262), (86, 160), (61, 76), (86, 224), (61, 85), (29, 236), (86, 288), (29, 355), (61, 268), (92, 347), (61, 396), (29, 129), (39, 20), (28, 347), (61, 359), (29, 147), (28, 246), (29, 330), (92, 194), (86, 34), (86, 98), (86, 217), (86, 281), (61, 160), (86, 363), (29, 122), (61, 224), (61, 288), (29, 76), (28, 56), (29, 85), (29, 268), (28, 367), (92, 251), (61, 71), (29, 396), (92, 379), (20, 39), (86, 347), (29, 359), (28, 86), (92, 34), (61, 217), (92, 98), (28, 40), (61, 281), (92, 107), (28, 342), (28, 232), (28, 351), (86, 194), (92, 363), (28, 305), (21, 28), (61, 183), (29, 160), (86, 93), (92, 262), (29, 224), (29, 288), (61, 375), (61, 82), (92, 100), (61, 347), (86, 251), (92, 246), (86, 379), (28, 371), (29, 217), (29, 281), (61, 194), (0, 1), (86, 342), (40, 46), (40, 55), (28, 35), (86, 107), (29, 183), (92, 56), (29, 375), (28, 355), (28, 236), (92, 129), (86, 262), (92, 367), (61, 251), (28, 129), (92, 385), (14, 20), (61, 379), (28, 147), (28, 385), (0, 21), (28, 330), (92, 40), (92, 342), (61, 98)], 'ddg_edge_info': [(347, 351), (2, 359), (0, 14), (86, 47), (14, 40), (194, 236), (236, 251), (33, 20), (86, 56), (93, 342), (14, 342), (33, 29), (330, 355), (56, 85), (56, 268), (86, 40), (129, 194), (14, 33), (100, 396), (342, 347), (160, 224), (224, 236), (359, 363), (56, 160), (2, 363), (14, 35), (56, 224), (92, 330), (46, 363), (56, 288), (14, 355), (351, 355), (85, 107), (288, 305), (305, 330), (29, 93), (2, 347), (0, 2), (330, 359), (40, 47), (194, 224), (14, 92), (14, 330), (40, 56), (93, 330), (93, 40), (251, 288), (47, 363), (367, 371), (14, 21), (86, 92), (29, 40), (160, 194), (40, 342), (86, 46), (363, 367), (107, 160), (14, 359), (56, 194), (224, 251), (2, 342), (71, 396), (86, 396), (33, 21), (92, 46), (93, 355), (330, 347), (56, 251), (29, 35), (0, 20), (56, 107), (14, 46), (0, 29), (371, 375), (29, 92), (40, 330), (2, 355), (46, 355), (14, 39), (56, 236), (2, 330), (236, 268), (93, 359), (251, 351), (330, 363), (47, 355), (56, 129), (33, 39), (86, 93), (375, 379), (46, 359), (0, 35), (379, 385), (14, 363), (93, 363), (268, 288), (0, 1), (40, 46), (92, 47), (14, 347), (93, 347), (129, 160), (47, 359), (330, 342), (107, 129), (14, 20), (355, 359), (14, 29), (86, 100), (14, 93), (92, 40), (251, 268), (14, 47), (288, 351), (92, 342), (14, 56)]}]}
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_19'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpl\t$0, 0x3c(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.LBB0_15'}, {'instIndex': 75, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 76, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 77, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 78, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 81, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 82, 'instruction': 'callq\toutput_configure'}, {'instIndex': 83, 'instruction': 'jmp\t.LBB0_18'}, {'instIndex': 84, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 85, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 86, 'instruction': 'jl\t.LBB0_17'}, {'instIndex': 87, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 88, 'instruction': 'jmp\t.LBB0_48'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB0_19'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.s---aac_decode_init---after
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 7457: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 7457: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1180 nodes and 2198 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 555 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:13.741487
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.294922
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O1/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization O2.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.s---aac_decode_init---after
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 2945: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 2945: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1262 nodes and 2341 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 578 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:13.955554
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.316771
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O2/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization O3.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.s---aac_decode_init---after
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 6969: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 6969: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1583 nodes and 2927 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 578 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:31.260430
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.447322
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/O3/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization Os.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.s---aac_decode_init---after
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 1584: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1584: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.o---after
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1097 nodes and 2034 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 520 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:10.795830
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.318133
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_after/Os/aacdec.o.
{'aac_decode_init': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad---a/libavcodec/aacdec.c
The case of compiler gcc with optimization no.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/no/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/no/aacdec_gcc.s---aac_decode_init---before
function id: 85
function flag: True
There are 509 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 85, 'instruction': 'jns\t.L176'}, {'instIndex': 86, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 87, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 88, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 89, 'instruction': 'jle\t.L176'}, {'instIndex': 90, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 91, 'instruction': 'jmp\t.L169'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 94, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 96, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 97, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 99, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 100, 'instruction': 'call\toutput_configure'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/no/aacdec.o
Binary file does not exist.
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 85, 'instruction': 'jns\t.L176'}, {'instIndex': 86, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 87, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 88, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 89, 'instruction': 'jle\t.L176'}, {'instIndex': 90, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 91, 'instruction': 'jmp\t.L169'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 94, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 96, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 97, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 99, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 100, 'instruction': 'call\toutput_configure'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O0/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O0/aacdec_gcc.s---aac_decode_init---before
function id: 85
function flag: True
There are 509 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 85, 'instruction': 'jns\t.L176'}, {'instIndex': 86, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 87, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 88, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 89, 'instruction': 'jle\t.L176'}, {'instIndex': 90, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 91, 'instruction': 'jmp\t.L169'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 94, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 96, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 97, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 99, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 100, 'instruction': 'call\toutput_configure'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O0/aacdec.o
Binary file does not exist.
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 70, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 71, 'instruction': 'movl\t0x20(%rsp), %edx'}, {'instIndex': 72, 'instruction': 'movl\t%edx, 0x14(%rax)'}, {'instIndex': 73, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x14(%rax), %eax'}, {'instIndex': 75, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 76, 'instruction': 'je\t.L168'}, {'instIndex': 77, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 78, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 79, 'instruction': 'leaq\t0x30(%rsp), %rcx'}, {'instIndex': 80, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 81, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 82, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 83, 'instruction': 'call\tset_default_channel_config'}, {'instIndex': 84, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 85, 'instruction': 'jns\t.L176'}, {'instIndex': 86, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 87, 'instruction': 'movl\t0x120(%rax), %eax'}, {'instIndex': 88, 'instruction': 'cmpl\t$4, %eax'}, {'instIndex': 89, 'instruction': 'jle\t.L176'}, {'instIndex': 90, 'instruction': 'movl\t$-0x41444e49, %eax'}, {'instIndex': 91, 'instruction': 'jmp\t.L169'}, {'instIndex': 92, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 94, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'leaq\t0x214(%rax), %rsi'}, {'instIndex': 96, 'instruction': 'leaq\t0x30(%rsp), %rdx'}, {'instIndex': 97, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 98, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 99, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 100, 'instruction': 'call\toutput_configure'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O1/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O1/aacdec_gcc.s---aac_decode_init---before
function id: 610
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O1/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization O2.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O2/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O2/aacdec_gcc.s---aac_decode_init---before
function id: 572
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O2/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization O3.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O3/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O3/aacdec_gcc.s---aac_decode_init---before
function id: 1349
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/O3/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler gcc with optimization Os.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/Os/aacdec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/Os/aacdec_gcc.s---aac_decode_init---before
function id: 342
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/gcc_before/Os/aacdec.o
Binary file does not exist.
{'aac_decode_init': []}
The case of compiler clang with optimization no.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/no/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/no/aacdec.s---aac_decode_init---before
function id: 0
function flag: True
There are 450 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_17'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 73, 'instruction': 'jge\t.LBB0_16'}, {'instIndex': 74, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 76, 'instruction': 'jl\t.LBB0_16'}, {'instIndex': 77, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB0_46'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 80, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 81, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 82, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 83, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 85, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 86, 'instruction': 'callq\toutput_configure'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/no/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/no/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1679 nodes and 3031 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 450 instructions in binary file.
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
The execution time of patched subCFG information extraction via angr: 0:00:03.672135
{'aac_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001ce>, <DisassemblerInsn "lea" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "call" for 0x4001eb>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f0>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "jmp" for 0x4001b9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "lea" for 0x400183>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "cmp" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "jge" for 0x40019b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401270>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 6, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a75>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401180>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001be>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4001be>']}], 'cfg_edge_info': [(6, 12), (25, 16), (12, 17), (24, 27), (11, 16), (6, 11), (12, 16), (21, 25), (24, 25), (27, 13), (17, 21), (21, 24), (11, 17)]}]}
{'aac_decode_init': [4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/no/aacdec.o---before
The extraction of function: aac_decode_init
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 543 nodes and 838 edges in CFGEmulated.
It has 543 nodes and 1632 edges in CDG.
It has 4773 nodes and 7253 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
{4194304, 4194819, 4194571, 4195470, 4195472, 4196370, 4196372, 4194712, 4194457, 4194717, 4194462, 4196895, 4195618, 4196219, 4195620, 4194853, 4196521, 4196526, 4194734, 4194478, 4194607, 4194483, 4196788, 4195766, 4195768, 4196605, 4196920, 4196733, 4194750, 4194626, 4194499, 4194885, 4194887, 4196554, 4195917, 4195919, 4194640, 4196945, 4195026, 4195028, 4196955, 4194651, 4194397, 4196068, 4196965, 4195174, 4196070, 4195176, 4196582, 4196970, 4196843, 4194800, 4194802, 4196981, 4194557, 4195322, 4194683, 4195324, 4196221}
[106, 20, 382, 360, 0, 191, 180, 214, 99, 29, 14, 278, 229, 2, 393, 4, 33, 384, 86, 364, 388, 326, 327, 233, 344, 1, 372, 264, 127, 55, 120, 248, 145, 498, 285, 259, 265, 157, 3, 39, 61, 339, 93, 27, 26, 356, 302, 263, 52, 71, 46, 85, 98, 28, 202, 34, 56, 368, 92, 47, 72, 240, 81, 309, 221, 270, 35, 76, 376, 21, 224, 82, 40, 9, 352, 348, 243]
The execution time of patched slicing information extraction via angr: 0:03:19.024139
{'aac_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400368>, <DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "movzx" for 0x400387>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "mov" for 0x40039d>, <DisassemblerInsn "lea" for 0x4003a1>, <DisassemblerInsn "add" for 0x4003a8>, <DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "xor" for 0x4003b7>, <DisassemblerInsn "xor" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003ed>, <DisassemblerInsn "call" for 0x4003f5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x40010b>, <DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "movzx" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 382, 'blockInsts': '[<DisassemblerInsn "call" for 0x400a65>]'}, {'block_Idx': 360, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009eb>, <DisassemblerInsn "add" for 0x4009f3>, <DisassemblerInsn "movss" for 0x4009fa>, <DisassemblerInsn "cvtss2sd" for 0x400a03>, <DisassemblerInsn "movsd" for 0x400a07>, <DisassemblerInsn "divsd" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a13>, <DisassemblerInsn "xor" for 0x400a18>, <DisassemblerInsn "call" for 0x400a1a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x400039>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400044>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "cmp" for 0x400057>, <DisassemblerInsn "jle" for 0x40005b>]'}, {'block_Idx': 191, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400524>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "movzx" for 0x400543>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "mov" for 0x400552>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "lea" for 0x40055d>, <DisassemblerInsn "add" for 0x400564>, <DisassemblerInsn "mov" for 0x400568>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "xor" for 0x400573>, <DisassemblerInsn "xor" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400588>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "call" for 0x4005b1>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400522>]'}, {'block_Idx': 214, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005b6>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "jmp" for 0x4001b9>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 278, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400812>]'}, {'block_Idx': 229, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40064d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "call" for 0x400094>]'}, {'block_Idx': 393, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a6a>, <DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ed0>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "mov" for 0x400ed9>, <DisassemblerInsn "mov" for 0x400ede>, <DisassemblerInsn "mov" for 0x400ee3>, <DisassemblerInsn "mov" for 0x400ee8>, <DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "mov" for 0x400ef5>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "cmp" for 0x400efe>, <DisassemblerInsn "jge" for 0x400f01>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "add" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "jmp" for 0x400140>]'}, {'block_Idx': 384, 'blockInsts': '[<DisassemblerInsn "push" for 0x401480>, <DisassemblerInsn "cmp" for 0x401481>, <DisassemblerInsn "jne" for 0x401488>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "jge" for 0x40019b>]'}, {'block_Idx': 364, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a1f>, <DisassemblerInsn "movss" for 0x400a26>, <DisassemblerInsn "mov" for 0x400a2e>, <DisassemblerInsn "call" for 0x400a33>]'}, {'block_Idx': 388, 'blockInsts': '[<DisassemblerInsn "pop" for 0x4014d7>, <DisassemblerInsn "ret" for 0x4014d8>]'}, {'block_Idx': 326, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145b>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 327, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ae>, <DisassemblerInsn "add" for 0x4008b6>, <DisassemblerInsn "mov" for 0x4008bd>, <DisassemblerInsn "call" for 0x4008c5>]'}, {'block_Idx': 233, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40064f>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "movzx" for 0x40066e>, <DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "lea" for 0x400688>, <DisassemblerInsn "add" for 0x40068f>, <DisassemblerInsn "mov" for 0x400696>, <DisassemblerInsn "mov" for 0x40069b>, <DisassemblerInsn "xor" for 0x4006a1>, <DisassemblerInsn "xor" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006aa>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b6>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "call" for 0x4006df>]'}, {'block_Idx': 344, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "call" for 0x4008f8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000be>]'}, {'block_Idx': 372, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a51>, <DisassemblerInsn "call" for 0x400a56>]'}, {'block_Idx': 264, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x400414>, <DisassemblerInsn "movzx" for 0x40041b>, <DisassemblerInsn "mov" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "lea" for 0x400435>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "mov" for 0x400445>, <DisassemblerInsn "xor" for 0x40044b>, <DisassemblerInsn "xor" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400454>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "mov" for 0x400460>, <DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400471>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "call" for 0x400489>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400245>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003fa>]'}, {'block_Idx': 248, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "movzx" for 0x400705>, <DisassemblerInsn "mov" for 0x400709>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "lea" for 0x40071f>, <DisassemblerInsn "add" for 0x400726>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400732>, <DisassemblerInsn "xor" for 0x400738>, <DisassemblerInsn "xor" for 0x40073b>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075e>, <DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "call" for 0x400776>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048e>]'}, {'block_Idx': 498, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 285, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400814>, <DisassemblerInsn "mov" for 0x40081b>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "mov" for 0x40082c>, <DisassemblerInsn "movzx" for 0x400833>, <DisassemblerInsn "mov" for 0x400837>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "lea" for 0x40084d>, <DisassemblerInsn "add" for 0x400854>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400860>, <DisassemblerInsn "xor" for 0x400866>, <DisassemblerInsn "xor" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x40086f>, <DisassemblerInsn "mov" for 0x400873>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "mov" for 0x400883>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x400894>, <DisassemblerInsn "mov" for 0x40089c>, <DisassemblerInsn "call" for 0x4008a4>]'}, {'block_Idx': 259, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40077b>]'}, {'block_Idx': 265, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40077d>, <DisassemblerInsn "mov" for 0x400784>, <DisassemblerInsn "mov" for 0x40078b>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "movzx" for 0x40079c>, <DisassemblerInsn "mov" for 0x4007a0>, <DisassemblerInsn "mov" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ab>, <DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "lea" for 0x4007b6>, <DisassemblerInsn "add" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "xor" for 0x4007cf>, <DisassemblerInsn "xor" for 0x4007d2>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "mov" for 0x4007e4>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "call" for 0x40080d>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400490>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "movzx" for 0x4004af>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "mov" for 0x4004ba>, <DisassemblerInsn "mov" for 0x4004be>, <DisassemblerInsn "mov" for 0x4004c5>, <DisassemblerInsn "lea" for 0x4004c9>, <DisassemblerInsn "add" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004d9>, <DisassemblerInsn "xor" for 0x4004df>, <DisassemblerInsn "xor" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004e8>, <DisassemblerInsn "mov" for 0x4004ec>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400515>, <DisassemblerInsn "call" for 0x40051d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401074>, <DisassemblerInsn "cmp" for 0x401079>, <DisassemblerInsn "jg" for 0x40107d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "jge" for 0x40009c>]'}, {'block_Idx': 339, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ca>, <DisassemblerInsn "add" for 0x4008d2>, <DisassemblerInsn "mov" for 0x4008d9>, <DisassemblerInsn "call" for 0x4008e1>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001ce>, <DisassemblerInsn "lea" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "call" for 0x4001eb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012b>]'}, {'block_Idx': 356, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "add" for 0x4009bc>, <DisassemblerInsn "movss" for 0x4009c3>, <DisassemblerInsn "cvtss2sd" for 0x4009cc>, <DisassemblerInsn "movsd" for 0x4009d0>, <DisassemblerInsn "divsd" for 0x4009d8>, <DisassemblerInsn "mov" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009e1>, <DisassemblerInsn "call" for 0x4009e6>]'}, {'block_Idx': 302, 'blockInsts': '[<DisassemblerInsn "call" for 0x4008a9>]'}, {'block_Idx': 263, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401246>, <DisassemblerInsn "mov" for 0x40124b>, <DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "add" for 0x401065>, <DisassemblerInsn "ret" for 0x401069>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "jmp" for 0x4000a9>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "movss" for 0x400212>, <DisassemblerInsn "movss" for 0x40021a>, <DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002ec>, <DisassemblerInsn "movzx" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "lea" for 0x40030d>, <DisassemblerInsn "add" for 0x400314>, <DisassemblerInsn "mov" for 0x400318>, <DisassemblerInsn "mov" for 0x40031d>, <DisassemblerInsn "xor" for 0x400323>, <DisassemblerInsn "xor" for 0x400326>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400330>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400349>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "call" for 0x400361>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400366>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 202, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40105d>, <DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "add" for 0x401065>, <DisassemblerInsn "ret" for 0x401069>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f0>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400247>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "movzx" for 0x400266>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "lea" for 0x40027d>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "xor" for 0x40028f>, <DisassemblerInsn "xor" for 0x400292>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002cd>]'}, {'block_Idx': 368, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a38>, <DisassemblerInsn "movss" for 0x400a3f>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "call" for 0x400a4c>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "cmp" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movss" for 0x400234>, <DisassemblerInsn "movss" for 0x40023c>, <DisassemblerInsn "jmp" for 0x400245>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ae>]'}, {'block_Idx': 240, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "mov" for 0x401172>, <DisassemblerInsn "ret" for 0x401176>]'}, {'block_Idx': 309, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143b>, <DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145b>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 221, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005b8>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005d0>, <DisassemblerInsn "movzx" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005ed>, <DisassemblerInsn "lea" for 0x4005f1>, <DisassemblerInsn "add" for 0x4005f8>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400604>, <DisassemblerInsn "xor" for 0x40060a>, <DisassemblerInsn "xor" for 0x40060d>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 270, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401270>, <DisassemblerInsn "mov" for 0x401274>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "mov" for 0x40127e>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x40128c>, <DisassemblerInsn "mov" for 0x401291>, <DisassemblerInsn "mov" for 0x401294>, <DisassemblerInsn "mov" for 0x401299>, <DisassemblerInsn "mov" for 0x4012a1>, <DisassemblerInsn "cmp" for 0x4012a6>, <DisassemblerInsn "je" for 0x4012ab>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "lea" for 0x400183>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d2>]'}, {'block_Idx': 376, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a5b>, <DisassemblerInsn "call" for 0x400a60>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 224, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401180>, <DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x40118e>, <DisassemblerInsn "cmp" for 0x401192>, <DisassemblerInsn "jl" for 0x401197>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "cmp" for 0x4001fa>, <DisassemblerInsn "jne" for 0x400201>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401172>, <DisassemblerInsn "ret" for 0x401176>]'}, {'block_Idx': 352, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "add" for 0x400985>, <DisassemblerInsn "movss" for 0x40098c>, <DisassemblerInsn "cvtss2sd" for 0x400995>, <DisassemblerInsn "movsd" for 0x400999>, <DisassemblerInsn "divsd" for 0x4009a1>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "mov" for 0x4009aa>, <DisassemblerInsn "call" for 0x4009af>]'}, {'block_Idx': 348, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "lea" for 0x400915>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x400921>, <DisassemblerInsn "mov" for 0x400926>, <DisassemblerInsn "mov" for 0x40092d>, <DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "xor" for 0x40093a>, <DisassemblerInsn "xor" for 0x40093d>, <DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "mov" for 0x400947>, <DisassemblerInsn "mov" for 0x40094f>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "call" for 0x400978>]'}, {'block_Idx': 243, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006e4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 106, 'blockInsts': ['<lea~~rax, [rip + 0xb8e1]>', '<mov~~qword ptr [rip + 0xb3c2], rax>', '<mov~~dword ptr [rip + 0xb3c4], 0x226>', '<mov~~rax, qword ptr [rip + 0xffc91]>', '<movzx~~edx, word ptr [rax + 4]>', '<mov~~rax, qword ptr [rip + 0xffc96]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xffc9b]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<lea~~rdi, [rip + 0xb358]>', '<add~~rdi, 0x30>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 20, 'blockInsts': ['<movsxd~~rcx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rip + 0xffeee]>', '<movzx~~eax, byte ptr [rax + rcx]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<jne~~0x40012d>']}, {'block_Idx': 382, 'blockInsts': ['<call~~0x401480>']}, {'block_Idx': 360, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x17f0>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x9ce1]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<xor~~edx, edx>', '<call~~0x500088>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x168>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rax + 0x98]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jle~~0x4000b3>']}, {'block_Idx': 191, 'blockInsts': ['<lea~~rax, [rip + 0xc995]>', '<mov~~qword ptr [rip + 0xb24e], rax>', '<mov~~dword ptr [rip + 0xb250], 0x126>', '<mov~~rax, qword ptr [rip + 0xffad5]>', '<movzx~~edx, word ptr [rax + 0xa]>', '<mov~~rax, qword ptr [rip + 0xffada]>', '<mov~~rcx, qword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffadf]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<lea~~rdi, [rip + 0xb19c]>', '<add~~rdi, 0x78>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 180, 'blockInsts': ['<jmp~~0x400524>']}, {'block_Idx': 214, 'blockInsts': ['<jmp~~0x4005b8>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a75>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x148], eax>', '<mov~~ecx, dword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x144], 0>', '<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 278, 'blockInsts': ['<jmp~~0x400814>']}, {'block_Idx': 229, 'blockInsts': ['<jmp~~0x40064f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rax]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<add~~rdx, 8>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~r8d, dword ptr [rax + 0x28]>', '<call~~0x400ed0>']}, {'block_Idx': 393, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~dword ptr [rsp + 0x2c], r8d>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<jge~~0x400f12>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x144], eax>', '<jmp~~0x4000fd>']}, {'block_Idx': 384, 'blockInsts': ['<push~~rax>', '<cmp~~dword ptr [rip + 0x16274], 0>', '<jne~~0x4014d7>']}, {'block_Idx': 86, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4001be>']}, {'block_Idx': 364, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff672]>', '<movss~~xmm0, dword ptr [rip + 0x9ca2]>', '<mov~~esi, 0x400>', '<call~~0x5000a0>']}, {'block_Idx': 388, 'blockInsts': ['<pop~~rax>', '<ret~~>']}, {'block_Idx': 326, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 327, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1858>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500050>']}, {'block_Idx': 233, 'blockInsts': ['<lea~~rax, [rip + 0xd1da]>', '<mov~~qword ptr [rip + 0xb153], rax>', '<mov~~dword ptr [rip + 0xb155], 0x10c>', '<mov~~rax, qword ptr [rip + 0xff9aa]>', '<movzx~~edx, word ptr [rax + 0xe]>', '<mov~~rax, qword ptr [rip + 0xff9af]>', '<mov~~rcx, qword ptr [rax + 0x38]>', '<mov~~rax, qword ptr [rip + 0xff9b4]>', '<mov~~rax, qword ptr [rax + 0x38]>', '<lea~~rdi, [rip + 0xb071]>', '<add~~rdi, 0xa8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 344, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x3690], 0x1f2e3d4c>', '<call~~0x500060>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rax + 0x50]>', '<call~~0x401070>']}, {'block_Idx': 372, 'blockInsts': ['<mov~~edi, 0xa>', '<call~~0x5000b8>']}, {'block_Idx': 264, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 127, 'blockInsts': ['<lea~~rax, [rip + 0xc0ed]>', '<mov~~qword ptr [rip + 0xb346], rax>', '<mov~~dword ptr [rip + 0xb348], 0x12c>', '<mov~~rax, qword ptr [rip + 0xffbfd]>', '<movzx~~edx, word ptr [rax + 6]>', '<mov~~rax, qword ptr [rip + 0xffc02]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rip + 0xffc07]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<lea~~rdi, [rip + 0xb2c4]>', '<add~~rdi, 0x48>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x400247>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x4003fc>']}, {'block_Idx': 248, 'blockInsts': ['<lea~~rax, [rip + 0xd573]>', '<mov~~qword ptr [rip + 0xb0d4], rax>', '<mov~~dword ptr [rip + 0xb0d6], 0x1fe>', '<mov~~rax, qword ptr [rip + 0xff913]>', '<movzx~~edx, word ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xff918]>', '<mov~~rcx, qword ptr [rax + 0x40]>', '<mov~~rax, qword ptr [rip + 0xff91d]>', '<mov~~rax, qword ptr [rax + 0x40]>', '<lea~~rdi, [rip + 0xafda]>', '<add~~rdi, 0xc0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 145, 'blockInsts': ['<jmp~~0x400490>']}, {'block_Idx': 498, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 285, 'blockInsts': ['<lea~~rax, [rip + 0xe205]>', '<mov~~qword ptr [rip + 0xafd6], rax>', '<mov~~dword ptr [rip + 0xafd8], 0x1ce>', '<mov~~rax, qword ptr [rip + 0xff7e5]>', '<movzx~~edx, word ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rip + 0xff7ea]>', '<mov~~rcx, qword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rip + 0xff7ef]>', '<mov~~rax, qword ptr [rax + 0x50]>', '<lea~~rdi, [rip + 0xaeac]>', '<add~~rdi, 0xf0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 259, 'blockInsts': ['<jmp~~0x40077d>']}, {'block_Idx': 265, 'blockInsts': ['<lea~~rax, [rip + 0xdcdc]>', '<mov~~qword ptr [rip + 0xb055], rax>', '<mov~~dword ptr [rip + 0xb057], 0x16e>', '<mov~~rax, qword ptr [rip + 0xff87c]>', '<movzx~~edx, word ptr [rax + 0x12]>', '<mov~~rax, qword ptr [rip + 0xff881]>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~rax, qword ptr [rip + 0xff886]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<lea~~rdi, [rip + 0xaf43]>', '<add~~rdi, 0xd8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 157, 'blockInsts': ['<lea~~rax, [rip + 0xc509]>', '<mov~~qword ptr [rip + 0xb2ca], rax>', '<mov~~dword ptr [rip + 0xb2cc], 0x148>', '<mov~~rax, qword ptr [rip + 0xffb69]>', '<movzx~~edx, word ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffb6e]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rip + 0xffb73]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<lea~~rdi, [rip + 0xb230]>', '<add~~rdi, 0x60>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, 0x16771>', '<cmp~~eax, dword ptr [rsp - 8]>', '<jg~~0x40108c>']}, {'block_Idx': 39, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000ae>']}, {'block_Idx': 339, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x3670>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500058>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401270>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40012f>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400142>']}, {'block_Idx': 356, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1788>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d20]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 302, 'blockInsts': ['<call~~0x500048>']}, {'block_Idx': 263, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x44], 1>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xffffffff>', '<jmp~~0x400a75>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 3>', '<movss~~xmm0, dword ptr [rip + 0xa4ae]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400245>']}, {'block_Idx': 85, 'blockInsts': ['<lea~~rax, [rip + 0xb535]>', '<mov~~qword ptr [rip + 0xb43e], rax>', '<mov~~dword ptr [rip + 0xb440], 0x10e>', '<mov~~rax, qword ptr [rip + 0xffd25]>', '<movzx~~edx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rip + 0xffd2a]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffd2f]>', '<mov~~rax, qword ptr [rax + 8]>', '<lea~~rdi, [rip + 0xb3ec]>', '<add~~rdi, 0x18>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400368>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 202, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 56, 'blockInsts': ['<lea~~rax, [rip + 0xaff2]>', '<mov~~qword ptr [rip + 0xb4b3], rax>', '<mov~~dword ptr [rip + 0xb4b5], 0x130>', '<mov~~rax, qword ptr [rip + 0xffdb2]>', '<movzx~~edx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdb8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdbe]>', '<mov~~rax, qword ptr [rax]>', '<lea~~rdi, [rip + 0xb47c]>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 368, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff671]>', '<movss~~xmm0, dword ptr [rip + 0x9c85]>', '<mov~~esi, 0x80>', '<call~~0x5000a0>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001be>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 1>', '<movss~~xmm0, dword ptr [rip + 0xa488]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400247>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 240, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp - 4], 0xb>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 309, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 0x3c0], 0>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 221, 'blockInsts': ['<lea~~rax, [rip + 0xcda1]>', '<mov~~qword ptr [rip + 0xb1d2], rax>', '<mov~~dword ptr [rip + 0xb1d4], 0x132>', '<mov~~rax, qword ptr [rip + 0xffa41]>', '<movzx~~edx, word ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rip + 0xffa46]>', '<mov~~rcx, qword ptr [rax + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffa4b]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<lea~~rdi, [rip + 0xb108]>', '<add~~rdi, 0x90>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 270, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x20], r8d>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~rax, qword ptr [rsp + 0x30]>', '<je~~0x4012c1>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401180>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4002d4>']}, {'block_Idx': 376, 'blockInsts': ['<mov~~edi, 7>', '<call~~0x5000b8>']}, {'block_Idx': 21, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 224, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 1>', '<jl~~0x4011a0>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x474], 3>', '<jne~~0x400225>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 352, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1720>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d5f]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 348, 'blockInsts': ['<lea~~rax, [rip + 0xe85c]>', '<mov~~qword ptr [rip + 0xeddd], rax>', '<mov~~dword ptr [rip + 0xeddf], 0x160>', '<lea~~rdi, [rip + 0xedc4]>', '<mov~~esi, 7>', '<mov~~edx, 0x79>', '<mov~~rcx, qword ptr [rip + 0xff743]>', '<mov~~r9d, 1>', '<mov~~rax, qword ptr [rip + 0xff746]>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 243, 'blockInsts': ['<jmp~~0x4006e6>']}], 'cfg_edge_info': [(26, 21), (259, 265), (265, 278), (302, 327), (221, 229), (81, 14), (157, 180), (56, 76), (29, 34), (2, 4), (127, 145), (92, 99), (2, 61), (191, 214), (278, 285), (39, 21), (20, 26), (263, 86), (0, 2), (9, 14), (40, 47), (248, 259), (1, 3), (106, 120), (498, 34), (55, 56), (35, 224), (180, 191), (240, 86), (14, 21), (86, 92), (61, 72), (27, 33), (1, 14), (21, 29), (72, 40), (202, 61), (28, 34), (47, 56), (327, 339), (29, 35), (348, 352), (233, 243), (76, 85), (344, 348), (39, 20), (145, 157), (264, 86), (372, 376), (326, 34), (368, 372), (71, 82), (388, 393), (61, 71), (93, 270), (99, 82), (33, 39), (243, 248), (21, 28), (52, 61), (86, 93), (285, 302), (352, 356), (34, 40), (309, 34), (93, 34), (382, 384), (382, 393), (229, 233), (98, 106), (0, 1), (40, 46), (92, 93), (28, 35), (120, 127), (35, 86), (364, 368), (20, 27), (360, 364), (376, 382), (14, 20), (46, 55), (339, 344), (356, 360), (85, 98), (214, 221)], 'cdg_edge_info': [(86, 127), (28, 348), (86, 191), (92, 360), (61, 180), (61, 372), (28, 76), (28, 259), (28, 85), (0, 14), (29, 233), (86, 56), (92, 106), (86, 120), (92, 344), (86, 248), (92, 243), (86, 376), (61, 356), (61, 127), (61, 191), (29, 34), (29, 98), (86, 40), (92, 145), (92, 99), (29, 180), (61, 157), (86, 360), (61, 221), (29, 372), (28, 352), (61, 285), (61, 56), (86, 259), (92, 364), (61, 120), (61, 248), (20, 33), (61, 376), (28, 382), (86, 106), (28, 327), (29, 356), (92, 339), (29, 127), (61, 214), (61, 40), (29, 191), (61, 278), (92, 348), (86, 243), (92, 229), (92, 302), (61, 360), (28, 302), (86, 145), (0, 2), (29, 157), (92, 76), (92, 259), (92, 85), (40, 47), (29, 285), (28, 265), (29, 221), (29, 56), (29, 120), (28, 393), (29, 248), (86, 364), (61, 106), (29, 376), (61, 344), (86, 382), (61, 243), (29, 86), (29, 214), (28, 368), (86, 92), (29, 40), (61, 72), (29, 278), (86, 339), (61, 145), (86, 229), (86, 348), (29, 360), (86, 302), (92, 352), (28, 233), (86, 76), (61, 364), (86, 85), (21, 29), (0, 61), (29, 106), (92, 382), (29, 344), (92, 327), (29, 243), (28, 34), (28, 98), (61, 339), (86, 368), (61, 229), (61, 348), (61, 302), (28, 180), (29, 145), (29, 35), (28, 372), (92, 82), (61, 76), (92, 265), (61, 259), (61, 85), (92, 393), (86, 233), (86, 352), (29, 364), (39, 20), (28, 356), (28, 127), (92, 368), (28, 191), (86, 327), (86, 34), (29, 339), (86, 98), (29, 229), (29, 348), (28, 157), (28, 221), (28, 285), (61, 352), (29, 76), (92, 233), (28, 56), (28, 120), (29, 259), (29, 85), (28, 248), (86, 265), (61, 71), (28, 376), (86, 393), (20, 39), (61, 382), (28, 86), (61, 327), (92, 34), (86, 356), (28, 214), (28, 40), (92, 98), (28, 278), (28, 229), (92, 180), (28, 360), (21, 28), (92, 372), (86, 93), (86, 157), (86, 221), (61, 82), (86, 285), (29, 352), (61, 265), (61, 393), (28, 106), (28, 344), (92, 356), (28, 243), (92, 127), (29, 382), (29, 327), (92, 191), (86, 214), (61, 368), (86, 278), (0, 1), (40, 46), (28, 145), (92, 93), (28, 35), (40, 55), (92, 157), (92, 221), (29, 302), (92, 285), (86, 180), (92, 56), (92, 120), (86, 372), (29, 265), (61, 233), (92, 248), (28, 364), (29, 393), (92, 376), (14, 20), (86, 344), (0, 21), (92, 214), (92, 40), (92, 278), (28, 339), (61, 98), (29, 368)], 'ddg_edge_info': [(106, 157), (0, 14), (14, 40), (302, 327), (33, 20), (33, 29), (14, 360), (327, 356), (127, 191), (56, 85), (14, 33), (92, 99), (191, 221), (14, 344), (93, 344), (14, 35), (157, 221), (92, 339), (106, 127), (221, 233), (248, 348), (29, 93), (327, 360), (0, 2), (2, 356), (40, 47), (46, 356), (14, 92), (40, 56), (14, 339), (327, 344), (93, 360), (56, 265), (29, 40), (14, 21), (233, 248), (47, 356), (157, 191), (2, 360), (46, 360), (92, 327), (33, 21), (14, 352), (56, 233), (92, 46), (327, 339), (2, 344), (29, 35), (14, 327), (248, 265), (348, 352), (92, 393), (0, 20), (14, 46), (93, 339), (344, 348), (0, 29), (85, 106), (47, 360), (29, 92), (40, 339), (372, 376), (14, 39), (368, 372), (56, 127), (56, 191), (327, 352), (2, 339), (71, 393), (56, 157), (56, 221), (56, 285), (233, 265), (99, 393), (93, 352), (56, 248), (33, 39), (221, 248), (285, 348), (285, 302), (352, 356), (93, 327), (0, 35), (40, 327), (2, 352), (46, 352), (0, 1), (40, 46), (92, 93), (56, 106), (127, 157), (92, 47), (191, 233), (248, 285), (2, 327), (14, 356), (93, 356), (364, 368), (360, 364), (376, 382), (14, 20), (14, 29), (14, 93), (339, 344), (356, 360), (92, 40), (265, 285), (14, 47), (47, 352), (14, 56)]}]}
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_17'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 73, 'instruction': 'jge\t.LBB0_16'}, {'instIndex': 74, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 76, 'instruction': 'jl\t.LBB0_16'}, {'instIndex': 77, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB0_46'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 80, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 81, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 82, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 83, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 85, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 86, 'instruction': 'callq\toutput_configure'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O0/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O0/aacdec.s---aac_decode_init---before
function id: 0
function flag: True
There are 450 instructions for function: aac_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '589', 'end': 599}, 'before': {'start': '589', 'end': 598}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_17'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 73, 'instruction': 'jge\t.LBB0_16'}, {'instIndex': 74, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 76, 'instruction': 'jl\t.LBB0_16'}, {'instIndex': 77, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB0_46'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 80, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 81, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 82, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 83, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 85, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 86, 'instruction': 'callq\toutput_configure'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O0/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O0/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1679 nodes and 3031 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 450 instructions in binary file.
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
The execution time of patched subCFG information extraction via angr: 0:00:05.209781
{'aac_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001ce>, <DisassemblerInsn "lea" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "call" for 0x4001eb>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f0>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "jmp" for 0x4001b9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "lea" for 0x400183>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "cmp" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "jge" for 0x40019b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401270>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 6, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a75>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401180>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001be>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4001be>']}], 'cfg_edge_info': [(6, 12), (25, 16), (12, 17), (24, 27), (11, 16), (6, 11), (12, 16), (21, 25), (24, 25), (27, 13), (17, 21), (21, 24), (11, 17)]}]}
{'aac_decode_init': [4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O0/aacdec.o---before
The extraction of function: aac_decode_init
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 543 nodes and 838 edges in CFGEmulated.
It has 543 nodes and 1632 edges in CDG.
It has 4773 nodes and 7253 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194640, 4194651, 4194683, 4194712, 4194717, 4194734, 4194750]
{4194304, 4194819, 4194571, 4195470, 4195472, 4196370, 4196372, 4194712, 4194457, 4194717, 4194462, 4196895, 4195618, 4196219, 4195620, 4194853, 4196521, 4196526, 4194734, 4194478, 4194607, 4194483, 4196788, 4195766, 4195768, 4196605, 4196920, 4196733, 4194750, 4194626, 4194499, 4194885, 4194887, 4196554, 4195917, 4195919, 4194640, 4196945, 4195026, 4195028, 4196955, 4194651, 4194397, 4196068, 4196965, 4195174, 4196070, 4195176, 4196582, 4196970, 4196843, 4194800, 4194802, 4196981, 4194557, 4195322, 4194683, 4195324, 4196221}
[106, 20, 382, 360, 0, 191, 180, 214, 99, 29, 14, 278, 229, 2, 393, 4, 33, 384, 86, 364, 388, 326, 327, 233, 344, 1, 372, 264, 127, 55, 120, 248, 145, 498, 285, 259, 265, 157, 3, 39, 61, 339, 93, 27, 26, 356, 302, 263, 52, 71, 46, 85, 98, 28, 202, 34, 56, 368, 92, 47, 72, 240, 81, 309, 221, 270, 35, 76, 376, 21, 224, 82, 40, 9, 352, 348, 243]
The execution time of patched slicing information extraction via angr: 0:03:19.642092
{'aac_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400368>, <DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "movzx" for 0x400387>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "mov" for 0x40039d>, <DisassemblerInsn "lea" for 0x4003a1>, <DisassemblerInsn "add" for 0x4003a8>, <DisassemblerInsn "mov" for 0x4003ac>, <DisassemblerInsn "mov" for 0x4003b1>, <DisassemblerInsn "xor" for 0x4003b7>, <DisassemblerInsn "xor" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "mov" for 0x4003c4>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "mov" for 0x4003ed>, <DisassemblerInsn "call" for 0x4003f5>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x40010b>, <DisassemblerInsn "mov" for 0x400113>, <DisassemblerInsn "movzx" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400126>, <DisassemblerInsn "jne" for 0x400129>]'}, {'block_Idx': 382, 'blockInsts': '[<DisassemblerInsn "call" for 0x400a65>]'}, {'block_Idx': 360, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009eb>, <DisassemblerInsn "add" for 0x4009f3>, <DisassemblerInsn "movss" for 0x4009fa>, <DisassemblerInsn "cvtss2sd" for 0x400a03>, <DisassemblerInsn "movsd" for 0x400a07>, <DisassemblerInsn "divsd" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a13>, <DisassemblerInsn "xor" for 0x400a18>, <DisassemblerInsn "call" for 0x400a1a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002e>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x400039>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400044>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "cmp" for 0x400057>, <DisassemblerInsn "jle" for 0x40005b>]'}, {'block_Idx': 191, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400524>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "movzx" for 0x400543>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "mov" for 0x400552>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "lea" for 0x40055d>, <DisassemblerInsn "add" for 0x400564>, <DisassemblerInsn "mov" for 0x400568>, <DisassemblerInsn "mov" for 0x40056d>, <DisassemblerInsn "xor" for 0x400573>, <DisassemblerInsn "xor" for 0x400576>, <DisassemblerInsn "mov" for 0x400579>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400588>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "call" for 0x4005b1>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400522>]'}, {'block_Idx': 214, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005b6>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "jmp" for 0x4001b9>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000ca>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 278, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400812>]'}, {'block_Idx': 229, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40064d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "add" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "call" for 0x400094>]'}, {'block_Idx': 393, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a6a>, <DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ed0>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "mov" for 0x400ed9>, <DisassemblerInsn "mov" for 0x400ede>, <DisassemblerInsn "mov" for 0x400ee3>, <DisassemblerInsn "mov" for 0x400ee8>, <DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "mov" for 0x400ef5>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "cmp" for 0x400efe>, <DisassemblerInsn "jge" for 0x400f01>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012f>, <DisassemblerInsn "add" for 0x400136>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "jmp" for 0x400140>]'}, {'block_Idx': 384, 'blockInsts': '[<DisassemblerInsn "push" for 0x401480>, <DisassemblerInsn "cmp" for 0x401481>, <DisassemblerInsn "jne" for 0x401488>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400198>, <DisassemblerInsn "jge" for 0x40019b>]'}, {'block_Idx': 364, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a1f>, <DisassemblerInsn "movss" for 0x400a26>, <DisassemblerInsn "mov" for 0x400a2e>, <DisassemblerInsn "call" for 0x400a33>]'}, {'block_Idx': 388, 'blockInsts': '[<DisassemblerInsn "pop" for 0x4014d7>, <DisassemblerInsn "ret" for 0x4014d8>]'}, {'block_Idx': 326, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145b>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 327, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ae>, <DisassemblerInsn "add" for 0x4008b6>, <DisassemblerInsn "mov" for 0x4008bd>, <DisassemblerInsn "call" for 0x4008c5>]'}, {'block_Idx': 233, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40064f>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "movzx" for 0x40066e>, <DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "lea" for 0x400688>, <DisassemblerInsn "add" for 0x40068f>, <DisassemblerInsn "mov" for 0x400696>, <DisassemblerInsn "mov" for 0x40069b>, <DisassemblerInsn "xor" for 0x4006a1>, <DisassemblerInsn "xor" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006aa>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b6>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "mov" for 0x4006cf>, <DisassemblerInsn "mov" for 0x4006d7>, <DisassemblerInsn "call" for 0x4006df>]'}, {'block_Idx': 344, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "call" for 0x4008f8>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b3>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000be>]'}, {'block_Idx': 372, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a51>, <DisassemblerInsn "call" for 0x400a56>]'}, {'block_Idx': 264, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4003fc>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x400414>, <DisassemblerInsn "movzx" for 0x40041b>, <DisassemblerInsn "mov" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "lea" for 0x400435>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "mov" for 0x400445>, <DisassemblerInsn "xor" for 0x40044b>, <DisassemblerInsn "xor" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400454>, <DisassemblerInsn "mov" for 0x400458>, <DisassemblerInsn "mov" for 0x400460>, <DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400471>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x400481>, <DisassemblerInsn "call" for 0x400489>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400245>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003fa>]'}, {'block_Idx': 248, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "movzx" for 0x400705>, <DisassemblerInsn "mov" for 0x400709>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "lea" for 0x40071f>, <DisassemblerInsn "add" for 0x400726>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400732>, <DisassemblerInsn "xor" for 0x400738>, <DisassemblerInsn "xor" for 0x40073b>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075e>, <DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "call" for 0x400776>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40048e>]'}, {'block_Idx': 498, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 285, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400814>, <DisassemblerInsn "mov" for 0x40081b>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "mov" for 0x40082c>, <DisassemblerInsn "movzx" for 0x400833>, <DisassemblerInsn "mov" for 0x400837>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "lea" for 0x40084d>, <DisassemblerInsn "add" for 0x400854>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400860>, <DisassemblerInsn "xor" for 0x400866>, <DisassemblerInsn "xor" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x40086f>, <DisassemblerInsn "mov" for 0x400873>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "mov" for 0x400883>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x400894>, <DisassemblerInsn "mov" for 0x40089c>, <DisassemblerInsn "call" for 0x4008a4>]'}, {'block_Idx': 259, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40077b>]'}, {'block_Idx': 265, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40077d>, <DisassemblerInsn "mov" for 0x400784>, <DisassemblerInsn "mov" for 0x40078b>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "movzx" for 0x40079c>, <DisassemblerInsn "mov" for 0x4007a0>, <DisassemblerInsn "mov" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ab>, <DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "lea" for 0x4007b6>, <DisassemblerInsn "add" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "xor" for 0x4007cf>, <DisassemblerInsn "xor" for 0x4007d2>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "mov" for 0x4007e4>, <DisassemblerInsn "mov" for 0x4007ec>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "call" for 0x40080d>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400490>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "movzx" for 0x4004af>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "mov" for 0x4004ba>, <DisassemblerInsn "mov" for 0x4004be>, <DisassemblerInsn "mov" for 0x4004c5>, <DisassemblerInsn "lea" for 0x4004c9>, <DisassemblerInsn "add" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004d9>, <DisassemblerInsn "xor" for 0x4004df>, <DisassemblerInsn "xor" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004e8>, <DisassemblerInsn "mov" for 0x4004ec>, <DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "mov" for 0x400515>, <DisassemblerInsn "call" for 0x40051d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401074>, <DisassemblerInsn "cmp" for 0x401079>, <DisassemblerInsn "jg" for 0x40107d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400105>, <DisassemblerInsn "jae" for 0x400109>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400099>, <DisassemblerInsn "jge" for 0x40009c>]'}, {'block_Idx': 339, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ca>, <DisassemblerInsn "add" for 0x4008d2>, <DisassemblerInsn "mov" for 0x4008d9>, <DisassemblerInsn "call" for 0x4008e1>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001ce>, <DisassemblerInsn "lea" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "call" for 0x4001eb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012b>]'}, {'block_Idx': 356, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "add" for 0x4009bc>, <DisassemblerInsn "movss" for 0x4009c3>, <DisassemblerInsn "cvtss2sd" for 0x4009cc>, <DisassemblerInsn "movsd" for 0x4009d0>, <DisassemblerInsn "divsd" for 0x4009d8>, <DisassemblerInsn "mov" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009e1>, <DisassemblerInsn "call" for 0x4009e6>]'}, {'block_Idx': 302, 'blockInsts': '[<DisassemblerInsn "call" for 0x4008a9>]'}, {'block_Idx': 263, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401246>, <DisassemblerInsn "mov" for 0x40124b>, <DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "add" for 0x401065>, <DisassemblerInsn "ret" for 0x401069>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "jmp" for 0x4000a9>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "movss" for 0x400212>, <DisassemblerInsn "movss" for 0x40021a>, <DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "mov" for 0x4002ec>, <DisassemblerInsn "movzx" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "lea" for 0x40030d>, <DisassemblerInsn "add" for 0x400314>, <DisassemblerInsn "mov" for 0x400318>, <DisassemblerInsn "mov" for 0x40031d>, <DisassemblerInsn "xor" for 0x400323>, <DisassemblerInsn "xor" for 0x400326>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400330>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400349>, <DisassemblerInsn "mov" for 0x400351>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "call" for 0x400361>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400366>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016d>, <DisassemblerInsn "cmp" for 0x400175>, <DisassemblerInsn "je" for 0x400179>]'}, {'block_Idx': 202, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40105d>, <DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "add" for 0x401065>, <DisassemblerInsn "ret" for 0x401069>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f0>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400247>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "movzx" for 0x400266>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400273>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "lea" for 0x40027d>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "xor" for 0x40028f>, <DisassemblerInsn "xor" for 0x400292>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002cd>]'}, {'block_Idx': 368, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a38>, <DisassemblerInsn "movss" for 0x400a3f>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "call" for 0x400a4c>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "cmp" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movss" for 0x400234>, <DisassemblerInsn "movss" for 0x40023c>, <DisassemblerInsn "jmp" for 0x400245>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4000ae>]'}, {'block_Idx': 240, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125a>, <DisassemblerInsn "add" for 0x40125e>, <DisassemblerInsn "ret" for 0x401262>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "mov" for 0x401172>, <DisassemblerInsn "ret" for 0x401176>]'}, {'block_Idx': 309, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143b>, <DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401456>, <DisassemblerInsn "mov" for 0x40145b>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "add" for 0x40146d>, <DisassemblerInsn "ret" for 0x401471>]'}, {'block_Idx': 221, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4005b8>, <DisassemblerInsn "mov" for 0x4005bf>, <DisassemblerInsn "mov" for 0x4005c6>, <DisassemblerInsn "mov" for 0x4005d0>, <DisassemblerInsn "movzx" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e2>, <DisassemblerInsn "mov" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005ed>, <DisassemblerInsn "lea" for 0x4005f1>, <DisassemblerInsn "add" for 0x4005f8>, <DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400604>, <DisassemblerInsn "xor" for 0x40060a>, <DisassemblerInsn "xor" for 0x40060d>, <DisassemblerInsn "mov" for 0x400610>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "mov" for 0x40061f>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "call" for 0x400648>]'}, {'block_Idx': 270, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401270>, <DisassemblerInsn "mov" for 0x401274>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "mov" for 0x40127e>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x40128c>, <DisassemblerInsn "mov" for 0x401291>, <DisassemblerInsn "mov" for 0x401294>, <DisassemblerInsn "mov" for 0x401299>, <DisassemblerInsn "mov" for 0x4012a1>, <DisassemblerInsn "cmp" for 0x4012a6>, <DisassemblerInsn "je" for 0x4012ab>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "lea" for 0x400183>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "call" for 0x400193>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d2>]'}, {'block_Idx': 376, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a5b>, <DisassemblerInsn "call" for 0x400a60>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movsxd" for 0x400142>, <DisassemblerInsn "cmp" for 0x40014a>, <DisassemblerInsn "jne" for 0x40014e>]'}, {'block_Idx': 224, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401180>, <DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x40118e>, <DisassemblerInsn "cmp" for 0x401192>, <DisassemblerInsn "jl" for 0x401197>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a75>, <DisassemblerInsn "add" for 0x400a7c>, <DisassemblerInsn "ret" for 0x400a83>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "cmp" for 0x4001fa>, <DisassemblerInsn "jne" for 0x400201>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401172>, <DisassemblerInsn "ret" for 0x401176>]'}, {'block_Idx': 352, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "add" for 0x400985>, <DisassemblerInsn "movss" for 0x40098c>, <DisassemblerInsn "cvtss2sd" for 0x400995>, <DisassemblerInsn "movsd" for 0x400999>, <DisassemblerInsn "divsd" for 0x4009a1>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "mov" for 0x4009aa>, <DisassemblerInsn "call" for 0x4009af>]'}, {'block_Idx': 348, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "lea" for 0x400915>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x400921>, <DisassemblerInsn "mov" for 0x400926>, <DisassemblerInsn "mov" for 0x40092d>, <DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "xor" for 0x40093a>, <DisassemblerInsn "xor" for 0x40093d>, <DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "mov" for 0x400947>, <DisassemblerInsn "mov" for 0x40094f>, <DisassemblerInsn "mov" for 0x400957>, <DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "call" for 0x400978>]'}, {'block_Idx': 243, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006e4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 106, 'blockInsts': ['<lea~~rax, [rip + 0xb8e1]>', '<mov~~qword ptr [rip + 0xb3c2], rax>', '<mov~~dword ptr [rip + 0xb3c4], 0x226>', '<mov~~rax, qword ptr [rip + 0xffc91]>', '<movzx~~edx, word ptr [rax + 4]>', '<mov~~rax, qword ptr [rip + 0xffc96]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xffc9b]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<lea~~rdi, [rip + 0xb358]>', '<add~~rdi, 0x30>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 20, 'blockInsts': ['<movsxd~~rcx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rip + 0xffeee]>', '<movzx~~eax, byte ptr [rax + rcx]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<cmp~~eax, dword ptr [rcx + 0x54]>', '<jne~~0x40012d>']}, {'block_Idx': 382, 'blockInsts': ['<call~~0x401480>']}, {'block_Idx': 360, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x17f0>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x9ce1]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<xor~~edx, edx>', '<call~~0x500088>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x168>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rax + 0x98]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<jle~~0x4000b3>']}, {'block_Idx': 191, 'blockInsts': ['<lea~~rax, [rip + 0xc995]>', '<mov~~qword ptr [rip + 0xb24e], rax>', '<mov~~dword ptr [rip + 0xb250], 0x126>', '<mov~~rax, qword ptr [rip + 0xffad5]>', '<movzx~~edx, word ptr [rax + 0xa]>', '<mov~~rax, qword ptr [rip + 0xffada]>', '<mov~~rcx, qword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffadf]>', '<mov~~rax, qword ptr [rax + 0x28]>', '<lea~~rdi, [rip + 0xb19c]>', '<add~~rdi, 0x78>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 180, 'blockInsts': ['<jmp~~0x400524>']}, {'block_Idx': 214, 'blockInsts': ['<jmp~~0x4005b8>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xbebbb1b7>', '<jmp~~0x400a75>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x144], 0>', '<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x148], eax>', '<mov~~ecx, dword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rax + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x144], 0>', '<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 278, 'blockInsts': ['<jmp~~0x400814>']}, {'block_Idx': 229, 'blockInsts': ['<jmp~~0x40064f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rax]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<add~~rdx, 8>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~r8d, dword ptr [rax + 0x28]>', '<call~~0x400ed0>']}, {'block_Idx': 393, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~dword ptr [rsp + 0x2c], r8d>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<jge~~0x400f12>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x144], eax>', '<jmp~~0x4000fd>']}, {'block_Idx': 384, 'blockInsts': ['<push~~rax>', '<cmp~~dword ptr [rip + 0x16274], 0>', '<jne~~0x4014d7>']}, {'block_Idx': 86, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4001be>']}, {'block_Idx': 364, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff672]>', '<movss~~xmm0, dword ptr [rip + 0x9ca2]>', '<mov~~esi, 0x400>', '<call~~0x5000a0>']}, {'block_Idx': 388, 'blockInsts': ['<pop~~rax>', '<ret~~>']}, {'block_Idx': 326, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 327, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1858>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500050>']}, {'block_Idx': 233, 'blockInsts': ['<lea~~rax, [rip + 0xd1da]>', '<mov~~qword ptr [rip + 0xb153], rax>', '<mov~~dword ptr [rip + 0xb155], 0x10c>', '<mov~~rax, qword ptr [rip + 0xff9aa]>', '<movzx~~edx, word ptr [rax + 0xe]>', '<mov~~rax, qword ptr [rip + 0xff9af]>', '<mov~~rcx, qword ptr [rax + 0x38]>', '<mov~~rax, qword ptr [rip + 0xff9b4]>', '<mov~~rax, qword ptr [rax + 0x38]>', '<lea~~rdi, [rip + 0xb071]>', '<add~~rdi, 0xa8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 344, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x3690], 0x1f2e3d4c>', '<call~~0x500060>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rax + 0x50]>', '<call~~0x401070>']}, {'block_Idx': 372, 'blockInsts': ['<mov~~edi, 0xa>', '<call~~0x5000b8>']}, {'block_Idx': 264, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 127, 'blockInsts': ['<lea~~rax, [rip + 0xc0ed]>', '<mov~~qword ptr [rip + 0xb346], rax>', '<mov~~dword ptr [rip + 0xb348], 0x12c>', '<mov~~rax, qword ptr [rip + 0xffbfd]>', '<movzx~~edx, word ptr [rax + 6]>', '<mov~~rax, qword ptr [rip + 0xffc02]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rip + 0xffc07]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<lea~~rdi, [rip + 0xb2c4]>', '<add~~rdi, 0x48>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x400247>']}, {'block_Idx': 120, 'blockInsts': ['<jmp~~0x4003fc>']}, {'block_Idx': 248, 'blockInsts': ['<lea~~rax, [rip + 0xd573]>', '<mov~~qword ptr [rip + 0xb0d4], rax>', '<mov~~dword ptr [rip + 0xb0d6], 0x1fe>', '<mov~~rax, qword ptr [rip + 0xff913]>', '<movzx~~edx, word ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rip + 0xff918]>', '<mov~~rcx, qword ptr [rax + 0x40]>', '<mov~~rax, qword ptr [rip + 0xff91d]>', '<mov~~rax, qword ptr [rax + 0x40]>', '<lea~~rdi, [rip + 0xafda]>', '<add~~rdi, 0xc0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 145, 'blockInsts': ['<jmp~~0x400490>']}, {'block_Idx': 498, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 285, 'blockInsts': ['<lea~~rax, [rip + 0xe205]>', '<mov~~qword ptr [rip + 0xafd6], rax>', '<mov~~dword ptr [rip + 0xafd8], 0x1ce>', '<mov~~rax, qword ptr [rip + 0xff7e5]>', '<movzx~~edx, word ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rip + 0xff7ea]>', '<mov~~rcx, qword ptr [rax + 0x50]>', '<mov~~rax, qword ptr [rip + 0xff7ef]>', '<mov~~rax, qword ptr [rax + 0x50]>', '<lea~~rdi, [rip + 0xaeac]>', '<add~~rdi, 0xf0>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 259, 'blockInsts': ['<jmp~~0x40077d>']}, {'block_Idx': 265, 'blockInsts': ['<lea~~rax, [rip + 0xdcdc]>', '<mov~~qword ptr [rip + 0xb055], rax>', '<mov~~dword ptr [rip + 0xb057], 0x16e>', '<mov~~rax, qword ptr [rip + 0xff87c]>', '<movzx~~edx, word ptr [rax + 0x12]>', '<mov~~rax, qword ptr [rip + 0xff881]>', '<mov~~rcx, qword ptr [rax + 0x48]>', '<mov~~rax, qword ptr [rip + 0xff886]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<lea~~rdi, [rip + 0xaf43]>', '<add~~rdi, 0xd8>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 157, 'blockInsts': ['<lea~~rax, [rip + 0xc509]>', '<mov~~qword ptr [rip + 0xb2ca], rax>', '<mov~~dword ptr [rip + 0xb2cc], 0x148>', '<mov~~rax, qword ptr [rip + 0xffb69]>', '<movzx~~edx, word ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffb6e]>', '<mov~~rcx, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rip + 0xffb73]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<lea~~rdi, [rip + 0xb230]>', '<add~~rdi, 0x60>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, 0x16771>', '<cmp~~eax, dword ptr [rsp - 8]>', '<jg~~0x40108c>']}, {'block_Idx': 39, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jae~~0x400142>']}, {'block_Idx': 61, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4000ae>']}, {'block_Idx': 339, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x3670>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<call~~0x500058>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<add~~rsi, 0x214>', '<lea~~rdx, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~r8d, 3>', '<call~~0x401270>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x40012f>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400142>']}, {'block_Idx': 356, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1788>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d20]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 8>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 302, 'blockInsts': ['<call~~0x500048>']}, {'block_Idx': 263, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x44], 1>', '<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~dword ptr [rsp + 0x164], 0xffffffff>', '<jmp~~0x400a75>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 3>', '<movss~~xmm0, dword ptr [rip + 0xa4ae]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400245>']}, {'block_Idx': 85, 'blockInsts': ['<lea~~rax, [rip + 0xb535]>', '<mov~~qword ptr [rip + 0xb43e], rax>', '<mov~~dword ptr [rip + 0xb440], 0x10e>', '<mov~~rax, qword ptr [rip + 0xffd25]>', '<movzx~~edx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rip + 0xffd2a]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rip + 0xffd2f]>', '<mov~~rax, qword ptr [rax + 8]>', '<lea~~rdi, [rip + 0xb3ec]>', '<add~~rdi, 0x18>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400368>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<cmp~~dword ptr [rax + 0x14], 0>', '<je~~0x4001f0>']}, {'block_Idx': 202, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 56, 'blockInsts': ['<lea~~rax, [rip + 0xaff2]>', '<mov~~qword ptr [rip + 0xb4b3], rax>', '<mov~~dword ptr [rip + 0xb4b5], 0x130>', '<mov~~rax, qword ptr [rip + 0xffdb2]>', '<movzx~~edx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdb8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffdbe]>', '<mov~~rax, qword ptr [rax]>', '<lea~~rdi, [rip + 0xb47c]>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 368, 'blockInsts': ['<mov~~rdi, qword ptr [rip + 0xff671]>', '<movss~~xmm0, dword ptr [rip + 0x9c85]>', '<mov~~esi, 0x80>', '<call~~0x5000a0>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x120], 5>', '<jl~~0x4001be>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~dword ptr [rax + 0x58], 1>', '<movss~~xmm0, dword ptr [rip + 0xa488]>', '<movss~~dword ptr [rsp + 0x14c], xmm0>', '<jmp~~0x400247>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x4001f2>']}, {'block_Idx': 240, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~dword ptr [rsp - 4], 0xb>', '<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 309, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rax + 0x3c0], 0>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x54], ecx>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x3aa0], ecx>', '<mov~~dword ptr [rsp + 0x44], 0>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 221, 'blockInsts': ['<lea~~rax, [rip + 0xcda1]>', '<mov~~qword ptr [rip + 0xb1d2], rax>', '<mov~~dword ptr [rip + 0xb1d4], 0x132>', '<mov~~rax, qword ptr [rip + 0xffa41]>', '<movzx~~edx, word ptr [rax + 0xc]>', '<mov~~rax, qword ptr [rip + 0xffa46]>', '<mov~~rcx, qword ptr [rax + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffa4b]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<lea~~rdi, [rip + 0xb108]>', '<add~~rdi, 0x90>', '<mov~~esi, 8>', '<mov~~r9d, 1>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 2>', '<mov~~dword ptr [rsp + 0x10], 2>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 270, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~dword ptr [rsp + 0x20], r8d>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0xc], 0>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<cmp~~rax, qword ptr [rsp + 0x30]>', '<je~~0x4012c1>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x158]>', '<lea~~rsi, [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x401180>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4002d4>']}, {'block_Idx': 376, 'blockInsts': ['<mov~~edi, 7>', '<call~~0x5000b8>']}, {'block_Idx': 21, 'blockInsts': ['<movsxd~~rax, dword ptr [rsp + 0x144]>', '<cmp~~rax, 8>', '<jne~~0x40015b>']}, {'block_Idx': 224, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0xc], edx>', '<cmp~~dword ptr [rsp + 0xc], 1>', '<jl~~0x4011a0>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~rsp, 0x168>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax + 0x474], 3>', '<jne~~0x400225>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 4]>', '<ret~~>']}, {'block_Idx': 352, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<add~~rdi, 0x1720>', '<movss~~xmm0, dword ptr [rsp + 0x14c]>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~xmm1, qword ptr [rip + 0x9d5f]>', '<divsd~~xmm0, xmm1>', '<mov~~esi, 0xb>', '<mov~~edx, 1>', '<call~~0x500088>']}, {'block_Idx': 348, 'blockInsts': ['<lea~~rax, [rip + 0xe85c]>', '<mov~~qword ptr [rip + 0xeddd], rax>', '<mov~~dword ptr [rip + 0xeddf], 0x160>', '<lea~~rdi, [rip + 0xedc4]>', '<mov~~esi, 7>', '<mov~~edx, 0x79>', '<mov~~rcx, qword ptr [rip + 0xff743]>', '<mov~~r9d, 1>', '<mov~~rax, qword ptr [rip + 0xff746]>', '<xor~~r8d, r8d>', '<xor~~r8d, r8d>', '<mov~~r8d, r9d>', '<mov~~qword ptr [rsp], rax>', '<mov~~dword ptr [rsp + 8], 4>', '<mov~~dword ptr [rsp + 0x10], 4>', '<mov~~qword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x20], 0>', '<mov~~dword ptr [rsp + 0x28], 0>', '<mov~~dword ptr [rsp + 0x30], 4>', '<call~~0x500040>']}, {'block_Idx': 243, 'blockInsts': ['<jmp~~0x4006e6>']}], 'cfg_edge_info': [(26, 21), (259, 265), (265, 278), (302, 327), (221, 229), (81, 14), (157, 180), (56, 76), (29, 34), (2, 4), (127, 145), (92, 99), (2, 61), (191, 214), (278, 285), (39, 21), (20, 26), (263, 86), (0, 2), (9, 14), (40, 47), (248, 259), (1, 3), (106, 120), (498, 34), (55, 56), (35, 224), (180, 191), (240, 86), (14, 21), (86, 92), (61, 72), (27, 33), (1, 14), (21, 29), (72, 40), (202, 61), (28, 34), (47, 56), (327, 339), (29, 35), (348, 352), (233, 243), (76, 85), (344, 348), (39, 20), (145, 157), (264, 86), (372, 376), (326, 34), (368, 372), (71, 82), (388, 393), (61, 71), (93, 270), (99, 82), (33, 39), (243, 248), (21, 28), (52, 61), (86, 93), (285, 302), (352, 356), (34, 40), (309, 34), (93, 34), (382, 384), (382, 393), (229, 233), (98, 106), (0, 1), (40, 46), (92, 93), (28, 35), (120, 127), (35, 86), (364, 368), (20, 27), (360, 364), (376, 382), (14, 20), (46, 55), (339, 344), (356, 360), (85, 98), (214, 221)], 'cdg_edge_info': [(86, 127), (28, 348), (86, 191), (92, 360), (61, 180), (61, 372), (28, 76), (28, 259), (28, 85), (0, 14), (29, 233), (86, 56), (92, 106), (86, 120), (92, 344), (86, 248), (92, 243), (86, 376), (61, 356), (61, 127), (61, 191), (29, 34), (29, 98), (86, 40), (92, 145), (92, 99), (29, 180), (61, 157), (86, 360), (61, 221), (29, 372), (28, 352), (61, 285), (61, 56), (86, 259), (92, 364), (61, 120), (61, 248), (20, 33), (61, 376), (28, 382), (86, 106), (28, 327), (29, 356), (92, 339), (29, 127), (61, 214), (61, 40), (29, 191), (61, 278), (92, 348), (86, 243), (92, 229), (92, 302), (61, 360), (28, 302), (86, 145), (0, 2), (29, 157), (92, 76), (92, 259), (92, 85), (40, 47), (29, 285), (28, 265), (29, 221), (29, 56), (29, 120), (28, 393), (29, 248), (86, 364), (61, 106), (29, 376), (61, 344), (86, 382), (61, 243), (29, 86), (29, 214), (28, 368), (86, 92), (29, 40), (61, 72), (29, 278), (86, 339), (61, 145), (86, 229), (86, 348), (29, 360), (86, 302), (92, 352), (28, 233), (86, 76), (61, 364), (86, 85), (21, 29), (0, 61), (29, 106), (92, 382), (29, 344), (92, 327), (29, 243), (28, 34), (28, 98), (61, 339), (86, 368), (61, 229), (61, 348), (61, 302), (28, 180), (29, 145), (29, 35), (28, 372), (92, 82), (61, 76), (92, 265), (61, 259), (61, 85), (92, 393), (86, 233), (86, 352), (29, 364), (39, 20), (28, 356), (28, 127), (92, 368), (28, 191), (86, 327), (86, 34), (29, 339), (86, 98), (29, 229), (29, 348), (28, 157), (28, 221), (28, 285), (61, 352), (29, 76), (92, 233), (28, 56), (28, 120), (29, 259), (29, 85), (28, 248), (86, 265), (61, 71), (28, 376), (86, 393), (20, 39), (61, 382), (28, 86), (61, 327), (92, 34), (86, 356), (28, 214), (28, 40), (92, 98), (28, 278), (28, 229), (92, 180), (28, 360), (21, 28), (92, 372), (86, 93), (86, 157), (86, 221), (61, 82), (86, 285), (29, 352), (61, 265), (61, 393), (28, 106), (28, 344), (92, 356), (28, 243), (92, 127), (29, 382), (29, 327), (92, 191), (86, 214), (61, 368), (86, 278), (0, 1), (40, 46), (28, 145), (92, 93), (28, 35), (40, 55), (92, 157), (92, 221), (29, 302), (92, 285), (86, 180), (92, 56), (92, 120), (86, 372), (29, 265), (61, 233), (92, 248), (28, 364), (29, 393), (92, 376), (14, 20), (86, 344), (0, 21), (92, 214), (92, 40), (92, 278), (28, 339), (61, 98), (29, 368)], 'ddg_edge_info': [(106, 157), (0, 14), (14, 40), (302, 327), (33, 20), (33, 29), (14, 360), (327, 356), (127, 191), (56, 85), (14, 33), (92, 99), (191, 221), (14, 344), (93, 344), (14, 35), (157, 221), (92, 339), (106, 127), (221, 233), (248, 348), (29, 93), (327, 360), (0, 2), (2, 356), (40, 47), (46, 356), (14, 92), (40, 56), (14, 339), (327, 344), (93, 360), (56, 265), (29, 40), (14, 21), (233, 248), (47, 356), (157, 191), (2, 360), (46, 360), (92, 327), (33, 21), (14, 352), (56, 233), (92, 46), (327, 339), (2, 344), (29, 35), (14, 327), (248, 265), (348, 352), (92, 393), (0, 20), (14, 46), (93, 339), (344, 348), (0, 29), (85, 106), (47, 360), (29, 92), (40, 339), (372, 376), (14, 39), (368, 372), (56, 127), (56, 191), (327, 352), (2, 339), (71, 393), (56, 157), (56, 221), (56, 285), (233, 265), (99, 393), (93, 352), (56, 248), (33, 39), (221, 248), (285, 348), (285, 302), (352, 356), (93, 327), (0, 35), (40, 327), (2, 352), (46, 352), (0, 1), (40, 46), (92, 93), (56, 106), (127, 157), (92, 47), (191, 233), (248, 285), (2, 327), (14, 356), (93, 356), (364, 368), (360, 364), (376, 382), (14, 20), (14, 29), (14, 93), (339, 344), (356, 360), (92, 40), (265, 285), (14, 47), (47, 352), (14, 56)]}]}
{'aac_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 61, 'instruction': 'movl\t0x144(%rsp), %ecx'}, {'instIndex': 62, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movl\t%ecx, 0x14(%rax)'}, {'instIndex': 64, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 65, 'instruction': 'cmpl\t$0, 0x14(%rax)'}, {'instIndex': 66, 'instruction': 'je\t.LBB0_17'}, {'instIndex': 67, 'instruction': 'movq\t0x158(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'leaq\t0x40(%rsp), %rsi'}, {'instIndex': 69, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x14(%rax), %edx'}, {'instIndex': 71, 'instruction': 'callq\tset_default_channel_config'}, {'instIndex': 72, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 73, 'instruction': 'jge\t.LBB0_16'}, {'instIndex': 74, 'instruction': 'movq\t0x158(%rsp), %rax'}, {'instIndex': 75, 'instruction': 'cmpl\t$5, 0x120(%rax)'}, {'instIndex': 76, 'instruction': 'jl\t.LBB0_16'}, {'instIndex': 77, 'instruction': 'movl\t$-0x41444e49, 0x164(%rsp)         # imm = 0xBEBBB1B7'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB0_46'}, {'instIndex': 79, 'instruction': 'movq\t0x150(%rsp), %rdi'}, {'instIndex': 80, 'instruction': 'movq\t0x150(%rsp), %rsi'}, {'instIndex': 81, 'instruction': 'addq\t$0x214, %rsi                      # imm = 0x0xd6'}, {'instIndex': 82, 'instruction': 'leaq\t0x40(%rsp), %rdx'}, {'instIndex': 83, 'instruction': 'movq\t0x150(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movl\t0x14(%rax), %ecx'}, {'instIndex': 85, 'instruction': 'movl\t$3, %r8d'}, {'instIndex': 86, 'instruction': 'callq\toutput_configure'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.s---aac_decode_init---before
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 7389: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 7389: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1180 nodes and 2198 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 555 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:13.880123
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.372695
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O1/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization O2.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.s---aac_decode_init---before
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 2222: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 2222: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1262 nodes and 2341 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 578 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:13.734590
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.367768
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O2/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization O3.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.s---aac_decode_init---before
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 6246: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 6246: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1583 nodes and 2927 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 578 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:31.319624
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.475499
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/O3/aacdec.o.
{'aac_decode_init': []}
The case of compiler clang with optimization Os.
Patched source code file: aacdec.c
Patched function: 1---static av_cold int aac_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.s---aac_decode_init---before
Assembly file error information: 'utf-8' codec can't decode byte 0x80 in position 719: invalid start byte
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 131, in extract_patched_assembly_code_from_debug_file
    lines = af.readlines()
  File "/home/xu/anaconda3/envs/bingo/lib/python3.8/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 719: invalid start byte

/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.o---before
The extraction of function: aac_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 1096 nodes and 2033 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 519 instructions in binary file.
The execution time of patched subCFG information extraction via angr: 0:00:10.634572
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.o.
{'aac_decode_init': []}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.339860
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/94d47382e0558d05e4ba2dd2e3717405d2a703ad/clang_before/Os/aacdec.o.
{'aac_decode_init': []}
The analysis of 22 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/patch_info.txt
{'1': {'before': 'a/libavutil/random_seed.c', 'after': 'b/libavutil/random_seed.c'}}
{'1': [{'before': '-31,7', 'after': '+31,7', 'function': 'static int read_random'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09---b/libavutil/random_seed.c
The case of compiler gcc with optimization no.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/no/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/no/random_seed_gcc.s---read_random---after
function id: 14
function flag: True
There are 28 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/no/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O0/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O0/random_seed_gcc.s---read_random---after
function id: 14
function flag: True
There are 28 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O0/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O1/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O1/random_seed_gcc.s---read_random---after
function id: 0
function flag: True
There are 60 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L3'}, {'instIndex': 15, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 16, 'instruction': 'movl\t%ebx, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 42, 'instruction': 'je\t.L6'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O1/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L3'}, {'instIndex': 15, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 16, 'instruction': 'movl\t%ebx, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 42, 'instruction': 'je\t.L6'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O2/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O2/random_seed_gcc.s---read_random---after
function id: 0
function flag: True
There are 60 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 9, 'instruction': 'je\t.L3'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, %edi'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t$-1, %r12d'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 49, 'instruction': 'je\t.L9'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O2/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 9, 'instruction': 'je\t.L3'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, %edi'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t$-1, %r12d'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 49, 'instruction': 'je\t.L9'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O3/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O3/random_seed_gcc.s---read_random---after
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/O3/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/Os/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/Os/random_seed_gcc.s---read_random---after
function id: 0
function flag: True
There are 59 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'incl\t%eax'}, {'instIndex': 10, 'instruction': 'je\t.L1'}, {'instIndex': 15, 'instruction': 'movl\t%r12d, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 18, 'instruction': 'movl\t%ebx, %r12d'}, {'instIndex': 43, 'instruction': 'je\t.L11'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_after/Os/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'incl\t%eax'}, {'instIndex': 10, 'instruction': 'je\t.L1'}, {'instIndex': 15, 'instruction': 'movl\t%r12d, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 18, 'instruction': 'movl\t%ebx, %r12d'}, {'instIndex': 43, 'instruction': 'je\t.L11'}]}]}
The case of compiler clang with optimization no.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/no/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/no/random_seed.s---read_random---after
function id: 1
function flag: True
There are 25 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/no/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/no/random_seed.o---after
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 37 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 25 instructions in binary file.
[4194444, 4194463, 4194473, 4194492, 4194505]
The execution time of patched subCFG information extraction via angr: 0:00:00.220918
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 6), (1, 3), (3, 5)]}]}
{'read_random': [4194444, 4194463, 4194473, 4194492, 4194505]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/no/random_seed.o---after
The extraction of function: read_random
[4194444, 4194463, 4194473, 4194492, 4194505]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 12 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 98 nodes and 107 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194444, 4194463, 4194473, 4194492, 4194505]
{4194473, 4194505, 4194444, 4194416, 4194513, 4194492, 4194463}
[0, 5, 3, 2, 7, 4, 9]
The execution time of patched slicing information extraction via angr: 0:00:00.389741
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (7, 9), (2, 3), (0, 2), (4, 7), (3, 5)], 'cdg_edge_info': [(2, 4), (2, 7), (2, 3), (2, 9), (2, 5)], 'ddg_edge_info': [(0, 7), (2, 4), (0, 4), (2, 7), (0, 3), (0, 9), (7, 9), (0, 2), (3, 9), (4, 7)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O0/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O0/random_seed.s---read_random---after
function id: 1
function flag: True
There are 25 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O0/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O0/random_seed.o---after
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 37 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 25 instructions in binary file.
[4194444, 4194463, 4194473, 4194492, 4194505]
The execution time of patched subCFG information extraction via angr: 0:00:00.223234
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 6), (1, 3), (3, 5)]}]}
{'read_random': [4194444, 4194463, 4194473, 4194492, 4194505]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O0/random_seed.o---after
The extraction of function: read_random
[4194444, 4194463, 4194473, 4194492, 4194505]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 12 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 98 nodes and 107 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194444, 4194463, 4194473, 4194492, 4194505]
{4194473, 4194505, 4194444, 4194416, 4194513, 4194492, 4194463}
[0, 5, 3, 2, 7, 4, 9]
The execution time of patched slicing information extraction via angr: 0:00:00.378343
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (7, 9), (2, 3), (0, 2), (4, 7), (3, 5)], 'cdg_edge_info': [(2, 4), (2, 7), (2, 3), (2, 9), (2, 5)], 'ddg_edge_info': [(0, 7), (2, 4), (0, 4), (2, 7), (0, 3), (0, 9), (7, 9), (0, 2), (3, 9), (4, 7)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.s---read_random---after
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o---after
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.199015
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.188039
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O1/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.s---read_random---after
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o---after
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.187242
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.187378
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O2/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.s---read_random---after
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o---after
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.187764
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.188022
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/O3/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/Os/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/Os/random_seed.s---read_random---after
function id: 1
function flag: True
There are 26 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 11, 'instruction': 'cmpl\t$-1, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 13, 'instruction': 'je\t.LBB1_2'}, {'instIndex': 16, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 17, 'instruction': 'callq\tread@PLT'}, {'instIndex': 20, 'instruction': 'callq\tclose@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/Os/random_seed.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/Os/random_seed.o---after
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 17 nodes and 25 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 26 instructions in binary file.
[4194404, 4194424, 4194443]
The execution time of patched subCFG information extraction via angr: 0:00:00.212382
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400086>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400045>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x40004e>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "xor" for 0x40005b>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "call" for 0x40005f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "cmp" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "je" for 0x400076>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, rdi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, -1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4000a0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'read_random': [4194404, 4194424, 4194443]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_after/Os/random_seed.o---after
The extraction of function: read_random
[4194404, 4194424, 4194443]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 11 edges in CFGEmulated.
It has 7 nodes and 6 edges in CDG.
It has 102 nodes and 111 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194404, 4194424, 4194443]
{4194464, 4194404, 4194373, 4194443, 4194456, 4194424}
[4, 8, 3, 0, 6, 2]
The execution time of patched slicing information extraction via angr: 0:00:00.375019
{'read_random': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400086>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400045>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x40004e>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "xor" for 0x40005b>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "call" for 0x40005f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "cmp" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "je" for 0x400076>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, rdi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, -1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4000a0>']}], 'cfg_edge_info': [(2, 4), (6, 8), (4, 6), (2, 3), (0, 2)], 'cdg_edge_info': [(2, 3), (2, 4), (2, 6), (2, 8)], 'ddg_edge_info': [(2, 4), (0, 4), (6, 8), (4, 6), (0, 6), (0, 2), (2, 6), (0, 8), (2, 8)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 11, 'instruction': 'cmpl\t$-1, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 13, 'instruction': 'je\t.LBB1_2'}, {'instIndex': 16, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 17, 'instruction': 'callq\tread@PLT'}, {'instIndex': 20, 'instruction': 'callq\tclose@PLT'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09---a/libavutil/random_seed.c
The case of compiler gcc with optimization no.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/no/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/no/random_seed_gcc.s---read_random---before
function id: 14
function flag: True
There are 28 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/no/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O0/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O0/random_seed_gcc.s---read_random---before
function id: 14
function flag: True
There are 28 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O0/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'cmpl\t$-1, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'jne\t.L4'}, {'instIndex': 13, 'instruction': 'movl\t$-1, %eax'}, {'instIndex': 14, 'instruction': 'jmp\t.L5'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 17, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 19, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 20, 'instruction': 'call\tread@PLT'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x1c(%rsp)'}, {'instIndex': 22, 'instruction': 'movl\t0x18(%rsp), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 24, 'instruction': 'call\tclose@PLT'}, {'instIndex': 25, 'instruction': 'movl\t0x1c(%rsp), %eax'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O1/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O1/random_seed_gcc.s---read_random---before
function id: 0
function flag: True
There are 60 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L3'}, {'instIndex': 15, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 16, 'instruction': 'movl\t%ebx, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 42, 'instruction': 'je\t.L6'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O1/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L3'}, {'instIndex': 15, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 16, 'instruction': 'movl\t%ebx, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 42, 'instruction': 'je\t.L6'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O2/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O2/random_seed_gcc.s---read_random---before
function id: 0
function flag: True
There are 60 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 9, 'instruction': 'je\t.L3'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, %edi'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t$-1, %r12d'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 49, 'instruction': 'je\t.L9'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O2/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'cmpl\t$-1, %eax'}, {'instIndex': 9, 'instruction': 'je\t.L3'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 15, 'instruction': 'movl\t%ebp, %edi'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 23, 'instruction': 'movl\t$-1, %r12d'}, {'instIndex': 24, 'instruction': 'jmp\t.L1'}, {'instIndex': 49, 'instruction': 'je\t.L9'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O3/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O3/random_seed_gcc.s---read_random---before
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/O3/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/Os/random_seed_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/Os/random_seed_gcc.s---read_random---before
function id: 0
function flag: True
There are 59 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'incl\t%eax'}, {'instIndex': 10, 'instruction': 'je\t.L1'}, {'instIndex': 15, 'instruction': 'movl\t%r12d, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 18, 'instruction': 'movl\t%ebx, %r12d'}, {'instIndex': 43, 'instruction': 'je\t.L11'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/gcc_before/Os/random_seed.o
Binary file does not exist.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'incl\t%eax'}, {'instIndex': 10, 'instruction': 'je\t.L1'}, {'instIndex': 15, 'instruction': 'movl\t%r12d, %edi'}, {'instIndex': 17, 'instruction': 'call\tclose@PLT'}, {'instIndex': 18, 'instruction': 'movl\t%ebx, %r12d'}, {'instIndex': 43, 'instruction': 'je\t.L11'}]}]}
The case of compiler clang with optimization no.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/no/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/no/random_seed.s---read_random---before
function id: 1
function flag: True
There are 25 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/no/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/no/random_seed.o---before
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 37 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 25 instructions in binary file.
[4194444, 4194463, 4194473, 4194492, 4194505]
The execution time of patched subCFG information extraction via angr: 0:00:00.224075
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 6), (1, 3), (3, 5)]}]}
{'read_random': [4194444, 4194463, 4194473, 4194492, 4194505]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/no/random_seed.o---before
The extraction of function: read_random
[4194444, 4194463, 4194473, 4194492, 4194505]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 12 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 98 nodes and 107 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194444, 4194463, 4194473, 4194492, 4194505]
{4194473, 4194505, 4194444, 4194416, 4194513, 4194492, 4194463}
[0, 5, 3, 2, 7, 4, 9]
The execution time of patched slicing information extraction via angr: 0:00:00.393094
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (7, 9), (2, 3), (0, 2), (4, 7), (3, 5)], 'cdg_edge_info': [(2, 4), (2, 7), (2, 3), (2, 9), (2, 5)], 'ddg_edge_info': [(0, 7), (2, 4), (0, 4), (2, 7), (0, 3), (0, 9), (7, 9), (0, 2), (3, 9), (4, 7)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O0/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O0/random_seed.s---read_random---before
function id: 1
function flag: True
There are 25 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O0/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O0/random_seed.o---before
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 25 nodes and 37 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 25 instructions in binary file.
[4194444, 4194463, 4194473, 4194492, 4194505]
The execution time of patched subCFG information extraction via angr: 0:00:00.225705
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 6), (1, 3), (3, 5)]}]}
{'read_random': [4194444, 4194463, 4194473, 4194492, 4194505]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O0/random_seed.o---before
The extraction of function: read_random
[4194444, 4194463, 4194473, 4194492, 4194505]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 12 edges in CFGEmulated.
It has 8 nodes and 7 edges in CDG.
It has 98 nodes and 107 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194444, 4194463, 4194473, 4194492, 4194505]
{4194473, 4194505, 4194444, 4194416, 4194513, 4194492, 4194463}
[0, 5, 3, 2, 7, 4, 9]
The execution time of patched slicing information extraction via angr: 0:00:00.378395
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "xor" for 0x400083>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40009f>, <DisassemblerInsn "jmp" for 0x4000a7>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400098>, <DisassemblerInsn "jne" for 0x40009d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "call" for 0x4000c4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "call" for 0x4000b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d5>, <DisassemblerInsn "ret" for 0x4000d9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0xffffffff>', '<jmp~~0x4000d1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~dword ptr [rsp + 8], 0xffffffff>', '<cmp~~dword ptr [rsp + 0xc], -1>', '<jne~~0x4000a9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<mov~~edi, dword ptr [rsp + 0xc]>', '<call~~0x500010>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xc]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(2, 4), (7, 9), (2, 3), (0, 2), (4, 7), (3, 5)], 'cdg_edge_info': [(2, 4), (2, 7), (2, 3), (2, 9), (2, 5)], 'ddg_edge_info': [(0, 7), (2, 4), (0, 4), (2, 7), (0, 3), (0, 9), (7, 9), (0, 2), (3, 9), (4, 7)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'cmpl\t$-1, 12(%rsp)'}, {'instIndex': 10, 'instruction': 'jne\t.LBB1_2'}, {'instIndex': 11, 'instruction': 'movl\t$-1, 0x24(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB1_3'}, {'instIndex': 13, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rsp), %rsi'}, {'instIndex': 15, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 16, 'instruction': 'callq\tread@PLT'}, {'instIndex': 17, 'instruction': 'movl\t%eax, 8(%rsp)'}, {'instIndex': 18, 'instruction': 'movl\t12(%rsp), %edi'}, {'instIndex': 19, 'instruction': 'callq\tclose@PLT'}, {'instIndex': 20, 'instruction': 'movl\t8(%rsp), %eax'}, {'instIndex': 21, 'instruction': 'movl\t%eax, 0x24(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.s---read_random---before
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o---before
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.194313
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.189622
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O1/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.s---read_random---before
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o---before
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.187475
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.187322
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O2/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.s---read_random---before
There are 0 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: read_random from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o---before
The extraction of function: read_random
There is no function: read_random in binary /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o
The execution time of patched subCFG information extraction via angr: 0:00:00.187511
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.187446
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/O3/random_seed.o.
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: random_seed.c
Patched function: 1---static int read_random 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/Os/random_seed.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/Os/random_seed.s---read_random---before
function id: 1
function flag: True
There are 26 instructions for function: read_random in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '31', 'end': 37}, 'before': {'start': '31', 'end': 37}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 11, 'instruction': 'cmpl\t$-1, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 13, 'instruction': 'je\t.LBB1_2'}, {'instIndex': 16, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 17, 'instruction': 'callq\tread@PLT'}, {'instIndex': 20, 'instruction': 'callq\tclose@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/Os/random_seed.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/Os/random_seed.o---before
The extraction of function: read_random
Analyzing the binaries to generate subCFGs from patched function ...
It has 17 nodes and 25 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 26 instructions in binary file.
[4194404, 4194424, 4194443]
The execution time of patched subCFG information extraction via angr: 0:00:00.209955
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400086>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400045>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x40004e>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "xor" for 0x40005b>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "call" for 0x40005f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "cmp" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "je" for 0x400076>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<call~~0x500010>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, rdi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, -1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4000a0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'read_random': [4194404, 4194424, 4194443]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9958096ea2ce72590ad36540ea2e0254f60f8b09/clang_before/Os/random_seed.o---before
The extraction of function: read_random
[4194404, 4194424, 4194443]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 11 edges in CFGEmulated.
It has 7 nodes and 6 edges in CDG.
It has 102 nodes and 111 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194404, 4194424, 4194443]
{4194464, 4194404, 4194373, 4194443, 4194456, 4194424}
[4, 8, 3, 0, 6, 2]
The execution time of patched slicing information extraction via angr: 0:00:00.380682
{'read_random': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400078>, <DisassemblerInsn "mov" for 0x40007c>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400086>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "add" for 0x4000a4>, <DisassemblerInsn "ret" for 0x4000a8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400045>, <DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x40004e>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "xor" for 0x40005b>, <DisassemblerInsn "mov" for 0x40005d>, <DisassemblerInsn "call" for 0x40005f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "call" for 0x400093>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400064>, <DisassemblerInsn "mov" for 0x400066>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "cmp" for 0x40006f>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "je" for 0x400076>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~edx, 4>', '<call~~0x500008>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, rdi>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<xor~~esi, esi>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, -1>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x4000a0>']}], 'cfg_edge_info': [(2, 4), (6, 8), (4, 6), (2, 3), (0, 2)], 'cdg_edge_info': [(2, 3), (2, 4), (2, 6), (2, 8)], 'ddg_edge_info': [(2, 4), (0, 4), (6, 8), (4, 6), (0, 6), (0, 2), (2, 6), (0, 8), (2, 8)]}]}
{'read_random': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 11, 'instruction': 'cmpl\t$-1, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%eax, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 13, 'instruction': 'je\t.LBB1_2'}, {'instIndex': 16, 'instruction': 'movl\t$4, %edx'}, {'instIndex': 17, 'instruction': 'callq\tread@PLT'}, {'instIndex': 20, 'instruction': 'callq\tclose@PLT'}]}]}
The analysis of 23 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/patch_info.txt
{'1': {'before': 'a/libavutil/imgutils.c', 'after': 'b/libavutil/imgutils.c'}}
{'1': [{'before': '-266,32', 'after': '+266,3', 'function': 'void av_image_copy'}, {'before': '-127,23', 'after': '+127,4', 'function': 'int av_image_check_size'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b---b/libavutil/imgutils.c
The case of compiler gcc with optimization no.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/no/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/no/imgutils_gcc.s---av_image_copy---after
function id: 23
function flag: True
There are 137 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/no/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/no/imgutils_gcc.s---av_image_check_size---after
function id: 21
function flag: True
There are 49 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/no/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O0.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O0/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O0/imgutils_gcc.s---av_image_copy---after
function id: 23
function flag: True
There are 137 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O0/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O0/imgutils_gcc.s---av_image_check_size---after
function id: 21
function flag: True
There are 49 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O0/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O1.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O1/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O1/imgutils_gcc.s---av_image_copy---after
function id: 161
function flag: True
There are 114 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 77, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 78, 'instruction': 'popq\t%rbx'}, {'instIndex': 79, 'instruction': 'popq\t%rbp'}, {'instIndex': 80, 'instruction': 'popq\t%r12'}, {'instIndex': 81, 'instruction': 'popq\t%r13'}, {'instIndex': 82, 'instruction': 'popq\t%r14'}, {'instIndex': 83, 'instruction': 'popq\t%r15'}, {'instIndex': 84, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O1/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O1/imgutils_gcc.s---av_image_check_size---after
function id: 109
function flag: True
There are 283 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O1/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 77, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 78, 'instruction': 'popq\t%rbx'}, {'instIndex': 79, 'instruction': 'popq\t%rbp'}, {'instIndex': 80, 'instruction': 'popq\t%r12'}, {'instIndex': 81, 'instruction': 'popq\t%r13'}, {'instIndex': 82, 'instruction': 'popq\t%r14'}, {'instIndex': 83, 'instruction': 'popq\t%r15'}, {'instIndex': 84, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O2/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O2/imgutils_gcc.s---av_image_copy---after
function id: 132
function flag: True
There are 112 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 99, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 100, 'instruction': 'popq\t%rbx'}, {'instIndex': 101, 'instruction': 'popq\t%rbp'}, {'instIndex': 102, 'instruction': 'popq\t%r12'}, {'instIndex': 103, 'instruction': 'popq\t%r13'}, {'instIndex': 104, 'instruction': 'popq\t%r14'}, {'instIndex': 105, 'instruction': 'popq\t%r15'}, {'instIndex': 106, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O2/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O2/imgutils_gcc.s---av_image_check_size---after
function id: 83
function flag: True
There are 272 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O2/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 99, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 100, 'instruction': 'popq\t%rbx'}, {'instIndex': 101, 'instruction': 'popq\t%rbp'}, {'instIndex': 102, 'instruction': 'popq\t%r12'}, {'instIndex': 103, 'instruction': 'popq\t%r13'}, {'instIndex': 104, 'instruction': 'popq\t%r14'}, {'instIndex': 105, 'instruction': 'popq\t%r15'}, {'instIndex': 106, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O3/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O3/imgutils_gcc.s---av_image_copy---after
function id: 175
function flag: True
There are 127 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 114, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 115, 'instruction': 'popq\t%rbx'}, {'instIndex': 116, 'instruction': 'popq\t%rbp'}, {'instIndex': 117, 'instruction': 'popq\t%r12'}, {'instIndex': 118, 'instruction': 'popq\t%r13'}, {'instIndex': 119, 'instruction': 'popq\t%r14'}, {'instIndex': 120, 'instruction': 'popq\t%r15'}, {'instIndex': 121, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O3/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O3/imgutils_gcc.s---av_image_check_size---after
function id: 123
function flag: True
There are 297 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/O3/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 114, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 115, 'instruction': 'popq\t%rbx'}, {'instIndex': 116, 'instruction': 'popq\t%rbp'}, {'instIndex': 117, 'instruction': 'popq\t%r12'}, {'instIndex': 118, 'instruction': 'popq\t%r13'}, {'instIndex': 119, 'instruction': 'popq\t%r14'}, {'instIndex': 120, 'instruction': 'popq\t%r15'}, {'instIndex': 121, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/Os/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/Os/imgutils_gcc.s---av_image_copy---after
function id: 129
function flag: True
There are 92 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 79, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 80, 'instruction': 'popq\t%rbx'}, {'instIndex': 81, 'instruction': 'popq\t%rbp'}, {'instIndex': 82, 'instruction': 'popq\t%r12'}, {'instIndex': 83, 'instruction': 'popq\t%r13'}, {'instIndex': 84, 'instruction': 'popq\t%r14'}, {'instIndex': 85, 'instruction': 'popq\t%r15'}, {'instIndex': 86, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/Os/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/Os/imgutils_gcc.s---av_image_check_size---after
function id: 87
function flag: True
There are 235 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_after/Os/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 79, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 80, 'instruction': 'popq\t%rbx'}, {'instIndex': 81, 'instruction': 'popq\t%rbp'}, {'instIndex': 82, 'instruction': 'popq\t%r12'}, {'instIndex': 83, 'instruction': 'popq\t%r13'}, {'instIndex': 84, 'instruction': 'popq\t%r14'}, {'instIndex': 85, 'instruction': 'popq\t%r15'}, {'instIndex': 86, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 120 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 37 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 120 instructions in binary file.
[4197524]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.628079
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400c94>']}], 'cfg_edge_info': [(12, 5), (2, 5), (13, 5)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4197524], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/no/imgutils.o---after
The extraction of function: av_image_copy
[4197524]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 109 edges in CFGEmulated.
It has 75 nodes and 121 edges in CDG.
It has 1164 nodes and 1617 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197524]
{4197506, 4197124, 4197252, 4197392, 4197522, 4197524, 4197141, 4197403, 4197410, 4197040, 4197437, 4197186, 4197214, 4197345, 4197219, 4197353, 4197235, 4197367, 4197119}
[29, 5, 0, 30, 2, 33, 17, 7, 60, 66, 9, 63, 58, 16, 1, 10, 12, 38, 11, 3, 34, 4, 43, 15, 25, 22, 6]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 10 edges in CFGEmulated.
It has 8 nodes and 13 edges in CDG.
It has 146 nodes and 158 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:05.278565
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "je" for 0x400c19>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab4>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "mov" for 0x400acc>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "movsxd" for 0x400ad6>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "imul" for 0x400ae2>, <DisassemblerInsn "add" for 0x400ae6>, <DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400aee>, <DisassemblerInsn "movzx" for 0x400af3>, <DisassemblerInsn "and" for 0x400af7>, <DisassemblerInsn "cmp" for 0x400afa>, <DisassemblerInsn "je" for 0x400afd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400c1b>, <DisassemblerInsn "jne" for 0x400c20>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "movsxd" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "imul" for 0x40011c>, <DisassemblerInsn "add" for 0x400120>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "movzx" for 0x40012d>, <DisassemblerInsn "and" for 0x400131>, <DisassemblerInsn "cmp" for 0x400134>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be1>, <DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "jmp" for 0x400c8d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400baf>, <DisassemblerInsn "movsxd" for 0x400bb4>, <DisassemblerInsn "mov" for 0x400bb9>, <DisassemblerInsn "and" for 0x400bbe>, <DisassemblerInsn "movzx" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "movsxd" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "shl" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001c8>, <DisassemblerInsn "sub" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "sar" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x400aa4>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "movzx" for 0x400b09>, <DisassemblerInsn "and" for 0x400b0d>, <DisassemblerInsn "cmp" for 0x400b10>, <DisassemblerInsn "je" for 0x400b13>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "jmp" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "mov" for 0x400bff>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "call" for 0x400c0b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400c22>, <DisassemblerInsn "sub" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "movzx" for 0x400c2d>, <DisassemblerInsn "sar" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c33>, <DisassemblerInsn "xor" for 0x400c35>, <DisassemblerInsn "sub" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b15>, <DisassemblerInsn "mov" for 0x400b1a>, <DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "mov" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "mov" for 0x400b31>, <DisassemblerInsn "mov" for 0x400b33>, <DisassemblerInsn "mov" for 0x400b38>, <DisassemblerInsn "call" for 0x400b3d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400a20>, <DisassemblerInsn "mov" for 0x400a24>, <DisassemblerInsn "mov" for 0x400a29>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3b>, <DisassemblerInsn "cmp" for 0x400a40>, <DisassemblerInsn "je" for 0x400a46>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b4b>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "mov" for 0x400b54>, <DisassemblerInsn "call" for 0x400b59>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b88>, <DisassemblerInsn "movsxd" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "and" for 0x400b97>, <DisassemblerInsn "movzx" for 0x400b9b>, <DisassemblerInsn "add" for 0x400b9e>, <DisassemblerInsn "cmp" for 0x400ba1>, <DisassemblerInsn "jle" for 0x400ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 0x14], 1>', '<je~~0x400c22>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~dword ptr [rsp + 0x24], r8d>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<movsxd~~rcx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rip + 0xff52e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<je~~0x400b04>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 2>', '<jne~~0x400c3d>']}, {'block_Idx': 17, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~dword ptr [rsp + 0x40], edi>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~dword ptr [rsp + 0x38], edx>', '<movsxd~~rcx, dword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rip + 0xffef4]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 4>', '<cmp~~eax, 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400be9>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ax, word ptr [rax + rcx*2 + 0xc]>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<movsxd~~rax, dword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + rax*4 + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x3c]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~esi, 1>', '<shl~~esi, cl>', '<mov~~ecx, esi>', '<add~~edx, ecx>', '<sub~~edx, 1>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<sar~~edx, cl>', '<mov~~ecx, edx>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<je~~0x400b63>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x400bcc>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<call~~0x400100>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 34, 'blockInsts': ['<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 0xa]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~r8d, dword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x50]>', '<call~~0x400a20>']}, {'block_Idx': 43, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<mov~~dword ptr [rsp + 8], r8d>', '<mov~~dword ptr [rsp + 4], r9d>', '<cmp~~qword ptr [rsp + 0x20], 0>', '<je~~0x400a50>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movsxd~~rdx, dword ptr [rsp + 0x14]>', '<mov~~cx, word ptr [rcx + rdx*2 + 0xc]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<add~~ecx, 1>', '<cmp~~eax, ecx>', '<jle~~0x400baf>']}], 'cfg_edge_info': [(25, 29), (3, 7), (0, 2), (11, 5), (58, 22), (66, 11), (2, 5), (1, 3), (34, 43), (33, 38), (3, 6), (29, 34), (30, 5), (38, 43), (0, 1), (15, 7), (16, 15), (7, 12), (6, 10), (34, 60), (33, 34), (58, 60), (63, 29), (29, 33), (60, 66), (12, 17), (22, 30), (4, 22), (12, 29), (1, 4), (9, 15), (66, 12), (15, 6), (38, 60), (4, 43), (7, 11), (6, 9)], 'cdg_edge_info': [(7, 29), (0, 2), (33, 60), (33, 66), (0, 5), (66, 5), (66, 11), (1, 3), (66, 29), (1, 30), (33, 38), (3, 6), (3, 15), (29, 34), (0, 1), (29, 66), (1, 5), (7, 12), (33, 34), (29, 33), (1, 22), (1, 4), (66, 12), (15, 6), (1, 7), (29, 60), (7, 5), (7, 11), (15, 15)], 'ddg_edge_info': [(22, 5), (7, 29), (7, 38), (29, 38), (0, 5), (12, 34), (0, 38), (34, 12), (3, 6), (38, 34), (3, 15), (29, 34), (6, 38), (60, 12), (0, 1), (0, 7), (0, 4), (60, 33), (7, 12), (0, 34), (29, 60), (3, 66), (7, 33), (29, 33), (60, 66), (60, 5), (6, 34), (0, 3), (0, 6), (0, 12), (12, 38), (34, 38), (0, 15), (60, 29), (7, 60), (7, 66), (60, 38)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O0.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 120 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 37 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 120 instructions in binary file.
[4197524]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.706850
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400c94>']}], 'cfg_edge_info': [(12, 5), (2, 5), (13, 5)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4197524], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O0/imgutils.o---after
The extraction of function: av_image_copy
[4197524]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 109 edges in CFGEmulated.
It has 75 nodes and 121 edges in CDG.
It has 1164 nodes and 1617 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197524]
{4197506, 4197124, 4197252, 4197392, 4197522, 4197524, 4197141, 4197403, 4197410, 4197040, 4197437, 4197186, 4197214, 4197345, 4197219, 4197353, 4197235, 4197367, 4197119}
[29, 5, 0, 30, 2, 33, 17, 7, 60, 66, 9, 63, 58, 16, 1, 10, 12, 38, 11, 3, 34, 4, 43, 15, 25, 22, 6]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 10 edges in CFGEmulated.
It has 8 nodes and 13 edges in CDG.
It has 146 nodes and 158 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:05.271633
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "je" for 0x400c19>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab4>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "mov" for 0x400acc>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "movsxd" for 0x400ad6>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "imul" for 0x400ae2>, <DisassemblerInsn "add" for 0x400ae6>, <DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400aee>, <DisassemblerInsn "movzx" for 0x400af3>, <DisassemblerInsn "and" for 0x400af7>, <DisassemblerInsn "cmp" for 0x400afa>, <DisassemblerInsn "je" for 0x400afd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400c1b>, <DisassemblerInsn "jne" for 0x400c20>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "movsxd" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "imul" for 0x40011c>, <DisassemblerInsn "add" for 0x400120>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "movzx" for 0x40012d>, <DisassemblerInsn "and" for 0x400131>, <DisassemblerInsn "cmp" for 0x400134>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be1>, <DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "jmp" for 0x400c8d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400baf>, <DisassemblerInsn "movsxd" for 0x400bb4>, <DisassemblerInsn "mov" for 0x400bb9>, <DisassemblerInsn "and" for 0x400bbe>, <DisassemblerInsn "movzx" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "movsxd" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "shl" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001c8>, <DisassemblerInsn "sub" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "sar" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x400aa4>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "movzx" for 0x400b09>, <DisassemblerInsn "and" for 0x400b0d>, <DisassemblerInsn "cmp" for 0x400b10>, <DisassemblerInsn "je" for 0x400b13>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "jmp" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "mov" for 0x400bff>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "call" for 0x400c0b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400c22>, <DisassemblerInsn "sub" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "movzx" for 0x400c2d>, <DisassemblerInsn "sar" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c33>, <DisassemblerInsn "xor" for 0x400c35>, <DisassemblerInsn "sub" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b15>, <DisassemblerInsn "mov" for 0x400b1a>, <DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "mov" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "mov" for 0x400b31>, <DisassemblerInsn "mov" for 0x400b33>, <DisassemblerInsn "mov" for 0x400b38>, <DisassemblerInsn "call" for 0x400b3d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400a20>, <DisassemblerInsn "mov" for 0x400a24>, <DisassemblerInsn "mov" for 0x400a29>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3b>, <DisassemblerInsn "cmp" for 0x400a40>, <DisassemblerInsn "je" for 0x400a46>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b4b>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "mov" for 0x400b54>, <DisassemblerInsn "call" for 0x400b59>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b88>, <DisassemblerInsn "movsxd" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "and" for 0x400b97>, <DisassemblerInsn "movzx" for 0x400b9b>, <DisassemblerInsn "add" for 0x400b9e>, <DisassemblerInsn "cmp" for 0x400ba1>, <DisassemblerInsn "jle" for 0x400ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 0x14], 1>', '<je~~0x400c22>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~dword ptr [rsp + 0x24], r8d>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<movsxd~~rcx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rip + 0xff52e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<je~~0x400b04>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 2>', '<jne~~0x400c3d>']}, {'block_Idx': 17, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~dword ptr [rsp + 0x40], edi>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~dword ptr [rsp + 0x38], edx>', '<movsxd~~rcx, dword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rip + 0xffef4]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 4>', '<cmp~~eax, 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400be9>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ax, word ptr [rax + rcx*2 + 0xc]>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<movsxd~~rax, dword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + rax*4 + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x3c]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~esi, 1>', '<shl~~esi, cl>', '<mov~~ecx, esi>', '<add~~edx, ecx>', '<sub~~edx, 1>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<sar~~edx, cl>', '<mov~~ecx, edx>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<je~~0x400b63>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x400bcc>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<call~~0x400100>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 34, 'blockInsts': ['<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 0xa]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~r8d, dword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x50]>', '<call~~0x400a20>']}, {'block_Idx': 43, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<mov~~dword ptr [rsp + 8], r8d>', '<mov~~dword ptr [rsp + 4], r9d>', '<cmp~~qword ptr [rsp + 0x20], 0>', '<je~~0x400a50>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movsxd~~rdx, dword ptr [rsp + 0x14]>', '<mov~~cx, word ptr [rcx + rdx*2 + 0xc]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<add~~ecx, 1>', '<cmp~~eax, ecx>', '<jle~~0x400baf>']}], 'cfg_edge_info': [(25, 29), (3, 7), (0, 2), (11, 5), (58, 22), (66, 11), (2, 5), (1, 3), (34, 43), (33, 38), (3, 6), (29, 34), (30, 5), (38, 43), (0, 1), (15, 7), (16, 15), (7, 12), (6, 10), (34, 60), (33, 34), (58, 60), (63, 29), (29, 33), (60, 66), (12, 17), (22, 30), (4, 22), (12, 29), (1, 4), (9, 15), (66, 12), (15, 6), (38, 60), (4, 43), (7, 11), (6, 9)], 'cdg_edge_info': [(7, 29), (0, 2), (33, 60), (33, 66), (0, 5), (66, 5), (66, 11), (1, 3), (66, 29), (1, 30), (33, 38), (3, 6), (3, 15), (29, 34), (0, 1), (29, 66), (1, 5), (7, 12), (33, 34), (29, 33), (1, 22), (1, 4), (66, 12), (15, 6), (1, 7), (29, 60), (7, 5), (7, 11), (15, 15)], 'ddg_edge_info': [(22, 5), (7, 29), (7, 38), (29, 38), (0, 5), (12, 34), (0, 38), (34, 12), (3, 6), (38, 34), (3, 15), (29, 34), (6, 38), (60, 12), (0, 1), (0, 7), (0, 4), (60, 33), (7, 12), (0, 34), (29, 60), (3, 66), (7, 33), (29, 33), (60, 66), (60, 5), (6, 34), (0, 3), (0, 6), (0, 12), (12, 38), (34, 38), (0, 15), (60, 29), (7, 60), (7, 66), (60, 38)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O1.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 362 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 360, 'instruction': 'addq\t$0x238, %rsp                      # imm = 0x0xee'}, {'instIndex': 361, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 172 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 362 instructions in binary file.
[4200654]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 172 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.232272
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "cmp" for 0x4013eb>, <DisassemblerInsn "jle" for 0x4013ee>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018b1>, <DisassemblerInsn "add" for 0x4018b9>, <DisassemblerInsn "cmp" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c0>, <DisassemblerInsn "jne" for 0x4018c8>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x4018ce>, <DisassemblerInsn "ret" for 0x4018d5>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013d8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401170>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "mov" for 0x4011a6>, <DisassemblerInsn "movsxd" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b0>, <DisassemblerInsn "mov" for 0x4011b8>, <DisassemblerInsn "imul" for 0x4011bf>, <DisassemblerInsn "add" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011cc>, <DisassemblerInsn "movzx" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "and" for 0x4011dd>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "jne" for 0x4011e3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x4018ce>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x40157f>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x238>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x4018ce>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x238>', '<mov~~dword ptr [rsp + 0x1d4], r9d>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~qword ptr [rsp + 0x1f0], rdi>', '<mov~~eax, dword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x1fc], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~rax, qword ptr [rip + 0xfee51]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x20b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x4018ce>']}], 'cfg_edge_info': [(0, 2), (28, 2), (15, 2), (5, 2)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4200654], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O1/imgutils.o---after
The extraction of function: av_image_copy
[4200654]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 44 nodes and 68 edges in CFGEmulated.
It has 44 nodes and 63 edges in CDG.
It has 1480 nodes and 1834 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4200654]
{4199928, 4200336, 4200184, 4199834, 4199074, 4199079, 4200617, 4198957, 4199350, 4200511, 4200262, 4200134, 4199625, 4199245, 4200654, 4199888, 4199384, 4199001, 4199389, 4200417, 4199908, 4200549, 4200166, 4200422, 4198889, 4200303, 4198768, 4199412, 4198904, 4199807}
[32, 3, 28, 13, 26, 14, 1, 6, 5, 30, 24, 8, 7, 11, 38, 33, 37, 36, 25, 21, 4, 17, 10, 0, 40, 9, 2, 27, 18, 16, 34, 20, 19]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:04.402174
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4015f8>, <DisassemblerInsn "mov" for 0x4015fa>, <DisassemblerInsn "mov" for 0x401602>, <DisassemblerInsn "mov" for 0x40160a>, <DisassemblerInsn "mov" for 0x401612>, <DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "imul" for 0x401621>, <DisassemblerInsn "add" for 0x401625>, <DisassemblerInsn "add" for 0x401628>, <DisassemblerInsn "shl" for 0x40162c>, <DisassemblerInsn "add" for 0x40162f>, <DisassemblerInsn "mov" for 0x401632>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "shr" for 0x401638>, <DisassemblerInsn "and" for 0x40163c>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "movzx" for 0x401644>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "and" for 0x40164e>, <DisassemblerInsn "movzx" for 0x401652>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "lea" for 0x40165d>, <DisassemblerInsn "mov" for 0x401665>, <DisassemblerInsn "shl" for 0x401668>, <DisassemblerInsn "add" for 0x40166c>, <DisassemblerInsn "mov" for 0x40166f>, <DisassemblerInsn "cmp" for 0x401677>, <DisassemblerInsn "jge" for 0x40167e>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f8>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "imul" for 0x401207>, <DisassemblerInsn "add" for 0x40120b>, <DisassemblerInsn "add" for 0x40120e>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x401214>, <DisassemblerInsn "xor" for 0x40121b>, <DisassemblerInsn "cmp" for 0x40121d>, <DisassemblerInsn "mov" for 0x401220>, <DisassemblerInsn "je" for 0x401227>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e6>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f4>, <DisassemblerInsn "mov" for 0x4017f9>, <DisassemblerInsn "mov" for 0x401801>, <DisassemblerInsn "mov" for 0x401809>, <DisassemblerInsn "mov" for 0x401811>, <DisassemblerInsn "mov" for 0x401815>, <DisassemblerInsn "movsxd" for 0x401819>, <DisassemblerInsn "mov" for 0x40181c>, <DisassemblerInsn "movsxd" for 0x401821>, <DisassemblerInsn "mov" for 0x401824>, <DisassemblerInsn "movsxd" for 0x401829>, <DisassemblerInsn "mov" for 0x40182c>, <DisassemblerInsn "mov" for 0x401831>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183b>, <DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x401848>, <DisassemblerInsn "mov" for 0x40184d>, <DisassemblerInsn "mov" for 0x401852>, <DisassemblerInsn "mov" for 0x401856>, <DisassemblerInsn "mov" for 0x40185b>, <DisassemblerInsn "call" for 0x401860>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40157f>, <DisassemblerInsn "mov" for 0x401586>, <DisassemblerInsn "mov" for 0x40158e>, <DisassemblerInsn "test" for 0x401596>, <DisassemblerInsn "jne" for 0x401598>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e4>, <DisassemblerInsn "xor" for 0x4015ec>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "call" for 0x4015f3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40157a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "and" for 0x4011f0>, <DisassemblerInsn "cmp" for 0x4011f3>, <DisassemblerInsn "jne" for 0x4011f6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "movzx" for 0x401234>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "xor" for 0x40123f>, <DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "xor" for 0x401243>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "mov" for 0x40124d>, <DisassemblerInsn "jmp" for 0x401254>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "cmp" for 0x4013eb>, <DisassemblerInsn "jle" for 0x4013ee>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018b1>, <DisassemblerInsn "add" for 0x4018b9>, <DisassemblerInsn "cmp" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c0>, <DisassemblerInsn "jne" for 0x4018c8>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401790>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x4017a0>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017af>, <DisassemblerInsn "mov" for 0x4017b3>, <DisassemblerInsn "mov" for 0x4017b7>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c0>, <DisassemblerInsn "cmp" for 0x4017c5>, <DisassemblerInsn "setne" for 0x4017c9>, <DisassemblerInsn "cmp" for 0x4017cc>, <DisassemblerInsn "setne" for 0x4017d0>, <DisassemblerInsn "and" for 0x4017d3>, <DisassemblerInsn "cmp" for 0x4017d5>, <DisassemblerInsn "setg" for 0x4017d8>, <DisassemblerInsn "and" for 0x4017db>, <DisassemblerInsn "test" for 0x4017dd>, <DisassemblerInsn "jne" for 0x4017df>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012ae>, <DisassemblerInsn "mov" for 0x4012b6>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c6>, <DisassemblerInsn "mov" for 0x4012ce>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "movsxd" for 0x4012da>, <DisassemblerInsn "mov" for 0x4012dd>, <DisassemblerInsn "movsxd" for 0x4012e5>, <DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "movsxd" for 0x4012f0>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "mov" for 0x401303>, <DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "call" for 0x401348>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012a2>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013b6>, <DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013ca>, <DisassemblerInsn "mov" for 0x4013ce>, <DisassemblerInsn "call" for 0x4013d3>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016e6>, <DisassemblerInsn "movzx" for 0x4016ee>, <DisassemblerInsn "mov" for 0x4016f1>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "shl" for 0x401728>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "add" for 0x401731>, <DisassemblerInsn "sar" for 0x401733>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "imul" for 0x40173c>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401698>, <DisassemblerInsn "mov" for 0x40169f>, <DisassemblerInsn "mov" for 0x4016a1>, <DisassemblerInsn "mov" for 0x4016a8>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "cmp" for 0x4016b4>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "jne" for 0x4016c0>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "shl" for 0x401728>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "add" for 0x401731>, <DisassemblerInsn "sar" for 0x401733>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "imul" for 0x40173c>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016c6>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "add" for 0x4016d5>, <DisassemblerInsn "xor" for 0x4016d8>, <DisassemblerInsn "cmp" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jae" for 0x4016e4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401776>, <DisassemblerInsn "movzx" for 0x40177e>, <DisassemblerInsn "sar" for 0x401781>, <DisassemblerInsn "mov" for 0x401783>, <DisassemblerInsn "xor" for 0x401785>, <DisassemblerInsn "sub" for 0x401787>, <DisassemblerInsn "mov" for 0x401789>, <DisassemblerInsn "mov" for 0x401790>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x4017a0>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017af>, <DisassemblerInsn "mov" for 0x4017b3>, <DisassemblerInsn "mov" for 0x4017b7>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c0>, <DisassemblerInsn "cmp" for 0x4017c5>, <DisassemblerInsn "setne" for 0x4017c9>, <DisassemblerInsn "cmp" for 0x4017cc>, <DisassemblerInsn "setne" for 0x4017d0>, <DisassemblerInsn "and" for 0x4017d3>, <DisassemblerInsn "cmp" for 0x4017d5>, <DisassemblerInsn "setg" for 0x4017d8>, <DisassemblerInsn "and" for 0x4017db>, <DisassemblerInsn "test" for 0x4017dd>, <DisassemblerInsn "jne" for 0x4017df>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x401260>, <DisassemblerInsn "mov" for 0x401268>, <DisassemblerInsn "mov" for 0x401270>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x40127e>, <DisassemblerInsn "cmp" for 0x401286>, <DisassemblerInsn "setne" for 0x40128a>, <DisassemblerInsn "cmp" for 0x40128d>, <DisassemblerInsn "setne" for 0x401291>, <DisassemblerInsn "and" for 0x401294>, <DisassemblerInsn "cmp" for 0x401296>, <DisassemblerInsn "setg" for 0x401299>, <DisassemblerInsn "and" for 0x40129c>, <DisassemblerInsn "test" for 0x40129e>, <DisassemblerInsn "jne" for 0x4012a0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40159a>, <DisassemblerInsn "mov" for 0x4015a1>, <DisassemblerInsn "mov" for 0x4015a9>, <DisassemblerInsn "shr" for 0x4015ac>, <DisassemblerInsn "and" for 0x4015b0>, <DisassemblerInsn "add" for 0x4015b4>, <DisassemblerInsn "movzx" for 0x4015b8>, <DisassemblerInsn "imul" for 0x4015bb>, <DisassemblerInsn "add" for 0x4015be>, <DisassemblerInsn "sar" for 0x4015c1>, <DisassemblerInsn "mov" for 0x4015c4>, <DisassemblerInsn "jmp" for 0x4015cb>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014d0>, <DisassemblerInsn "mov" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014e0>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "imul" for 0x4014ef>, <DisassemblerInsn "add" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014f6>, <DisassemblerInsn "add" for 0x4014fe>, <DisassemblerInsn "mov" for 0x401502>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "shl" for 0x40150d>, <DisassemblerInsn "mov" for 0x401510>, <DisassemblerInsn "add" for 0x401518>, <DisassemblerInsn "mov" for 0x40151b>, <DisassemblerInsn "mov" for 0x401523>, <DisassemblerInsn "and" for 0x401526>, <DisassemblerInsn "mov" for 0x40152a>, <DisassemblerInsn "add" for 0x401532>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "movzx" for 0x40153e>, <DisassemblerInsn "cmp" for 0x401541>, <DisassemblerInsn "cmova" for 0x401543>, <DisassemblerInsn "mov" for 0x401546>, <DisassemblerInsn "add" for 0x40154d>, <DisassemblerInsn "mov" for 0x401551>, <DisassemblerInsn "cmp" for 0x401559>, <DisassemblerInsn "mov" for 0x40155c>, <DisassemblerInsn "mov" for 0x40155e>, <DisassemblerInsn "mov" for 0x401565>, <DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "je" for 0x401574>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401170>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "mov" for 0x4011a6>, <DisassemblerInsn "movsxd" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b0>, <DisassemblerInsn "mov" for 0x4011b8>, <DisassemblerInsn "imul" for 0x4011bf>, <DisassemblerInsn "add" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011cc>, <DisassemblerInsn "movzx" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "and" for 0x4011dd>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "jne" for 0x4011e3>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x401848>, <DisassemblerInsn "mov" for 0x40184d>, <DisassemblerInsn "mov" for 0x401852>, <DisassemblerInsn "mov" for 0x401856>, <DisassemblerInsn "mov" for 0x40185b>, <DisassemblerInsn "call" for 0x401860>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013f4>, <DisassemblerInsn "mov" for 0x4013fb>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140a>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "lea" for 0x401419>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "lea" for 0x401429>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "and" for 0x401439>, <DisassemblerInsn "cmp" for 0x40143d>, <DisassemblerInsn "sete" for 0x401441>, <DisassemblerInsn "mov" for 0x401445>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "imul" for 0x401454>, <DisassemblerInsn "add" for 0x401458>, <DisassemblerInsn "add" for 0x40145b>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "imul" for 0x40146e>, <DisassemblerInsn "add" for 0x401472>, <DisassemblerInsn "add" for 0x401475>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x401481>, <DisassemblerInsn "mov" for 0x401484>, <DisassemblerInsn "xor" for 0x40148b>, <DisassemblerInsn "sub" for 0x40148d>, <DisassemblerInsn "mov" for 0x40148f>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "imul" for 0x40149d>, <DisassemblerInsn "add" for 0x4014a1>, <DisassemblerInsn "add" for 0x4014a4>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "mov" for 0x4014b2>, <DisassemblerInsn "xor" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014bc>, <DisassemblerInsn "jmp" for 0x4014c4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x4018ce>, <DisassemblerInsn "ret" for 0x4018d5>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017e1>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "xor" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015da>, <DisassemblerInsn "call" for 0x4015df>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x40135d>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "add" for 0x401374>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "add" for 0x40137f>, <DisassemblerInsn "mov" for 0x401382>, <DisassemblerInsn "mov" for 0x40138a>, <DisassemblerInsn "add" for 0x40138c>, <DisassemblerInsn "mov" for 0x40138f>, <DisassemblerInsn "cmp" for 0x401396>, <DisassemblerInsn "mov" for 0x401399>, <DisassemblerInsn "mov" for 0x4013a1>, <DisassemblerInsn "mov" for 0x4013a9>, <DisassemblerInsn "jg" for 0x4013b0>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016a8>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "cmp" for 0x4016b4>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "jne" for 0x4016c0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "call" for 0x401348>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013d8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rip + 0xfe9ef]>', '<imul~~rdx, rdx, 0x18>', '<add~~rax, rdx>', '<add~~rax, 0xc>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~ax, word ptr [rax]>', '<mov~~cx, ax>', '<shr~~cx, 2>', '<and~~cx, 7>', '<add~~cx, 1>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x9c], ecx>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<lea~~rdx, [rsp + 0x220]>', '<mov~~rsi, rax>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<cmp~~dword ptr [rsp + rax*4 + 0x220], ecx>', '<jge~~0x4016a8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rip + 0xfee09]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~cl, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x1cf], cl>', '<xor~~eax, eax>', '<cmp~~cl, 0>', '<mov~~dword ptr [rsp + 0x1d0], eax>', '<je~~0x4013dd>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x7c]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~r9, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x1d8]>', '<mov~~esi, dword ptr [rsi + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x38], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x10f]>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<test~~al, 1>', '<jne~~0x4015d0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x100]>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4014c9>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x401259>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1cf]>', '<movzx~~eax, al>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1c8], eax>', '<jmp~~0x4014c9>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x4018ce>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x40157f>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4017e6>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r8d, dword ptr [rsp + 0x1d4]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~rsi, qword ptr [rsp + 0x1d8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x178], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x188], rsi>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<mov~~eax, dword ptr [rsp + 0x1a4]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4013b6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x220]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x9c]>', '<mov~~dword ptr [rdx], esi>', '<mov~~dword ptr [rsp + rax*4 + 0x210], ecx>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<add~~rax, 1>', '<cmp~~rax, 4>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x401602>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x220]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x210]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jae~~0x4016f8>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4017e6>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4012a7>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~ax, word ptr [rax]>', '<shr~~ax, 2>', '<and~~ax, 7>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<imul~~eax, ecx>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<jmp~~0x401746>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rip + 0xfeb21]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0xe8], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0xea], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0xec], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1c8], eax>', '<je~~0x4013dd>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x238>', '<mov~~dword ptr [rsp + 0x1d4], r9d>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~qword ptr [rsp + 0x1f0], rdi>', '<mov~~eax, dword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x1fc], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~rax, qword ptr [rip + 0xfee51]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x20b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x4018ce>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~dil, byte ptr [rsp + 0x20b]>', '<lea~~r8, [rsp + 0x220]>', '<mov~~qword ptr [rsp + 0xf8], r8>', '<lea~~r8, [rsp + 0x210]>', '<mov~~qword ptr [rsp + 0x100], r8>', '<and~~dil, 4>', '<cmp~~dil, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x10f], dil>', '<mov~~rdi, qword ptr [rip + 0xfebbc]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 0xc>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<mov~~rdi, qword ptr [rip + 0xfeba2]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~rcx, qword ptr [rip + 0xfeb73]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x130], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jmp~~0x40157f>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x238>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4018a9>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf8]>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~esi, dword ptr [rsp + 0x15c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x174], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jg~~0x401312>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<add~~rax, 1>', '<cmp~~rax, 4>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x401602>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a4]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4018ce>']}], 'cfg_edge_info': [(16, 20), (24, 27), (32, 34), (33, 36), (18, 26), (14, 10), (21, 25), (0, 2), (37, 24), (17, 21), (1, 3), (36, 37), (13, 17), (25, 28), (32, 33), (26, 32), (20, 16), (38, 25), (4, 8), (21, 24), (3, 6), (30, 2), (19, 2), (5, 9), (0, 1), (10, 5), (9, 13), (34, 36), (10, 14), (27, 30), (11, 19), (24, 28), (6, 10), (25, 27), (38, 24), (4, 7), (3, 5), (5, 2), (30, 13), (8, 16), (1, 4), (37, 25), (36, 38), (13, 18), (7, 11), (16, 11)], 'cdg_edge_info': [(24, 30), (24, 27), (13, 36), (21, 28), (3, 10), (5, 13), (21, 25), (0, 2), (37, 24), (1, 3), (36, 37), (16, 16), (13, 17), (13, 26), (38, 28), (13, 32), (38, 25), (4, 8), (21, 24), (3, 6), (30, 2), (5, 9), (0, 1), (1, 2), (1, 5), (1, 11), (24, 28), (25, 27), (38, 24), (25, 30), (4, 7), (5, 2), (4, 16), (1, 19), (30, 13), (37, 28), (1, 4), (37, 25), (10, 10), (36, 38), (13, 18), (13, 21)], 'ddg_edge_info': [(13, 30), (0, 30), (26, 30), (13, 36), (18, 26), (26, 36), (11, 2), (0, 2), (0, 5), (9, 17), (0, 8), (26, 2), (0, 11), (0, 17), (9, 26), (9, 38), (25, 28), (26, 17), (0, 38), (38, 28), (26, 32), (38, 25), (13, 38), (9, 30), (4, 8), (3, 6), (26, 38), (5, 9), (0, 1), (10, 5), (0, 4), (0, 10), (9, 13), (0, 13), (9, 25), (26, 13), (17, 38), (0, 28), (0, 25), (13, 28), (6, 10), (26, 25), (13, 25), (26, 28), (3, 5), (30, 13), (0, 3), (0, 9), (8, 16), (0, 6), (17, 28), (9, 18), (17, 25), (36, 38), (0, 18), (28, 40), (26, 18)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 360, 'instruction': 'addq\t$0x238, %rsp                      # imm = 0x0xee'}, {'instIndex': 361, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 603 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 601, 'instruction': 'addq\t$0x448, %rsp                     # imm = 0x0x1c0'}, {'instIndex': 602, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 189 nodes and 340 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 603 instructions in binary file.
[4202778]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 189 nodes and 340 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.228837
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "mov" for 0x401494>, <DisassemblerInsn "imul" for 0x40149b>, <DisassemblerInsn "add" for 0x40149f>, <DisassemblerInsn "add" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "cmp" for 0x4014af>, <DisassemblerInsn "je" for 0x4014b1>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f5>, <DisassemblerInsn "mov" for 0x4020fd>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "cmp" for 0x402109>, <DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "jne" for 0x402114>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ad0>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401400>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142f>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "movsxd" for 0x40143d>, <DisassemblerInsn "mov" for 0x401440>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "imul" for 0x40144f>, <DisassemblerInsn "add" for 0x401453>, <DisassemblerInsn "add" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "movzx" for 0x401463>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "and" for 0x40146d>, <DisassemblerInsn "cmp" for 0x401470>, <DisassemblerInsn "jne" for 0x401473>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "cmp" for 0x401ae3>, <DisassemblerInsn "jle" for 0x401ae6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40211a>, <DisassemblerInsn "ret" for 0x402121>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfeb75]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3e3], al>', '<cmp~~al, 0>', '<je~~0x40211a>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jne~~0x401c9d>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40211a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x448>', '<mov~~dword ptr [rsp + 0x3e4], r9d>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~qword ptr [rsp + 0x3f8], rsi>', '<mov~~qword ptr [rsp + 0x400], rdi>', '<mov~~eax, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~rax, qword ptr [rip + 0xfebc1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x41b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40211a>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<cmp~~eax, 0>', '<jle~~0x40211a>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x448>', '<ret~~>']}], 'cfg_edge_info': [(37, 2), (0, 2), (18, 2), (3, 2), (15, 2)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4202778], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O2/imgutils.o---after
The extraction of function: av_image_copy
[4202778]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 97 nodes and 147 edges in CFGEmulated.
It has 96 nodes and 160 edges in CDG.
It has 2869 nodes and 3738 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202778]
{4199424, 4199545, 4199808, 4200069, 4201739, 4199564, 4200077, 4199950, 4199824, 4199700, 4200343, 4202778, 4199836, 4201629, 4199710, 4202399, 4202269, 4199969, 4202656, 4200230, 4199718, 4200491, 4199851, 4201771, 4201134, 4199726, 4202546, 4199988, 4200885, 4199607, 4200759, 4199863, 4201656, 4201911, 4202039, 4201789, 4201019, 4200000, 4200265, 4199885, 4202452, 4201173, 4202199, 4200031, 4199904, 4199655, 4201447, 4202601, 4200039, 4201196, 4200045, 4201710, 4200818, 4199923, 4199796, 4202741, 4200564, 4200952, 4200697, 4202492, 4199935}
[78, 1, 30, 55, 43, 88, 42, 89, 14, 36, 24, 50, 7, 18, 60, 39, 67, 34, 76, 49, 79, 9, 95, 66, 62, 20, 31, 3, 83, 44, 38, 84, 23, 26, 25, 46, 90, 91, 27, 0, 12, 19, 13, 5, 96, 2, 33, 92, 93, 82, 94, 10, 35, 41, 85, 6, 32, 16, 77, 21, 28, 48, 71, 4, 86, 53, 54, 80, 75, 11, 8]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:14.538587
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "and" for 0x400238>, <DisassemblerInsn "movzx" for 0x40023c>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "ret" for 0x40024d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "and" for 0x401480>, <DisassemblerInsn "cmp" for 0x401483>, <DisassemblerInsn "jne" for 0x401486>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb8>, <DisassemblerInsn "mov" for 0x401cbf>, <DisassemblerInsn "mov" for 0x401cc7>, <DisassemblerInsn "shr" for 0x401cca>, <DisassemblerInsn "and" for 0x401cce>, <DisassemblerInsn "add" for 0x401cd2>, <DisassemblerInsn "movzx" for 0x401cd6>, <DisassemblerInsn "imul" for 0x401cd9>, <DisassemblerInsn "add" for 0x401cdc>, <DisassemblerInsn "sar" for 0x401cdf>, <DisassemblerInsn "mov" for 0x401ce2>, <DisassemblerInsn "jmp" for 0x401ce9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd4>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fdd>, <DisassemblerInsn "mov" for 0x401fe2>, <DisassemblerInsn "mov" for 0x401fea>, <DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "call" for 0x401ff7>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e32>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f8>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a08>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "add" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "add" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a36>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a5>, <DisassemblerInsn "mov" for 0x4020ad>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "add" for 0x4020be>, <DisassemblerInsn "mov" for 0x4020c1>, <DisassemblerInsn "add" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020c9>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "add" for 0x4020d0>, <DisassemblerInsn "mov" for 0x4020d3>, <DisassemblerInsn "add" for 0x4020d7>, <DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "cmp" for 0x4020de>, <DisassemblerInsn "mov" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e6>, <DisassemblerInsn "mov" for 0x4020eb>, <DisassemblerInsn "jb" for 0x4020ef>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401514>, <DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aec>, <DisassemblerInsn "mov" for 0x401af3>, <DisassemblerInsn "mov" for 0x401afb>, <DisassemblerInsn "mov" for 0x401b02>, <DisassemblerInsn "mov" for 0x401b09>, <DisassemblerInsn "lea" for 0x401b11>, <DisassemblerInsn "lea" for 0x401b19>, <DisassemblerInsn "and" for 0x401b21>, <DisassemblerInsn "cmp" for 0x401b25>, <DisassemblerInsn "sete" for 0x401b29>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b35>, <DisassemblerInsn "imul" for 0x401b3c>, <DisassemblerInsn "add" for 0x401b40>, <DisassemblerInsn "add" for 0x401b43>, <DisassemblerInsn "mov" for 0x401b47>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "imul" for 0x401b56>, <DisassemblerInsn "add" for 0x401b5a>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "lea" for 0x401b65>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "lea" for 0x401b75>, <DisassemblerInsn "mov" for 0x401b7d>, <DisassemblerInsn "mov" for 0x401b85>, <DisassemblerInsn "imul" for 0x401b8c>, <DisassemblerInsn "add" for 0x401b90>, <DisassemblerInsn "add" for 0x401b93>, <DisassemblerInsn "mov" for 0x401b97>, <DisassemblerInsn "add" for 0x401b9f>, <DisassemblerInsn "mov" for 0x401ba2>, <DisassemblerInsn "xor" for 0x401ba9>, <DisassemblerInsn "sub" for 0x401bab>, <DisassemblerInsn "mov" for 0x401bad>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "imul" for 0x401bbb>, <DisassemblerInsn "add" for 0x401bbf>, <DisassemblerInsn "add" for 0x401bc2>, <DisassemblerInsn "mov" for 0x401bc6>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd0>, <DisassemblerInsn "xor" for 0x401bd8>, <DisassemblerInsn "mov" for 0x401bda>, <DisassemblerInsn "jmp" for 0x401be2>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed7>, <DisassemblerInsn "mov" for 0x401ede>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eed>, <DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "call" for 0x401f18>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401797>, <DisassemblerInsn "mov" for 0x40179e>, <DisassemblerInsn "mov" for 0x4017a6>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "mov" for 0x4017c6>, <DisassemblerInsn "mov" for 0x4017c8>, <DisassemblerInsn "movsxd" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017cd>, <DisassemblerInsn "movsxd" for 0x4017d5>, <DisassemblerInsn "mov" for 0x4017d8>, <DisassemblerInsn "cdqe" for 0x4017e0>, <DisassemblerInsn "mov" for 0x4017e2>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "add" for 0x4017ec>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f6>, <DisassemblerInsn "and" for 0x4017f8>, <DisassemblerInsn "mov" for 0x4017fb>, <DisassemblerInsn "xor" for 0x401802>, <DisassemblerInsn "cmp" for 0x401804>, <DisassemblerInsn "mov" for 0x401807>, <DisassemblerInsn "mov" for 0x40180f>, <DisassemblerInsn "mov" for 0x401817>, <DisassemblerInsn "mov" for 0x40181e>, <DisassemblerInsn "je" for 0x401825>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "cmp" for 0x401ae3>, <DisassemblerInsn "jle" for 0x401ae6>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "mov" for 0x401dbe>, <DisassemblerInsn "movzx" for 0x401dc6>, <DisassemblerInsn "sar" for 0x401dc9>, <DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "xor" for 0x401dcd>, <DisassemblerInsn "sub" for 0x401dcf>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "mov" for 0x401e02>, <DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "cmp" for 0x401e16>, <DisassemblerInsn "setne" for 0x401e1a>, <DisassemblerInsn "cmp" for 0x401e1d>, <DisassemblerInsn "setne" for 0x401e21>, <DisassemblerInsn "and" for 0x401e24>, <DisassemblerInsn "cmp" for 0x401e26>, <DisassemblerInsn "setg" for 0x401e29>, <DisassemblerInsn "and" for 0x401e2c>, <DisassemblerInsn "test" for 0x401e2e>, <DisassemblerInsn "jne" for 0x401e30>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ffc>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "mov" for 0x402005>, <DisassemblerInsn "mov" for 0x40200d>, <DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201d>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "add" for 0x402025>, <DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "call" for 0x40202d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa6>, <DisassemblerInsn "mov" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "cmp" for 0x401fbd>, <DisassemblerInsn "mov" for 0x401fc0>, <DisassemblerInsn "mov" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "jb" for 0x401fce>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "mov" for 0x401d13>, <DisassemblerInsn "add" for 0x401d1a>, <DisassemblerInsn "xor" for 0x401d1d>, <DisassemblerInsn "cmp" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d22>, <DisassemblerInsn "jae" for 0x401d29>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014e7>, <DisassemblerInsn "and" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f4>, <DisassemblerInsn "xorps" for 0x4014fc>, <DisassemblerInsn "xor" for 0x4014ff>, <DisassemblerInsn "mov" for 0x401501>, <DisassemblerInsn "movaps" for 0x401509>, <DisassemblerInsn "movaps" for 0x40150c>, <DisassemblerInsn "movaps" for 0x401514>, <DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401685>, <DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "mov" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "add" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f52>, <DisassemblerInsn "add" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f5d>, <DisassemblerInsn "add" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f68>, <DisassemblerInsn "add" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f72>, <DisassemblerInsn "cmp" for 0x401f79>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "mov" for 0x401f8b>, <DisassemblerInsn "mov" for 0x401f92>, <DisassemblerInsn "jne" for 0x401f99>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cee>, <DisassemblerInsn "mov" for 0x401cf6>, <DisassemblerInsn "mov" for 0x401cfe>, <DisassemblerInsn "call" for 0x401d06>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "mov" for 0x401494>, <DisassemblerInsn "imul" for 0x40149b>, <DisassemblerInsn "add" for 0x40149f>, <DisassemblerInsn "add" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "cmp" for 0x4014af>, <DisassemblerInsn "je" for 0x4014b1>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "mov" for 0x401d4c>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d5a>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "shl" for 0x401d6d>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "add" for 0x401d76>, <DisassemblerInsn "sar" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "imul" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d84>, <DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "mov" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e72>, <DisassemblerInsn "movsxd" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e79>, <DisassemblerInsn "movsxd" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e84>, <DisassemblerInsn "cdqe" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e8e>, <DisassemblerInsn "mov" for 0x401e96>, <DisassemblerInsn "add" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "and" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea7>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "cmp" for 0x401eb0>, <DisassemblerInsn "mov" for 0x401eb3>, <DisassemblerInsn "mov" for 0x401ebb>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "je" for 0x401ed1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "mov" for 0x401e02>, <DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "cmp" for 0x401e16>, <DisassemblerInsn "setne" for 0x401e1a>, <DisassemblerInsn "cmp" for 0x401e1d>, <DisassemblerInsn "setne" for 0x401e21>, <DisassemblerInsn "and" for 0x401e24>, <DisassemblerInsn "cmp" for 0x401e26>, <DisassemblerInsn "setg" for 0x401e29>, <DisassemblerInsn "and" for 0x401e2c>, <DisassemblerInsn "test" for 0x401e2e>, <DisassemblerInsn "jne" for 0x401e30>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "mov" for 0x40187c>, <DisassemblerInsn "mov" for 0x401884>, <DisassemblerInsn "mov" for 0x40188c>, <DisassemblerInsn "mov" for 0x401894>, <DisassemblerInsn "mov" for 0x40189b>, <DisassemblerInsn "mov" for 0x4018a2>, <DisassemblerInsn "add" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018ac>, <DisassemblerInsn "add" for 0x4018b4>, <DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "add" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c2>, <DisassemblerInsn "add" for 0x4018c9>, <DisassemblerInsn "mov" for 0x4018cc>, <DisassemblerInsn "cmp" for 0x4018d3>, <DisassemblerInsn "mov" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "mov" for 0x4018ec>, <DisassemblerInsn "jne" for 0x4018f3>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "mov" for 0x401982>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "add" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199d>, <DisassemblerInsn "add" for 0x4019a5>, <DisassemblerInsn "mov" for 0x4019a8>, <DisassemblerInsn "call" for 0x4019b0>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40151e>, <DisassemblerInsn "movaps" for 0x401526>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9d>, <DisassemblerInsn "mov" for 0x401ca4>, <DisassemblerInsn "mov" for 0x401cac>, <DisassemblerInsn "test" for 0x401cb4>, <DisassemblerInsn "jne" for 0x401cb6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401400>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142f>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "movsxd" for 0x40143d>, <DisassemblerInsn "mov" for 0x401440>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "imul" for 0x40144f>, <DisassemblerInsn "add" for 0x401453>, <DisassemblerInsn "add" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "movzx" for 0x401463>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "and" for 0x40146d>, <DisassemblerInsn "cmp" for 0x401470>, <DisassemblerInsn "jne" for 0x401473>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40182b>, <DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401839>, <DisassemblerInsn "mov" for 0x401841>, <DisassemblerInsn "mov" for 0x401849>, <DisassemblerInsn "mov" for 0x401851>, <DisassemblerInsn "mov" for 0x401858>, <DisassemblerInsn "mov" for 0x40185f>, <DisassemblerInsn "mov" for 0x401867>, <DisassemblerInsn "call" for 0x40186f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401bee>, <DisassemblerInsn "mov" for 0x401bf6>, <DisassemblerInsn "mov" for 0x401bfe>, <DisassemblerInsn "mov" for 0x401c06>, <DisassemblerInsn "imul" for 0x401c0d>, <DisassemblerInsn "add" for 0x401c11>, <DisassemblerInsn "mov" for 0x401c14>, <DisassemblerInsn "add" for 0x401c1c>, <DisassemblerInsn "mov" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c28>, <DisassemblerInsn "shl" for 0x401c2b>, <DisassemblerInsn "mov" for 0x401c2e>, <DisassemblerInsn "add" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c39>, <DisassemblerInsn "mov" for 0x401c41>, <DisassemblerInsn "and" for 0x401c44>, <DisassemblerInsn "mov" for 0x401c48>, <DisassemblerInsn "add" for 0x401c50>, <DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "movzx" for 0x401c5c>, <DisassemblerInsn "cmp" for 0x401c5f>, <DisassemblerInsn "cmova" for 0x401c61>, <DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "add" for 0x401c6b>, <DisassemblerInsn "mov" for 0x401c6f>, <DisassemblerInsn "cmp" for 0x401c77>, <DisassemblerInsn "mov" for 0x401c7a>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "mov" for 0x401c83>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "je" for 0x401c92>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b7>, <DisassemblerInsn "movzx" for 0x4014be>, <DisassemblerInsn "mov" for 0x4014c1>, <DisassemblerInsn "xor" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014cb>, <DisassemblerInsn "xor" for 0x4014cd>, <DisassemblerInsn "cmp" for 0x4014cf>, <DisassemblerInsn "mov" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014da>, <DisassemblerInsn "jb" for 0x4014e1>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40211a>, <DisassemblerInsn "ret" for 0x402121>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b5>, <DisassemblerInsn "mov" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019cd>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "add" for 0x4019dd>, <DisassemblerInsn "mov" for 0x4019e0>, <DisassemblerInsn "add" for 0x4019e8>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "call" for 0x4019f3>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d2b>, <DisassemblerInsn "movzx" for 0x401d33>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "mov" for 0x401d4c>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d5a>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "shl" for 0x401d6d>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "add" for 0x401d76>, <DisassemblerInsn "sar" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "imul" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d84>, <DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40166d>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "movaps" for 0x40167d>, <DisassemblerInsn "movaps" for 0x401685>, <DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aae>, <DisassemblerInsn "mov" for 0x401ab6>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac2>, <DisassemblerInsn "mov" for 0x401ac6>, <DisassemblerInsn "call" for 0x401acb>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "xor" for 0x400016>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "call" for 0x40001d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402069>, <DisassemblerInsn "mov" for 0x40206e>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "add" for 0x40208b>, <DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "add" for 0x402093>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "call" for 0x40209b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401792>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401937>, <DisassemblerInsn "mov" for 0x40193e>, <DisassemblerInsn "mov" for 0x401946>, <DisassemblerInsn "mov" for 0x40194e>, <DisassemblerInsn "mov" for 0x401956>, <DisassemblerInsn "mov" for 0x40195d>, <DisassemblerInsn "mov" for 0x401965>, <DisassemblerInsn "call" for 0x40196d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "mov" for 0x402037>, <DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402044>, <DisassemblerInsn "mov" for 0x40204c>, <DisassemblerInsn "add" for 0x402054>, <DisassemblerInsn "mov" for 0x402057>, <DisassemblerInsn "add" for 0x40205c>, <DisassemblerInsn "mov" for 0x40205f>, <DisassemblerInsn "call" for 0x402064>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ad0>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401526>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f5>, <DisassemblerInsn "mov" for 0x4020fd>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "cmp" for 0x402109>, <DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "jne" for 0x402114>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401749>, <DisassemblerInsn "mov" for 0x401750>, <DisassemblerInsn "mov" for 0x401758>, <DisassemblerInsn "mov" for 0x401760>, <DisassemblerInsn "mov" for 0x401763>, <DisassemblerInsn "mov" for 0x40176b>, <DisassemblerInsn "mov" for 0x40176e>, <DisassemblerInsn "cmp" for 0x401776>, <DisassemblerInsn "setne" for 0x40177a>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "setne" for 0x401781>, <DisassemblerInsn "and" for 0x401784>, <DisassemblerInsn "cmp" for 0x401786>, <DisassemblerInsn "setg" for 0x401789>, <DisassemblerInsn "and" for 0x40178c>, <DisassemblerInsn "test" for 0x40178e>, <DisassemblerInsn "jne" for 0x401790>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3b>, <DisassemblerInsn "mov" for 0x401a43>, <DisassemblerInsn "mov" for 0x401a4b>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "mov" for 0x401a5b>, <DisassemblerInsn "add" for 0x401a62>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "add" for 0x401a6d>, <DisassemblerInsn "mov" for 0x401a70>, <DisassemblerInsn "mov" for 0x401a78>, <DisassemblerInsn "add" for 0x401a7a>, <DisassemblerInsn "mov" for 0x401a7d>, <DisassemblerInsn "add" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a87>, <DisassemblerInsn "cmp" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a91>, <DisassemblerInsn "mov" for 0x401a99>, <DisassemblerInsn "mov" for 0x401aa1>, <DisassemblerInsn "jb" for 0x401aa8>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "ret" for 0x40024d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f9>, <DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "mov" for 0x401910>, <DisassemblerInsn "cmp" for 0x401917>, <DisassemblerInsn "mov" for 0x40191a>, <DisassemblerInsn "mov" for 0x401922>, <DisassemblerInsn "mov" for 0x40192a>, <DisassemblerInsn "jb" for 0x401931>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401726>, <DisassemblerInsn "mov" for 0x40172e>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "jmp" for 0x401744>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~cx, word ptr [rcx]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rax + rcx*4], 3>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x41c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x401749>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3e4]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ax, word ptr [rax]>', '<shr~~ax, 2>', '<and~~ax, 7>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<imul~~eax, ecx>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jmp~~0x401d8b>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<call~~0x500030>']}, {'block_Idx': 43, 'blockInsts': ['<jmp~~0x4020f5>']}, {'block_Idx': 88, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1d0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<call~~0x500030>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0x44]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x58], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x401fd4>']}, {'block_Idx': 14, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jmp~~0x40151e>']}, {'block_Idx': 36, 'blockInsts': ['<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~esi, dword ptr [rsp + 0x40c]>', '<mov~~ecx, dword ptr [rsp + 0x3e4]>', '<mov~~dil, byte ptr [rsp + 0x41b]>', '<lea~~r8, [rsp + 0x430]>', '<lea~~r8, [rsp + 0x420]>', '<and~~dil, 4>', '<cmp~~dil, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x14f], dil>', '<mov~~rdi, qword ptr [rip + 0xfe4d4]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 0xc>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<mov~~rdi, qword ptr [rip + 0xfe4ba]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rdi, [rsp + 0x430]>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<lea~~rdi, [rsp + 0x420]>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~rdi, qword ptr [rip + 0xfe484]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x178], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x17c], ecx>', '<mov~~rcx, qword ptr [rip + 0xfe455]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x188], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jmp~~0x401c9d>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~rdx, qword ptr [rsp + 0x280]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~r8d, dword ptr [rsp + 0x3e4]>', '<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x248], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x250], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x258], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x260], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x264], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<je~~0x4018f9>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<cmp~~eax, 0>', '<jle~~0x40211a>']}, {'block_Idx': 60, 'blockInsts': ['<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x17c]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401e37>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<call~~0x500030>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 76, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x4020f5>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x420]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jae~~0x401d3d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3c8]>', '<and~~eax, 0xf8>', '<mov~~qword ptr [rsp + 0x390], rax>', '<xorps~~xmm0, xmm0>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jmp~~0x40151e>']}, {'block_Idx': 95, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x370]>', '<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 66, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r9, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~edi, dword ptr [rsp + 0xc4]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x90], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<jne~~0x401ed7>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40151e>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x160]>', '<call~~0x400000>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfeb75]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3e3], al>', '<cmp~~al, 0>', '<je~~0x40211a>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x178]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x430]>', '<mov~~dword ptr [rsp + 0x104], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~r9, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rax + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<je~~0x401f9f>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401e37>']}, {'block_Idx': 84, 'blockInsts': ['<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x218]>', '<mov~~r9, qword ptr [rsp + 0x250]>', '<mov~~rsi, qword ptr [rsp + 0x220]>', '<mov~~r8, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x228]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<mov~~edi, dword ptr [rsp + 0x264]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x230], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x240], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x244], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<jne~~0x40182b>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<call~~0x500030>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x3b0]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x3a0]>', '<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 46, 'blockInsts': ['<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 90, 'blockInsts': ['<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 91, 'blockInsts': ['<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x14f]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x401cee>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x448>', '<mov~~dword ptr [rsp + 0x3e4], r9d>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~qword ptr [rsp + 0x3f8], rsi>', '<mov~~qword ptr [rsp + 0x400], rdi>', '<mov~~eax, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~rax, qword ptr [rip + 0xfebc1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x41b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40211a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x27c]>', '<mov~~eax, dword ptr [rsp + 0x278]>', '<mov~~rdi, qword ptr [rsp + 0x270]>', '<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~dword ptr [rsp + 0x228], eax>', '<mov~~qword ptr [rsp + 0x218], rdi>', '<mov~~qword ptr [rsp + 0x220], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x401be7>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x298]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x3c8]>', '<mov~~rdi, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfe403]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x118], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0x138], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0x13a], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x298], eax>', '<je~~0x401ad5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x3e3]>', '<movzx~~eax, dl>', '<mov~~qword ptr [rsp + 0x3c8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~dl, 8>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<jb~~0x401726>']}, {'block_Idx': 96, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x448>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rsi, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1c0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<call~~0x500030>']}, {'block_Idx': 92, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 93, 'blockInsts': ['<jne~~0x40151e>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<mov~~eax, dword ptr [rsp + 0x178]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x430]>', '<mov~~dword ptr [rsp + 0x104], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x3c8]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x330]>', '<movaps~~xmm3, xmmword ptr [rsp + 0x370]>', '<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3f0]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 35, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 41, 'blockInsts': ['<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x401aae>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x214]>', '<mov~~rdi, qword ptr [rsp + 0x208]>', '<mov~~rsi, qword ptr [rsp + 0x200]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x1e4], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<call~~0x500030>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40211a>']}, {'block_Idx': 28, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x3a0]>', '<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jne~~0x401c9d>']}, {'block_Idx': 71, 'blockInsts': ['<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401797>']}, {'block_Idx': 86, 'blockInsts': ['<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 53, 'blockInsts': ['<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rdi, qword ptr [rsp + 0x250]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~esi, dword ptr [rsp + 0x1e4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1e8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x1f0], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x1f8], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x1fc], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x200], rdx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], eax>', '<jb~~0x401937>']}, {'block_Idx': 80, 'blockInsts': ['<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 75, 'blockInsts': ['<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x260]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x278]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x200], rdx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], eax>', '<jb~~0x401aae>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~eax, dword ptr [rsp + 0x3dc]>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401be7>']}], 'cfg_edge_info': [(67, 77), (82, 38), (38, 44), (83, 39), (39, 44), (49, 55), (11, 16), (66, 71), (21, 2), (13, 19), (7, 12), (79, 83), (44, 49), (31, 79), (86, 88), (77, 85), (49, 48), (36, 41), (30, 34), (16, 26), (54, 10), (33, 42), (42, 54), (0, 2), (31, 35), (9, 14), (1, 3), (27, 31), (88, 90), (84, 86), (5, 9), (43, 48), (78, 79), (34, 39), (28, 32), (71, 76), (55, 67), (3, 5), (82, 39), (60, 66), (8, 13), (19, 13), (18, 2), (13, 18), (7, 11), (79, 82), (90, 91), (54, 16), (41, 46), (4, 6), (96, 18), (62, 50), (10, 21), (25, 28), (32, 36), (23, 12), (20, 25), (27, 30), (93, 94), (83, 38), (6, 10), (3, 2), (50, 62), (12, 23), (80, 84), (39, 43), (1, 4), (76, 80), (94, 95), (48, 27), (24, 27), (26, 33), (95, 96), (93, 25), (91, 92), (48, 2), (89, 55), (44, 50), (96, 8), (0, 1), (46, 53), (62, 49), (11, 10), (92, 93), (89, 48), (23, 11), (4, 7), (18, 24), (5, 8), (14, 20), (75, 79), (85, 89), (53, 60)], 'cdg_edge_info': [(89, 77), (93, 86), (5, 28), (5, 92), (83, 39), (49, 89), (54, 33), (39, 44), (5, 76), (54, 42), (93, 88), (11, 16), (49, 55), (5, 94), (7, 12), (79, 83), (5, 60), (54, 26), (5, 14), (5, 32), (5, 96), (1, 10), (7, 23), (5, 53), (5, 71), (5, 80), (5, 25), (1, 3), (27, 31), (62, 62), (5, 46), (5, 9), (4, 11), (27, 79), (93, 60), (3, 5), (82, 39), (5, 66), (5, 84), (18, 48), (93, 90), (79, 82), (5, 41), (93, 53), (54, 16), (11, 54), (5, 13), (62, 50), (93, 28), (93, 92), (93, 46), (49, 77), (23, 12), (89, 67), (3, 18), (89, 85), (44, 62), (93, 76), (27, 30), (5, 91), (5, 36), (18, 27), (23, 23), (96, 13), (1, 4), (93, 32), (5, 93), (93, 41), (11, 33), (48, 27), (11, 42), (89, 89), (93, 71), (48, 48), (93, 80), (93, 25), (5, 86), (5, 95), (11, 26), (89, 55), (44, 50), (96, 8), (0, 1), (93, 91), (5, 88), (93, 36), (54, 54), (49, 67), (13, 13), (49, 85), (4, 7), (18, 24), (93, 66), (5, 8), (39, 49), (93, 84), (93, 93), (5, 90)], 'ddg_edge_info': [(90, 88), (32, 46), (7, 26), (67, 77), (85, 55), (0, 60), (28, 76), (0, 5), (0, 14), (85, 27), (50, 27), (32, 76), (83, 39), (36, 46), (66, 96), (32, 39), (53, 71), (85, 48), (0, 44), (79, 44), (0, 53), (85, 2), (39, 44), (32, 60), (0, 7), (0, 71), (49, 55), (11, 16), (66, 71), (0, 16), (0, 80), (9, 28), (5, 94), (94, 96), (44, 77), (24, 83), (7, 12), (79, 83), (90, 92), (44, 49), (85, 50), (0, 46), (0, 55), (32, 53), (86, 88), (77, 85), (0, 9), (9, 76), (91, 93), (32, 71), (5, 96), (50, 31), (24, 30), (25, 84), (79, 30), (50, 49), (7, 23), (33, 42), (0, 30), (79, 39), (42, 54), (0, 39), (0, 94), (0, 48), (16, 26), (0, 2), (0, 66), (9, 14), (66, 84), (32, 82), (32, 91), (88, 90), (7, 16), (0, 32), (82, 83), (0, 96), (90, 96), (0, 41), (0, 50), (28, 66), (84, 86), (5, 9), (80, 76), (27, 79), (80, 94), (50, 44), (0, 25), (71, 76), (25, 88), (55, 67), (32, 41), (3, 5), (82, 39), (41, 53), (92, 25), (79, 55), (44, 67), (50, 83), (8, 13), (13, 18), (0, 18), (44, 85), (24, 82), (7, 11), (27, 44), (0, 27), (79, 82), (9, 94), (0, 91), (85, 31), (0, 36), (79, 27), (54, 16), (85, 49), (41, 46), (12, 10), (24, 39), (5, 13), (9, 66), (24, 48), (79, 48), (86, 96), (14, 25), (60, 86), (79, 2), (27, 83), (39, 48), (96, 18), (0, 11), (50, 30), (62, 50), (0, 84), (9, 32), (90, 84), (32, 36), (23, 12), (79, 50), (44, 62), (42, 10), (80, 91), (0, 4), (0, 13), (27, 39), (44, 89), (0, 86), (66, 86), (0, 31), (0, 95), (85, 44), (80, 66), (50, 62), (12, 23), (44, 55), (7, 54), (30, 83), (85, 83), (76, 80), (0, 24), (0, 88), (32, 86), (48, 27), (24, 27), (44, 39), (50, 55), (12, 16), (26, 33), (95, 96), (91, 28), (46, 60), (0, 8), (9, 84), (85, 30), (0, 90), (85, 39), (50, 39), (89, 55), (32, 88), (50, 48), (9, 88), (50, 2), (44, 50), (96, 8), (10, 2), (55, 89), (0, 1), (42, 16), (62, 49), (0, 10), (3, 91), (60, 88), (0, 83), (0, 28), (83, 44), (0, 92), (24, 31), (23, 11), (79, 31), (27, 48), (18, 24), (90, 95), (12, 11), (4, 7), (53, 76), (7, 33), (0, 49), (79, 49), (7, 42), (5, 8), (16, 54), (0, 3), (91, 32), (0, 12), (0, 76), (85, 89), (53, 60)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 601, 'instruction': 'addq\t$0x448, %rsp                     # imm = 0x0x1c0'}, {'instIndex': 602, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 763 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 761, 'instruction': 'addq\t$0x558, %rsp                     # imm = 0x0x22e'}, {'instIndex': 762, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 195 nodes and 350 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 763 instructions in binary file.
[4206066]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 195 nodes and 350 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.960675
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "mov" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "movsxd" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d50>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "imul" for 0x401d5f>, <DisassemblerInsn "add" for 0x401d63>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "movzx" for 0x401d73>, <DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "and" for 0x401d7d>, <DisassemblerInsn "cmp" for 0x401d80>, <DisassemblerInsn "jne" for 0x401d83>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "add" for 0x40293d>, <DisassemblerInsn "cmp" for 0x402941>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "je" for 0x40294c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "imul" for 0x401dab>, <DisassemblerInsn "add" for 0x401daf>, <DisassemblerInsn "add" for 0x401db2>, <DisassemblerInsn "mov" for 0x401db6>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "cmp" for 0x401dbf>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dcd>, <DisassemblerInsn "mov" for 0x402dd5>, <DisassemblerInsn "add" for 0x402ddd>, <DisassemblerInsn "cmp" for 0x402de1>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "jne" for 0x402dec>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023e0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "cmp" for 0x4023f3>, <DisassemblerInsn "jle" for 0x4023f6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x402df2>, <DisassemblerInsn "ret" for 0x402df9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x558>', '<mov~~dword ptr [rsp + 0x4f4], r9d>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~qword ptr [rsp + 0x508], rsi>', '<mov~~qword ptr [rsp + 0x510], rdi>', '<mov~~eax, dword ptr [rsp + 0x560]>', '<mov~~dword ptr [rsp + 0x51c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~rax, qword ptr [rip + 0xfe2b1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x52b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x52c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x402df2>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x402df2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfe265]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x4f3], al>', '<cmp~~al, 0>', '<je~~0x402df2>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jne~~0x402a74>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x402df2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<cmp~~eax, 0>', '<jle~~0x402df2>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x558>', '<ret~~>']}], 'cfg_edge_info': [(0, 2), (18, 2), (40, 2), (3, 2), (15, 2), (43, 2)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4206066], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/O3/imgutils.o---after
The extraction of function: av_image_copy
[4206066]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 151 nodes and 229 edges in CFGEmulated.
It has 151 nodes and 243 edges in CDG.
It has 3809 nodes and 5057 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4206066]
{4202243, 4202116, 4204037, 4201865, 4203914, 4204042, 4203017, 4205834, 4202255, 4201744, 4202128, 4202389, 4203802, 4205210, 4201884, 4202397, 4202270, 4205338, 4202144, 4202658, 4202020, 4202663, 4205479, 4204202, 4203947, 4203820, 4204845, 4202028, 4202030, 4202156, 4202289, 4203698, 4205738, 4204470, 4202550, 4202038, 4204730, 4202171, 4205243, 4203454, 4204990, 4202046, 4205889, 4201975, 4202308, 4205944, 4201927, 4202183, 4203725, 4206029, 4202359, 4202320, 4204882, 4205779, 4204887, 4202585, 4202205, 4203488, 4203493, 4202351, 4202224, 4205552, 4206066, 4204275, 4205172, 4205685, 4204663, 4204408, 4203770, 4203516, 4202365}
[0, 12, 2, 3, 8, 86, 92, 58, 114, 28, 18, 6, 117, 99, 85, 103, 100, 27, 89, 110, 43, 90, 11, 91, 32, 83, 109, 108, 48, 96, 55, 21, 5, 4, 20, 38, 82, 7, 93, 64, 102, 81, 50, 24, 121, 94, 78, 10, 106, 101, 1, 42, 14, 41, 33, 49, 71, 105, 25, 36, 16, 98, 134, 70, 19, 137, 29, 97, 13, 88, 37, 9, 47, 65, 23, 57, 112]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:19.824924
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "mov" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "movsxd" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d50>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "imul" for 0x401d5f>, <DisassemblerInsn "add" for 0x401d63>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "movzx" for 0x401d73>, <DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "and" for 0x401d7d>, <DisassemblerInsn "cmp" for 0x401d80>, <DisassemblerInsn "jne" for 0x401d83>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402142>, <DisassemblerInsn "mov" for 0x402149>, <DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x402161>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "call" for 0x40217f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x402df2>, <DisassemblerInsn "ret" for 0x402df9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "imul" for 0x401dab>, <DisassemblerInsn "add" for 0x401daf>, <DisassemblerInsn "add" for 0x401db2>, <DisassemblerInsn "mov" for 0x401db6>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "cmp" for 0x401dbf>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402036>, <DisassemblerInsn "mov" for 0x40203e>, <DisassemblerInsn "mov" for 0x402045>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "jmp" for 0x402054>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "mov" for 0x402549>, <DisassemblerInsn "mov" for 0x402550>, <DisassemblerInsn "mov" for 0x402557>, <DisassemblerInsn "shl" for 0x40255c>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "add" for 0x402565>, <DisassemblerInsn "sar" for 0x402567>, <DisassemblerInsn "mov" for 0x402569>, <DisassemblerInsn "imul" for 0x402571>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "add" for 0x40257b>, <DisassemblerInsn "cmp" for 0x40257e>, <DisassemblerInsn "mov" for 0x402581>, <DisassemblerInsn "jae" for 0x402588>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234b>, <DisassemblerInsn "mov" for 0x402353>, <DisassemblerInsn "mov" for 0x40235b>, <DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "add" for 0x402372>, <DisassemblerInsn "mov" for 0x402375>, <DisassemblerInsn "add" for 0x40237d>, <DisassemblerInsn "mov" for 0x402380>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "add" for 0x40238a>, <DisassemblerInsn "mov" for 0x40238d>, <DisassemblerInsn "add" for 0x402394>, <DisassemblerInsn "mov" for 0x402397>, <DisassemblerInsn "cmp" for 0x40239e>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a9>, <DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "jb" for 0x4023b8>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7d>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "movaps" for 0x401f8d>, <DisassemblerInsn "movaps" for 0x401f95>, <DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "mov" for 0x40295e>, <DisassemblerInsn "mov" for 0x402965>, <DisassemblerInsn "mov" for 0x40296d>, <DisassemblerInsn "imul" for 0x402974>, <DisassemblerInsn "add" for 0x402978>, <DisassemblerInsn "add" for 0x40297b>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "shr" for 0x402982>, <DisassemblerInsn "and" for 0x402986>, <DisassemblerInsn "add" for 0x40298a>, <DisassemblerInsn "movzx" for 0x40298e>, <DisassemblerInsn "imul" for 0x402991>, <DisassemblerInsn "add" for 0x402994>, <DisassemblerInsn "sar" for 0x402997>, <DisassemblerInsn "movsxd" for 0x40299a>, <DisassemblerInsn "mov" for 0x40299d>, <DisassemblerInsn "mov" for 0x4029a5>, <DisassemblerInsn "mov" for 0x4029a7>, <DisassemblerInsn "xor" for 0x4029af>, <DisassemblerInsn "mov" for 0x4029b1>, <DisassemblerInsn "jmp" for 0x4029b9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "cmp" for 0x4023f3>, <DisassemblerInsn "jle" for 0x4023f6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4020a2>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f95>, <DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b8>, <DisassemblerInsn "mov" for 0x4026c0>, <DisassemblerInsn "mov" for 0x4026c8>, <DisassemblerInsn "mov" for 0x4026d0>, <DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "mov" for 0x4026de>, <DisassemblerInsn "mov" for 0x4026e6>, <DisassemblerInsn "call" for 0x4026ee>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40251a>, <DisassemblerInsn "movzx" for 0x402522>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "mov" for 0x402549>, <DisassemblerInsn "mov" for 0x402550>, <DisassemblerInsn "mov" for 0x402557>, <DisassemblerInsn "shl" for 0x40255c>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "add" for 0x402565>, <DisassemblerInsn "sar" for 0x402567>, <DisassemblerInsn "mov" for 0x402569>, <DisassemblerInsn "imul" for 0x402571>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "add" for 0x40257b>, <DisassemblerInsn "cmp" for 0x40257e>, <DisassemblerInsn "mov" for 0x402581>, <DisassemblerInsn "jae" for 0x402588>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "mov" for 0x4027bd>, <DisassemblerInsn "mov" for 0x4027c5>, <DisassemblerInsn "mov" for 0x4027cd>, <DisassemblerInsn "mov" for 0x4027d5>, <DisassemblerInsn "mov" for 0x4027dc>, <DisassemblerInsn "mov" for 0x4027e4>, <DisassemblerInsn "call" for 0x4027ec>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d78>, <DisassemblerInsn "mov" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8a>, <DisassemblerInsn "mov" for 0x402d92>, <DisassemblerInsn "add" for 0x402d96>, <DisassemblerInsn "mov" for 0x402d99>, <DisassemblerInsn "add" for 0x402d9e>, <DisassemblerInsn "mov" for 0x402da1>, <DisassemblerInsn "mov" for 0x402da6>, <DisassemblerInsn "add" for 0x402da8>, <DisassemblerInsn "mov" for 0x402dab>, <DisassemblerInsn "add" for 0x402daf>, <DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "cmp" for 0x402db6>, <DisassemblerInsn "mov" for 0x402db9>, <DisassemblerInsn "mov" for 0x402dbe>, <DisassemblerInsn "mov" for 0x402dc3>, <DisassemblerInsn "jb" for 0x402dc7>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b2>, <DisassemblerInsn "mov" for 0x4024b9>, <DisassemblerInsn "mov" for 0x4024bb>, <DisassemblerInsn "xor" for 0x4024c3>, <DisassemblerInsn "mov" for 0x4024c5>, <DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d5>, <DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "mov" for 0x4024e5>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "call" for 0x4024f5>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d1>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "setne" for 0x4025ed>, <DisassemblerInsn "cmp" for 0x4025f0>, <DisassemblerInsn "setne" for 0x4025f4>, <DisassemblerInsn "and" for 0x4025f7>, <DisassemblerInsn "cmp" for 0x4025f9>, <DisassemblerInsn "setg" for 0x4025fc>, <DisassemblerInsn "and" for 0x4025ff>, <DisassemblerInsn "test" for 0x402601>, <DisassemblerInsn "jne" for 0x402603>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40258a>, <DisassemblerInsn "mov" for 0x402591>, <DisassemblerInsn "movzx" for 0x402599>, <DisassemblerInsn "sar" for 0x40259c>, <DisassemblerInsn "mov" for 0x40259e>, <DisassemblerInsn "xor" for 0x4025a0>, <DisassemblerInsn "sub" for 0x4025a2>, <DisassemblerInsn "mov" for 0x4025a4>, <DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d1>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "setne" for 0x4025ed>, <DisassemblerInsn "cmp" for 0x4025f0>, <DisassemblerInsn "setne" for 0x4025f4>, <DisassemblerInsn "and" for 0x4025f7>, <DisassemblerInsn "cmp" for 0x4025f9>, <DisassemblerInsn "setg" for 0x4025fc>, <DisassemblerInsn "and" for 0x4025ff>, <DisassemblerInsn "test" for 0x402601>, <DisassemblerInsn "jne" for 0x402603>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "cmp" for 0x402227>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "jb" for 0x402241>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d46>, <DisassemblerInsn "mov" for 0x402d4b>, <DisassemblerInsn "mov" for 0x402d53>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "add" for 0x402d63>, <DisassemblerInsn "mov" for 0x402d66>, <DisassemblerInsn "add" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d6e>, <DisassemblerInsn "call" for 0x402d73>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7b>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "add" for 0x402a8b>, <DisassemblerInsn "cmp" for 0x402a8e>, <DisassemblerInsn "mov" for 0x402a91>, <DisassemblerInsn "jae" for 0x402a98>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "xor" for 0x40001f>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "call" for 0x400026>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c75>, <DisassemblerInsn "mov" for 0x402c7c>, <DisassemblerInsn "mov" for 0x402c84>, <DisassemblerInsn "mov" for 0x402c8c>, <DisassemblerInsn "cmp" for 0x402c93>, <DisassemblerInsn "mov" for 0x402c96>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "mov" for 0x402ca0>, <DisassemblerInsn "jb" for 0x402ca4>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402caa>, <DisassemblerInsn "mov" for 0x402cae>, <DisassemblerInsn "mov" for 0x402cb3>, <DisassemblerInsn "mov" for 0x402cb8>, <DisassemblerInsn "mov" for 0x402cc0>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "call" for 0x402cce>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023e0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc7>, <DisassemblerInsn "movzx" for 0x401dce>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "xor" for 0x401dd9>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "xor" for 0x401ddd>, <DisassemblerInsn "cmp" for 0x401ddf>, <DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "mov" for 0x401dea>, <DisassemblerInsn "jb" for 0x401df1>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402059>, <DisassemblerInsn "mov" for 0x402060>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "mov" for 0x402070>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "mov" for 0x40207e>, <DisassemblerInsn "cmp" for 0x402086>, <DisassemblerInsn "setne" for 0x40208a>, <DisassemblerInsn "cmp" for 0x40208d>, <DisassemblerInsn "setne" for 0x402091>, <DisassemblerInsn "and" for 0x402094>, <DisassemblerInsn "cmp" for 0x402096>, <DisassemblerInsn "setg" for 0x402099>, <DisassemblerInsn "and" for 0x40209c>, <DisassemblerInsn "test" for 0x40209e>, <DisassemblerInsn "jne" for 0x4020a0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d0a>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d14>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "add" for 0x402d2c>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "add" for 0x402d34>, <DisassemblerInsn "mov" for 0x402d37>, <DisassemblerInsn "call" for 0x402d3c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020ae>, <DisassemblerInsn "mov" for 0x4020b6>, <DisassemblerInsn "mov" for 0x4020be>, <DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d6>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "movsxd" for 0x4020da>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "movsxd" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "cdqe" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f2>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "add" for 0x4020fc>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "mov" for 0x402106>, <DisassemblerInsn "and" for 0x402108>, <DisassemblerInsn "mov" for 0x40210b>, <DisassemblerInsn "xor" for 0x402112>, <DisassemblerInsn "cmp" for 0x402114>, <DisassemblerInsn "mov" for 0x402117>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "je" for 0x402135>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402605>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c10>, <DisassemblerInsn "mov" for 0x402c17>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "add" for 0x402c25>, <DisassemblerInsn "mov" for 0x402c28>, <DisassemblerInsn "add" for 0x402c30>, <DisassemblerInsn "mov" for 0x402c33>, <DisassemblerInsn "add" for 0x402c3b>, <DisassemblerInsn "mov" for 0x402c3e>, <DisassemblerInsn "add" for 0x402c45>, <DisassemblerInsn "mov" for 0x402c48>, <DisassemblerInsn "cmp" for 0x402c4f>, <DisassemblerInsn "mov" for 0x402c51>, <DisassemblerInsn "mov" for 0x402c59>, <DisassemblerInsn "mov" for 0x402c61>, <DisassemblerInsn "mov" for 0x402c68>, <DisassemblerInsn "jne" for 0x402c6f>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402952>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024fa>, <DisassemblerInsn "mov" for 0x402502>, <DisassemblerInsn "add" for 0x402509>, <DisassemblerInsn "xor" for 0x40250c>, <DisassemblerInsn "cmp" for 0x40250e>, <DisassemblerInsn "mov" for 0x402511>, <DisassemblerInsn "jae" for 0x402518>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023fc>, <DisassemblerInsn "mov" for 0x402404>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "mov" for 0x402412>, <DisassemblerInsn "lea" for 0x402419>, <DisassemblerInsn "lea" for 0x402421>, <DisassemblerInsn "and" for 0x402429>, <DisassemblerInsn "mov" for 0x40242b>, <DisassemblerInsn "imul" for 0x402432>, <DisassemblerInsn "add" for 0x402436>, <DisassemblerInsn "mov" for 0x402439>, <DisassemblerInsn "lea" for 0x402441>, <DisassemblerInsn "mov" for 0x402449>, <DisassemblerInsn "lea" for 0x402451>, <DisassemblerInsn "mov" for 0x402459>, <DisassemblerInsn "mov" for 0x402461>, <DisassemblerInsn "imul" for 0x402468>, <DisassemblerInsn "add" for 0x40246c>, <DisassemblerInsn "add" for 0x40246f>, <DisassemblerInsn "mov" for 0x402473>, <DisassemblerInsn "add" for 0x40247b>, <DisassemblerInsn "mov" for 0x40247e>, <DisassemblerInsn "xor" for 0x402485>, <DisassemblerInsn "sub" for 0x402487>, <DisassemblerInsn "mov" for 0x402489>, <DisassemblerInsn "mov" for 0x402490>, <DisassemblerInsn "imul" for 0x402497>, <DisassemblerInsn "add" for 0x40249b>, <DisassemblerInsn "add" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "cmp" for 0x4024aa>, <DisassemblerInsn "jne" for 0x4024ac>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40260a>, <DisassemblerInsn "mov" for 0x402611>, <DisassemblerInsn "mov" for 0x402619>, <DisassemblerInsn "mov" for 0x402621>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "mov" for 0x402631>, <DisassemblerInsn "mov" for 0x402639>, <DisassemblerInsn "mov" for 0x402641>, <DisassemblerInsn "mov" for 0x402645>, <DisassemblerInsn "movsxd" for 0x402649>, <DisassemblerInsn "mov" for 0x40264c>, <DisassemblerInsn "movsxd" for 0x402654>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "cdqe" for 0x40265f>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "add" for 0x40266b>, <DisassemblerInsn "mov" for 0x40266e>, <DisassemblerInsn "mov" for 0x402675>, <DisassemblerInsn "and" for 0x402677>, <DisassemblerInsn "mov" for 0x40267a>, <DisassemblerInsn "xor" for 0x402681>, <DisassemblerInsn "cmp" for 0x402683>, <DisassemblerInsn "mov" for 0x402686>, <DisassemblerInsn "mov" for 0x40268e>, <DisassemblerInsn "mov" for 0x402696>, <DisassemblerInsn "mov" for 0x40269d>, <DisassemblerInsn "je" for 0x4026a4>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023be>, <DisassemblerInsn "mov" for 0x4023c6>, <DisassemblerInsn "mov" for 0x4023ce>, <DisassemblerInsn "mov" for 0x4023d2>, <DisassemblerInsn "mov" for 0x4023d6>, <DisassemblerInsn "call" for 0x4023db>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d5>, <DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "mov" for 0x4024e5>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "call" for 0x4024f5>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "and" for 0x401d90>, <DisassemblerInsn "cmp" for 0x401d93>, <DisassemblerInsn "jne" for 0x401d96>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b1a>, <DisassemblerInsn "mov" for 0x402b21>, <DisassemblerInsn "mov" for 0x402b29>, <DisassemblerInsn "mov" for 0x402b31>, <DisassemblerInsn "mov" for 0x402b39>, <DisassemblerInsn "mov" for 0x402b41>, <DisassemblerInsn "mov" for 0x402b49>, <DisassemblerInsn "mov" for 0x402b4d>, <DisassemblerInsn "movsxd" for 0x402b51>, <DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "cdqe" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b5e>, <DisassemblerInsn "mov" for 0x402b66>, <DisassemblerInsn "add" for 0x402b68>, <DisassemblerInsn "mov" for 0x402b6b>, <DisassemblerInsn "mov" for 0x402b72>, <DisassemblerInsn "and" for 0x402b74>, <DisassemblerInsn "mov" for 0x402b77>, <DisassemblerInsn "xor" for 0x402b7e>, <DisassemblerInsn "cmp" for 0x402b80>, <DisassemblerInsn "mov" for 0x402b83>, <DisassemblerInsn "mov" for 0x402b8b>, <DisassemblerInsn "mov" for 0x402b93>, <DisassemblerInsn "mov" for 0x402b9a>, <DisassemblerInsn "je" for 0x402ba1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e24>, <DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402b15>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ba7>, <DisassemblerInsn "mov" for 0x402bae>, <DisassemblerInsn "mov" for 0x402bb5>, <DisassemblerInsn "mov" for 0x402bbd>, <DisassemblerInsn "mov" for 0x402bc5>, <DisassemblerInsn "mov" for 0x402bcd>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdb>, <DisassemblerInsn "mov" for 0x402be3>, <DisassemblerInsn "call" for 0x402beb>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e2e>, <DisassemblerInsn "movaps" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae1>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "mov" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af1>, <DisassemblerInsn "cmp" for 0x402af9>, <DisassemblerInsn "setne" for 0x402afd>, <DisassemblerInsn "cmp" for 0x402b00>, <DisassemblerInsn "setne" for 0x402b04>, <DisassemblerInsn "and" for 0x402b07>, <DisassemblerInsn "cmp" for 0x402b09>, <DisassemblerInsn "setg" for 0x402b0c>, <DisassemblerInsn "and" for 0x402b0f>, <DisassemblerInsn "test" for 0x402b11>, <DisassemblerInsn "jne" for 0x402b13>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402247>, <DisassemblerInsn "mov" for 0x40224e>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226d>, <DisassemblerInsn "mov" for 0x402275>, <DisassemblerInsn "call" for 0x40227d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277f>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "mov" for 0x40278f>, <DisassemblerInsn "cmp" for 0x402796>, <DisassemblerInsn "mov" for 0x402799>, <DisassemblerInsn "mov" for 0x4027a1>, <DisassemblerInsn "mov" for 0x4027a9>, <DisassemblerInsn "jb" for 0x4027b0>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "add" for 0x4003ba>, <DisassemblerInsn "ret" for 0x4003c1>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cd3>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "mov" for 0x402cdd>, <DisassemblerInsn "mov" for 0x402ce5>, <DisassemblerInsn "mov" for 0x402ced>, <DisassemblerInsn "add" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cf8>, <DisassemblerInsn "add" for 0x402cfd>, <DisassemblerInsn "mov" for 0x402d00>, <DisassemblerInsn "call" for 0x402d05>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a6f>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a7>, <DisassemblerInsn "mov" for 0x4003a9>, <DisassemblerInsn "and" for 0x4003ac>, <DisassemblerInsn "movzx" for 0x4003b0>, <DisassemblerInsn "mov" for 0x4003b3>, <DisassemblerInsn "add" for 0x4003ba>, <DisassemblerInsn "ret" for 0x4003c1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "add" for 0x40293d>, <DisassemblerInsn "cmp" for 0x402941>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "je" for 0x40294c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029be>, <DisassemblerInsn "mov" for 0x4029c5>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "mov" for 0x4029dd>, <DisassemblerInsn "imul" for 0x4029e4>, <DisassemblerInsn "add" for 0x4029e8>, <DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "add" for 0x4029f3>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "shl" for 0x402a02>, <DisassemblerInsn "mov" for 0x402a05>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a10>, <DisassemblerInsn "mov" for 0x402a18>, <DisassemblerInsn "and" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a1f>, <DisassemblerInsn "add" for 0x402a27>, <DisassemblerInsn "mov" for 0x402a2b>, <DisassemblerInsn "movzx" for 0x402a33>, <DisassemblerInsn "cmp" for 0x402a36>, <DisassemblerInsn "cmova" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "add" for 0x402a42>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "cmp" for 0x402a4e>, <DisassemblerInsn "mov" for 0x402a51>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "je" for 0x402a69>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a9a>, <DisassemblerInsn "mov" for 0x402aa1>, <DisassemblerInsn "movzx" for 0x402aa9>, <DisassemblerInsn "sar" for 0x402aac>, <DisassemblerInsn "mov" for 0x402aae>, <DisassemblerInsn "xor" for 0x402ab0>, <DisassemblerInsn "sub" for 0x402ab2>, <DisassemblerInsn "mov" for 0x402ab4>, <DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae1>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "mov" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af1>, <DisassemblerInsn "cmp" for 0x402af9>, <DisassemblerInsn "setne" for 0x402afd>, <DisassemblerInsn "cmp" for 0x402b00>, <DisassemblerInsn "setne" for 0x402b04>, <DisassemblerInsn "and" for 0x402b07>, <DisassemblerInsn "cmp" for 0x402b09>, <DisassemblerInsn "setg" for 0x402b0c>, <DisassemblerInsn "and" for 0x402b0f>, <DisassemblerInsn "test" for 0x402b11>, <DisassemblerInsn "jne" for 0x402b13>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "and" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e04>, <DisassemblerInsn "xorps" for 0x401e0c>, <DisassemblerInsn "xor" for 0x401e0f>, <DisassemblerInsn "mov" for 0x401e11>, <DisassemblerInsn "movaps" for 0x401e19>, <DisassemblerInsn "movaps" for 0x401e1c>, <DisassemblerInsn "movaps" for 0x401e24>, <DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dcd>, <DisassemblerInsn "mov" for 0x402dd5>, <DisassemblerInsn "add" for 0x402ddd>, <DisassemblerInsn "cmp" for 0x402de1>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "jne" for 0x402dec>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "mov" for 0x40219c>, <DisassemblerInsn "mov" for 0x4021a4>, <DisassemblerInsn "mov" for 0x4021ab>, <DisassemblerInsn "mov" for 0x4021b2>, <DisassemblerInsn "add" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021bc>, <DisassemblerInsn "add" for 0x4021c4>, <DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "add" for 0x4021cf>, <DisassemblerInsn "mov" for 0x4021d2>, <DisassemblerInsn "add" for 0x4021d9>, <DisassemblerInsn "mov" for 0x4021dc>, <DisassemblerInsn "cmp" for 0x4021e3>, <DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "mov" for 0x4021ed>, <DisassemblerInsn "mov" for 0x4021f5>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "jne" for 0x402203>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "jne" for 0x401f77>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x558>', '<mov~~dword ptr [rsp + 0x4f4], r9d>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~qword ptr [rsp + 0x508], rsi>', '<mov~~qword ptr [rsp + 0x510], rdi>', '<mov~~eax, dword ptr [rsp + 0x560]>', '<mov~~dword ptr [rsp + 0x51c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~rax, qword ptr [rip + 0xfe2b1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x52b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x52c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x402df2>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x38c]>', '<mov~~eax, dword ptr [rsp + 0x388]>', '<mov~~rdi, qword ptr [rsp + 0x380]>', '<mov~~rsi, qword ptr [rsp + 0x378]>', '<mov~~rdx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x33c], ecx>', '<mov~~dword ptr [rsp + 0x338], eax>', '<mov~~qword ptr [rsp + 0x328], rdi>', '<mov~~qword ptr [rsp + 0x330], rsi>', '<call~~0x500030>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfe265]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x4f3], al>', '<cmp~~al, 0>', '<je~~0x402df2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4e0]>', '<mov~~eax, dword ptr [rsp + 0x4ec]>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<jmp~~0x4029be>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x540]>', '<mov~~edi, 1>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<add~~edx, edi>', '<sar~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x250], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x254], eax>', '<jae~~0x4025ab>']}, {'block_Idx': 92, 'blockInsts': ['<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2e0]>', '<mov~~rdi, qword ptr [rsp + 0x360]>', '<mov~~rdx, qword ptr [rsp + 0x2e8]>', '<mov~~rax, qword ptr [rsp + 0x368]>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x300], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x308], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x30c], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x310], rdx>', '<mov~~qword ptr [rsp + 0x318], rcx>', '<mov~~dword ptr [rsp + 0x324], eax>', '<jb~~0x402247>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x440]>', '<movaps~~xmm3, xmmword ptr [rsp + 0x480]>', '<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ac]>', '<mov~~edx, dword ptr [rsp + 0x4f4]>', '<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rip + 0xfd69c]>', '<imul~~rsi, rsi, 0x18>', '<add~~rcx, rsi>', '<add~~rcx, 0xc>', '<mov~~cx, word ptr [rcx]>', '<shr~~cx, 2>', '<and~~cx, 7>', '<add~~cx, 1>', '<movzx~~ecx, cx>', '<imul~~ecx, edx>', '<add~~ecx, 7>', '<sar~~ecx, 3>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x140], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jmp~~0x402a74>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<cmp~~eax, 0>', '<jle~~0x402df2>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x4023be>']}, {'block_Idx': 117, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x480]>', '<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x230]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<mov~~rdi, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rsp + 0x218]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~dword ptr [rsp + 0x1dc], ecx>', '<mov~~dword ptr [rsp + 0x1d8], eax>', '<mov~~qword ptr [rsp + 0x1c8], rdi>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<call~~0x500030>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x264], eax>', '<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x540]>', '<mov~~edi, 1>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<add~~edx, edi>', '<sar~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x250], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x254], eax>', '<jae~~0x4025ab>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<call~~0x500030>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x60], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x64], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x402caa>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ac]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x268], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x270], rax>', '<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<call~~0x400000>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~dword ptr [rsp + 0x234], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x40260a>']}, {'block_Idx': 110, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 43, 'blockInsts': ['<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x254], eax>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~dword ptr [rsp + 0x234], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x40260a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x370]>', '<mov~~rdx, qword ptr [rsp + 0x378]>', '<mov~~rcx, qword ptr [rsp + 0x380]>', '<mov~~eax, dword ptr [rsp + 0x388]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x310], rdx>', '<mov~~qword ptr [rsp + 0x318], rcx>', '<mov~~dword ptr [rsp + 0x324], eax>', '<jb~~0x4023be>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<call~~0x500030>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jae~~0x402abb>']}, {'block_Idx': 83, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 109, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa0], rdi>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 108, 'blockInsts': ['<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x402dcd>']}, {'block_Idx': 96, 'blockInsts': ['<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x402df2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x4f3]>', '<movzx~~eax, dl>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~dl, 8>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~dword ptr [rsp + 0x4ec], eax>', '<jb~~0x402036>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4020a7>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x401e2e>']}, {'block_Idx': 38, 'blockInsts': ['<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x51c]>', '<mov~~rdx, qword ptr [rsp + 0x390]>', '<mov~~rsi, qword ptr [rsp + 0x398]>', '<mov~~r8d, dword ptr [rsp + 0x4f4]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x358], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x360], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x368], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x370], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x374], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x378], rsi>', '<mov~~qword ptr [rsp + 0x380], rdx>', '<mov~~dword ptr [rsp + 0x388], ecx>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<je~~0x402209>']}, {'block_Idx': 93, 'blockInsts': ['<jmp~~0x40292d>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~r9, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~edi, dword ptr [rsp + 0xc4]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0xa8], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xac], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<jne~~0x402ba7>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x4024cd>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x530]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x264], eax>', '<jae~~0x40252c>']}, {'block_Idx': 50, 'blockInsts': ['<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x520]>', '<mov~~esi, dword ptr [rsp + 0x51c]>', '<mov~~ecx, dword ptr [rsp + 0x4f4]>', '<mov~~al, byte ptr [rsp + 0x52b]>', '<lea~~rdi, [rsp + 0x540]>', '<lea~~rdi, [rsp + 0x530]>', '<and~~al, 4>', '<mov~~rdi, qword ptr [rip + 0xfdbde]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<lea~~rdi, [rsp + 0x540]>', '<mov~~qword ptr [rsp + 0x280], rdi>', '<lea~~rdi, [rsp + 0x530]>', '<mov~~qword ptr [rsp + 0x288], rdi>', '<mov~~rdi, qword ptr [rip + 0xfdba8]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x290], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x298], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x29c], ecx>', '<mov~~rcx, qword ptr [rip + 0xfdb79]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x2a0], rcx>', '<cmp~~al, 0>', '<jne~~0x402957>']}, {'block_Idx': 121, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x234]>', '<mov~~rdx, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x240]>', '<mov~~r8d, dword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x200], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x208], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x210], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x214], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x218], rsi>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~dword ptr [rsp + 0x230], eax>', '<je~~0x402778>']}, {'block_Idx': 78, 'blockInsts': ['<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<call~~0x400000>']}, {'block_Idx': 101, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x52c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x402059>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax + r8*4]>', '<mov~~edi, dword ptr [rdi + r8*4]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<je~~0x402c75>']}, {'block_Idx': 14, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jmp~~0x401e2e>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x402dcd>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~qword ptr [rsp + 0x80], rdi>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<call~~0x500030>']}, {'block_Idx': 71, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 105, 'blockInsts': ['<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x4c0]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x402b1a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x324]>', '<mov~~rdi, qword ptr [rsp + 0x318]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~rdx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2f4], eax>', '<mov~~qword ptr [rsp + 0x2b0], rdi>', '<mov~~qword ptr [rsp + 0x2b8], rsi>', '<call~~0x500030>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x210]>', '<mov~~rdx, qword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jb~~0x40292d>']}, {'block_Idx': 134, 'blockInsts': ['<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4029be>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rdx], esi>', '<mov~~cx, word ptr [rcx]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rax + rcx*4], 3>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x402df2>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~rdi, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfd62c]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x108], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0x128], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0x12a], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x3ac], edx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<je~~0x4023e5>']}, {'block_Idx': 88, 'blockInsts': ['<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x402b1a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d8]>', '<and~~eax, 0xf8>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<xorps~~xmm0, xmm0>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jmp~~0x401e2e>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jne~~0x402a74>']}, {'block_Idx': 65, 'blockInsts': ['<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x328]>', '<mov~~r9, qword ptr [rsp + 0x360]>', '<mov~~rsi, qword ptr [rsp + 0x330]>', '<mov~~r8, qword ptr [rsp + 0x368]>', '<mov~~ecx, dword ptr [rsp + 0x338]>', '<mov~~eax, dword ptr [rsp + 0x33c]>', '<mov~~edi, dword ptr [rsp + 0x374]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x340], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x348], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x354], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0x378], rsi>', '<mov~~qword ptr [rsp + 0x380], rdx>', '<mov~~dword ptr [rsp + 0x388], ecx>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<jne~~0x40213b>']}, {'block_Idx': 57, 'blockInsts': ['<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 112, 'blockInsts': ['<jne~~0x401e2e>']}], 'cfg_edge_info': [(32, 37), (81, 85), (42, 48), (70, 82), (97, 102), (37, 42), (33, 38), (98, 103), (48, 47), (112, 114), (11, 16), (49, 64), (13, 19), (21, 2), (7, 12), (24, 28), (27, 109), (55, 70), (47, 2), (89, 93), (106, 109), (121, 18), (64, 48), (94, 98), (36, 41), (96, 101), (25, 29), (90, 94), (137, 81), (58, 10), (0, 2), (86, 90), (9, 14), (1, 3), (100, 55), (101, 105), (5, 9), (38, 43), (57, 65), (114, 117), (92, 96), (28, 32), (91, 100), (93, 97), (88, 92), (105, 108), (81, 86), (42, 49), (3, 5), (43, 50), (29, 33), (27, 81), (8, 13), (19, 13), (18, 2), (13, 18), (117, 121), (7, 11), (71, 78), (106, 81), (4, 6), (78, 83), (121, 8), (10, 21), (32, 36), (20, 25), (86, 89), (89, 94), (64, 49), (36, 42), (37, 41), (85, 90), (102, 106), (6, 10), (82, 91), (3, 2), (108, 110), (1, 4), (48, 55), (65, 71), (100, 47), (110, 112), (97, 2), (24, 27), (83, 88), (98, 97), (90, 93), (50, 57), (134, 81), (0, 1), (11, 10), (94, 99), (112, 25), (23, 11), (41, 47), (4, 7), (18, 24), (5, 8), (14, 20), (47, 32), (85, 89)], 'cdg_edge_info': [(32, 37), (81, 85), (97, 81), (90, 97), (5, 65), (48, 100), (112, 57), (5, 83), (97, 102), (5, 92), (37, 42), (5, 101), (24, 81), (112, 29), (98, 103), (112, 50), (36, 48), (64, 64), (24, 28), (112, 43), (5, 14), (5, 78), (89, 93), (97, 106), (5, 96), (1, 10), (94, 98), (5, 117), (5, 71), (0, 2), (86, 90), (5, 25), (1, 3), (1, 21), (100, 55), (5, 110), (112, 38), (5, 9), (4, 11), (100, 82), (100, 91), (112, 65), (121, 13), (89, 97), (81, 86), (42, 49), (5, 112), (5, 57), (3, 5), (5, 121), (86, 94), (48, 70), (18, 2), (47, 47), (5, 105), (5, 50), (112, 88), (5, 114), (112, 33), (4, 6), (5, 13), (121, 8), (24, 2), (37, 48), (5, 43), (32, 36), (100, 70), (24, 32), (3, 18), (86, 89), (112, 108), (89, 94), (1, 2), (64, 49), (100, 100), (36, 42), (85, 90), (112, 83), (3, 2), (112, 92), (112, 101), (112, 110), (1, 4), (5, 20), (48, 55), (5, 29), (5, 38), (97, 2), (48, 82), (24, 27), (48, 91), (112, 112), (94, 97), (85, 94), (112, 78), (112, 96), (90, 93), (112, 105), (24, 47), (0, 1), (5, 88), (5, 33), (112, 71), (13, 13), (94, 99), (112, 25), (4, 7), (18, 24), (42, 64), (5, 8), (47, 32), (85, 89), (5, 108)], 'ddg_edge_info': [(32, 37), (81, 85), (42, 48), (81, 94), (24, 106), (108, 112), (81, 103), (70, 82), (0, 5), (0, 14), (0, 78), (37, 42), (94, 103), (24, 90), (33, 38), (91, 55), (106, 86), (98, 103), (18, 28), (0, 108), (0, 117), (0, 7), (0, 71), (49, 55), (9, 83), (49, 64), (9, 92), (24, 37), (0, 37), (55, 70), (91, 2), (0, 101), (81, 98), (0, 110), (0, 55), (49, 48), (0, 9), (97, 106), (85, 86), (49, 2), (121, 18), (64, 48), (94, 98), (55, 100), (3, 108), (42, 82), (42, 91), (24, 85), (42, 100), (96, 101), (0, 94), (90, 94), (28, 55), (0, 48), (49, 32), (0, 57), (0, 2), (0, 121), (86, 90), (9, 14), (28, 82), (38, 50), (81, 2), (108, 29), (33, 90), (100, 55), (0, 32), (0, 96), (33, 108), (71, 92), (0, 105), (88, 108), (0, 50), (101, 105), (5, 9), (0, 114), (43, 57), (9, 71), (57, 65), (33, 65), (92, 96), (28, 32), (27, 97), (91, 100), (33, 83), (0, 25), (88, 83), (27, 106), (33, 37), (81, 86), (33, 101), (42, 49), (9, 101), (105, 117), (0, 43), (3, 5), (5, 121), (43, 50), (50, 65), (106, 97), (86, 94), (42, 70), (8, 13), (105, 92), (0, 18), (33, 85), (13, 18), (117, 121), (108, 33), (0, 27), (7, 11), (71, 78), (33, 94), (105, 110), (91, 47), (105, 101), (65, 101), (5, 114), (71, 96), (106, 81), (106, 90), (5, 13), (49, 47), (78, 83), (14, 25), (121, 8), (0, 11), (33, 78), (28, 91), (91, 49), (0, 29), (25, 92), (0, 38), (0, 47), (29, 83), (9, 114), (96, 121), (0, 4), (88, 71), (64, 49), (0, 13), (91, 42), (85, 90), (0, 86), (57, 83), (28, 47), (65, 96), (82, 91), (32, 47), (18, 27), (49, 42), (106, 94), (48, 55), (71, 121), (0, 24), (0, 88), (0, 33), (28, 49), (0, 42), (81, 97), (33, 57), (81, 106), (28, 70), (0, 8), (91, 37), (83, 88), (114, 121), (9, 29), (57, 78), (85, 94), (0, 90), (29, 71), (32, 42), (33, 96), (81, 90), (49, 37), (33, 50), (105, 121), (25, 101), (81, 99), (88, 114), (110, 25), (10, 2), (0, 1), (0, 65), (0, 10), (0, 83), (0, 28), (94, 99), (91, 48), (0, 92), (37, 47), (42, 37), (24, 86), (4, 7), (33, 43), (0, 49), (42, 64), (5, 8), (0, 3), (47, 32), (91, 32), (9, 33)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 761, 'instruction': 'addq\t$0x558, %rsp                     # imm = 0x0x22e'}, {'instIndex': 762, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.s---av_image_copy---after
function id: 8
function flag: True
There are 252 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 250, 'instruction': 'addq\t$0x1a8, %rsp                      # imm = 0x1A8'}, {'instIndex': 251, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.s---av_image_check_size---after
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.o---after
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 121 nodes and 209 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 252 instructions in binary file.
[4198813]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 121 nodes and 209 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.936799
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cb2>, <DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "movsxd" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "imul" for 0x400ce2>, <DisassemblerInsn "add" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "movzx" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "and" for 0x400cf7>, <DisassemblerInsn "cmp" for 0x400cfa>, <DisassemblerInsn "jne" for 0x400cfd>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "jle" for 0x400ef7>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "imul" for 0x400d21>, <DisassemblerInsn "add" for 0x400d25>, <DisassemblerInsn "add" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d2e>, <DisassemblerInsn "cmp" for 0x400d35>, <DisassemblerInsn "je" for 0x400d37>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x401188>, <DisassemblerInsn "cmp" for 0x40118c>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "jne" for 0x401197>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ee8>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40119d>, <DisassemblerInsn "ret" for 0x4011a4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1a8>', '<mov~~dword ptr [rsp + 0x168], r9d>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~eax, dword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~rax, qword ptr [rip + 0xff32e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40119d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~eax, 0>', '<jle~~0x40119d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff2ef]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x167], al>', '<cmp~~al, 0>', '<je~~0x40119d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x400ffe>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40119d>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x1a8>', '<ret~~>']}], 'cfg_edge_info': [(22, 2), (0, 2), (11, 2), (13, 2), (3, 2)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4198813], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_after/Os/imgutils.o---after
The extraction of function: av_image_copy
[4198813]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 48 nodes and 75 edges in CFGEmulated.
It has 47 nodes and 60 edges in CDG.
It has 1411 nodes and 1804 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198813]
{4197635, 4197515, 4198673, 4197650, 4198813, 4198432, 4197922, 4198711, 4197815, 4198584, 4197693, 4198468, 4198086, 4198225, 4197981, 4197737, 4198125, 4198779, 4198141, 4198398}
[6, 0, 5, 18, 29, 15, 4, 33, 36, 47, 46, 40, 8, 11, 7, 26, 24, 20, 14, 1, 17, 28, 32, 9, 43, 12, 2, 16, 3]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:07.762258
{'av_image_copy': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400db2>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cb2>, <DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "movsxd" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "imul" for 0x400ce2>, <DisassemblerInsn "add" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "movzx" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "and" for 0x400cf7>, <DisassemblerInsn "cmp" for 0x400cfa>, <DisassemblerInsn "jne" for 0x400cfd>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d3d>, <DisassemblerInsn "movzx" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d47>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "xor" for 0x400d53>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "jmp" for 0x400d64>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ffe>, <DisassemblerInsn "mov" for 0x401005>, <DisassemblerInsn "mov" for 0x40100c>, <DisassemblerInsn "mov" for 0x401014>, <DisassemblerInsn "mov" for 0x401019>, <DisassemblerInsn "call" for 0x40101b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401044>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "movzx" for 0x401053>, <DisassemblerInsn "sar" for 0x401056>, <DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "xor" for 0x40105a>, <DisassemblerInsn "sub" for 0x40105c>, <DisassemblerInsn "mov" for 0x40105e>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401072>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "mov" for 0x401081>, <DisassemblerInsn "mov" for 0x401085>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "cmp" for 0x401097>, <DisassemblerInsn "setne" for 0x40109b>, <DisassemblerInsn "cmp" for 0x40109e>, <DisassemblerInsn "setne" for 0x4010a2>, <DisassemblerInsn "and" for 0x4010a5>, <DisassemblerInsn "cmp" for 0x4010a7>, <DisassemblerInsn "setg" for 0x4010aa>, <DisassemblerInsn "and" for 0x4010ad>, <DisassemblerInsn "test" for 0x4010af>, <DisassemblerInsn "jne" for 0x4010b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "mov" for 0x400f04>, <DisassemblerInsn "mov" for 0x400f0c>, <DisassemblerInsn "xor" for 0x400f13>, <DisassemblerInsn "sub" for 0x400f15>, <DisassemblerInsn "mov" for 0x400f17>, <DisassemblerInsn "mov" for 0x400f1e>, <DisassemblerInsn "imul" for 0x400f25>, <DisassemblerInsn "add" for 0x400f29>, <DisassemblerInsn "add" for 0x400f2c>, <DisassemblerInsn "mov" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3a>, <DisassemblerInsn "xor" for 0x400f42>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "jmp" for 0x400f4c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d70>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "mov" for 0x400d83>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d8e>, <DisassemblerInsn "cmp" for 0x400d96>, <DisassemblerInsn "setne" for 0x400d9a>, <DisassemblerInsn "cmp" for 0x400d9d>, <DisassemblerInsn "setne" for 0x400da1>, <DisassemblerInsn "and" for 0x400da4>, <DisassemblerInsn "cmp" for 0x400da6>, <DisassemblerInsn "setg" for 0x400da9>, <DisassemblerInsn "and" for 0x400dac>, <DisassemblerInsn "test" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ce>, <DisassemblerInsn "mov" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "movsxd" for 0x4010eb>, <DisassemblerInsn "mov" for 0x4010ee>, <DisassemblerInsn "movsxd" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "movsxd" for 0x4010fb>, <DisassemblerInsn "mov" for 0x4010fe>, <DisassemblerInsn "mov" for 0x401103>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "mov" for 0x40110d>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401124>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x401132>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x401188>, <DisassemblerInsn "cmp" for 0x40118c>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "jne" for 0x401197>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "shl" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "add" for 0x4001f3>, <DisassemblerInsn "sar" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "imul" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "imul" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001be>, <DisassemblerInsn "add" for 0x4001c1>, <DisassemblerInsn "movzx" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "shl" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "add" for 0x4001f3>, <DisassemblerInsn "sar" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "imul" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113c>, <DisassemblerInsn "mov" for 0x401141>, <DisassemblerInsn "mov" for 0x401146>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "add" for 0x40114f>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "add" for 0x401157>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x40115f>, <DisassemblerInsn "add" for 0x401161>, <DisassemblerInsn "mov" for 0x401164>, <DisassemblerInsn "cmp" for 0x401168>, <DisassemblerInsn "mov" for 0x40116b>, <DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "ja" for 0x401179>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f51>, <DisassemblerInsn "mov" for 0x400f58>, <DisassemblerInsn "mov" for 0x400f60>, <DisassemblerInsn "mov" for 0x400f68>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "imul" for 0x400f77>, <DisassemblerInsn "add" for 0x400f7b>, <DisassemblerInsn "mov" for 0x400f7e>, <DisassemblerInsn "add" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "shl" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f98>, <DisassemblerInsn "add" for 0x400fa0>, <DisassemblerInsn "mov" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fab>, <DisassemblerInsn "and" for 0x400fae>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "add" for 0x400fba>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "movzx" for 0x400fc6>, <DisassemblerInsn "cmp" for 0x400fc9>, <DisassemblerInsn "cmova" for 0x400fcb>, <DisassemblerInsn "mov" for 0x400fce>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd9>, <DisassemblerInsn "cmp" for 0x400fe1>, <DisassemblerInsn "mov" for 0x400fe4>, <DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "je" for 0x400ff3>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "jle" for 0x400ef7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "mov" for 0x400de6>, <DisassemblerInsn "mov" for 0x400de8>, <DisassemblerInsn "movsxd" for 0x400dea>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "movsxd" for 0x400e00>, <DisassemblerInsn "mov" for 0x400e03>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e13>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "mov" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e41>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "call" for 0x400e58>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "mov" for 0x401027>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "add" for 0x401035>, <DisassemblerInsn "cmp" for 0x401038>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "jae" for 0x401042>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "movsxd" for 0x400104>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "lea" for 0x40010c>, <DisassemblerInsn "lea" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "imul" for 0x40011d>, <DisassemblerInsn "add" for 0x400121>, <DisassemblerInsn "add" for 0x400124>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "and" for 0x40012a>, <DisassemblerInsn "cmp" for 0x40012c>, <DisassemblerInsn "je" for 0x40012e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e65>, <DisassemblerInsn "mov" for 0x400e6d>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "mov" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e87>, <DisassemblerInsn "add" for 0x400e8f>, <DisassemblerInsn "mov" for 0x400e92>, <DisassemblerInsn "mov" for 0x400e9a>, <DisassemblerInsn "add" for 0x400e9c>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "cmp" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "mov" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb9>, <DisassemblerInsn "ja" for 0x400ec0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "and" for 0x400d0a>, <DisassemblerInsn "cmp" for 0x400d0d>, <DisassemblerInsn "jne" for 0x400d10>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "mov" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e41>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "call" for 0x400e58>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401072>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "mov" for 0x401081>, <DisassemblerInsn "mov" for 0x401085>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "cmp" for 0x401097>, <DisassemblerInsn "setne" for 0x40109b>, <DisassemblerInsn "cmp" for 0x40109e>, <DisassemblerInsn "setne" for 0x4010a2>, <DisassemblerInsn "and" for 0x4010a5>, <DisassemblerInsn "cmp" for 0x4010a7>, <DisassemblerInsn "setg" for 0x4010aa>, <DisassemblerInsn "and" for 0x4010ad>, <DisassemblerInsn "test" for 0x4010af>, <DisassemblerInsn "jne" for 0x4010b1>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4010b3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec6>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "mov" for 0x400ed6>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ede>, <DisassemblerInsn "call" for 0x400ee3>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401124>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x401132>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ff9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40119d>, <DisassemblerInsn "ret" for 0x4011a4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ee8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "imul" for 0x400d21>, <DisassemblerInsn "add" for 0x400d25>, <DisassemblerInsn "add" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d2e>, <DisassemblerInsn "cmp" for 0x400d35>, <DisassemblerInsn "je" for 0x400d37>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<jmp~~0x400ec6>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1a8>', '<mov~~dword ptr [rsp + 0x168], r9d>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~eax, dword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~rax, qword ptr [rip + 0xff32e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40119d>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x167]>', '<movzx~~eax, al>', '<mov~~qword ptr [rsp + 0x150], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~dword ptr [rsp + 0x160], eax>', '<jmp~~0x400f51>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x168]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~edx, eax>', '<call~~0x4000f8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4010b8>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdx, qword ptr [rsp + 0x198]>', '<mov~~esi, dword ptr [rsp + 0x194]>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xbc], ecx>', '<mov~~rcx, qword ptr [rip + 0xff0eb]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jmp~~0x400ffe>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400db7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~r9, qword ptr [rsp + 0x78]>', '<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~esi, dword ptr [rsi + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x38], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x400ffe>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x40]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 8]>', '<add~~eax, -1>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffe56]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 9>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x40]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 8]>', '<add~~eax, -1>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<ja~~0x401111>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff099]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x88], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0xac], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0xae], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~dword ptr [rsp + 0x160], eax>', '<je~~0x400eed>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~eax, 0>', '<jle~~0x40119d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~r8d, dword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x110], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x120], rsi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<call~~0x500030>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~dword ptr [rsp + 0x80], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x84], eax>', '<jae~~0x401065>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~dword ptr [rsp + 0x20], esi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<movsxd~~rcx, edi>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<lea~~rax, [rsp + 0x40]>', '<lea~~rax, [rsp + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffef3]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<and~~al, 4>', '<cmp~~al, 0>', '<je~~0x40016f>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<ja~~0x400e22>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a4]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x400d69>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<call~~0x500030>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4010b8>']}, {'block_Idx': 32, 'blockInsts': ['<jmp~~0x40117b>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400f51>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x1a8>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x40119d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff2ef]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x167], al>', '<cmp~~al, 0>', '<je~~0x40119d>']}], 'cfg_edge_info': [(43, 40), (18, 20), (18, 26), (4, 6), (29, 32), (0, 2), (11, 2), (8, 12), (1, 3), (28, 33), (24, 26), (46, 26), (32, 36), (26, 29), (14, 9), (36, 18), (17, 14), (8, 11), (0, 1), (40, 43), (9, 16), (15, 18), (33, 40), (26, 28), (3, 2), (36, 2), (4, 7), (3, 5), (12, 8), (29, 33), (14, 17), (40, 36), (5, 8), (47, 26), (1, 4), (16, 2), (11, 15), (6, 9), (7, 14)], 'cdg_edge_info': [(11, 36), (1, 3), (1, 9), (11, 26), (26, 29), (4, 14), (36, 18), (40, 40), (29, 40), (0, 1), (40, 43), (8, 8), (36, 36), (4, 7), (3, 5), (3, 11), (3, 8), (14, 14), (29, 33), (14, 17), (36, 26), (1, 4), (11, 15), (11, 18)], 'ddg_edge_info': [(7, 17), (43, 40), (18, 26), (26, 33), (18, 29), (26, 36), (17, 9), (9, 2), (26, 18), (15, 36), (0, 2), (0, 5), (0, 8), (8, 15), (26, 2), (0, 11), (43, 18), (0, 26), (0, 29), (33, 29), (43, 36), (26, 29), (15, 29), (36, 18), (17, 14), (8, 11), (43, 2), (0, 1), (0, 7), (40, 43), (0, 4), (8, 26), (33, 40), (33, 43), (3, 5), (4, 7), (18, 33), (29, 33), (18, 36), (14, 17), (29, 36), (5, 8), (0, 3), (0, 9), (0, 15), (0, 18), (15, 18), (0, 33), (7, 14)]}], 'av_image_check_size': [{'patched_tag': 'after', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 250, 'instruction': 'addq\t$0x1a8, %rsp                      # imm = 0x1A8'}, {'instIndex': 251, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b---a/libavutil/imgutils.c
The case of compiler gcc with optimization no.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/no/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/no/imgutils_gcc.s---av_image_copy---before
function id: 23
function flag: True
There are 137 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/no/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/no/imgutils_gcc.s---av_image_check_size---before
function id: 21
function flag: True
There are 49 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/no/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O0.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O0/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O0/imgutils_gcc.s---av_image_copy---before
function id: 23
function flag: True
There are 137 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O0/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O0/imgutils_gcc.s---av_image_check_size---before
function id: 21
function flag: True
There are 49 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O0/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 135, 'instruction': 'addq\t$0x58, %rsp'}, {'instIndex': 136, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O1.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O1/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O1/imgutils_gcc.s---av_image_copy---before
function id: 161
function flag: True
There are 114 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 77, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 78, 'instruction': 'popq\t%rbx'}, {'instIndex': 79, 'instruction': 'popq\t%rbp'}, {'instIndex': 80, 'instruction': 'popq\t%r12'}, {'instIndex': 81, 'instruction': 'popq\t%r13'}, {'instIndex': 82, 'instruction': 'popq\t%r14'}, {'instIndex': 83, 'instruction': 'popq\t%r15'}, {'instIndex': 84, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O1/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O1/imgutils_gcc.s---av_image_check_size---before
function id: 109
function flag: True
There are 283 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O1/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 77, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 78, 'instruction': 'popq\t%rbx'}, {'instIndex': 79, 'instruction': 'popq\t%rbp'}, {'instIndex': 80, 'instruction': 'popq\t%r12'}, {'instIndex': 81, 'instruction': 'popq\t%r13'}, {'instIndex': 82, 'instruction': 'popq\t%r14'}, {'instIndex': 83, 'instruction': 'popq\t%r15'}, {'instIndex': 84, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O2.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O2/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O2/imgutils_gcc.s---av_image_copy---before
function id: 132
function flag: True
There are 112 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 99, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 100, 'instruction': 'popq\t%rbx'}, {'instIndex': 101, 'instruction': 'popq\t%rbp'}, {'instIndex': 102, 'instruction': 'popq\t%r12'}, {'instIndex': 103, 'instruction': 'popq\t%r13'}, {'instIndex': 104, 'instruction': 'popq\t%r14'}, {'instIndex': 105, 'instruction': 'popq\t%r15'}, {'instIndex': 106, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O2/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O2/imgutils_gcc.s---av_image_check_size---before
function id: 83
function flag: True
There are 272 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O2/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 99, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 100, 'instruction': 'popq\t%rbx'}, {'instIndex': 101, 'instruction': 'popq\t%rbp'}, {'instIndex': 102, 'instruction': 'popq\t%r12'}, {'instIndex': 103, 'instruction': 'popq\t%r13'}, {'instIndex': 104, 'instruction': 'popq\t%r14'}, {'instIndex': 105, 'instruction': 'popq\t%r15'}, {'instIndex': 106, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization O3.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O3/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O3/imgutils_gcc.s---av_image_copy---before
function id: 175
function flag: True
There are 127 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 114, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 115, 'instruction': 'popq\t%rbx'}, {'instIndex': 116, 'instruction': 'popq\t%rbp'}, {'instIndex': 117, 'instruction': 'popq\t%r12'}, {'instIndex': 118, 'instruction': 'popq\t%r13'}, {'instIndex': 119, 'instruction': 'popq\t%r14'}, {'instIndex': 120, 'instruction': 'popq\t%r15'}, {'instIndex': 121, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O3/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O3/imgutils_gcc.s---av_image_check_size---before
function id: 123
function flag: True
There are 297 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/O3/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 114, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 115, 'instruction': 'popq\t%rbx'}, {'instIndex': 116, 'instruction': 'popq\t%rbp'}, {'instIndex': 117, 'instruction': 'popq\t%r12'}, {'instIndex': 118, 'instruction': 'popq\t%r13'}, {'instIndex': 119, 'instruction': 'popq\t%r14'}, {'instIndex': 120, 'instruction': 'popq\t%r15'}, {'instIndex': 121, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/Os/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/Os/imgutils_gcc.s---av_image_copy---before
function id: 129
function flag: True
There are 92 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 79, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 80, 'instruction': 'popq\t%rbx'}, {'instIndex': 81, 'instruction': 'popq\t%rbp'}, {'instIndex': 82, 'instruction': 'popq\t%r12'}, {'instIndex': 83, 'instruction': 'popq\t%r13'}, {'instIndex': 84, 'instruction': 'popq\t%r14'}, {'instIndex': 85, 'instruction': 'popq\t%r15'}, {'instIndex': 86, 'instruction': 'ret'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/Os/imgutils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/Os/imgutils_gcc.s---av_image_check_size---before
function id: 87
function flag: True
There are 235 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/gcc_before/Os/imgutils.o
Binary file does not exist.
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 79, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 80, 'instruction': 'popq\t%rbx'}, {'instIndex': 81, 'instruction': 'popq\t%rbp'}, {'instIndex': 82, 'instruction': 'popq\t%r12'}, {'instIndex': 83, 'instruction': 'popq\t%r13'}, {'instIndex': 84, 'instruction': 'popq\t%r14'}, {'instIndex': 85, 'instruction': 'popq\t%r15'}, {'instIndex': 86, 'instruction': 'ret'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization no.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 120 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 37 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 120 instructions in binary file.
[4197524]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.726071
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400c94>']}], 'cfg_edge_info': [(12, 5), (2, 5), (13, 5)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4197524], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/no/imgutils.o---before
The extraction of function: av_image_copy
[4197524]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 109 edges in CFGEmulated.
It has 75 nodes and 121 edges in CDG.
It has 1164 nodes and 1617 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197524]
{4197506, 4197124, 4197252, 4197392, 4197522, 4197524, 4197141, 4197403, 4197410, 4197040, 4197437, 4197186, 4197214, 4197345, 4197219, 4197353, 4197235, 4197367, 4197119}
[29, 5, 0, 30, 2, 33, 17, 7, 60, 66, 9, 63, 58, 16, 1, 10, 12, 38, 11, 3, 34, 4, 43, 15, 25, 22, 6]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 10 edges in CFGEmulated.
It has 8 nodes and 13 edges in CDG.
It has 146 nodes and 158 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:05.303421
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "je" for 0x400c19>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab4>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "mov" for 0x400acc>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "movsxd" for 0x400ad6>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "imul" for 0x400ae2>, <DisassemblerInsn "add" for 0x400ae6>, <DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400aee>, <DisassemblerInsn "movzx" for 0x400af3>, <DisassemblerInsn "and" for 0x400af7>, <DisassemblerInsn "cmp" for 0x400afa>, <DisassemblerInsn "je" for 0x400afd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400c1b>, <DisassemblerInsn "jne" for 0x400c20>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "movsxd" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "imul" for 0x40011c>, <DisassemblerInsn "add" for 0x400120>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "movzx" for 0x40012d>, <DisassemblerInsn "and" for 0x400131>, <DisassemblerInsn "cmp" for 0x400134>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be1>, <DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "jmp" for 0x400c8d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400baf>, <DisassemblerInsn "movsxd" for 0x400bb4>, <DisassemblerInsn "mov" for 0x400bb9>, <DisassemblerInsn "and" for 0x400bbe>, <DisassemblerInsn "movzx" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "movsxd" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "shl" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001c8>, <DisassemblerInsn "sub" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "sar" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x400aa4>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "movzx" for 0x400b09>, <DisassemblerInsn "and" for 0x400b0d>, <DisassemblerInsn "cmp" for 0x400b10>, <DisassemblerInsn "je" for 0x400b13>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "jmp" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "mov" for 0x400bff>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "call" for 0x400c0b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400c22>, <DisassemblerInsn "sub" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "movzx" for 0x400c2d>, <DisassemblerInsn "sar" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c33>, <DisassemblerInsn "xor" for 0x400c35>, <DisassemblerInsn "sub" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b15>, <DisassemblerInsn "mov" for 0x400b1a>, <DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "mov" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "mov" for 0x400b31>, <DisassemblerInsn "mov" for 0x400b33>, <DisassemblerInsn "mov" for 0x400b38>, <DisassemblerInsn "call" for 0x400b3d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400a20>, <DisassemblerInsn "mov" for 0x400a24>, <DisassemblerInsn "mov" for 0x400a29>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3b>, <DisassemblerInsn "cmp" for 0x400a40>, <DisassemblerInsn "je" for 0x400a46>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b4b>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "mov" for 0x400b54>, <DisassemblerInsn "call" for 0x400b59>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b88>, <DisassemblerInsn "movsxd" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "and" for 0x400b97>, <DisassemblerInsn "movzx" for 0x400b9b>, <DisassemblerInsn "add" for 0x400b9e>, <DisassemblerInsn "cmp" for 0x400ba1>, <DisassemblerInsn "jle" for 0x400ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 0x14], 1>', '<je~~0x400c22>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~dword ptr [rsp + 0x24], r8d>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<movsxd~~rcx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rip + 0xff52e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<je~~0x400b04>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 2>', '<jne~~0x400c3d>']}, {'block_Idx': 17, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~dword ptr [rsp + 0x40], edi>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~dword ptr [rsp + 0x38], edx>', '<movsxd~~rcx, dword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rip + 0xffef4]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 4>', '<cmp~~eax, 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400be9>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ax, word ptr [rax + rcx*2 + 0xc]>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<movsxd~~rax, dword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + rax*4 + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x3c]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~esi, 1>', '<shl~~esi, cl>', '<mov~~ecx, esi>', '<add~~edx, ecx>', '<sub~~edx, 1>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<sar~~edx, cl>', '<mov~~ecx, edx>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<je~~0x400b63>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x400bcc>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<call~~0x400100>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 34, 'blockInsts': ['<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 0xa]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~r8d, dword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x50]>', '<call~~0x400a20>']}, {'block_Idx': 43, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<mov~~dword ptr [rsp + 8], r8d>', '<mov~~dword ptr [rsp + 4], r9d>', '<cmp~~qword ptr [rsp + 0x20], 0>', '<je~~0x400a50>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movsxd~~rdx, dword ptr [rsp + 0x14]>', '<mov~~cx, word ptr [rcx + rdx*2 + 0xc]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<add~~ecx, 1>', '<cmp~~eax, ecx>', '<jle~~0x400baf>']}], 'cfg_edge_info': [(25, 29), (3, 7), (0, 2), (11, 5), (58, 22), (66, 11), (2, 5), (1, 3), (34, 43), (33, 38), (3, 6), (29, 34), (30, 5), (38, 43), (0, 1), (15, 7), (16, 15), (7, 12), (6, 10), (34, 60), (33, 34), (58, 60), (63, 29), (29, 33), (60, 66), (12, 17), (22, 30), (4, 22), (12, 29), (1, 4), (9, 15), (66, 12), (15, 6), (38, 60), (4, 43), (7, 11), (6, 9)], 'cdg_edge_info': [(7, 29), (0, 2), (33, 60), (33, 66), (0, 5), (66, 5), (66, 11), (1, 3), (66, 29), (1, 30), (33, 38), (3, 6), (3, 15), (29, 34), (0, 1), (29, 66), (1, 5), (7, 12), (33, 34), (29, 33), (1, 22), (1, 4), (66, 12), (15, 6), (1, 7), (29, 60), (7, 5), (7, 11), (15, 15)], 'ddg_edge_info': [(22, 5), (7, 29), (7, 38), (29, 38), (0, 5), (12, 34), (0, 38), (34, 12), (3, 6), (38, 34), (3, 15), (29, 34), (6, 38), (60, 12), (0, 1), (0, 7), (0, 4), (60, 33), (7, 12), (0, 34), (29, 60), (3, 66), (7, 33), (29, 33), (60, 66), (60, 5), (6, 34), (0, 3), (0, 6), (0, 12), (12, 38), (34, 38), (0, 15), (60, 29), (7, 60), (7, 66), (60, 38)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O0.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 120 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 37 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 120 instructions in binary file.
[4197524]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 155 nodes and 246 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.714846
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400c94>']}], 'cfg_edge_info': [(12, 5), (2, 5), (13, 5)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4197524], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O0/imgutils.o---before
The extraction of function: av_image_copy
[4197524]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 109 edges in CFGEmulated.
It has 75 nodes and 121 edges in CDG.
It has 1164 nodes and 1617 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197524]
{4197506, 4197124, 4197252, 4197392, 4197522, 4197524, 4197141, 4197403, 4197410, 4197040, 4197437, 4197186, 4197214, 4197345, 4197219, 4197353, 4197235, 4197367, 4197119}
[29, 5, 0, 30, 2, 33, 17, 7, 60, 66, 9, 63, 58, 16, 1, 10, 12, 38, 11, 3, 34, 4, 43, 15, 25, 22, 6]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 10 edges in CFGEmulated.
It has 8 nodes and 13 edges in CDG.
It has 146 nodes and 158 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:05.310697
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "je" for 0x400c19>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "add" for 0x400c94>, <DisassemblerInsn "ret" for 0x400c98>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ab0>, <DisassemblerInsn "mov" for 0x400ab4>, <DisassemblerInsn "mov" for 0x400ab8>, <DisassemblerInsn "mov" for 0x400abd>, <DisassemblerInsn "mov" for 0x400ac2>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "mov" for 0x400acc>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "movsxd" for 0x400ad6>, <DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "imul" for 0x400ae2>, <DisassemblerInsn "add" for 0x400ae6>, <DisassemblerInsn "mov" for 0x400ae9>, <DisassemblerInsn "mov" for 0x400aee>, <DisassemblerInsn "movzx" for 0x400af3>, <DisassemblerInsn "and" for 0x400af7>, <DisassemblerInsn "cmp" for 0x400afa>, <DisassemblerInsn "je" for 0x400afd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b5e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400aff>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400c1b>, <DisassemblerInsn "jne" for 0x400c20>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400108>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "movsxd" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "imul" for 0x40011c>, <DisassemblerInsn "add" for 0x400120>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "movzx" for 0x40012d>, <DisassemblerInsn "and" for 0x400131>, <DisassemblerInsn "cmp" for 0x400134>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be1>, <DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "mov" for 0x400c89>, <DisassemblerInsn "jmp" for 0x400c8d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400be9>, <DisassemblerInsn "cmp" for 0x400bed>, <DisassemblerInsn "jge" for 0x400bf1>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400baf>, <DisassemblerInsn "movsxd" for 0x400bb4>, <DisassemblerInsn "mov" for 0x400bb9>, <DisassemblerInsn "and" for 0x400bbe>, <DisassemblerInsn "movzx" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "movsxd" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "shl" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "add" for 0x4001c8>, <DisassemblerInsn "sub" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "sar" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x400aa4>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bcc>, <DisassemblerInsn "mov" for 0x400bd0>, <DisassemblerInsn "mov" for 0x400bd4>, <DisassemblerInsn "add" for 0x400bd8>, <DisassemblerInsn "mov" for 0x400bdb>, <DisassemblerInsn "jmp" for 0x400bdf>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b04>, <DisassemblerInsn "movzx" for 0x400b09>, <DisassemblerInsn "and" for 0x400b0d>, <DisassemblerInsn "cmp" for 0x400b10>, <DisassemblerInsn "je" for 0x400b13>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "jmp" for 0x400bad>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfb>, <DisassemblerInsn "mov" for 0x400bff>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "call" for 0x400c0b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400c92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400c22>, <DisassemblerInsn "sub" for 0x400c24>, <DisassemblerInsn "mov" for 0x400c28>, <DisassemblerInsn "movzx" for 0x400c2d>, <DisassemblerInsn "sar" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c33>, <DisassemblerInsn "xor" for 0x400c35>, <DisassemblerInsn "sub" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "movsxd" for 0x400c42>, <DisassemblerInsn "mov" for 0x400c47>, <DisassemblerInsn "mov" for 0x400c4b>, <DisassemblerInsn "movsxd" for 0x400c50>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "movsxd" for 0x400c5d>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "movsxd" for 0x400c6b>, <DisassemblerInsn "mov" for 0x400c70>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c78>, <DisassemblerInsn "call" for 0x400c7d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b15>, <DisassemblerInsn "mov" for 0x400b1a>, <DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "mov" for 0x400b22>, <DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b29>, <DisassemblerInsn "mov" for 0x400b2c>, <DisassemblerInsn "mov" for 0x400b31>, <DisassemblerInsn "mov" for 0x400b33>, <DisassemblerInsn "mov" for 0x400b38>, <DisassemblerInsn "call" for 0x400b3d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400a20>, <DisassemblerInsn "mov" for 0x400a24>, <DisassemblerInsn "mov" for 0x400a29>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a36>, <DisassemblerInsn "mov" for 0x400a3b>, <DisassemblerInsn "cmp" for 0x400a40>, <DisassemblerInsn "je" for 0x400a46>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b73>, <DisassemblerInsn "mov" for 0x400b77>, <DisassemblerInsn "movzx" for 0x400b7c>, <DisassemblerInsn "cmp" for 0x400b80>, <DisassemblerInsn "jge" for 0x400b82>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "add" for 0x4001e0>, <DisassemblerInsn "ret" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b42>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b4b>, <DisassemblerInsn "mov" for 0x400b50>, <DisassemblerInsn "mov" for 0x400b54>, <DisassemblerInsn "call" for 0x400b59>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b84>, <DisassemblerInsn "mov" for 0x400b88>, <DisassemblerInsn "movsxd" for 0x400b8d>, <DisassemblerInsn "mov" for 0x400b92>, <DisassemblerInsn "and" for 0x400b97>, <DisassemblerInsn "movzx" for 0x400b9b>, <DisassemblerInsn "add" for 0x400b9e>, <DisassemblerInsn "cmp" for 0x400ba1>, <DisassemblerInsn "jle" for 0x400ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~dword ptr [rsp + 0x14], 1>', '<je~~0x400c22>']}, {'block_Idx': 5, 'blockInsts': ['<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~dword ptr [rsp + 0x24], r8d>', '<mov~~dword ptr [rsp + 0x20], r9d>', '<movsxd~~rcx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rip + 0xff52e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<je~~0x400b04>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 2, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x14], 2>', '<jne~~0x400c3d>']}, {'block_Idx': 17, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~dword ptr [rsp + 0x40], edi>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~dword ptr [rsp + 0x38], edx>', '<movsxd~~rcx, dword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rip + 0xffef4]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 4>', '<cmp~~eax, 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400be9>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, dword ptr [rsp + 0x10]>', '<jge~~0x400c92>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ax, word ptr [rax + rcx*2 + 0xc]>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 4], eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<movsxd~~rax, dword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + rax*4 + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x3c]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~esi, 1>', '<shl~~esi, cl>', '<mov~~ecx, esi>', '<add~~edx, ecx>', '<sub~~edx, 1>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<sar~~edx, cl>', '<mov~~ecx, edx>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x14], eax>', '<jmp~~0x400b73>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<movzx~~eax, byte ptr [rax + 0xb]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<je~~0x400b63>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 4], eax>', '<jmp~~0x400bcc>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~edi, dword ptr [rsp + 0x24]>', '<mov~~esi, dword ptr [rsp + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x14]>', '<call~~0x400100>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 11, 'blockInsts': ['<jmp~~0x400c94>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~dword ptr [rsp + 0x14], 0>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 34, 'blockInsts': ['<xor~~eax, eax>', '<sub~~eax, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 0xa]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~esi, dword ptr [rax + rcx*4]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~rdx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, dword ptr [rsp + 0x14]>', '<mov~~ecx, dword ptr [rax + rcx*4]>', '<mov~~r8d, dword ptr [rsp + 8]>', '<mov~~r9d, dword ptr [rsp + 0xc]>', '<call~~0x400a20>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~r8d, dword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x50]>', '<call~~0x400a20>']}, {'block_Idx': 43, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~dword ptr [rsp + 0x1c], esi>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<mov~~dword ptr [rsp + 8], r8d>', '<mov~~dword ptr [rsp + 4], r9d>', '<cmp~~qword ptr [rsp + 0x20], 0>', '<je~~0x400a50>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movzx~~ecx, byte ptr [rcx + 8]>', '<cmp~~eax, ecx>', '<jge~~0x400be1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<movsxd~~rdx, dword ptr [rsp + 0x14]>', '<mov~~cx, word ptr [rcx + rdx*2 + 0xc]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<add~~ecx, 1>', '<cmp~~eax, ecx>', '<jle~~0x400baf>']}], 'cfg_edge_info': [(25, 29), (3, 7), (0, 2), (11, 5), (58, 22), (66, 11), (2, 5), (1, 3), (34, 43), (33, 38), (3, 6), (29, 34), (30, 5), (38, 43), (0, 1), (15, 7), (16, 15), (7, 12), (6, 10), (34, 60), (33, 34), (58, 60), (63, 29), (29, 33), (60, 66), (12, 17), (22, 30), (4, 22), (12, 29), (1, 4), (9, 15), (66, 12), (15, 6), (38, 60), (4, 43), (7, 11), (6, 9)], 'cdg_edge_info': [(7, 29), (0, 2), (33, 60), (33, 66), (0, 5), (66, 5), (66, 11), (1, 3), (66, 29), (1, 30), (33, 38), (3, 6), (3, 15), (29, 34), (0, 1), (29, 66), (1, 5), (7, 12), (33, 34), (29, 33), (1, 22), (1, 4), (66, 12), (15, 6), (1, 7), (29, 60), (7, 5), (7, 11), (15, 15)], 'ddg_edge_info': [(22, 5), (7, 29), (7, 38), (29, 38), (0, 5), (12, 34), (0, 38), (34, 12), (3, 6), (38, 34), (3, 15), (29, 34), (6, 38), (60, 12), (0, 1), (0, 7), (0, 4), (60, 33), (7, 12), (0, 34), (29, 60), (3, 66), (7, 33), (29, 33), (60, 66), (60, 5), (6, 34), (0, 3), (0, 6), (0, 12), (12, 38), (34, 38), (0, 15), (60, 29), (7, 60), (7, 66), (60, 38)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 118, 'instruction': 'addq\t$0x48, %rsp'}, {'instIndex': 119, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O1.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 362 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 360, 'instruction': 'addq\t$0x238, %rsp                      # imm = 0x0xee'}, {'instIndex': 361, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 172 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 362 instructions in binary file.
[4200654]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 172 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.234004
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "cmp" for 0x4013eb>, <DisassemblerInsn "jle" for 0x4013ee>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018b1>, <DisassemblerInsn "add" for 0x4018b9>, <DisassemblerInsn "cmp" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c0>, <DisassemblerInsn "jne" for 0x4018c8>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x4018ce>, <DisassemblerInsn "ret" for 0x4018d5>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013d8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401170>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "mov" for 0x4011a6>, <DisassemblerInsn "movsxd" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b0>, <DisassemblerInsn "mov" for 0x4011b8>, <DisassemblerInsn "imul" for 0x4011bf>, <DisassemblerInsn "add" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011cc>, <DisassemblerInsn "movzx" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "and" for 0x4011dd>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "jne" for 0x4011e3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x4018ce>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x40157f>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x238>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x4018ce>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x238>', '<mov~~dword ptr [rsp + 0x1d4], r9d>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~qword ptr [rsp + 0x1f0], rdi>', '<mov~~eax, dword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x1fc], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~rax, qword ptr [rip + 0xfee51]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x20b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x4018ce>']}], 'cfg_edge_info': [(0, 2), (28, 2), (15, 2), (5, 2)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4200654], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O1/imgutils.o---before
The extraction of function: av_image_copy
[4200654]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 44 nodes and 68 edges in CFGEmulated.
It has 44 nodes and 63 edges in CDG.
It has 1480 nodes and 1834 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4200654]
{4199928, 4200336, 4200184, 4199834, 4199074, 4199079, 4200617, 4198957, 4199350, 4200511, 4200262, 4200134, 4199625, 4199245, 4200654, 4199888, 4199384, 4199001, 4199389, 4200417, 4199908, 4200549, 4200166, 4200422, 4198889, 4200303, 4198768, 4199412, 4198904, 4199807}
[32, 3, 28, 13, 26, 14, 1, 6, 5, 30, 24, 8, 7, 11, 38, 33, 37, 36, 25, 21, 4, 17, 10, 0, 40, 9, 2, 27, 18, 16, 34, 20, 19]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:04.485826
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4015f8>, <DisassemblerInsn "mov" for 0x4015fa>, <DisassemblerInsn "mov" for 0x401602>, <DisassemblerInsn "mov" for 0x40160a>, <DisassemblerInsn "mov" for 0x401612>, <DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "imul" for 0x401621>, <DisassemblerInsn "add" for 0x401625>, <DisassemblerInsn "add" for 0x401628>, <DisassemblerInsn "shl" for 0x40162c>, <DisassemblerInsn "add" for 0x40162f>, <DisassemblerInsn "mov" for 0x401632>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "shr" for 0x401638>, <DisassemblerInsn "and" for 0x40163c>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "movzx" for 0x401644>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "and" for 0x40164e>, <DisassemblerInsn "movzx" for 0x401652>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "lea" for 0x40165d>, <DisassemblerInsn "mov" for 0x401665>, <DisassemblerInsn "shl" for 0x401668>, <DisassemblerInsn "add" for 0x40166c>, <DisassemblerInsn "mov" for 0x40166f>, <DisassemblerInsn "cmp" for 0x401677>, <DisassemblerInsn "jge" for 0x40167e>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f8>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "imul" for 0x401207>, <DisassemblerInsn "add" for 0x40120b>, <DisassemblerInsn "add" for 0x40120e>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x401214>, <DisassemblerInsn "xor" for 0x40121b>, <DisassemblerInsn "cmp" for 0x40121d>, <DisassemblerInsn "mov" for 0x401220>, <DisassemblerInsn "je" for 0x401227>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e6>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f4>, <DisassemblerInsn "mov" for 0x4017f9>, <DisassemblerInsn "mov" for 0x401801>, <DisassemblerInsn "mov" for 0x401809>, <DisassemblerInsn "mov" for 0x401811>, <DisassemblerInsn "mov" for 0x401815>, <DisassemblerInsn "movsxd" for 0x401819>, <DisassemblerInsn "mov" for 0x40181c>, <DisassemblerInsn "movsxd" for 0x401821>, <DisassemblerInsn "mov" for 0x401824>, <DisassemblerInsn "movsxd" for 0x401829>, <DisassemblerInsn "mov" for 0x40182c>, <DisassemblerInsn "mov" for 0x401831>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183b>, <DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x401848>, <DisassemblerInsn "mov" for 0x40184d>, <DisassemblerInsn "mov" for 0x401852>, <DisassemblerInsn "mov" for 0x401856>, <DisassemblerInsn "mov" for 0x40185b>, <DisassemblerInsn "call" for 0x401860>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40157f>, <DisassemblerInsn "mov" for 0x401586>, <DisassemblerInsn "mov" for 0x40158e>, <DisassemblerInsn "test" for 0x401596>, <DisassemblerInsn "jne" for 0x401598>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e4>, <DisassemblerInsn "xor" for 0x4015ec>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "call" for 0x4015f3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40157a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "and" for 0x4011f0>, <DisassemblerInsn "cmp" for 0x4011f3>, <DisassemblerInsn "jne" for 0x4011f6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "movzx" for 0x401234>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "xor" for 0x40123f>, <DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "xor" for 0x401243>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "mov" for 0x40124d>, <DisassemblerInsn "jmp" for 0x401254>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "cmp" for 0x4013eb>, <DisassemblerInsn "jle" for 0x4013ee>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018b1>, <DisassemblerInsn "add" for 0x4018b9>, <DisassemblerInsn "cmp" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c0>, <DisassemblerInsn "jne" for 0x4018c8>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401790>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x4017a0>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017af>, <DisassemblerInsn "mov" for 0x4017b3>, <DisassemblerInsn "mov" for 0x4017b7>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c0>, <DisassemblerInsn "cmp" for 0x4017c5>, <DisassemblerInsn "setne" for 0x4017c9>, <DisassemblerInsn "cmp" for 0x4017cc>, <DisassemblerInsn "setne" for 0x4017d0>, <DisassemblerInsn "and" for 0x4017d3>, <DisassemblerInsn "cmp" for 0x4017d5>, <DisassemblerInsn "setg" for 0x4017d8>, <DisassemblerInsn "and" for 0x4017db>, <DisassemblerInsn "test" for 0x4017dd>, <DisassemblerInsn "jne" for 0x4017df>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012ae>, <DisassemblerInsn "mov" for 0x4012b6>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c6>, <DisassemblerInsn "mov" for 0x4012ce>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "movsxd" for 0x4012da>, <DisassemblerInsn "mov" for 0x4012dd>, <DisassemblerInsn "movsxd" for 0x4012e5>, <DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "movsxd" for 0x4012f0>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "mov" for 0x401303>, <DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "call" for 0x401348>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4012a2>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013b6>, <DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013ca>, <DisassemblerInsn "mov" for 0x4013ce>, <DisassemblerInsn "call" for 0x4013d3>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016e6>, <DisassemblerInsn "movzx" for 0x4016ee>, <DisassemblerInsn "mov" for 0x4016f1>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "shl" for 0x401728>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "add" for 0x401731>, <DisassemblerInsn "sar" for 0x401733>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "imul" for 0x40173c>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401698>, <DisassemblerInsn "mov" for 0x40169f>, <DisassemblerInsn "mov" for 0x4016a1>, <DisassemblerInsn "mov" for 0x4016a8>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "cmp" for 0x4016b4>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "jne" for 0x4016c0>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "mov" for 0x401707>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "mov" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "shl" for 0x401728>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "add" for 0x401731>, <DisassemblerInsn "sar" for 0x401733>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "imul" for 0x40173c>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016c6>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "add" for 0x4016d5>, <DisassemblerInsn "xor" for 0x4016d8>, <DisassemblerInsn "cmp" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jae" for 0x4016e4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40176f>, <DisassemblerInsn "mov" for 0x401776>, <DisassemblerInsn "movzx" for 0x40177e>, <DisassemblerInsn "sar" for 0x401781>, <DisassemblerInsn "mov" for 0x401783>, <DisassemblerInsn "xor" for 0x401785>, <DisassemblerInsn "sub" for 0x401787>, <DisassemblerInsn "mov" for 0x401789>, <DisassemblerInsn "mov" for 0x401790>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x4017a0>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017af>, <DisassemblerInsn "mov" for 0x4017b3>, <DisassemblerInsn "mov" for 0x4017b7>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c0>, <DisassemblerInsn "cmp" for 0x4017c5>, <DisassemblerInsn "setne" for 0x4017c9>, <DisassemblerInsn "cmp" for 0x4017cc>, <DisassemblerInsn "setne" for 0x4017d0>, <DisassemblerInsn "and" for 0x4017d3>, <DisassemblerInsn "cmp" for 0x4017d5>, <DisassemblerInsn "setg" for 0x4017d8>, <DisassemblerInsn "and" for 0x4017db>, <DisassemblerInsn "test" for 0x4017dd>, <DisassemblerInsn "jne" for 0x4017df>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401746>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "add" for 0x401760>, <DisassemblerInsn "cmp" for 0x401763>, <DisassemblerInsn "mov" for 0x401766>, <DisassemblerInsn "jae" for 0x40176d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x401260>, <DisassemblerInsn "mov" for 0x401268>, <DisassemblerInsn "mov" for 0x401270>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x40127e>, <DisassemblerInsn "cmp" for 0x401286>, <DisassemblerInsn "setne" for 0x40128a>, <DisassemblerInsn "cmp" for 0x40128d>, <DisassemblerInsn "setne" for 0x401291>, <DisassemblerInsn "and" for 0x401294>, <DisassemblerInsn "cmp" for 0x401296>, <DisassemblerInsn "setg" for 0x401299>, <DisassemblerInsn "and" for 0x40129c>, <DisassemblerInsn "test" for 0x40129e>, <DisassemblerInsn "jne" for 0x4012a0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40159a>, <DisassemblerInsn "mov" for 0x4015a1>, <DisassemblerInsn "mov" for 0x4015a9>, <DisassemblerInsn "shr" for 0x4015ac>, <DisassemblerInsn "and" for 0x4015b0>, <DisassemblerInsn "add" for 0x4015b4>, <DisassemblerInsn "movzx" for 0x4015b8>, <DisassemblerInsn "imul" for 0x4015bb>, <DisassemblerInsn "add" for 0x4015be>, <DisassemblerInsn "sar" for 0x4015c1>, <DisassemblerInsn "mov" for 0x4015c4>, <DisassemblerInsn "jmp" for 0x4015cb>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014d0>, <DisassemblerInsn "mov" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014e0>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "imul" for 0x4014ef>, <DisassemblerInsn "add" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014f6>, <DisassemblerInsn "add" for 0x4014fe>, <DisassemblerInsn "mov" for 0x401502>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "shl" for 0x40150d>, <DisassemblerInsn "mov" for 0x401510>, <DisassemblerInsn "add" for 0x401518>, <DisassemblerInsn "mov" for 0x40151b>, <DisassemblerInsn "mov" for 0x401523>, <DisassemblerInsn "and" for 0x401526>, <DisassemblerInsn "mov" for 0x40152a>, <DisassemblerInsn "add" for 0x401532>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "movzx" for 0x40153e>, <DisassemblerInsn "cmp" for 0x401541>, <DisassemblerInsn "cmova" for 0x401543>, <DisassemblerInsn "mov" for 0x401546>, <DisassemblerInsn "add" for 0x40154d>, <DisassemblerInsn "mov" for 0x401551>, <DisassemblerInsn "cmp" for 0x401559>, <DisassemblerInsn "mov" for 0x40155c>, <DisassemblerInsn "mov" for 0x40155e>, <DisassemblerInsn "mov" for 0x401565>, <DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "je" for 0x401574>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401170>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "mov" for 0x4011a6>, <DisassemblerInsn "movsxd" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b0>, <DisassemblerInsn "mov" for 0x4011b8>, <DisassemblerInsn "imul" for 0x4011bf>, <DisassemblerInsn "add" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011cc>, <DisassemblerInsn "movzx" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "and" for 0x4011dd>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "jne" for 0x4011e3>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x401848>, <DisassemblerInsn "mov" for 0x40184d>, <DisassemblerInsn "mov" for 0x401852>, <DisassemblerInsn "mov" for 0x401856>, <DisassemblerInsn "mov" for 0x40185b>, <DisassemblerInsn "call" for 0x401860>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013f4>, <DisassemblerInsn "mov" for 0x4013fb>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140a>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "lea" for 0x401419>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "lea" for 0x401429>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "and" for 0x401439>, <DisassemblerInsn "cmp" for 0x40143d>, <DisassemblerInsn "sete" for 0x401441>, <DisassemblerInsn "mov" for 0x401445>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "imul" for 0x401454>, <DisassemblerInsn "add" for 0x401458>, <DisassemblerInsn "add" for 0x40145b>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "imul" for 0x40146e>, <DisassemblerInsn "add" for 0x401472>, <DisassemblerInsn "add" for 0x401475>, <DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "add" for 0x401481>, <DisassemblerInsn "mov" for 0x401484>, <DisassemblerInsn "xor" for 0x40148b>, <DisassemblerInsn "sub" for 0x40148d>, <DisassemblerInsn "mov" for 0x40148f>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "imul" for 0x40149d>, <DisassemblerInsn "add" for 0x4014a1>, <DisassemblerInsn "add" for 0x4014a4>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "mov" for 0x4014b2>, <DisassemblerInsn "xor" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014bc>, <DisassemblerInsn "jmp" for 0x4014c4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x4018ce>, <DisassemblerInsn "ret" for 0x4018d5>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4017e1>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "xor" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015da>, <DisassemblerInsn "call" for 0x4015df>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x40135d>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "add" for 0x401374>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "add" for 0x40137f>, <DisassemblerInsn "mov" for 0x401382>, <DisassemblerInsn "mov" for 0x40138a>, <DisassemblerInsn "add" for 0x40138c>, <DisassemblerInsn "mov" for 0x40138f>, <DisassemblerInsn "cmp" for 0x401396>, <DisassemblerInsn "mov" for 0x401399>, <DisassemblerInsn "mov" for 0x4013a1>, <DisassemblerInsn "mov" for 0x4013a9>, <DisassemblerInsn "jg" for 0x4013b0>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016a8>, <DisassemblerInsn "add" for 0x4016b0>, <DisassemblerInsn "cmp" for 0x4016b4>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "jne" for 0x4016c0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401312>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "call" for 0x401348>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4013d8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rax, qword ptr [rip + 0xfe9ef]>', '<imul~~rdx, rdx, 0x18>', '<add~~rax, rdx>', '<add~~rax, 0xc>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~ax, word ptr [rax]>', '<mov~~cx, ax>', '<shr~~cx, 2>', '<and~~cx, 7>', '<add~~cx, 1>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rsp + 0x9c], ecx>', '<and~~ax, 3>', '<movzx~~eax, ax>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<lea~~rdx, [rsp + 0x220]>', '<mov~~rsi, rax>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<cmp~~dword ptr [rsp + rax*4 + 0x220], ecx>', '<jge~~0x4016a8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rip + 0xfee09]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~cl, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x1cf], cl>', '<xor~~eax, eax>', '<cmp~~cl, 0>', '<mov~~dword ptr [rsp + 0x1d0], eax>', '<je~~0x4013dd>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x7c]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~r9, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x1d8]>', '<mov~~esi, dword ptr [rsi + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x38], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x10f]>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<test~~al, 1>', '<jne~~0x4015d0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x100]>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4014c9>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x401259>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1cf]>', '<movzx~~eax, al>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1c8], eax>', '<jmp~~0x4014c9>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1d0]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x4018ce>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x40157f>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4017e6>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r8d, dword ptr [rsp + 0x1d4]>', '<mov~~rdi, qword ptr [rsp + 0x1e8]>', '<mov~~rsi, qword ptr [rsp + 0x1d8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x178], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x188], rsi>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<mov~~eax, dword ptr [rsp + 0x1a4]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4013b6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x220]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0x9c]>', '<mov~~dword ptr [rdx], esi>', '<mov~~dword ptr [rsp + rax*4 + 0x210], ecx>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<add~~rax, 1>', '<cmp~~rax, 4>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x401602>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + 0x8c]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x220]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x84]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc0]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x210]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<jae~~0x4016f8>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4017e6>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x7c], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jae~~0x401790>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~rdx, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4012a7>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~ax, word ptr [rax]>', '<shr~~ax, 2>', '<and~~ax, 7>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<imul~~eax, ecx>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<jmp~~0x401746>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rip + 0xfeb21]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0xe8], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0xea], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0xec], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~dword ptr [rsp + 0x1c8], eax>', '<je~~0x4013dd>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x238>', '<mov~~dword ptr [rsp + 0x1d4], r9d>', '<mov~~qword ptr [rsp + 0x1d8], rcx>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~qword ptr [rsp + 0x1e8], rsi>', '<mov~~qword ptr [rsp + 0x1f0], rdi>', '<mov~~eax, dword ptr [rsp + 0x240]>', '<mov~~dword ptr [rsp + 0x1fc], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x200], rcx>', '<mov~~rax, qword ptr [rip + 0xfee51]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x20b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x20c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x4018ce>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x144]>', '<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~dil, byte ptr [rsp + 0x20b]>', '<lea~~r8, [rsp + 0x220]>', '<mov~~qword ptr [rsp + 0xf8], r8>', '<lea~~r8, [rsp + 0x210]>', '<mov~~qword ptr [rsp + 0x100], r8>', '<and~~dil, 4>', '<cmp~~dil, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x10f], dil>', '<mov~~rdi, qword ptr [rip + 0xfebbc]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 0xc>', '<mov~~qword ptr [rsp + 0x110], rdi>', '<mov~~rdi, qword ptr [rip + 0xfeba2]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~rcx, qword ptr [rip + 0xfeb73]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x130], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jmp~~0x40157f>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x238>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x4018a9>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf8]>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~esi, dword ptr [rsp + 0x15c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x174], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x190], rdx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jg~~0x401312>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<add~~rax, 1>', '<cmp~~rax, 4>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x401602>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a4]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4018ce>']}], 'cfg_edge_info': [(16, 20), (24, 27), (32, 34), (33, 36), (18, 26), (14, 10), (21, 25), (0, 2), (37, 24), (17, 21), (1, 3), (36, 37), (13, 17), (25, 28), (32, 33), (26, 32), (20, 16), (38, 25), (4, 8), (21, 24), (3, 6), (30, 2), (19, 2), (5, 9), (0, 1), (10, 5), (9, 13), (34, 36), (10, 14), (27, 30), (11, 19), (24, 28), (6, 10), (25, 27), (38, 24), (4, 7), (3, 5), (5, 2), (30, 13), (8, 16), (1, 4), (37, 25), (36, 38), (13, 18), (7, 11), (16, 11)], 'cdg_edge_info': [(24, 30), (24, 27), (13, 36), (21, 28), (3, 10), (5, 13), (21, 25), (0, 2), (37, 24), (1, 3), (36, 37), (16, 16), (13, 17), (13, 26), (38, 28), (13, 32), (38, 25), (4, 8), (21, 24), (3, 6), (30, 2), (5, 9), (0, 1), (1, 2), (1, 5), (1, 11), (24, 28), (25, 27), (38, 24), (25, 30), (4, 7), (5, 2), (4, 16), (1, 19), (30, 13), (37, 28), (1, 4), (37, 25), (10, 10), (36, 38), (13, 18), (13, 21)], 'ddg_edge_info': [(13, 30), (0, 30), (26, 30), (13, 36), (18, 26), (26, 36), (11, 2), (0, 2), (0, 5), (9, 17), (0, 8), (26, 2), (0, 11), (0, 17), (9, 26), (9, 38), (25, 28), (26, 17), (0, 38), (38, 28), (26, 32), (38, 25), (13, 38), (9, 30), (4, 8), (3, 6), (26, 38), (5, 9), (0, 1), (10, 5), (0, 4), (0, 10), (9, 13), (0, 13), (9, 25), (26, 13), (17, 38), (0, 28), (0, 25), (13, 28), (6, 10), (26, 25), (13, 25), (26, 28), (3, 5), (30, 13), (0, 3), (0, 9), (8, 16), (0, 6), (17, 28), (9, 18), (17, 25), (36, 38), (0, 18), (28, 40), (26, 18)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 360, 'instruction': 'addq\t$0x238, %rsp                      # imm = 0x0xee'}, {'instIndex': 361, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O2.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 603 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 601, 'instruction': 'addq\t$0x448, %rsp                     # imm = 0x0x1c0'}, {'instIndex': 602, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 189 nodes and 340 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 603 instructions in binary file.
[4202778]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 189 nodes and 340 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.213316
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "mov" for 0x401494>, <DisassemblerInsn "imul" for 0x40149b>, <DisassemblerInsn "add" for 0x40149f>, <DisassemblerInsn "add" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "cmp" for 0x4014af>, <DisassemblerInsn "je" for 0x4014b1>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f5>, <DisassemblerInsn "mov" for 0x4020fd>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "cmp" for 0x402109>, <DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "jne" for 0x402114>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ad0>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401400>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142f>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "movsxd" for 0x40143d>, <DisassemblerInsn "mov" for 0x401440>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "imul" for 0x40144f>, <DisassemblerInsn "add" for 0x401453>, <DisassemblerInsn "add" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "movzx" for 0x401463>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "and" for 0x40146d>, <DisassemblerInsn "cmp" for 0x401470>, <DisassemblerInsn "jne" for 0x401473>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "cmp" for 0x401ae3>, <DisassemblerInsn "jle" for 0x401ae6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40211a>, <DisassemblerInsn "ret" for 0x402121>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfeb75]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3e3], al>', '<cmp~~al, 0>', '<je~~0x40211a>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jne~~0x401c9d>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x40211a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x448>', '<mov~~dword ptr [rsp + 0x3e4], r9d>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~qword ptr [rsp + 0x3f8], rsi>', '<mov~~qword ptr [rsp + 0x400], rdi>', '<mov~~eax, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~rax, qword ptr [rip + 0xfebc1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x41b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40211a>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<cmp~~eax, 0>', '<jle~~0x40211a>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x448>', '<ret~~>']}], 'cfg_edge_info': [(37, 2), (0, 2), (18, 2), (3, 2), (15, 2)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4202778], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O2/imgutils.o---before
The extraction of function: av_image_copy
[4202778]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 97 nodes and 147 edges in CFGEmulated.
It has 96 nodes and 160 edges in CDG.
It has 2869 nodes and 3738 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202778]
{4199424, 4199545, 4199808, 4200069, 4201739, 4199564, 4200077, 4199950, 4199824, 4199700, 4200343, 4202778, 4199836, 4201629, 4199710, 4202399, 4202269, 4199969, 4202656, 4200230, 4199718, 4200491, 4199851, 4201771, 4201134, 4199726, 4202546, 4199988, 4200885, 4199607, 4200759, 4199863, 4201656, 4201911, 4202039, 4201789, 4201019, 4200000, 4200265, 4199885, 4202452, 4201173, 4202199, 4200031, 4199904, 4199655, 4201447, 4202601, 4200039, 4201196, 4200045, 4201710, 4200818, 4199923, 4199796, 4202741, 4200564, 4200952, 4200697, 4202492, 4199935}
[78, 1, 30, 55, 43, 88, 42, 89, 14, 36, 24, 50, 7, 18, 60, 39, 67, 34, 76, 49, 79, 9, 95, 66, 62, 20, 31, 3, 83, 44, 38, 84, 23, 26, 25, 46, 90, 91, 27, 0, 12, 19, 13, 5, 96, 2, 33, 92, 93, 82, 94, 10, 35, 41, 85, 6, 32, 16, 77, 21, 28, 48, 71, 4, 86, 53, 54, 80, 75, 11, 8]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:14.839151
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "and" for 0x400238>, <DisassemblerInsn "movzx" for 0x40023c>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "ret" for 0x40024d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401479>, <DisassemblerInsn "and" for 0x401480>, <DisassemblerInsn "cmp" for 0x401483>, <DisassemblerInsn "jne" for 0x401486>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cb8>, <DisassemblerInsn "mov" for 0x401cbf>, <DisassemblerInsn "mov" for 0x401cc7>, <DisassemblerInsn "shr" for 0x401cca>, <DisassemblerInsn "and" for 0x401cce>, <DisassemblerInsn "add" for 0x401cd2>, <DisassemblerInsn "movzx" for 0x401cd6>, <DisassemblerInsn "imul" for 0x401cd9>, <DisassemblerInsn "add" for 0x401cdc>, <DisassemblerInsn "sar" for 0x401cdf>, <DisassemblerInsn "mov" for 0x401ce2>, <DisassemblerInsn "jmp" for 0x401ce9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd4>, <DisassemblerInsn "mov" for 0x401fd8>, <DisassemblerInsn "mov" for 0x401fdd>, <DisassemblerInsn "mov" for 0x401fe2>, <DisassemblerInsn "mov" for 0x401fea>, <DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "call" for 0x401ff7>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e32>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f8>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a08>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "add" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "add" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "call" for 0x401a36>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a0>, <DisassemblerInsn "mov" for 0x4020a5>, <DisassemblerInsn "mov" for 0x4020ad>, <DisassemblerInsn "mov" for 0x4020b2>, <DisassemblerInsn "mov" for 0x4020ba>, <DisassemblerInsn "add" for 0x4020be>, <DisassemblerInsn "mov" for 0x4020c1>, <DisassemblerInsn "add" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020c9>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "add" for 0x4020d0>, <DisassemblerInsn "mov" for 0x4020d3>, <DisassemblerInsn "add" for 0x4020d7>, <DisassemblerInsn "mov" for 0x4020da>, <DisassemblerInsn "cmp" for 0x4020de>, <DisassemblerInsn "mov" for 0x4020e1>, <DisassemblerInsn "mov" for 0x4020e6>, <DisassemblerInsn "mov" for 0x4020eb>, <DisassemblerInsn "jb" for 0x4020ef>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401514>, <DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aec>, <DisassemblerInsn "mov" for 0x401af3>, <DisassemblerInsn "mov" for 0x401afb>, <DisassemblerInsn "mov" for 0x401b02>, <DisassemblerInsn "mov" for 0x401b09>, <DisassemblerInsn "lea" for 0x401b11>, <DisassemblerInsn "lea" for 0x401b19>, <DisassemblerInsn "and" for 0x401b21>, <DisassemblerInsn "cmp" for 0x401b25>, <DisassemblerInsn "sete" for 0x401b29>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b35>, <DisassemblerInsn "imul" for 0x401b3c>, <DisassemblerInsn "add" for 0x401b40>, <DisassemblerInsn "add" for 0x401b43>, <DisassemblerInsn "mov" for 0x401b47>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "imul" for 0x401b56>, <DisassemblerInsn "add" for 0x401b5a>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "lea" for 0x401b65>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "lea" for 0x401b75>, <DisassemblerInsn "mov" for 0x401b7d>, <DisassemblerInsn "mov" for 0x401b85>, <DisassemblerInsn "imul" for 0x401b8c>, <DisassemblerInsn "add" for 0x401b90>, <DisassemblerInsn "add" for 0x401b93>, <DisassemblerInsn "mov" for 0x401b97>, <DisassemblerInsn "add" for 0x401b9f>, <DisassemblerInsn "mov" for 0x401ba2>, <DisassemblerInsn "xor" for 0x401ba9>, <DisassemblerInsn "sub" for 0x401bab>, <DisassemblerInsn "mov" for 0x401bad>, <DisassemblerInsn "mov" for 0x401bb4>, <DisassemblerInsn "imul" for 0x401bbb>, <DisassemblerInsn "add" for 0x401bbf>, <DisassemblerInsn "add" for 0x401bc2>, <DisassemblerInsn "mov" for 0x401bc6>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "mov" for 0x401bd0>, <DisassemblerInsn "xor" for 0x401bd8>, <DisassemblerInsn "mov" for 0x401bda>, <DisassemblerInsn "jmp" for 0x401be2>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed7>, <DisassemblerInsn "mov" for 0x401ede>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eed>, <DisassemblerInsn "mov" for 0x401ef5>, <DisassemblerInsn "mov" for 0x401efd>, <DisassemblerInsn "mov" for 0x401f04>, <DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "call" for 0x401f18>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401797>, <DisassemblerInsn "mov" for 0x40179e>, <DisassemblerInsn "mov" for 0x4017a6>, <DisassemblerInsn "mov" for 0x4017ae>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "mov" for 0x4017c6>, <DisassemblerInsn "mov" for 0x4017c8>, <DisassemblerInsn "movsxd" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017cd>, <DisassemblerInsn "movsxd" for 0x4017d5>, <DisassemblerInsn "mov" for 0x4017d8>, <DisassemblerInsn "cdqe" for 0x4017e0>, <DisassemblerInsn "mov" for 0x4017e2>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "add" for 0x4017ec>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f6>, <DisassemblerInsn "and" for 0x4017f8>, <DisassemblerInsn "mov" for 0x4017fb>, <DisassemblerInsn "xor" for 0x401802>, <DisassemblerInsn "cmp" for 0x401804>, <DisassemblerInsn "mov" for 0x401807>, <DisassemblerInsn "mov" for 0x40180f>, <DisassemblerInsn "mov" for 0x401817>, <DisassemblerInsn "mov" for 0x40181e>, <DisassemblerInsn "je" for 0x401825>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "cmp" for 0x401ae3>, <DisassemblerInsn "jle" for 0x401ae6>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "mov" for 0x401dbe>, <DisassemblerInsn "movzx" for 0x401dc6>, <DisassemblerInsn "sar" for 0x401dc9>, <DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "xor" for 0x401dcd>, <DisassemblerInsn "sub" for 0x401dcf>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "mov" for 0x401e02>, <DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "cmp" for 0x401e16>, <DisassemblerInsn "setne" for 0x401e1a>, <DisassemblerInsn "cmp" for 0x401e1d>, <DisassemblerInsn "setne" for 0x401e21>, <DisassemblerInsn "and" for 0x401e24>, <DisassemblerInsn "cmp" for 0x401e26>, <DisassemblerInsn "setg" for 0x401e29>, <DisassemblerInsn "and" for 0x401e2c>, <DisassemblerInsn "test" for 0x401e2e>, <DisassemblerInsn "jne" for 0x401e30>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ffc>, <DisassemblerInsn "mov" for 0x402000>, <DisassemblerInsn "mov" for 0x402005>, <DisassemblerInsn "mov" for 0x40200d>, <DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201d>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "add" for 0x402025>, <DisassemblerInsn "mov" for 0x402028>, <DisassemblerInsn "call" for 0x40202d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f9f>, <DisassemblerInsn "mov" for 0x401fa6>, <DisassemblerInsn "mov" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "cmp" for 0x401fbd>, <DisassemblerInsn "mov" for 0x401fc0>, <DisassemblerInsn "mov" for 0x401fc5>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "jb" for 0x401fce>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "mov" for 0x401d13>, <DisassemblerInsn "add" for 0x401d1a>, <DisassemblerInsn "xor" for 0x401d1d>, <DisassemblerInsn "cmp" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d22>, <DisassemblerInsn "jae" for 0x401d29>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014e7>, <DisassemblerInsn "and" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f4>, <DisassemblerInsn "xorps" for 0x4014fc>, <DisassemblerInsn "xor" for 0x4014ff>, <DisassemblerInsn "mov" for 0x401501>, <DisassemblerInsn "movaps" for 0x401509>, <DisassemblerInsn "movaps" for 0x40150c>, <DisassemblerInsn "movaps" for 0x401514>, <DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401685>, <DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "mov" for 0x401f22>, <DisassemblerInsn "mov" for 0x401f2a>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f41>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "add" for 0x401f4f>, <DisassemblerInsn "mov" for 0x401f52>, <DisassemblerInsn "add" for 0x401f5a>, <DisassemblerInsn "mov" for 0x401f5d>, <DisassemblerInsn "add" for 0x401f65>, <DisassemblerInsn "mov" for 0x401f68>, <DisassemblerInsn "add" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f72>, <DisassemblerInsn "cmp" for 0x401f79>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "mov" for 0x401f8b>, <DisassemblerInsn "mov" for 0x401f92>, <DisassemblerInsn "jne" for 0x401f99>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40151c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cee>, <DisassemblerInsn "mov" for 0x401cf6>, <DisassemblerInsn "mov" for 0x401cfe>, <DisassemblerInsn "call" for 0x401d06>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "mov" for 0x401494>, <DisassemblerInsn "imul" for 0x40149b>, <DisassemblerInsn "add" for 0x40149f>, <DisassemblerInsn "add" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "cmp" for 0x4014af>, <DisassemblerInsn "je" for 0x4014b1>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "mov" for 0x401d4c>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d5a>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "shl" for 0x401d6d>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "add" for 0x401d76>, <DisassemblerInsn "sar" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "imul" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d84>, <DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "mov" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e72>, <DisassemblerInsn "movsxd" for 0x401e76>, <DisassemblerInsn "mov" for 0x401e79>, <DisassemblerInsn "movsxd" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e84>, <DisassemblerInsn "cdqe" for 0x401e8c>, <DisassemblerInsn "mov" for 0x401e8e>, <DisassemblerInsn "mov" for 0x401e96>, <DisassemblerInsn "add" for 0x401e98>, <DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "mov" for 0x401ea2>, <DisassemblerInsn "and" for 0x401ea4>, <DisassemblerInsn "mov" for 0x401ea7>, <DisassemblerInsn "xor" for 0x401eae>, <DisassemblerInsn "cmp" for 0x401eb0>, <DisassemblerInsn "mov" for 0x401eb3>, <DisassemblerInsn "mov" for 0x401ebb>, <DisassemblerInsn "mov" for 0x401ec3>, <DisassemblerInsn "mov" for 0x401eca>, <DisassemblerInsn "je" for 0x401ed1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd8>, <DisassemblerInsn "mov" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de8>, <DisassemblerInsn "mov" for 0x401df0>, <DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "mov" for 0x401dfe>, <DisassemblerInsn "mov" for 0x401e02>, <DisassemblerInsn "mov" for 0x401e0a>, <DisassemblerInsn "mov" for 0x401e0e>, <DisassemblerInsn "cmp" for 0x401e16>, <DisassemblerInsn "setne" for 0x401e1a>, <DisassemblerInsn "cmp" for 0x401e1d>, <DisassemblerInsn "setne" for 0x401e21>, <DisassemblerInsn "and" for 0x401e24>, <DisassemblerInsn "cmp" for 0x401e26>, <DisassemblerInsn "setg" for 0x401e29>, <DisassemblerInsn "and" for 0x401e2c>, <DisassemblerInsn "test" for 0x401e2e>, <DisassemblerInsn "jne" for 0x401e30>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "mov" for 0x40187c>, <DisassemblerInsn "mov" for 0x401884>, <DisassemblerInsn "mov" for 0x40188c>, <DisassemblerInsn "mov" for 0x401894>, <DisassemblerInsn "mov" for 0x40189b>, <DisassemblerInsn "mov" for 0x4018a2>, <DisassemblerInsn "add" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018ac>, <DisassemblerInsn "add" for 0x4018b4>, <DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "add" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c2>, <DisassemblerInsn "add" for 0x4018c9>, <DisassemblerInsn "mov" for 0x4018cc>, <DisassemblerInsn "cmp" for 0x4018d3>, <DisassemblerInsn "mov" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "mov" for 0x4018ec>, <DisassemblerInsn "jne" for 0x4018f3>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "mov" for 0x401982>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "add" for 0x40199a>, <DisassemblerInsn "mov" for 0x40199d>, <DisassemblerInsn "add" for 0x4019a5>, <DisassemblerInsn "mov" for 0x4019a8>, <DisassemblerInsn "call" for 0x4019b0>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40151e>, <DisassemblerInsn "movaps" for 0x401526>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9d>, <DisassemblerInsn "mov" for 0x401ca4>, <DisassemblerInsn "mov" for 0x401cac>, <DisassemblerInsn "test" for 0x401cb4>, <DisassemblerInsn "jne" for 0x401cb6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401400>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x40142f>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "movsxd" for 0x40143d>, <DisassemblerInsn "mov" for 0x401440>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "imul" for 0x40144f>, <DisassemblerInsn "add" for 0x401453>, <DisassemblerInsn "add" for 0x401456>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "movzx" for 0x401463>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "and" for 0x40146d>, <DisassemblerInsn "cmp" for 0x401470>, <DisassemblerInsn "jne" for 0x401473>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40182b>, <DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401839>, <DisassemblerInsn "mov" for 0x401841>, <DisassemblerInsn "mov" for 0x401849>, <DisassemblerInsn "mov" for 0x401851>, <DisassemblerInsn "mov" for 0x401858>, <DisassemblerInsn "mov" for 0x40185f>, <DisassemblerInsn "mov" for 0x401867>, <DisassemblerInsn "call" for 0x40186f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c98>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401bee>, <DisassemblerInsn "mov" for 0x401bf6>, <DisassemblerInsn "mov" for 0x401bfe>, <DisassemblerInsn "mov" for 0x401c06>, <DisassemblerInsn "imul" for 0x401c0d>, <DisassemblerInsn "add" for 0x401c11>, <DisassemblerInsn "mov" for 0x401c14>, <DisassemblerInsn "add" for 0x401c1c>, <DisassemblerInsn "mov" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c28>, <DisassemblerInsn "shl" for 0x401c2b>, <DisassemblerInsn "mov" for 0x401c2e>, <DisassemblerInsn "add" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c39>, <DisassemblerInsn "mov" for 0x401c41>, <DisassemblerInsn "and" for 0x401c44>, <DisassemblerInsn "mov" for 0x401c48>, <DisassemblerInsn "add" for 0x401c50>, <DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "movzx" for 0x401c5c>, <DisassemblerInsn "cmp" for 0x401c5f>, <DisassemblerInsn "cmova" for 0x401c61>, <DisassemblerInsn "mov" for 0x401c64>, <DisassemblerInsn "add" for 0x401c6b>, <DisassemblerInsn "mov" for 0x401c6f>, <DisassemblerInsn "cmp" for 0x401c77>, <DisassemblerInsn "mov" for 0x401c7a>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "mov" for 0x401c83>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "je" for 0x401c92>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b7>, <DisassemblerInsn "movzx" for 0x4014be>, <DisassemblerInsn "mov" for 0x4014c1>, <DisassemblerInsn "xor" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014cb>, <DisassemblerInsn "xor" for 0x4014cd>, <DisassemblerInsn "cmp" for 0x4014cf>, <DisassemblerInsn "mov" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014da>, <DisassemblerInsn "jb" for 0x4014e1>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40211a>, <DisassemblerInsn "ret" for 0x402121>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b5>, <DisassemblerInsn "mov" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019cd>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "add" for 0x4019dd>, <DisassemblerInsn "mov" for 0x4019e0>, <DisassemblerInsn "add" for 0x4019e8>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "call" for 0x4019f3>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d2b>, <DisassemblerInsn "movzx" for 0x401d33>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "mov" for 0x401d4c>, <DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d5a>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "shl" for 0x401d6d>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "add" for 0x401d76>, <DisassemblerInsn "sar" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7a>, <DisassemblerInsn "imul" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d84>, <DisassemblerInsn "mov" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d9a>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "add" for 0x401da8>, <DisassemblerInsn "cmp" for 0x401dab>, <DisassemblerInsn "mov" for 0x401dae>, <DisassemblerInsn "jae" for 0x401db5>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40166d>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "movaps" for 0x40167d>, <DisassemblerInsn "movaps" for 0x401685>, <DisassemblerInsn "movaps" for 0x40168d>, <DisassemblerInsn "movaps" for 0x401694>, <DisassemblerInsn "pxor" for 0x401697>, <DisassemblerInsn "movaps" for 0x40169b>, <DisassemblerInsn "pxor" for 0x40169e>, <DisassemblerInsn "pcmpgtd" for 0x4016a2>, <DisassemblerInsn "movaps" for 0x4016a6>, <DisassemblerInsn "pandn" for 0x4016a9>, <DisassemblerInsn "pand" for 0x4016ad>, <DisassemblerInsn "por" for 0x4016b1>, <DisassemblerInsn "pshufd" for 0x4016b5>, <DisassemblerInsn "movaps" for 0x4016ba>, <DisassemblerInsn "pxor" for 0x4016bd>, <DisassemblerInsn "movaps" for 0x4016c1>, <DisassemblerInsn "pxor" for 0x4016c4>, <DisassemblerInsn "pcmpgtd" for 0x4016c8>, <DisassemblerInsn "movaps" for 0x4016cc>, <DisassemblerInsn "pandn" for 0x4016cf>, <DisassemblerInsn "pand" for 0x4016d3>, <DisassemblerInsn "por" for 0x4016d7>, <DisassemblerInsn "pshufd" for 0x4016db>, <DisassemblerInsn "movaps" for 0x4016e0>, <DisassemblerInsn "pxor" for 0x4016e3>, <DisassemblerInsn "movaps" for 0x4016e7>, <DisassemblerInsn "pxor" for 0x4016ea>, <DisassemblerInsn "pcmpgtd" for 0x4016ee>, <DisassemblerInsn "movaps" for 0x4016f2>, <DisassemblerInsn "pandn" for 0x4016f5>, <DisassemblerInsn "pand" for 0x4016f9>, <DisassemblerInsn "por" for 0x4016fd>, <DisassemblerInsn "movd" for 0x401701>, <DisassemblerInsn "cmp" for 0x401705>, <DisassemblerInsn "mov" for 0x401708>, <DisassemblerInsn "mov" for 0x401710>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "je" for 0x401720>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aae>, <DisassemblerInsn "mov" for 0x401ab6>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac2>, <DisassemblerInsn "mov" for 0x401ac6>, <DisassemblerInsn "call" for 0x401acb>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "xor" for 0x400016>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "call" for 0x40001d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402069>, <DisassemblerInsn "mov" for 0x40206e>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "mov" for 0x402083>, <DisassemblerInsn "add" for 0x40208b>, <DisassemblerInsn "mov" for 0x40208e>, <DisassemblerInsn "add" for 0x402093>, <DisassemblerInsn "mov" for 0x402096>, <DisassemblerInsn "call" for 0x40209b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401792>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401937>, <DisassemblerInsn "mov" for 0x40193e>, <DisassemblerInsn "mov" for 0x401946>, <DisassemblerInsn "mov" for 0x40194e>, <DisassemblerInsn "mov" for 0x401956>, <DisassemblerInsn "mov" for 0x40195d>, <DisassemblerInsn "mov" for 0x401965>, <DisassemblerInsn "call" for 0x40196d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402032>, <DisassemblerInsn "mov" for 0x402037>, <DisassemblerInsn "mov" for 0x40203c>, <DisassemblerInsn "mov" for 0x402044>, <DisassemblerInsn "mov" for 0x40204c>, <DisassemblerInsn "add" for 0x402054>, <DisassemblerInsn "mov" for 0x402057>, <DisassemblerInsn "add" for 0x40205c>, <DisassemblerInsn "mov" for 0x40205f>, <DisassemblerInsn "call" for 0x402064>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ad0>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401526>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153e>, <DisassemblerInsn "lea" for 0x401546>, <DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "lea" for 0x401551>, <DisassemblerInsn "movq" for 0x401555>, <DisassemblerInsn "movq" for 0x40155b>, <DisassemblerInsn "movaps" for 0x401561>, <DisassemblerInsn "pand" for 0x401568>, <DisassemblerInsn "movaps" for 0x40156c>, <DisassemblerInsn "pand" for 0x401574>, <DisassemblerInsn "movaps" for 0x401578>, <DisassemblerInsn "pcmpeqd" for 0x401580>, <DisassemblerInsn "psubw" for 0x401584>, <DisassemblerInsn "movaps" for 0x401588>, <DisassemblerInsn "psubw" for 0x401590>, <DisassemblerInsn "movaps" for 0x401594>, <DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020f5>, <DisassemblerInsn "mov" for 0x4020fd>, <DisassemblerInsn "add" for 0x402105>, <DisassemblerInsn "cmp" for 0x402109>, <DisassemblerInsn "mov" for 0x40210c>, <DisassemblerInsn "jne" for 0x402114>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401749>, <DisassemblerInsn "mov" for 0x401750>, <DisassemblerInsn "mov" for 0x401758>, <DisassemblerInsn "mov" for 0x401760>, <DisassemblerInsn "mov" for 0x401763>, <DisassemblerInsn "mov" for 0x40176b>, <DisassemblerInsn "mov" for 0x40176e>, <DisassemblerInsn "cmp" for 0x401776>, <DisassemblerInsn "setne" for 0x40177a>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "setne" for 0x401781>, <DisassemblerInsn "and" for 0x401784>, <DisassemblerInsn "cmp" for 0x401786>, <DisassemblerInsn "setg" for 0x401789>, <DisassemblerInsn "and" for 0x40178c>, <DisassemblerInsn "test" for 0x40178e>, <DisassemblerInsn "jne" for 0x401790>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "xorps" for 0x40159c>, <DisassemblerInsn "punpcklwd" for 0x40159f>, <DisassemblerInsn "movaps" for 0x4015a3>, <DisassemblerInsn "punpcklwd" for 0x4015ab>, <DisassemblerInsn "movaps" for 0x4015af>, <DisassemblerInsn "movaps" for 0x4015b7>, <DisassemblerInsn "movaps" for 0x4015be>, <DisassemblerInsn "pxor" for 0x4015c1>, <DisassemblerInsn "movaps" for 0x4015c5>, <DisassemblerInsn "movaps" for 0x4015cd>, <DisassemblerInsn "por" for 0x4015d0>, <DisassemblerInsn "pcmpgtd" for 0x4015d4>, <DisassemblerInsn "movaps" for 0x4015d8>, <DisassemblerInsn "movaps" for 0x4015e0>, <DisassemblerInsn "pandn" for 0x4015e3>, <DisassemblerInsn "pand" for 0x4015e7>, <DisassemblerInsn "movaps" for 0x4015eb>, <DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3b>, <DisassemblerInsn "mov" for 0x401a43>, <DisassemblerInsn "mov" for 0x401a4b>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "mov" for 0x401a5b>, <DisassemblerInsn "add" for 0x401a62>, <DisassemblerInsn "mov" for 0x401a65>, <DisassemblerInsn "add" for 0x401a6d>, <DisassemblerInsn "mov" for 0x401a70>, <DisassemblerInsn "mov" for 0x401a78>, <DisassemblerInsn "add" for 0x401a7a>, <DisassemblerInsn "mov" for 0x401a7d>, <DisassemblerInsn "add" for 0x401a84>, <DisassemblerInsn "mov" for 0x401a87>, <DisassemblerInsn "cmp" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a91>, <DisassemblerInsn "mov" for 0x401a99>, <DisassemblerInsn "mov" for 0x401aa1>, <DisassemblerInsn "jb" for 0x401aa8>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "por" for 0x4015f3>, <DisassemblerInsn "movaps" for 0x4015f7>, <DisassemblerInsn "movaps" for 0x4015ff>, <DisassemblerInsn "pxor" for 0x401602>, <DisassemblerInsn "movaps" for 0x401606>, <DisassemblerInsn "movaps" for 0x40160e>, <DisassemblerInsn "por" for 0x401611>, <DisassemblerInsn "pcmpgtd" for 0x401615>, <DisassemblerInsn "movaps" for 0x401619>, <DisassemblerInsn "movaps" for 0x401621>, <DisassemblerInsn "pandn" for 0x401624>, <DisassemblerInsn "pand" for 0x401628>, <DisassemblerInsn "movaps" for 0x40162c>, <DisassemblerInsn "por" for 0x401634>, <DisassemblerInsn "movaps" for 0x401638>, <DisassemblerInsn "add" for 0x401640>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "cmp" for 0x40164c>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "movaps" for 0x401657>, <DisassemblerInsn "movaps" for 0x40165f>, <DisassemblerInsn "jne" for 0x401667>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "ret" for 0x40024d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f9>, <DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "mov" for 0x401910>, <DisassemblerInsn "cmp" for 0x401917>, <DisassemblerInsn "mov" for 0x40191a>, <DisassemblerInsn "mov" for 0x401922>, <DisassemblerInsn "mov" for 0x40192a>, <DisassemblerInsn "jb" for 0x401931>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401726>, <DisassemblerInsn "mov" for 0x40172e>, <DisassemblerInsn "mov" for 0x401735>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "jmp" for 0x401744>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~cx, word ptr [rcx]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rax + rcx*4], 3>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x41c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x401749>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3e4]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~ax, word ptr [rax]>', '<shr~~ax, 2>', '<and~~ax, 7>', '<add~~ax, 1>', '<movzx~~eax, ax>', '<imul~~eax, ecx>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jmp~~0x401d8b>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<call~~0x500030>']}, {'block_Idx': 43, 'blockInsts': ['<jmp~~0x4020f5>']}, {'block_Idx': 88, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1d0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<call~~0x500030>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0x44]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x58], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x5c], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x401fd4>']}, {'block_Idx': 14, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jmp~~0x40151e>']}, {'block_Idx': 36, 'blockInsts': ['<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x19c]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~esi, dword ptr [rsp + 0x40c]>', '<mov~~ecx, dword ptr [rsp + 0x3e4]>', '<mov~~dil, byte ptr [rsp + 0x41b]>', '<lea~~r8, [rsp + 0x430]>', '<lea~~r8, [rsp + 0x420]>', '<and~~dil, 4>', '<cmp~~dil, 0>', '<sete~~dil>', '<mov~~byte ptr [rsp + 0x14f], dil>', '<mov~~rdi, qword ptr [rip + 0xfe4d4]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 0xc>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<mov~~rdi, qword ptr [rip + 0xfe4ba]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x158], rdi>', '<lea~~rdi, [rsp + 0x430]>', '<mov~~qword ptr [rsp + 0x160], rdi>', '<lea~~rdi, [rsp + 0x420]>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~rdi, qword ptr [rip + 0xfe484]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x178], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x17c], ecx>', '<mov~~rcx, qword ptr [rip + 0xfe455]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x188], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jmp~~0x401c9d>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x8c], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x40c]>', '<mov~~rdx, qword ptr [rsp + 0x280]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~r8d, dword ptr [rsp + 0x3e4]>', '<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x248], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x250], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x258], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x260], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x264], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<je~~0x4018f9>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<cmp~~eax, 0>', '<jle~~0x40211a>']}, {'block_Idx': 60, 'blockInsts': ['<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x17c]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401e37>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<call~~0x500030>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 76, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x4020f5>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x420]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jae~~0x401d3d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3c8]>', '<and~~eax, 0xf8>', '<mov~~qword ptr [rsp + 0x390], rax>', '<xorps~~xmm0, xmm0>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jmp~~0x40151e>']}, {'block_Idx': 95, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x370]>', '<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 66, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~r9, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~edi, dword ptr [rsp + 0xc4]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x90], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<jne~~0x401ed7>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40151e>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x160]>', '<call~~0x400000>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfeb75]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x3e3], al>', '<cmp~~al, 0>', '<je~~0x40211a>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x178]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x430]>', '<mov~~dword ptr [rsp + 0x104], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~r8d, dword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~r9, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~eax, dword ptr [rax + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0xa8], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<je~~0x401f9f>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401e37>']}, {'block_Idx': 84, 'blockInsts': ['<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x218]>', '<mov~~r9, qword ptr [rsp + 0x250]>', '<mov~~rsi, qword ptr [rsp + 0x220]>', '<mov~~r8, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x228]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<mov~~edi, dword ptr [rsp + 0x264]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x230], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x238], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x240], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x244], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~dword ptr [rsp + 0x278], ecx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<jne~~0x40182b>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x1a8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1b8], rsi>', '<call~~0x500030>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x3b0]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x3a0]>', '<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 46, 'blockInsts': ['<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 90, 'blockInsts': ['<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 91, 'blockInsts': ['<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x14f]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x401cee>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x448>', '<mov~~dword ptr [rsp + 0x3e4], r9d>', '<mov~~qword ptr [rsp + 0x3e8], rcx>', '<mov~~qword ptr [rsp + 0x3f0], rdx>', '<mov~~qword ptr [rsp + 0x3f8], rsi>', '<mov~~qword ptr [rsp + 0x400], rdi>', '<mov~~eax, dword ptr [rsp + 0x450]>', '<mov~~dword ptr [rsp + 0x40c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~rax, qword ptr [rip + 0xfebc1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x41b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x41c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40211a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x27c]>', '<mov~~eax, dword ptr [rsp + 0x278]>', '<mov~~rdi, qword ptr [rsp + 0x270]>', '<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~dword ptr [rsp + 0x228], eax>', '<mov~~qword ptr [rsp + 0x218], rdi>', '<mov~~qword ptr [rsp + 0x220], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x401be7>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x298]>', '<mov~~rcx, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x3c8]>', '<mov~~rdi, qword ptr [rsp + 0x410]>', '<mov~~rax, qword ptr [rip + 0xfe403]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x118], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0x138], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0x13a], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x298], eax>', '<je~~0x401ad5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x3e3]>', '<movzx~~eax, dl>', '<mov~~qword ptr [rsp + 0x3c8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~dl, 8>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~dword ptr [rsp + 0x3dc], eax>', '<jb~~0x401726>']}, {'block_Idx': 96, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x448>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rsi, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x1c0], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<call~~0x500030>']}, {'block_Idx': 92, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 93, 'blockInsts': ['<jne~~0x40151e>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<mov~~eax, dword ptr [rsp + 0x178]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x430]>', '<mov~~dword ptr [rsp + 0x104], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rsp + 0x10c]>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jae~~0x401dd8>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x3c8]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x330]>', '<movaps~~xmm3, xmmword ptr [rsp + 0x370]>', '<movaps~~xmm4, xmmword ptr [rip + 0xadc]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x3d0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x3dc], ecx>', '<mov~~dword ptr [rsp + 0x29c], eax>', '<je~~0x401ad5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3f0]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 35, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x68], rdi>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 41, 'blockInsts': ['<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<call~~0x500030>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x401aae>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x214]>', '<mov~~rdi, qword ptr [rsp + 0x208]>', '<mov~~rsi, qword ptr [rsp + 0x200]>', '<mov~~rdx, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rsp + 0x1e4], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<call~~0x500030>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x40211a>']}, {'block_Idx': 28, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x3a0]>', '<mov~~rax, qword ptr [rsp + 0x398]>', '<mov~~rcx, qword ptr [rsp + 0x390]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfeabf]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0xbf8]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2a0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2b0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2c0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2d0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<jne~~0x401c9d>']}, {'block_Idx': 71, 'blockInsts': ['<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x40c]>', '<mov~~rdx, qword ptr [rsp + 0x3f0]>', '<mov~~rcx, qword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x401797>']}, {'block_Idx': 86, 'blockInsts': ['<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 53, 'blockInsts': ['<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2e0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x2f0], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0xbb2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x300], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x310], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x320], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rdi, qword ptr [rsp + 0x250]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~esi, dword ptr [rsp + 0x1e4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1e8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x1f0], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x1f8], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x1fc], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x200], rdx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], eax>', '<jb~~0x401937>']}, {'block_Idx': 80, 'blockInsts': ['<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x330], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x340], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x350], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x360], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x370], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x388], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x398], rax>', '<movaps~~xmmword ptr [rsp + 0x3a0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm0>', '<jne~~0x40151e>']}, {'block_Idx': 75, 'blockInsts': ['<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x260]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x278]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x200], rdx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~dword ptr [rsp + 0x214], eax>', '<jb~~0x401aae>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~eax, dword ptr [rsp + 0x3dc]>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401be7>']}], 'cfg_edge_info': [(67, 77), (82, 38), (38, 44), (83, 39), (39, 44), (49, 55), (11, 16), (66, 71), (21, 2), (13, 19), (7, 12), (79, 83), (44, 49), (31, 79), (86, 88), (77, 85), (49, 48), (36, 41), (30, 34), (16, 26), (54, 10), (33, 42), (42, 54), (0, 2), (31, 35), (9, 14), (1, 3), (27, 31), (88, 90), (84, 86), (5, 9), (43, 48), (78, 79), (34, 39), (28, 32), (71, 76), (55, 67), (3, 5), (82, 39), (60, 66), (8, 13), (19, 13), (18, 2), (13, 18), (7, 11), (79, 82), (90, 91), (54, 16), (41, 46), (4, 6), (96, 18), (62, 50), (10, 21), (25, 28), (32, 36), (23, 12), (20, 25), (27, 30), (93, 94), (83, 38), (6, 10), (3, 2), (50, 62), (12, 23), (80, 84), (39, 43), (1, 4), (76, 80), (94, 95), (48, 27), (24, 27), (26, 33), (95, 96), (93, 25), (91, 92), (48, 2), (89, 55), (44, 50), (96, 8), (0, 1), (46, 53), (62, 49), (11, 10), (92, 93), (89, 48), (23, 11), (4, 7), (18, 24), (5, 8), (14, 20), (75, 79), (85, 89), (53, 60)], 'cdg_edge_info': [(89, 77), (93, 86), (5, 28), (5, 92), (83, 39), (49, 89), (54, 33), (39, 44), (5, 76), (54, 42), (93, 88), (11, 16), (49, 55), (5, 94), (7, 12), (79, 83), (5, 60), (54, 26), (5, 14), (5, 32), (5, 96), (1, 10), (7, 23), (5, 53), (5, 71), (5, 80), (5, 25), (1, 3), (27, 31), (62, 62), (5, 46), (5, 9), (4, 11), (27, 79), (93, 60), (3, 5), (82, 39), (5, 66), (5, 84), (18, 48), (93, 90), (79, 82), (5, 41), (93, 53), (54, 16), (11, 54), (5, 13), (62, 50), (93, 28), (93, 92), (93, 46), (49, 77), (23, 12), (89, 67), (3, 18), (89, 85), (44, 62), (93, 76), (27, 30), (5, 91), (5, 36), (18, 27), (23, 23), (96, 13), (1, 4), (93, 32), (5, 93), (93, 41), (11, 33), (48, 27), (11, 42), (89, 89), (93, 71), (48, 48), (93, 80), (93, 25), (5, 86), (5, 95), (11, 26), (89, 55), (44, 50), (96, 8), (0, 1), (93, 91), (5, 88), (93, 36), (54, 54), (49, 67), (13, 13), (49, 85), (4, 7), (18, 24), (93, 66), (5, 8), (39, 49), (93, 84), (93, 93), (5, 90)], 'ddg_edge_info': [(90, 88), (32, 46), (7, 26), (67, 77), (85, 55), (0, 60), (28, 76), (0, 5), (0, 14), (85, 27), (50, 27), (32, 76), (83, 39), (36, 46), (66, 96), (32, 39), (53, 71), (85, 48), (0, 44), (79, 44), (0, 53), (85, 2), (39, 44), (32, 60), (0, 7), (0, 71), (49, 55), (11, 16), (66, 71), (0, 16), (0, 80), (9, 28), (5, 94), (94, 96), (44, 77), (24, 83), (7, 12), (79, 83), (90, 92), (44, 49), (85, 50), (0, 46), (0, 55), (32, 53), (86, 88), (77, 85), (0, 9), (9, 76), (91, 93), (32, 71), (5, 96), (50, 31), (24, 30), (25, 84), (79, 30), (50, 49), (7, 23), (33, 42), (0, 30), (79, 39), (42, 54), (0, 39), (0, 94), (0, 48), (16, 26), (0, 2), (0, 66), (9, 14), (66, 84), (32, 82), (32, 91), (88, 90), (7, 16), (0, 32), (82, 83), (0, 96), (90, 96), (0, 41), (0, 50), (28, 66), (84, 86), (5, 9), (80, 76), (27, 79), (80, 94), (50, 44), (0, 25), (71, 76), (25, 88), (55, 67), (32, 41), (3, 5), (82, 39), (41, 53), (92, 25), (79, 55), (44, 67), (50, 83), (8, 13), (13, 18), (0, 18), (44, 85), (24, 82), (7, 11), (27, 44), (0, 27), (79, 82), (9, 94), (0, 91), (85, 31), (0, 36), (79, 27), (54, 16), (85, 49), (41, 46), (12, 10), (24, 39), (5, 13), (9, 66), (24, 48), (79, 48), (86, 96), (14, 25), (60, 86), (79, 2), (27, 83), (39, 48), (96, 18), (0, 11), (50, 30), (62, 50), (0, 84), (9, 32), (90, 84), (32, 36), (23, 12), (79, 50), (44, 62), (42, 10), (80, 91), (0, 4), (0, 13), (27, 39), (44, 89), (0, 86), (66, 86), (0, 31), (0, 95), (85, 44), (80, 66), (50, 62), (12, 23), (44, 55), (7, 54), (30, 83), (85, 83), (76, 80), (0, 24), (0, 88), (32, 86), (48, 27), (24, 27), (44, 39), (50, 55), (12, 16), (26, 33), (95, 96), (91, 28), (46, 60), (0, 8), (9, 84), (85, 30), (0, 90), (85, 39), (50, 39), (89, 55), (32, 88), (50, 48), (9, 88), (50, 2), (44, 50), (96, 8), (10, 2), (55, 89), (0, 1), (42, 16), (62, 49), (0, 10), (3, 91), (60, 88), (0, 83), (0, 28), (83, 44), (0, 92), (24, 31), (23, 11), (79, 31), (27, 48), (18, 24), (90, 95), (12, 11), (4, 7), (53, 76), (7, 33), (0, 49), (79, 49), (7, 42), (5, 8), (16, 54), (0, 3), (91, 32), (0, 12), (0, 76), (85, 89), (53, 60)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 601, 'instruction': 'addq\t$0x448, %rsp                     # imm = 0x0x1c0'}, {'instIndex': 602, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization O3.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 763 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 761, 'instruction': 'addq\t$0x558, %rsp                     # imm = 0x0x22e'}, {'instIndex': 762, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 195 nodes and 350 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 763 instructions in binary file.
[4206066]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 195 nodes and 350 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:01.915483
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "mov" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "movsxd" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d50>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "imul" for 0x401d5f>, <DisassemblerInsn "add" for 0x401d63>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "movzx" for 0x401d73>, <DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "and" for 0x401d7d>, <DisassemblerInsn "cmp" for 0x401d80>, <DisassemblerInsn "jne" for 0x401d83>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "add" for 0x40293d>, <DisassemblerInsn "cmp" for 0x402941>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "je" for 0x40294c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "imul" for 0x401dab>, <DisassemblerInsn "add" for 0x401daf>, <DisassemblerInsn "add" for 0x401db2>, <DisassemblerInsn "mov" for 0x401db6>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "cmp" for 0x401dbf>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dcd>, <DisassemblerInsn "mov" for 0x402dd5>, <DisassemblerInsn "add" for 0x402ddd>, <DisassemblerInsn "cmp" for 0x402de1>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "jne" for 0x402dec>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023e0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "cmp" for 0x4023f3>, <DisassemblerInsn "jle" for 0x4023f6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x402df2>, <DisassemblerInsn "ret" for 0x402df9>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x558>', '<mov~~dword ptr [rsp + 0x4f4], r9d>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~qword ptr [rsp + 0x508], rsi>', '<mov~~qword ptr [rsp + 0x510], rdi>', '<mov~~eax, dword ptr [rsp + 0x560]>', '<mov~~dword ptr [rsp + 0x51c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~rax, qword ptr [rip + 0xfe2b1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x52b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x52c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x402df2>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x402df2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfe265]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x4f3], al>', '<cmp~~al, 0>', '<je~~0x402df2>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jne~~0x402a74>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x402df2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<cmp~~eax, 0>', '<jle~~0x402df2>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x558>', '<ret~~>']}], 'cfg_edge_info': [(0, 2), (18, 2), (40, 2), (3, 2), (15, 2), (43, 2)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4206066], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/O3/imgutils.o---before
The extraction of function: av_image_copy
[4206066]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 151 nodes and 229 edges in CFGEmulated.
It has 151 nodes and 243 edges in CDG.
It has 3809 nodes and 5059 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4206066]
{4202243, 4202116, 4204037, 4201865, 4203914, 4204042, 4203017, 4205834, 4202255, 4201744, 4202128, 4202389, 4203802, 4205210, 4201884, 4202397, 4202270, 4205338, 4202144, 4202658, 4202020, 4202663, 4205479, 4204202, 4203947, 4203820, 4204845, 4202028, 4202030, 4202156, 4202289, 4203698, 4205738, 4204470, 4202550, 4202038, 4204730, 4202171, 4205243, 4203454, 4204990, 4202046, 4205889, 4201975, 4202308, 4205944, 4201927, 4202183, 4203725, 4206029, 4202359, 4202320, 4204882, 4205779, 4204887, 4202585, 4202205, 4203488, 4203493, 4202351, 4202224, 4205552, 4206066, 4204275, 4205172, 4205685, 4204663, 4204408, 4203770, 4203516, 4202365}
[0, 12, 2, 3, 8, 86, 92, 58, 114, 28, 18, 6, 117, 99, 85, 103, 100, 27, 89, 110, 43, 90, 11, 91, 32, 83, 109, 108, 48, 96, 55, 21, 5, 4, 20, 38, 82, 7, 93, 64, 102, 81, 50, 24, 121, 94, 78, 10, 106, 101, 1, 42, 14, 41, 33, 49, 71, 105, 25, 36, 16, 98, 134, 70, 19, 137, 29, 97, 13, 88, 37, 9, 47, 65, 23, 57, 112]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:19.159078
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "mov" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d37>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "movsxd" for 0x401d4d>, <DisassemblerInsn "mov" for 0x401d50>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "imul" for 0x401d5f>, <DisassemblerInsn "add" for 0x401d63>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "movzx" for 0x401d73>, <DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "and" for 0x401d7d>, <DisassemblerInsn "cmp" for 0x401d80>, <DisassemblerInsn "jne" for 0x401d83>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40213b>, <DisassemblerInsn "mov" for 0x402142>, <DisassemblerInsn "mov" for 0x402149>, <DisassemblerInsn "mov" for 0x402151>, <DisassemblerInsn "mov" for 0x402159>, <DisassemblerInsn "mov" for 0x402161>, <DisassemblerInsn "mov" for 0x402168>, <DisassemblerInsn "mov" for 0x40216f>, <DisassemblerInsn "mov" for 0x402177>, <DisassemblerInsn "call" for 0x40217f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x402df2>, <DisassemblerInsn "ret" for 0x402df9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d9c>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "imul" for 0x401dab>, <DisassemblerInsn "add" for 0x401daf>, <DisassemblerInsn "add" for 0x401db2>, <DisassemblerInsn "mov" for 0x401db6>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "cmp" for 0x401dbf>, <DisassemblerInsn "je" for 0x401dc1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402036>, <DisassemblerInsn "mov" for 0x40203e>, <DisassemblerInsn "mov" for 0x402045>, <DisassemblerInsn "mov" for 0x40204d>, <DisassemblerInsn "jmp" for 0x402054>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "mov" for 0x402549>, <DisassemblerInsn "mov" for 0x402550>, <DisassemblerInsn "mov" for 0x402557>, <DisassemblerInsn "shl" for 0x40255c>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "add" for 0x402565>, <DisassemblerInsn "sar" for 0x402567>, <DisassemblerInsn "mov" for 0x402569>, <DisassemblerInsn "imul" for 0x402571>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "add" for 0x40257b>, <DisassemblerInsn "cmp" for 0x40257e>, <DisassemblerInsn "mov" for 0x402581>, <DisassemblerInsn "jae" for 0x402588>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40234b>, <DisassemblerInsn "mov" for 0x402353>, <DisassemblerInsn "mov" for 0x40235b>, <DisassemblerInsn "mov" for 0x402363>, <DisassemblerInsn "mov" for 0x40236b>, <DisassemblerInsn "add" for 0x402372>, <DisassemblerInsn "mov" for 0x402375>, <DisassemblerInsn "add" for 0x40237d>, <DisassemblerInsn "mov" for 0x402380>, <DisassemblerInsn "mov" for 0x402388>, <DisassemblerInsn "add" for 0x40238a>, <DisassemblerInsn "mov" for 0x40238d>, <DisassemblerInsn "add" for 0x402394>, <DisassemblerInsn "mov" for 0x402397>, <DisassemblerInsn "cmp" for 0x40239e>, <DisassemblerInsn "mov" for 0x4023a1>, <DisassemblerInsn "mov" for 0x4023a9>, <DisassemblerInsn "mov" for 0x4023b1>, <DisassemblerInsn "jb" for 0x4023b8>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f7d>, <DisassemblerInsn "mov" for 0x401f85>, <DisassemblerInsn "movaps" for 0x401f8d>, <DisassemblerInsn "movaps" for 0x401f95>, <DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "mov" for 0x40295e>, <DisassemblerInsn "mov" for 0x402965>, <DisassemblerInsn "mov" for 0x40296d>, <DisassemblerInsn "imul" for 0x402974>, <DisassemblerInsn "add" for 0x402978>, <DisassemblerInsn "add" for 0x40297b>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "shr" for 0x402982>, <DisassemblerInsn "and" for 0x402986>, <DisassemblerInsn "add" for 0x40298a>, <DisassemblerInsn "movzx" for 0x40298e>, <DisassemblerInsn "imul" for 0x402991>, <DisassemblerInsn "add" for 0x402994>, <DisassemblerInsn "sar" for 0x402997>, <DisassemblerInsn "movsxd" for 0x40299a>, <DisassemblerInsn "mov" for 0x40299d>, <DisassemblerInsn "mov" for 0x4029a5>, <DisassemblerInsn "mov" for 0x4029a7>, <DisassemblerInsn "xor" for 0x4029af>, <DisassemblerInsn "mov" for 0x4029b1>, <DisassemblerInsn "jmp" for 0x4029b9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "mov" for 0x4023ec>, <DisassemblerInsn "cmp" for 0x4023f3>, <DisassemblerInsn "jle" for 0x4023f6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4020a2>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f95>, <DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b1>, <DisassemblerInsn "mov" for 0x4026b8>, <DisassemblerInsn "mov" for 0x4026c0>, <DisassemblerInsn "mov" for 0x4026c8>, <DisassemblerInsn "mov" for 0x4026d0>, <DisassemblerInsn "mov" for 0x4026d7>, <DisassemblerInsn "mov" for 0x4026de>, <DisassemblerInsn "mov" for 0x4026e6>, <DisassemblerInsn "call" for 0x4026ee>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40251a>, <DisassemblerInsn "movzx" for 0x402522>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402533>, <DisassemblerInsn "mov" for 0x40253b>, <DisassemblerInsn "mov" for 0x402542>, <DisassemblerInsn "mov" for 0x402549>, <DisassemblerInsn "mov" for 0x402550>, <DisassemblerInsn "mov" for 0x402557>, <DisassemblerInsn "shl" for 0x40255c>, <DisassemblerInsn "mov" for 0x40255e>, <DisassemblerInsn "add" for 0x402565>, <DisassemblerInsn "sar" for 0x402567>, <DisassemblerInsn "mov" for 0x402569>, <DisassemblerInsn "imul" for 0x402571>, <DisassemblerInsn "mov" for 0x402574>, <DisassemblerInsn "add" for 0x40257b>, <DisassemblerInsn "cmp" for 0x40257e>, <DisassemblerInsn "mov" for 0x402581>, <DisassemblerInsn "jae" for 0x402588>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "mov" for 0x4027bd>, <DisassemblerInsn "mov" for 0x4027c5>, <DisassemblerInsn "mov" for 0x4027cd>, <DisassemblerInsn "mov" for 0x4027d5>, <DisassemblerInsn "mov" for 0x4027dc>, <DisassemblerInsn "mov" for 0x4027e4>, <DisassemblerInsn "call" for 0x4027ec>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d78>, <DisassemblerInsn "mov" for 0x402d7d>, <DisassemblerInsn "mov" for 0x402d85>, <DisassemblerInsn "mov" for 0x402d8a>, <DisassemblerInsn "mov" for 0x402d92>, <DisassemblerInsn "add" for 0x402d96>, <DisassemblerInsn "mov" for 0x402d99>, <DisassemblerInsn "add" for 0x402d9e>, <DisassemblerInsn "mov" for 0x402da1>, <DisassemblerInsn "mov" for 0x402da6>, <DisassemblerInsn "add" for 0x402da8>, <DisassemblerInsn "mov" for 0x402dab>, <DisassemblerInsn "add" for 0x402daf>, <DisassemblerInsn "mov" for 0x402db2>, <DisassemblerInsn "cmp" for 0x402db6>, <DisassemblerInsn "mov" for 0x402db9>, <DisassemblerInsn "mov" for 0x402dbe>, <DisassemblerInsn "mov" for 0x402dc3>, <DisassemblerInsn "jb" for 0x402dc7>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b2>, <DisassemblerInsn "mov" for 0x4024b9>, <DisassemblerInsn "mov" for 0x4024bb>, <DisassemblerInsn "xor" for 0x4024c3>, <DisassemblerInsn "mov" for 0x4024c5>, <DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d5>, <DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "mov" for 0x4024e5>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "call" for 0x4024f5>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d1>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "setne" for 0x4025ed>, <DisassemblerInsn "cmp" for 0x4025f0>, <DisassemblerInsn "setne" for 0x4025f4>, <DisassemblerInsn "and" for 0x4025f7>, <DisassemblerInsn "cmp" for 0x4025f9>, <DisassemblerInsn "setg" for 0x4025fc>, <DisassemblerInsn "and" for 0x4025ff>, <DisassemblerInsn "test" for 0x402601>, <DisassemblerInsn "jne" for 0x402603>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40258a>, <DisassemblerInsn "mov" for 0x402591>, <DisassemblerInsn "movzx" for 0x402599>, <DisassemblerInsn "sar" for 0x40259c>, <DisassemblerInsn "mov" for 0x40259e>, <DisassemblerInsn "xor" for 0x4025a0>, <DisassemblerInsn "sub" for 0x4025a2>, <DisassemblerInsn "mov" for 0x4025a4>, <DisassemblerInsn "mov" for 0x4025ab>, <DisassemblerInsn "mov" for 0x4025b3>, <DisassemblerInsn "mov" for 0x4025bb>, <DisassemblerInsn "mov" for 0x4025c3>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d1>, <DisassemblerInsn "mov" for 0x4025d5>, <DisassemblerInsn "mov" for 0x4025dd>, <DisassemblerInsn "mov" for 0x4025e1>, <DisassemblerInsn "cmp" for 0x4025e9>, <DisassemblerInsn "setne" for 0x4025ed>, <DisassemblerInsn "cmp" for 0x4025f0>, <DisassemblerInsn "setne" for 0x4025f4>, <DisassemblerInsn "and" for 0x4025f7>, <DisassemblerInsn "cmp" for 0x4025f9>, <DisassemblerInsn "setg" for 0x4025fc>, <DisassemblerInsn "and" for 0x4025ff>, <DisassemblerInsn "test" for 0x402601>, <DisassemblerInsn "jne" for 0x402603>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402209>, <DisassemblerInsn "mov" for 0x402210>, <DisassemblerInsn "mov" for 0x402218>, <DisassemblerInsn "mov" for 0x402220>, <DisassemblerInsn "cmp" for 0x402227>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402232>, <DisassemblerInsn "mov" for 0x40223a>, <DisassemblerInsn "jb" for 0x402241>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d41>, <DisassemblerInsn "mov" for 0x402d46>, <DisassemblerInsn "mov" for 0x402d4b>, <DisassemblerInsn "mov" for 0x402d53>, <DisassemblerInsn "mov" for 0x402d5b>, <DisassemblerInsn "add" for 0x402d63>, <DisassemblerInsn "mov" for 0x402d66>, <DisassemblerInsn "add" for 0x402d6b>, <DisassemblerInsn "mov" for 0x402d6e>, <DisassemblerInsn "call" for 0x402d73>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a74>, <DisassemblerInsn "mov" for 0x402a7b>, <DisassemblerInsn "mov" for 0x402a83>, <DisassemblerInsn "add" for 0x402a8b>, <DisassemblerInsn "cmp" for 0x402a8e>, <DisassemblerInsn "mov" for 0x402a91>, <DisassemblerInsn "jae" for 0x402a98>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "xor" for 0x40001f>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "call" for 0x400026>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c75>, <DisassemblerInsn "mov" for 0x402c7c>, <DisassemblerInsn "mov" for 0x402c84>, <DisassemblerInsn "mov" for 0x402c8c>, <DisassemblerInsn "cmp" for 0x402c93>, <DisassemblerInsn "mov" for 0x402c96>, <DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "mov" for 0x402ca0>, <DisassemblerInsn "jb" for 0x402ca4>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402caa>, <DisassemblerInsn "mov" for 0x402cae>, <DisassemblerInsn "mov" for 0x402cb3>, <DisassemblerInsn "mov" for 0x402cb8>, <DisassemblerInsn "mov" for 0x402cc0>, <DisassemblerInsn "mov" for 0x402cc4>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "call" for 0x402cce>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4023e0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc7>, <DisassemblerInsn "movzx" for 0x401dce>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "xor" for 0x401dd9>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "xor" for 0x401ddd>, <DisassemblerInsn "cmp" for 0x401ddf>, <DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "mov" for 0x401dea>, <DisassemblerInsn "jb" for 0x401df1>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402059>, <DisassemblerInsn "mov" for 0x402060>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "mov" for 0x402070>, <DisassemblerInsn "mov" for 0x402073>, <DisassemblerInsn "mov" for 0x40207b>, <DisassemblerInsn "mov" for 0x40207e>, <DisassemblerInsn "cmp" for 0x402086>, <DisassemblerInsn "setne" for 0x40208a>, <DisassemblerInsn "cmp" for 0x40208d>, <DisassemblerInsn "setne" for 0x402091>, <DisassemblerInsn "and" for 0x402094>, <DisassemblerInsn "cmp" for 0x402096>, <DisassemblerInsn "setg" for 0x402099>, <DisassemblerInsn "and" for 0x40209c>, <DisassemblerInsn "test" for 0x40209e>, <DisassemblerInsn "jne" for 0x4020a0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d0a>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d14>, <DisassemblerInsn "mov" for 0x402d1c>, <DisassemblerInsn "mov" for 0x402d24>, <DisassemblerInsn "add" for 0x402d2c>, <DisassemblerInsn "mov" for 0x402d2f>, <DisassemblerInsn "add" for 0x402d34>, <DisassemblerInsn "mov" for 0x402d37>, <DisassemblerInsn "call" for 0x402d3c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4020a7>, <DisassemblerInsn "mov" for 0x4020ae>, <DisassemblerInsn "mov" for 0x4020b6>, <DisassemblerInsn "mov" for 0x4020be>, <DisassemblerInsn "mov" for 0x4020c6>, <DisassemblerInsn "mov" for 0x4020ce>, <DisassemblerInsn "mov" for 0x4020d6>, <DisassemblerInsn "mov" for 0x4020d8>, <DisassemblerInsn "movsxd" for 0x4020da>, <DisassemblerInsn "mov" for 0x4020dd>, <DisassemblerInsn "movsxd" for 0x4020e5>, <DisassemblerInsn "mov" for 0x4020e8>, <DisassemblerInsn "cdqe" for 0x4020f0>, <DisassemblerInsn "mov" for 0x4020f2>, <DisassemblerInsn "mov" for 0x4020fa>, <DisassemblerInsn "add" for 0x4020fc>, <DisassemblerInsn "mov" for 0x4020ff>, <DisassemblerInsn "mov" for 0x402106>, <DisassemblerInsn "and" for 0x402108>, <DisassemblerInsn "mov" for 0x40210b>, <DisassemblerInsn "xor" for 0x402112>, <DisassemblerInsn "cmp" for 0x402114>, <DisassemblerInsn "mov" for 0x402117>, <DisassemblerInsn "mov" for 0x40211f>, <DisassemblerInsn "mov" for 0x402127>, <DisassemblerInsn "mov" for 0x40212e>, <DisassemblerInsn "je" for 0x402135>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402605>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402bf0>, <DisassemblerInsn "mov" for 0x402bf8>, <DisassemblerInsn "mov" for 0x402c00>, <DisassemblerInsn "mov" for 0x402c08>, <DisassemblerInsn "mov" for 0x402c10>, <DisassemblerInsn "mov" for 0x402c17>, <DisassemblerInsn "mov" for 0x402c1e>, <DisassemblerInsn "add" for 0x402c25>, <DisassemblerInsn "mov" for 0x402c28>, <DisassemblerInsn "add" for 0x402c30>, <DisassemblerInsn "mov" for 0x402c33>, <DisassemblerInsn "add" for 0x402c3b>, <DisassemblerInsn "mov" for 0x402c3e>, <DisassemblerInsn "add" for 0x402c45>, <DisassemblerInsn "mov" for 0x402c48>, <DisassemblerInsn "cmp" for 0x402c4f>, <DisassemblerInsn "mov" for 0x402c51>, <DisassemblerInsn "mov" for 0x402c59>, <DisassemblerInsn "mov" for 0x402c61>, <DisassemblerInsn "mov" for 0x402c68>, <DisassemblerInsn "jne" for 0x402c6f>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402952>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024fa>, <DisassemblerInsn "mov" for 0x402502>, <DisassemblerInsn "add" for 0x402509>, <DisassemblerInsn "xor" for 0x40250c>, <DisassemblerInsn "cmp" for 0x40250e>, <DisassemblerInsn "mov" for 0x402511>, <DisassemblerInsn "jae" for 0x402518>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023fc>, <DisassemblerInsn "mov" for 0x402404>, <DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "mov" for 0x402412>, <DisassemblerInsn "lea" for 0x402419>, <DisassemblerInsn "lea" for 0x402421>, <DisassemblerInsn "and" for 0x402429>, <DisassemblerInsn "mov" for 0x40242b>, <DisassemblerInsn "imul" for 0x402432>, <DisassemblerInsn "add" for 0x402436>, <DisassemblerInsn "mov" for 0x402439>, <DisassemblerInsn "lea" for 0x402441>, <DisassemblerInsn "mov" for 0x402449>, <DisassemblerInsn "lea" for 0x402451>, <DisassemblerInsn "mov" for 0x402459>, <DisassemblerInsn "mov" for 0x402461>, <DisassemblerInsn "imul" for 0x402468>, <DisassemblerInsn "add" for 0x40246c>, <DisassemblerInsn "add" for 0x40246f>, <DisassemblerInsn "mov" for 0x402473>, <DisassemblerInsn "add" for 0x40247b>, <DisassemblerInsn "mov" for 0x40247e>, <DisassemblerInsn "xor" for 0x402485>, <DisassemblerInsn "sub" for 0x402487>, <DisassemblerInsn "mov" for 0x402489>, <DisassemblerInsn "mov" for 0x402490>, <DisassemblerInsn "imul" for 0x402497>, <DisassemblerInsn "add" for 0x40249b>, <DisassemblerInsn "add" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a2>, <DisassemblerInsn "cmp" for 0x4024aa>, <DisassemblerInsn "jne" for 0x4024ac>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f9d>, <DisassemblerInsn "movaps" for 0x401fa4>, <DisassemblerInsn "pxor" for 0x401fa7>, <DisassemblerInsn "movaps" for 0x401fab>, <DisassemblerInsn "pxor" for 0x401fae>, <DisassemblerInsn "pcmpgtd" for 0x401fb2>, <DisassemblerInsn "movaps" for 0x401fb6>, <DisassemblerInsn "pandn" for 0x401fb9>, <DisassemblerInsn "pand" for 0x401fbd>, <DisassemblerInsn "por" for 0x401fc1>, <DisassemblerInsn "pshufd" for 0x401fc5>, <DisassemblerInsn "movaps" for 0x401fca>, <DisassemblerInsn "pxor" for 0x401fcd>, <DisassemblerInsn "movaps" for 0x401fd1>, <DisassemblerInsn "pxor" for 0x401fd4>, <DisassemblerInsn "pcmpgtd" for 0x401fd8>, <DisassemblerInsn "movaps" for 0x401fdc>, <DisassemblerInsn "pandn" for 0x401fdf>, <DisassemblerInsn "pand" for 0x401fe3>, <DisassemblerInsn "por" for 0x401fe7>, <DisassemblerInsn "pshufd" for 0x401feb>, <DisassemblerInsn "movaps" for 0x401ff0>, <DisassemblerInsn "pxor" for 0x401ff3>, <DisassemblerInsn "movaps" for 0x401ff7>, <DisassemblerInsn "pxor" for 0x401ffa>, <DisassemblerInsn "pcmpgtd" for 0x401ffe>, <DisassemblerInsn "movaps" for 0x402002>, <DisassemblerInsn "pandn" for 0x402005>, <DisassemblerInsn "pand" for 0x402009>, <DisassemblerInsn "por" for 0x40200d>, <DisassemblerInsn "movd" for 0x402011>, <DisassemblerInsn "cmp" for 0x402015>, <DisassemblerInsn "mov" for 0x402018>, <DisassemblerInsn "mov" for 0x402020>, <DisassemblerInsn "mov" for 0x402022>, <DisassemblerInsn "mov" for 0x402029>, <DisassemblerInsn "je" for 0x402030>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40260a>, <DisassemblerInsn "mov" for 0x402611>, <DisassemblerInsn "mov" for 0x402619>, <DisassemblerInsn "mov" for 0x402621>, <DisassemblerInsn "mov" for 0x402629>, <DisassemblerInsn "mov" for 0x402631>, <DisassemblerInsn "mov" for 0x402639>, <DisassemblerInsn "mov" for 0x402641>, <DisassemblerInsn "mov" for 0x402645>, <DisassemblerInsn "movsxd" for 0x402649>, <DisassemblerInsn "mov" for 0x40264c>, <DisassemblerInsn "movsxd" for 0x402654>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "cdqe" for 0x40265f>, <DisassemblerInsn "mov" for 0x402661>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "add" for 0x40266b>, <DisassemblerInsn "mov" for 0x40266e>, <DisassemblerInsn "mov" for 0x402675>, <DisassemblerInsn "and" for 0x402677>, <DisassemblerInsn "mov" for 0x40267a>, <DisassemblerInsn "xor" for 0x402681>, <DisassemblerInsn "cmp" for 0x402683>, <DisassemblerInsn "mov" for 0x402686>, <DisassemblerInsn "mov" for 0x40268e>, <DisassemblerInsn "mov" for 0x402696>, <DisassemblerInsn "mov" for 0x40269d>, <DisassemblerInsn "je" for 0x4026a4>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4023be>, <DisassemblerInsn "mov" for 0x4023c6>, <DisassemblerInsn "mov" for 0x4023ce>, <DisassemblerInsn "mov" for 0x4023d2>, <DisassemblerInsn "mov" for 0x4023d6>, <DisassemblerInsn "call" for 0x4023db>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024cd>, <DisassemblerInsn "mov" for 0x4024d5>, <DisassemblerInsn "mov" for 0x4024dd>, <DisassemblerInsn "mov" for 0x4024e5>, <DisassemblerInsn "mov" for 0x4024ed>, <DisassemblerInsn "call" for 0x4024f5>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "and" for 0x401d90>, <DisassemblerInsn "cmp" for 0x401d93>, <DisassemblerInsn "jne" for 0x401d96>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b1a>, <DisassemblerInsn "mov" for 0x402b21>, <DisassemblerInsn "mov" for 0x402b29>, <DisassemblerInsn "mov" for 0x402b31>, <DisassemblerInsn "mov" for 0x402b39>, <DisassemblerInsn "mov" for 0x402b41>, <DisassemblerInsn "mov" for 0x402b49>, <DisassemblerInsn "mov" for 0x402b4d>, <DisassemblerInsn "movsxd" for 0x402b51>, <DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "cdqe" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b5e>, <DisassemblerInsn "mov" for 0x402b66>, <DisassemblerInsn "add" for 0x402b68>, <DisassemblerInsn "mov" for 0x402b6b>, <DisassemblerInsn "mov" for 0x402b72>, <DisassemblerInsn "and" for 0x402b74>, <DisassemblerInsn "mov" for 0x402b77>, <DisassemblerInsn "xor" for 0x402b7e>, <DisassemblerInsn "cmp" for 0x402b80>, <DisassemblerInsn "mov" for 0x402b83>, <DisassemblerInsn "mov" for 0x402b8b>, <DisassemblerInsn "mov" for 0x402b93>, <DisassemblerInsn "mov" for 0x402b9a>, <DisassemblerInsn "je" for 0x402ba1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e24>, <DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402b15>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ba7>, <DisassemblerInsn "mov" for 0x402bae>, <DisassemblerInsn "mov" for 0x402bb5>, <DisassemblerInsn "mov" for 0x402bbd>, <DisassemblerInsn "mov" for 0x402bc5>, <DisassemblerInsn "mov" for 0x402bcd>, <DisassemblerInsn "mov" for 0x402bd4>, <DisassemblerInsn "mov" for 0x402bdb>, <DisassemblerInsn "mov" for 0x402be3>, <DisassemblerInsn "call" for 0x402beb>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e2e>, <DisassemblerInsn "movaps" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae1>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "mov" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af1>, <DisassemblerInsn "cmp" for 0x402af9>, <DisassemblerInsn "setne" for 0x402afd>, <DisassemblerInsn "cmp" for 0x402b00>, <DisassemblerInsn "setne" for 0x402b04>, <DisassemblerInsn "and" for 0x402b07>, <DisassemblerInsn "cmp" for 0x402b09>, <DisassemblerInsn "setg" for 0x402b0c>, <DisassemblerInsn "and" for 0x402b0f>, <DisassemblerInsn "test" for 0x402b11>, <DisassemblerInsn "jne" for 0x402b13>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402247>, <DisassemblerInsn "mov" for 0x40224e>, <DisassemblerInsn "mov" for 0x402256>, <DisassemblerInsn "mov" for 0x40225e>, <DisassemblerInsn "mov" for 0x402266>, <DisassemblerInsn "mov" for 0x40226d>, <DisassemblerInsn "mov" for 0x402275>, <DisassemblerInsn "call" for 0x40227d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402778>, <DisassemblerInsn "mov" for 0x40277f>, <DisassemblerInsn "mov" for 0x402787>, <DisassemblerInsn "mov" for 0x40278f>, <DisassemblerInsn "cmp" for 0x402796>, <DisassemblerInsn "mov" for 0x402799>, <DisassemblerInsn "mov" for 0x4027a1>, <DisassemblerInsn "mov" for 0x4027a9>, <DisassemblerInsn "jb" for 0x4027b0>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "add" for 0x4003ba>, <DisassemblerInsn "ret" for 0x4003c1>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cd3>, <DisassemblerInsn "mov" for 0x402cd8>, <DisassemblerInsn "mov" for 0x402cdd>, <DisassemblerInsn "mov" for 0x402ce5>, <DisassemblerInsn "mov" for 0x402ced>, <DisassemblerInsn "add" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cf8>, <DisassemblerInsn "add" for 0x402cfd>, <DisassemblerInsn "mov" for 0x402d00>, <DisassemblerInsn "call" for 0x402d05>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402a6f>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a7>, <DisassemblerInsn "mov" for 0x4003a9>, <DisassemblerInsn "and" for 0x4003ac>, <DisassemblerInsn "movzx" for 0x4003b0>, <DisassemblerInsn "mov" for 0x4003b3>, <DisassemblerInsn "add" for 0x4003ba>, <DisassemblerInsn "ret" for 0x4003c1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x401e36>, <DisassemblerInsn "mov" for 0x401e3e>, <DisassemblerInsn "mov" for 0x401e46>, <DisassemblerInsn "mov" for 0x401e4e>, <DisassemblerInsn "lea" for 0x401e56>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "lea" for 0x401e61>, <DisassemblerInsn "movq" for 0x401e65>, <DisassemblerInsn "movq" for 0x401e6b>, <DisassemblerInsn "movaps" for 0x401e71>, <DisassemblerInsn "pand" for 0x401e78>, <DisassemblerInsn "movaps" for 0x401e7c>, <DisassemblerInsn "pand" for 0x401e84>, <DisassemblerInsn "movaps" for 0x401e88>, <DisassemblerInsn "pcmpeqd" for 0x401e90>, <DisassemblerInsn "psubw" for 0x401e94>, <DisassemblerInsn "movaps" for 0x401e98>, <DisassemblerInsn "psubw" for 0x401ea0>, <DisassemblerInsn "movaps" for 0x401ea4>, <DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40292d>, <DisassemblerInsn "mov" for 0x402935>, <DisassemblerInsn "add" for 0x40293d>, <DisassemblerInsn "cmp" for 0x402941>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "je" for 0x40294c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4029be>, <DisassemblerInsn "mov" for 0x4029c5>, <DisassemblerInsn "mov" for 0x4029cd>, <DisassemblerInsn "mov" for 0x4029d5>, <DisassemblerInsn "mov" for 0x4029dd>, <DisassemblerInsn "imul" for 0x4029e4>, <DisassemblerInsn "add" for 0x4029e8>, <DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "add" for 0x4029f3>, <DisassemblerInsn "mov" for 0x4029f7>, <DisassemblerInsn "mov" for 0x4029ff>, <DisassemblerInsn "shl" for 0x402a02>, <DisassemblerInsn "mov" for 0x402a05>, <DisassemblerInsn "add" for 0x402a0d>, <DisassemblerInsn "mov" for 0x402a10>, <DisassemblerInsn "mov" for 0x402a18>, <DisassemblerInsn "and" for 0x402a1b>, <DisassemblerInsn "mov" for 0x402a1f>, <DisassemblerInsn "add" for 0x402a27>, <DisassemblerInsn "mov" for 0x402a2b>, <DisassemblerInsn "movzx" for 0x402a33>, <DisassemblerInsn "cmp" for 0x402a36>, <DisassemblerInsn "cmova" for 0x402a38>, <DisassemblerInsn "mov" for 0x402a3b>, <DisassemblerInsn "add" for 0x402a42>, <DisassemblerInsn "mov" for 0x402a46>, <DisassemblerInsn "cmp" for 0x402a4e>, <DisassemblerInsn "mov" for 0x402a51>, <DisassemblerInsn "mov" for 0x402a53>, <DisassemblerInsn "mov" for 0x402a5a>, <DisassemblerInsn "mov" for 0x402a62>, <DisassemblerInsn "je" for 0x402a69>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a9a>, <DisassemblerInsn "mov" for 0x402aa1>, <DisassemblerInsn "movzx" for 0x402aa9>, <DisassemblerInsn "sar" for 0x402aac>, <DisassemblerInsn "mov" for 0x402aae>, <DisassemblerInsn "xor" for 0x402ab0>, <DisassemblerInsn "sub" for 0x402ab2>, <DisassemblerInsn "mov" for 0x402ab4>, <DisassemblerInsn "mov" for 0x402abb>, <DisassemblerInsn "mov" for 0x402ac3>, <DisassemblerInsn "mov" for 0x402acb>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae1>, <DisassemblerInsn "mov" for 0x402ae5>, <DisassemblerInsn "mov" for 0x402aed>, <DisassemblerInsn "mov" for 0x402af1>, <DisassemblerInsn "cmp" for 0x402af9>, <DisassemblerInsn "setne" for 0x402afd>, <DisassemblerInsn "cmp" for 0x402b00>, <DisassemblerInsn "setne" for 0x402b04>, <DisassemblerInsn "and" for 0x402b07>, <DisassemblerInsn "cmp" for 0x402b09>, <DisassemblerInsn "setg" for 0x402b0c>, <DisassemblerInsn "and" for 0x402b0f>, <DisassemblerInsn "test" for 0x402b11>, <DisassemblerInsn "jne" for 0x402b13>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df7>, <DisassemblerInsn "and" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e04>, <DisassemblerInsn "xorps" for 0x401e0c>, <DisassemblerInsn "xor" for 0x401e0f>, <DisassemblerInsn "mov" for 0x401e11>, <DisassemblerInsn "movaps" for 0x401e19>, <DisassemblerInsn "movaps" for 0x401e1c>, <DisassemblerInsn "movaps" for 0x401e24>, <DisassemblerInsn "jmp" for 0x401e2c>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402dcd>, <DisassemblerInsn "mov" for 0x402dd5>, <DisassemblerInsn "add" for 0x402ddd>, <DisassemblerInsn "cmp" for 0x402de1>, <DisassemblerInsn "mov" for 0x402de4>, <DisassemblerInsn "jne" for 0x402dec>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402184>, <DisassemblerInsn "mov" for 0x40218c>, <DisassemblerInsn "mov" for 0x402194>, <DisassemblerInsn "mov" for 0x40219c>, <DisassemblerInsn "mov" for 0x4021a4>, <DisassemblerInsn "mov" for 0x4021ab>, <DisassemblerInsn "mov" for 0x4021b2>, <DisassemblerInsn "add" for 0x4021b9>, <DisassemblerInsn "mov" for 0x4021bc>, <DisassemblerInsn "add" for 0x4021c4>, <DisassemblerInsn "mov" for 0x4021c7>, <DisassemblerInsn "add" for 0x4021cf>, <DisassemblerInsn "mov" for 0x4021d2>, <DisassemblerInsn "add" for 0x4021d9>, <DisassemblerInsn "mov" for 0x4021dc>, <DisassemblerInsn "cmp" for 0x4021e3>, <DisassemblerInsn "mov" for 0x4021e5>, <DisassemblerInsn "mov" for 0x4021ed>, <DisassemblerInsn "mov" for 0x4021f5>, <DisassemblerInsn "mov" for 0x4021fc>, <DisassemblerInsn "jne" for 0x402203>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "xorps" for 0x401eac>, <DisassemblerInsn "punpcklwd" for 0x401eaf>, <DisassemblerInsn "movaps" for 0x401eb3>, <DisassemblerInsn "punpcklwd" for 0x401ebb>, <DisassemblerInsn "movaps" for 0x401ebf>, <DisassemblerInsn "movaps" for 0x401ec7>, <DisassemblerInsn "movaps" for 0x401ece>, <DisassemblerInsn "pxor" for 0x401ed1>, <DisassemblerInsn "movaps" for 0x401ed5>, <DisassemblerInsn "movaps" for 0x401edd>, <DisassemblerInsn "por" for 0x401ee0>, <DisassemblerInsn "pcmpgtd" for 0x401ee4>, <DisassemblerInsn "movaps" for 0x401ee8>, <DisassemblerInsn "movaps" for 0x401ef0>, <DisassemblerInsn "pandn" for 0x401ef3>, <DisassemblerInsn "pand" for 0x401ef7>, <DisassemblerInsn "movaps" for 0x401efb>, <DisassemblerInsn "por" for 0x401f03>, <DisassemblerInsn "movaps" for 0x401f07>, <DisassemblerInsn "movaps" for 0x401f0f>, <DisassemblerInsn "pxor" for 0x401f12>, <DisassemblerInsn "movaps" for 0x401f16>, <DisassemblerInsn "movaps" for 0x401f1e>, <DisassemblerInsn "por" for 0x401f21>, <DisassemblerInsn "pcmpgtd" for 0x401f25>, <DisassemblerInsn "movaps" for 0x401f29>, <DisassemblerInsn "movaps" for 0x401f31>, <DisassemblerInsn "pandn" for 0x401f34>, <DisassemblerInsn "pand" for 0x401f38>, <DisassemblerInsn "movaps" for 0x401f3c>, <DisassemblerInsn "por" for 0x401f44>, <DisassemblerInsn "movaps" for 0x401f48>, <DisassemblerInsn "add" for 0x401f50>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "cmp" for 0x401f5c>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "movaps" for 0x401f67>, <DisassemblerInsn "movaps" for 0x401f6f>, <DisassemblerInsn "jne" for 0x401f77>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "jne" for 0x401f77>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x558>', '<mov~~dword ptr [rsp + 0x4f4], r9d>', '<mov~~qword ptr [rsp + 0x4f8], rcx>', '<mov~~qword ptr [rsp + 0x500], rdx>', '<mov~~qword ptr [rsp + 0x508], rsi>', '<mov~~qword ptr [rsp + 0x510], rdi>', '<mov~~eax, dword ptr [rsp + 0x560]>', '<mov~~dword ptr [rsp + 0x51c], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x520], rcx>', '<mov~~rax, qword ptr [rip + 0xfe2b1]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x52b], al>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0x52c], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x402df2>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x38c]>', '<mov~~eax, dword ptr [rsp + 0x388]>', '<mov~~rdi, qword ptr [rsp + 0x380]>', '<mov~~rsi, qword ptr [rsp + 0x378]>', '<mov~~rdx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x33c], ecx>', '<mov~~dword ptr [rsp + 0x338], eax>', '<mov~~qword ptr [rsp + 0x328], rdi>', '<mov~~qword ptr [rsp + 0x330], rsi>', '<call~~0x500030>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x558>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfe265]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x4f3], al>', '<cmp~~al, 0>', '<je~~0x402df2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4e0]>', '<mov~~eax, dword ptr [rsp + 0x4ec]>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<jmp~~0x4029be>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x540]>', '<mov~~edi, 1>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<add~~edx, edi>', '<sar~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x250], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x254], eax>', '<jae~~0x4025ab>']}, {'block_Idx': 92, 'blockInsts': ['<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2e0]>', '<mov~~rdi, qword ptr [rsp + 0x360]>', '<mov~~rdx, qword ptr [rsp + 0x2e8]>', '<mov~~rax, qword ptr [rsp + 0x368]>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2f8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x300], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x308], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x30c], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x310], rdx>', '<mov~~qword ptr [rsp + 0x318], rcx>', '<mov~~dword ptr [rsp + 0x324], eax>', '<jb~~0x402247>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x440]>', '<movaps~~xmm3, xmmword ptr [rsp + 0x480]>', '<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ac]>', '<mov~~edx, dword ptr [rsp + 0x4f4]>', '<mov~~rsi, qword ptr [rsp + 0x520]>', '<mov~~rcx, qword ptr [rip + 0xfd69c]>', '<imul~~rsi, rsi, 0x18>', '<add~~rcx, rsi>', '<add~~rcx, 0xc>', '<mov~~cx, word ptr [rcx]>', '<shr~~cx, 2>', '<and~~cx, 7>', '<add~~cx, 1>', '<movzx~~ecx, cx>', '<imul~~ecx, edx>', '<add~~ecx, 7>', '<sar~~ecx, 3>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x138], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x140], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jmp~~0x402a74>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x3ac]>', '<mov~~dword ptr [rsp + 0x2ac], eax>', '<cmp~~eax, 0>', '<jle~~0x402df2>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x4023be>']}, {'block_Idx': 117, 'blockInsts': ['<movaps~~xmm3, xmmword ptr [rsp + 0x480]>', '<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x230]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<mov~~rdi, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rsp + 0x218]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~dword ptr [rsp + 0x1dc], ecx>', '<mov~~dword ptr [rsp + 0x1d8], eax>', '<mov~~qword ptr [rsp + 0x1c8], rdi>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<call~~0x500030>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x264], eax>', '<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<mov~~esi, dword ptr [rsp + rsi*4 + 0x540]>', '<mov~~edi, 1>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<add~~edx, edi>', '<sar~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x250], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x254], eax>', '<jae~~0x4025ab>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<mov~~qword ptr [rsp + 0x150], rdi>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<call~~0x500030>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<mov~~eax, esi>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x60], eax>', '<add~~esi, -5>', '<mov~~dword ptr [rsp + 0x64], esi>', '<cmp~~esi, -2>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x402caa>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ac]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x268], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x270], rax>', '<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<call~~0x400000>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~dword ptr [rsp + 0x234], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x40260a>']}, {'block_Idx': 110, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 43, 'blockInsts': ['<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x254], eax>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x254]>', '<mov~~dword ptr [rsp + 0x234], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x40260a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x370]>', '<mov~~rdx, qword ptr [rsp + 0x378]>', '<mov~~rcx, qword ptr [rsp + 0x380]>', '<mov~~eax, dword ptr [rsp + 0x388]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x310], rdx>', '<mov~~qword ptr [rsp + 0x318], rcx>', '<mov~~dword ptr [rsp + 0x324], eax>', '<jb~~0x4023be>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<call~~0x500030>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jae~~0x402abb>']}, {'block_Idx': 83, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 109, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0xa0], rdi>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<xor~~esi, esi>', '<mov~~edx, 0x10>', '<call~~0x500000>']}, {'block_Idx': 108, 'blockInsts': ['<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xc0]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x402dcd>']}, {'block_Idx': 96, 'blockInsts': ['<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x402df2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x4f3]>', '<movzx~~eax, dl>', '<mov~~qword ptr [rsp + 0x4d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<cmp~~dl, 8>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~dword ptr [rsp + 0x4ec], eax>', '<jb~~0x402036>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x51c]>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x390], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x398], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4020a7>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x401e2e>']}, {'block_Idx': 38, 'blockInsts': ['<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<call~~0x500030>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x51c]>', '<mov~~rdx, qword ptr [rsp + 0x390]>', '<mov~~rsi, qword ptr [rsp + 0x398]>', '<mov~~r8d, dword ptr [rsp + 0x4f4]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x358], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x360], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x368], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x370], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x374], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x378], rsi>', '<mov~~qword ptr [rsp + 0x380], rdx>', '<mov~~dword ptr [rsp + 0x388], ecx>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<je~~0x402209>']}, {'block_Idx': 93, 'blockInsts': ['<jmp~~0x40292d>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~r9, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~edi, dword ptr [rsp + 0xc4]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0xa8], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xac], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<jne~~0x402ba7>']}, {'block_Idx': 102, 'blockInsts': ['<jmp~~0x4024cd>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + rax*4 + 0x530]>', '<add~~ecx, -1>', '<xor~~eax, eax>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x264], eax>', '<jae~~0x40252c>']}, {'block_Idx': 50, 'blockInsts': ['<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x520]>', '<mov~~esi, dword ptr [rsp + 0x51c]>', '<mov~~ecx, dword ptr [rsp + 0x4f4]>', '<mov~~al, byte ptr [rsp + 0x52b]>', '<lea~~rdi, [rsp + 0x540]>', '<lea~~rdi, [rsp + 0x530]>', '<and~~al, 4>', '<mov~~rdi, qword ptr [rip + 0xfdbde]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x278], rdi>', '<lea~~rdi, [rsp + 0x540]>', '<mov~~qword ptr [rsp + 0x280], rdi>', '<lea~~rdi, [rsp + 0x530]>', '<mov~~qword ptr [rsp + 0x288], rdi>', '<mov~~rdi, qword ptr [rip + 0xfdba8]>', '<imul~~r8, rdx, 0x18>', '<add~~rdi, r8>', '<add~~rdi, 9>', '<mov~~qword ptr [rsp + 0x290], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x298], ecx>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0x29c], ecx>', '<mov~~rcx, qword ptr [rip + 0xfdb79]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0x2a0], rcx>', '<cmp~~al, 0>', '<jne~~0x402957>']}, {'block_Idx': 121, 'blockInsts': ['<movaps~~xmm4, xmmword ptr [rip + 0x131c]>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0xee>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<pshufd~~xmm3, xmm0, 0x55>', '<movaps~~xmm2, xmm0>', '<pxor~~xmm2, xmm4>', '<movaps~~xmm1, xmm3>', '<pxor~~xmm1, xmm4>', '<pcmpgtd~~xmm2, xmm1>', '<movaps~~xmm1, xmm2>', '<pandn~~xmm1, xmm3>', '<pand~~xmm0, xmm2>', '<por~~xmm0, xmm1>', '<movd~~eax, xmm0>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x4e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x4ec], ecx>', '<mov~~dword ptr [rsp + 0x3ac], eax>', '<je~~0x4023e5>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x234]>', '<mov~~rdx, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x240]>', '<mov~~r8d, dword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~r9, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x200], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x208], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x210], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0x214], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0x218], rsi>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~dword ptr [rsp + 0x230], eax>', '<je~~0x402778>']}, {'block_Idx': 78, 'blockInsts': ['<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x500]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x278]>', '<mov~~rsi, qword ptr [rsp + 0x288]>', '<mov~~rdi, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<call~~0x400000>']}, {'block_Idx': 101, 'blockInsts': ['<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x52c]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x402059>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0x508]>', '<mov~~r8, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0x4f8]>', '<mov~~eax, dword ptr [rax + r8*4]>', '<mov~~edi, dword ptr [rdi + r8*4]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0xb0], rdi>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, ecx>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0xc0], eax>', '<mov~~edi, ecx>', '<and~~edi, 3>', '<mov~~dword ptr [rsp + 0xc4], edi>', '<xor~~eax, eax>', '<cmp~~edi, 0>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe0], eax>', '<je~~0x402c75>']}, {'block_Idx': 14, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jmp~~0x401e2e>']}, {'block_Idx': 41, 'blockInsts': ['<jmp~~0x402dcd>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<mov~~qword ptr [rsp + 0x80], rdi>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<call~~0x500030>']}, {'block_Idx': 71, 'blockInsts': ['<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 105, 'blockInsts': ['<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 25, 'blockInsts': ['<movaps~~xmm0, xmmword ptr [rsp + 0x4c0]>', '<movaps~~xmm1, xmmword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x402b1a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x324]>', '<mov~~rdi, qword ptr [rsp + 0x318]>', '<mov~~rsi, qword ptr [rsp + 0x310]>', '<mov~~rdx, qword ptr [rsp + 0x358]>', '<mov~~dword ptr [rsp + 0x2f4], eax>', '<mov~~qword ptr [rsp + 0x2b0], rdi>', '<mov~~qword ptr [rsp + 0x2b8], rsi>', '<call~~0x500030>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x210]>', '<mov~~rdx, qword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x22c]>', '<cmp~~esi, 3>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jb~~0x40292d>']}, {'block_Idx': 134, 'blockInsts': ['<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<call~~0x500030>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4029be>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rdx], esi>', '<mov~~cx, word ptr [rcx]>', '<and~~cx, 3>', '<movzx~~ecx, cx>', '<mov~~dword ptr [rax + rcx*4], 3>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<movaps~~xmm1, xmmword ptr [rsp + 0x4b0]>', '<mov~~rax, qword ptr [rsp + 0x4a8]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x520]>', '<lea~~rsi, [rdx + rdx*2]>', '<mov~~rdx, qword ptr [rip + 0xfe1af]>', '<lea~~rdx, [rdx + rsi*8]>', '<movq~~xmm6, qword ptr [rdx + rax*2 + 0xc]>', '<movq~~xmm4, qword ptr [rdx + rax*2 + 0x14]>', '<movaps~~xmm2, xmmword ptr [rip + 0x1438]>', '<pand~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3b0], xmm6>', '<pand~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3c0], xmm4>', '<pcmpeqd~~xmm2, xmm2>', '<psubw~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3d0], xmm6>', '<psubw~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3e0], xmm4>', '<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x270], rax>', '<je~~0x402df2>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x3a8]>', '<mov~~rcx, qword ptr [rsp + 0x3a0]>', '<mov~~rdx, qword ptr [rsp + 0x4d8]>', '<mov~~rdi, qword ptr [rsp + 0x520]>', '<mov~~rax, qword ptr [rip + 0xfd62c]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x108], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0x128], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0x12a], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<cmp~~rcx, rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x3ac], edx>', '<mov~~qword ptr [rsp + 0x3a0], rcx>', '<mov~~dword ptr [rsp + 0x3a8], eax>', '<je~~0x4023e5>']}, {'block_Idx': 88, 'blockInsts': ['<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rdx, qword ptr [rsp + 0x500]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x510]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x402b1a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4d8]>', '<and~~eax, 0xf8>', '<mov~~qword ptr [rsp + 0x4a0], rax>', '<xorps~~xmm0, xmm0>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jmp~~0x401e2e>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jne~~0x402a74>']}, {'block_Idx': 65, 'blockInsts': ['<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x328]>', '<mov~~r9, qword ptr [rsp + 0x360]>', '<mov~~rsi, qword ptr [rsp + 0x330]>', '<mov~~r8, qword ptr [rsp + 0x368]>', '<mov~~ecx, dword ptr [rsp + 0x338]>', '<mov~~eax, dword ptr [rsp + 0x33c]>', '<mov~~edi, dword ptr [rsp + 0x374]>', '<add~~rdx, r9>', '<mov~~qword ptr [rsp + 0x340], rdx>', '<add~~rsi, r8>', '<mov~~qword ptr [rsp + 0x348], rsi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x350], ecx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x354], eax>', '<cmp~~eax, edi>', '<mov~~qword ptr [rsp + 0x378], rsi>', '<mov~~qword ptr [rsp + 0x380], rdx>', '<mov~~dword ptr [rsp + 0x388], ecx>', '<mov~~dword ptr [rsp + 0x38c], eax>', '<jne~~0x40213b>']}, {'block_Idx': 57, 'blockInsts': ['<xorps~~xmm2, xmm2>', '<punpcklwd~~xmm6, xmm2>', '<movaps~~xmmword ptr [rsp + 0x3f0], xmm6>', '<punpcklwd~~xmm4, xmm2>', '<movaps~~xmmword ptr [rsp + 0x400], xmm4>', '<movaps~~xmm5, xmmword ptr [rip + 0x13f2]>', '<movaps~~xmm3, xmm1>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x410], xmm3>', '<movaps~~xmm2, xmm6>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x420], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm6>', '<pand~~xmm1, xmm3>', '<movaps~~xmmword ptr [rsp + 0x430], xmm1>', '<por~~xmm1, xmm2>', '<movaps~~xmmword ptr [rsp + 0x440], xmm1>', '<movaps~~xmm3, xmm0>', '<pxor~~xmm3, xmm5>', '<movaps~~xmmword ptr [rsp + 0x450], xmm3>', '<movaps~~xmm2, xmm4>', '<por~~xmm2, xmm5>', '<pcmpgtd~~xmm3, xmm2>', '<movaps~~xmmword ptr [rsp + 0x460], xmm3>', '<movaps~~xmm2, xmm3>', '<pandn~~xmm2, xmm4>', '<pand~~xmm0, xmm3>', '<movaps~~xmmword ptr [rsp + 0x470], xmm0>', '<por~~xmm0, xmm2>', '<movaps~~xmmword ptr [rsp + 0x480], xmm0>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x498], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x4a8], rax>', '<movaps~~xmmword ptr [rsp + 0x4b0], xmm1>', '<movaps~~xmmword ptr [rsp + 0x4c0], xmm0>', '<jne~~0x401e2e>']}, {'block_Idx': 112, 'blockInsts': ['<jne~~0x401e2e>']}], 'cfg_edge_info': [(32, 37), (81, 85), (42, 48), (70, 82), (97, 102), (37, 42), (33, 38), (98, 103), (48, 47), (112, 114), (11, 16), (49, 64), (13, 19), (21, 2), (7, 12), (24, 28), (27, 109), (55, 70), (47, 2), (89, 93), (106, 109), (121, 18), (64, 48), (94, 98), (36, 41), (96, 101), (25, 29), (90, 94), (137, 81), (58, 10), (0, 2), (86, 90), (9, 14), (1, 3), (100, 55), (101, 105), (5, 9), (38, 43), (57, 65), (114, 117), (92, 96), (28, 32), (91, 100), (93, 97), (88, 92), (105, 108), (81, 86), (42, 49), (3, 5), (43, 50), (29, 33), (27, 81), (8, 13), (19, 13), (18, 2), (13, 18), (117, 121), (7, 11), (71, 78), (106, 81), (4, 6), (78, 83), (121, 8), (10, 21), (32, 36), (20, 25), (86, 89), (89, 94), (64, 49), (36, 42), (37, 41), (85, 90), (102, 106), (6, 10), (82, 91), (3, 2), (108, 110), (1, 4), (48, 55), (65, 71), (100, 47), (110, 112), (97, 2), (24, 27), (83, 88), (98, 97), (90, 93), (50, 57), (134, 81), (0, 1), (11, 10), (94, 99), (112, 25), (23, 11), (41, 47), (4, 7), (18, 24), (5, 8), (14, 20), (47, 32), (85, 89)], 'cdg_edge_info': [(32, 37), (81, 85), (97, 81), (90, 97), (5, 65), (48, 100), (112, 57), (5, 83), (97, 102), (5, 92), (37, 42), (5, 101), (24, 81), (112, 29), (98, 103), (112, 50), (36, 48), (64, 64), (24, 28), (112, 43), (5, 14), (5, 78), (89, 93), (97, 106), (5, 96), (1, 10), (94, 98), (5, 117), (5, 71), (0, 2), (86, 90), (5, 25), (1, 3), (1, 21), (100, 55), (5, 110), (112, 38), (5, 9), (4, 11), (100, 82), (100, 91), (112, 65), (121, 13), (89, 97), (81, 86), (42, 49), (5, 112), (5, 57), (3, 5), (5, 121), (86, 94), (48, 70), (18, 2), (47, 47), (5, 105), (5, 50), (112, 88), (5, 114), (112, 33), (4, 6), (5, 13), (121, 8), (24, 2), (37, 48), (5, 43), (32, 36), (100, 70), (24, 32), (3, 18), (86, 89), (112, 108), (89, 94), (1, 2), (64, 49), (100, 100), (36, 42), (85, 90), (112, 83), (3, 2), (112, 92), (112, 101), (112, 110), (1, 4), (5, 20), (48, 55), (5, 29), (5, 38), (97, 2), (48, 82), (24, 27), (48, 91), (112, 112), (94, 97), (85, 94), (112, 78), (112, 96), (90, 93), (112, 105), (24, 47), (0, 1), (5, 88), (5, 33), (112, 71), (13, 13), (94, 99), (112, 25), (4, 7), (18, 24), (42, 64), (5, 8), (47, 32), (85, 89), (5, 108)], 'ddg_edge_info': [(32, 37), (81, 85), (42, 48), (81, 94), (24, 106), (108, 112), (81, 103), (70, 82), (0, 5), (0, 14), (0, 78), (37, 42), (94, 103), (24, 90), (33, 38), (91, 55), (106, 86), (98, 103), (18, 28), (0, 108), (0, 117), (0, 7), (0, 71), (49, 55), (9, 83), (49, 64), (9, 92), (24, 37), (0, 37), (55, 70), (91, 2), (0, 101), (81, 98), (0, 110), (0, 55), (49, 48), (0, 9), (97, 106), (85, 86), (49, 2), (121, 18), (64, 48), (94, 98), (55, 100), (3, 108), (42, 82), (42, 91), (24, 85), (42, 100), (96, 101), (0, 94), (90, 94), (28, 55), (0, 48), (49, 32), (0, 57), (0, 2), (0, 121), (86, 90), (9, 14), (28, 82), (38, 50), (81, 2), (108, 29), (33, 90), (100, 55), (0, 32), (0, 96), (33, 108), (71, 92), (0, 105), (88, 108), (0, 50), (101, 105), (5, 9), (0, 114), (43, 57), (9, 71), (57, 65), (33, 65), (92, 96), (28, 32), (27, 97), (91, 100), (33, 83), (0, 25), (88, 83), (27, 106), (33, 37), (81, 86), (33, 101), (42, 49), (9, 101), (105, 117), (0, 43), (3, 5), (5, 121), (43, 50), (50, 65), (106, 97), (86, 94), (42, 70), (8, 13), (105, 92), (0, 18), (33, 85), (13, 18), (117, 121), (108, 33), (0, 27), (7, 11), (71, 78), (33, 94), (105, 110), (91, 47), (105, 101), (65, 101), (5, 114), (71, 96), (106, 81), (106, 90), (5, 13), (49, 47), (78, 83), (14, 25), (121, 8), (0, 11), (33, 78), (28, 91), (91, 49), (0, 29), (25, 92), (0, 38), (0, 47), (29, 83), (9, 114), (96, 121), (0, 4), (88, 71), (64, 49), (0, 13), (91, 42), (85, 90), (0, 86), (57, 83), (28, 47), (65, 96), (82, 91), (32, 47), (18, 27), (49, 42), (106, 94), (48, 55), (71, 121), (0, 24), (0, 88), (0, 33), (28, 49), (0, 42), (81, 97), (33, 57), (81, 106), (28, 70), (0, 8), (91, 37), (83, 88), (114, 121), (9, 29), (57, 78), (85, 94), (0, 90), (29, 71), (32, 42), (33, 96), (81, 90), (49, 37), (33, 50), (105, 121), (25, 101), (81, 99), (88, 114), (110, 25), (10, 2), (0, 1), (0, 65), (0, 10), (0, 83), (0, 28), (94, 99), (91, 48), (0, 92), (37, 47), (42, 37), (24, 86), (4, 7), (33, 43), (0, 49), (42, 64), (5, 8), (0, 3), (47, 32), (91, 32), (9, 33)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 761, 'instruction': 'addq\t$0x558, %rsp                     # imm = 0x0x22e'}, {'instIndex': 762, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The case of compiler clang with optimization Os.
Patched source code file: imgutils.c
Patched function: 1---void av_image_copy 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.s---av_image_copy---before
function id: 8
function flag: True
There are 252 instructions for function: av_image_copy in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '266', 'end': 268}, 'before': {'start': '266', 'end': 297}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 250, 'instruction': 'addq\t$0x1a8, %rsp                      # imm = 0x1A8'}, {'instIndex': 251, 'instruction': 'retq'}]}]
Patched function: 1---int av_image_check_size 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.s---av_image_check_size---before
function id: 6
function flag: True
There are 40 instructions for function: av_image_check_size in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '127', 'end': 130}, 'before': {'start': '127', 'end': 149}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]
Empty patched instructions for patched function: av_image_check_size from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.o---before
The extraction of function: av_image_copy
Analyzing the binaries to generate subCFGs from patched function ...
It has 121 nodes and 209 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 252 instructions in binary file.
[4198813]
The extraction of function: av_image_check_size
Analyzing the binaries to generate subCFGs from patched function ...
It has 121 nodes and 209 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 40 instructions in binary file.
[]
The execution time of patched subCFG information extraction via angr: 0:00:00.939645
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cb2>, <DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "movsxd" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "imul" for 0x400ce2>, <DisassemblerInsn "add" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "movzx" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "and" for 0x400cf7>, <DisassemblerInsn "cmp" for 0x400cfa>, <DisassemblerInsn "jne" for 0x400cfd>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "jle" for 0x400ef7>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "imul" for 0x400d21>, <DisassemblerInsn "add" for 0x400d25>, <DisassemblerInsn "add" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d2e>, <DisassemblerInsn "cmp" for 0x400d35>, <DisassemblerInsn "je" for 0x400d37>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x401188>, <DisassemblerInsn "cmp" for 0x40118c>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "jne" for 0x401197>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ee8>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40119d>, <DisassemblerInsn "ret" for 0x4011a4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1a8>', '<mov~~dword ptr [rsp + 0x168], r9d>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~eax, dword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~rax, qword ptr [rip + 0xff32e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40119d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~eax, 0>', '<jle~~0x40119d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff2ef]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x167], al>', '<cmp~~al, 0>', '<je~~0x40119d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x400ffe>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40119d>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x1a8>', '<ret~~>']}], 'cfg_edge_info': [(22, 2), (0, 2), (11, 2), (13, 2), (3, 2)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': []}]}
{'av_image_copy': [4198813], 'av_image_check_size': []}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9e5c62c97fc0a6ee5764ec69cc6c237b5f70026b/clang_before/Os/imgutils.o---before
The extraction of function: av_image_copy
[4198813]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 48 nodes and 75 edges in CFGEmulated.
It has 47 nodes and 60 edges in CDG.
It has 1411 nodes and 1804 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198813]
{4197635, 4197515, 4198673, 4197650, 4198813, 4198432, 4197922, 4198711, 4197815, 4198584, 4197693, 4198468, 4198086, 4198225, 4197981, 4197737, 4198125, 4198779, 4198141, 4198398}
[6, 0, 5, 18, 29, 15, 4, 33, 36, 47, 46, 40, 8, 11, 7, 26, 24, 20, 14, 1, 17, 28, 32, 9, 43, 12, 2, 16, 3]
The extraction of function: av_image_check_size
[]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 7 nodes and 8 edges in CFGEmulated.
It has 7 nodes and 9 edges in CDG.
It has 148 nodes and 157 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[]
set()
[]
The execution time of patched slicing information extraction via angr: 0:00:07.960983
{'av_image_copy': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400db2>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "mov" for 0x400ca2>, <DisassemblerInsn "mov" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cb2>, <DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "movsxd" for 0x400cd0>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "imul" for 0x400ce2>, <DisassemblerInsn "add" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "movzx" for 0x400ced>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "and" for 0x400cf7>, <DisassemblerInsn "cmp" for 0x400cfa>, <DisassemblerInsn "jne" for 0x400cfd>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d3d>, <DisassemblerInsn "movzx" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d47>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "xor" for 0x400d53>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "jmp" for 0x400d64>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ffe>, <DisassemblerInsn "mov" for 0x401005>, <DisassemblerInsn "mov" for 0x40100c>, <DisassemblerInsn "mov" for 0x401014>, <DisassemblerInsn "mov" for 0x401019>, <DisassemblerInsn "call" for 0x40101b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401044>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "movzx" for 0x401053>, <DisassemblerInsn "sar" for 0x401056>, <DisassemblerInsn "mov" for 0x401058>, <DisassemblerInsn "xor" for 0x40105a>, <DisassemblerInsn "sub" for 0x40105c>, <DisassemblerInsn "mov" for 0x40105e>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401072>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "mov" for 0x401081>, <DisassemblerInsn "mov" for 0x401085>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "cmp" for 0x401097>, <DisassemblerInsn "setne" for 0x40109b>, <DisassemblerInsn "cmp" for 0x40109e>, <DisassemblerInsn "setne" for 0x4010a2>, <DisassemblerInsn "and" for 0x4010a5>, <DisassemblerInsn "cmp" for 0x4010a7>, <DisassemblerInsn "setg" for 0x4010aa>, <DisassemblerInsn "and" for 0x4010ad>, <DisassemblerInsn "test" for 0x4010af>, <DisassemblerInsn "jne" for 0x4010b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400efd>, <DisassemblerInsn "mov" for 0x400f04>, <DisassemblerInsn "mov" for 0x400f0c>, <DisassemblerInsn "xor" for 0x400f13>, <DisassemblerInsn "sub" for 0x400f15>, <DisassemblerInsn "mov" for 0x400f17>, <DisassemblerInsn "mov" for 0x400f1e>, <DisassemblerInsn "imul" for 0x400f25>, <DisassemblerInsn "add" for 0x400f29>, <DisassemblerInsn "add" for 0x400f2c>, <DisassemblerInsn "mov" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f38>, <DisassemblerInsn "mov" for 0x400f3a>, <DisassemblerInsn "xor" for 0x400f42>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "jmp" for 0x400f4c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d70>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "mov" for 0x400d83>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d8e>, <DisassemblerInsn "cmp" for 0x400d96>, <DisassemblerInsn "setne" for 0x400d9a>, <DisassemblerInsn "cmp" for 0x400d9d>, <DisassemblerInsn "setne" for 0x400da1>, <DisassemblerInsn "and" for 0x400da4>, <DisassemblerInsn "cmp" for 0x400da6>, <DisassemblerInsn "setg" for 0x400da9>, <DisassemblerInsn "and" for 0x400dac>, <DisassemblerInsn "test" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ce>, <DisassemblerInsn "mov" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "movsxd" for 0x4010eb>, <DisassemblerInsn "mov" for 0x4010ee>, <DisassemblerInsn "movsxd" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "movsxd" for 0x4010fb>, <DisassemblerInsn "mov" for 0x4010fe>, <DisassemblerInsn "mov" for 0x401103>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "mov" for 0x40110d>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401124>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x401132>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x401188>, <DisassemblerInsn "cmp" for 0x40118c>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "jne" for 0x401197>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "shl" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "add" for 0x4001f3>, <DisassemblerInsn "sar" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "imul" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "imul" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001be>, <DisassemblerInsn "add" for 0x4001c1>, <DisassemblerInsn "movzx" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e5>, <DisassemblerInsn "shl" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "add" for 0x4001f3>, <DisassemblerInsn "sar" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "imul" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113c>, <DisassemblerInsn "mov" for 0x401141>, <DisassemblerInsn "mov" for 0x401146>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "add" for 0x40114f>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "add" for 0x401157>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x40115f>, <DisassemblerInsn "add" for 0x401161>, <DisassemblerInsn "mov" for 0x401164>, <DisassemblerInsn "cmp" for 0x401168>, <DisassemblerInsn "mov" for 0x40116b>, <DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "ja" for 0x401179>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f51>, <DisassemblerInsn "mov" for 0x400f58>, <DisassemblerInsn "mov" for 0x400f60>, <DisassemblerInsn "mov" for 0x400f68>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "imul" for 0x400f77>, <DisassemblerInsn "add" for 0x400f7b>, <DisassemblerInsn "mov" for 0x400f7e>, <DisassemblerInsn "add" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "shl" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f98>, <DisassemblerInsn "add" for 0x400fa0>, <DisassemblerInsn "mov" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fab>, <DisassemblerInsn "and" for 0x400fae>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "add" for 0x400fba>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "movzx" for 0x400fc6>, <DisassemblerInsn "cmp" for 0x400fc9>, <DisassemblerInsn "cmova" for 0x400fcb>, <DisassemblerInsn "mov" for 0x400fce>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd9>, <DisassemblerInsn "cmp" for 0x400fe1>, <DisassemblerInsn "mov" for 0x400fe4>, <DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "je" for 0x400ff3>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eed>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "jle" for 0x400ef7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "mov" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dce>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dde>, <DisassemblerInsn "mov" for 0x400de6>, <DisassemblerInsn "mov" for 0x400de8>, <DisassemblerInsn "movsxd" for 0x400dea>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df5>, <DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "movsxd" for 0x400e00>, <DisassemblerInsn "mov" for 0x400e03>, <DisassemblerInsn "mov" for 0x400e0b>, <DisassemblerInsn "mov" for 0x400e13>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "mov" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e41>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "call" for 0x400e58>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "mov" for 0x401027>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "add" for 0x401035>, <DisassemblerInsn "cmp" for 0x401038>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "jae" for 0x401042>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400202>, <DisassemblerInsn "add" for 0x400206>, <DisassemblerInsn "ret" for 0x40020a>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "movsxd" for 0x400104>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "lea" for 0x40010c>, <DisassemblerInsn "lea" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "imul" for 0x40011d>, <DisassemblerInsn "add" for 0x400121>, <DisassemblerInsn "add" for 0x400124>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "and" for 0x40012a>, <DisassemblerInsn "cmp" for 0x40012c>, <DisassemblerInsn "je" for 0x40012e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e65>, <DisassemblerInsn "mov" for 0x400e6d>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "mov" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e87>, <DisassemblerInsn "add" for 0x400e8f>, <DisassemblerInsn "mov" for 0x400e92>, <DisassemblerInsn "mov" for 0x400e9a>, <DisassemblerInsn "add" for 0x400e9c>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "cmp" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "mov" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb9>, <DisassemblerInsn "ja" for 0x400ec0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "and" for 0x400d0a>, <DisassemblerInsn "cmp" for 0x400d0d>, <DisassemblerInsn "jne" for 0x400d10>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e22>, <DisassemblerInsn "mov" for 0x400e29>, <DisassemblerInsn "mov" for 0x400e31>, <DisassemblerInsn "mov" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e41>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "call" for 0x400e58>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106d>, <DisassemblerInsn "mov" for 0x401072>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "mov" for 0x401081>, <DisassemblerInsn "mov" for 0x401085>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "cmp" for 0x401097>, <DisassemblerInsn "setne" for 0x40109b>, <DisassemblerInsn "cmp" for 0x40109e>, <DisassemblerInsn "setne" for 0x4010a2>, <DisassemblerInsn "and" for 0x4010a5>, <DisassemblerInsn "cmp" for 0x4010a7>, <DisassemblerInsn "setg" for 0x4010aa>, <DisassemblerInsn "and" for 0x4010ad>, <DisassemblerInsn "test" for 0x4010af>, <DisassemblerInsn "jne" for 0x4010b1>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4010b3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec6>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "mov" for 0x400ed6>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ede>, <DisassemblerInsn "call" for 0x400ee3>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401124>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x401132>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ff9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "add" for 0x40119d>, <DisassemblerInsn "ret" for 0x4011a4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400ee8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d12>, <DisassemblerInsn "mov" for 0x400d1a>, <DisassemblerInsn "imul" for 0x400d21>, <DisassemblerInsn "add" for 0x400d25>, <DisassemblerInsn "add" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d2e>, <DisassemblerInsn "cmp" for 0x400d35>, <DisassemblerInsn "je" for 0x400d37>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<jmp~~0x400ec6>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1a8>', '<mov~~dword ptr [rsp + 0x168], r9d>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~eax, dword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rsp + 0x194], eax>', '<movsxd~~rcx, r8d>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~rax, qword ptr [rip + 0xff32e]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<and~~eax, 8>', '<cmp~~eax, 0>', '<jne~~0x40119d>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x167]>', '<movzx~~eax, al>', '<mov~~qword ptr [rsp + 0x150], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~dword ptr [rsp + 0x160], eax>', '<jmp~~0x400f51>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x168]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~edx, eax>', '<call~~0x4000f8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<movzx~~ecx, byte ptr [rcx]>', '<sar~~eax, cl>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4010b8>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~rdx, qword ptr [rsp + 0x198]>', '<mov~~esi, dword ptr [rsp + 0x194]>', '<xor~~ecx, ecx>', '<sub~~ecx, esi>', '<mov~~dword ptr [rsp + 0xbc], ecx>', '<mov~~rcx, qword ptr [rip + 0xff0eb]>', '<imul~~rdx, rdx, 0x18>', '<add~~rcx, rdx>', '<add~~rcx, 0xa>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jmp~~0x400ffe>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x400db7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~r8d, dword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~r9, qword ptr [rsp + 0x78]>', '<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~esi, dword ptr [rsi + r9*4]>', '<mov~~edi, dword ptr [rdi + r9*4]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x38], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x400ffe>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x40]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 8]>', '<add~~eax, -1>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rip + 0xffe56]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 9>', '<movzx~~eax, byte ptr [rax]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~eax, dword ptr [rsp + 0x20]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~edx, dword ptr [rsp + rdx*4 + 0x40]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 8]>', '<add~~eax, -1>', '<add~~eax, edx>', '<sar~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<imul~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x34], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x50], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x60], eax>', '<ja~~0x401111>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff099]>', '<imul~~rdi, rdi, 0x18>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x88], rax>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rdi, rcx>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~ax, word ptr [rax]>', '<and~~ax, 3>', '<mov~~word ptr [rsp + 0xac], ax>', '<add~~ax, 1>', '<mov~~word ptr [rsp + 0xae], ax>', '<movzx~~eax, ax>', '<cmp~~esi, eax>', '<cmova~~eax, esi>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~dword ptr [rsp + 0x160], eax>', '<je~~0x400eed>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<cmp~~eax, 0>', '<jle~~0x40119d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~r8d, dword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~edi, dword ptr [rdi]>', '<movsxd~~r8, r8d>', '<mov~~qword ptr [rsp + 0x110], r8>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x120], rsi>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<call~~0x500030>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x194]>', '<mov~~dword ptr [rsp + 0x80], edx>', '<add~~ecx, -1>', '<cmp~~ecx, 2>', '<mov~~dword ptr [rsp + 0x84], eax>', '<jae~~0x401065>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~dword ptr [rsp + 0x20], esi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<movsxd~~rcx, edi>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<lea~~rax, [rsp + 0x40]>', '<lea~~rax, [rsp + 0x30]>', '<mov~~rax, qword ptr [rip + 0xffef3]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 0xb>', '<mov~~al, byte ptr [rax]>', '<and~~al, 4>', '<cmp~~al, 0>', '<je~~0x40016f>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~esi, dword ptr [rsp + 0xf4]>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<add~~rdx, rax>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~eax, esi>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<cmp~~esi, 1>', '<mov~~qword ptr [rsp + 0x128], rdx>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~dword ptr [rsp + 0x13c], eax>', '<ja~~0x400e22>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a4]>', '<and~~eax, 2>', '<cmp~~eax, 0>', '<jne~~0x400d69>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x130]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~qword ptr [rsp + 0xe0], rdi>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<call~~0x500030>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rcx, qword ptr [rcx + rsi*8]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<cmp~~rcx, 0>', '<setne~~cl>', '<cmp~~rdx, 0>', '<setne~~dl>', '<and~~cl, dl>', '<cmp~~eax, 0>', '<setg~~al>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x4010b8>']}, {'block_Idx': 32, 'blockInsts': ['<jmp~~0x40117b>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rdi, qword ptr [rcx + 8]>', '<mov~~rsi, qword ptr [rax + 8]>', '<mov~~edx, 0x400>', '<call~~0x500030>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x50]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~qword ptr [rsp + 8], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<call~~0x500030>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400f51>']}, {'block_Idx': 2, 'blockInsts': ['<add~~rsp, 0x1a8>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x40119d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x198]>', '<mov~~rax, qword ptr [rip + 0xff2ef]>', '<imul~~rcx, rcx, 0x18>', '<add~~rax, rcx>', '<add~~rax, 8>', '<mov~~al, byte ptr [rax]>', '<mov~~byte ptr [rsp + 0x167], al>', '<cmp~~al, 0>', '<je~~0x40119d>']}], 'cfg_edge_info': [(43, 40), (18, 20), (18, 26), (4, 6), (29, 32), (0, 2), (11, 2), (8, 12), (1, 3), (28, 33), (24, 26), (46, 26), (32, 36), (26, 29), (14, 9), (36, 18), (17, 14), (8, 11), (0, 1), (40, 43), (9, 16), (15, 18), (33, 40), (26, 28), (3, 2), (36, 2), (4, 7), (3, 5), (12, 8), (29, 33), (14, 17), (40, 36), (5, 8), (47, 26), (1, 4), (16, 2), (11, 15), (6, 9), (7, 14)], 'cdg_edge_info': [(11, 36), (1, 3), (1, 9), (11, 26), (26, 29), (4, 14), (36, 18), (40, 40), (29, 40), (0, 1), (40, 43), (8, 8), (36, 36), (4, 7), (3, 5), (3, 11), (3, 8), (14, 14), (29, 33), (14, 17), (36, 26), (1, 4), (11, 15), (11, 18)], 'ddg_edge_info': [(7, 17), (43, 40), (18, 26), (26, 33), (18, 29), (26, 36), (17, 9), (9, 2), (26, 18), (15, 36), (0, 2), (0, 5), (0, 8), (8, 15), (26, 2), (0, 11), (43, 18), (0, 26), (0, 29), (33, 29), (43, 36), (26, 29), (15, 29), (36, 18), (17, 14), (8, 11), (43, 2), (0, 1), (0, 7), (40, 43), (0, 4), (8, 26), (33, 40), (33, 43), (3, 5), (4, 7), (18, 33), (29, 33), (18, 36), (14, 17), (29, 36), (5, 8), (0, 3), (0, 9), (0, 15), (0, 18), (15, 18), (0, 33), (7, 14)]}], 'av_image_check_size': [{'patched_tag': 'before', 'cfg_block_info': [], 'cfg_block_detailed_info': [], 'cfg_edge_info': [], 'cdg_edge_info': [], 'ddg_edge_info': []}]}
{'av_image_copy': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 250, 'instruction': 'addq\t$0x1a8, %rsp                      # imm = 0x1A8'}, {'instIndex': 251, 'instruction': 'retq'}]}], 'av_image_check_size': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': []}]}
The analysis of 24 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/patch_info.txt
{'1': {'before': 'a/libavcodec/mpegvideo_xvmc.c', 'after': 'b/libavcodec/mpegvideo_xvmc.c'}}
{'1': [{'before': '-76,7', 'after': '+76,12', 'function': 'int ff_xvmc_field_start'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422---b/libavcodec/mpegvideo_xvmc.c
The case of compiler gcc with optimization no.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422---a/libavcodec/mpegvideo_xvmc.c
The case of compiler gcc with optimization no.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: mpegvideo_xvmc.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9939841fe28bf096a94b14d2c52e5636ecca9422/clang_before/Os: directory not exists.
The analysis of 25 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/patch_info.txt
{'1': {'before': 'a/libavcodec/xvidff.c', 'after': 'b/libavcodec/xvidff.c'}}
{'1': [{'before': '-442,7', 'after': '+442,7', 'function': 'int ff_xvid_encode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8---b/libavcodec/xvidff.c
The case of compiler gcc with optimization no.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8---a/libavcodec/xvidff.c
The case of compiler gcc with optimization no.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: xvidff.c
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/9b21f0561bd07ebb9da0878c577d7a802d07b7b8/clang_before/Os: directory not exists.
The analysis of 26 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/patch_info.txt
{'1': {'before': 'a/libavcodec/eatqi.c', 'after': 'b/libavcodec/eatqi.c'}}
{'1': [{'before': '-57,12', 'after': '+57,15', 'function': 'static av_cold int tqi_decode_init'}, {'before': '-135,7', 'after': '+138,8', 'function': 'static int tqi_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c---b/libavcodec/eatqi.c
The case of compiler gcc with optimization no.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/no/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/no/eatqi_gcc.s---tqi_decode_init---after
function id: 76
function flag: True
There are 43 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/no/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/no/eatqi_gcc.s---tqi_decode_frame---after
function id: 80
function flag: True
There are 215 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L35'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L36'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 161, 'instruction': 'js\t.L41'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 164, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 166, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 167, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 168, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 169, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 170, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 173, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 175, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 176, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 177, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 178, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 179, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 180, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 181, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 182, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 183, 'instruction': 'jl\t.L39'}, {'instIndex': 184, 'instruction': 'jmp\t.L38'}, {'instIndex': 185, 'instruction': 'nop'}, {'instIndex': 186, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 188, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 191, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 192, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 193, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 194, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 195, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 196, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 197, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 198, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 200, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 201, 'instruction': 'jl\t.L40'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/no/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L35'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L36'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 161, 'instruction': 'js\t.L41'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 164, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 166, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 167, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 168, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 169, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 170, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 173, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 175, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 176, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 177, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 178, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 179, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 180, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 181, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 182, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 183, 'instruction': 'jl\t.L39'}, {'instIndex': 184, 'instruction': 'jmp\t.L38'}, {'instIndex': 185, 'instruction': 'nop'}, {'instIndex': 186, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 188, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 191, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 192, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 193, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 194, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 195, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 196, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 197, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 198, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 200, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 201, 'instruction': 'jl\t.L40'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O0/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O0/eatqi_gcc.s---tqi_decode_init---after
function id: 76
function flag: True
There are 43 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O0/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O0/eatqi_gcc.s---tqi_decode_frame---after
function id: 80
function flag: True
There are 215 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L35'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L36'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 161, 'instruction': 'js\t.L41'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 164, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 166, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 167, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 168, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 169, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 170, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 173, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 175, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 176, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 177, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 178, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 179, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 180, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 181, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 182, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 183, 'instruction': 'jl\t.L39'}, {'instIndex': 184, 'instruction': 'jmp\t.L38'}, {'instIndex': 185, 'instruction': 'nop'}, {'instIndex': 186, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 188, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 191, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 192, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 193, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 194, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 195, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 196, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 197, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 198, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 200, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 201, 'instruction': 'jl\t.L40'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O0/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L35'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L36'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 161, 'instruction': 'js\t.L41'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 164, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 166, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 167, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 168, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 169, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 170, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 173, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 175, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 176, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 177, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 178, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 179, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 180, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 181, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 182, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 183, 'instruction': 'jl\t.L39'}, {'instIndex': 184, 'instruction': 'jmp\t.L38'}, {'instIndex': 185, 'instruction': 'nop'}, {'instIndex': 186, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 187, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 188, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 191, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 192, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 193, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 194, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 195, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 196, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 197, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 198, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 200, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 201, 'instruction': 'jl\t.L40'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O1/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O1/eatqi_gcc.s---tqi_decode_init---after
function id: 72
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O1/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O1/eatqi_gcc.s---tqi_decode_frame---after
function id: 5
function flag: True
There are 286 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 95, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 96, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 97, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 98, 'instruction': 'jle\t.L16'}, {'instIndex': 99, 'instruction': 'leaq\t0x3d30(%r13), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, (%rsp)'}, {'instIndex': 101, 'instruction': 'jmp\t.L21'}, {'instIndex': 134, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 135, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 136, 'instruction': 'movl\t%ecx, 0x3214(%r13)'}, {'instIndex': 137, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 138, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 139, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 140, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 141, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 142, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 143, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 144, 'instruction': 'jge\t.L17'}, {'instIndex': 220, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 221, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 222, 'instruction': 'movl\t%ecx, 0x3218(%r13)'}, {'instIndex': 223, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 224, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 225, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 226, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 227, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 228, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 229, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 230, 'instruction': 'jge\t.L16'}, {'instIndex': 231, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 232, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 233, 'instruction': 'cmpl\t$0, 0x94(%rax)'}, {'instIndex': 234, 'instruction': 'jg\t.L20'}, {'instIndex': 235, 'instruction': 'jmp\t.L17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O1/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 95, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 96, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 97, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 98, 'instruction': 'jle\t.L16'}, {'instIndex': 99, 'instruction': 'leaq\t0x3d30(%r13), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, (%rsp)'}, {'instIndex': 101, 'instruction': 'jmp\t.L21'}, {'instIndex': 134, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 135, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 136, 'instruction': 'movl\t%ecx, 0x3214(%r13)'}, {'instIndex': 137, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 138, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 139, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 140, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 141, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 142, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 143, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 144, 'instruction': 'jge\t.L17'}, {'instIndex': 220, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 221, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 222, 'instruction': 'movl\t%ecx, 0x3218(%r13)'}, {'instIndex': 223, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 224, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 225, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 226, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 227, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 228, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 229, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 230, 'instruction': 'jge\t.L16'}, {'instIndex': 231, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 232, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 233, 'instruction': 'cmpl\t$0, 0x94(%rax)'}, {'instIndex': 234, 'instruction': 'jg\t.L20'}, {'instIndex': 235, 'instruction': 'jmp\t.L17'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O2/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O2/eatqi_gcc.s---tqi_decode_init---after
function id: 66
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O2/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O2/eatqi_gcc.s---tqi_decode_frame---after
function id: 5
function flag: True
There are 286 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 88, 'instruction': 'leaq\t0x3d30(%r15), %r13'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%r14), %edx'}, {'instIndex': 101, 'instruction': 'movl\t$0, 0x3218(%r15)'}, {'instIndex': 102, 'instruction': 'movq\t%rax, %r15'}, {'instIndex': 103, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 104, 'instruction': 'jle\t.L19'}, {'instIndex': 105, 'instruction': 'movl\t0x94(%r15), %eax'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 107, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 108, 'instruction': 'jle\t.L20'}, {'instIndex': 187, 'instruction': 'movl\t0x3214(%r14), %eax'}, {'instIndex': 188, 'instruction': 'movl\t0x94(%r15), %edx'}, {'instIndex': 189, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 190, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 192, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r14)'}, {'instIndex': 194, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 195, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 196, 'instruction': 'jl\t.L23'}, {'instIndex': 197, 'instruction': 'movl\t0x3218(%r14), %eax'}, {'instIndex': 198, 'instruction': 'movl\t0x98(%r15), %edx'}, {'instIndex': 199, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 200, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 201, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 202, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 203, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 204, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 205, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 206, 'instruction': 'jl\t.L17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O2/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 88, 'instruction': 'leaq\t0x3d30(%r15), %r13'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%r14), %edx'}, {'instIndex': 101, 'instruction': 'movl\t$0, 0x3218(%r15)'}, {'instIndex': 102, 'instruction': 'movq\t%rax, %r15'}, {'instIndex': 103, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 104, 'instruction': 'jle\t.L19'}, {'instIndex': 105, 'instruction': 'movl\t0x94(%r15), %eax'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 107, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 108, 'instruction': 'jle\t.L20'}, {'instIndex': 187, 'instruction': 'movl\t0x3214(%r14), %eax'}, {'instIndex': 188, 'instruction': 'movl\t0x94(%r15), %edx'}, {'instIndex': 189, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 190, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 192, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r14)'}, {'instIndex': 194, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 195, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 196, 'instruction': 'jl\t.L23'}, {'instIndex': 197, 'instruction': 'movl\t0x3218(%r14), %eax'}, {'instIndex': 198, 'instruction': 'movl\t0x98(%r15), %edx'}, {'instIndex': 199, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 200, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 201, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 202, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 203, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 204, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 205, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 206, 'instruction': 'jl\t.L17'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O3/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O3/eatqi_gcc.s---tqi_decode_init---after
function id: 66
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O3/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O3/eatqi_gcc.s---tqi_decode_frame---after
function id: 5
function flag: True
There are 305 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 89, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 91, 'instruction': 'leaq\t0x3d30(%r14), %r15'}, {'instIndex': 94, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 95, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 102, 'instruction': 'movl\t$0, 0x3218(%r14)'}, {'instIndex': 104, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 105, 'instruction': 'jle\t.L26'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 107, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 108, 'instruction': 'movl\t0x94(%rcx), %ecx'}, {'instIndex': 109, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 110, 'instruction': 'jle\t.L18'}, {'instIndex': 111, 'instruction': 'movq\t%r14, %r13'}, {'instIndex': 188, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 189, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 190, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 191, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 192, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 193, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 194, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 195, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 196, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 197, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 198, 'instruction': 'jl\t.L25'}, {'instIndex': 199, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 200, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 201, 'instruction': 'movq\t%r13, %r14'}, {'instIndex': 202, 'instruction': 'movl\t0x98(%rcx), %edx'}, {'instIndex': 203, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 204, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 205, 'instruction': 'movl\t%edx, %edi'}, {'instIndex': 206, 'instruction': 'leal\t0x1e(%rdx), %esi'}, {'instIndex': 207, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 208, 'instruction': 'cmovns\t%edi, %esi'}, {'instIndex': 209, 'instruction': 'sarl\t$4, %esi'}, {'instIndex': 210, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 211, 'instruction': 'jl\t.L17'}, {'instIndex': 249, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 250, 'instruction': 'leal\t15(%rdx), %eax'}, {'instIndex': 251, 'instruction': 'movl\t$0x10, %edi'}, {'instIndex': 252, 'instruction': 'cltd'}, {'instIndex': 253, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 254, 'instruction': 'idivl\t%edi'}, {'instIndex': 255, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 256, 'instruction': 'jge\t.L26'}, {'instIndex': 257, 'instruction': 'addl\t$1, %esi'}, {'instIndex': 258, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 259, 'instruction': 'jg\t.L27'}, {'instIndex': 260, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 261, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 262, 'instruction': 'jmp\t.L26'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/O3/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 89, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 91, 'instruction': 'leaq\t0x3d30(%r14), %r15'}, {'instIndex': 94, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 95, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 102, 'instruction': 'movl\t$0, 0x3218(%r14)'}, {'instIndex': 104, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 105, 'instruction': 'jle\t.L26'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 107, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 108, 'instruction': 'movl\t0x94(%rcx), %ecx'}, {'instIndex': 109, 'instruction': 'testl\t%ecx, %ecx'}, {'instIndex': 110, 'instruction': 'jle\t.L18'}, {'instIndex': 111, 'instruction': 'movq\t%r14, %r13'}, {'instIndex': 188, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 189, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 190, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 191, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 192, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 193, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 194, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 195, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 196, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 197, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 198, 'instruction': 'jl\t.L25'}, {'instIndex': 199, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 200, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 201, 'instruction': 'movq\t%r13, %r14'}, {'instIndex': 202, 'instruction': 'movl\t0x98(%rcx), %edx'}, {'instIndex': 203, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 204, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 205, 'instruction': 'movl\t%edx, %edi'}, {'instIndex': 206, 'instruction': 'leal\t0x1e(%rdx), %esi'}, {'instIndex': 207, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 208, 'instruction': 'cmovns\t%edi, %esi'}, {'instIndex': 209, 'instruction': 'sarl\t$4, %esi'}, {'instIndex': 210, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 211, 'instruction': 'jl\t.L17'}, {'instIndex': 249, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 250, 'instruction': 'leal\t15(%rdx), %eax'}, {'instIndex': 251, 'instruction': 'movl\t$0x10, %edi'}, {'instIndex': 252, 'instruction': 'cltd'}, {'instIndex': 253, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 254, 'instruction': 'idivl\t%edi'}, {'instIndex': 255, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 256, 'instruction': 'jge\t.L26'}, {'instIndex': 257, 'instruction': 'addl\t$1, %esi'}, {'instIndex': 258, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 259, 'instruction': 'jg\t.L27'}, {'instIndex': 260, 'instruction': 'movl\t$0, 0x3214(%r14)'}, {'instIndex': 261, 'instruction': 'movl\t%esi, 0x3218(%r14)'}, {'instIndex': 262, 'instruction': 'jmp\t.L26'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/Os/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/Os/eatqi_gcc.s---tqi_decode_init---after
function id: 71
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/Os/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/Os/eatqi_gcc.s---tqi_decode_frame---after
function id: 5
function flag: True
There are 272 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 110, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 120, 'instruction': 'movl\t0x98(%r12), %eax'}, {'instIndex': 121, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 122, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 123, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 124, 'instruction': 'cltd'}, {'instIndex': 125, 'instruction': 'idivl\t%ecx'}, {'instIndex': 126, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 127, 'instruction': 'jle\t.L35'}, {'instIndex': 128, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 129, 'instruction': 'movl\t0x94(%r12), %eax'}, {'instIndex': 130, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 131, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 132, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 133, 'instruction': 'cltd'}, {'instIndex': 134, 'instruction': 'idivl\t%ecx'}, {'instIndex': 135, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 136, 'instruction': 'jle\t.L23'}, {'instIndex': 137, 'instruction': 'leaq\t0x3d30(%r13), %r15'}, {'instIndex': 148, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 149, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 150, 'instruction': 'jmp\t.L18'}, {'instIndex': 227, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 228, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 229, 'instruction': 'jmp\t.L24'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_after/Os/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 110, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 120, 'instruction': 'movl\t0x98(%r12), %eax'}, {'instIndex': 121, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 122, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 123, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 124, 'instruction': 'cltd'}, {'instIndex': 125, 'instruction': 'idivl\t%ecx'}, {'instIndex': 126, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 127, 'instruction': 'jle\t.L35'}, {'instIndex': 128, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 129, 'instruction': 'movl\t0x94(%r12), %eax'}, {'instIndex': 130, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 131, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 132, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 133, 'instruction': 'cltd'}, {'instIndex': 134, 'instruction': 'idivl\t%ecx'}, {'instIndex': 135, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 136, 'instruction': 'jle\t.L23'}, {'instIndex': 137, 'instruction': 'leaq\t0x3d30(%r13), %r15'}, {'instIndex': 148, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 149, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 150, 'instruction': 'jmp\t.L18'}, {'instIndex': 227, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 228, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 229, 'instruction': 'jmp\t.L24'}]}]}
The case of compiler clang with optimization no.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 39 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 187 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_19'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 158, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 159, 'instruction': 'jmp\t.LBB1_17'}, {'instIndex': 160, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 161, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 162, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 163, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 164, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 166, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 167, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 169, 'instruction': 'jmp\t.LBB1_18'}, {'instIndex': 170, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 172, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 173, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB1_10'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 87 nodes and 130 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 39 instructions in binary file.
[4194513]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 87 nodes and 130 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 187 instructions in binary file.
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
The execution time of patched subCFG information extraction via angr: 0:00:01.102715
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003c3>, <DisassemblerInsn "jge" for 0x4003c6>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e0>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "add" for 0x4003eb>, <DisassemblerInsn "mov" for 0x4003ee>, <DisassemblerInsn "jmp" for 0x4003f4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400416>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "add" for 0x400426>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "add" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "jmp" for 0x40040c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ca>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x4003f6>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4003f8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006f0>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}], 'cfg_edge_info': [(17, 20), (28, 20), (23, 26), (22, 24), (24, 20), (26, 17), (20, 23), (17, 19), (28, 19), (15, 16), (19, 22), (25, 27), (16, 18), (22, 25), (26, 18), (27, 28), (16, 17)]}]}
{'tqi_decode_init': [4194513], 'tqi_decode_frame': [4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/no/eatqi.o---after
The extraction of function: tqi_decode_init
[4194513]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 121 nodes and 141 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194513]
{4194304, 4194402, 4194380, 4194445, 4194513, 4194365}
[5, 1, 7, 0, 2, 9]
The extraction of function: tqi_decode_frame
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 66 nodes and 94 edges in CFGEmulated.
It has 64 nodes and 89 edges in CDG.
It has 1702 nodes and 2616 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
{4195072, 4194955, 4194701, 4195345, 4195198, 4194843, 4194848, 4194732, 4195245, 4195383, 4194872, 4195132, 4195391, 4195267, 4194885, 4194757, 4195272, 4195274, 4195024, 4194782, 4195296, 4194528, 4195183, 4194927, 4194672, 4195318, 4195320, 4194812, 4194942}
[26, 28, 32, 11, 27, 35, 58, 30, 46, 14, 34, 13, 64, 36, 40, 37, 49, 25, 0, 41, 16, 29, 18, 43, 23, 33, 1, 15, 39, 24, 42, 12, 20, 44, 9, 54, 57, 19, 45]
The execution time of patched slicing information extraction via angr: 0:00:06.616973
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "add" for 0x400067>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400088>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "cmp" for 0x400034>, <DisassemblerInsn "jne" for 0x40003b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfff88]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x36c], 0x15>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x36c], 0>', '<jne~~0x40004c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "jmp" for 0x400286>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "add" for 0x400175>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "je" for 0x40018b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "sub" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cqo" for 0x4002bf>, <DisassemblerInsn "idiv" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "call" for 0x4002ce>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400416>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "add" for 0x400426>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x40061a>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4006f0>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071c>, <DisassemblerInsn "mov" for 0x400723>, <DisassemblerInsn "mov" for 0x400728>, <DisassemblerInsn "shl" for 0x40072e>, <DisassemblerInsn "imul" for 0x400731>, <DisassemblerInsn "movsxd" for 0x400736>, <DisassemblerInsn "add" for 0x400739>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "shl" for 0x400747>, <DisassemblerInsn "movsxd" for 0x40074a>, <DisassemblerInsn "add" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "shl" for 0x40076c>, <DisassemblerInsn "mov" for 0x40076f>, <DisassemblerInsn "imul" for 0x400774>, <DisassemblerInsn "movsxd" for 0x40077b>, <DisassemblerInsn "add" for 0x40077e>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "shl" for 0x40078c>, <DisassemblerInsn "movsxd" for 0x40078f>, <DisassemblerInsn "add" for 0x400792>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "mov" for 0x40079a>, <DisassemblerInsn "mov" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007ab>, <DisassemblerInsn "shl" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b4>, <DisassemblerInsn "imul" for 0x4007b9>, <DisassemblerInsn "movsxd" for 0x4007c0>, <DisassemblerInsn "add" for 0x4007c3>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007cb>, <DisassemblerInsn "shl" for 0x4007d1>, <DisassemblerInsn "movsxd" for 0x4007d4>, <DisassemblerInsn "add" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007de>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "mov" for 0x4007ef>, <DisassemblerInsn "mov" for 0x4007f3>, <DisassemblerInsn "call" for 0x4007f8>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001dc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "call" for 0x4001aa>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "add" for 0x4008ee>, <DisassemblerInsn "ret" for 0x4008f2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "add" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "jmp" for 0x40040c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "add" for 0x4006e9>, <DisassemblerInsn "ret" for 0x4006ed>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "add" for 0x400443>, <DisassemblerInsn "ret" for 0x400447>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "movsxd" for 0x400117>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "movzx" for 0x400151>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "movzx" for 0x400167>, <DisassemblerInsn "call" for 0x40016b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "add" for 0x400443>, <DisassemblerInsn "ret" for 0x400447>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "add" for 0x400212>, <DisassemblerInsn "call" for 0x400219>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "add" for 0x4005f2>, <DisassemblerInsn "sar" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "cmp" for 0x4005fc>, <DisassemblerInsn "jl" for 0x400601>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "jge" for 0x40021e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003c3>, <DisassemblerInsn "jge" for 0x4003c6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "jmp" for 0x400240>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b5>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "shl" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "sub" for 0x4004c4>, <DisassemblerInsn "imul" for 0x4004c6>, <DisassemblerInsn "mov" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cd>, <DisassemblerInsn "mov" for 0x4004d2>, <DisassemblerInsn "cmp" for 0x4004d6>, <DisassemblerInsn "jne" for 0x4004dd>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "call" for 0x4001f7>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400670>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "mov" for 0x400683>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "call" for 0x40068f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "cmp" for 0x400274>, <DisassemblerInsn "jne" for 0x40027c>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "cmp" for 0x4001c0>, <DisassemblerInsn "jne" for 0x4001c3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "add" for 0x40024a>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "add" for 0x400256>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "sub" for 0x400267>, <DisassemblerInsn "call" for 0x40026a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c8>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "ret" for 0x4005d1>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "add" for 0x4006e9>, <DisassemblerInsn "ret" for 0x4006ed>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e0>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "add" for 0x4003eb>, <DisassemblerInsn "mov" for 0x4003ee>, <DisassemblerInsn "jmp" for 0x4003f4>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "lea" for 0x40022a>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "call" for 0x400233>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "call" for 0x4003db>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x40043f>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4001ac>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x2b10]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 0x3d20]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x14], 0>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~qword ptr [rsp - 0x10], 0>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x3b90]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b50]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 4>', '<imul~~ecx, dword ptr [rsp + 0x1c]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 4>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b58]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b94]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b60]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b98]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x2bd8]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x14]>', '<je~~0x4001fc>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x220]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 64, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4003f8>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~esi, byte ptr [rax + 4]>', '<call~~0x4004b0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x218]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~eax, dword ptr [rsp - 0x14]>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp - 0x18], eax>', '<cmp~~dword ptr [rsp - 0x18], 0>', '<jl~~0x40060a>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400245>']}, {'block_Idx': 43, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ca>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xffffffff>', '<jmp~~0x40043f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<shl~~ecx, 1>', '<mov~~eax, 0xd7>', '<sub~~eax, ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0x10], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x40056d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~esi, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x1790]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~rax>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3d20], 0>', '<jne~~0x40028b>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x10]>', '<jne~~0x4001de>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<add~~rdi, 0x3d20>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d28>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<sub~~rdx, rax>', '<call~~0x500038>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x4003f6>']}, {'block_Idx': 9, 'blockInsts': ['<ret~~>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6e2]>', '<mov~~al, 0>', '<call~~0x500030>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006f0>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (14, 16), (23, 25), (34, 37), (9, 11), (54, 43), (27, 28), (58, 37), (0, 11), (45, 46), (42, 35), (36, 43), (24, 26), (33, 32), (18, 19), (43, 45), (35, 41), (12, 15), (49, 43), (14, 15), (0, 1), (34, 36), (19, 23), (36, 39), (11, 13), (28, 29), (30, 32), (58, 36), (28, 32), (15, 16), (42, 34), (45, 57), (44, 37), (32, 35), (16, 18), (26, 25), (43, 44), (12, 14), (20, 24), (40, 42), (57, 58), (11, 12), (37, 40), (13, 12), (64, 57)], 'cdg_edge_info': [(43, 37), (24, 27), (32, 34), (43, 40), (18, 23), (18, 20), (34, 37), (34, 40), (58, 37), (34, 43), (58, 40), (42, 35), (58, 43), (24, 26), (42, 41), (18, 19), (43, 42), (24, 32), (43, 45), (18, 25), (12, 15), (14, 15), (11, 16), (34, 36), (34, 42), (11, 13), (58, 36), (58, 42), (24, 25), (42, 34), (24, 28), (32, 35), (43, 44), (18, 24), (12, 14), (32, 41), (11, 12), (11, 18)], 'ddg_edge_info': [(16, 20), (13, 42), (12, 34), (0, 14), (11, 14), (34, 58), (12, 27), (12, 36), (0, 16), (11, 16), (58, 42), (13, 19), (15, 16), (19, 41), (57, 34), (16, 42), (20, 24), (13, 58), (13, 12), (57, 36), (20, 26), (11, 57), (0, 57), (12, 40), (13, 14), (16, 19), (0, 32), (0, 41), (12, 15), (20, 28), (26, 41), (32, 57), (12, 42), (40, 58), (16, 58), (13, 16), (36, 45), (34, 57), (0, 34), (57, 40), (40, 42), (57, 58), (0, 27), (11, 27), (0, 36), (11, 36), (32, 34), (0, 45), (11, 45), (57, 42), (12, 28), (27, 28), (0, 11), (11, 20), (0, 20), (12, 58), (32, 36), (57, 35), (35, 41), (45, 36), (0, 13), (11, 13), (11, 40), (0, 40), (12, 14), (42, 58), (36, 35), (11, 15), (0, 15), (0, 24), (11, 24), (11, 42), (0, 42), (32, 40), (32, 58), (20, 41), (34, 40), (11, 35), (0, 35), (32, 42), (34, 42), (19, 23), (0, 19), (11, 28), (0, 28), (12, 57), (32, 35), (16, 18), (20, 27), (0, 58), (11, 58), (45, 35), (12, 32), (11, 12), (0, 12), (23, 41), (40, 57), (13, 15)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_19'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 158, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 159, 'instruction': 'jmp\t.LBB1_17'}, {'instIndex': 160, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 161, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 162, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 163, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 164, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 166, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 167, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 169, 'instruction': 'jmp\t.LBB1_18'}, {'instIndex': 170, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 172, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 173, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB1_10'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 39 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 187 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_19'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 158, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 159, 'instruction': 'jmp\t.LBB1_17'}, {'instIndex': 160, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 161, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 162, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 163, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 164, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 166, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 167, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 169, 'instruction': 'jmp\t.LBB1_18'}, {'instIndex': 170, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 172, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 173, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB1_10'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 87 nodes and 130 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 39 instructions in binary file.
[4194513]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 87 nodes and 130 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 187 instructions in binary file.
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
The execution time of patched subCFG information extraction via angr: 0:00:01.213382
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003c3>, <DisassemblerInsn "jge" for 0x4003c6>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e0>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "add" for 0x4003eb>, <DisassemblerInsn "mov" for 0x4003ee>, <DisassemblerInsn "jmp" for 0x4003f4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f6>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400416>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "add" for 0x400426>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "add" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "jmp" for 0x40040c>]'}], 'cfg_block_detailed_info': [{'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ca>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x4003f6>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4003f8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006f0>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}], 'cfg_edge_info': [(17, 20), (28, 20), (23, 26), (22, 24), (24, 20), (26, 17), (20, 23), (17, 19), (28, 19), (15, 16), (19, 22), (25, 27), (16, 18), (22, 25), (26, 18), (27, 28), (16, 17)]}]}
{'tqi_decode_init': [4194513], 'tqi_decode_frame': [4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O0/eatqi.o---after
The extraction of function: tqi_decode_init
[4194513]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 121 nodes and 141 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194513]
{4194304, 4194402, 4194380, 4194445, 4194513, 4194365}
[5, 1, 7, 0, 2, 9]
The extraction of function: tqi_decode_frame
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 66 nodes and 94 edges in CFGEmulated.
It has 64 nodes and 89 edges in CDG.
It has 1702 nodes and 2616 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195272, 4195274, 4195296, 4195318, 4195320]
{4195072, 4194955, 4194701, 4195345, 4195198, 4194843, 4194848, 4194732, 4195245, 4195383, 4194872, 4195132, 4195391, 4195267, 4194885, 4194757, 4195272, 4195274, 4195024, 4194782, 4195296, 4194528, 4195183, 4194927, 4194672, 4195318, 4195320, 4194812, 4194942}
[26, 28, 32, 11, 27, 35, 58, 30, 46, 14, 34, 13, 64, 36, 40, 37, 49, 25, 0, 41, 16, 29, 18, 43, 23, 33, 1, 15, 39, 24, 42, 12, 20, 44, 9, 54, 57, 19, 45]
The execution time of patched slicing information extraction via angr: 0:00:06.592992
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "add" for 0x400067>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400088>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "cmp" for 0x400034>, <DisassemblerInsn "jne" for 0x40003b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfff88]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x36c], 0x15>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x36c], 0>', '<jne~~0x40004c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "jmp" for 0x400286>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "add" for 0x400175>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "je" for 0x40018b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "sub" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cqo" for 0x4002bf>, <DisassemblerInsn "idiv" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "call" for 0x4002ce>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400416>, <DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "add" for 0x400426>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x40061a>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4006f0>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071c>, <DisassemblerInsn "mov" for 0x400723>, <DisassemblerInsn "mov" for 0x400728>, <DisassemblerInsn "shl" for 0x40072e>, <DisassemblerInsn "imul" for 0x400731>, <DisassemblerInsn "movsxd" for 0x400736>, <DisassemblerInsn "add" for 0x400739>, <DisassemblerInsn "mov" for 0x40073c>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "shl" for 0x400747>, <DisassemblerInsn "movsxd" for 0x40074a>, <DisassemblerInsn "add" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "shl" for 0x40076c>, <DisassemblerInsn "mov" for 0x40076f>, <DisassemblerInsn "imul" for 0x400774>, <DisassemblerInsn "movsxd" for 0x40077b>, <DisassemblerInsn "add" for 0x40077e>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "shl" for 0x40078c>, <DisassemblerInsn "movsxd" for 0x40078f>, <DisassemblerInsn "add" for 0x400792>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "mov" for 0x40079a>, <DisassemblerInsn "mov" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007ab>, <DisassemblerInsn "shl" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b4>, <DisassemblerInsn "imul" for 0x4007b9>, <DisassemblerInsn "movsxd" for 0x4007c0>, <DisassemblerInsn "add" for 0x4007c3>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007cb>, <DisassemblerInsn "shl" for 0x4007d1>, <DisassemblerInsn "movsxd" for 0x4007d4>, <DisassemblerInsn "add" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007de>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "mov" for 0x4007ef>, <DisassemblerInsn "mov" for 0x4007f3>, <DisassemblerInsn "call" for 0x4007f8>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001dc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "call" for 0x4001aa>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "add" for 0x4008ee>, <DisassemblerInsn "ret" for 0x4008f2>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "add" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "jmp" for 0x40040c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003f6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "add" for 0x4006e9>, <DisassemblerInsn "ret" for 0x4006ed>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "add" for 0x400443>, <DisassemblerInsn "ret" for 0x400447>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "movsxd" for 0x400117>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "movzx" for 0x400151>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "movzx" for 0x400167>, <DisassemblerInsn "call" for 0x40016b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "add" for 0x400443>, <DisassemblerInsn "ret" for 0x400447>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "add" for 0x400212>, <DisassemblerInsn "call" for 0x400219>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "add" for 0x4005f2>, <DisassemblerInsn "sar" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "cmp" for 0x4005fc>, <DisassemblerInsn "jl" for 0x400601>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "jge" for 0x40021e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003c3>, <DisassemblerInsn "jge" for 0x4003c6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "jmp" for 0x400240>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b5>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "shl" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "sub" for 0x4004c4>, <DisassemblerInsn "imul" for 0x4004c6>, <DisassemblerInsn "mov" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cd>, <DisassemblerInsn "mov" for 0x4004d2>, <DisassemblerInsn "cmp" for 0x4004d6>, <DisassemblerInsn "jne" for 0x4004dd>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "call" for 0x4001f7>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400670>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "mov" for 0x400683>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "call" for 0x40068f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "cmp" for 0x400274>, <DisassemblerInsn "jne" for 0x40027c>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "cmp" for 0x4001c0>, <DisassemblerInsn "jne" for 0x4001c3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "add" for 0x40024a>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "add" for 0x400256>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "sub" for 0x400267>, <DisassemblerInsn "call" for 0x40026a>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003c8>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "ret" for 0x4005d1>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "add" for 0x4006e9>, <DisassemblerInsn "ret" for 0x4006ed>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e0>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "add" for 0x4003eb>, <DisassemblerInsn "mov" for 0x4003ee>, <DisassemblerInsn "jmp" for 0x4003f4>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "lea" for 0x40022a>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "call" for 0x400233>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "add" for 0x4003d4>, <DisassemblerInsn "call" for 0x4003db>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x40043f>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4001ac>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x2b10]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 0x3d20]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x14], 0>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~qword ptr [rsp - 0x10], 0>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x3b90]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b50]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 4>', '<imul~~ecx, dword ptr [rsp + 0x1c]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 4>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b58]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b94]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b60]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b98]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x2bd8]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x14]>', '<je~~0x4001fc>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003f6>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x220]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 64, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4003f8>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x24], 0>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~esi, byte ptr [rax + 4]>', '<call~~0x4004b0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x218]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~eax, dword ptr [rsp - 0x14]>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp - 0x18], eax>', '<cmp~~dword ptr [rsp - 0x18], 0>', '<jl~~0x40060a>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400245>']}, {'block_Idx': 43, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ca>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xffffffff>', '<jmp~~0x40043f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<shl~~ecx, 1>', '<mov~~eax, 0xd7>', '<sub~~eax, ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0x10], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x40056d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~esi, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x1790]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~rax>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3d20], 0>', '<jne~~0x40028b>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x400411>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x10]>', '<jne~~0x4001de>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<add~~rdi, 0x3d20>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d28>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<sub~~rdx, rax>', '<call~~0x500038>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x4003f6>']}, {'block_Idx': 9, 'blockInsts': ['<ret~~>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6e2]>', '<mov~~al, 0>', '<call~~0x500030>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006f0>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (14, 16), (23, 25), (34, 37), (9, 11), (54, 43), (27, 28), (58, 37), (0, 11), (45, 46), (42, 35), (36, 43), (24, 26), (33, 32), (18, 19), (43, 45), (35, 41), (12, 15), (49, 43), (14, 15), (0, 1), (34, 36), (19, 23), (36, 39), (11, 13), (28, 29), (30, 32), (58, 36), (28, 32), (15, 16), (42, 34), (45, 57), (44, 37), (32, 35), (16, 18), (26, 25), (43, 44), (12, 14), (20, 24), (40, 42), (57, 58), (11, 12), (37, 40), (13, 12), (64, 57)], 'cdg_edge_info': [(43, 37), (24, 27), (32, 34), (43, 40), (18, 23), (18, 20), (34, 37), (34, 40), (58, 37), (34, 43), (58, 40), (42, 35), (58, 43), (24, 26), (42, 41), (18, 19), (43, 42), (24, 32), (43, 45), (18, 25), (12, 15), (14, 15), (11, 16), (34, 36), (34, 42), (11, 13), (58, 36), (58, 42), (24, 25), (42, 34), (24, 28), (32, 35), (43, 44), (18, 24), (12, 14), (32, 41), (11, 12), (11, 18)], 'ddg_edge_info': [(16, 20), (13, 42), (12, 34), (0, 14), (11, 14), (34, 58), (12, 27), (12, 36), (0, 16), (11, 16), (58, 42), (13, 19), (15, 16), (19, 41), (57, 34), (16, 42), (20, 24), (13, 58), (13, 12), (57, 36), (20, 26), (11, 57), (0, 57), (12, 40), (13, 14), (16, 19), (0, 32), (0, 41), (12, 15), (20, 28), (26, 41), (32, 57), (12, 42), (40, 58), (16, 58), (13, 16), (36, 45), (34, 57), (0, 34), (57, 40), (40, 42), (57, 58), (0, 27), (11, 27), (0, 36), (11, 36), (32, 34), (0, 45), (11, 45), (57, 42), (12, 28), (27, 28), (0, 11), (11, 20), (0, 20), (12, 58), (32, 36), (57, 35), (35, 41), (45, 36), (0, 13), (11, 13), (11, 40), (0, 40), (12, 14), (42, 58), (36, 35), (11, 15), (0, 15), (0, 24), (11, 24), (11, 42), (0, 42), (32, 40), (32, 58), (20, 41), (34, 40), (11, 35), (0, 35), (32, 42), (34, 42), (19, 23), (0, 19), (11, 28), (0, 28), (12, 57), (32, 35), (16, 18), (20, 27), (0, 58), (11, 58), (45, 35), (12, 32), (11, 12), (0, 12), (23, 41), (40, 57), (13, 15)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_19'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 158, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 159, 'instruction': 'jmp\t.LBB1_17'}, {'instIndex': 160, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 161, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 162, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 163, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 164, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 165, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 166, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 167, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 168, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 169, 'instruction': 'jmp\t.LBB1_18'}, {'instIndex': 170, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 171, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 172, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 173, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 174, 'instruction': 'jmp\t.LBB1_10'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 449 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 196, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 197, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 198, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 199, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 200, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 201, 'instruction': 'movq\t%rdx, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 203, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 204, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 268, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 269, 'instruction': 'jle\t.LBB1_22'}, {'instIndex': 304, 'instruction': 'testb\t$1, %al'}, {'instIndex': 305, 'instruction': 'jne\t.LBB1_22'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB1_19'}, {'instIndex': 407, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 408, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 409, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 411, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 412, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 413, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 414, 'instruction': 'cltd'}, {'instIndex': 415, 'instruction': 'idivl\t%ecx'}, {'instIndex': 416, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 417, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 418, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 419, 'instruction': 'jl\t.LBB1_16'}, {'instIndex': 422, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 423, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 424, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 426, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 427, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 428, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 429, 'instruction': 'cltd'}, {'instIndex': 430, 'instruction': 'idivl\t%ecx'}, {'instIndex': 431, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 432, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 433, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 434, 'instruction': 'jl\t.LBB1_15'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 62 nodes and 99 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 62 nodes and 99 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 449 instructions in binary file.
[4195421, 4195638, 4196000, 4196163, 4196175, 4196627, 4196681]
The execution time of patched subCFG information extraction via angr: 0:00:01.396430
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400779>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x400791>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a3>, <DisassemblerInsn "mov" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007ad>, <DisassemblerInsn "shl" for 0x4007af>, <DisassemblerInsn "imul" for 0x4007b2>, <DisassemblerInsn "movsxd" for 0x4007b6>, <DisassemblerInsn "add" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007bc>, <DisassemblerInsn "mov" for 0x4007bf>, <DisassemblerInsn "shl" for 0x4007c2>, <DisassemblerInsn "movsxd" for 0x4007c5>, <DisassemblerInsn "add" for 0x4007c8>, <DisassemblerInsn "mov" for 0x4007cb>, <DisassemblerInsn "mov" for 0x4007d0>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "shl" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "mov" for 0x4007e1>, <DisassemblerInsn "mov" for 0x4007e4>, <DisassemblerInsn "shl" for 0x4007e9>, <DisassemblerInsn "movsxd" for 0x4007ed>, <DisassemblerInsn "mov" for 0x4007f0>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "call" for 0x400803>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "mov" for 0x400995>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "call" for 0x4009a0>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "test" for 0x400747>, <DisassemblerInsn "jne" for 0x400749>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041d>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "cqo" for 0x400449>, <DisassemblerInsn "idiv" for 0x40044b>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "call" for 0x40045b>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40074f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400702>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "shr" for 0x400709>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "test" for 0x400714>, <DisassemblerInsn "sets" for 0x400716>, <DisassemblerInsn "add" for 0x400719>, <DisassemblerInsn "mov" for 0x40071d>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "sub" for 0x400725>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "sete" for 0x40072e>, <DisassemblerInsn "or" for 0x400731>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "test" for 0x400737>, <DisassemblerInsn "mov" for 0x40073a>, <DisassemblerInsn "jne" for 0x40073f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "add" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "add" for 0x400558>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400567>, <DisassemblerInsn "add" for 0x40056a>, <DisassemblerInsn "add" for 0x400571>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "add" for 0x400580>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "add" for 0x400592>, <DisassemblerInsn "add" for 0x400599>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005ba>, <DisassemblerInsn "add" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "add" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "add" for 0x4005fc>, <DisassemblerInsn "add" for 0x400603>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "add" for 0x400612>, <DisassemblerInsn "add" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "add" for 0x40062b>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "add" for 0x400644>, <DisassemblerInsn "add" for 0x40064b>, <DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "add" for 0x40065d>, <DisassemblerInsn "add" for 0x400664>, <DisassemblerInsn "mov" for 0x40066b>, <DisassemblerInsn "mov" for 0x400673>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "add" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "add" for 0x40068c>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400877>, <DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "and" for 0x400885>, <DisassemblerInsn "cmp" for 0x40088a>, <DisassemblerInsn "jne" for 0x40088d>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400913>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "add" for 0x400925>, <DisassemblerInsn "mov" for 0x400928>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "add" for 0x400930>, <DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "cdq" for 0x400938>, <DisassemblerInsn "idiv" for 0x400939>, <DisassemblerInsn "mov" for 0x40093b>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "cmp" for 0x400941>, <DisassemblerInsn "jl" for 0x400943>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400949>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "add" for 0x40095b>, <DisassemblerInsn "mov" for 0x40095e>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "add" for 0x400965>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "cdq" for 0x40096d>, <DisassemblerInsn "idiv" for 0x40096e>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "cmp" for 0x400975>, <DisassemblerInsn "jl" for 0x400977>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008ff>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "mov" for 0x40090f>, <DisassemblerInsn "call" for 0x400911>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bf>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "call" for 0x4006cf>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "shl" for 0x400483>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "sar" for 0x40048a>, <DisassemblerInsn "xor" for 0x40048d>, <DisassemblerInsn "cmp" for 0x40048f>, <DisassemblerInsn "cmovl" for 0x400493>, <DisassemblerInsn "xor" for 0x400497>, <DisassemblerInsn "cmp" for 0x40049a>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "cmovl" for 0x4004a1>, <DisassemblerInsn "xor" for 0x4004a5>, <DisassemblerInsn "cmp" for 0x4004a8>, <DisassemblerInsn "cmovl" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b7>, <DisassemblerInsn "add" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "movsxd" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004fb>, <DisassemblerInsn "add" for 0x4004fe>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400517>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "cmp" for 0x400529>, <DisassemblerInsn "jle" for 0x400530>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~r8, qword ptr [rsp + 0xc0]>', '<mov~~r10, qword ptr [rsp + 0xb8]>', '<mov~~rbx, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0x80]>', '<mov~~r11, qword ptr [rsp + 0x108]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x10], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x18], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x1c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x20], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x28], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x5f]>', '<test~~al, 1>', '<jne~~0x400949>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400949>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x400751>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~edx, ecx>', '<shr~~edx, 0x1f>', '<mov~~dword ptr [rsp + 0x58], edx>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<test~~ecx, ecx>', '<sets~~cl>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rdx, rax>', '<sub~~rdx, 6>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<sete~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x77], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x78], rax>', '<jne~~0x400743>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400949>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x400913>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x4006bf>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006a0>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x40097d>']}], 'cfg_edge_info': [(38, 23), (25, 23), (39, 38), (29, 23), (23, 20), (19, 20), (18, 19), (31, 32), (25, 24), (23, 25), (27, 29), (21, 24), (29, 31), (38, 24), (36, 38), (19, 21), (21, 23)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4195421, 4195638, 4196000, 4196163, 4196175, 4196627, 4196681]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O1/eatqi.o---after
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4195421, 4195638, 4196000, 4196163, 4196175, 4196627, 4196681]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 46 nodes and 68 edges in CFGEmulated.
It has 46 nodes and 67 edges in CDG.
It has 1642 nodes and 2382 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195421, 4195638, 4196000, 4196163, 4196175, 4196627, 4196681]
{4196096, 4195202, 4196357, 4196627, 4196499, 4195349, 4194837, 4194712, 4194973, 4195229, 4196000, 4196773, 4196391, 4195116, 4195246, 4196787, 4195638, 4194875, 4196733, 4196031, 4194496, 4196161, 4196163, 4195142, 4196681, 4196175, 4196049, 4196177, 4196437, 4195029, 4196056, 4195421, 4194658, 4195172, 4195304, 4195054, 4196591, 4196471, 4195197}
[18, 44, 45, 39, 24, 13, 20, 36, 21, 29, 23, 43, 22, 19, 15, 9, 32, 33, 26, 3, 0, 1, 35, 14, 30, 34, 11, 38, 5, 27, 6, 8, 7, 10, 4, 41, 42, 40, 2, 28]
The execution time of patched slicing information extraction via angr: 0:00:04.965125
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039d>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "jmp" for 0x4003a9>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400913>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "add" for 0x400925>, <DisassemblerInsn "mov" for 0x400928>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x40092e>, <DisassemblerInsn "add" for 0x400930>, <DisassemblerInsn "mov" for 0x400933>, <DisassemblerInsn "cdq" for 0x400938>, <DisassemblerInsn "idiv" for 0x400939>, <DisassemblerInsn "mov" for 0x40093b>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "cmp" for 0x400941>, <DisassemblerInsn "jl" for 0x400943>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008ff>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "mov" for 0x40090f>, <DisassemblerInsn "call" for 0x400911>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "mov" for 0x400812>, <DisassemblerInsn "mov" for 0x40081a>, <DisassemblerInsn "mov" for 0x40081e>, <DisassemblerInsn "add" for 0x400821>, <DisassemblerInsn "call" for 0x400825>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "add" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "add" for 0x400558>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400567>, <DisassemblerInsn "add" for 0x40056a>, <DisassemblerInsn "add" for 0x400571>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "add" for 0x400580>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "add" for 0x400592>, <DisassemblerInsn "add" for 0x400599>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005ba>, <DisassemblerInsn "add" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "add" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "add" for 0x4005fc>, <DisassemblerInsn "add" for 0x400603>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "add" for 0x400612>, <DisassemblerInsn "add" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "add" for 0x40062b>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "add" for 0x400644>, <DisassemblerInsn "add" for 0x40064b>, <DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "add" for 0x40065d>, <DisassemblerInsn "add" for 0x400664>, <DisassemblerInsn "mov" for 0x40066b>, <DisassemblerInsn "mov" for 0x400673>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "add" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "add" for 0x40068c>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40037d>, <DisassemblerInsn "jge" for 0x400380>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "add" for 0x4009ba>, <DisassemblerInsn "pop" for 0x4009c1>, <DisassemblerInsn "pop" for 0x4009c2>, <DisassemblerInsn "pop" for 0x4009c4>, <DisassemblerInsn "ret" for 0x4009c5>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40074f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041d>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "cqo" for 0x400449>, <DisassemblerInsn "idiv" for 0x40044b>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "call" for 0x40045b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097d>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "mov" for 0x40098d>, <DisassemblerInsn "mov" for 0x400995>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "call" for 0x4009a0>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x4008a3>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "mov" for 0x4008b0>, <DisassemblerInsn "mov" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "mov" for 0x4008bf>, <DisassemblerInsn "mov" for 0x4008c4>, <DisassemblerInsn "imul" for 0x4008c9>, <DisassemblerInsn "movsxd" for 0x4008cd>, <DisassemblerInsn "add" for 0x4008d0>, <DisassemblerInsn "add" for 0x4008d3>, <DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "imul" for 0x4008db>, <DisassemblerInsn "movsxd" for 0x4008df>, <DisassemblerInsn "add" for 0x4008e2>, <DisassemblerInsn "add" for 0x4008e5>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "mov" for 0x4008eb>, <DisassemblerInsn "call" for 0x4008ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "shl" for 0x400483>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "sar" for 0x40048a>, <DisassemblerInsn "xor" for 0x40048d>, <DisassemblerInsn "cmp" for 0x40048f>, <DisassemblerInsn "cmovl" for 0x400493>, <DisassemblerInsn "xor" for 0x400497>, <DisassemblerInsn "cmp" for 0x40049a>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "cmovl" for 0x4004a1>, <DisassemblerInsn "xor" for 0x4004a5>, <DisassemblerInsn "cmp" for 0x4004a8>, <DisassemblerInsn "cmovl" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b7>, <DisassemblerInsn "add" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "movsxd" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004fb>, <DisassemblerInsn "add" for 0x4004fe>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400517>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "cmp" for 0x400529>, <DisassemblerInsn "jle" for 0x400530>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "cmp" for 0x400404>, <DisassemblerInsn "mov" for 0x400408>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ae>, <DisassemblerInsn "mov" for 0x4003b6>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "add" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003d0>, <DisassemblerInsn "add" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "cmp" for 0x400342>, <DisassemblerInsn "je" for 0x400344>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400702>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "shr" for 0x400709>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "test" for 0x400714>, <DisassemblerInsn "sets" for 0x400716>, <DisassemblerInsn "add" for 0x400719>, <DisassemblerInsn "mov" for 0x40071d>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "sub" for 0x400725>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "sete" for 0x40072e>, <DisassemblerInsn "or" for 0x400731>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "test" for 0x400737>, <DisassemblerInsn "mov" for 0x40073a>, <DisassemblerInsn "jne" for 0x40073f>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400741>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400949>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "add" for 0x40095b>, <DisassemblerInsn "mov" for 0x40095e>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400963>, <DisassemblerInsn "add" for 0x400965>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "cdq" for 0x40096d>, <DisassemblerInsn "idiv" for 0x40096e>, <DisassemblerInsn "mov" for 0x400970>, <DisassemblerInsn "mov" for 0x400972>, <DisassemblerInsn "cmp" for 0x400975>, <DisassemblerInsn "jl" for 0x400977>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400213>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "add" for 0x400118>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "movzx" for 0x400127>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "movzx" for 0x40013d>, <DisassemblerInsn "imul" for 0x400141>, <DisassemblerInsn "add" for 0x400144>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "cmp" for 0x400155>, <DisassemblerInsn "jne" for 0x40015c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "movzx" for 0x400171>, <DisassemblerInsn "mov" for 0x400174>, <DisassemblerInsn "movzx" for 0x40017b>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "shr" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x40018b>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "movzx" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "movzx" for 0x4001c1>, <DisassemblerInsn "imul" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "imul" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "shr" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "add" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "cmp" for 0x400201>, <DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "je" for 0x40020d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "shl" for 0x4006ed>, <DisassemblerInsn "lea" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "call" for 0x4006fb>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "lea" for 0x40038f>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "call" for 0x400398>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4006d1>, <DisassemblerInsn "mov" for 0x4006d3>, <DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "shl" for 0x4006ed>, <DisassemblerInsn "lea" for 0x4006f1>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "call" for 0x4006fb>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400743>, <DisassemblerInsn "test" for 0x400747>, <DisassemblerInsn "jne" for 0x400749>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400364>, <DisassemblerInsn "mov" for 0x40036c>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "call" for 0x400377>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400779>, <DisassemblerInsn "mov" for 0x400781>, <DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x400791>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a3>, <DisassemblerInsn "mov" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007ad>, <DisassemblerInsn "shl" for 0x4007af>, <DisassemblerInsn "imul" for 0x4007b2>, <DisassemblerInsn "movsxd" for 0x4007b6>, <DisassemblerInsn "add" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007bc>, <DisassemblerInsn "mov" for 0x4007bf>, <DisassemblerInsn "shl" for 0x4007c2>, <DisassemblerInsn "movsxd" for 0x4007c5>, <DisassemblerInsn "add" for 0x4007c8>, <DisassemblerInsn "mov" for 0x4007cb>, <DisassemblerInsn "mov" for 0x4007d0>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "shl" for 0x4007d8>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "mov" for 0x4007e1>, <DisassemblerInsn "mov" for 0x4007e4>, <DisassemblerInsn "shl" for 0x4007e9>, <DisassemblerInsn "movsxd" for 0x4007ed>, <DisassemblerInsn "mov" for 0x4007f0>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "call" for 0x400803>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "movzx" for 0x400259>, <DisassemblerInsn "imul" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "add" for 0x400267>, <DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "shr" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "add" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "cmp" for 0x40028f>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bf>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "call" for 0x4006cf>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "movzx" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "movzx" for 0x4001c1>, <DisassemblerInsn "imul" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "imul" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "shr" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "add" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "cmp" for 0x400201>, <DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "je" for 0x40020d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002e8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030d>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "mov" for 0x40031f>, <DisassemblerInsn "mov" for 0x400321>, <DisassemblerInsn "cmp" for 0x400328>, <DisassemblerInsn "jne" for 0x40032a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x40035f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a5>, <DisassemblerInsn "add" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "cmp" for 0x4002cb>, <DisassemblerInsn "je" for 0x4002d3>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400855>, <DisassemblerInsn "mov" for 0x40085d>, <DisassemblerInsn "mov" for 0x400862>, <DisassemblerInsn "mov" for 0x400866>, <DisassemblerInsn "mov" for 0x40086e>, <DisassemblerInsn "add" for 0x400871>, <DisassemblerInsn "call" for 0x400875>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400877>, <DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "and" for 0x400885>, <DisassemblerInsn "cmp" for 0x40088a>, <DisassemblerInsn "jne" for 0x40088d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400827>, <DisassemblerInsn "mov" for 0x40082c>, <DisassemblerInsn "mov" for 0x400834>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400840>, <DisassemblerInsn "mov" for 0x400843>, <DisassemblerInsn "shl" for 0x400845>, <DisassemblerInsn "movsxd" for 0x400848>, <DisassemblerInsn "add" for 0x40084b>, <DisassemblerInsn "mov" for 0x40084e>, <DisassemblerInsn "call" for 0x400853>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "movzx" for 0x400259>, <DisassemblerInsn "imul" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "add" for 0x400267>, <DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "shr" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "add" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "cmp" for 0x40028f>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "mov" for 0x4009ac>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "add" for 0x4009ba>, <DisassemblerInsn "pop" for 0x4009c1>, <DisassemblerInsn "pop" for 0x4009c2>, <DisassemblerInsn "pop" for 0x4009c4>, <DisassemblerInsn "ret" for 0x4009c5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jmp~~0x4009b3>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x4006bf>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400949>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ae>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x400751>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400949>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~r9d, dword ptr [rsp + 0x18]>', '<mov~~r8d, dword ptr [rsp + 0x1c]>', '<mov~~r10, qword ptr [rsp + 0x28]>', '<mov~~r11d, dword ptr [rsp + 0x34]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 8], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x40097d>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x134], eax>', '<je~~0x4009b3>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<call~~0x500058>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x400364>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~edx, ecx>', '<shr~~edx, 0x1f>', '<mov~~dword ptr [rsp + 0x58], edx>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<test~~ecx, ecx>', '<sets~~cl>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rdx, rax>', '<sub~~rdx, 6>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<sete~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x77], cl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x78], rax>', '<jne~~0x400743>']}, {'block_Idx': 33, 'blockInsts': ['<jmp~~0x4006d8>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006a0>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x400198>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1f0>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400215>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rip + 0xffebf]>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rcx, qword ptr [rip + 0xffec5]>', '<movzx~~ecx, word ptr [rcx]>', '<imul~~ecx, edx>', '<shr~~ecx, 0xb>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x198], rax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffe7a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe7f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x180], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x184], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x188], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x198], rax>', '<je~~0x40029d>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<lea~~rsi, [rdi + rcx + 0x3d30]>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6ae]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 30, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<lea~~rsi, [rdi + rcx + 0x3d30]>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x5f]>', '<test~~al, 1>', '<jne~~0x400949>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~r8, qword ptr [rsp + 0xc0]>', '<mov~~r10, qword ptr [rsp + 0xb8]>', '<mov~~rbx, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0x80]>', '<mov~~r11, qword ptr [rsp + 0x108]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x10], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x18], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x1c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x20], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x28], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffde7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x40023b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffe7a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe7f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x180], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x184], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x188], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x198], rax>', '<je~~0x40029d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, rax>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<cmp~~eax, ecx>', '<jne~~0x400346>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x14c]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500048>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4002ee>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x400913>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<call~~rax>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rip + 0xffe1c]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffde7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x40023b>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (29, 26), (5, 4), (21, 22), (22, 23), (0, 2), (23, 28), (40, 41), (9, 11), (2, 5), (19, 21), (1, 3), (13, 14), (44, 26), (7, 10), (24, 26), (32, 33), (35, 32), (26, 23), (33, 35), (41, 42), (42, 44), (26, 29), (43, 45), (4, 8), (3, 6), (14, 18), (9, 10), (0, 1), (2, 4), (10, 11), (34, 36), (27, 30), (11, 13), (19, 20), (30, 32), (6, 4), (7, 9), (15, 19), (42, 43), (4, 7), (29, 27), (5, 5), (38, 39), (22, 24), (39, 40), (34, 26), (8, 7), (1, 4), (45, 44), (36, 38), (13, 15), (6, 3), (44, 27)], 'cdg_edge_info': [(42, 45), (29, 26), (22, 23), (29, 32), (0, 2), (22, 32), (1, 6), (2, 5), (19, 21), (34, 40), (13, 14), (44, 26), (7, 10), (24, 26), (26, 23), (32, 33), (44, 32), (13, 20), (42, 44), (26, 29), (4, 8), (4, 11), (29, 34), (22, 28), (0, 1), (9, 10), (34, 36), (34, 42), (22, 34), (19, 20), (34, 39), (13, 19), (7, 9), (32, 32), (32, 35), (42, 43), (44, 34), (26, 28), (4, 7), (29, 30), (29, 27), (5, 5), (4, 13), (22, 27), (34, 26), (22, 30), (22, 24), (34, 38), (19, 22), (34, 41), (13, 18), (6, 6), (13, 15), (44, 30), (44, 27)], 'ddg_edge_info': [(15, 21), (44, 45), (1, 40), (26, 39), (2, 39), (5, 10), (22, 26), (8, 9), (0, 5), (40, 41), (5, 19), (29, 41), (11, 14), (0, 14), (22, 44), (2, 11), (0, 23), (6, 11), (7, 10), (35, 26), (41, 42), (44, 38), (18, 28), (24, 44), (1, 42), (2, 41), (8, 11), (0, 7), (2, 4), (5, 21), (6, 41), (4, 23), (29, 43), (1, 8), (5, 39), (6, 4), (41, 26), (1, 26), (41, 44), (44, 40), (1, 44), (2, 43), (29, 27), (45, 23), (38, 39), (29, 45), (6, 43), (22, 39), (0, 9), (1, 10), (1, 19), (2, 27), (44, 42), (2, 45), (6, 27), (5, 7), (38, 41), (29, 38), (0, 2), (6, 45), (14, 28), (44, 26), (1, 21), (35, 23), (35, 32), (1, 39), (2, 38), (5, 9), (4, 11), (21, 27), (26, 41), (29, 40), (38, 43), (6, 38), (41, 23), (7, 9), (2, 22), (2, 40), (6, 22), (5, 11), (22, 27), (21, 29), (26, 43), (29, 42), (6, 40), (34, 32), (1, 7), (5, 41), (32, 34), (2, 42), (29, 26), (5, 4), (26, 27), (24, 39), (21, 22), (23, 28), (29, 44), (26, 45), (6, 42), (1, 9), (0, 11), (2, 8), (22, 41), (2, 26), (6, 8), (5, 43), (6, 26), (43, 45), (4, 8), (24, 41), (26, 38), (14, 18), (38, 40), (21, 24), (6, 44), (45, 27), (0, 4), (27, 30), (11, 13), (1, 11), (5, 27), (22, 43), (2, 10), (0, 22), (2, 19), (30, 35), (5, 45), (6, 10), (15, 22), (6, 19), (35, 34), (24, 43), (1, 41), (26, 40), (21, 26), (8, 10), (45, 29), (1, 4), (0, 6), (11, 15), (0, 15), (22, 45), (19, 28), (0, 24), (2, 21), (5, 38), (35, 27), (41, 43), (24, 27), (6, 21), (44, 39), (1, 43), (26, 42), (24, 45), (6, 39), (4, 21), (1, 6), (0, 8), (5, 22), (22, 38), (2, 5), (19, 21), (41, 27), (5, 40), (0, 35), (24, 29), (1, 27), (35, 29), (44, 41), (35, 38), (24, 38), (1, 45), (26, 44), (2, 44), (0, 1), (10, 11), (0, 10), (2, 7), (22, 40), (0, 19), (0, 28), (41, 29), (5, 42), (6, 7), (15, 19), (32, 35), (15, 28), (44, 43), (24, 40), (21, 23), (1, 38), (5, 8), (45, 26), (39, 40), (7, 42), (29, 39), (8, 7), (5, 26), (45, 44), (22, 42), (2, 9), (0, 21), (5, 44), (6, 9), (44, 27), (1, 22)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 196, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 197, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 198, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 199, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 200, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 201, 'instruction': 'movq\t%rdx, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 203, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 204, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 268, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 269, 'instruction': 'jle\t.LBB1_22'}, {'instIndex': 304, 'instruction': 'testb\t$1, %al'}, {'instIndex': 305, 'instruction': 'jne\t.LBB1_22'}, {'instIndex': 306, 'instruction': 'jmp\t.LBB1_19'}, {'instIndex': 407, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 408, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 409, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 411, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 412, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 413, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 414, 'instruction': 'cltd'}, {'instIndex': 415, 'instruction': 'idivl\t%ecx'}, {'instIndex': 416, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 417, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 418, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 419, 'instruction': 'jl\t.LBB1_16'}, {'instIndex': 422, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 423, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 424, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 426, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 427, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 428, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 429, 'instruction': 'cltd'}, {'instIndex': 430, 'instruction': 'idivl\t%ecx'}, {'instIndex': 431, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 432, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 433, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 434, 'instruction': 'jl\t.LBB1_15'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 1057 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_32'}, {'instIndex': 864, 'instruction': 'cmpl\t$0, (%rdx)'}, {'instIndex': 865, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 866, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'jle\t.LBB1_31'}, {'instIndex': 905, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 906, 'instruction': 'jl\t.LBB1_30'}, {'instIndex': 1007, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1008, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1009, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 1011, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1012, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1013, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1014, 'instruction': 'cltd'}, {'instIndex': 1015, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1016, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1018, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1019, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1022, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1023, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1024, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 1025, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1029, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1030, 'instruction': 'movl\t%edx, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 1032, 'instruction': 'movl\t%ecx, %eax'}, {'instIndex': 1033, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1034, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1035, 'instruction': 'cltd'}, {'instIndex': 1036, 'instruction': 'idivl\t%esi'}, {'instIndex': 1037, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 1038, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 1039, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 1040, 'instruction': 'movl\t%ecx, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1041, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1042, 'instruction': 'jl\t.LBB1_20'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 137 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 137 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1057 instructions in binary file.
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
The execution time of patched subCFG information extraction via angr: 0:00:01.765475
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "add" for 0x401433>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "add" for 0x40143e>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "cdq" for 0x401446>, <DisassemblerInsn "idiv" for 0x401447>, <DisassemblerInsn "mov" for 0x401449>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "cmp" for 0x40144f>, <DisassemblerInsn "jl" for 0x401451>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40121c>, <DisassemblerInsn "jl" for 0x40121f>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40123f>, <DisassemblerInsn "jl" for 0x401242>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011b9>, <DisassemblerInsn "jl" for 0x4011bc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "add" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "add" for 0x40103e>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "mov" for 0x401051>, <DisassemblerInsn "add" for 0x401054>, <DisassemblerInsn "add" for 0x40105b>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "add" for 0x40106d>, <DisassemblerInsn "add" for 0x401074>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "mov" for 0x401083>, <DisassemblerInsn "add" for 0x401086>, <DisassemblerInsn "add" for 0x40108d>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "add" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a3>, <DisassemblerInsn "mov" for 0x4010ab>, <DisassemblerInsn "add" for 0x4010ae>, <DisassemblerInsn "mov" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "add" for 0x4010c7>, <DisassemblerInsn "mov" for 0x4010cb>, <DisassemblerInsn "mov" for 0x4010d3>, <DisassemblerInsn "add" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010dd>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "add" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010fb>, <DisassemblerInsn "add" for 0x4010fe>, <DisassemblerInsn "add" for 0x401105>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "add" for 0x401114>, <DisassemblerInsn "add" for 0x40111b>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "add" for 0x40112a>, <DisassemblerInsn "add" for 0x401131>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "xor" for 0x401151>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011d9>, <DisassemblerInsn "jl" for 0x4011dc>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "call" for 0x40125d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401400>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x401410>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141d>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "call" for 0x401422>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011f9>, <DisassemblerInsn "jl" for 0x4011fc>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128b>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "shl" for 0x4012c6>, <DisassemblerInsn "imul" for 0x4012c9>, <DisassemblerInsn "movsxd" for 0x4012cd>, <DisassemblerInsn "add" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d3>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "shl" for 0x4012d9>, <DisassemblerInsn "movsxd" for 0x4012dc>, <DisassemblerInsn "add" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "shl" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "shl" for 0x401300>, <DisassemblerInsn "movsxd" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "call" for 0x40131a>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "call" for 0x4011a0>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b5>, <DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d3>, <DisassemblerInsn "call" for 0x4014d8>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401393>, <DisassemblerInsn "and" for 0x401396>, <DisassemblerInsn "cmp" for 0x40139b>, <DisassemblerInsn "jne" for 0x40139e>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401262>, <DisassemblerInsn "jl" for 0x401265>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x401193>']}, {'block_Idx': 46, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 48, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 39, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~rsi, rax>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3d30>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x40>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x44>', '<mov~~qword ptr [rsp + 0xc0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<add~~rax, 0x1728>', '<add~~rax, 0x14b0>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x138]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<jle~~0x4014b5>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 44, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~r8, qword ptr [rsp + 0xc8]>', '<mov~~r10, qword ptr [rsp + 0xc0]>', '<mov~~rbx, qword ptr [rsp + 0xb8]>', '<mov~~r9, qword ptr [rsp + 0x60]>', '<mov~~r11, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x54], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x18], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x20], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x24], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x28], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x30], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401424>']}, {'block_Idx': 50, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}], 'cfg_edge_info': [(55, 57), (32, 34), (57, 36), (49, 50), (37, 36), (50, 51), (40, 31), (40, 37), (37, 35), (34, 36), (30, 32), (42, 40), (44, 40), (58, 57), (35, 37), (35, 31), (57, 40), (29, 30), (46, 40), (48, 40), (39, 40), (34, 35), (30, 31), (50, 40)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O2/eatqi.o---after
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 111 edges in CFGEmulated.
It has 74 nodes and 106 edges in CDG.
It has 4823 nodes and 6838 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
{4199424, 4194688, 4198914, 4195449, 4197639, 4199304, 4195849, 4198154, 4197905, 4198803, 4198037, 4196248, 4196506, 4199196, 4198940, 4198818, 4199460, 4199332, 4198949, 4194853, 4197930, 4196652, 4197935, 4196400, 4199605, 4198841, 4196538, 4199227, 4197051, 4198975, 4194496, 4197824, 4198082, 4198850, 4197445, 4194885, 4198984, 4197962, 4196560, 4197843, 4199511, 4198873, 4197979, 4194907, 4199645, 4197725, 4198753, 4199010, 4198882, 4199270, 4199019, 4198380, 4199659, 4195051, 4199539, 4197750, 4197878, 4198905, 4198780}
[40, 57, 22, 30, 10, 67, 6, 29, 5, 69, 27, 3, 44, 1, 58, 13, 70, 60, 12, 2, 15, 43, 74, 35, 0, 41, 18, 36, 32, 68, 61, 45, 28, 20, 16, 63, 7, 24, 4, 38, 71, 21, 47, 48, 17, 54, 55, 14, 50, 39, 23, 64, 66, 25, 46, 51, 19, 11, 31, 37, 72, 52, 8, 9, 73]
The execution time of patched slicing information extraction via angr: 0:00:07.933907
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b5>, <DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d3>, <DisassemblerInsn "call" for 0x4014d8>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011f9>, <DisassemblerInsn "jl" for 0x4011fc>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e21>, <DisassemblerInsn "call" for 0x400e24>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e2a>, <DisassemblerInsn "jge" for 0x400e2d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128b>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "shl" for 0x4012c6>, <DisassemblerInsn "imul" for 0x4012c9>, <DisassemblerInsn "movsxd" for 0x4012cd>, <DisassemblerInsn "add" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d3>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "shl" for 0x4012d9>, <DisassemblerInsn "movsxd" for 0x4012dc>, <DisassemblerInsn "add" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "shl" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "shl" for 0x401300>, <DisassemblerInsn "movsxd" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "call" for 0x40131a>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d92>, <DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "movd" for 0x4008a9>, <DisassemblerInsn "pshufd" for 0x4008ad>, <DisassemblerInsn "movaps" for 0x4008b2>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40133b>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "shl" for 0x401356>, <DisassemblerInsn "movsxd" for 0x401359>, <DisassemblerInsn "add" for 0x40135c>, <DisassemblerInsn "mov" for 0x40135f>, <DisassemblerInsn "call" for 0x401364>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movd" for 0x400234>, <DisassemblerInsn "pshufd" for 0x400238>, <DisassemblerInsn "movaps" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014dd>, <DisassemblerInsn "mov" for 0x4014e4>, <DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "add" for 0x4014f2>, <DisassemblerInsn "pop" for 0x4014f9>, <DisassemblerInsn "pop" for 0x4014fa>, <DisassemblerInsn "pop" for 0x4014fc>, <DisassemblerInsn "ret" for 0x4014fd>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400180>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "movzx" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movzx" for 0x400199>, <DisassemblerInsn "imul" for 0x40019c>, <DisassemblerInsn "shr" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "add" for 0x4001b2>, <DisassemblerInsn "add" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "setb" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "add" for 0x4001d8>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "seta" for 0x4001df>, <DisassemblerInsn "and" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "add" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "setb" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x400201>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "seta" for 0x400208>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "or" for 0x40020d>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x40120a>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "call" for 0x401217>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401366>, <DisassemblerInsn "mov" for 0x40136e>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "mov" for 0x40137f>, <DisassemblerInsn "add" for 0x401382>, <DisassemblerInsn "call" for 0x401386>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40121c>, <DisassemblerInsn "jl" for 0x40121f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083f>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "add" for 0x40084c>, <DisassemblerInsn "add" for 0x400853>, <DisassemblerInsn "add" for 0x400857>, <DisassemblerInsn "mov" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "cmp" for 0x40086b>, <DisassemblerInsn "setb" for 0x40086e>, <DisassemblerInsn "mov" for 0x400871>, <DisassemblerInsn "add" for 0x400878>, <DisassemblerInsn "cmp" for 0x40087c>, <DisassemblerInsn "seta" for 0x40087f>, <DisassemblerInsn "and" for 0x400882>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "test" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "jne" for 0x400894>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "mov" for 0x400d65>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "call" for 0x400d70>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401400>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x401410>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141d>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "call" for 0x401422>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "jmp" for 0x400e56>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "add" for 0x400135>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "movzx" for 0x400144>, <DisassemblerInsn "imul" for 0x400148>, <DisassemblerInsn "add" for 0x40014b>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "add" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "add" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "add" for 0x40103e>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "mov" for 0x401051>, <DisassemblerInsn "add" for 0x401054>, <DisassemblerInsn "add" for 0x40105b>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "add" for 0x40106d>, <DisassemblerInsn "add" for 0x401074>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "mov" for 0x401083>, <DisassemblerInsn "add" for 0x401086>, <DisassemblerInsn "add" for 0x40108d>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "add" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a3>, <DisassemblerInsn "mov" for 0x4010ab>, <DisassemblerInsn "add" for 0x4010ae>, <DisassemblerInsn "mov" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "add" for 0x4010c7>, <DisassemblerInsn "mov" for 0x4010cb>, <DisassemblerInsn "mov" for 0x4010d3>, <DisassemblerInsn "add" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010dd>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "add" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010fb>, <DisassemblerInsn "add" for 0x4010fe>, <DisassemblerInsn "add" for 0x401105>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "add" for 0x401114>, <DisassemblerInsn "add" for 0x40111b>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "add" for 0x40112a>, <DisassemblerInsn "add" for 0x401131>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "xor" for 0x401151>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "cmp" for 0x400deb>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "je" for 0x400df4>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea4>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "cmp" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "je" for 0x400ebc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "add" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e88>, <DisassemblerInsn "call" for 0x400e90>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40131c>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "add" for 0x401335>, <DisassemblerInsn "call" for 0x401339>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401225>, <DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "mov" for 0x401235>, <DisassemblerInsn "call" for 0x40123a>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>, <DisassemblerInsn "pshufd" for 0x400a5e>, <DisassemblerInsn "movaps" for 0x400a63>, <DisassemblerInsn "pmuludq" for 0x400a66>, <DisassemblerInsn "pshufd" for 0x400a6a>, <DisassemblerInsn "punpckldq" for 0x400a6f>, <DisassemblerInsn "movaps" for 0x400a73>, <DisassemblerInsn "pmuludq" for 0x400a76>, <DisassemblerInsn "pshufd" for 0x400a7a>, <DisassemblerInsn "pshufd" for 0x400a7f>, <DisassemblerInsn "movaps" for 0x400a84>, <DisassemblerInsn "pmuludq" for 0x400a87>, <DisassemblerInsn "pshufd" for 0x400a8b>, <DisassemblerInsn "punpckldq" for 0x400a90>, <DisassemblerInsn "paddd" for 0x400a94>, <DisassemblerInsn "paddd" for 0x400a98>, <DisassemblerInsn "pslld" for 0x400a9c>, <DisassemblerInsn "psrad" for 0x400aa1>, <DisassemblerInsn "pslld" for 0x400aa6>, <DisassemblerInsn "psrad" for 0x400aab>, <DisassemblerInsn "packssdw" for 0x400ab0>, <DisassemblerInsn "movups" for 0x400ab4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40123f>, <DisassemblerInsn "jl" for 0x401242>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400abb>, <DisassemblerInsn "movaps" for 0x400abf>, <DisassemblerInsn "punpcklwd" for 0x400ac2>, <DisassemblerInsn "punpckhwd" for 0x400ac6>, <DisassemblerInsn "movaps" for 0x400aca>, <DisassemblerInsn "pmuludq" for 0x400acd>, <DisassemblerInsn "pshufd" for 0x400ad1>, <DisassemblerInsn "pshufd" for 0x400ad6>, <DisassemblerInsn "movaps" for 0x400adb>, <DisassemblerInsn "pmuludq" for 0x400ade>, <DisassemblerInsn "pshufd" for 0x400ae2>, <DisassemblerInsn "punpckldq" for 0x400ae7>, <DisassemblerInsn "movaps" for 0x400aeb>, <DisassemblerInsn "pmuludq" for 0x400aee>, <DisassemblerInsn "pshufd" for 0x400af2>, <DisassemblerInsn "pshufd" for 0x400af7>, <DisassemblerInsn "movaps" for 0x400afc>, <DisassemblerInsn "pmuludq" for 0x400aff>, <DisassemblerInsn "pshufd" for 0x400b03>, <DisassemblerInsn "punpckldq" for 0x400b08>, <DisassemblerInsn "paddd" for 0x400b0c>, <DisassemblerInsn "paddd" for 0x400b10>, <DisassemblerInsn "pslld" for 0x400b14>, <DisassemblerInsn "psrad" for 0x400b19>, <DisassemblerInsn "pslld" for 0x400b1e>, <DisassemblerInsn "psrad" for 0x400b23>, <DisassemblerInsn "packssdw" for 0x400b28>, <DisassemblerInsn "movups" for 0x400b2c>, <DisassemblerInsn "movups" for 0x400b33>, <DisassemblerInsn "movaps" for 0x400b37>, <DisassemblerInsn "punpcklwd" for 0x400b3a>, <DisassemblerInsn "punpckhwd" for 0x400b3e>, <DisassemblerInsn "movaps" for 0x400b42>, <DisassemblerInsn "pmuludq" for 0x400b45>, <DisassemblerInsn "pshufd" for 0x400b49>, <DisassemblerInsn "pshufd" for 0x400b4e>, <DisassemblerInsn "movaps" for 0x400b53>, <DisassemblerInsn "pmuludq" for 0x400b56>, <DisassemblerInsn "pshufd" for 0x400b5a>, <DisassemblerInsn "punpckldq" for 0x400b5f>, <DisassemblerInsn "movaps" for 0x400b63>, <DisassemblerInsn "pmuludq" for 0x400b66>, <DisassemblerInsn "pshufd" for 0x400b6a>, <DisassemblerInsn "pshufd" for 0x400b6f>, <DisassemblerInsn "movaps" for 0x400b74>, <DisassemblerInsn "pmuludq" for 0x400b77>, <DisassemblerInsn "pshufd" for 0x400b7b>, <DisassemblerInsn "punpckldq" for 0x400b80>, <DisassemblerInsn "paddd" for 0x400b84>, <DisassemblerInsn "paddd" for 0x400b88>, <DisassemblerInsn "pslld" for 0x400b8c>, <DisassemblerInsn "psrad" for 0x400b91>, <DisassemblerInsn "pslld" for 0x400b96>, <DisassemblerInsn "psrad" for 0x400b9b>, <DisassemblerInsn "packssdw" for 0x400ba0>, <DisassemblerInsn "movups" for 0x400ba4>, <DisassemblerInsn "movups" for 0x400bab>, <DisassemblerInsn "movaps" for 0x400baf>, <DisassemblerInsn "punpcklwd" for 0x400bb2>, <DisassemblerInsn "punpckhwd" for 0x400bb6>, <DisassemblerInsn "movaps" for 0x400bba>, <DisassemblerInsn "pmuludq" for 0x400bbd>, <DisassemblerInsn "pshufd" for 0x400bc1>, <DisassemblerInsn "pshufd" for 0x400bc6>, <DisassemblerInsn "movaps" for 0x400bcb>, <DisassemblerInsn "pmuludq" for 0x400bce>, <DisassemblerInsn "pshufd" for 0x400bd2>, <DisassemblerInsn "punpckldq" for 0x400bd7>, <DisassemblerInsn "movaps" for 0x400bdb>, <DisassemblerInsn "pmuludq" for 0x400bde>, <DisassemblerInsn "pshufd" for 0x400be2>, <DisassemblerInsn "pshufd" for 0x400be7>, <DisassemblerInsn "pmuludq" for 0x400bec>, <DisassemblerInsn "pshufd" for 0x400bf0>, <DisassemblerInsn "punpckldq" for 0x400bf5>, <DisassemblerInsn "paddd" for 0x400bf9>, <DisassemblerInsn "paddd" for 0x400bfd>, <DisassemblerInsn "pslld" for 0x400c01>, <DisassemblerInsn "psrad" for 0x400c06>, <DisassemblerInsn "pslld" for 0x400c0b>, <DisassemblerInsn "psrad" for 0x400c10>, <DisassemblerInsn "packssdw" for 0x400c15>, <DisassemblerInsn "movdqu" for 0x400c19>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401393>, <DisassemblerInsn "and" for 0x401396>, <DisassemblerInsn "cmp" for 0x40139b>, <DisassemblerInsn "jne" for 0x40139e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400479>, <DisassemblerInsn "movaps" for 0x40047e>, <DisassemblerInsn "punpcklwd" for 0x400482>, <DisassemblerInsn "punpckhwd" for 0x400486>, <DisassemblerInsn "pshufd" for 0x40048b>, <DisassemblerInsn "movaps" for 0x400490>, <DisassemblerInsn "pmuludq" for 0x400493>, <DisassemblerInsn "movaps" for 0x400497>, <DisassemblerInsn "pmuludq" for 0x40049a>, <DisassemblerInsn "pshufd" for 0x40049e>, <DisassemblerInsn "movaps" for 0x4004a4>, <DisassemblerInsn "pmuludq" for 0x4004a7>, <DisassemblerInsn "movaps" for 0x4004ab>, <DisassemblerInsn "pmuludq" for 0x4004ae>, <DisassemblerInsn "pmuludq" for 0x4004b3>, <DisassemblerInsn "pshufd" for 0x4004b8>, <DisassemblerInsn "pshufd" for 0x4004bd>, <DisassemblerInsn "pmuludq" for 0x4004c3>, <DisassemblerInsn "pshufd" for 0x4004c8>, <DisassemblerInsn "punpckldq" for 0x4004cd>, <DisassemblerInsn "pmuludq" for 0x4004d1>, <DisassemblerInsn "pshufd" for 0x4004d5>, <DisassemblerInsn "pshufd" for 0x4004da>, <DisassemblerInsn "pmuludq" for 0x4004df>, <DisassemblerInsn "pshufd" for 0x4004e3>, <DisassemblerInsn "punpckldq" for 0x4004e8>, <DisassemblerInsn "paddd" for 0x4004ec>, <DisassemblerInsn "paddd" for 0x4004f0>, <DisassemblerInsn "pslld" for 0x4004f4>, <DisassemblerInsn "psrad" for 0x4004f9>, <DisassemblerInsn "pslld" for 0x4004fe>, <DisassemblerInsn "psrad" for 0x400503>, <DisassemblerInsn "packssdw" for 0x400508>, <DisassemblerInsn "movups" for 0x40050c>, <DisassemblerInsn "movups" for 0x400513>, <DisassemblerInsn "movaps" for 0x400517>, <DisassemblerInsn "punpckhwd" for 0x40051b>, <DisassemblerInsn "punpcklwd" for 0x400520>, <DisassemblerInsn "movups" for 0x400524>, <DisassemblerInsn "movaps" for 0x400529>, <DisassemblerInsn "punpcklwd" for 0x40052d>, <DisassemblerInsn "punpckhwd" for 0x400531>, <DisassemblerInsn "pshufd" for 0x400536>, <DisassemblerInsn "movaps" for 0x40053b>, <DisassemblerInsn "pmuludq" for 0x40053e>, <DisassemblerInsn "movaps" for 0x400542>, <DisassemblerInsn "pmuludq" for 0x400545>, <DisassemblerInsn "pshufd" for 0x400549>, <DisassemblerInsn "movaps" for 0x40054f>, <DisassemblerInsn "pmuludq" for 0x400552>, <DisassemblerInsn "movaps" for 0x400556>, <DisassemblerInsn "pmuludq" for 0x400559>, <DisassemblerInsn "pmuludq" for 0x40055e>, <DisassemblerInsn "pshufd" for 0x400563>, <DisassemblerInsn "pshufd" for 0x400568>, <DisassemblerInsn "pmuludq" for 0x40056e>, <DisassemblerInsn "pshufd" for 0x400573>, <DisassemblerInsn "punpckldq" for 0x400578>, <DisassemblerInsn "pmuludq" for 0x40057c>, <DisassemblerInsn "pshufd" for 0x400580>, <DisassemblerInsn "pshufd" for 0x400585>, <DisassemblerInsn "pmuludq" for 0x40058a>, <DisassemblerInsn "pshufd" for 0x40058e>, <DisassemblerInsn "punpckldq" for 0x400593>, <DisassemblerInsn "paddd" for 0x400597>, <DisassemblerInsn "paddd" for 0x40059b>, <DisassemblerInsn "pslld" for 0x40059f>, <DisassemblerInsn "psrad" for 0x4005a4>, <DisassemblerInsn "pslld" for 0x4005a9>, <DisassemblerInsn "psrad" for 0x4005ae>, <DisassemblerInsn "packssdw" for 0x4005b3>, <DisassemblerInsn "movups" for 0x4005b7>, <DisassemblerInsn "movups" for 0x4005be>, <DisassemblerInsn "movaps" for 0x4005c2>, <DisassemblerInsn "punpckhwd" for 0x4005c6>, <DisassemblerInsn "punpcklwd" for 0x4005cb>, <DisassemblerInsn "movups" for 0x4005cf>, <DisassemblerInsn "movaps" for 0x4005d4>, <DisassemblerInsn "punpcklwd" for 0x4005d8>, <DisassemblerInsn "punpckhwd" for 0x4005dc>, <DisassemblerInsn "pshufd" for 0x4005e1>, <DisassemblerInsn "movaps" for 0x4005e6>, <DisassemblerInsn "pmuludq" for 0x4005e9>, <DisassemblerInsn "movaps" for 0x4005ed>, <DisassemblerInsn "pmuludq" for 0x4005f0>, <DisassemblerInsn "pshufd" for 0x4005f4>, <DisassemblerInsn "movaps" for 0x4005fa>, <DisassemblerInsn "pmuludq" for 0x4005fd>, <DisassemblerInsn "movaps" for 0x400601>, <DisassemblerInsn "pmuludq" for 0x400604>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a2>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011b2>, <DisassemblerInsn "call" for 0x4011b4>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>, <DisassemblerInsn "pmuludq" for 0x4003e8>, <DisassemblerInsn "movaps" for 0x4003ec>, <DisassemblerInsn "pmuludq" for 0x4003ef>, <DisassemblerInsn "pshufd" for 0x4003f3>, <DisassemblerInsn "movaps" for 0x4003f9>, <DisassemblerInsn "pmuludq" for 0x4003fc>, <DisassemblerInsn "movaps" for 0x400400>, <DisassemblerInsn "pmuludq" for 0x400403>, <DisassemblerInsn "pmuludq" for 0x400408>, <DisassemblerInsn "pshufd" for 0x40040d>, <DisassemblerInsn "pshufd" for 0x400412>, <DisassemblerInsn "pmuludq" for 0x400418>, <DisassemblerInsn "pshufd" for 0x40041d>, <DisassemblerInsn "punpckldq" for 0x400422>, <DisassemblerInsn "pmuludq" for 0x400426>, <DisassemblerInsn "pshufd" for 0x40042a>, <DisassemblerInsn "pshufd" for 0x40042f>, <DisassemblerInsn "pmuludq" for 0x400434>, <DisassemblerInsn "pshufd" for 0x400438>, <DisassemblerInsn "punpckldq" for 0x40043d>, <DisassemblerInsn "paddd" for 0x400441>, <DisassemblerInsn "paddd" for 0x400445>, <DisassemblerInsn "pslld" for 0x400449>, <DisassemblerInsn "psrad" for 0x40044e>, <DisassemblerInsn "pslld" for 0x400453>, <DisassemblerInsn "psrad" for 0x400458>, <DisassemblerInsn "packssdw" for 0x40045d>, <DisassemblerInsn "movups" for 0x400461>, <DisassemblerInsn "movups" for 0x400468>, <DisassemblerInsn "movaps" for 0x40046c>, <DisassemblerInsn "punpckhwd" for 0x400470>, <DisassemblerInsn "punpcklwd" for 0x400475>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011d9>, <DisassemblerInsn "jl" for 0x4011dc>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e2>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "call" for 0x4011f4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011b9>, <DisassemblerInsn "jl" for 0x4011bc>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df6>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "call" for 0x400e0c>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "call" for 0x40125d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401262>, <DisassemblerInsn "jl" for 0x401265>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "pmuludq" for 0x400609>, <DisassemblerInsn "pshufd" for 0x40060e>, <DisassemblerInsn "pshufd" for 0x400613>, <DisassemblerInsn "pmuludq" for 0x400619>, <DisassemblerInsn "pshufd" for 0x40061e>, <DisassemblerInsn "punpckldq" for 0x400623>, <DisassemblerInsn "pmuludq" for 0x400627>, <DisassemblerInsn "pshufd" for 0x40062b>, <DisassemblerInsn "pshufd" for 0x400630>, <DisassemblerInsn "pmuludq" for 0x400635>, <DisassemblerInsn "pshufd" for 0x400639>, <DisassemblerInsn "punpckldq" for 0x40063e>, <DisassemblerInsn "paddd" for 0x400642>, <DisassemblerInsn "paddd" for 0x400646>, <DisassemblerInsn "pslld" for 0x40064a>, <DisassemblerInsn "psrad" for 0x40064f>, <DisassemblerInsn "pslld" for 0x400654>, <DisassemblerInsn "psrad" for 0x400659>, <DisassemblerInsn "packssdw" for 0x40065e>, <DisassemblerInsn "movups" for 0x400662>, <DisassemblerInsn "movups" for 0x400669>, <DisassemblerInsn "movaps" for 0x40066d>, <DisassemblerInsn "punpckhwd" for 0x400670>, <DisassemblerInsn "punpcklwd" for 0x400674>, <DisassemblerInsn "movups" for 0x400678>, <DisassemblerInsn "movaps" for 0x40067c>, <DisassemblerInsn "punpcklwd" for 0x40067f>, <DisassemblerInsn "punpckhwd" for 0x400683>, <DisassemblerInsn "pshufd" for 0x400687>, <DisassemblerInsn "movaps" for 0x40068c>, <DisassemblerInsn "pmuludq" for 0x40068f>, <DisassemblerInsn "movaps" for 0x400693>, <DisassemblerInsn "pmuludq" for 0x400696>, <DisassemblerInsn "pshufd" for 0x40069a>, <DisassemblerInsn "movaps" for 0x4006a0>, <DisassemblerInsn "pmuludq" for 0x4006a3>, <DisassemblerInsn "pmuludq" for 0x4006a8>, <DisassemblerInsn "pmuludq" for 0x4006ac>, <DisassemblerInsn "pshufd" for 0x4006b0>, <DisassemblerInsn "pshufd" for 0x4006b5>, <DisassemblerInsn "pmuludq" for 0x4006ba>, <DisassemblerInsn "pshufd" for 0x4006be>, <DisassemblerInsn "punpckldq" for 0x4006c3>, <DisassemblerInsn "pmuludq" for 0x4006c7>, <DisassemblerInsn "pshufd" for 0x4006cb>, <DisassemblerInsn "pshufd" for 0x4006d0>, <DisassemblerInsn "pmuludq" for 0x4006d5>, <DisassemblerInsn "pshufd" for 0x4006d9>, <DisassemblerInsn "punpckldq" for 0x4006de>, <DisassemblerInsn "paddd" for 0x4006e2>, <DisassemblerInsn "paddd" for 0x4006e6>, <DisassemblerInsn "pslld" for 0x4006ea>, <DisassemblerInsn "psrad" for 0x4006ef>, <DisassemblerInsn "pslld" for 0x4006f4>, <DisassemblerInsn "psrad" for 0x4006f9>, <DisassemblerInsn "packssdw" for 0x4006fe>, <DisassemblerInsn "movdqu" for 0x400702>, <DisassemblerInsn "mov" for 0x40070a>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "call" for 0x4011a0>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "lea" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "call" for 0x400e45>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "add" for 0x4014f2>, <DisassemblerInsn "pop" for 0x4014f9>, <DisassemblerInsn "pop" for 0x4014fa>, <DisassemblerInsn "pop" for 0x4014fc>, <DisassemblerInsn "ret" for 0x4014fd>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013ac>, <DisassemblerInsn "mov" for 0x4013b4>, <DisassemblerInsn "mov" for 0x4013bc>, <DisassemblerInsn "mov" for 0x4013c1>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013cb>, <DisassemblerInsn "mov" for 0x4013d0>, <DisassemblerInsn "mov" for 0x4013d5>, <DisassemblerInsn "imul" for 0x4013da>, <DisassemblerInsn "movsxd" for 0x4013de>, <DisassemblerInsn "add" for 0x4013e1>, <DisassemblerInsn "add" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013e7>, <DisassemblerInsn "imul" for 0x4013ec>, <DisassemblerInsn "movsxd" for 0x4013f0>, <DisassemblerInsn "add" for 0x4013f3>, <DisassemblerInsn "add" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x4013fc>, <DisassemblerInsn "call" for 0x4013fe>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011cf>, <DisassemblerInsn "call" for 0x4011d4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40082b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "mov" for 0x400d0f>, <DisassemblerInsn "mov" for 0x400d16>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "add" for 0x400d26>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "add" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3c>, <DisassemblerInsn "cmp" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "je" for 0x400d5b>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "add" for 0x401433>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "add" for 0x40143e>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "cdq" for 0x401446>, <DisassemblerInsn "idiv" for 0x401447>, <DisassemblerInsn "mov" for 0x401449>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "cmp" for 0x40144f>, <DisassemblerInsn "jl" for 0x401451>]'}], 'cfg_block_detailed_info': [{'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e5b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x190], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~r8, qword ptr [rsp + 0xc8]>', '<mov~~r10, qword ptr [rsp + 0xc0]>', '<mov~~rbx, qword ptr [rsp + 0xb8]>', '<mov~~r9, qword ptr [rsp + 0x60]>', '<mov~~r11, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x54], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x18], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x20], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x24], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x28], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x30], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x27c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm3, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x180], xmm3>', '<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x190], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<call~~rax>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x27c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm1, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x1f0], xmm1>', '<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24c]>', '<mov~~dword ptr [rsp + 0x120], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<add~~rsp, 0x290>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rip + 0xffea1]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffea7]>', '<movzx~~eax, word ptr [rax]>', '<imul~~eax, ecx>', '<shr~~eax, 0xb>', '<mov~~word ptr [rdx + 0x3280], ax>', '<mov~~rax, rdx>', '<add~~rax, 0x3280>', '<add~~rax, 2>', '<add~~rdx, 0x3300>', '<mov~~rcx, qword ptr [rip + 0xffe6c]>', '<add~~rcx, 0x80>', '<cmp~~rax, rcx>', '<setb~~cl>', '<mov~~rsi, qword ptr [rip + 0xffe58]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~sil>', '<and~~cl, sil>', '<mov~~rsi, qword ptr [rip + 0xffe53]>', '<add~~rsi, 0x80>', '<cmp~~rax, rsi>', '<setb~~al>', '<mov~~rsi, qword ptr [rip + 0xffe3f]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~dl>', '<and~~al, dl>', '<or~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jne~~0x400717>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 3>', '<call~~0x500060>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 12, 'blockInsts': ['<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rip + 0xff801]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3280>', '<add~~rcx, 2>', '<add~~rax, 0x3300>', '<mov~~rdx, qword ptr [rip + 0xff7dc]>', '<add~~rdx, 0x80>', '<cmp~~rcx, rdx>', '<setb~~cl>', '<mov~~rdx, qword ptr [rip + 0xff7c8]>', '<add~~rdx, 2>', '<cmp~~rax, rdx>', '<seta~~al>', '<and~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<jne~~0x400c2e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jmp~~0x4014eb>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x290>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x228], rdi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x24c], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x264], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x270], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x27c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x288], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400830>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~rsi, rax>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3d30>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x40>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x44>', '<mov~~qword ptr [rsp + 0xc0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<add~~rax, 0x1728>', '<add~~rax, 0x14b0>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x124], eax>', '<je~~0x400e11>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x120], eax>', '<je~~0x4014eb>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<call~~0x500058>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 4>', '<call~~0x500060>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 20, 'blockInsts': ['<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm0>']}, {'block_Idx': 16, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>']}, {'block_Idx': 24, 'blockInsts': ['<movups~~xmm0, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm0>', '<punpcklwd~~xmm4, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm1, xmm3>', '<pmuludq~~xmm1, xmm0>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 0xd>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x138]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401424>']}, {'block_Idx': 21, 'blockInsts': ['<movups~~xmm8, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x42]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x52]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0xa0]>', '<xor~~edx, edx>', '<call~~0x500060>']}, {'block_Idx': 17, 'blockInsts': ['<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x32]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>']}, {'block_Idx': 54, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 2>', '<call~~0x500060>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 50, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<jle~~0x4014b5>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x134]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<call~~0x500048>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 66, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 25, 'blockInsts': ['<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm3>', '<movups~~xmm5, xmmword ptr [rdx + 0x62]>', '<movaps~~xmm7, xmm5>', '<punpckhwd~~xmm7, xmm0>', '<punpcklwd~~xmm5, xmm0>', '<movups~~xmm6, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm6>', '<punpcklwd~~xmm4, xmm0>', '<punpckhwd~~xmm6, xmm0>', '<pshufd~~xmm0, xmm5, 0xf5>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm0>', '<movaps~~xmm0, xmm1>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm8, xmm7, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm8>', '<pmuludq~~xmm1, xmm7>', '<pmuludq~~xmm1, xmm6>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm1, xmm5>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 2>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 2>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x220], rax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jmp~~0x400df6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x228]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x74d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<add~~rsp, 0x290>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x24]>', '<mov~~r10, qword ptr [rsp + 0x30]>', '<mov~~r11d, dword ptr [rsp + 0x3c]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 0x10], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 1>', '<call~~0x500060>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x400764>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x288]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0x240]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x140], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rax>', '<je~~0x400d9a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x401193>']}], 'cfg_edge_info': [(55, 57), (16, 20), (50, 52), (67, 68), (43, 46), (4, 9), (46, 48), (5, 10), (17, 21), (74, 73), (61, 63), (73, 46), (7, 12), (35, 37), (20, 24), (38, 39), (22, 30), (11, 9), (71, 72), (64, 66), (18, 23), (28, 9), (21, 25), (23, 22), (0, 2), (31, 35), (14, 19), (9, 14), (1, 3), (50, 51), (39, 41), (54, 51), (47, 45), (72, 74), (58, 60), (12, 17), (57, 58), (13, 9), (2, 6), (36, 38), (30, 31), (51, 47), (3, 7), (57, 51), (40, 44), (54, 55), (25, 28), (51, 40), (32, 36), (29, 19), (15, 29), (43, 45), (60, 61), (14, 18), (63, 51), (71, 73), (1, 4), (10, 16), (45, 47), (24, 27), (41, 43), (66, 51), (2, 5), (45, 40), (36, 37), (68, 69), (47, 46), (63, 64), (18, 22), (52, 54), (69, 70), (27, 9), (28, 8), (0, 1), (48, 50), (19, 23), (30, 32), (29, 18), (60, 51), (70, 71), (27, 11), (39, 40), (73, 51), (9, 15), (66, 67), (6, 9)], 'cdg_edge_info': [(1, 28), (2, 27), (51, 44), (50, 52), (18, 23), (51, 47), (29, 23), (66, 51), (57, 51), (0, 2), (39, 48), (71, 50), (2, 5), (45, 40), (36, 37), (1, 3), (57, 60), (66, 69), (1, 12), (47, 46), (9, 29), (54, 55), (63, 64), (1, 21), (2, 20), (30, 36), (71, 74), (50, 51), (51, 40), (50, 54), (29, 19), (43, 45), (60, 61), (39, 41), (39, 44), (0, 1), (71, 46), (66, 68), (66, 71), (39, 50), (36, 39), (63, 51), (2, 10), (2, 16), (30, 32), (54, 51), (63, 66), (47, 45), (30, 35), (1, 17), (54, 57), (47, 48), (71, 73), (29, 18), (60, 51), (60, 63), (57, 58), (39, 40), (39, 46), (71, 72), (71, 48), (39, 43), (73, 51), (9, 15), (66, 67), (66, 70), (1, 7), (45, 44), (36, 38), (45, 47), (30, 31), (30, 37), (1, 25), (2, 24), (47, 50)], 'ddg_edge_info': [(52, 40), (16, 20), (7, 17), (67, 68), (41, 58), (70, 73), (27, 68), (24, 51), (28, 67), (47, 71), (46, 48), (12, 25), (0, 5), (17, 21), (46, 57), (74, 73), (2, 66), (39, 51), (46, 66), (51, 71), (2, 57), (0, 23), (58, 40), (24, 72), (15, 23), (32, 39), (73, 74), (52, 51), (28, 51), (67, 70), (35, 44), (0, 44), (47, 73), (27, 70), (28, 73), (28, 69), (2, 50), (46, 50), (48, 47), (73, 46), (38, 46), (0, 7), (51, 73), (0, 71), (41, 72), (0, 16), (24, 74), (10, 20), (1, 17), (27, 36), (58, 51), (24, 19), (73, 67), (61, 47), (7, 12), (25, 18), (16, 24), (7, 21), (39, 74), (25, 36), (27, 72), (0, 55), (28, 71), (3, 17), (38, 39), (22, 30), (0, 64), (39, 46), (0, 9), (48, 40), (41, 74), (24, 67), (27, 29), (61, 40), (15, 18), (27, 38), (73, 69), (1, 28), (52, 46), (28, 46), (2, 27), (18, 23), (25, 29), (0, 39), (25, 38), (47, 68), (0, 48), (28, 9), (21, 25), (38, 41), (0, 2), (31, 35), (28, 18), (2, 54), (41, 67), (23, 22), (31, 44), (46, 54), (22, 32), (5, 16), (27, 22), (51, 68), (46, 63), (24, 69), (25, 68), (1, 12), (55, 47), (58, 46), (10, 24), (1, 21), (2, 20), (25, 22), (73, 71), (61, 51), (28, 39), (1, 30), (39, 69), (0, 32), (0, 41), (47, 70), (2, 47), (3, 12), (39, 41), (3, 21), (51, 70), (41, 69), (27, 15), (1, 60), (55, 40), (24, 71), (25, 70), (25, 15), (70, 47), (0, 25), (72, 74), (55, 58), (39, 71), (27, 51), (74, 47), (47, 72), (0, 52), (67, 72), (12, 17), (28, 68), (48, 46), (0, 61), (24, 46), (51, 72), (1, 7), (24, 9), (28, 25), (24, 73), (36, 38), (25, 72), (55, 51), (70, 40), (24, 18), (0, 18), (1, 25), (0, 27), (2, 24), (39, 73), (74, 40), (0, 36), (51, 47), (41, 46), (24, 39), (52, 55), (41, 55), (38, 47), (3, 25), (41, 64), (40, 44), (27, 74), (41, 73), (27, 19), (51, 74), (2, 63), (64, 47), (25, 74), (25, 19), (28, 36), (73, 68), (27, 46), (0, 29), (70, 51), (25, 28), (0, 38), (32, 36), (74, 51), (41, 48), (15, 29), (7, 25), (12, 21), (38, 40), (51, 67), (27, 67), (70, 72), (1, 57), (64, 40), (24, 68), (1, 66), (25, 67), (55, 46), (28, 29), (2, 10), (48, 51), (27, 39), (0, 22), (28, 38), (73, 70), (47, 51), (0, 31), (39, 68), (0, 40), (15, 22), (32, 38), (67, 69), (27, 69), (41, 68), (25, 51), (1, 50), (28, 22), (5, 20), (10, 16), (64, 51), (0, 15), (25, 69), (24, 70), (36, 44), (0, 24), (73, 72), (39, 70), (2, 30), (74, 46), (24, 27), (61, 46), (29, 23), (24, 36), (41, 52), (61, 64), (41, 61), (47, 74), (27, 71), (41, 70), (28, 70), (28, 15), (2, 60), (46, 60), (25, 71), (68, 69), (47, 46), (9, 29), (39, 72), (9, 38), (51, 46), (24, 29), (58, 61), (24, 38), (69, 70), (47, 67), (27, 9), (25, 46), (27, 73), (1, 54), (28, 72), (0, 1), (27, 18), (22, 31), (1, 63), (64, 46), (0, 10), (5, 24), (25, 9), (19, 23), (9, 22), (0, 19), (25, 73), (0, 28), (9, 40), (24, 22), (15, 19), (29, 18), (64, 67), (41, 47), (32, 44), (52, 47), (25, 39), (70, 71), (47, 69), (1, 47), (0, 58), (28, 74), (0, 3), (28, 19), (51, 69), (48, 52), (38, 51), (0, 12), (73, 51), (9, 15), (39, 67), (24, 15), (58, 47), (70, 46)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_32'}, {'instIndex': 864, 'instruction': 'cmpl\t$0, (%rdx)'}, {'instIndex': 865, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 866, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'jle\t.LBB1_31'}, {'instIndex': 905, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 906, 'instruction': 'jl\t.LBB1_30'}, {'instIndex': 1007, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1008, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1009, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 1011, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1012, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1013, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1014, 'instruction': 'cltd'}, {'instIndex': 1015, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1016, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1018, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1019, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1022, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1023, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1024, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 1025, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1029, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1030, 'instruction': 'movl\t%edx, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 1032, 'instruction': 'movl\t%ecx, %eax'}, {'instIndex': 1033, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1034, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1035, 'instruction': 'cltd'}, {'instIndex': 1036, 'instruction': 'idivl\t%esi'}, {'instIndex': 1037, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 1038, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 1039, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 1040, 'instruction': 'movl\t%ecx, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1041, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1042, 'instruction': 'jl\t.LBB1_20'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 1057 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_32'}, {'instIndex': 864, 'instruction': 'cmpl\t$0, (%rdx)'}, {'instIndex': 865, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 866, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'jle\t.LBB1_31'}, {'instIndex': 905, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 906, 'instruction': 'jl\t.LBB1_30'}, {'instIndex': 1007, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1008, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1009, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 1011, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1012, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1013, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1014, 'instruction': 'cltd'}, {'instIndex': 1015, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1016, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1018, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1019, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1022, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1023, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1024, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 1025, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1029, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1030, 'instruction': 'movl\t%edx, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 1032, 'instruction': 'movl\t%ecx, %eax'}, {'instIndex': 1033, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1034, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1035, 'instruction': 'cltd'}, {'instIndex': 1036, 'instruction': 'idivl\t%esi'}, {'instIndex': 1037, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 1038, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 1039, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 1040, 'instruction': 'movl\t%ecx, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1041, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1042, 'instruction': 'jl\t.LBB1_20'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 137 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 137 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1057 instructions in binary file.
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
The execution time of patched subCFG information extraction via angr: 0:00:01.924428
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "add" for 0x401433>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "add" for 0x40143e>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "cdq" for 0x401446>, <DisassemblerInsn "idiv" for 0x401447>, <DisassemblerInsn "mov" for 0x401449>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "cmp" for 0x40144f>, <DisassemblerInsn "jl" for 0x401451>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40121c>, <DisassemblerInsn "jl" for 0x40121f>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40123f>, <DisassemblerInsn "jl" for 0x401242>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011b9>, <DisassemblerInsn "jl" for 0x4011bc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "add" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "add" for 0x40103e>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "mov" for 0x401051>, <DisassemblerInsn "add" for 0x401054>, <DisassemblerInsn "add" for 0x40105b>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "add" for 0x40106d>, <DisassemblerInsn "add" for 0x401074>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "mov" for 0x401083>, <DisassemblerInsn "add" for 0x401086>, <DisassemblerInsn "add" for 0x40108d>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "add" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a3>, <DisassemblerInsn "mov" for 0x4010ab>, <DisassemblerInsn "add" for 0x4010ae>, <DisassemblerInsn "mov" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "add" for 0x4010c7>, <DisassemblerInsn "mov" for 0x4010cb>, <DisassemblerInsn "mov" for 0x4010d3>, <DisassemblerInsn "add" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010dd>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "add" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010fb>, <DisassemblerInsn "add" for 0x4010fe>, <DisassemblerInsn "add" for 0x401105>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "add" for 0x401114>, <DisassemblerInsn "add" for 0x40111b>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "add" for 0x40112a>, <DisassemblerInsn "add" for 0x401131>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "xor" for 0x401151>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011d9>, <DisassemblerInsn "jl" for 0x4011dc>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "call" for 0x40125d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401400>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x401410>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141d>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "call" for 0x401422>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011f9>, <DisassemblerInsn "jl" for 0x4011fc>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128b>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "shl" for 0x4012c6>, <DisassemblerInsn "imul" for 0x4012c9>, <DisassemblerInsn "movsxd" for 0x4012cd>, <DisassemblerInsn "add" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d3>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "shl" for 0x4012d9>, <DisassemblerInsn "movsxd" for 0x4012dc>, <DisassemblerInsn "add" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "shl" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "shl" for 0x401300>, <DisassemblerInsn "movsxd" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "call" for 0x40131a>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "call" for 0x4011a0>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b5>, <DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d3>, <DisassemblerInsn "call" for 0x4014d8>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401393>, <DisassemblerInsn "and" for 0x401396>, <DisassemblerInsn "cmp" for 0x40139b>, <DisassemblerInsn "jne" for 0x40139e>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401262>, <DisassemblerInsn "jl" for 0x401265>]'}], 'cfg_block_detailed_info': [{'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x401193>']}, {'block_Idx': 46, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 48, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 39, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~rsi, rax>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3d30>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x40>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x44>', '<mov~~qword ptr [rsp + 0xc0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<add~~rax, 0x1728>', '<add~~rax, 0x14b0>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x138]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 42, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<jle~~0x4014b5>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 44, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~r8, qword ptr [rsp + 0xc8]>', '<mov~~r10, qword ptr [rsp + 0xc0]>', '<mov~~rbx, qword ptr [rsp + 0xb8]>', '<mov~~r9, qword ptr [rsp + 0x60]>', '<mov~~r11, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x54], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x18], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x20], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x24], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x28], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x30], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401424>']}, {'block_Idx': 50, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}], 'cfg_edge_info': [(55, 57), (32, 34), (57, 36), (49, 50), (37, 36), (50, 51), (40, 31), (40, 37), (37, 35), (34, 36), (30, 32), (42, 40), (44, 40), (58, 57), (35, 37), (35, 31), (57, 40), (29, 30), (46, 40), (48, 40), (39, 40), (34, 35), (30, 31), (50, 40)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/O3/eatqi.o---after
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 75 nodes and 111 edges in CFGEmulated.
It has 74 nodes and 106 edges in CDG.
It has 4823 nodes and 6838 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198154, 4198753, 4198780, 4199010, 4199460, 4199511, 4199539]
{4199424, 4194688, 4198914, 4195449, 4197639, 4199304, 4195849, 4198154, 4197905, 4198803, 4198037, 4196248, 4196506, 4199196, 4198940, 4198818, 4199460, 4199332, 4198949, 4194853, 4197930, 4196652, 4197935, 4196400, 4199605, 4198841, 4196538, 4199227, 4197051, 4198975, 4194496, 4197824, 4198082, 4198850, 4197445, 4194885, 4198984, 4197962, 4196560, 4197843, 4199511, 4198873, 4197979, 4194907, 4199645, 4197725, 4198753, 4199010, 4198882, 4199270, 4199019, 4198380, 4199659, 4195051, 4199539, 4197750, 4197878, 4198905, 4198780}
[40, 57, 22, 30, 10, 67, 6, 29, 5, 69, 27, 3, 44, 1, 58, 13, 70, 60, 12, 2, 15, 43, 74, 35, 0, 41, 18, 36, 32, 68, 61, 45, 28, 20, 16, 63, 7, 24, 4, 38, 71, 21, 47, 48, 17, 54, 55, 14, 50, 39, 23, 64, 66, 25, 46, 51, 19, 11, 31, 37, 72, 52, 8, 9, 73]
The execution time of patched slicing information extraction via angr: 0:00:08.005237
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014b5>, <DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d3>, <DisassemblerInsn "call" for 0x4014d8>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011f9>, <DisassemblerInsn "jl" for 0x4011fc>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e21>, <DisassemblerInsn "call" for 0x400e24>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e2a>, <DisassemblerInsn "jge" for 0x400e2d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128b>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "mov" for 0x4012b0>, <DisassemblerInsn "mov" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012ba>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "shl" for 0x4012c6>, <DisassemblerInsn "imul" for 0x4012c9>, <DisassemblerInsn "movsxd" for 0x4012cd>, <DisassemblerInsn "add" for 0x4012d0>, <DisassemblerInsn "mov" for 0x4012d3>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "shl" for 0x4012d9>, <DisassemblerInsn "movsxd" for 0x4012dc>, <DisassemblerInsn "add" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "shl" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "shl" for 0x401300>, <DisassemblerInsn "movsxd" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401314>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "call" for 0x40131a>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d92>, <DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "movd" for 0x4008a9>, <DisassemblerInsn "pshufd" for 0x4008ad>, <DisassemblerInsn "movaps" for 0x4008b2>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40133b>, <DisassemblerInsn "mov" for 0x401340>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "shl" for 0x401356>, <DisassemblerInsn "movsxd" for 0x401359>, <DisassemblerInsn "add" for 0x40135c>, <DisassemblerInsn "mov" for 0x40135f>, <DisassemblerInsn "call" for 0x401364>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movd" for 0x400234>, <DisassemblerInsn "pshufd" for 0x400238>, <DisassemblerInsn "movaps" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014dd>, <DisassemblerInsn "mov" for 0x4014e4>, <DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "add" for 0x4014f2>, <DisassemblerInsn "pop" for 0x4014f9>, <DisassemblerInsn "pop" for 0x4014fa>, <DisassemblerInsn "pop" for 0x4014fc>, <DisassemblerInsn "ret" for 0x4014fd>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400180>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "movzx" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movzx" for 0x400199>, <DisassemblerInsn "imul" for 0x40019c>, <DisassemblerInsn "shr" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "add" for 0x4001b2>, <DisassemblerInsn "add" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "setb" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "add" for 0x4001d8>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "seta" for 0x4001df>, <DisassemblerInsn "and" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "add" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "setb" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x400201>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "seta" for 0x400208>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "or" for 0x40020d>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x40120a>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "call" for 0x401217>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401366>, <DisassemblerInsn "mov" for 0x40136e>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "mov" for 0x40137f>, <DisassemblerInsn "add" for 0x401382>, <DisassemblerInsn "call" for 0x401386>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40121c>, <DisassemblerInsn "jl" for 0x40121f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083f>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "add" for 0x40084c>, <DisassemblerInsn "add" for 0x400853>, <DisassemblerInsn "add" for 0x400857>, <DisassemblerInsn "mov" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "cmp" for 0x40086b>, <DisassemblerInsn "setb" for 0x40086e>, <DisassemblerInsn "mov" for 0x400871>, <DisassemblerInsn "add" for 0x400878>, <DisassemblerInsn "cmp" for 0x40087c>, <DisassemblerInsn "seta" for 0x40087f>, <DisassemblerInsn "and" for 0x400882>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "test" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "jne" for 0x400894>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "mov" for 0x400d65>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "call" for 0x400d70>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401400>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x401410>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141d>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "call" for 0x401422>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "jmp" for 0x400e56>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "add" for 0x400135>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "movzx" for 0x400144>, <DisassemblerInsn "imul" for 0x400148>, <DisassemblerInsn "add" for 0x40014b>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "add" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "add" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "add" for 0x40103e>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "mov" for 0x401051>, <DisassemblerInsn "add" for 0x401054>, <DisassemblerInsn "add" for 0x40105b>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "add" for 0x40106d>, <DisassemblerInsn "add" for 0x401074>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "mov" for 0x401083>, <DisassemblerInsn "add" for 0x401086>, <DisassemblerInsn "add" for 0x40108d>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "add" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a3>, <DisassemblerInsn "mov" for 0x4010ab>, <DisassemblerInsn "add" for 0x4010ae>, <DisassemblerInsn "mov" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "add" for 0x4010c7>, <DisassemblerInsn "mov" for 0x4010cb>, <DisassemblerInsn "mov" for 0x4010d3>, <DisassemblerInsn "add" for 0x4010d6>, <DisassemblerInsn "mov" for 0x4010dd>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "add" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010fb>, <DisassemblerInsn "add" for 0x4010fe>, <DisassemblerInsn "add" for 0x401105>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "add" for 0x401114>, <DisassemblerInsn "add" for 0x40111b>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "add" for 0x40112a>, <DisassemblerInsn "add" for 0x401131>, <DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "xor" for 0x401151>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "cmp" for 0x400deb>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "je" for 0x400df4>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea4>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "cmp" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "je" for 0x400ebc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "add" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e88>, <DisassemblerInsn "call" for 0x400e90>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40131c>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "add" for 0x401335>, <DisassemblerInsn "call" for 0x401339>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401225>, <DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "mov" for 0x401235>, <DisassemblerInsn "call" for 0x40123a>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>, <DisassemblerInsn "pshufd" for 0x400a5e>, <DisassemblerInsn "movaps" for 0x400a63>, <DisassemblerInsn "pmuludq" for 0x400a66>, <DisassemblerInsn "pshufd" for 0x400a6a>, <DisassemblerInsn "punpckldq" for 0x400a6f>, <DisassemblerInsn "movaps" for 0x400a73>, <DisassemblerInsn "pmuludq" for 0x400a76>, <DisassemblerInsn "pshufd" for 0x400a7a>, <DisassemblerInsn "pshufd" for 0x400a7f>, <DisassemblerInsn "movaps" for 0x400a84>, <DisassemblerInsn "pmuludq" for 0x400a87>, <DisassemblerInsn "pshufd" for 0x400a8b>, <DisassemblerInsn "punpckldq" for 0x400a90>, <DisassemblerInsn "paddd" for 0x400a94>, <DisassemblerInsn "paddd" for 0x400a98>, <DisassemblerInsn "pslld" for 0x400a9c>, <DisassemblerInsn "psrad" for 0x400aa1>, <DisassemblerInsn "pslld" for 0x400aa6>, <DisassemblerInsn "psrad" for 0x400aab>, <DisassemblerInsn "packssdw" for 0x400ab0>, <DisassemblerInsn "movups" for 0x400ab4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40123f>, <DisassemblerInsn "jl" for 0x401242>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400abb>, <DisassemblerInsn "movaps" for 0x400abf>, <DisassemblerInsn "punpcklwd" for 0x400ac2>, <DisassemblerInsn "punpckhwd" for 0x400ac6>, <DisassemblerInsn "movaps" for 0x400aca>, <DisassemblerInsn "pmuludq" for 0x400acd>, <DisassemblerInsn "pshufd" for 0x400ad1>, <DisassemblerInsn "pshufd" for 0x400ad6>, <DisassemblerInsn "movaps" for 0x400adb>, <DisassemblerInsn "pmuludq" for 0x400ade>, <DisassemblerInsn "pshufd" for 0x400ae2>, <DisassemblerInsn "punpckldq" for 0x400ae7>, <DisassemblerInsn "movaps" for 0x400aeb>, <DisassemblerInsn "pmuludq" for 0x400aee>, <DisassemblerInsn "pshufd" for 0x400af2>, <DisassemblerInsn "pshufd" for 0x400af7>, <DisassemblerInsn "movaps" for 0x400afc>, <DisassemblerInsn "pmuludq" for 0x400aff>, <DisassemblerInsn "pshufd" for 0x400b03>, <DisassemblerInsn "punpckldq" for 0x400b08>, <DisassemblerInsn "paddd" for 0x400b0c>, <DisassemblerInsn "paddd" for 0x400b10>, <DisassemblerInsn "pslld" for 0x400b14>, <DisassemblerInsn "psrad" for 0x400b19>, <DisassemblerInsn "pslld" for 0x400b1e>, <DisassemblerInsn "psrad" for 0x400b23>, <DisassemblerInsn "packssdw" for 0x400b28>, <DisassemblerInsn "movups" for 0x400b2c>, <DisassemblerInsn "movups" for 0x400b33>, <DisassemblerInsn "movaps" for 0x400b37>, <DisassemblerInsn "punpcklwd" for 0x400b3a>, <DisassemblerInsn "punpckhwd" for 0x400b3e>, <DisassemblerInsn "movaps" for 0x400b42>, <DisassemblerInsn "pmuludq" for 0x400b45>, <DisassemblerInsn "pshufd" for 0x400b49>, <DisassemblerInsn "pshufd" for 0x400b4e>, <DisassemblerInsn "movaps" for 0x400b53>, <DisassemblerInsn "pmuludq" for 0x400b56>, <DisassemblerInsn "pshufd" for 0x400b5a>, <DisassemblerInsn "punpckldq" for 0x400b5f>, <DisassemblerInsn "movaps" for 0x400b63>, <DisassemblerInsn "pmuludq" for 0x400b66>, <DisassemblerInsn "pshufd" for 0x400b6a>, <DisassemblerInsn "pshufd" for 0x400b6f>, <DisassemblerInsn "movaps" for 0x400b74>, <DisassemblerInsn "pmuludq" for 0x400b77>, <DisassemblerInsn "pshufd" for 0x400b7b>, <DisassemblerInsn "punpckldq" for 0x400b80>, <DisassemblerInsn "paddd" for 0x400b84>, <DisassemblerInsn "paddd" for 0x400b88>, <DisassemblerInsn "pslld" for 0x400b8c>, <DisassemblerInsn "psrad" for 0x400b91>, <DisassemblerInsn "pslld" for 0x400b96>, <DisassemblerInsn "psrad" for 0x400b9b>, <DisassemblerInsn "packssdw" for 0x400ba0>, <DisassemblerInsn "movups" for 0x400ba4>, <DisassemblerInsn "movups" for 0x400bab>, <DisassemblerInsn "movaps" for 0x400baf>, <DisassemblerInsn "punpcklwd" for 0x400bb2>, <DisassemblerInsn "punpckhwd" for 0x400bb6>, <DisassemblerInsn "movaps" for 0x400bba>, <DisassemblerInsn "pmuludq" for 0x400bbd>, <DisassemblerInsn "pshufd" for 0x400bc1>, <DisassemblerInsn "pshufd" for 0x400bc6>, <DisassemblerInsn "movaps" for 0x400bcb>, <DisassemblerInsn "pmuludq" for 0x400bce>, <DisassemblerInsn "pshufd" for 0x400bd2>, <DisassemblerInsn "punpckldq" for 0x400bd7>, <DisassemblerInsn "movaps" for 0x400bdb>, <DisassemblerInsn "pmuludq" for 0x400bde>, <DisassemblerInsn "pshufd" for 0x400be2>, <DisassemblerInsn "pshufd" for 0x400be7>, <DisassemblerInsn "pmuludq" for 0x400bec>, <DisassemblerInsn "pshufd" for 0x400bf0>, <DisassemblerInsn "punpckldq" for 0x400bf5>, <DisassemblerInsn "paddd" for 0x400bf9>, <DisassemblerInsn "paddd" for 0x400bfd>, <DisassemblerInsn "pslld" for 0x400c01>, <DisassemblerInsn "psrad" for 0x400c06>, <DisassemblerInsn "pslld" for 0x400c0b>, <DisassemblerInsn "psrad" for 0x400c10>, <DisassemblerInsn "packssdw" for 0x400c15>, <DisassemblerInsn "movdqu" for 0x400c19>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401393>, <DisassemblerInsn "and" for 0x401396>, <DisassemblerInsn "cmp" for 0x40139b>, <DisassemblerInsn "jne" for 0x40139e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400479>, <DisassemblerInsn "movaps" for 0x40047e>, <DisassemblerInsn "punpcklwd" for 0x400482>, <DisassemblerInsn "punpckhwd" for 0x400486>, <DisassemblerInsn "pshufd" for 0x40048b>, <DisassemblerInsn "movaps" for 0x400490>, <DisassemblerInsn "pmuludq" for 0x400493>, <DisassemblerInsn "movaps" for 0x400497>, <DisassemblerInsn "pmuludq" for 0x40049a>, <DisassemblerInsn "pshufd" for 0x40049e>, <DisassemblerInsn "movaps" for 0x4004a4>, <DisassemblerInsn "pmuludq" for 0x4004a7>, <DisassemblerInsn "movaps" for 0x4004ab>, <DisassemblerInsn "pmuludq" for 0x4004ae>, <DisassemblerInsn "pmuludq" for 0x4004b3>, <DisassemblerInsn "pshufd" for 0x4004b8>, <DisassemblerInsn "pshufd" for 0x4004bd>, <DisassemblerInsn "pmuludq" for 0x4004c3>, <DisassemblerInsn "pshufd" for 0x4004c8>, <DisassemblerInsn "punpckldq" for 0x4004cd>, <DisassemblerInsn "pmuludq" for 0x4004d1>, <DisassemblerInsn "pshufd" for 0x4004d5>, <DisassemblerInsn "pshufd" for 0x4004da>, <DisassemblerInsn "pmuludq" for 0x4004df>, <DisassemblerInsn "pshufd" for 0x4004e3>, <DisassemblerInsn "punpckldq" for 0x4004e8>, <DisassemblerInsn "paddd" for 0x4004ec>, <DisassemblerInsn "paddd" for 0x4004f0>, <DisassemblerInsn "pslld" for 0x4004f4>, <DisassemblerInsn "psrad" for 0x4004f9>, <DisassemblerInsn "pslld" for 0x4004fe>, <DisassemblerInsn "psrad" for 0x400503>, <DisassemblerInsn "packssdw" for 0x400508>, <DisassemblerInsn "movups" for 0x40050c>, <DisassemblerInsn "movups" for 0x400513>, <DisassemblerInsn "movaps" for 0x400517>, <DisassemblerInsn "punpckhwd" for 0x40051b>, <DisassemblerInsn "punpcklwd" for 0x400520>, <DisassemblerInsn "movups" for 0x400524>, <DisassemblerInsn "movaps" for 0x400529>, <DisassemblerInsn "punpcklwd" for 0x40052d>, <DisassemblerInsn "punpckhwd" for 0x400531>, <DisassemblerInsn "pshufd" for 0x400536>, <DisassemblerInsn "movaps" for 0x40053b>, <DisassemblerInsn "pmuludq" for 0x40053e>, <DisassemblerInsn "movaps" for 0x400542>, <DisassemblerInsn "pmuludq" for 0x400545>, <DisassemblerInsn "pshufd" for 0x400549>, <DisassemblerInsn "movaps" for 0x40054f>, <DisassemblerInsn "pmuludq" for 0x400552>, <DisassemblerInsn "movaps" for 0x400556>, <DisassemblerInsn "pmuludq" for 0x400559>, <DisassemblerInsn "pmuludq" for 0x40055e>, <DisassemblerInsn "pshufd" for 0x400563>, <DisassemblerInsn "pshufd" for 0x400568>, <DisassemblerInsn "pmuludq" for 0x40056e>, <DisassemblerInsn "pshufd" for 0x400573>, <DisassemblerInsn "punpckldq" for 0x400578>, <DisassemblerInsn "pmuludq" for 0x40057c>, <DisassemblerInsn "pshufd" for 0x400580>, <DisassemblerInsn "pshufd" for 0x400585>, <DisassemblerInsn "pmuludq" for 0x40058a>, <DisassemblerInsn "pshufd" for 0x40058e>, <DisassemblerInsn "punpckldq" for 0x400593>, <DisassemblerInsn "paddd" for 0x400597>, <DisassemblerInsn "paddd" for 0x40059b>, <DisassemblerInsn "pslld" for 0x40059f>, <DisassemblerInsn "psrad" for 0x4005a4>, <DisassemblerInsn "pslld" for 0x4005a9>, <DisassemblerInsn "psrad" for 0x4005ae>, <DisassemblerInsn "packssdw" for 0x4005b3>, <DisassemblerInsn "movups" for 0x4005b7>, <DisassemblerInsn "movups" for 0x4005be>, <DisassemblerInsn "movaps" for 0x4005c2>, <DisassemblerInsn "punpckhwd" for 0x4005c6>, <DisassemblerInsn "punpcklwd" for 0x4005cb>, <DisassemblerInsn "movups" for 0x4005cf>, <DisassemblerInsn "movaps" for 0x4005d4>, <DisassemblerInsn "punpcklwd" for 0x4005d8>, <DisassemblerInsn "punpckhwd" for 0x4005dc>, <DisassemblerInsn "pshufd" for 0x4005e1>, <DisassemblerInsn "movaps" for 0x4005e6>, <DisassemblerInsn "pmuludq" for 0x4005e9>, <DisassemblerInsn "movaps" for 0x4005ed>, <DisassemblerInsn "pmuludq" for 0x4005f0>, <DisassemblerInsn "pshufd" for 0x4005f4>, <DisassemblerInsn "movaps" for 0x4005fa>, <DisassemblerInsn "pmuludq" for 0x4005fd>, <DisassemblerInsn "movaps" for 0x400601>, <DisassemblerInsn "pmuludq" for 0x400604>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "mov" for 0x40116e>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "cmp" for 0x401182>, <DisassemblerInsn "mov" for 0x401185>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "jle" for 0x40118d>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a2>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011b2>, <DisassemblerInsn "call" for 0x4011b4>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>, <DisassemblerInsn "pmuludq" for 0x4003e8>, <DisassemblerInsn "movaps" for 0x4003ec>, <DisassemblerInsn "pmuludq" for 0x4003ef>, <DisassemblerInsn "pshufd" for 0x4003f3>, <DisassemblerInsn "movaps" for 0x4003f9>, <DisassemblerInsn "pmuludq" for 0x4003fc>, <DisassemblerInsn "movaps" for 0x400400>, <DisassemblerInsn "pmuludq" for 0x400403>, <DisassemblerInsn "pmuludq" for 0x400408>, <DisassemblerInsn "pshufd" for 0x40040d>, <DisassemblerInsn "pshufd" for 0x400412>, <DisassemblerInsn "pmuludq" for 0x400418>, <DisassemblerInsn "pshufd" for 0x40041d>, <DisassemblerInsn "punpckldq" for 0x400422>, <DisassemblerInsn "pmuludq" for 0x400426>, <DisassemblerInsn "pshufd" for 0x40042a>, <DisassemblerInsn "pshufd" for 0x40042f>, <DisassemblerInsn "pmuludq" for 0x400434>, <DisassemblerInsn "pshufd" for 0x400438>, <DisassemblerInsn "punpckldq" for 0x40043d>, <DisassemblerInsn "paddd" for 0x400441>, <DisassemblerInsn "paddd" for 0x400445>, <DisassemblerInsn "pslld" for 0x400449>, <DisassemblerInsn "psrad" for 0x40044e>, <DisassemblerInsn "pslld" for 0x400453>, <DisassemblerInsn "psrad" for 0x400458>, <DisassemblerInsn "packssdw" for 0x40045d>, <DisassemblerInsn "movups" for 0x400461>, <DisassemblerInsn "movups" for 0x400468>, <DisassemblerInsn "movaps" for 0x40046c>, <DisassemblerInsn "punpckhwd" for 0x400470>, <DisassemblerInsn "punpcklwd" for 0x400475>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011d9>, <DisassemblerInsn "jl" for 0x4011dc>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e2>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "call" for 0x4011f4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4011b9>, <DisassemblerInsn "jl" for 0x4011bc>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df6>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "call" for 0x400e0c>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "call" for 0x40125d>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x401262>, <DisassemblerInsn "jl" for 0x401265>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "pmuludq" for 0x400609>, <DisassemblerInsn "pshufd" for 0x40060e>, <DisassemblerInsn "pshufd" for 0x400613>, <DisassemblerInsn "pmuludq" for 0x400619>, <DisassemblerInsn "pshufd" for 0x40061e>, <DisassemblerInsn "punpckldq" for 0x400623>, <DisassemblerInsn "pmuludq" for 0x400627>, <DisassemblerInsn "pshufd" for 0x40062b>, <DisassemblerInsn "pshufd" for 0x400630>, <DisassemblerInsn "pmuludq" for 0x400635>, <DisassemblerInsn "pshufd" for 0x400639>, <DisassemblerInsn "punpckldq" for 0x40063e>, <DisassemblerInsn "paddd" for 0x400642>, <DisassemblerInsn "paddd" for 0x400646>, <DisassemblerInsn "pslld" for 0x40064a>, <DisassemblerInsn "psrad" for 0x40064f>, <DisassemblerInsn "pslld" for 0x400654>, <DisassemblerInsn "psrad" for 0x400659>, <DisassemblerInsn "packssdw" for 0x40065e>, <DisassemblerInsn "movups" for 0x400662>, <DisassemblerInsn "movups" for 0x400669>, <DisassemblerInsn "movaps" for 0x40066d>, <DisassemblerInsn "punpckhwd" for 0x400670>, <DisassemblerInsn "punpcklwd" for 0x400674>, <DisassemblerInsn "movups" for 0x400678>, <DisassemblerInsn "movaps" for 0x40067c>, <DisassemblerInsn "punpcklwd" for 0x40067f>, <DisassemblerInsn "punpckhwd" for 0x400683>, <DisassemblerInsn "pshufd" for 0x400687>, <DisassemblerInsn "movaps" for 0x40068c>, <DisassemblerInsn "pmuludq" for 0x40068f>, <DisassemblerInsn "movaps" for 0x400693>, <DisassemblerInsn "pmuludq" for 0x400696>, <DisassemblerInsn "pshufd" for 0x40069a>, <DisassemblerInsn "movaps" for 0x4006a0>, <DisassemblerInsn "pmuludq" for 0x4006a3>, <DisassemblerInsn "pmuludq" for 0x4006a8>, <DisassemblerInsn "pmuludq" for 0x4006ac>, <DisassemblerInsn "pshufd" for 0x4006b0>, <DisassemblerInsn "pshufd" for 0x4006b5>, <DisassemblerInsn "pmuludq" for 0x4006ba>, <DisassemblerInsn "pshufd" for 0x4006be>, <DisassemblerInsn "punpckldq" for 0x4006c3>, <DisassemblerInsn "pmuludq" for 0x4006c7>, <DisassemblerInsn "pshufd" for 0x4006cb>, <DisassemblerInsn "pshufd" for 0x4006d0>, <DisassemblerInsn "pmuludq" for 0x4006d5>, <DisassemblerInsn "pshufd" for 0x4006d9>, <DisassemblerInsn "punpckldq" for 0x4006de>, <DisassemblerInsn "paddd" for 0x4006e2>, <DisassemblerInsn "paddd" for 0x4006e6>, <DisassemblerInsn "pslld" for 0x4006ea>, <DisassemblerInsn "psrad" for 0x4006ef>, <DisassemblerInsn "pslld" for 0x4006f4>, <DisassemblerInsn "psrad" for 0x4006f9>, <DisassemblerInsn "packssdw" for 0x4006fe>, <DisassemblerInsn "movdqu" for 0x400702>, <DisassemblerInsn "mov" for 0x40070a>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "call" for 0x4011a0>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x401469>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147b>, <DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "add" for 0x401483>, <DisassemblerInsn "mov" for 0x401486>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x40148c>, <DisassemblerInsn "add" for 0x40148e>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "cdq" for 0x401496>, <DisassemblerInsn "idiv" for 0x401497>, <DisassemblerInsn "mov" for 0x401499>, <DisassemblerInsn "mov" for 0x40149b>, <DisassemblerInsn "cmp" for 0x40149f>, <DisassemblerInsn "mov" for 0x4014a1>, <DisassemblerInsn "mov" for 0x4014a8>, <DisassemblerInsn "jl" for 0x4014af>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "lea" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "call" for 0x400e45>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "add" for 0x4014f2>, <DisassemblerInsn "pop" for 0x4014f9>, <DisassemblerInsn "pop" for 0x4014fa>, <DisassemblerInsn "pop" for 0x4014fc>, <DisassemblerInsn "ret" for 0x4014fd>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013ac>, <DisassemblerInsn "mov" for 0x4013b4>, <DisassemblerInsn "mov" for 0x4013bc>, <DisassemblerInsn "mov" for 0x4013c1>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013cb>, <DisassemblerInsn "mov" for 0x4013d0>, <DisassemblerInsn "mov" for 0x4013d5>, <DisassemblerInsn "imul" for 0x4013da>, <DisassemblerInsn "movsxd" for 0x4013de>, <DisassemblerInsn "add" for 0x4013e1>, <DisassemblerInsn "add" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013e7>, <DisassemblerInsn "imul" for 0x4013ec>, <DisassemblerInsn "movsxd" for 0x4013f0>, <DisassemblerInsn "add" for 0x4013f3>, <DisassemblerInsn "add" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x4013fc>, <DisassemblerInsn "call" for 0x4013fe>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011cf>, <DisassemblerInsn "call" for 0x4011d4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40082b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "mov" for 0x400d0f>, <DisassemblerInsn "mov" for 0x400d16>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "add" for 0x400d26>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "add" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3c>, <DisassemblerInsn "cmp" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "je" for 0x400d5b>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401431>, <DisassemblerInsn "add" for 0x401433>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "add" for 0x40143e>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "cdq" for 0x401446>, <DisassemblerInsn "idiv" for 0x401447>, <DisassemblerInsn "mov" for 0x401449>, <DisassemblerInsn "mov" for 0x40144b>, <DisassemblerInsn "cmp" for 0x40144f>, <DisassemblerInsn "jl" for 0x401451>]'}], 'cfg_block_detailed_info': [{'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e5b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x190], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~r8, qword ptr [rsp + 0xc8]>', '<mov~~r10, qword ptr [rsp + 0xc0]>', '<mov~~rbx, qword ptr [rsp + 0xb8]>', '<mov~~r9, qword ptr [rsp + 0x60]>', '<mov~~r11, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x54], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x18], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x20], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x24], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x28], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x30], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x27c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm3, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x180], xmm3>', '<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x190], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<call~~rax>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~ecx, dword ptr [rsp + 0x27c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm1, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x1f0], xmm1>', '<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x24c]>', '<mov~~dword ptr [rsp + 0x120], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<add~~rsp, 0x290>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rip + 0xffea1]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffea7]>', '<movzx~~eax, word ptr [rax]>', '<imul~~eax, ecx>', '<shr~~eax, 0xb>', '<mov~~word ptr [rdx + 0x3280], ax>', '<mov~~rax, rdx>', '<add~~rax, 0x3280>', '<add~~rax, 2>', '<add~~rdx, 0x3300>', '<mov~~rcx, qword ptr [rip + 0xffe6c]>', '<add~~rcx, 0x80>', '<cmp~~rax, rcx>', '<setb~~cl>', '<mov~~rsi, qword ptr [rip + 0xffe58]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~sil>', '<and~~cl, sil>', '<mov~~rsi, qword ptr [rip + 0xffe53]>', '<add~~rsi, 0x80>', '<cmp~~rax, rsi>', '<setb~~al>', '<mov~~rsi, qword ptr [rip + 0xffe3f]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~dl>', '<and~~al, dl>', '<or~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x220], rax>', '<jne~~0x400717>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 3>', '<call~~0x500060>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 60, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 12, 'blockInsts': ['<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rip + 0xff801]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3280>', '<add~~rcx, 2>', '<add~~rax, 0x3300>', '<mov~~rdx, qword ptr [rip + 0xff7dc]>', '<add~~rdx, 0x80>', '<cmp~~rcx, rdx>', '<setb~~cl>', '<mov~~rdx, qword ptr [rip + 0xff7c8]>', '<add~~rdx, 2>', '<cmp~~rax, rdx>', '<seta~~al>', '<and~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<jne~~0x400c2e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jmp~~0x4014eb>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x290>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x228], rdi>', '<mov~~qword ptr [rsp + 0x230], rsi>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x24c], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x258], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x264], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x268], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x270], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x27c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x288], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400830>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~rsi, rax>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3d30>', '<mov~~qword ptr [rsp + 0xa0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x40>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x44>', '<mov~~qword ptr [rsp + 0xc0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x3b50>', '<add~~rdx, 0x48>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<add~~rax, 0x1728>', '<add~~rax, 0x14b0>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x124], eax>', '<je~~0x400e11>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x120], eax>', '<je~~0x4014eb>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<call~~0x500058>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 4>', '<call~~0x500060>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 20, 'blockInsts': ['<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm0>']}, {'block_Idx': 16, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc3c]>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x127d]>', '<movaps~~xmmword ptr [rsp + 0x210], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>']}, {'block_Idx': 24, 'blockInsts': ['<movups~~xmm0, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm0>', '<punpcklwd~~xmm4, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm1, xmm3>', '<pmuludq~~xmm1, xmm0>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 0xd>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1c0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1c8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1cc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1d0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1d4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1e0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<je~~0x400d07>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rsi, qword ptr [rsp + 0x138]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401424>']}, {'block_Idx': 21, 'blockInsts': ['<movups~~xmm8, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x42]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x52]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~ecx, dword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~dword ptr [rdx], 0>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<jle~~0x401473>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0xa0]>', '<xor~~edx, edx>', '<call~~0x500060>']}, {'block_Idx': 17, 'blockInsts': ['<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x32]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>']}, {'block_Idx': 54, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 2>', '<call~~0x500060>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~dword ptr [rsp + 0x134], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 50, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rax, qword ptr [rsp + 0x228]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<jle~~0x4014b5>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x134]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<call~~0x500048>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 66, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x401457>']}, {'block_Idx': 25, 'blockInsts': ['<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm3>', '<movups~~xmm5, xmmword ptr [rdx + 0x62]>', '<movaps~~xmm7, xmm5>', '<punpckhwd~~xmm7, xmm0>', '<punpcklwd~~xmm5, xmm0>', '<movups~~xmm6, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm6>', '<punpcklwd~~xmm4, xmm0>', '<punpckhwd~~xmm6, xmm0>', '<pshufd~~xmm0, xmm5, 0xf5>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm0>', '<movaps~~xmm0, xmm1>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm8, xmm7, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm8>', '<pmuludq~~xmm1, xmm7>', '<pmuludq~~xmm1, xmm6>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm1, xmm5>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 2>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 2>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x220], rax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x58], ecx>', '<mov~~dword ptr [rsp + 0x5c], eax>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x5c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 8], edx>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, edx>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jl~~0x401161>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jmp~~0x400df6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rsp + 0x27c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x158], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x160], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x228]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x74d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<add~~rsp, 0x290>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x24]>', '<mov~~r10, qword ptr [rsp + 0x30]>', '<mov~~r11d, dword ptr [rsp + 0x3c]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 0x10], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~edx, 1>', '<call~~0x500060>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x400764>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x288]>', '<mov~~ecx, dword ptr [rsp + 0x264]>', '<mov~~rdx, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0x240]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x138], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x140], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~qword ptr [rsp + 0x150], rax>', '<je~~0x400d9a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x401193>']}], 'cfg_edge_info': [(55, 57), (16, 20), (50, 52), (67, 68), (43, 46), (4, 9), (46, 48), (5, 10), (17, 21), (74, 73), (61, 63), (73, 46), (7, 12), (35, 37), (20, 24), (38, 39), (22, 30), (11, 9), (71, 72), (64, 66), (18, 23), (28, 9), (21, 25), (23, 22), (0, 2), (31, 35), (14, 19), (9, 14), (1, 3), (50, 51), (39, 41), (54, 51), (47, 45), (72, 74), (58, 60), (12, 17), (57, 58), (13, 9), (2, 6), (36, 38), (30, 31), (51, 47), (3, 7), (57, 51), (40, 44), (54, 55), (25, 28), (51, 40), (32, 36), (29, 19), (15, 29), (43, 45), (60, 61), (14, 18), (63, 51), (71, 73), (1, 4), (10, 16), (45, 47), (24, 27), (41, 43), (66, 51), (2, 5), (45, 40), (36, 37), (68, 69), (47, 46), (63, 64), (18, 22), (52, 54), (69, 70), (27, 9), (28, 8), (0, 1), (48, 50), (19, 23), (30, 32), (29, 18), (60, 51), (70, 71), (27, 11), (39, 40), (73, 51), (9, 15), (66, 67), (6, 9)], 'cdg_edge_info': [(1, 28), (2, 27), (51, 44), (50, 52), (18, 23), (51, 47), (29, 23), (66, 51), (57, 51), (0, 2), (39, 48), (71, 50), (2, 5), (45, 40), (36, 37), (1, 3), (57, 60), (66, 69), (1, 12), (47, 46), (9, 29), (54, 55), (63, 64), (1, 21), (2, 20), (30, 36), (71, 74), (50, 51), (51, 40), (50, 54), (29, 19), (43, 45), (60, 61), (39, 41), (39, 44), (0, 1), (71, 46), (66, 68), (66, 71), (39, 50), (36, 39), (63, 51), (2, 10), (2, 16), (30, 32), (54, 51), (63, 66), (47, 45), (30, 35), (1, 17), (54, 57), (47, 48), (71, 73), (29, 18), (60, 51), (60, 63), (57, 58), (39, 40), (39, 46), (71, 72), (71, 48), (39, 43), (73, 51), (9, 15), (66, 67), (66, 70), (1, 7), (45, 44), (36, 38), (45, 47), (30, 31), (30, 37), (1, 25), (2, 24), (47, 50)], 'ddg_edge_info': [(52, 40), (16, 20), (7, 17), (67, 68), (41, 58), (70, 73), (27, 68), (24, 51), (28, 67), (47, 71), (46, 48), (12, 25), (0, 5), (17, 21), (46, 57), (74, 73), (2, 66), (39, 51), (46, 66), (51, 71), (2, 57), (0, 23), (58, 40), (24, 72), (15, 23), (32, 39), (73, 74), (52, 51), (28, 51), (67, 70), (35, 44), (0, 44), (47, 73), (27, 70), (28, 73), (28, 69), (2, 50), (46, 50), (48, 47), (73, 46), (38, 46), (0, 7), (51, 73), (0, 71), (41, 72), (0, 16), (24, 74), (10, 20), (1, 17), (27, 36), (58, 51), (24, 19), (73, 67), (61, 47), (7, 12), (25, 18), (16, 24), (7, 21), (39, 74), (25, 36), (27, 72), (0, 55), (28, 71), (3, 17), (38, 39), (22, 30), (0, 64), (39, 46), (0, 9), (48, 40), (41, 74), (24, 67), (27, 29), (61, 40), (15, 18), (27, 38), (73, 69), (1, 28), (52, 46), (28, 46), (2, 27), (18, 23), (25, 29), (0, 39), (25, 38), (47, 68), (0, 48), (28, 9), (21, 25), (38, 41), (0, 2), (31, 35), (28, 18), (2, 54), (41, 67), (23, 22), (31, 44), (46, 54), (22, 32), (5, 16), (27, 22), (51, 68), (46, 63), (24, 69), (25, 68), (1, 12), (55, 47), (58, 46), (10, 24), (1, 21), (2, 20), (25, 22), (73, 71), (61, 51), (28, 39), (1, 30), (39, 69), (0, 32), (0, 41), (47, 70), (2, 47), (3, 12), (39, 41), (3, 21), (51, 70), (41, 69), (27, 15), (1, 60), (55, 40), (24, 71), (25, 70), (25, 15), (70, 47), (0, 25), (72, 74), (55, 58), (39, 71), (27, 51), (74, 47), (47, 72), (0, 52), (67, 72), (12, 17), (28, 68), (48, 46), (0, 61), (24, 46), (51, 72), (1, 7), (24, 9), (28, 25), (24, 73), (36, 38), (25, 72), (55, 51), (70, 40), (24, 18), (0, 18), (1, 25), (0, 27), (2, 24), (39, 73), (74, 40), (0, 36), (51, 47), (41, 46), (24, 39), (52, 55), (41, 55), (38, 47), (3, 25), (41, 64), (40, 44), (27, 74), (41, 73), (27, 19), (51, 74), (2, 63), (64, 47), (25, 74), (25, 19), (28, 36), (73, 68), (27, 46), (0, 29), (70, 51), (25, 28), (0, 38), (32, 36), (74, 51), (41, 48), (15, 29), (7, 25), (12, 21), (38, 40), (51, 67), (27, 67), (70, 72), (1, 57), (64, 40), (24, 68), (1, 66), (25, 67), (55, 46), (28, 29), (2, 10), (48, 51), (27, 39), (0, 22), (28, 38), (73, 70), (47, 51), (0, 31), (39, 68), (0, 40), (15, 22), (32, 38), (67, 69), (27, 69), (41, 68), (25, 51), (1, 50), (28, 22), (5, 20), (10, 16), (64, 51), (0, 15), (25, 69), (24, 70), (36, 44), (0, 24), (73, 72), (39, 70), (2, 30), (74, 46), (24, 27), (61, 46), (29, 23), (24, 36), (41, 52), (61, 64), (41, 61), (47, 74), (27, 71), (41, 70), (28, 70), (28, 15), (2, 60), (46, 60), (25, 71), (68, 69), (47, 46), (9, 29), (39, 72), (9, 38), (51, 46), (24, 29), (58, 61), (24, 38), (69, 70), (47, 67), (27, 9), (25, 46), (27, 73), (1, 54), (28, 72), (0, 1), (27, 18), (22, 31), (1, 63), (64, 46), (0, 10), (5, 24), (25, 9), (19, 23), (9, 22), (0, 19), (25, 73), (0, 28), (9, 40), (24, 22), (15, 19), (29, 18), (64, 67), (41, 47), (32, 44), (52, 47), (25, 39), (70, 71), (47, 69), (1, 47), (0, 58), (28, 74), (0, 3), (28, 19), (51, 69), (48, 52), (38, 51), (0, 12), (73, 51), (9, 15), (39, 67), (24, 15), (58, 47), (70, 46)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_32'}, {'instIndex': 864, 'instruction': 'cmpl\t$0, (%rdx)'}, {'instIndex': 865, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 866, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'jle\t.LBB1_31'}, {'instIndex': 905, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 906, 'instruction': 'jl\t.LBB1_30'}, {'instIndex': 1007, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1008, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1009, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 1011, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1012, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1013, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1014, 'instruction': 'cltd'}, {'instIndex': 1015, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1016, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1018, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1019, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1022, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1023, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1024, 'instruction': 'movl\t%ecx, 0x58(%rsp)                  # 4-byte Spill'}, {'instIndex': 1025, 'instruction': 'movl\t%eax, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1029, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1030, 'instruction': 'movl\t%edx, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 1032, 'instruction': 'movl\t%ecx, %eax'}, {'instIndex': 1033, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1034, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1035, 'instruction': 'cltd'}, {'instIndex': 1036, 'instruction': 'idivl\t%esi'}, {'instIndex': 1037, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 1038, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 1039, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 1040, 'instruction': 'movl\t%ecx, 0xe0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1041, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1042, 'instruction': 'jl\t.LBB1_20'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.s---tqi_decode_init---after
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.s---tqi_decode_frame---after
function id: 1
function flag: True
There are 450 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 210, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 211, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 212, 'instruction': 'movq\t%rdx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 213, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 214, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 215, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 217, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 218, 'instruction': 'jle\t.LBB1_24'}, {'instIndex': 282, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 283, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 408, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 409, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 410, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 412, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 413, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 414, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 415, 'instruction': 'cltd'}, {'instIndex': 416, 'instruction': 'idivl\t%ecx'}, {'instIndex': 417, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 418, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 419, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 420, 'instruction': 'jl\t.LBB1_17'}, {'instIndex': 423, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 424, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 425, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 427, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 428, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 429, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 430, 'instruction': 'cltd'}, {'instIndex': 431, 'instruction': 'idivl\t%ecx'}, {'instIndex': 432, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 433, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 434, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 435, 'instruction': 'jl\t.LBB1_16'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.o---after
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 61 nodes and 98 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 61 nodes and 98 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 450 instructions in binary file.
[4195504, 4195721, 4196071, 4196637, 4196685]
The execution time of patched subCFG information extraction via angr: 0:00:01.511508
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "call" for 0x40070a>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400955>, <DisassemblerInsn "mov" for 0x40095d>, <DisassemblerInsn "add" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "add" for 0x400969>, <DisassemblerInsn "mov" for 0x40096c>, <DisassemblerInsn "cdq" for 0x400971>, <DisassemblerInsn "idiv" for 0x400972>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "cmp" for 0x400979>, <DisassemblerInsn "jl" for 0x40097b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400981>, <DisassemblerInsn "mov" for 0x400989>, <DisassemblerInsn "mov" for 0x400991>, <DisassemblerInsn "mov" for 0x400999>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "call" for 0x4009a4>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "cqo" for 0x40049c>, <DisassemblerInsn "idiv" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a1>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "call" for 0x4004ae>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ec>, <DisassemblerInsn "mov" for 0x4006f1>, <DisassemblerInsn "cmp" for 0x4006f7>, <DisassemblerInsn "jle" for 0x4006fa>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "add" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "add" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c7>, <DisassemblerInsn "add" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d6>, <DisassemblerInsn "add" for 0x4005d9>, <DisassemblerInsn "add" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "mov" for 0x4005ec>, <DisassemblerInsn "add" for 0x4005ef>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "add" for 0x400601>, <DisassemblerInsn "add" for 0x400608>, <DisassemblerInsn "mov" for 0x40060c>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "add" for 0x400617>, <DisassemblerInsn "add" for 0x40061e>, <DisassemblerInsn "mov" for 0x400622>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "add" for 0x40062d>, <DisassemblerInsn "add" for 0x400634>, <DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "add" for 0x400643>, <DisassemblerInsn "add" for 0x40064a>, <DisassemblerInsn "mov" for 0x40064e>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "add" for 0x400659>, <DisassemblerInsn "add" for 0x400660>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "add" for 0x400672>, <DisassemblerInsn "add" for 0x400679>, <DisassemblerInsn "mov" for 0x400680>, <DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "add" for 0x40068b>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400699>, <DisassemblerInsn "mov" for 0x4006a1>, <DisassemblerInsn "add" for 0x4006a4>, <DisassemblerInsn "add" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006b2>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006bd>, <DisassemblerInsn "add" for 0x4006c4>, <DisassemblerInsn "mov" for 0x4006cb>, <DisassemblerInsn "add" for 0x4006d3>, <DisassemblerInsn "add" for 0x4006d9>, <DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ec>, <DisassemblerInsn "mov" for 0x4006f1>, <DisassemblerInsn "cmp" for 0x4006f7>, <DisassemblerInsn "jle" for 0x4006fa>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "mov" for 0x4004c8>, <DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "sar" for 0x4004dd>, <DisassemblerInsn "xor" for 0x4004e0>, <DisassemblerInsn "cmp" for 0x4004e2>, <DisassemblerInsn "cmovl" for 0x4004e6>, <DisassemblerInsn "xor" for 0x4004ea>, <DisassemblerInsn "cmp" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmovl" for 0x4004f4>, <DisassemblerInsn "xor" for 0x4004f8>, <DisassemblerInsn "cmp" for 0x4004fb>, <DisassemblerInsn "cmovl" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "movsxd" for 0x400519>, <DisassemblerInsn "add" for 0x40051c>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "add" for 0x400551>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "mov" for 0x400560>, <DisassemblerInsn "add" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "cmp" for 0x40057c>, <DisassemblerInsn "jle" for 0x400583>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400756>, <DisassemblerInsn "jl" for 0x400759>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40091d>, <DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "add" for 0x400929>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400930>, <DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "add" for 0x400934>, <DisassemblerInsn "mov" for 0x400937>, <DisassemblerInsn "cdq" for 0x40093c>, <DisassemblerInsn "idiv" for 0x40093d>, <DisassemblerInsn "mov" for 0x40093f>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "cmp" for 0x400945>, <DisassemblerInsn "jl" for 0x400947>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "mov" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "and" for 0x40088f>, <DisassemblerInsn "cmp" for 0x400894>, <DisassemblerInsn "jne" for 0x400897>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f9>, <DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400909>, <DisassemblerInsn "mov" for 0x40090e>, <DisassemblerInsn "mov" for 0x400916>, <DisassemblerInsn "mov" for 0x400919>, <DisassemblerInsn "call" for 0x40091b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006e7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x190]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdi, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x40094d>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x40094d>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x400981>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40094d>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x400700>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x40091d>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}], 'cfg_edge_info': [(37, 39), (23, 26), (25, 22), (40, 39), (21, 22), (27, 26), (30, 25), (23, 25), (39, 26), (25, 27), (27, 25), (39, 25), (21, 23), (20, 21)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4195504, 4195721, 4196071, 4196637, 4196685]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_after/Os/eatqi.o---after
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4195504, 4195721, 4196071, 4196637, 4196685]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 46 nodes and 68 edges in CFGEmulated.
It has 45 nodes and 71 edges in CDG.
It has 1631 nodes and 2379 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195504, 4195721, 4196071, 4196637, 4196685]
{4196096, 4196737, 4196481, 4195329, 4195075, 4195721, 4196108, 4196367, 4196117, 4195100, 4196509, 4196637, 4195228, 4194853, 4194728, 4196777, 4196137, 4194989, 4195504, 4196401, 4194482, 4196791, 4195255, 4195387, 4194891, 4196685, 4195280, 4195285, 4196182, 4195193, 4196191, 4196447, 4196193, 4195174, 4196071, 4195432, 4195312, 4194674, 4196601}
[10, 12, 5, 20, 26, 41, 32, 40, 9, 33, 15, 23, 29, 43, 17, 44, 30, 3, 8, 11, 1, 2, 24, 7, 21, 36, 39, 42, 22, 16, 31, 14, 45, 6, 37, 35, 0, 25, 4, 28, 38]
The execution time of patched slicing information extraction via angr: 0:00:05.045064
{'tqi_decode_init': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400370>, <DisassemblerInsn "jmp" for 0x400377>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "call" for 0x4003b2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x40025b>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "movzx" for 0x400269>, <DisassemblerInsn "imul" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "add" for 0x400277>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "shr" for 0x400281>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "cmp" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "jne" for 0x4002ab>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "jmp" for 0x4003fc>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "add" for 0x40059c>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "add" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c7>, <DisassemblerInsn "add" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005d1>, <DisassemblerInsn "mov" for 0x4005d6>, <DisassemblerInsn "add" for 0x4005d9>, <DisassemblerInsn "add" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "mov" for 0x4005ec>, <DisassemblerInsn "add" for 0x4005ef>, <DisassemblerInsn "mov" for 0x4005f6>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "add" for 0x400601>, <DisassemblerInsn "add" for 0x400608>, <DisassemblerInsn "mov" for 0x40060c>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "add" for 0x400617>, <DisassemblerInsn "add" for 0x40061e>, <DisassemblerInsn "mov" for 0x400622>, <DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "add" for 0x40062d>, <DisassemblerInsn "add" for 0x400634>, <DisassemblerInsn "mov" for 0x400638>, <DisassemblerInsn "mov" for 0x400640>, <DisassemblerInsn "add" for 0x400643>, <DisassemblerInsn "add" for 0x40064a>, <DisassemblerInsn "mov" for 0x40064e>, <DisassemblerInsn "mov" for 0x400656>, <DisassemblerInsn "add" for 0x400659>, <DisassemblerInsn "add" for 0x400660>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x40066f>, <DisassemblerInsn "add" for 0x400672>, <DisassemblerInsn "add" for 0x400679>, <DisassemblerInsn "mov" for 0x400680>, <DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "add" for 0x40068b>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400699>, <DisassemblerInsn "mov" for 0x4006a1>, <DisassemblerInsn "add" for 0x4006a4>, <DisassemblerInsn "add" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006b2>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "add" for 0x4006bd>, <DisassemblerInsn "add" for 0x4006c4>, <DisassemblerInsn "mov" for 0x4006cb>, <DisassemblerInsn "add" for 0x4006d3>, <DisassemblerInsn "add" for 0x4006d9>, <DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ec>, <DisassemblerInsn "mov" for 0x4006f1>, <DisassemblerInsn "cmp" for 0x4006f7>, <DisassemblerInsn "jle" for 0x4006fa>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "add" for 0x40087b>, <DisassemblerInsn "call" for 0x40087f>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40070c>, <DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "jmp" for 0x400713>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400831>, <DisassemblerInsn "mov" for 0x400836>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "mov" for 0x400846>, <DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "shl" for 0x40084f>, <DisassemblerInsn "movsxd" for 0x400852>, <DisassemblerInsn "add" for 0x400855>, <DisassemblerInsn "mov" for 0x400858>, <DisassemblerInsn "call" for 0x40085d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400379>, <DisassemblerInsn "mov" for 0x400381>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038f>, <DisassemblerInsn "cmp" for 0x400391>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "je" for 0x40039a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "add" for 0x40073e>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "shl" for 0x400748>, <DisassemblerInsn "add" for 0x40074c>, <DisassemblerInsn "mov" for 0x40074f>, <DisassemblerInsn "call" for 0x400751>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003d0>, <DisassemblerInsn "jge" for 0x4003d3>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "cqo" for 0x40049c>, <DisassemblerInsn "idiv" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a1>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "call" for 0x4004ae>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "call" for 0x40070a>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089d>, <DisassemblerInsn "mov" for 0x4008a5>, <DisassemblerInsn "mov" for 0x4008ad>, <DisassemblerInsn "mov" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "mov" for 0x4008bf>, <DisassemblerInsn "mov" for 0x4008c4>, <DisassemblerInsn "mov" for 0x4008c9>, <DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "imul" for 0x4008d3>, <DisassemblerInsn "movsxd" for 0x4008d7>, <DisassemblerInsn "add" for 0x4008da>, <DisassemblerInsn "add" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "imul" for 0x4008e5>, <DisassemblerInsn "movsxd" for 0x4008e9>, <DisassemblerInsn "add" for 0x4008ec>, <DisassemblerInsn "add" for 0x4008ef>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008f5>, <DisassemblerInsn "call" for 0x4008f7>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400401>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "add" for 0x400414>, <DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "add" for 0x400423>, <DisassemblerInsn "add" for 0x40042a>, <DisassemblerInsn "mov" for 0x40042e>, <DisassemblerInsn "call" for 0x400436>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40091d>, <DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "add" for 0x400929>, <DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400930>, <DisassemblerInsn "mov" for 0x400932>, <DisassemblerInsn "add" for 0x400934>, <DisassemblerInsn "mov" for 0x400937>, <DisassemblerInsn "cdq" for 0x40093c>, <DisassemblerInsn "idiv" for 0x40093d>, <DisassemblerInsn "mov" for 0x40093f>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "cmp" for 0x400945>, <DisassemblerInsn "jl" for 0x400947>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a9>, <DisassemblerInsn "mov" for 0x4009b0>, <DisassemblerInsn "mov" for 0x4009b7>, <DisassemblerInsn "add" for 0x4009be>, <DisassemblerInsn "pop" for 0x4009c5>, <DisassemblerInsn "pop" for 0x4009c6>, <DisassemblerInsn "pop" for 0x4009c8>, <DisassemblerInsn "ret" for 0x4009c9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b7>, <DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "movzx" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "movzx" for 0x40018b>, <DisassemblerInsn "imul" for 0x40018e>, <DisassemblerInsn "shr" for 0x400191>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "movzx" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "movzx" for 0x4001d1>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "imul" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "add" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "shr" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "add" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "cmp" for 0x400211>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "je" for 0x40021d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x40025b>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "movzx" for 0x400269>, <DisassemblerInsn "imul" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "add" for 0x400277>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "shr" for 0x400281>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "cmp" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "jne" for 0x4002ab>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "mov" for 0x4004c8>, <DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "sar" for 0x4004dd>, <DisassemblerInsn "xor" for 0x4004e0>, <DisassemblerInsn "cmp" for 0x4004e2>, <DisassemblerInsn "cmovl" for 0x4004e6>, <DisassemblerInsn "xor" for 0x4004ea>, <DisassemblerInsn "cmp" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmovl" for 0x4004f4>, <DisassemblerInsn "xor" for 0x4004f8>, <DisassemblerInsn "cmp" for 0x4004fb>, <DisassemblerInsn "cmovl" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "movsxd" for 0x400519>, <DisassemblerInsn "add" for 0x40051c>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "add" for 0x400551>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "mov" for 0x400560>, <DisassemblerInsn "add" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "cmp" for 0x40057c>, <DisassemblerInsn "jle" for 0x400583>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "je" for 0x400364>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "cmp" for 0x400457>, <DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "je" for 0x400462>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40075f>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40080f>, <DisassemblerInsn "mov" for 0x400817>, <DisassemblerInsn "mov" for 0x40081c>, <DisassemblerInsn "mov" for 0x400824>, <DisassemblerInsn "mov" for 0x400828>, <DisassemblerInsn "add" for 0x40082b>, <DisassemblerInsn "call" for 0x40082f>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "mov" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "and" for 0x40088f>, <DisassemblerInsn "cmp" for 0x400894>, <DisassemblerInsn "jne" for 0x400897>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b7>, <DisassemblerInsn "add" for 0x4009be>, <DisassemblerInsn "pop" for 0x4009c5>, <DisassemblerInsn "pop" for 0x4009c6>, <DisassemblerInsn "pop" for 0x4009c8>, <DisassemblerInsn "ret" for 0x4009c9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d5>, <DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "lea" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "call" for 0x4003eb>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ec>, <DisassemblerInsn "mov" for 0x4006f1>, <DisassemblerInsn "cmp" for 0x4006f7>, <DisassemblerInsn "jle" for 0x4006fa>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400331>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "je" for 0x400364>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f9>, <DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400909>, <DisassemblerInsn "mov" for 0x40090e>, <DisassemblerInsn "mov" for 0x400916>, <DisassemblerInsn "mov" for 0x400919>, <DisassemblerInsn "call" for 0x40091b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "movzx" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "movzx" for 0x4001d1>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "imul" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "add" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "shr" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "add" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "cmp" for 0x400211>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "je" for 0x40021d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400715>, <DisassemblerInsn "add" for 0x40071a>, <DisassemblerInsn "cmp" for 0x40071e>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "je" for 0x400727>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400756>, <DisassemblerInsn "jl" for 0x400759>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000b2>, <DisassemblerInsn "push" for 0x4000b3>, <DisassemblerInsn "push" for 0x4000b5>, <DisassemblerInsn "sub" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "mov" for 0x4000d8>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "cdqe" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "movzx" for 0x400104>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "add" for 0x400111>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "add" for 0x400127>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "movzx" for 0x400136>, <DisassemblerInsn "imul" for 0x40013a>, <DisassemblerInsn "add" for 0x40013d>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "add" for 0x40014d>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x400165>, <DisassemblerInsn "jne" for 0x40016c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400981>, <DisassemblerInsn "mov" for 0x400989>, <DisassemblerInsn "mov" for 0x400991>, <DisassemblerInsn "mov" for 0x400999>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "call" for 0x4009a4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "add" for 0x4002cc>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "add" for 0x4002db>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "cmp" for 0x4002ea>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "je" for 0x400301>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400955>, <DisassemblerInsn "mov" for 0x40095d>, <DisassemblerInsn "add" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "add" for 0x400969>, <DisassemblerInsn "mov" for 0x40096c>, <DisassemblerInsn "cdq" for 0x400971>, <DisassemblerInsn "idiv" for 0x400972>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "mov" for 0x400976>, <DisassemblerInsn "cmp" for 0x400979>, <DisassemblerInsn "jl" for 0x40097b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "mov" for 0x40077e>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "mov" for 0x400793>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "mov" for 0x4007a3>, <DisassemblerInsn "mov" for 0x4007ab>, <DisassemblerInsn "mov" for 0x4007ad>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b4>, <DisassemblerInsn "mov" for 0x4007b7>, <DisassemblerInsn "shl" for 0x4007b9>, <DisassemblerInsn "imul" for 0x4007bc>, <DisassemblerInsn "movsxd" for 0x4007c0>, <DisassemblerInsn "add" for 0x4007c3>, <DisassemblerInsn "mov" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "shl" for 0x4007cc>, <DisassemblerInsn "movsxd" for 0x4007cf>, <DisassemblerInsn "add" for 0x4007d2>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "shl" for 0x4007e2>, <DisassemblerInsn "mov" for 0x4007e6>, <DisassemblerInsn "mov" for 0x4007eb>, <DisassemblerInsn "mov" for 0x4007ee>, <DisassemblerInsn "shl" for 0x4007f3>, <DisassemblerInsn "movsxd" for 0x4007f7>, <DisassemblerInsn "mov" for 0x4007fa>, <DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "mov" for 0x400802>, <DisassemblerInsn "mov" for 0x400807>, <DisassemblerInsn "mov" for 0x400809>, <DisassemblerInsn "call" for 0x40080d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<jmp~~0x40039c>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x124]>', '<mov~~rdi, qword ptr [rsp + 0x118]>', '<mov~~edx, dword ptr [rsp + 0x114]>', '<call~~0x500048>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rsi, qword ptr [rip + 0xffdd7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x14c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x150], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x154], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x158], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x160], rax>', '<jne~~0x40024b>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x110], eax>', '<jmp~~0x4009b7>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x188]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x40094d>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 32, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jmp~~0x400729>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<call~~rax>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x114], eax>', '<je~~0x4003b7>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rsi, rdi>', '<add~~rsi, 0x3d30>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<add~~rsi, rcx>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400401>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdi, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~r9d, dword ptr [rsp + 0x18]>', '<mov~~r8d, dword ptr [rsp + 0x1c]>', '<mov~~r10, qword ptr [rsp + 0x28]>', '<mov~~r11d, dword ptr [rsp + 0x34]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 8], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<call~~0x500058>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x400700>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1ac]>', '<mov~~dword ptr [rsp + 0x110], eax>', '<mov~~eax, dword ptr [rsp + 0x110]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001a8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rip + 0xffeaf]>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rcx, qword ptr [rip + 0xffeb5]>', '<movzx~~ecx, word ptr [rcx]>', '<imul~~ecx, edx>', '<shr~~ecx, 0xb>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x180], rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rsi, qword ptr [rip + 0xffe6a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe6f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x168], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x170], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x174], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x180], rax>', '<je~~0x4002ad>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rip + 0xffe0c]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rsi, qword ptr [rip + 0xffdd7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x14c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x150], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x154], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x158], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x160], rax>', '<jne~~0x40024b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x400981>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400379>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x110], eax>', '<je~~0x4009b7>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x400715>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x40091d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x110]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x655]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x40094d>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400379>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rsi, qword ptr [rip + 0xffe6a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe6f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x168], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x170], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x174], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x180], rax>', '<je~~0x4002ad>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<add~~rax, 1>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x58], rax>', '<je~~0x400761>']}, {'block_Idx': 35, 'blockInsts': ['<cmp~~eax, 0>', '<jl~~0x40094d>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1f0>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x188], rdi>', '<mov~~qword ptr [rsp + 0x190], rsi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x1b8], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x1c4], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x1c8], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x1d0], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x1dc], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x1e0], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400225>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x190]>', '<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x128], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<je~~0x400340>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006e7>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rdx, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~r8, qword ptr [rsp + 0xa0]>', '<mov~~r10, qword ptr [rsp + 0x98]>', '<mov~~rbx, qword ptr [rsp + 0x90]>', '<mov~~r9, qword ptr [rsp + 0x60]>', '<mov~~r11, qword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x10], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x18], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x1c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x20], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x28], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<call~~qword ptr [rax]>']}], 'cfg_edge_info': [(16, 20), (35, 36), (5, 4), (21, 22), (14, 10), (29, 32), (31, 29), (0, 2), (40, 41), (17, 21), (9, 11), (37, 33), (10, 12), (36, 37), (2, 5), (1, 3), (44, 29), (15, 17), (41, 42), (24, 26), (32, 33), (33, 35), (7, 10), (42, 44), (26, 29), (14, 9), (43, 45), (4, 8), (3, 6), (20, 22), (31, 28), (23, 24), (0, 1), (8, 14), (2, 4), (37, 38), (6, 4), (44, 28), (24, 25), (15, 16), (7, 9), (35, 28), (42, 43), (26, 28), (25, 30), (12, 11), (4, 7), (21, 23), (5, 5), (38, 39), (39, 40), (9, 12), (1, 4), (45, 44), (28, 25), (11, 15), (28, 31), (6, 3)], 'cdg_edge_info': [(15, 21), (24, 30), (42, 45), (24, 33), (35, 36), (21, 22), (14, 10), (31, 32), (31, 29), (31, 35), (0, 2), (1, 6), (2, 5), (28, 30), (37, 33), (37, 42), (37, 39), (42, 29), (42, 35), (42, 32), (15, 17), (24, 26), (15, 20), (24, 35), (24, 29), (42, 44), (24, 32), (14, 9), (4, 8), (21, 24), (14, 12), (31, 28), (4, 14), (0, 1), (37, 35), (37, 38), (37, 41), (44, 28), (15, 16), (24, 25), (35, 28), (42, 43), (15, 22), (26, 28), (35, 37), (21, 23), (5, 5), (31, 33), (9, 12), (28, 25), (37, 40), (28, 31), (6, 6), (42, 33)], 'ddg_edge_info': [(16, 20), (44, 45), (1, 40), (26, 39), (24, 42), (2, 39), (29, 32), (5, 10), (45, 28), (31, 29), (8, 9), (0, 5), (31, 38), (17, 21), (40, 41), (23, 25), (0, 14), (17, 30), (2, 11), (37, 33), (5, 28), (0, 23), (6, 11), (33, 29), (1, 24), (41, 42), (44, 29), (33, 38), (44, 38), (24, 44), (1, 42), (2, 41), (5, 44), (8, 11), (6, 41), (31, 40), (4, 23), (5, 21), (17, 23), (0, 16), (2, 4), (11, 16), (1, 8), (5, 39), (6, 4), (33, 31), (24, 28), (41, 44), (44, 40), (1, 44), (2, 43), (38, 39), (5, 14), (23, 29), (9, 12), (31, 42), (4, 25), (5, 23), (6, 43), (0, 9), (1, 10), (41, 28), (1, 28), (0, 30), (44, 42), (2, 45), (45, 25), (38, 41), (0, 2), (23, 31), (6, 45), (31, 44), (1, 21), (28, 39), (33, 35), (2, 29), (1, 39), (2, 38), (14, 12), (5, 9), (6, 29), (31, 28), (23, 24), (38, 43), (26, 41), (4, 11), (6, 38), (1, 14), (33, 28), (44, 28), (0, 25), (1, 23), (28, 41), (33, 37), (16, 30), (2, 40), (29, 33), (5, 11), (20, 30), (23, 26), (26, 43), (31, 39), (6, 40), (41, 25), (2, 24), (5, 41), (28, 43), (2, 42), (6, 24), (5, 4), (24, 39), (26, 45), (23, 28), (6, 42), (10, 12), (1, 9), (0, 11), (2, 8), (28, 45), (6, 8), (5, 43), (26, 29), (14, 9), (43, 45), (4, 8), (24, 41), (26, 38), (38, 40), (6, 44), (0, 4), (1, 11), (28, 29), (2, 10), (28, 38), (5, 45), (2, 28), (6, 10), (26, 31), (6, 28), (1, 41), (24, 43), (26, 40), (8, 10), (45, 29), (1, 4), (0, 6), (11, 15), (5, 29), (0, 24), (2, 21), (5, 38), (28, 40), (0, 33), (0, 42), (41, 43), (6, 21), (44, 39), (24, 45), (1, 43), (6, 39), (8, 12), (45, 31), (1, 6), (0, 8), (31, 41), (17, 24), (2, 5), (0, 17), (2, 14), (11, 17), (0, 26), (5, 40), (28, 42), (2, 23), (6, 14), (32, 33), (24, 29), (6, 23), (44, 41), (24, 38), (4, 14), (1, 45), (21, 30), (26, 44), (2, 44), (0, 1), (8, 14), (0, 10), (31, 43), (5, 24), (41, 29), (28, 44), (5, 42), (33, 25), (1, 29), (12, 11), (25, 30), (44, 43), (1, 38), (21, 23), (24, 40), (5, 8), (39, 40), (0, 12), (2, 9), (45, 44), (31, 45), (0, 21), (41, 31), (6, 9)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 210, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 211, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 212, 'instruction': 'movq\t%rdx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 213, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 214, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 215, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 217, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 218, 'instruction': 'jle\t.LBB1_24'}, {'instIndex': 282, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 283, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 408, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 409, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 410, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 412, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 413, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 414, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 415, 'instruction': 'cltd'}, {'instIndex': 416, 'instruction': 'idivl\t%ecx'}, {'instIndex': 417, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 418, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 419, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 420, 'instruction': 'jl\t.LBB1_17'}, {'instIndex': 423, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 424, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 425, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 427, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 428, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 429, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 430, 'instruction': 'cltd'}, {'instIndex': 431, 'instruction': 'idivl\t%ecx'}, {'instIndex': 432, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 433, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 434, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 435, 'instruction': 'jl\t.LBB1_16'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c---a/libavcodec/eatqi.c
The case of compiler gcc with optimization no.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/no/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/no/eatqi_gcc.s---tqi_decode_init---before
function id: 76
function flag: True
There are 43 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/no/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/no/eatqi_gcc.s---tqi_decode_frame---before
function id: 80
function flag: True
There are 211 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L33'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L34'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 161, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 164, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 165, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 166, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 168, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 169, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 173, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 175, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 176, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 177, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 178, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 179, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 180, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 181, 'instruction': 'jl\t.L35'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 183, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 184, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 185, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 186, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 187, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 188, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 192, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 193, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 194, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 195, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 196, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 197, 'instruction': 'jl\t.L36'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/no/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L33'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L34'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 161, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 164, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 165, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 166, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 168, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 169, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 173, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 175, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 176, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 177, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 178, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 179, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 180, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 181, 'instruction': 'jl\t.L35'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 183, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 184, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 185, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 186, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 187, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 188, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 192, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 193, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 194, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 195, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 196, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 197, 'instruction': 'jl\t.L36'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O0/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O0/eatqi_gcc.s---tqi_decode_init---before
function id: 76
function flag: True
There are 43 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O0/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O0/eatqi_gcc.s---tqi_decode_frame---before
function id: 80
function flag: True
There are 211 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L33'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L34'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 161, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 164, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 165, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 166, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 168, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 169, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 173, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 175, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 176, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 177, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 178, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 179, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 180, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 181, 'instruction': 'jl\t.L35'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 183, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 184, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 185, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 186, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 187, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 188, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 192, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 193, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 194, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 195, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 196, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 197, 'instruction': 'jl\t.L36'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O0/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 42, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 148, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 149, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 150, 'instruction': 'jmp\t.L33'}, {'instIndex': 151, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 152, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 153, 'instruction': 'jmp\t.L34'}, {'instIndex': 154, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 155, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 156, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 157, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 158, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 159, 'instruction': 'call\ttqi_decode_mb'}, {'instIndex': 160, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 161, 'instruction': 'leaq\t0x3d30(%rax), %rdx'}, {'instIndex': 162, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 163, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 164, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 165, 'instruction': 'call\ttqi_idct_put'}, {'instIndex': 166, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 167, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 168, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 169, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 170, 'instruction': 'movl\t%edx, 0x3214(%rax)'}, {'instIndex': 171, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 172, 'instruction': 'movl\t0x3214(%rax), %edx'}, {'instIndex': 173, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 174, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 175, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 176, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 177, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 178, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 179, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 180, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 181, 'instruction': 'jl\t.L35'}, {'instIndex': 182, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 183, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 184, 'instruction': 'leal\t1(%rax), %edx'}, {'instIndex': 185, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 186, 'instruction': 'movl\t%edx, 0x3218(%rax)'}, {'instIndex': 187, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 188, 'instruction': 'movl\t0x3218(%rax), %edx'}, {'instIndex': 189, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 190, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 191, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 192, 'instruction': 'leal\t15(%rax), %ecx'}, {'instIndex': 193, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 194, 'instruction': 'cmovs\t%ecx, %eax'}, {'instIndex': 195, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 196, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 197, 'instruction': 'jl\t.L36'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O1/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O1/eatqi_gcc.s---tqi_decode_init---before
function id: 73
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O1/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O1/eatqi_gcc.s---tqi_decode_frame---before
function id: 5
function flag: True
There are 287 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 95, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 96, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 97, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 98, 'instruction': 'jle\t.L16'}, {'instIndex': 99, 'instruction': 'leaq\t0x3d30(%r13), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, (%rsp)'}, {'instIndex': 101, 'instruction': 'jmp\t.L21'}, {'instIndex': 134, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 135, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 136, 'instruction': 'movl\t%ecx, 0x3214(%r13)'}, {'instIndex': 137, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 138, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 139, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 140, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 141, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 142, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 143, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 144, 'instruction': 'jge\t.L17'}, {'instIndex': 221, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 222, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 223, 'instruction': 'movl\t%ecx, 0x3218(%r13)'}, {'instIndex': 224, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 225, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 226, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 227, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 228, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 229, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 230, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 231, 'instruction': 'jge\t.L16'}, {'instIndex': 232, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 233, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'cmpl\t$0, 0x94(%rax)'}, {'instIndex': 235, 'instruction': 'jg\t.L20'}, {'instIndex': 236, 'instruction': 'jmp\t.L17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O1/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 95, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 96, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 97, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 98, 'instruction': 'jle\t.L16'}, {'instIndex': 99, 'instruction': 'leaq\t0x3d30(%r13), %rax'}, {'instIndex': 100, 'instruction': 'movq\t%rax, (%rsp)'}, {'instIndex': 101, 'instruction': 'jmp\t.L21'}, {'instIndex': 134, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 135, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 136, 'instruction': 'movl\t%ecx, 0x3214(%r13)'}, {'instIndex': 137, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 138, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 139, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 140, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 141, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 142, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 143, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 144, 'instruction': 'jge\t.L17'}, {'instIndex': 221, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 222, 'instruction': 'leal\t1(%rax), %ecx'}, {'instIndex': 223, 'instruction': 'movl\t%ecx, 0x3218(%r13)'}, {'instIndex': 224, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 225, 'instruction': 'movl\t0x98(%rax), %edx'}, {'instIndex': 226, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 227, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 228, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 229, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 230, 'instruction': 'cmpl\t%eax, %ecx'}, {'instIndex': 231, 'instruction': 'jge\t.L16'}, {'instIndex': 232, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 233, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'cmpl\t$0, 0x94(%rax)'}, {'instIndex': 235, 'instruction': 'jg\t.L20'}, {'instIndex': 236, 'instruction': 'jmp\t.L17'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O2/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O2/eatqi_gcc.s---tqi_decode_init---before
function id: 65
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O2/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O2/eatqi_gcc.s---tqi_decode_frame---before
function id: 5
function flag: True
There are 291 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 88, 'instruction': 'leaq\t0x3d30(%r14), %r15'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%r13), %edx'}, {'instIndex': 101, 'instruction': 'movl\t$0, 0x3218(%r14)'}, {'instIndex': 102, 'instruction': 'movq\t%rax, %r14'}, {'instIndex': 103, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 104, 'instruction': 'jle\t.L19'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 110, 'instruction': 'movl\t0x94(%r14), %eax'}, {'instIndex': 111, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 112, 'instruction': 'jle\t.L23'}, {'instIndex': 113, 'instruction': 'movq\t%r14, 0x28(%rsp)'}, {'instIndex': 190, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 191, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 192, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 194, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 195, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 196, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 197, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 198, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 199, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 200, 'instruction': 'jl\t.L22'}, {'instIndex': 201, 'instruction': 'movq\t0x28(%rsp), %r14'}, {'instIndex': 202, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 203, 'instruction': 'movl\t0x98(%r14), %edx'}, {'instIndex': 204, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 205, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 206, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 207, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 208, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 209, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 210, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 211, 'instruction': 'jl\t.L17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O2/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 88, 'instruction': 'leaq\t0x3d30(%r14), %r15'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%r13), %edx'}, {'instIndex': 101, 'instruction': 'movl\t$0, 0x3218(%r14)'}, {'instIndex': 102, 'instruction': 'movq\t%rax, %r14'}, {'instIndex': 103, 'instruction': 'testl\t%edx, %edx'}, {'instIndex': 104, 'instruction': 'jle\t.L19'}, {'instIndex': 106, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 110, 'instruction': 'movl\t0x94(%r14), %eax'}, {'instIndex': 111, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 112, 'instruction': 'jle\t.L23'}, {'instIndex': 113, 'instruction': 'movq\t%r14, 0x28(%rsp)'}, {'instIndex': 190, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 191, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 192, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 194, 'instruction': 'movl\t0x94(%rax), %edx'}, {'instIndex': 195, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 196, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 197, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 198, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 199, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 200, 'instruction': 'jl\t.L22'}, {'instIndex': 201, 'instruction': 'movq\t0x28(%rsp), %r14'}, {'instIndex': 202, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 203, 'instruction': 'movl\t0x98(%r14), %edx'}, {'instIndex': 204, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 205, 'instruction': 'leal\t0x1e(%rdx), %eax'}, {'instIndex': 206, 'instruction': 'addl\t$15, %edx'}, {'instIndex': 207, 'instruction': 'cmovns\t%edx, %eax'}, {'instIndex': 208, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 209, 'instruction': 'sarl\t$4, %eax'}, {'instIndex': 210, 'instruction': 'cmpl\t%eax, %esi'}, {'instIndex': 211, 'instruction': 'jl\t.L17'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O3/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O3/eatqi_gcc.s---tqi_decode_init---before
function id: 64
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O3/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O3/eatqi_gcc.s---tqi_decode_frame---before
function id: 5
function flag: True
There are 307 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%rax), %edi'}, {'instIndex': 97, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 98, 'instruction': 'testl\t%edi, %edi'}, {'instIndex': 99, 'instruction': 'jle\t.L25'}, {'instIndex': 101, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 102, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 103, 'instruction': 'leaq\t0x3d30(%r13), %r14'}, {'instIndex': 107, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 108, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 109, 'instruction': 'jle\t.L18'}, {'instIndex': 190, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 191, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 192, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 194, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 195, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 196, 'instruction': 'leal\t0x1e(%rax), %edx'}, {'instIndex': 197, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 198, 'instruction': 'cmovns\t%edi, %edx'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %edx'}, {'instIndex': 200, 'instruction': 'cmpl\t%edx, %esi'}, {'instIndex': 201, 'instruction': 'jl\t.L23'}, {'instIndex': 202, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 203, 'instruction': 'movl\t0x98(%rcx), %edi'}, {'instIndex': 204, 'instruction': 'movl\t0x3218(%r13), %ecx'}, {'instIndex': 205, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 206, 'instruction': 'leal\t0x1e(%rdi), %esi'}, {'instIndex': 207, 'instruction': 'leal\t1(%rcx), %edx'}, {'instIndex': 208, 'instruction': 'addl\t$15, %r8d'}, {'instIndex': 209, 'instruction': 'movl\t%edx, 0x3218(%r13)'}, {'instIndex': 210, 'instruction': 'cmovns\t%r8d, %esi'}, {'instIndex': 211, 'instruction': 'sarl\t$4, %esi'}, {'instIndex': 212, 'instruction': 'cmpl\t%edx, %esi'}, {'instIndex': 213, 'instruction': 'jg\t.L24'}, {'instIndex': 229, 'instruction': 'leal\t1(%rdx), %eax'}, {'instIndex': 230, 'instruction': 'leal\t0x1e(%rdi), %edx'}, {'instIndex': 231, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 232, 'instruction': 'cmovns\t%edi, %edx'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 234, 'instruction': 'sarl\t$4, %edx'}, {'instIndex': 235, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 236, 'instruction': 'jge\t.L25'}, {'instIndex': 237, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 238, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 239, 'instruction': 'jl\t.L26'}, {'instIndex': 240, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 241, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 242, 'instruction': 'jmp\t.L25'}, {'instIndex': 243, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 244, 'instruction': 'movl\t$8, %esi'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/O3/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 89, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 91, 'instruction': 'movl\t0x98(%rax), %edi'}, {'instIndex': 97, 'instruction': 'movl\t$0, 0x3218(%r13)'}, {'instIndex': 98, 'instruction': 'testl\t%edi, %edi'}, {'instIndex': 99, 'instruction': 'jle\t.L25'}, {'instIndex': 101, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 102, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 103, 'instruction': 'leaq\t0x3d30(%r13), %r14'}, {'instIndex': 107, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 108, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 109, 'instruction': 'jle\t.L18'}, {'instIndex': 190, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 191, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 192, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 193, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 194, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 195, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 196, 'instruction': 'leal\t0x1e(%rax), %edx'}, {'instIndex': 197, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 198, 'instruction': 'cmovns\t%edi, %edx'}, {'instIndex': 199, 'instruction': 'sarl\t$4, %edx'}, {'instIndex': 200, 'instruction': 'cmpl\t%edx, %esi'}, {'instIndex': 201, 'instruction': 'jl\t.L23'}, {'instIndex': 202, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 203, 'instruction': 'movl\t0x98(%rcx), %edi'}, {'instIndex': 204, 'instruction': 'movl\t0x3218(%r13), %ecx'}, {'instIndex': 205, 'instruction': 'movl\t%edi, %r8d'}, {'instIndex': 206, 'instruction': 'leal\t0x1e(%rdi), %esi'}, {'instIndex': 207, 'instruction': 'leal\t1(%rcx), %edx'}, {'instIndex': 208, 'instruction': 'addl\t$15, %r8d'}, {'instIndex': 209, 'instruction': 'movl\t%edx, 0x3218(%r13)'}, {'instIndex': 210, 'instruction': 'cmovns\t%r8d, %esi'}, {'instIndex': 211, 'instruction': 'sarl\t$4, %esi'}, {'instIndex': 212, 'instruction': 'cmpl\t%edx, %esi'}, {'instIndex': 213, 'instruction': 'jg\t.L24'}, {'instIndex': 229, 'instruction': 'leal\t1(%rdx), %eax'}, {'instIndex': 230, 'instruction': 'leal\t0x1e(%rdi), %edx'}, {'instIndex': 231, 'instruction': 'addl\t$15, %edi'}, {'instIndex': 232, 'instruction': 'cmovns\t%edi, %edx'}, {'instIndex': 233, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 234, 'instruction': 'sarl\t$4, %edx'}, {'instIndex': 235, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 236, 'instruction': 'jge\t.L25'}, {'instIndex': 237, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 238, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 239, 'instruction': 'jl\t.L26'}, {'instIndex': 240, 'instruction': 'movl\t$0, 0x3214(%r13)'}, {'instIndex': 241, 'instruction': 'movl\t%eax, 0x3218(%r13)'}, {'instIndex': 242, 'instruction': 'jmp\t.L25'}, {'instIndex': 243, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 244, 'instruction': 'movl\t$8, %esi'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/Os/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/Os/eatqi_gcc.s---tqi_decode_init---before
function id: 68
function flag: True
There are 32 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/Os/eatqi_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/Os/eatqi_gcc.s---tqi_decode_frame---before
function id: 5
function flag: True
There are 270 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 110, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 120, 'instruction': 'movl\t0x98(%r12), %eax'}, {'instIndex': 121, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 122, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 123, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 124, 'instruction': 'cltd'}, {'instIndex': 125, 'instruction': 'idivl\t%ecx'}, {'instIndex': 126, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 127, 'instruction': 'jle\t.L30'}, {'instIndex': 128, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 129, 'instruction': 'movl\t0x94(%r12), %eax'}, {'instIndex': 130, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 131, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 132, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 133, 'instruction': 'cltd'}, {'instIndex': 134, 'instruction': 'idivl\t%ecx'}, {'instIndex': 135, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 136, 'instruction': 'jle\t.L31'}, {'instIndex': 137, 'instruction': 'leaq\t0x3d30(%r13), %r15'}, {'instIndex': 214, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 215, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 216, 'instruction': 'jmp\t.L22'}, {'instIndex': 217, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 218, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 219, 'instruction': 'jmp\t.L18'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/gcc_before/Os/eatqi.o
Binary file does not exist.
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 22, 'instruction': 'popq\t%rdx'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'popq\t%rbx'}, {'instIndex': 25, 'instruction': 'popq\t%rbp'}, {'instIndex': 26, 'instruction': 'ret'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 110, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 120, 'instruction': 'movl\t0x98(%r12), %eax'}, {'instIndex': 121, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 122, 'instruction': 'movl\t%esi, 0x3218(%r13)'}, {'instIndex': 123, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 124, 'instruction': 'cltd'}, {'instIndex': 125, 'instruction': 'idivl\t%ecx'}, {'instIndex': 126, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 127, 'instruction': 'jle\t.L30'}, {'instIndex': 128, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 129, 'instruction': 'movl\t0x94(%r12), %eax'}, {'instIndex': 130, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 131, 'instruction': 'movl\t%esi, 0x3214(%r13)'}, {'instIndex': 132, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 133, 'instruction': 'cltd'}, {'instIndex': 134, 'instruction': 'idivl\t%ecx'}, {'instIndex': 135, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 136, 'instruction': 'jle\t.L31'}, {'instIndex': 137, 'instruction': 'leaq\t0x3d30(%r13), %r15'}, {'instIndex': 214, 'instruction': 'movl\t0x3214(%r13), %eax'}, {'instIndex': 215, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 216, 'instruction': 'jmp\t.L22'}, {'instIndex': 217, 'instruction': 'movl\t0x3218(%r13), %eax'}, {'instIndex': 218, 'instruction': 'leal\t1(%rax), %esi'}, {'instIndex': 219, 'instruction': 'jmp\t.L18'}]}]}
The case of compiler clang with optimization no.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 39 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 184 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 158, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 159, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 160, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 161, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 162, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 163, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 164, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 165, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 166, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 167, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 168, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 169, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 170, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB1_10'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 122 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 39 instructions in binary file.
[4194513]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 122 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 184 instructions in binary file.
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
The execution time of patched subCFG information extraction via angr: 0:00:01.167506
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "add" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "call" for 0x40042b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f6>, <DisassemblerInsn "add" for 0x4003fc>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "jmp" for 0x400405>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "call" for 0x4003d4>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003ef>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "add" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jmp" for 0x4003ed>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006e0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4003f1>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}], 'cfg_edge_info': [(17, 20), (26, 20), (22, 24), (24, 26), (20, 23), (17, 19), (15, 16), (25, 18), (23, 25), (26, 19), (16, 18), (19, 22), (25, 17), (16, 17)]}]}
{'tqi_decode_init': [4194513], 'tqi_decode_frame': [4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/no/eatqi.o---before
The extraction of function: tqi_decode_init
[4194513]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 121 nodes and 141 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194513]
{4194304, 4194402, 4194380, 4194445, 4194513, 4194365}
[5, 1, 7, 0, 2, 9]
The extraction of function: tqi_decode_frame
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 60 nodes and 86 edges in CFGEmulated.
It has 58 nodes and 86 edges in CDG.
It has 1652 nodes and 2582 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
{4195072, 4195338, 4194955, 4194701, 4195198, 4194843, 4194848, 4194732, 4195245, 4195376, 4195384, 4194872, 4195132, 4195267, 4194885, 4194757, 4195024, 4195289, 4194782, 4194528, 4195183, 4194927, 4195311, 4195313, 4194672, 4194812, 4194942}
[26, 28, 58, 32, 11, 27, 52, 30, 40, 51, 14, 34, 13, 36, 41, 0, 16, 29, 47, 18, 43, 23, 35, 33, 1, 15, 39, 25, 24, 44, 37, 42, 12, 20, 9, 19]
The execution time of patched slicing information extraction via angr: 0:00:06.661374
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "add" for 0x400067>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400088>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "cmp" for 0x400034>, <DisassemblerInsn "jne" for 0x40003b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfff88]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x36c], 0x15>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x36c], 0>', '<jne~~0x40004c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "jmp" for 0x400286>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x4008de>, <DisassemblerInsn "ret" for 0x4008e2>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "add" for 0x400175>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "je" for 0x40018b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "sub" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cqo" for 0x4002bf>, <DisassemblerInsn "idiv" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "call" for 0x4002ce>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x40061a>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f6>, <DisassemblerInsn "add" for 0x4003fc>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "jmp" for 0x400405>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "add" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jmp" for 0x4003ed>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001dc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "call" for 0x4001aa>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "mov" for 0x400434>, <DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "ret" for 0x400440>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "movsxd" for 0x400117>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "movzx" for 0x400151>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "movzx" for 0x400167>, <DisassemblerInsn "call" for 0x40016b>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "add" for 0x400212>, <DisassemblerInsn "call" for 0x400219>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "add" for 0x4005f2>, <DisassemblerInsn "sar" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "cmp" for 0x4005fc>, <DisassemblerInsn "jl" for 0x400601>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "add" for 0x4006cc>, <DisassemblerInsn "ret" for 0x4006d0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "jge" for 0x40021e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "call" for 0x4003d4>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "jmp" for 0x400240>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "add" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "call" for 0x40042b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b5>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "shl" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "sub" for 0x4004c4>, <DisassemblerInsn "imul" for 0x4004c6>, <DisassemblerInsn "mov" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cd>, <DisassemblerInsn "mov" for 0x4004d2>, <DisassemblerInsn "cmp" for 0x4004d6>, <DisassemblerInsn "jne" for 0x4004dd>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "call" for 0x4001f7>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400670>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "mov" for 0x400683>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "call" for 0x40068f>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "ret" for 0x400440>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "cmp" for 0x400274>, <DisassemblerInsn "jne" for 0x40027c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4006e0>, <DisassemblerInsn "mov" for 0x4006e4>, <DisassemblerInsn "mov" for 0x4006e9>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "mov" for 0x4006f3>, <DisassemblerInsn "mov" for 0x4006f8>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x400718>, <DisassemblerInsn "shl" for 0x40071e>, <DisassemblerInsn "imul" for 0x400721>, <DisassemblerInsn "movsxd" for 0x400726>, <DisassemblerInsn "add" for 0x400729>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "shl" for 0x400737>, <DisassemblerInsn "movsxd" for 0x40073a>, <DisassemblerInsn "add" for 0x40073d>, <DisassemblerInsn "mov" for 0x400740>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400756>, <DisassemblerInsn "shl" for 0x40075c>, <DisassemblerInsn "mov" for 0x40075f>, <DisassemblerInsn "imul" for 0x400764>, <DisassemblerInsn "movsxd" for 0x40076b>, <DisassemblerInsn "add" for 0x40076e>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "shl" for 0x40077c>, <DisassemblerInsn "movsxd" for 0x40077f>, <DisassemblerInsn "add" for 0x400782>, <DisassemblerInsn "mov" for 0x400785>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "mov" for 0x400796>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "shl" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a4>, <DisassemblerInsn "imul" for 0x4007a9>, <DisassemblerInsn "movsxd" for 0x4007b0>, <DisassemblerInsn "add" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bb>, <DisassemblerInsn "shl" for 0x4007c1>, <DisassemblerInsn "movsxd" for 0x4007c4>, <DisassemblerInsn "add" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007ce>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007df>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "call" for 0x4007e8>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003ef>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "cmp" for 0x4001c0>, <DisassemblerInsn "jne" for 0x4001c3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "add" for 0x40024a>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "add" for 0x400256>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "sub" for 0x400267>, <DisassemblerInsn "call" for 0x40026a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "ret" for 0x4005d1>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "lea" for 0x40022a>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "call" for 0x400233>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x400438>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4001ac>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x2b10]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 0x3d20]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x14], 0>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~qword ptr [rsp - 0x10], 0>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x14]>', '<je~~0x4001fc>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x220]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~esi, byte ptr [rax + 4]>', '<call~~0x4004b0>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x218]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~eax, dword ptr [rsp - 0x14]>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp - 0x18], eax>', '<cmp~~dword ptr [rsp - 0x18], 0>', '<jl~~0x40060a>']}, {'block_Idx': 47, 'blockInsts': ['<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400245>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006e0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xffffffff>', '<jmp~~0x400438>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<shl~~ecx, 1>', '<mov~~eax, 0xd7>', '<sub~~eax, ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0x10], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x40056d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~esi, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x1790]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~rax>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3d20], 0>', '<jne~~0x40028b>']}, {'block_Idx': 44, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x3b90]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b50]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 4>', '<imul~~ecx, dword ptr [rsp + 0x1c]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 4>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b58]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b94]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b60]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b98]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x2bd8]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4003f1>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x10]>', '<jne~~0x4001de>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<add~~rdi, 0x3d20>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d28>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<sub~~rdx, rax>', '<call~~0x500038>']}, {'block_Idx': 9, 'blockInsts': ['<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6d2]>', '<mov~~al, 0>', '<call~~0x500030>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (14, 16), (23, 25), (34, 37), (9, 11), (27, 28), (0, 11), (42, 35), (36, 43), (47, 43), (52, 36), (24, 26), (33, 32), (18, 19), (51, 52), (43, 51), (35, 41), (12, 15), (14, 15), (0, 1), (34, 36), (19, 23), (36, 39), (11, 13), (28, 29), (30, 32), (28, 32), (15, 16), (58, 51), (42, 34), (32, 35), (16, 18), (26, 25), (43, 44), (12, 14), (20, 24), (40, 42), (11, 12), (37, 40), (13, 12), (52, 37)], 'cdg_edge_info': [(52, 40), (24, 27), (32, 34), (18, 23), (52, 43), (18, 20), (34, 37), (34, 40), (34, 43), (42, 35), (52, 36), (24, 26), (52, 42), (42, 41), (18, 19), (24, 32), (18, 25), (12, 15), (14, 15), (11, 16), (34, 36), (34, 42), (11, 13), (24, 25), (42, 34), (24, 28), (32, 35), (18, 24), (32, 41), (12, 14), (11, 12), (11, 18), (52, 37)], 'ddg_edge_info': [(16, 20), (13, 42), (11, 51), (0, 51), (12, 34), (0, 14), (11, 14), (12, 52), (51, 34), (52, 42), (12, 27), (12, 36), (40, 52), (0, 16), (11, 16), (51, 36), (13, 19), (15, 16), (19, 41), (42, 52), (16, 42), (20, 24), (13, 12), (20, 26), (12, 40), (13, 14), (36, 43), (16, 19), (0, 32), (0, 41), (51, 52), (12, 15), (20, 28), (26, 41), (12, 42), (13, 16), (0, 34), (11, 43), (0, 43), (0, 52), (11, 52), (40, 42), (40, 51), (0, 27), (11, 27), (0, 36), (11, 36), (32, 34), (32, 52), (12, 28), (27, 28), (0, 11), (11, 20), (0, 20), (34, 52), (51, 40), (43, 36), (32, 36), (35, 41), (0, 13), (11, 13), (12, 51), (51, 42), (11, 40), (0, 40), (12, 14), (13, 52), (36, 35), (11, 15), (0, 15), (0, 24), (11, 24), (51, 35), (11, 42), (0, 42), (32, 40), (20, 41), (34, 40), (0, 35), (11, 35), (32, 42), (32, 51), (16, 52), (34, 42), (19, 23), (0, 19), (34, 51), (11, 28), (0, 28), (43, 35), (32, 35), (16, 18), (20, 27), (12, 32), (11, 12), (0, 12), (23, 41), (13, 15)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 158, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 159, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 160, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 161, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 162, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 163, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 164, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 165, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 166, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 167, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 168, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 169, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 170, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB1_10'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 39 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 184 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 158, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 159, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 160, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 161, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 162, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 163, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 164, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 165, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 166, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 167, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 168, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 169, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 170, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB1_10'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 122 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 39 instructions in binary file.
[4194513]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 81 nodes and 122 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 184 instructions in binary file.
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
The execution time of patched subCFG information extraction via angr: 0:00:01.215900
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "add" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "call" for 0x40042b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f6>, <DisassemblerInsn "add" for 0x4003fc>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "jmp" for 0x400405>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "call" for 0x4003d4>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003ef>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "add" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jmp" for 0x4003ed>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006e0>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4003f1>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}], 'cfg_edge_info': [(17, 20), (26, 20), (22, 24), (24, 26), (20, 23), (17, 19), (15, 16), (25, 18), (23, 25), (26, 19), (16, 18), (19, 22), (25, 17), (16, 17)]}]}
{'tqi_decode_init': [4194513], 'tqi_decode_frame': [4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O0/eatqi.o---before
The extraction of function: tqi_decode_init
[4194513]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 121 nodes and 141 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194513]
{4194304, 4194402, 4194380, 4194445, 4194513, 4194365}
[5, 1, 7, 0, 2, 9]
The extraction of function: tqi_decode_frame
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 60 nodes and 86 edges in CFGEmulated.
It has 58 nodes and 86 edges in CDG.
It has 1652 nodes and 2582 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195072, 4195132, 4195183, 4195198, 4195245, 4195267, 4195289, 4195311, 4195313]
{4195072, 4195338, 4194955, 4194701, 4195198, 4194843, 4194848, 4194732, 4195245, 4195376, 4195384, 4194872, 4195132, 4195267, 4194885, 4194757, 4195024, 4195289, 4194782, 4194528, 4195183, 4194927, 4195311, 4195313, 4194672, 4194812, 4194942}
[26, 28, 58, 32, 11, 27, 52, 30, 40, 51, 14, 34, 13, 36, 41, 0, 16, 29, 47, 18, 43, 23, 35, 33, 1, 15, 39, 25, 24, 44, 37, 42, 12, 20, 9, 19]
The execution time of patched slicing information extraction via angr: 0:00:06.643865
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400062>, <DisassemblerInsn "add" for 0x400067>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "add" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "call" for 0x400088>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "call" for 0x4000cc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "mov" for 0x400012>, <DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x40001c>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "mov" for 0x400026>, <DisassemblerInsn "mov" for 0x40002b>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "cmp" for 0x400034>, <DisassemblerInsn "jne" for 0x40003b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "add" for 0x400051>, <DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "call" for 0x40005d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000d1>, <DisassemblerInsn "add" for 0x4000d3>, <DisassemblerInsn "ret" for 0x4000d7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfff88]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x36c], 0x15>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax + 0x16d0], 1>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rsp + 8], 1>', '<mov~~dword ptr [rsp + 0xc], 0xf>', '<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~qword ptr [rax + 0x84], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x20], rdi>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax + 0x36c], 0>', '<jne~~0x40004c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<add~~rdi, 0x1728>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<call~~0x500000>']}, {'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x28>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027e>, <DisassemblerInsn "jmp" for 0x400286>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "add" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e8>, <DisassemblerInsn "mov" for 0x4002ed>, <DisassemblerInsn "sub" for 0x4002f2>, <DisassemblerInsn "shl" for 0x4002f5>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "add" for 0x4008de>, <DisassemblerInsn "ret" for 0x4008e2>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030f>, <DisassemblerInsn "mov" for 0x400314>, <DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400323>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400170>, <DisassemblerInsn "add" for 0x400175>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "je" for 0x40018b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "mov" for 0x40029c>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "sub" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002ba>, <DisassemblerInsn "cqo" for 0x4002bf>, <DisassemblerInsn "idiv" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "mov" for 0x4002cc>, <DisassemblerInsn "call" for 0x4002ce>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060a>, <DisassemblerInsn "mov" for 0x400612>, <DisassemblerInsn "mov" for 0x40061a>, <DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "mov" for 0x4003f6>, <DisassemblerInsn "add" for 0x4003fc>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "jmp" for 0x400405>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "add" for 0x4003e4>, <DisassemblerInsn "mov" for 0x4003e7>, <DisassemblerInsn "jmp" for 0x4003ed>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001dc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036f>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400383>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "add" for 0x400398>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "cdq" for 0x4003a0>, <DisassemblerInsn "idiv" for 0x4003a1>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "cmp" for 0x4003a9>, <DisassemblerInsn "jge" for 0x4003ab>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018d>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "call" for 0x4001aa>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ad>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "add" for 0x4003b7>, <DisassemblerInsn "call" for 0x4003be>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "mov" for 0x400434>, <DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "ret" for 0x400440>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f3>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "movsxd" for 0x400117>, <DisassemblerInsn "add" for 0x40011c>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "mov" for 0x40013c>, <DisassemblerInsn "movzx" for 0x400141>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "mov" for 0x40014c>, <DisassemblerInsn "movzx" for 0x400151>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x40015a>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "movzx" for 0x400167>, <DisassemblerInsn "call" for 0x40016b>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "add" for 0x400212>, <DisassemblerInsn "call" for 0x400219>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "mov" for 0x4005e5>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005ee>, <DisassemblerInsn "add" for 0x4005f2>, <DisassemblerInsn "sar" for 0x4005f5>, <DisassemblerInsn "mov" for 0x4005f8>, <DisassemblerInsn "cmp" for 0x4005fc>, <DisassemblerInsn "jl" for 0x400601>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "add" for 0x4006cc>, <DisassemblerInsn "ret" for 0x4006d0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40021b>, <DisassemblerInsn "jge" for 0x40021e>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c3>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003cd>, <DisassemblerInsn "call" for 0x4003d4>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400238>, <DisassemblerInsn "jmp" for 0x400240>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "add" for 0x40041f>, <DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "call" for 0x40042b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400623>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "mov" for 0x40062d>, <DisassemblerInsn "mov" for 0x400630>, <DisassemblerInsn "mov" for 0x400634>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "add" for 0x400640>, <DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "movsxd" for 0x400650>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "ret" for 0x40066d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b5>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "shl" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "sub" for 0x4004c4>, <DisassemblerInsn "imul" for 0x4004c6>, <DisassemblerInsn "mov" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cd>, <DisassemblerInsn "mov" for 0x4004d2>, <DisassemblerInsn "cmp" for 0x4004d6>, <DisassemblerInsn "jne" for 0x4004dd>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "call" for 0x4001f7>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400670>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "mov" for 0x40067e>, <DisassemblerInsn "mov" for 0x400683>, <DisassemblerInsn "mov" for 0x40068a>, <DisassemblerInsn "call" for 0x40068f>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400438>, <DisassemblerInsn "add" for 0x40043c>, <DisassemblerInsn "ret" for 0x400440>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "cmp" for 0x400274>, <DisassemblerInsn "jne" for 0x40027c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4006e0>, <DisassemblerInsn "mov" for 0x4006e4>, <DisassemblerInsn "mov" for 0x4006e9>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "mov" for 0x4006f3>, <DisassemblerInsn "mov" for 0x4006f8>, <DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "mov" for 0x400703>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "mov" for 0x400718>, <DisassemblerInsn "shl" for 0x40071e>, <DisassemblerInsn "imul" for 0x400721>, <DisassemblerInsn "movsxd" for 0x400726>, <DisassemblerInsn "add" for 0x400729>, <DisassemblerInsn "mov" for 0x40072c>, <DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "shl" for 0x400737>, <DisassemblerInsn "movsxd" for 0x40073a>, <DisassemblerInsn "add" for 0x40073d>, <DisassemblerInsn "mov" for 0x400740>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400751>, <DisassemblerInsn "mov" for 0x400756>, <DisassemblerInsn "shl" for 0x40075c>, <DisassemblerInsn "mov" for 0x40075f>, <DisassemblerInsn "imul" for 0x400764>, <DisassemblerInsn "movsxd" for 0x40076b>, <DisassemblerInsn "add" for 0x40076e>, <DisassemblerInsn "mov" for 0x400771>, <DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "shl" for 0x40077c>, <DisassemblerInsn "movsxd" for 0x40077f>, <DisassemblerInsn "add" for 0x400782>, <DisassemblerInsn "mov" for 0x400785>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x40078f>, <DisassemblerInsn "mov" for 0x400796>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "shl" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a4>, <DisassemblerInsn "imul" for 0x4007a9>, <DisassemblerInsn "movsxd" for 0x4007b0>, <DisassemblerInsn "add" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bb>, <DisassemblerInsn "shl" for 0x4007c1>, <DisassemblerInsn "movsxd" for 0x4007c4>, <DisassemblerInsn "add" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007ce>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007df>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "call" for 0x4007e8>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003ef>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "add" for 0x400356>, <DisassemblerInsn "mov" for 0x400359>, <DisassemblerInsn "cdq" for 0x40035e>, <DisassemblerInsn "idiv" for 0x40035f>, <DisassemblerInsn "mov" for 0x400361>, <DisassemblerInsn "mov" for 0x400363>, <DisassemblerInsn "cmp" for 0x400367>, <DisassemblerInsn "jge" for 0x400369>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b1>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001bb>, <DisassemblerInsn "cmp" for 0x4001c0>, <DisassemblerInsn "jne" for 0x4001c3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "add" for 0x40024a>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "add" for 0x400256>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "sub" for 0x400267>, <DisassemblerInsn "call" for 0x40026a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "ret" for 0x4005d1>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "lea" for 0x40022a>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "call" for 0x400233>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xfffffff4>', '<jmp~~0x400438>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<add~~rdi, 0x39b0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x3d20]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<shl~~rax, 3>', '<mov~~edx, eax>', '<call~~0x4005e0>']}, {'block_Idx': 58, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1618], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1614], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x1610], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3218], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4001ac>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x2b10]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rax + 0x3d20]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<sub~~rax, rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~dword ptr [rsp - 0x14], 0>', '<mov~~dword ptr [rsp - 0x18], 0>', '<mov~~qword ptr [rsp - 0x10], 0>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3218]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3218], ecx>', '<jmp~~0x40033c>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rax + 0x3214]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x3214], ecx>', '<jmp~~0x40037e>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x14]>', '<je~~0x4001fc>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x3214], 0>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3214]>', '<mov~~dword ptr [rsp + 8], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 8]>', '<cmp~~eax, ecx>', '<jge~~0x4003ef>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x220]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x400670>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movsxd~~rcx, dword ptr [rsp + 0x34]>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~ecx, word ptr [rax + 2]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<movzx~~esi, byte ptr [rax + 4]>', '<call~~0x4004b0>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x218]>', '<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~qword ptr [rsp - 0x10], rsi>', '<mov~~dword ptr [rsp - 0x14], edx>', '<mov~~eax, dword ptr [rsp - 0x14]>', '<add~~eax, 7>', '<sar~~eax, 3>', '<mov~~dword ptr [rsp - 0x18], eax>', '<cmp~~dword ptr [rsp - 0x18], 0>', '<jl~~0x40060a>']}, {'block_Idx': 47, 'blockInsts': ['<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400245>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d30>', '<call~~0x4006e0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x64], 0xffffffff>', '<jmp~~0x400438>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3b50>', '<mov~~edx, 0x1d0>', '<call~~0x500040>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax], rcx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x14], ecx>', '<mov~~ecx, dword ptr [rsp - 0x14]>', '<add~~ecx, 8>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rcx, qword ptr [rsp - 0x10]>', '<movsxd~~rax, dword ptr [rsp - 0x18]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~dword ptr [rax + 0x10], 0>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~dword ptr [rsp - 0xc], esi>', '<mov~~ecx, dword ptr [rsp - 0xc]>', '<shl~~ecx, 1>', '<mov~~eax, 0xd7>', '<sub~~eax, ecx>', '<imul~~eax, eax, 5>', '<mov~~dword ptr [rsp - 0x10], eax>', '<mov~~rax, qword ptr [rsp - 8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x40056d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rax + 8]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~esi, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~edx, dword ptr [rax + 0x14]>', '<call~~0x500028>']}, {'block_Idx': 39, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<mov~~qword ptr [rsp + 8], rsi>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x1790]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~rax>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~qword ptr [rax + 0x3d20], 0>', '<jne~~0x40028b>']}, {'block_Idx': 44, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x3b90]>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b50]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 4>', '<imul~~ecx, dword ptr [rsp + 0x1c]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 4>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b58]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b94]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x3b60]>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3218]>', '<shl~~ecx, 3>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<imul~~ecx, dword ptr [rdx + 0x3b98]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~ecx, dword ptr [rcx + 0x3214]>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp], rax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x2bd8]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~esi, dword ptr [rsp + 0x1c]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<call~~rax>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x4003f1>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~eax, dword ptr [rax + 0x3218]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jge~~0x40040a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<cmp~~eax, dword ptr [rcx + 0x10]>', '<jne~~0x4001de>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<add~~rdi, 0x3d20>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<add~~rsi, 0x3d28>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<sub~~rdx, rax>', '<call~~0x500038>']}, {'block_Idx': 9, 'blockInsts': ['<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x6d2]>', '<mov~~al, 0>', '<call~~0x500030>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (14, 16), (23, 25), (34, 37), (9, 11), (27, 28), (0, 11), (42, 35), (36, 43), (47, 43), (52, 36), (24, 26), (33, 32), (18, 19), (51, 52), (43, 51), (35, 41), (12, 15), (14, 15), (0, 1), (34, 36), (19, 23), (36, 39), (11, 13), (28, 29), (30, 32), (28, 32), (15, 16), (58, 51), (42, 34), (32, 35), (16, 18), (26, 25), (43, 44), (12, 14), (20, 24), (40, 42), (11, 12), (37, 40), (13, 12), (52, 37)], 'cdg_edge_info': [(52, 40), (24, 27), (32, 34), (18, 23), (52, 43), (18, 20), (34, 37), (34, 40), (34, 43), (42, 35), (52, 36), (24, 26), (52, 42), (42, 41), (18, 19), (24, 32), (18, 25), (12, 15), (14, 15), (11, 16), (34, 36), (34, 42), (11, 13), (24, 25), (42, 34), (24, 28), (32, 35), (18, 24), (32, 41), (12, 14), (11, 12), (11, 18), (52, 37)], 'ddg_edge_info': [(16, 20), (13, 42), (11, 51), (0, 51), (12, 34), (0, 14), (11, 14), (12, 52), (51, 34), (52, 42), (12, 27), (12, 36), (40, 52), (0, 16), (11, 16), (51, 36), (13, 19), (15, 16), (19, 41), (42, 52), (16, 42), (20, 24), (13, 12), (20, 26), (12, 40), (13, 14), (36, 43), (16, 19), (0, 32), (0, 41), (51, 52), (12, 15), (20, 28), (26, 41), (12, 42), (13, 16), (0, 34), (11, 43), (0, 43), (0, 52), (11, 52), (40, 42), (40, 51), (0, 27), (11, 27), (0, 36), (11, 36), (32, 34), (32, 52), (12, 28), (27, 28), (0, 11), (11, 20), (0, 20), (34, 52), (51, 40), (43, 36), (32, 36), (35, 41), (0, 13), (11, 13), (12, 51), (51, 42), (11, 40), (0, 40), (12, 14), (13, 52), (36, 35), (11, 15), (0, 15), (0, 24), (11, 24), (51, 35), (11, 42), (0, 42), (32, 40), (20, 41), (34, 40), (0, 35), (11, 35), (32, 42), (32, 51), (16, 52), (34, 42), (19, 23), (0, 19), (34, 51), (11, 28), (0, 28), (43, 35), (32, 35), (16, 18), (20, 27), (12, 32), (11, 12), (0, 12), (23, 41), (13, 15)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 36, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 38, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t$0, 0x3218(%rax)'}, {'instIndex': 125, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 126, 'instruction': 'movl\t0x3218(%rax), %eax'}, {'instIndex': 127, 'instruction': 'movl\t%eax, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 128, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 129, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 130, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 131, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 132, 'instruction': 'cltd'}, {'instIndex': 133, 'instruction': 'idivl\t%ecx'}, {'instIndex': 134, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 135, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 136, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 137, 'instruction': 'jge\t.LBB1_17'}, {'instIndex': 138, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 139, 'instruction': 'movl\t$0, 0x3214(%rax)'}, {'instIndex': 140, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 141, 'instruction': 'movl\t0x3214(%rax), %eax'}, {'instIndex': 142, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 143, 'instruction': 'movq\t0x58(%rsp), %rax'}, {'instIndex': 144, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 145, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 146, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 147, 'instruction': 'cltd'}, {'instIndex': 148, 'instruction': 'idivl\t%ecx'}, {'instIndex': 149, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 150, 'instruction': 'movl\t8(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 151, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 152, 'instruction': 'jge\t.LBB1_15'}, {'instIndex': 153, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 154, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 155, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 156, 'instruction': 'callq\ttqi_decode_mb'}, {'instIndex': 157, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 158, 'instruction': 'movq\t0x20(%rsp), %rsi'}, {'instIndex': 159, 'instruction': 'addq\t$0x3d30, %rsi                    # imm = 0x3D0x1e'}, {'instIndex': 160, 'instruction': 'callq\ttqi_idct_put'}, {'instIndex': 161, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 162, 'instruction': 'movl\t0x3214(%rax), %ecx'}, {'instIndex': 163, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 164, 'instruction': 'movl\t%ecx, 0x3214(%rax)'}, {'instIndex': 165, 'instruction': 'jmp\t.LBB1_12'}, {'instIndex': 166, 'instruction': 'jmp\t.LBB1_16'}, {'instIndex': 167, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 168, 'instruction': 'movl\t0x3218(%rax), %ecx'}, {'instIndex': 169, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 170, 'instruction': 'movl\t%ecx, 0x3218(%rax)'}, {'instIndex': 171, 'instruction': 'jmp\t.LBB1_10'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 436 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 196, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 197, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 198, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 199, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 200, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 201, 'instruction': 'movq\t%rdx, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 203, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 204, 'instruction': 'jle\t.LBB1_22'}, {'instIndex': 268, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 269, 'instruction': 'jle\t.LBB1_21'}, {'instIndex': 394, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 395, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 396, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 398, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 399, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 400, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 401, 'instruction': 'cltd'}, {'instIndex': 402, 'instruction': 'idivl\t%ecx'}, {'instIndex': 403, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 404, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 405, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 406, 'instruction': 'jl\t.LBB1_16'}, {'instIndex': 409, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 410, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 411, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 413, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 414, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 415, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 416, 'instruction': 'cltd'}, {'instIndex': 417, 'instruction': 'idivl\t%ecx'}, {'instIndex': 418, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 419, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 420, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 421, 'instruction': 'jl\t.LBB1_15'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 59 nodes and 95 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 59 nodes and 95 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 436 instructions in binary file.
[4195421, 4195638, 4196000, 4196591, 4196645]
The execution time of patched subCFG information extraction via angr: 0:00:01.401388
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400925>, <DisassemblerInsn "mov" for 0x40092d>, <DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "add" for 0x400937>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x40093f>, <DisassemblerInsn "add" for 0x400941>, <DisassemblerInsn "mov" for 0x400944>, <DisassemblerInsn "cdq" for 0x400949>, <DisassemblerInsn "idiv" for 0x40094a>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x40094e>, <DisassemblerInsn "cmp" for 0x400951>, <DisassemblerInsn "jl" for 0x400953>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "add" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "add" for 0x400558>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400567>, <DisassemblerInsn "add" for 0x40056a>, <DisassemblerInsn "add" for 0x400571>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "add" for 0x400580>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "add" for 0x400592>, <DisassemblerInsn "add" for 0x400599>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005ba>, <DisassemblerInsn "add" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "add" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "add" for 0x4005fc>, <DisassemblerInsn "add" for 0x400603>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "add" for 0x400612>, <DisassemblerInsn "add" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "add" for 0x40062b>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "add" for 0x400644>, <DisassemblerInsn "add" for 0x40064b>, <DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "add" for 0x40065d>, <DisassemblerInsn "add" for 0x400664>, <DisassemblerInsn "mov" for 0x40066b>, <DisassemblerInsn "mov" for 0x400673>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "add" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "add" for 0x40068c>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041d>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "cqo" for 0x400449>, <DisassemblerInsn "idiv" for 0x40044b>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "call" for 0x40045b>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008ff>, <DisassemblerInsn "add" for 0x400901>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x400908>, <DisassemblerInsn "mov" for 0x40090a>, <DisassemblerInsn "add" for 0x40090c>, <DisassemblerInsn "mov" for 0x40090f>, <DisassemblerInsn "cdq" for 0x400914>, <DisassemblerInsn "idiv" for 0x400915>, <DisassemblerInsn "mov" for 0x400917>, <DisassemblerInsn "mov" for 0x400919>, <DisassemblerInsn "cmp" for 0x40091d>, <DisassemblerInsn "jl" for 0x40091f>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008cb>, <DisassemblerInsn "mov" for 0x4008d3>, <DisassemblerInsn "mov" for 0x4008db>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "mov" for 0x4008eb>, <DisassemblerInsn "call" for 0x4008ed>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400853>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085e>, <DisassemblerInsn "and" for 0x400861>, <DisassemblerInsn "cmp" for 0x400866>, <DisassemblerInsn "jne" for 0x400869>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "shl" for 0x400483>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "sar" for 0x40048a>, <DisassemblerInsn "xor" for 0x40048d>, <DisassemblerInsn "cmp" for 0x40048f>, <DisassemblerInsn "cmovl" for 0x400493>, <DisassemblerInsn "xor" for 0x400497>, <DisassemblerInsn "cmp" for 0x40049a>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "cmovl" for 0x4004a1>, <DisassemblerInsn "xor" for 0x4004a5>, <DisassemblerInsn "cmp" for 0x4004a8>, <DisassemblerInsn "cmovl" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b7>, <DisassemblerInsn "add" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "movsxd" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004fb>, <DisassemblerInsn "add" for 0x4004fe>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400517>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "cmp" for 0x400529>, <DisassemblerInsn "jle" for 0x400530>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x400971>, <DisassemblerInsn "mov" for 0x400977>, <DisassemblerInsn "call" for 0x40097c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bf>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "call" for 0x4006cf>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006a0>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400925>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x4006bf>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x4008ef>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x400959>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400925>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~qword ptr [rax]>']}], 'cfg_edge_info': [(25, 23), (35, 23), (23, 20), (19, 20), (33, 35), (18, 19), (36, 35), (25, 24), (23, 25), (21, 24), (19, 21), (21, 23), (35, 24)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4195421, 4195638, 4196000, 4196591, 4196645]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O1/eatqi.o---before
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4195421, 4195638, 4196000, 4196591, 4196645]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 43 nodes and 64 edges in CFGEmulated.
It has 43 nodes and 73 edges in CDG.
It has 1579 nodes and 2308 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195421, 4195638, 4196000, 4196591, 4196645]
{4196737, 4195202, 4196355, 4196751, 4196116, 4195349, 4194837, 4194712, 4194973, 4195229, 4196000, 4196645, 4195116, 4196141, 4195246, 4196401, 4195638, 4194875, 4196031, 4194496, 4195142, 4196555, 4196049, 4196435, 4195029, 4196056, 4196697, 4195421, 4196321, 4194658, 4195172, 4195304, 4195054, 4196463, 4196591, 4195197}
[18, 24, 41, 40, 34, 13, 21, 29, 23, 38, 19, 22, 15, 9, 28, 3, 0, 1, 33, 14, 30, 11, 20, 5, 42, 6, 27, 36, 39, 8, 37, 32, 7, 10, 4, 2, 26]
The execution time of patched slicing information extraction via angr: 0:00:04.766026
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039d>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "jmp" for 0x4003a9>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400536>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "add" for 0x400549>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "add" for 0x400558>, <DisassemblerInsn "mov" for 0x40055f>, <DisassemblerInsn "mov" for 0x400567>, <DisassemblerInsn "add" for 0x40056a>, <DisassemblerInsn "add" for 0x400571>, <DisassemblerInsn "mov" for 0x400575>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "add" for 0x400580>, <DisassemblerInsn "mov" for 0x400587>, <DisassemblerInsn "mov" for 0x40058f>, <DisassemblerInsn "add" for 0x400592>, <DisassemblerInsn "add" for 0x400599>, <DisassemblerInsn "mov" for 0x40059d>, <DisassemblerInsn "mov" for 0x4005a5>, <DisassemblerInsn "add" for 0x4005a8>, <DisassemblerInsn "mov" for 0x4005af>, <DisassemblerInsn "mov" for 0x4005b7>, <DisassemblerInsn "add" for 0x4005ba>, <DisassemblerInsn "add" for 0x4005c1>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "add" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f1>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "add" for 0x4005fc>, <DisassemblerInsn "add" for 0x400603>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "add" for 0x400612>, <DisassemblerInsn "add" for 0x400619>, <DisassemblerInsn "mov" for 0x400620>, <DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "add" for 0x40062b>, <DisassemblerInsn "add" for 0x400632>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "add" for 0x400644>, <DisassemblerInsn "add" for 0x40064b>, <DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "add" for 0x40065d>, <DisassemblerInsn "add" for 0x400664>, <DisassemblerInsn "mov" for 0x40066b>, <DisassemblerInsn "mov" for 0x400673>, <DisassemblerInsn "add" for 0x400676>, <DisassemblerInsn "add" for 0x40067d>, <DisassemblerInsn "mov" for 0x400684>, <DisassemblerInsn "add" for 0x40068c>, <DisassemblerInsn "add" for 0x400692>, <DisassemblerInsn "mov" for 0x400698>, <DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008ff>, <DisassemblerInsn "add" for 0x400901>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "mov" for 0x400908>, <DisassemblerInsn "mov" for 0x40090a>, <DisassemblerInsn "add" for 0x40090c>, <DisassemblerInsn "mov" for 0x40090f>, <DisassemblerInsn "cdq" for 0x400914>, <DisassemblerInsn "idiv" for 0x400915>, <DisassemblerInsn "mov" for 0x400917>, <DisassemblerInsn "mov" for 0x400919>, <DisassemblerInsn "cmp" for 0x40091d>, <DisassemblerInsn "jl" for 0x40091f>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40086f>, <DisassemblerInsn "mov" for 0x400877>, <DisassemblerInsn "mov" for 0x40087f>, <DisassemblerInsn "mov" for 0x400887>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x400891>, <DisassemblerInsn "mov" for 0x400896>, <DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "imul" for 0x4008a5>, <DisassemblerInsn "movsxd" for 0x4008a9>, <DisassemblerInsn "add" for 0x4008ac>, <DisassemblerInsn "add" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b2>, <DisassemblerInsn "imul" for 0x4008b7>, <DisassemblerInsn "movsxd" for 0x4008bb>, <DisassemblerInsn "add" for 0x4008be>, <DisassemblerInsn "add" for 0x4008c1>, <DisassemblerInsn "mov" for 0x4008c4>, <DisassemblerInsn "mov" for 0x4008c7>, <DisassemblerInsn "call" for 0x4008c9>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400735>, <DisassemblerInsn "mov" for 0x40073d>, <DisassemblerInsn "mov" for 0x400745>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "mov" for 0x400755>, <DisassemblerInsn "mov" for 0x40075d>, <DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "mov" for 0x40076d>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "mov" for 0x40077d>, <DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400783>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "shl" for 0x40078b>, <DisassemblerInsn "imul" for 0x40078e>, <DisassemblerInsn "movsxd" for 0x400792>, <DisassemblerInsn "add" for 0x400795>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "mov" for 0x40079b>, <DisassemblerInsn "shl" for 0x40079e>, <DisassemblerInsn "movsxd" for 0x4007a1>, <DisassemblerInsn "add" for 0x4007a4>, <DisassemblerInsn "mov" for 0x4007a7>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "mov" for 0x4007af>, <DisassemblerInsn "shl" for 0x4007b4>, <DisassemblerInsn "mov" for 0x4007b8>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c0>, <DisassemblerInsn "shl" for 0x4007c5>, <DisassemblerInsn "movsxd" for 0x4007c9>, <DisassemblerInsn "mov" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d9>, <DisassemblerInsn "mov" for 0x4007db>, <DisassemblerInsn "call" for 0x4007df>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40037d>, <DisassemblerInsn "jge" for 0x400380>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400415>, <DisassemblerInsn "mov" for 0x40041d>, <DisassemblerInsn "mov" for 0x400425>, <DisassemblerInsn "mov" for 0x40042d>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043c>, <DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "cqo" for 0x400449>, <DisassemblerInsn "idiv" for 0x40044b>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400451>, <DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "call" for 0x40045b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a0>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "cmp" for 0x4006b6>, <DisassemblerInsn "jle" for 0x4006b9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x400971>, <DisassemblerInsn "mov" for 0x400977>, <DisassemblerInsn "call" for 0x40097c>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400831>, <DisassemblerInsn "mov" for 0x400839>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "add" for 0x40084d>, <DisassemblerInsn "call" for 0x400851>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f7>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "cmp" for 0x400404>, <DisassemblerInsn "mov" for 0x400408>, <DisassemblerInsn "je" for 0x40040f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x400475>, <DisassemblerInsn "mov" for 0x40047d>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "shl" for 0x400483>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "sar" for 0x40048a>, <DisassemblerInsn "xor" for 0x40048d>, <DisassemblerInsn "cmp" for 0x40048f>, <DisassemblerInsn "cmovl" for 0x400493>, <DisassemblerInsn "xor" for 0x400497>, <DisassemblerInsn "cmp" for 0x40049a>, <DisassemblerInsn "mov" for 0x40049e>, <DisassemblerInsn "cmovl" for 0x4004a1>, <DisassemblerInsn "xor" for 0x4004a5>, <DisassemblerInsn "cmp" for 0x4004a8>, <DisassemblerInsn "cmovl" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b7>, <DisassemblerInsn "add" for 0x4004bd>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "movsxd" for 0x4004c6>, <DisassemblerInsn "add" for 0x4004c9>, <DisassemblerInsn "mov" for 0x4004cc>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e7>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "mov" for 0x4004fb>, <DisassemblerInsn "add" for 0x4004fe>, <DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050d>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400517>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "cmp" for 0x400529>, <DisassemblerInsn "jle" for 0x400530>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ae>, <DisassemblerInsn "mov" for 0x4003b6>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "add" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c8>, <DisassemblerInsn "add" for 0x4003d0>, <DisassemblerInsn "add" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "cmp" for 0x400342>, <DisassemblerInsn "je" for 0x400344>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400981>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "add" for 0x400996>, <DisassemblerInsn "pop" for 0x40099d>, <DisassemblerInsn "pop" for 0x40099e>, <DisassemblerInsn "pop" for 0x4009a0>, <DisassemblerInsn "ret" for 0x4009a1>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400213>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "add" for 0x400118>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "movzx" for 0x400127>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "add" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "movzx" for 0x40013d>, <DisassemblerInsn "imul" for 0x400141>, <DisassemblerInsn "add" for 0x400144>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "cmp" for 0x400155>, <DisassemblerInsn "jne" for 0x40015c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "movzx" for 0x400171>, <DisassemblerInsn "mov" for 0x400174>, <DisassemblerInsn "movzx" for 0x40017b>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "shr" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x40018b>, <DisassemblerInsn "mov" for 0x400190>, <DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "movzx" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "movzx" for 0x4001c1>, <DisassemblerInsn "imul" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "imul" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "shr" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "add" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "cmp" for 0x400201>, <DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "je" for 0x40020d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "add" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "shl" for 0x4006fc>, <DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "add" for 0x400705>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "call" for 0x40070f>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "mov" for 0x40038a>, <DisassemblerInsn "lea" for 0x40038f>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "call" for 0x400398>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4006d1>, <DisassemblerInsn "mov" for 0x4006d3>, <DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "mov" for 0x4006dd>, <DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "add" for 0x4006ed>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f9>, <DisassemblerInsn "shl" for 0x4006fc>, <DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "add" for 0x400705>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "call" for 0x40070f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400364>, <DisassemblerInsn "mov" for 0x40036c>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "call" for 0x400377>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "add" for 0x400996>, <DisassemblerInsn "pop" for 0x40099d>, <DisassemblerInsn "pop" for 0x40099e>, <DisassemblerInsn "pop" for 0x4009a0>, <DisassemblerInsn "ret" for 0x4009a1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "movzx" for 0x400259>, <DisassemblerInsn "imul" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "add" for 0x400267>, <DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "shr" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "add" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "cmp" for 0x40028f>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029b>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008cb>, <DisassemblerInsn "mov" for 0x4008d3>, <DisassemblerInsn "mov" for 0x4008db>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "mov" for 0x4008eb>, <DisassemblerInsn "call" for 0x4008ed>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400198>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001af>, <DisassemblerInsn "movzx" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "movzx" for 0x4001c1>, <DisassemblerInsn "imul" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "imul" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "shr" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "add" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "cmp" for 0x400201>, <DisassemblerInsn "mov" for 0x400205>, <DisassemblerInsn "je" for 0x40020d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bf>, <DisassemblerInsn "mov" for 0x4006c7>, <DisassemblerInsn "call" for 0x4006cf>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007e1>, <DisassemblerInsn "mov" for 0x4007e9>, <DisassemblerInsn "mov" for 0x4007ee>, <DisassemblerInsn "mov" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007fa>, <DisassemblerInsn "add" for 0x4007fd>, <DisassemblerInsn "call" for 0x400801>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400853>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085e>, <DisassemblerInsn "and" for 0x400861>, <DisassemblerInsn "cmp" for 0x400866>, <DisassemblerInsn "jne" for 0x400869>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e5>, <DisassemblerInsn "call" for 0x4002e8>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "mov" for 0x400808>, <DisassemblerInsn "mov" for 0x400810>, <DisassemblerInsn "mov" for 0x400818>, <DisassemblerInsn "mov" for 0x40081c>, <DisassemblerInsn "mov" for 0x40081f>, <DisassemblerInsn "shl" for 0x400821>, <DisassemblerInsn "movsxd" for 0x400824>, <DisassemblerInsn "add" for 0x400827>, <DisassemblerInsn "mov" for 0x40082a>, <DisassemblerInsn "call" for 0x40082f>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "add" for 0x400719>, <DisassemblerInsn "mov" for 0x40071d>, <DisassemblerInsn "cmp" for 0x400722>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "jne" for 0x40072b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "mov" for 0x4002f6>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "add" for 0x400301>, <DisassemblerInsn "mov" for 0x400305>, <DisassemblerInsn "mov" for 0x40030d>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "mov" for 0x40031f>, <DisassemblerInsn "mov" for 0x400321>, <DisassemblerInsn "cmp" for 0x400328>, <DisassemblerInsn "jne" for 0x40032a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x400355>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "call" for 0x40035f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a5>, <DisassemblerInsn "add" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "add" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "cmp" for 0x4002cb>, <DisassemblerInsn "je" for 0x4002d3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "movzx" for 0x400259>, <DisassemblerInsn "imul" for 0x40025d>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "add" for 0x400267>, <DisassemblerInsn "mov" for 0x40026a>, <DisassemblerInsn "shr" for 0x400271>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "add" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "cmp" for 0x40028f>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400925>, <DisassemblerInsn "mov" for 0x40092d>, <DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "add" for 0x400937>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x40093f>, <DisassemblerInsn "add" for 0x400941>, <DisassemblerInsn "mov" for 0x400944>, <DisassemblerInsn "cdq" for 0x400949>, <DisassemblerInsn "idiv" for 0x40094a>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x40094e>, <DisassemblerInsn "cmp" for 0x400951>, <DisassemblerInsn "jl" for 0x400953>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jmp~~0x40098f>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, rax>', '<add~~rdx, 0x3214>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x68>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x40>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x44>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x10>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<add~~rcx, 0x48>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x80>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x100>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x180>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x200>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<add~~rax, 0x3d30>', '<add~~rax, 0x280>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400925>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 4], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~eax, ecx>', '<jl~~0x4006bf>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0x20]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~r9d, dword ptr [rsp + 0x18]>', '<mov~~r8d, dword ptr [rsp + 0x1c]>', '<mov~~r10, qword ptr [rsp + 0x28]>', '<mov~~r11d, dword ptr [rsp + 0x34]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 8], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~r8, qword ptr [rsp + 0xc0]>', '<mov~~r10, qword ptr [rsp + 0xb8]>', '<mov~~rbx, qword ptr [rsp + 0xb0]>', '<mov~~r9, qword ptr [rsp + 0x80]>', '<mov~~r11, qword ptr [rsp + 0x108]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x4c], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x10], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x18], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x1c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x20], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x28], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x4003ae>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], 0>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x400925>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x134], eax>', '<je~~0x40098f>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jle~~0x400959>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<call~~0x500058>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x400364>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x400198>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x1f0>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~qword ptr [rsp + 0x1a8], rsi>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x1d8], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400215>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rip + 0xffebf]>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rcx, qword ptr [rip + 0xffec5]>', '<movzx~~ecx, word ptr [rcx]>', '<imul~~ecx, edx>', '<shr~~ecx, 0xb>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x198], rax>', '<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffe7a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe7f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x180], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x184], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x188], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x198], rax>', '<je~~0x40029d>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rsi, rdi>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1a0]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x68e]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 30, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~rsi, rdi>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x1f0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffde7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x40023b>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x198]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffe7a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe7f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x180], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x184], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x188], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x190], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x198], rax>', '<je~~0x40029d>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x4008ef>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rsi, qword ptr [rsp + 0x158]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<call~~rax>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x70], rax>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x78], rax>', '<jne~~0x4006d8>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d8]>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, rax>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~eax, dword ptr [rax + 0x94]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<cmp~~eax, ecx>', '<jne~~0x400346>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x14c]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500048>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3b50>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<cmp~~qword ptr [rax + 0x3b50], 0>', '<je~~0x4002ee>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rip + 0xffe1c]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x178], rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~edx, dword ptr [rsp + 0x1ec]>', '<mov~~rsi, qword ptr [rip + 0xffde7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x164], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x168], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x40023b>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp]>', '<cmp~~eax, ecx>', '<jl~~0x4006a0>']}], 'cfg_edge_info': [(24, 27), (32, 34), (18, 20), (29, 26), (5, 4), (21, 22), (22, 23), (23, 28), (0, 2), (9, 11), (2, 5), (19, 21), (36, 37), (1, 3), (13, 14), (41, 27), (7, 10), (24, 26), (32, 33), (26, 23), (33, 32), (42, 41), (26, 29), (4, 8), (3, 6), (14, 18), (39, 41), (9, 10), (0, 1), (2, 4), (10, 11), (34, 36), (27, 30), (11, 13), (37, 38), (19, 20), (30, 32), (6, 4), (41, 26), (7, 9), (15, 19), (4, 7), (29, 27), (5, 5), (38, 39), (22, 24), (40, 42), (39, 40), (8, 7), (1, 4), (13, 15), (6, 3)], 'cdg_edge_info': [(39, 27), (29, 26), (39, 30), (22, 23), (39, 39), (29, 32), (0, 2), (39, 36), (22, 32), (29, 38), (1, 6), (2, 5), (19, 21), (22, 38), (13, 14), (7, 10), (24, 26), (32, 33), (26, 23), (13, 20), (26, 29), (39, 32), (4, 8), (29, 37), (4, 11), (39, 41), (29, 34), (29, 40), (39, 38), (22, 28), (0, 1), (9, 10), (22, 37), (22, 34), (22, 40), (19, 20), (41, 26), (13, 19), (7, 9), (32, 32), (26, 28), (4, 7), (29, 30), (39, 34), (29, 27), (5, 5), (4, 13), (22, 27), (29, 36), (29, 42), (22, 30), (22, 24), (29, 39), (39, 37), (22, 39), (22, 36), (22, 42), (19, 22), (13, 18), (6, 6), (13, 15)], 'ddg_edge_info': [(41, 40), (15, 21), (38, 23), (24, 42), (26, 39), (2, 39), (1, 40), (5, 10), (22, 26), (8, 9), (0, 5), (29, 41), (34, 37), (5, 19), (11, 14), (0, 14), (2, 11), (0, 23), (5, 37), (6, 11), (7, 10), (41, 42), (42, 41), (18, 28), (1, 42), (2, 41), (29, 34), (8, 11), (0, 7), (2, 4), (5, 21), (6, 41), (4, 23), (22, 37), (1, 8), (41, 26), (6, 4), (5, 39), (1, 26), (24, 37), (2, 34), (29, 27), (38, 39), (6, 34), (29, 36), (0, 9), (22, 39), (1, 10), (42, 27), (1, 19), (41, 37), (2, 27), (1, 37), (2, 36), (6, 27), (5, 7), (38, 41), (6, 36), (0, 2), (29, 38), (14, 28), (42, 29), (1, 21), (41, 39), (1, 39), (2, 38), (5, 9), (4, 11), (21, 27), (26, 41), (6, 38), (29, 40), (7, 9), (2, 22), (38, 27), (2, 40), (6, 22), (26, 34), (5, 11), (22, 27), (21, 29), (40, 42), (6, 40), (29, 42), (7, 39), (1, 7), (5, 41), (26, 27), (29, 26), (5, 4), (38, 29), (21, 22), (26, 36), (2, 42), (23, 28), (6, 42), (1, 9), (0, 11), (2, 8), (42, 26), (22, 41), (5, 34), (30, 33), (2, 26), (6, 8), (6, 26), (4, 8), (21, 24), (26, 38), (38, 40), (14, 18), (24, 41), (29, 37), (0, 4), (34, 36), (22, 34), (27, 30), (11, 13), (1, 11), (5, 27), (2, 10), (0, 22), (2, 19), (5, 36), (6, 10), (2, 37), (15, 22), (6, 19), (24, 34), (21, 26), (26, 40), (1, 41), (6, 37), (8, 10), (1, 4), (0, 6), (34, 38), (22, 36), (11, 15), (0, 15), (19, 28), (0, 24), (2, 21), (5, 38), (0, 33), (41, 34), (24, 27), (38, 26), (6, 21), (1, 34), (24, 36), (26, 42), (6, 39), (4, 21), (1, 6), (0, 8), (5, 22), (34, 40), (42, 23), (2, 5), (19, 21), (22, 38), (36, 37), (5, 40), (41, 27), (41, 36), (32, 33), (33, 32), (24, 29), (1, 27), (24, 38), (1, 36), (0, 1), (10, 11), (0, 10), (2, 7), (22, 40), (0, 19), (37, 38), (0, 28), (5, 42), (6, 7), (41, 38), (15, 19), (33, 34), (15, 28), (21, 23), (26, 37), (24, 40), (1, 38), (5, 8), (8, 7), (29, 39), (2, 9), (22, 42), (5, 26), (0, 21), (6, 9), (1, 22)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 196, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 197, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 198, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 199, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 200, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 201, 'instruction': 'movq\t%rdx, 0x110(%rsp)                 # 8-byte Spill'}, {'instIndex': 203, 'instruction': 'cmpl\t$0, 0x98(%rax)'}, {'instIndex': 204, 'instruction': 'jle\t.LBB1_22'}, {'instIndex': 268, 'instruction': 'cmpl\t$0, (%rax)'}, {'instIndex': 269, 'instruction': 'jle\t.LBB1_21'}, {'instIndex': 394, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 395, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 396, 'instruction': 'movl\t%edx, 4(%rsp)                   # 4-byte Spill'}, {'instIndex': 398, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 399, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 400, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 401, 'instruction': 'cltd'}, {'instIndex': 402, 'instruction': 'idivl\t%ecx'}, {'instIndex': 403, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 404, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 405, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 406, 'instruction': 'jl\t.LBB1_16'}, {'instIndex': 409, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 410, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 411, 'instruction': 'movl\t%edx, (%rsp)                    # 4-byte Spill'}, {'instIndex': 413, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 414, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 415, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 416, 'instruction': 'cltd'}, {'instIndex': 417, 'instruction': 'idivl\t%ecx'}, {'instIndex': 418, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 419, 'instruction': 'movl\t(%rsp), %eax                    # 4-byte Reload'}, {'instIndex': 420, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 421, 'instruction': 'jl\t.LBB1_15'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 1055 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x114(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_26'}, {'instIndex': 857, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 858, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 859, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 860, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 861, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 868, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 869, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 870, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 871, 'instruction': 'jle\t.LBB1_25'}, {'instIndex': 999, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1000, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1001, 'instruction': 'movl\t%edx, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 1003, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1004, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 1005, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1006, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1007, 'instruction': 'cltd'}, {'instIndex': 1008, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1009, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1010, 'instruction': 'movl\t0x14(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1011, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1012, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1016, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 1018, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1019, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 1020, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 1027, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 1029, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1030, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1031, 'instruction': 'cltd'}, {'instIndex': 1032, 'instruction': 'idivl\t%esi'}, {'instIndex': 1033, 'instruction': 'movl\t8(%rsp), %edx                   # 4-byte Reload'}, {'instIndex': 1034, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 1035, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1036, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 1037, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 1038, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1039, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1040, 'instruction': 'jl\t.LBB1_20'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1055 instructions in binary file.
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
The execution time of patched subCFG information extraction via angr: 0:00:01.544949
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "call" for 0x4011c0>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d5>, <DisassemblerInsn "mov" for 0x4014db>, <DisassemblerInsn "call" for 0x4014e0>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "add" for 0x401024>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "add" for 0x401037>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "add" for 0x401049>, <DisassemblerInsn "add" for 0x401050>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "mov" for 0x40105f>, <DisassemblerInsn "add" for 0x401062>, <DisassemblerInsn "add" for 0x401069>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "add" for 0x40107b>, <DisassemblerInsn "add" for 0x401082>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "add" for 0x401094>, <DisassemblerInsn "add" for 0x40109b>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "add" for 0x4010ad>, <DisassemblerInsn "add" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010bb>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ee>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "add" for 0x401104>, <DisassemblerInsn "add" for 0x40110b>, <DisassemblerInsn "mov" for 0x40110f>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "add" for 0x40111a>, <DisassemblerInsn "add" for 0x401121>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "add" for 0x401130>, <DisassemblerInsn "add" for 0x401137>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "add" for 0x40114a>, <DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "xor" for 0x40115f>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ee>, <DisassemblerInsn "mov" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140e>, <DisassemblerInsn "call" for 0x401410>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401376>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401381>, <DisassemblerInsn "and" for 0x401384>, <DisassemblerInsn "cmp" for 0x401389>, <DisassemblerInsn "jne" for 0x40138c>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401412>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "add" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "cdq" for 0x401435>, <DisassemblerInsn "idiv" for 0x401436>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "cmp" for 0x40143e>, <DisassemblerInsn "jl" for 0x401440>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 37, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rbx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x240]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401412>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jl~~0x4011ab>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<jle~~0x4014bd>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}], 'cfg_edge_info': [(48, 50), (32, 34), (50, 52), (29, 30), (37, 35), (34, 36), (50, 36), (51, 50), (30, 32), (34, 35), (35, 37), (35, 31), (30, 31), (52, 31), (52, 37), (37, 36)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O2/eatqi.o---before
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 69 nodes and 99 edges in CFGEmulated.
It has 68 nodes and 124 edges in CDG.
It has 4800 nodes and 6805 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
{4194688, 4195449, 4199172, 4197639, 4195849, 4198154, 4198925, 4197905, 4199314, 4199442, 4198037, 4196248, 4196506, 4194853, 4199206, 4198951, 4197930, 4198827, 4196652, 4197935, 4196400, 4196538, 4197051, 4199613, 4194496, 4198977, 4198850, 4198082, 4197824, 4197445, 4199494, 4194885, 4197962, 4196560, 4197843, 4199252, 4198873, 4199003, 4197979, 4197725, 4194907, 4199653, 4199530, 4195051, 4198380, 4199406, 4198899, 4199667, 4199286, 4198774, 4197750, 4197878, 4198779}
[43, 22, 30, 65, 10, 8, 6, 29, 5, 27, 3, 47, 44, 58, 1, 13, 66, 60, 45, 63, 12, 2, 15, 35, 0, 41, 18, 36, 32, 28, 20, 16, 7, 24, 68, 4, 38, 56, 21, 50, 17, 37, 14, 46, 39, 23, 25, 67, 64, 19, 11, 31, 61, 62, 52, 48, 40, 54, 9]
The execution time of patched slicing information extraction via angr: 0:00:07.341090
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e21>, <DisassemblerInsn "call" for 0x400e24>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e2a>, <DisassemblerInsn "jge" for 0x400e2d>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401392>, <DisassemblerInsn "mov" for 0x40139a>, <DisassemblerInsn "mov" for 0x4013a2>, <DisassemblerInsn "mov" for 0x4013aa>, <DisassemblerInsn "mov" for 0x4013af>, <DisassemblerInsn "mov" for 0x4013b4>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c3>, <DisassemblerInsn "imul" for 0x4013c8>, <DisassemblerInsn "movsxd" for 0x4013cc>, <DisassemblerInsn "add" for 0x4013cf>, <DisassemblerInsn "add" for 0x4013d2>, <DisassemblerInsn "mov" for 0x4013d5>, <DisassemblerInsn "imul" for 0x4013da>, <DisassemblerInsn "movsxd" for 0x4013de>, <DisassemblerInsn "add" for 0x4013e1>, <DisassemblerInsn "add" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013e7>, <DisassemblerInsn "mov" for 0x4013ea>, <DisassemblerInsn "call" for 0x4013ec>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40082b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d92>, <DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "movd" for 0x4008a9>, <DisassemblerInsn "pshufd" for 0x4008ad>, <DisassemblerInsn "movaps" for 0x4008b2>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movd" for 0x400234>, <DisassemblerInsn "pshufd" for 0x400238>, <DisassemblerInsn "movaps" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014e5>, <DisassemblerInsn "mov" for 0x4014ec>, <DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "add" for 0x4014fa>, <DisassemblerInsn "pop" for 0x401501>, <DisassemblerInsn "pop" for 0x401502>, <DisassemblerInsn "pop" for 0x401504>, <DisassemblerInsn "ret" for 0x401505>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "mov" for 0x401249>, <DisassemblerInsn "mov" for 0x401251>, <DisassemblerInsn "call" for 0x401256>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400180>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "movzx" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movzx" for 0x400199>, <DisassemblerInsn "imul" for 0x40019c>, <DisassemblerInsn "shr" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "add" for 0x4001b2>, <DisassemblerInsn "add" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "setb" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "add" for 0x4001d8>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "seta" for 0x4001df>, <DisassemblerInsn "and" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "add" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "setb" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x400201>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "seta" for 0x400208>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "or" for 0x40020d>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401412>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "add" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "cdq" for 0x401435>, <DisassemblerInsn "idiv" for 0x401436>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "cmp" for 0x40143e>, <DisassemblerInsn "jl" for 0x401440>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401263>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x401278>, <DisassemblerInsn "mov" for 0x401280>, <DisassemblerInsn "mov" for 0x401288>, <DisassemblerInsn "mov" for 0x401290>, <DisassemblerInsn "mov" for 0x401298>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a2>, <DisassemblerInsn "mov" for 0x4012a6>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "shl" for 0x4012ae>, <DisassemblerInsn "imul" for 0x4012b1>, <DisassemblerInsn "movsxd" for 0x4012b5>, <DisassemblerInsn "add" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012bb>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "shl" for 0x4012c1>, <DisassemblerInsn "movsxd" for 0x4012c4>, <DisassemblerInsn "add" for 0x4012c7>, <DisassemblerInsn "mov" for 0x4012ca>, <DisassemblerInsn "mov" for 0x4012cf>, <DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "shl" for 0x4012d7>, <DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "mov" for 0x4012e0>, <DisassemblerInsn "mov" for 0x4012e3>, <DisassemblerInsn "shl" for 0x4012e8>, <DisassemblerInsn "movsxd" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "mov" for 0x4012f7>, <DisassemblerInsn "mov" for 0x4012fc>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "call" for 0x401302>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "mov" for 0x401361>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "add" for 0x401370>, <DisassemblerInsn "call" for 0x401374>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083f>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "add" for 0x40084c>, <DisassemblerInsn "add" for 0x400853>, <DisassemblerInsn "add" for 0x400857>, <DisassemblerInsn "mov" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "cmp" for 0x40086b>, <DisassemblerInsn "setb" for 0x40086e>, <DisassemblerInsn "mov" for 0x400871>, <DisassemblerInsn "add" for 0x400878>, <DisassemblerInsn "cmp" for 0x40087c>, <DisassemblerInsn "seta" for 0x40087f>, <DisassemblerInsn "and" for 0x400882>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "test" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "jne" for 0x400894>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "mov" for 0x400d65>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "call" for 0x400d70>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "jmp" for 0x400e56>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "add" for 0x400135>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "movzx" for 0x400144>, <DisassemblerInsn "imul" for 0x400148>, <DisassemblerInsn "add" for 0x40014b>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "add" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "add" for 0x401024>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "add" for 0x401037>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "add" for 0x401049>, <DisassemblerInsn "add" for 0x401050>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "mov" for 0x40105f>, <DisassemblerInsn "add" for 0x401062>, <DisassemblerInsn "add" for 0x401069>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "add" for 0x40107b>, <DisassemblerInsn "add" for 0x401082>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "add" for 0x401094>, <DisassemblerInsn "add" for 0x40109b>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "add" for 0x4010ad>, <DisassemblerInsn "add" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010bb>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ee>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "add" for 0x401104>, <DisassemblerInsn "add" for 0x40110b>, <DisassemblerInsn "mov" for 0x40110f>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "add" for 0x40111a>, <DisassemblerInsn "add" for 0x401121>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "add" for 0x401130>, <DisassemblerInsn "add" for 0x401137>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "add" for 0x40114a>, <DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "xor" for 0x40115f>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "cmp" for 0x400deb>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "je" for 0x400df4>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea4>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "cmp" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "je" for 0x400ebc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "add" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e88>, <DisassemblerInsn "call" for 0x400e90>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>, <DisassemblerInsn "pshufd" for 0x400a5e>, <DisassemblerInsn "movaps" for 0x400a63>, <DisassemblerInsn "pmuludq" for 0x400a66>, <DisassemblerInsn "pshufd" for 0x400a6a>, <DisassemblerInsn "punpckldq" for 0x400a6f>, <DisassemblerInsn "movaps" for 0x400a73>, <DisassemblerInsn "pmuludq" for 0x400a76>, <DisassemblerInsn "pshufd" for 0x400a7a>, <DisassemblerInsn "pshufd" for 0x400a7f>, <DisassemblerInsn "movaps" for 0x400a84>, <DisassemblerInsn "pmuludq" for 0x400a87>, <DisassemblerInsn "pshufd" for 0x400a8b>, <DisassemblerInsn "punpckldq" for 0x400a90>, <DisassemblerInsn "paddd" for 0x400a94>, <DisassemblerInsn "paddd" for 0x400a98>, <DisassemblerInsn "pslld" for 0x400a9c>, <DisassemblerInsn "psrad" for 0x400aa1>, <DisassemblerInsn "pslld" for 0x400aa6>, <DisassemblerInsn "psrad" for 0x400aab>, <DisassemblerInsn "packssdw" for 0x400ab0>, <DisassemblerInsn "movups" for 0x400ab4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400abb>, <DisassemblerInsn "movaps" for 0x400abf>, <DisassemblerInsn "punpcklwd" for 0x400ac2>, <DisassemblerInsn "punpckhwd" for 0x400ac6>, <DisassemblerInsn "movaps" for 0x400aca>, <DisassemblerInsn "pmuludq" for 0x400acd>, <DisassemblerInsn "pshufd" for 0x400ad1>, <DisassemblerInsn "pshufd" for 0x400ad6>, <DisassemblerInsn "movaps" for 0x400adb>, <DisassemblerInsn "pmuludq" for 0x400ade>, <DisassemblerInsn "pshufd" for 0x400ae2>, <DisassemblerInsn "punpckldq" for 0x400ae7>, <DisassemblerInsn "movaps" for 0x400aeb>, <DisassemblerInsn "pmuludq" for 0x400aee>, <DisassemblerInsn "pshufd" for 0x400af2>, <DisassemblerInsn "pshufd" for 0x400af7>, <DisassemblerInsn "movaps" for 0x400afc>, <DisassemblerInsn "pmuludq" for 0x400aff>, <DisassemblerInsn "pshufd" for 0x400b03>, <DisassemblerInsn "punpckldq" for 0x400b08>, <DisassemblerInsn "paddd" for 0x400b0c>, <DisassemblerInsn "paddd" for 0x400b10>, <DisassemblerInsn "pslld" for 0x400b14>, <DisassemblerInsn "psrad" for 0x400b19>, <DisassemblerInsn "pslld" for 0x400b1e>, <DisassemblerInsn "psrad" for 0x400b23>, <DisassemblerInsn "packssdw" for 0x400b28>, <DisassemblerInsn "movups" for 0x400b2c>, <DisassemblerInsn "movups" for 0x400b33>, <DisassemblerInsn "movaps" for 0x400b37>, <DisassemblerInsn "punpcklwd" for 0x400b3a>, <DisassemblerInsn "punpckhwd" for 0x400b3e>, <DisassemblerInsn "movaps" for 0x400b42>, <DisassemblerInsn "pmuludq" for 0x400b45>, <DisassemblerInsn "pshufd" for 0x400b49>, <DisassemblerInsn "pshufd" for 0x400b4e>, <DisassemblerInsn "movaps" for 0x400b53>, <DisassemblerInsn "pmuludq" for 0x400b56>, <DisassemblerInsn "pshufd" for 0x400b5a>, <DisassemblerInsn "punpckldq" for 0x400b5f>, <DisassemblerInsn "movaps" for 0x400b63>, <DisassemblerInsn "pmuludq" for 0x400b66>, <DisassemblerInsn "pshufd" for 0x400b6a>, <DisassemblerInsn "pshufd" for 0x400b6f>, <DisassemblerInsn "movaps" for 0x400b74>, <DisassemblerInsn "pmuludq" for 0x400b77>, <DisassemblerInsn "pshufd" for 0x400b7b>, <DisassemblerInsn "punpckldq" for 0x400b80>, <DisassemblerInsn "paddd" for 0x400b84>, <DisassemblerInsn "paddd" for 0x400b88>, <DisassemblerInsn "pslld" for 0x400b8c>, <DisassemblerInsn "psrad" for 0x400b91>, <DisassemblerInsn "pslld" for 0x400b96>, <DisassemblerInsn "psrad" for 0x400b9b>, <DisassemblerInsn "packssdw" for 0x400ba0>, <DisassemblerInsn "movups" for 0x400ba4>, <DisassemblerInsn "movups" for 0x400bab>, <DisassemblerInsn "movaps" for 0x400baf>, <DisassemblerInsn "punpcklwd" for 0x400bb2>, <DisassemblerInsn "punpckhwd" for 0x400bb6>, <DisassemblerInsn "movaps" for 0x400bba>, <DisassemblerInsn "pmuludq" for 0x400bbd>, <DisassemblerInsn "pshufd" for 0x400bc1>, <DisassemblerInsn "pshufd" for 0x400bc6>, <DisassemblerInsn "movaps" for 0x400bcb>, <DisassemblerInsn "pmuludq" for 0x400bce>, <DisassemblerInsn "pshufd" for 0x400bd2>, <DisassemblerInsn "punpckldq" for 0x400bd7>, <DisassemblerInsn "movaps" for 0x400bdb>, <DisassemblerInsn "pmuludq" for 0x400bde>, <DisassemblerInsn "pshufd" for 0x400be2>, <DisassemblerInsn "pshufd" for 0x400be7>, <DisassemblerInsn "pmuludq" for 0x400bec>, <DisassemblerInsn "pshufd" for 0x400bf0>, <DisassemblerInsn "punpckldq" for 0x400bf5>, <DisassemblerInsn "paddd" for 0x400bf9>, <DisassemblerInsn "paddd" for 0x400bfd>, <DisassemblerInsn "pslld" for 0x400c01>, <DisassemblerInsn "psrad" for 0x400c06>, <DisassemblerInsn "pslld" for 0x400c0b>, <DisassemblerInsn "psrad" for 0x400c10>, <DisassemblerInsn "packssdw" for 0x400c15>, <DisassemblerInsn "movdqu" for 0x400c19>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ee>, <DisassemblerInsn "mov" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140e>, <DisassemblerInsn "call" for 0x401410>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401227>, <DisassemblerInsn "mov" for 0x40122f>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "call" for 0x40123c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400479>, <DisassemblerInsn "movaps" for 0x40047e>, <DisassemblerInsn "punpcklwd" for 0x400482>, <DisassemblerInsn "punpckhwd" for 0x400486>, <DisassemblerInsn "pshufd" for 0x40048b>, <DisassemblerInsn "movaps" for 0x400490>, <DisassemblerInsn "pmuludq" for 0x400493>, <DisassemblerInsn "movaps" for 0x400497>, <DisassemblerInsn "pmuludq" for 0x40049a>, <DisassemblerInsn "pshufd" for 0x40049e>, <DisassemblerInsn "movaps" for 0x4004a4>, <DisassemblerInsn "pmuludq" for 0x4004a7>, <DisassemblerInsn "movaps" for 0x4004ab>, <DisassemblerInsn "pmuludq" for 0x4004ae>, <DisassemblerInsn "pmuludq" for 0x4004b3>, <DisassemblerInsn "pshufd" for 0x4004b8>, <DisassemblerInsn "pshufd" for 0x4004bd>, <DisassemblerInsn "pmuludq" for 0x4004c3>, <DisassemblerInsn "pshufd" for 0x4004c8>, <DisassemblerInsn "punpckldq" for 0x4004cd>, <DisassemblerInsn "pmuludq" for 0x4004d1>, <DisassemblerInsn "pshufd" for 0x4004d5>, <DisassemblerInsn "pshufd" for 0x4004da>, <DisassemblerInsn "pmuludq" for 0x4004df>, <DisassemblerInsn "pshufd" for 0x4004e3>, <DisassemblerInsn "punpckldq" for 0x4004e8>, <DisassemblerInsn "paddd" for 0x4004ec>, <DisassemblerInsn "paddd" for 0x4004f0>, <DisassemblerInsn "pslld" for 0x4004f4>, <DisassemblerInsn "psrad" for 0x4004f9>, <DisassemblerInsn "pslld" for 0x4004fe>, <DisassemblerInsn "psrad" for 0x400503>, <DisassemblerInsn "packssdw" for 0x400508>, <DisassemblerInsn "movups" for 0x40050c>, <DisassemblerInsn "movups" for 0x400513>, <DisassemblerInsn "movaps" for 0x400517>, <DisassemblerInsn "punpckhwd" for 0x40051b>, <DisassemblerInsn "punpcklwd" for 0x400520>, <DisassemblerInsn "movups" for 0x400524>, <DisassemblerInsn "movaps" for 0x400529>, <DisassemblerInsn "punpcklwd" for 0x40052d>, <DisassemblerInsn "punpckhwd" for 0x400531>, <DisassemblerInsn "pshufd" for 0x400536>, <DisassemblerInsn "movaps" for 0x40053b>, <DisassemblerInsn "pmuludq" for 0x40053e>, <DisassemblerInsn "movaps" for 0x400542>, <DisassemblerInsn "pmuludq" for 0x400545>, <DisassemblerInsn "pshufd" for 0x400549>, <DisassemblerInsn "movaps" for 0x40054f>, <DisassemblerInsn "pmuludq" for 0x400552>, <DisassemblerInsn "movaps" for 0x400556>, <DisassemblerInsn "pmuludq" for 0x400559>, <DisassemblerInsn "pmuludq" for 0x40055e>, <DisassemblerInsn "pshufd" for 0x400563>, <DisassemblerInsn "pshufd" for 0x400568>, <DisassemblerInsn "pmuludq" for 0x40056e>, <DisassemblerInsn "pshufd" for 0x400573>, <DisassemblerInsn "punpckldq" for 0x400578>, <DisassemblerInsn "pmuludq" for 0x40057c>, <DisassemblerInsn "pshufd" for 0x400580>, <DisassemblerInsn "pshufd" for 0x400585>, <DisassemblerInsn "pmuludq" for 0x40058a>, <DisassemblerInsn "pshufd" for 0x40058e>, <DisassemblerInsn "punpckldq" for 0x400593>, <DisassemblerInsn "paddd" for 0x400597>, <DisassemblerInsn "paddd" for 0x40059b>, <DisassemblerInsn "pslld" for 0x40059f>, <DisassemblerInsn "psrad" for 0x4005a4>, <DisassemblerInsn "pslld" for 0x4005a9>, <DisassemblerInsn "psrad" for 0x4005ae>, <DisassemblerInsn "packssdw" for 0x4005b3>, <DisassemblerInsn "movups" for 0x4005b7>, <DisassemblerInsn "movups" for 0x4005be>, <DisassemblerInsn "movaps" for 0x4005c2>, <DisassemblerInsn "punpckhwd" for 0x4005c6>, <DisassemblerInsn "punpcklwd" for 0x4005cb>, <DisassemblerInsn "movups" for 0x4005cf>, <DisassemblerInsn "movaps" for 0x4005d4>, <DisassemblerInsn "punpcklwd" for 0x4005d8>, <DisassemblerInsn "punpckhwd" for 0x4005dc>, <DisassemblerInsn "pshufd" for 0x4005e1>, <DisassemblerInsn "movaps" for 0x4005e6>, <DisassemblerInsn "pmuludq" for 0x4005e9>, <DisassemblerInsn "movaps" for 0x4005ed>, <DisassemblerInsn "pmuludq" for 0x4005f0>, <DisassemblerInsn "pshufd" for 0x4005f4>, <DisassemblerInsn "movaps" for 0x4005fa>, <DisassemblerInsn "pmuludq" for 0x4005fd>, <DisassemblerInsn "movaps" for 0x400601>, <DisassemblerInsn "pmuludq" for 0x400604>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "call" for 0x4011ee>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>, <DisassemblerInsn "pmuludq" for 0x4003e8>, <DisassemblerInsn "movaps" for 0x4003ec>, <DisassemblerInsn "pmuludq" for 0x4003ef>, <DisassemblerInsn "pshufd" for 0x4003f3>, <DisassemblerInsn "movaps" for 0x4003f9>, <DisassemblerInsn "pmuludq" for 0x4003fc>, <DisassemblerInsn "movaps" for 0x400400>, <DisassemblerInsn "pmuludq" for 0x400403>, <DisassemblerInsn "pmuludq" for 0x400408>, <DisassemblerInsn "pshufd" for 0x40040d>, <DisassemblerInsn "pshufd" for 0x400412>, <DisassemblerInsn "pmuludq" for 0x400418>, <DisassemblerInsn "pshufd" for 0x40041d>, <DisassemblerInsn "punpckldq" for 0x400422>, <DisassemblerInsn "pmuludq" for 0x400426>, <DisassemblerInsn "pshufd" for 0x40042a>, <DisassemblerInsn "pshufd" for 0x40042f>, <DisassemblerInsn "pmuludq" for 0x400434>, <DisassemblerInsn "pshufd" for 0x400438>, <DisassemblerInsn "punpckldq" for 0x40043d>, <DisassemblerInsn "paddd" for 0x400441>, <DisassemblerInsn "paddd" for 0x400445>, <DisassemblerInsn "pslld" for 0x400449>, <DisassemblerInsn "psrad" for 0x40044e>, <DisassemblerInsn "pslld" for 0x400453>, <DisassemblerInsn "psrad" for 0x400458>, <DisassemblerInsn "packssdw" for 0x40045d>, <DisassemblerInsn "movups" for 0x400461>, <DisassemblerInsn "movups" for 0x400468>, <DisassemblerInsn "movaps" for 0x40046c>, <DisassemblerInsn "punpckhwd" for 0x400470>, <DisassemblerInsn "punpcklwd" for 0x400475>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "add" for 0x4014fa>, <DisassemblerInsn "pop" for 0x401501>, <DisassemblerInsn "pop" for 0x401502>, <DisassemblerInsn "pop" for 0x401504>, <DisassemblerInsn "ret" for 0x401505>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "call" for 0x4011c0>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df6>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "call" for 0x400e0c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "pmuludq" for 0x400609>, <DisassemblerInsn "pshufd" for 0x40060e>, <DisassemblerInsn "pshufd" for 0x400613>, <DisassemblerInsn "pmuludq" for 0x400619>, <DisassemblerInsn "pshufd" for 0x40061e>, <DisassemblerInsn "punpckldq" for 0x400623>, <DisassemblerInsn "pmuludq" for 0x400627>, <DisassemblerInsn "pshufd" for 0x40062b>, <DisassemblerInsn "pshufd" for 0x400630>, <DisassemblerInsn "pmuludq" for 0x400635>, <DisassemblerInsn "pshufd" for 0x400639>, <DisassemblerInsn "punpckldq" for 0x40063e>, <DisassemblerInsn "paddd" for 0x400642>, <DisassemblerInsn "paddd" for 0x400646>, <DisassemblerInsn "pslld" for 0x40064a>, <DisassemblerInsn "psrad" for 0x40064f>, <DisassemblerInsn "pslld" for 0x400654>, <DisassemblerInsn "psrad" for 0x400659>, <DisassemblerInsn "packssdw" for 0x40065e>, <DisassemblerInsn "movups" for 0x400662>, <DisassemblerInsn "movups" for 0x400669>, <DisassemblerInsn "movaps" for 0x40066d>, <DisassemblerInsn "punpckhwd" for 0x400670>, <DisassemblerInsn "punpcklwd" for 0x400674>, <DisassemblerInsn "movups" for 0x400678>, <DisassemblerInsn "movaps" for 0x40067c>, <DisassemblerInsn "punpcklwd" for 0x40067f>, <DisassemblerInsn "punpckhwd" for 0x400683>, <DisassemblerInsn "pshufd" for 0x400687>, <DisassemblerInsn "movaps" for 0x40068c>, <DisassemblerInsn "pmuludq" for 0x40068f>, <DisassemblerInsn "movaps" for 0x400693>, <DisassemblerInsn "pmuludq" for 0x400696>, <DisassemblerInsn "pshufd" for 0x40069a>, <DisassemblerInsn "movaps" for 0x4006a0>, <DisassemblerInsn "pmuludq" for 0x4006a3>, <DisassemblerInsn "pmuludq" for 0x4006a8>, <DisassemblerInsn "pmuludq" for 0x4006ac>, <DisassemblerInsn "pshufd" for 0x4006b0>, <DisassemblerInsn "pshufd" for 0x4006b5>, <DisassemblerInsn "pmuludq" for 0x4006ba>, <DisassemblerInsn "pshufd" for 0x4006be>, <DisassemblerInsn "punpckldq" for 0x4006c3>, <DisassemblerInsn "pmuludq" for 0x4006c7>, <DisassemblerInsn "pshufd" for 0x4006cb>, <DisassemblerInsn "pshufd" for 0x4006d0>, <DisassemblerInsn "pmuludq" for 0x4006d5>, <DisassemblerInsn "pshufd" for 0x4006d9>, <DisassemblerInsn "punpckldq" for 0x4006de>, <DisassemblerInsn "paddd" for 0x4006e2>, <DisassemblerInsn "paddd" for 0x4006e6>, <DisassemblerInsn "pslld" for 0x4006ea>, <DisassemblerInsn "psrad" for 0x4006ef>, <DisassemblerInsn "pslld" for 0x4006f4>, <DisassemblerInsn "psrad" for 0x4006f9>, <DisassemblerInsn "packssdw" for 0x4006fe>, <DisassemblerInsn "movdqu" for 0x400702>, <DisassemblerInsn "mov" for 0x40070a>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401376>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401381>, <DisassemblerInsn "and" for 0x401384>, <DisassemblerInsn "cmp" for 0x401389>, <DisassemblerInsn "jne" for 0x40138c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "lea" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "call" for 0x400e45>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401304>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x401311>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131d>, <DisassemblerInsn "add" for 0x401320>, <DisassemblerInsn "call" for 0x401324>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132b>, <DisassemblerInsn "mov" for 0x401333>, <DisassemblerInsn "mov" for 0x40133b>, <DisassemblerInsn "mov" for 0x40133f>, <DisassemblerInsn "mov" for 0x401342>, <DisassemblerInsn "shl" for 0x401344>, <DisassemblerInsn "movsxd" for 0x401347>, <DisassemblerInsn "add" for 0x40134a>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "call" for 0x401352>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f3>, <DisassemblerInsn "mov" for 0x4011fb>, <DisassemblerInsn "mov" for 0x401203>, <DisassemblerInsn "call" for 0x401208>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "xor" for 0x4011d2>, <DisassemblerInsn "call" for 0x4011d4>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d5>, <DisassemblerInsn "mov" for 0x4014db>, <DisassemblerInsn "call" for 0x4014e0>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40120d>, <DisassemblerInsn "mov" for 0x401215>, <DisassemblerInsn "mov" for 0x40121d>, <DisassemblerInsn "call" for 0x401222>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "mov" for 0x400d0f>, <DisassemblerInsn "mov" for 0x400d16>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "add" for 0x400d26>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "add" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3c>, <DisassemblerInsn "cmp" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "je" for 0x400d5b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 43, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e5b>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x28]>', '<mov~~r8d, dword ptr [rsp + 0x2c]>', '<mov~~r10, qword ptr [rsp + 0x38]>', '<mov~~r11d, dword ptr [rsp + 0x44]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 0x18], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x400764>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x188], rax>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rcx, qword ptr [rsp + 0x278]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x15c], ecx>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~ecx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~dword ptr [rsp + 0x144], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~ecx, dword ptr [rsp + 0x28c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm3, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x190], xmm3>', '<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x188], rax>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~ecx, dword ptr [rsp + 0x28c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm1, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm1>', '<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x210], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~dword ptr [rsp + 0x130], eax>', '<mov~~eax, dword ptr [rsp + 0x130]>', '<add~~rsp, 0x2a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rip + 0xffea1]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffea7]>', '<movzx~~eax, word ptr [rax]>', '<imul~~eax, ecx>', '<shr~~eax, 0xb>', '<mov~~word ptr [rdx + 0x3280], ax>', '<mov~~rax, rdx>', '<add~~rax, 0x3280>', '<add~~rax, 2>', '<add~~rdx, 0x3300>', '<mov~~rcx, qword ptr [rip + 0xffe6c]>', '<add~~rcx, 0x80>', '<cmp~~rax, rcx>', '<setb~~cl>', '<mov~~rsi, qword ptr [rip + 0xffe58]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~sil>', '<and~~cl, sil>', '<mov~~rsi, qword ptr [rip + 0xffe53]>', '<add~~rsi, 0x80>', '<cmp~~rax, rsi>', '<setb~~al>', '<mov~~rsi, qword ptr [rip + 0xffe3f]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~dl>', '<and~~al, dl>', '<or~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jne~~0x400717>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jl~~0x4011ab>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~r9, qword ptr [rsp + 0x68]>', '<mov~~r10, qword ptr [rsp + 0xc8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x58], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x20], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x28], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x2c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x30], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 12, 'blockInsts': ['<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rip + 0xff801]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3280>', '<add~~rcx, 2>', '<add~~rax, 0x3300>', '<mov~~rdx, qword ptr [rip + 0xff7dc]>', '<add~~rdx, 0x80>', '<cmp~~rcx, rdx>', '<setb~~cl>', '<mov~~rdx, qword ptr [rip + 0xff7c8]>', '<add~~rdx, 2>', '<cmp~~rax, rdx>', '<seta~~al>', '<and~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<jne~~0x400c2e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x4014f3>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x2a0>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x238], rdi>', '<mov~~qword ptr [rsp + 0x240], rsi>', '<mov~~qword ptr [rsp + 0x248], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x260], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x268], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x274], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x278], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x28c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x298], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400830>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x134], eax>', '<je~~0x400e11>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x130], eax>', '<je~~0x4014f3>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~rdx, qword ptr [rsp + 0x260]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<call~~0x500058>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 20, 'blockInsts': ['<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm0>']}, {'block_Idx': 16, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x210], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>']}, {'block_Idx': 24, 'blockInsts': ['<movups~~xmm0, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm0>', '<punpcklwd~~xmm4, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm1, xmm3>', '<pmuludq~~xmm1, xmm0>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 0xd>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~edx, 4>', '<call~~0x500060>']}, {'block_Idx': 21, 'blockInsts': ['<movups~~xmm8, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x42]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x52]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~edx, 1>', '<call~~0x500060>']}, {'block_Idx': 17, 'blockInsts': ['<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x32]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x130]>', '<add~~rsp, 0x2a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~dword ptr [rsp + 0x144], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rbx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<jle~~0x4014bd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x144]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~edx, dword ptr [rsp + 0x134]>', '<call~~0x500048>']}, {'block_Idx': 25, 'blockInsts': ['<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm3>', '<movups~~xmm5, xmmword ptr [rdx + 0x62]>', '<movaps~~xmm7, xmm5>', '<punpckhwd~~xmm7, xmm0>', '<punpcklwd~~xmm5, xmm0>', '<movups~~xmm6, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm6>', '<punpcklwd~~xmm4, xmm0>', '<punpckhwd~~xmm6, xmm0>', '<pshufd~~xmm0, xmm5, 0xf5>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm0>', '<movaps~~xmm0, xmm1>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm8, xmm7, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm8>', '<pmuludq~~xmm1, xmm7>', '<pmuludq~~xmm1, xmm6>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm1, xmm5>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 2>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 2>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x230], rax>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401412>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jmp~~0x400df6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x238]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x75d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~edx, 2>', '<call~~0x500060>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<xor~~edx, edx>', '<call~~0x500060>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x240]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, 3>', '<call~~0x500060>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x274]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x250]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x148], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x15c], ecx>', '<mov~~qword ptr [rsp + 0x160], rax>', '<je~~0x400d9a>']}], 'cfg_edge_info': [(64, 66), (16, 20), (24, 27), (18, 23), (50, 52), (43, 46), (41, 43), (4, 9), (3, 7), (28, 9), (21, 25), (23, 22), (5, 10), (46, 48), (31, 35), (0, 2), (9, 14), (17, 21), (40, 44), (14, 19), (2, 5), (1, 3), (68, 66), (36, 37), (67, 40), (45, 40), (47, 46), (63, 64), (56, 58), (64, 65), (25, 28), (32, 36), (29, 19), (18, 22), (15, 29), (52, 54), (60, 61), (43, 45), (67, 47), (14, 18), (27, 9), (39, 41), (28, 8), (0, 1), (48, 50), (19, 23), (30, 32), (47, 45), (7, 12), (29, 18), (35, 37), (58, 60), (62, 63), (61, 62), (66, 46), (20, 24), (27, 11), (38, 39), (12, 17), (39, 40), (22, 30), (11, 9), (1, 4), (9, 15), (65, 68), (66, 67), (13, 9), (10, 16), (2, 6), (54, 56), (36, 38), (45, 47), (30, 31), (6, 9)], 'cdg_edge_info': [(47, 62), (39, 60), (64, 62), (47, 64), (39, 44), (1, 17), (47, 48), (64, 64), (39, 46), (64, 48), (67, 47), (47, 50), (64, 66), (1, 28), (2, 27), (18, 23), (47, 68), (0, 2), (1, 3), (67, 40), (64, 50), (1, 12), (1, 21), (2, 20), (30, 36), (47, 52), (47, 61), (39, 41), (64, 52), (47, 45), (64, 61), (39, 62), (47, 54), (47, 63), (1, 7), (67, 44), (36, 38), (64, 54), (30, 31), (39, 64), (1, 25), (64, 63), (2, 24), (47, 56), (47, 65), (39, 48), (64, 56), (47, 58), (29, 19), (43, 45), (39, 50), (2, 10), (64, 58), (30, 35), (39, 68), (39, 43), (39, 52), (45, 47), (39, 61), (64, 60), (30, 37), (29, 23), (2, 5), (45, 40), (39, 54), (36, 37), (39, 63), (9, 29), (47, 46), (0, 1), (64, 46), (36, 39), (39, 56), (2, 16), (30, 32), (39, 65), (29, 18), (47, 60), (39, 40), (9, 15), (66, 67), (45, 44), (39, 58)], 'ddg_edge_info': [(16, 20), (7, 17), (50, 52), (67, 68), (47, 62), (41, 58), (25, 41), (27, 68), (28, 67), (46, 48), (12, 25), (66, 60), (17, 21), (0, 5), (68, 66), (39, 60), (0, 23), (15, 23), (32, 39), (67, 61), (47, 64), (27, 61), (0, 44), (28, 60), (35, 44), (38, 46), (25, 61), (66, 62), (0, 7), (0, 16), (24, 65), (10, 20), (1, 17), (27, 36), (24, 19), (25, 18), (7, 12), (67, 63), (16, 24), (7, 21), (25, 36), (47, 66), (27, 63), (28, 62), (66, 46), (38, 39), (3, 17), (22, 30), (39, 46), (0, 64), (66, 64), (63, 47), (0, 9), (24, 67), (27, 29), (67, 47), (27, 38), (15, 18), (1, 28), (67, 65), (2, 27), (28, 46), (18, 23), (25, 29), (0, 39), (25, 38), (47, 68), (27, 65), (0, 48), (28, 64), (28, 9), (60, 62), (21, 25), (38, 41), (0, 2), (63, 40), (31, 35), (28, 18), (23, 22), (22, 32), (5, 16), (31, 44), (24, 60), (27, 22), (25, 68), (1, 12), (10, 24), (1, 21), (2, 20), (25, 22), (28, 39), (1, 30), (0, 32), (47, 61), (0, 41), (0, 50), (28, 66), (3, 12), (68, 47), (39, 41), (41, 60), (3, 21), (66, 68), (27, 15), (24, 62), (25, 15), (39, 62), (0, 25), (28, 41), (47, 63), (58, 60), (68, 40), (0, 52), (28, 68), (12, 17), (24, 46), (41, 62), (66, 61), (24, 64), (1, 7), (25, 63), (28, 25), (24, 9), (36, 38), (24, 18), (0, 18), (39, 64), (1, 25), (0, 27), (2, 24), (63, 65), (0, 36), (47, 65), (41, 46), (28, 61), (24, 39), (0, 54), (38, 47), (40, 44), (3, 25), (66, 63), (27, 19), (24, 66), (25, 65), (67, 46), (25, 19), (28, 36), (39, 66), (27, 46), (63, 67), (0, 29), (25, 28), (0, 38), (32, 36), (41, 48), (28, 63), (60, 61), (7, 25), (24, 41), (12, 21), (38, 40), (15, 29), (27, 67), (41, 66), (24, 68), (25, 67), (28, 29), (2, 10), (27, 39), (0, 22), (28, 38), (39, 68), (0, 31), (0, 40), (67, 60), (32, 38), (15, 22), (41, 50), (60, 63), (68, 46), (61, 62), (27, 60), (41, 68), (24, 61), (25, 60), (5, 20), (28, 22), (10, 16), (0, 15), (68, 67), (36, 44), (39, 61), (0, 24), (62, 63), (2, 30), (24, 27), (67, 62), (29, 23), (24, 36), (41, 52), (60, 65), (27, 62), (41, 61), (28, 15), (24, 63), (25, 62), (63, 46), (46, 60), (47, 46), (39, 63), (9, 29), (63, 64), (56, 58), (9, 38), (24, 29), (67, 64), (24, 38), (41, 54), (52, 54), (47, 67), (27, 64), (41, 63), (27, 9), (25, 46), (0, 56), (27, 18), (0, 1), (22, 31), (48, 50), (25, 64), (66, 65), (5, 24), (0, 10), (25, 9), (9, 22), (0, 19), (19, 23), (39, 65), (38, 67), (63, 66), (0, 28), (9, 40), (24, 22), (15, 19), (29, 18), (67, 66), (32, 44), (41, 47), (47, 60), (41, 56), (25, 39), (1, 47), (27, 66), (28, 65), (41, 65), (0, 58), (0, 3), (28, 19), (65, 68), (25, 66), (0, 12), (66, 67), (9, 15), (54, 56), (39, 67), (24, 15), (27, 41)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x114(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_26'}, {'instIndex': 857, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 858, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 859, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 860, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 861, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 868, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 869, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 870, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 871, 'instruction': 'jle\t.LBB1_25'}, {'instIndex': 999, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1000, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1001, 'instruction': 'movl\t%edx, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 1003, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1004, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 1005, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1006, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1007, 'instruction': 'cltd'}, {'instIndex': 1008, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1009, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1010, 'instruction': 'movl\t0x14(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1011, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1012, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1016, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 1018, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1019, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 1020, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 1027, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 1029, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1030, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1031, 'instruction': 'cltd'}, {'instIndex': 1032, 'instruction': 'idivl\t%esi'}, {'instIndex': 1033, 'instruction': 'movl\t8(%rsp), %edx                   # 4-byte Reload'}, {'instIndex': 1034, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 1035, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1036, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 1037, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 1038, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1039, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1040, 'instruction': 'jl\t.LBB1_20'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 1055 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x114(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_26'}, {'instIndex': 857, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 858, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 859, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 860, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 861, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 868, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 869, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 870, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 871, 'instruction': 'jle\t.LBB1_25'}, {'instIndex': 999, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1000, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1001, 'instruction': 'movl\t%edx, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 1003, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1004, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 1005, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1006, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1007, 'instruction': 'cltd'}, {'instIndex': 1008, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1009, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1010, 'instruction': 'movl\t0x14(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1011, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1012, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1016, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 1018, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1019, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 1020, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 1027, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 1029, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1030, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1031, 'instruction': 'cltd'}, {'instIndex': 1032, 'instruction': 'idivl\t%esi'}, {'instIndex': 1033, 'instruction': 'movl\t8(%rsp), %edx                   # 4-byte Reload'}, {'instIndex': 1034, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 1035, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1036, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 1037, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 1038, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1039, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1040, 'instruction': 'jl\t.LBB1_20'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 125 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 1055 instructions in binary file.
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
The execution time of patched subCFG information extraction via angr: 0:00:01.661283
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "call" for 0x4011c0>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d5>, <DisassemblerInsn "mov" for 0x4014db>, <DisassemblerInsn "call" for 0x4014e0>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "add" for 0x401024>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "add" for 0x401037>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "add" for 0x401049>, <DisassemblerInsn "add" for 0x401050>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "mov" for 0x40105f>, <DisassemblerInsn "add" for 0x401062>, <DisassemblerInsn "add" for 0x401069>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "add" for 0x40107b>, <DisassemblerInsn "add" for 0x401082>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "add" for 0x401094>, <DisassemblerInsn "add" for 0x40109b>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "add" for 0x4010ad>, <DisassemblerInsn "add" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010bb>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ee>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "add" for 0x401104>, <DisassemblerInsn "add" for 0x40110b>, <DisassemblerInsn "mov" for 0x40110f>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "add" for 0x40111a>, <DisassemblerInsn "add" for 0x401121>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "add" for 0x401130>, <DisassemblerInsn "add" for 0x401137>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "add" for 0x40114a>, <DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "xor" for 0x40115f>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ee>, <DisassemblerInsn "mov" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140e>, <DisassemblerInsn "call" for 0x401410>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401376>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401381>, <DisassemblerInsn "and" for 0x401384>, <DisassemblerInsn "cmp" for 0x401389>, <DisassemblerInsn "jne" for 0x40138c>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401412>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "add" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "cdq" for 0x401435>, <DisassemblerInsn "idiv" for 0x401436>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "cmp" for 0x40143e>, <DisassemblerInsn "jl" for 0x401440>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 37, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rbx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x240]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401412>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jl~~0x4011ab>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<jle~~0x4014bd>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}], 'cfg_edge_info': [(48, 50), (32, 34), (50, 52), (29, 30), (37, 35), (34, 36), (50, 36), (51, 50), (30, 32), (34, 35), (35, 37), (35, 31), (30, 31), (52, 31), (52, 37), (37, 36)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/O3/eatqi.o---before
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 69 nodes and 99 edges in CFGEmulated.
It has 68 nodes and 124 edges in CDG.
It has 4800 nodes and 6805 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198154, 4198380, 4198774, 4198779, 4199442, 4199494, 4199530]
{4194688, 4195449, 4199172, 4197639, 4195849, 4198154, 4198925, 4197905, 4199314, 4199442, 4198037, 4196248, 4196506, 4194853, 4199206, 4198951, 4197930, 4198827, 4196652, 4197935, 4196400, 4196538, 4197051, 4199613, 4194496, 4198977, 4198850, 4198082, 4197824, 4197445, 4199494, 4194885, 4197962, 4196560, 4197843, 4199252, 4198873, 4199003, 4197979, 4197725, 4194907, 4199653, 4199530, 4195051, 4198380, 4199406, 4198899, 4199667, 4199286, 4198774, 4197750, 4197878, 4198779}
[43, 22, 30, 65, 10, 8, 6, 29, 5, 27, 3, 47, 44, 58, 1, 13, 66, 60, 45, 63, 12, 2, 15, 35, 0, 41, 18, 36, 32, 28, 20, 16, 7, 24, 68, 4, 38, 56, 21, 50, 17, 37, 14, 46, 39, 23, 25, 67, 64, 19, 11, 31, 61, 62, 52, 48, 40, 54, 9]
The execution time of patched slicing information extraction via angr: 0:00:07.306147
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e21>, <DisassemblerInsn "call" for 0x400e24>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e2a>, <DisassemblerInsn "jge" for 0x400e2d>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401392>, <DisassemblerInsn "mov" for 0x40139a>, <DisassemblerInsn "mov" for 0x4013a2>, <DisassemblerInsn "mov" for 0x4013aa>, <DisassemblerInsn "mov" for 0x4013af>, <DisassemblerInsn "mov" for 0x4013b4>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c3>, <DisassemblerInsn "imul" for 0x4013c8>, <DisassemblerInsn "movsxd" for 0x4013cc>, <DisassemblerInsn "add" for 0x4013cf>, <DisassemblerInsn "add" for 0x4013d2>, <DisassemblerInsn "mov" for 0x4013d5>, <DisassemblerInsn "imul" for 0x4013da>, <DisassemblerInsn "movsxd" for 0x4013de>, <DisassemblerInsn "add" for 0x4013e1>, <DisassemblerInsn "add" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013e7>, <DisassemblerInsn "mov" for 0x4013ea>, <DisassemblerInsn "call" for 0x4013ec>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40082b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>, <DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d7e>, <DisassemblerInsn "mov" for 0x400d86>, <DisassemblerInsn "mov" for 0x400d89>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d92>, <DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "movd" for 0x4008a9>, <DisassemblerInsn "pshufd" for 0x4008ad>, <DisassemblerInsn "movaps" for 0x4008b2>, <DisassemblerInsn "mov" for 0x4008ba>, <DisassemblerInsn "movups" for 0x4008c1>, <DisassemblerInsn "xorps" for 0x4008c5>, <DisassemblerInsn "movaps" for 0x4008c8>, <DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c45>, <DisassemblerInsn "movzx" for 0x400c4c>, <DisassemblerInsn "imul" for 0x400c50>, <DisassemblerInsn "add" for 0x400c53>, <DisassemblerInsn "shr" for 0x400c56>, <DisassemblerInsn "mov" for 0x400c59>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "movd" for 0x400234>, <DisassemblerInsn "pshufd" for 0x400238>, <DisassemblerInsn "movaps" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x401189>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "cmp" for 0x401196>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a1>, <DisassemblerInsn "jle" for 0x4011a5>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014e5>, <DisassemblerInsn "mov" for 0x4014ec>, <DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "add" for 0x4014fa>, <DisassemblerInsn "pop" for 0x401501>, <DisassemblerInsn "pop" for 0x401502>, <DisassemblerInsn "pop" for 0x401504>, <DisassemblerInsn "ret" for 0x401505>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "mov" for 0x401249>, <DisassemblerInsn "mov" for 0x401251>, <DisassemblerInsn "call" for 0x401256>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400180>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "movzx" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movzx" for 0x400199>, <DisassemblerInsn "imul" for 0x40019c>, <DisassemblerInsn "shr" for 0x40019f>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "add" for 0x4001ac>, <DisassemblerInsn "add" for 0x4001b2>, <DisassemblerInsn "add" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "setb" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "add" for 0x4001d8>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "seta" for 0x4001df>, <DisassemblerInsn "and" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "add" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "setb" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "add" for 0x400201>, <DisassemblerInsn "cmp" for 0x400205>, <DisassemblerInsn "seta" for 0x400208>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "or" for 0x40020d>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "test" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401412>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "add" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x401427>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "cdq" for 0x401435>, <DisassemblerInsn "idiv" for 0x401436>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143a>, <DisassemblerInsn "cmp" for 0x40143e>, <DisassemblerInsn "jl" for 0x401440>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401263>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x401278>, <DisassemblerInsn "mov" for 0x401280>, <DisassemblerInsn "mov" for 0x401288>, <DisassemblerInsn "mov" for 0x401290>, <DisassemblerInsn "mov" for 0x401298>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "mov" for 0x4012a2>, <DisassemblerInsn "mov" for 0x4012a6>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "shl" for 0x4012ae>, <DisassemblerInsn "imul" for 0x4012b1>, <DisassemblerInsn "movsxd" for 0x4012b5>, <DisassemblerInsn "add" for 0x4012b8>, <DisassemblerInsn "mov" for 0x4012bb>, <DisassemblerInsn "mov" for 0x4012be>, <DisassemblerInsn "shl" for 0x4012c1>, <DisassemblerInsn "movsxd" for 0x4012c4>, <DisassemblerInsn "add" for 0x4012c7>, <DisassemblerInsn "mov" for 0x4012ca>, <DisassemblerInsn "mov" for 0x4012cf>, <DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "shl" for 0x4012d7>, <DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "mov" for 0x4012e0>, <DisassemblerInsn "mov" for 0x4012e3>, <DisassemblerInsn "shl" for 0x4012e8>, <DisassemblerInsn "movsxd" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "mov" for 0x4012f7>, <DisassemblerInsn "mov" for 0x4012fc>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "call" for 0x401302>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "mov" for 0x401361>, <DisassemblerInsn "mov" for 0x401365>, <DisassemblerInsn "mov" for 0x40136d>, <DisassemblerInsn "add" for 0x401370>, <DisassemblerInsn "call" for 0x401374>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083f>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "add" for 0x40084c>, <DisassemblerInsn "add" for 0x400853>, <DisassemblerInsn "add" for 0x400857>, <DisassemblerInsn "mov" for 0x40085d>, <DisassemblerInsn "add" for 0x400864>, <DisassemblerInsn "cmp" for 0x40086b>, <DisassemblerInsn "setb" for 0x40086e>, <DisassemblerInsn "mov" for 0x400871>, <DisassemblerInsn "add" for 0x400878>, <DisassemblerInsn "cmp" for 0x40087c>, <DisassemblerInsn "seta" for 0x40087f>, <DisassemblerInsn "and" for 0x400882>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "test" for 0x400889>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "jne" for 0x400894>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "mov" for 0x400d65>, <DisassemblerInsn "mov" for 0x400d6d>, <DisassemblerInsn "call" for 0x400d70>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "jmp" for 0x400e56>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000c0>, <DisassemblerInsn "push" for 0x4000c1>, <DisassemblerInsn "push" for 0x4000c3>, <DisassemblerInsn "sub" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "cdqe" for 0x4000fc>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "movzx" for 0x400112>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "movzx" for 0x40012e>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "add" for 0x400135>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "mov" for 0x400141>, <DisassemblerInsn "movzx" for 0x400144>, <DisassemblerInsn "imul" for 0x400148>, <DisassemblerInsn "add" for 0x40014b>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "add" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100d>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "add" for 0x401024>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "add" for 0x401037>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "add" for 0x401049>, <DisassemblerInsn "add" for 0x401050>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "mov" for 0x40105f>, <DisassemblerInsn "add" for 0x401062>, <DisassemblerInsn "add" for 0x401069>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "add" for 0x40107b>, <DisassemblerInsn "add" for 0x401082>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "add" for 0x401094>, <DisassemblerInsn "add" for 0x40109b>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "add" for 0x4010ad>, <DisassemblerInsn "add" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010bb>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ee>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "add" for 0x401104>, <DisassemblerInsn "add" for 0x40110b>, <DisassemblerInsn "mov" for 0x40110f>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "add" for 0x40111a>, <DisassemblerInsn "add" for 0x401121>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "add" for 0x401130>, <DisassemblerInsn "add" for 0x401137>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "add" for 0x40114a>, <DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "xor" for 0x40115f>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400de3>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "cmp" for 0x400deb>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "je" for 0x400df4>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea4>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "cmp" for 0x400eb1>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "je" for 0x400ebc>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e63>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e75>, <DisassemblerInsn "add" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e84>, <DisassemblerInsn "mov" for 0x400e88>, <DisassemblerInsn "call" for 0x400e90>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>, <DisassemblerInsn "pshufd" for 0x400a5e>, <DisassemblerInsn "movaps" for 0x400a63>, <DisassemblerInsn "pmuludq" for 0x400a66>, <DisassemblerInsn "pshufd" for 0x400a6a>, <DisassemblerInsn "punpckldq" for 0x400a6f>, <DisassemblerInsn "movaps" for 0x400a73>, <DisassemblerInsn "pmuludq" for 0x400a76>, <DisassemblerInsn "pshufd" for 0x400a7a>, <DisassemblerInsn "pshufd" for 0x400a7f>, <DisassemblerInsn "movaps" for 0x400a84>, <DisassemblerInsn "pmuludq" for 0x400a87>, <DisassemblerInsn "pshufd" for 0x400a8b>, <DisassemblerInsn "punpckldq" for 0x400a90>, <DisassemblerInsn "paddd" for 0x400a94>, <DisassemblerInsn "paddd" for 0x400a98>, <DisassemblerInsn "pslld" for 0x400a9c>, <DisassemblerInsn "psrad" for 0x400aa1>, <DisassemblerInsn "pslld" for 0x400aa6>, <DisassemblerInsn "psrad" for 0x400aab>, <DisassemblerInsn "packssdw" for 0x400ab0>, <DisassemblerInsn "movups" for 0x400ab4>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x4008d0>, <DisassemblerInsn "punpcklwd" for 0x4008d3>, <DisassemblerInsn "punpckhwd" for 0x4008d7>, <DisassemblerInsn "movaps" for 0x4008db>, <DisassemblerInsn "pmuludq" for 0x4008de>, <DisassemblerInsn "pshufd" for 0x4008e2>, <DisassemblerInsn "pshufd" for 0x4008e7>, <DisassemblerInsn "movaps" for 0x4008ec>, <DisassemblerInsn "pmuludq" for 0x4008ef>, <DisassemblerInsn "pshufd" for 0x4008f3>, <DisassemblerInsn "punpckldq" for 0x4008f8>, <DisassemblerInsn "movaps" for 0x4008fc>, <DisassemblerInsn "pmuludq" for 0x4008ff>, <DisassemblerInsn "pshufd" for 0x400903>, <DisassemblerInsn "pshufd" for 0x400908>, <DisassemblerInsn "movaps" for 0x40090d>, <DisassemblerInsn "pmuludq" for 0x400910>, <DisassemblerInsn "pshufd" for 0x400914>, <DisassemblerInsn "punpckldq" for 0x400919>, <DisassemblerInsn "movaps" for 0x40091d>, <DisassemblerInsn "movaps" for 0x400924>, <DisassemblerInsn "paddd" for 0x40092c>, <DisassemblerInsn "paddd" for 0x400930>, <DisassemblerInsn "pslld" for 0x400934>, <DisassemblerInsn "psrad" for 0x400939>, <DisassemblerInsn "pslld" for 0x40093e>, <DisassemblerInsn "psrad" for 0x400943>, <DisassemblerInsn "packssdw" for 0x400948>, <DisassemblerInsn "movups" for 0x40094c>, <DisassemblerInsn "movups" for 0x400953>, <DisassemblerInsn "movaps" for 0x400957>, <DisassemblerInsn "punpcklwd" for 0x40095a>, <DisassemblerInsn "punpckhwd" for 0x40095e>, <DisassemblerInsn "movaps" for 0x400962>, <DisassemblerInsn "pmuludq" for 0x400965>, <DisassemblerInsn "pshufd" for 0x400969>, <DisassemblerInsn "pshufd" for 0x40096e>, <DisassemblerInsn "movaps" for 0x400973>, <DisassemblerInsn "pmuludq" for 0x400976>, <DisassemblerInsn "pshufd" for 0x40097a>, <DisassemblerInsn "punpckldq" for 0x40097f>, <DisassemblerInsn "movaps" for 0x400983>, <DisassemblerInsn "pmuludq" for 0x400986>, <DisassemblerInsn "pshufd" for 0x40098a>, <DisassemblerInsn "pshufd" for 0x40098f>, <DisassemblerInsn "movaps" for 0x400994>, <DisassemblerInsn "pmuludq" for 0x400997>, <DisassemblerInsn "pshufd" for 0x40099b>, <DisassemblerInsn "punpckldq" for 0x4009a0>, <DisassemblerInsn "paddd" for 0x4009a4>, <DisassemblerInsn "paddd" for 0x4009a8>, <DisassemblerInsn "pslld" for 0x4009ac>, <DisassemblerInsn "psrad" for 0x4009b1>, <DisassemblerInsn "pslld" for 0x4009b6>, <DisassemblerInsn "psrad" for 0x4009bb>, <DisassemblerInsn "packssdw" for 0x4009c0>, <DisassemblerInsn "movups" for 0x4009c4>, <DisassemblerInsn "movups" for 0x4009cb>, <DisassemblerInsn "movaps" for 0x4009cf>, <DisassemblerInsn "punpcklwd" for 0x4009d2>, <DisassemblerInsn "punpckhwd" for 0x4009d6>, <DisassemblerInsn "movaps" for 0x4009da>, <DisassemblerInsn "pmuludq" for 0x4009dd>, <DisassemblerInsn "pshufd" for 0x4009e1>, <DisassemblerInsn "pshufd" for 0x4009e6>, <DisassemblerInsn "movaps" for 0x4009eb>, <DisassemblerInsn "pmuludq" for 0x4009ee>, <DisassemblerInsn "pshufd" for 0x4009f2>, <DisassemblerInsn "punpckldq" for 0x4009f7>, <DisassemblerInsn "movaps" for 0x4009fb>, <DisassemblerInsn "pmuludq" for 0x4009fe>, <DisassemblerInsn "pshufd" for 0x400a02>, <DisassemblerInsn "pshufd" for 0x400a07>, <DisassemblerInsn "movaps" for 0x400a0c>, <DisassemblerInsn "pmuludq" for 0x400a0f>, <DisassemblerInsn "pshufd" for 0x400a13>, <DisassemblerInsn "punpckldq" for 0x400a18>, <DisassemblerInsn "paddd" for 0x400a1c>, <DisassemblerInsn "paddd" for 0x400a20>, <DisassemblerInsn "pslld" for 0x400a24>, <DisassemblerInsn "psrad" for 0x400a29>, <DisassemblerInsn "pslld" for 0x400a2e>, <DisassemblerInsn "psrad" for 0x400a33>, <DisassemblerInsn "packssdw" for 0x400a38>, <DisassemblerInsn "movups" for 0x400a3c>, <DisassemblerInsn "movups" for 0x400a43>, <DisassemblerInsn "movaps" for 0x400a47>, <DisassemblerInsn "punpcklwd" for 0x400a4a>, <DisassemblerInsn "punpckhwd" for 0x400a4e>, <DisassemblerInsn "movaps" for 0x400a52>, <DisassemblerInsn "pmuludq" for 0x400a55>, <DisassemblerInsn "pshufd" for 0x400a59>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "movups" for 0x40024c>, <DisassemblerInsn "xorps" for 0x400250>, <DisassemblerInsn "movaps" for 0x400253>, <DisassemblerInsn "movaps" for 0x40025b>, <DisassemblerInsn "punpckhwd" for 0x40025f>, <DisassemblerInsn "punpcklwd" for 0x400264>, <DisassemblerInsn "mov" for 0x400268>, <DisassemblerInsn "movups" for 0x40026f>, <DisassemblerInsn "movaps" for 0x400273>, <DisassemblerInsn "punpcklwd" for 0x400276>, <DisassemblerInsn "punpckhwd" for 0x40027a>, <DisassemblerInsn "pshufd" for 0x40027e>, <DisassemblerInsn "movaps" for 0x400283>, <DisassemblerInsn "pmuludq" for 0x400286>, <DisassemblerInsn "movaps" for 0x40028a>, <DisassemblerInsn "pmuludq" for 0x40028d>, <DisassemblerInsn "pshufd" for 0x400291>, <DisassemblerInsn "movaps" for 0x400297>, <DisassemblerInsn "pmuludq" for 0x40029a>, <DisassemblerInsn "movaps" for 0x40029e>, <DisassemblerInsn "pmuludq" for 0x4002a1>, <DisassemblerInsn "pmuludq" for 0x4002a6>, <DisassemblerInsn "pshufd" for 0x4002aa>, <DisassemblerInsn "pshufd" for 0x4002af>, <DisassemblerInsn "pmuludq" for 0x4002b4>, <DisassemblerInsn "pshufd" for 0x4002b8>, <DisassemblerInsn "punpckldq" for 0x4002bd>, <DisassemblerInsn "pmuludq" for 0x4002c1>, <DisassemblerInsn "pshufd" for 0x4002c5>, <DisassemblerInsn "pshufd" for 0x4002ca>, <DisassemblerInsn "pmuludq" for 0x4002cf>, <DisassemblerInsn "pshufd" for 0x4002d3>, <DisassemblerInsn "punpckldq" for 0x4002d8>, <DisassemblerInsn "movaps" for 0x4002dc>, <DisassemblerInsn "movaps" for 0x4002e3>, <DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400abb>, <DisassemblerInsn "movaps" for 0x400abf>, <DisassemblerInsn "punpcklwd" for 0x400ac2>, <DisassemblerInsn "punpckhwd" for 0x400ac6>, <DisassemblerInsn "movaps" for 0x400aca>, <DisassemblerInsn "pmuludq" for 0x400acd>, <DisassemblerInsn "pshufd" for 0x400ad1>, <DisassemblerInsn "pshufd" for 0x400ad6>, <DisassemblerInsn "movaps" for 0x400adb>, <DisassemblerInsn "pmuludq" for 0x400ade>, <DisassemblerInsn "pshufd" for 0x400ae2>, <DisassemblerInsn "punpckldq" for 0x400ae7>, <DisassemblerInsn "movaps" for 0x400aeb>, <DisassemblerInsn "pmuludq" for 0x400aee>, <DisassemblerInsn "pshufd" for 0x400af2>, <DisassemblerInsn "pshufd" for 0x400af7>, <DisassemblerInsn "movaps" for 0x400afc>, <DisassemblerInsn "pmuludq" for 0x400aff>, <DisassemblerInsn "pshufd" for 0x400b03>, <DisassemblerInsn "punpckldq" for 0x400b08>, <DisassemblerInsn "paddd" for 0x400b0c>, <DisassemblerInsn "paddd" for 0x400b10>, <DisassemblerInsn "pslld" for 0x400b14>, <DisassemblerInsn "psrad" for 0x400b19>, <DisassemblerInsn "pslld" for 0x400b1e>, <DisassemblerInsn "psrad" for 0x400b23>, <DisassemblerInsn "packssdw" for 0x400b28>, <DisassemblerInsn "movups" for 0x400b2c>, <DisassemblerInsn "movups" for 0x400b33>, <DisassemblerInsn "movaps" for 0x400b37>, <DisassemblerInsn "punpcklwd" for 0x400b3a>, <DisassemblerInsn "punpckhwd" for 0x400b3e>, <DisassemblerInsn "movaps" for 0x400b42>, <DisassemblerInsn "pmuludq" for 0x400b45>, <DisassemblerInsn "pshufd" for 0x400b49>, <DisassemblerInsn "pshufd" for 0x400b4e>, <DisassemblerInsn "movaps" for 0x400b53>, <DisassemblerInsn "pmuludq" for 0x400b56>, <DisassemblerInsn "pshufd" for 0x400b5a>, <DisassemblerInsn "punpckldq" for 0x400b5f>, <DisassemblerInsn "movaps" for 0x400b63>, <DisassemblerInsn "pmuludq" for 0x400b66>, <DisassemblerInsn "pshufd" for 0x400b6a>, <DisassemblerInsn "pshufd" for 0x400b6f>, <DisassemblerInsn "movaps" for 0x400b74>, <DisassemblerInsn "pmuludq" for 0x400b77>, <DisassemblerInsn "pshufd" for 0x400b7b>, <DisassemblerInsn "punpckldq" for 0x400b80>, <DisassemblerInsn "paddd" for 0x400b84>, <DisassemblerInsn "paddd" for 0x400b88>, <DisassemblerInsn "pslld" for 0x400b8c>, <DisassemblerInsn "psrad" for 0x400b91>, <DisassemblerInsn "pslld" for 0x400b96>, <DisassemblerInsn "psrad" for 0x400b9b>, <DisassemblerInsn "packssdw" for 0x400ba0>, <DisassemblerInsn "movups" for 0x400ba4>, <DisassemblerInsn "movups" for 0x400bab>, <DisassemblerInsn "movaps" for 0x400baf>, <DisassemblerInsn "punpcklwd" for 0x400bb2>, <DisassemblerInsn "punpckhwd" for 0x400bb6>, <DisassemblerInsn "movaps" for 0x400bba>, <DisassemblerInsn "pmuludq" for 0x400bbd>, <DisassemblerInsn "pshufd" for 0x400bc1>, <DisassemblerInsn "pshufd" for 0x400bc6>, <DisassemblerInsn "movaps" for 0x400bcb>, <DisassemblerInsn "pmuludq" for 0x400bce>, <DisassemblerInsn "pshufd" for 0x400bd2>, <DisassemblerInsn "punpckldq" for 0x400bd7>, <DisassemblerInsn "movaps" for 0x400bdb>, <DisassemblerInsn "pmuludq" for 0x400bde>, <DisassemblerInsn "pshufd" for 0x400be2>, <DisassemblerInsn "pshufd" for 0x400be7>, <DisassemblerInsn "pmuludq" for 0x400bec>, <DisassemblerInsn "pshufd" for 0x400bf0>, <DisassemblerInsn "punpckldq" for 0x400bf5>, <DisassemblerInsn "paddd" for 0x400bf9>, <DisassemblerInsn "paddd" for 0x400bfd>, <DisassemblerInsn "pslld" for 0x400c01>, <DisassemblerInsn "psrad" for 0x400c06>, <DisassemblerInsn "pslld" for 0x400c0b>, <DisassemblerInsn "psrad" for 0x400c10>, <DisassemblerInsn "packssdw" for 0x400c15>, <DisassemblerInsn "movdqu" for 0x400c19>, <DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c36>, <DisassemblerInsn "mov" for 0x400c3d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ee>, <DisassemblerInsn "mov" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401403>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140e>, <DisassemblerInsn "call" for 0x401410>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>, <DisassemblerInsn "mov" for 0x400798>, <DisassemblerInsn "imul" for 0x40079f>, <DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "add" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ac>, <DisassemblerInsn "shr" for 0x4007b3>, <DisassemblerInsn "mov" for 0x4007b6>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "movzx" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "movzx" for 0x4007d8>, <DisassemblerInsn "imul" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e0>, <DisassemblerInsn "imul" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "add" for 0x4007f1>, <DisassemblerInsn "mov" for 0x4007f4>, <DisassemblerInsn "shr" for 0x4007fb>, <DisassemblerInsn "mov" for 0x4007fe>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "add" for 0x40080d>, <DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "cmp" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "je" for 0x400825>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec2>, <DisassemblerInsn "mov" for 0x400eca>, <DisassemblerInsn "mov" for 0x400ed2>, <DisassemblerInsn "mov" for 0x400eda>, <DisassemblerInsn "mov" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee9>, <DisassemblerInsn "mov" for 0x400ef1>, <DisassemblerInsn "cqo" for 0x400ef6>, <DisassemblerInsn "idiv" for 0x400ef8>, <DisassemblerInsn "mov" for 0x400efb>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "mov" for 0x400f06>, <DisassemblerInsn "call" for 0x400f08>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401227>, <DisassemblerInsn "mov" for 0x40122f>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "call" for 0x40123c>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movups" for 0x400479>, <DisassemblerInsn "movaps" for 0x40047e>, <DisassemblerInsn "punpcklwd" for 0x400482>, <DisassemblerInsn "punpckhwd" for 0x400486>, <DisassemblerInsn "pshufd" for 0x40048b>, <DisassemblerInsn "movaps" for 0x400490>, <DisassemblerInsn "pmuludq" for 0x400493>, <DisassemblerInsn "movaps" for 0x400497>, <DisassemblerInsn "pmuludq" for 0x40049a>, <DisassemblerInsn "pshufd" for 0x40049e>, <DisassemblerInsn "movaps" for 0x4004a4>, <DisassemblerInsn "pmuludq" for 0x4004a7>, <DisassemblerInsn "movaps" for 0x4004ab>, <DisassemblerInsn "pmuludq" for 0x4004ae>, <DisassemblerInsn "pmuludq" for 0x4004b3>, <DisassemblerInsn "pshufd" for 0x4004b8>, <DisassemblerInsn "pshufd" for 0x4004bd>, <DisassemblerInsn "pmuludq" for 0x4004c3>, <DisassemblerInsn "pshufd" for 0x4004c8>, <DisassemblerInsn "punpckldq" for 0x4004cd>, <DisassemblerInsn "pmuludq" for 0x4004d1>, <DisassemblerInsn "pshufd" for 0x4004d5>, <DisassemblerInsn "pshufd" for 0x4004da>, <DisassemblerInsn "pmuludq" for 0x4004df>, <DisassemblerInsn "pshufd" for 0x4004e3>, <DisassemblerInsn "punpckldq" for 0x4004e8>, <DisassemblerInsn "paddd" for 0x4004ec>, <DisassemblerInsn "paddd" for 0x4004f0>, <DisassemblerInsn "pslld" for 0x4004f4>, <DisassemblerInsn "psrad" for 0x4004f9>, <DisassemblerInsn "pslld" for 0x4004fe>, <DisassemblerInsn "psrad" for 0x400503>, <DisassemblerInsn "packssdw" for 0x400508>, <DisassemblerInsn "movups" for 0x40050c>, <DisassemblerInsn "movups" for 0x400513>, <DisassemblerInsn "movaps" for 0x400517>, <DisassemblerInsn "punpckhwd" for 0x40051b>, <DisassemblerInsn "punpcklwd" for 0x400520>, <DisassemblerInsn "movups" for 0x400524>, <DisassemblerInsn "movaps" for 0x400529>, <DisassemblerInsn "punpcklwd" for 0x40052d>, <DisassemblerInsn "punpckhwd" for 0x400531>, <DisassemblerInsn "pshufd" for 0x400536>, <DisassemblerInsn "movaps" for 0x40053b>, <DisassemblerInsn "pmuludq" for 0x40053e>, <DisassemblerInsn "movaps" for 0x400542>, <DisassemblerInsn "pmuludq" for 0x400545>, <DisassemblerInsn "pshufd" for 0x400549>, <DisassemblerInsn "movaps" for 0x40054f>, <DisassemblerInsn "pmuludq" for 0x400552>, <DisassemblerInsn "movaps" for 0x400556>, <DisassemblerInsn "pmuludq" for 0x400559>, <DisassemblerInsn "pmuludq" for 0x40055e>, <DisassemblerInsn "pshufd" for 0x400563>, <DisassemblerInsn "pshufd" for 0x400568>, <DisassemblerInsn "pmuludq" for 0x40056e>, <DisassemblerInsn "pshufd" for 0x400573>, <DisassemblerInsn "punpckldq" for 0x400578>, <DisassemblerInsn "pmuludq" for 0x40057c>, <DisassemblerInsn "pshufd" for 0x400580>, <DisassemblerInsn "pshufd" for 0x400585>, <DisassemblerInsn "pmuludq" for 0x40058a>, <DisassemblerInsn "pshufd" for 0x40058e>, <DisassemblerInsn "punpckldq" for 0x400593>, <DisassemblerInsn "paddd" for 0x400597>, <DisassemblerInsn "paddd" for 0x40059b>, <DisassemblerInsn "pslld" for 0x40059f>, <DisassemblerInsn "psrad" for 0x4005a4>, <DisassemblerInsn "pslld" for 0x4005a9>, <DisassemblerInsn "psrad" for 0x4005ae>, <DisassemblerInsn "packssdw" for 0x4005b3>, <DisassemblerInsn "movups" for 0x4005b7>, <DisassemblerInsn "movups" for 0x4005be>, <DisassemblerInsn "movaps" for 0x4005c2>, <DisassemblerInsn "punpckhwd" for 0x4005c6>, <DisassemblerInsn "punpcklwd" for 0x4005cb>, <DisassemblerInsn "movups" for 0x4005cf>, <DisassemblerInsn "movaps" for 0x4005d4>, <DisassemblerInsn "punpcklwd" for 0x4005d8>, <DisassemblerInsn "punpckhwd" for 0x4005dc>, <DisassemblerInsn "pshufd" for 0x4005e1>, <DisassemblerInsn "movaps" for 0x4005e6>, <DisassemblerInsn "pmuludq" for 0x4005e9>, <DisassemblerInsn "movaps" for 0x4005ed>, <DisassemblerInsn "pmuludq" for 0x4005f0>, <DisassemblerInsn "pshufd" for 0x4005f4>, <DisassemblerInsn "movaps" for 0x4005fa>, <DisassemblerInsn "pmuludq" for 0x4005fd>, <DisassemblerInsn "movaps" for 0x400601>, <DisassemblerInsn "pmuludq" for 0x400604>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d9>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "call" for 0x4011ee>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "paddd" for 0x4002eb>, <DisassemblerInsn "paddd" for 0x4002ef>, <DisassemblerInsn "pslld" for 0x4002f3>, <DisassemblerInsn "psrad" for 0x4002f8>, <DisassemblerInsn "pslld" for 0x4002fd>, <DisassemblerInsn "psrad" for 0x400302>, <DisassemblerInsn "packssdw" for 0x400307>, <DisassemblerInsn "movups" for 0x40030b>, <DisassemblerInsn "movups" for 0x400312>, <DisassemblerInsn "movaps" for 0x400316>, <DisassemblerInsn "punpckhwd" for 0x40031a>, <DisassemblerInsn "punpcklwd" for 0x40031f>, <DisassemblerInsn "movups" for 0x400323>, <DisassemblerInsn "movaps" for 0x400328>, <DisassemblerInsn "punpcklwd" for 0x40032c>, <DisassemblerInsn "punpckhwd" for 0x400330>, <DisassemblerInsn "pshufd" for 0x400335>, <DisassemblerInsn "movaps" for 0x40033a>, <DisassemblerInsn "pmuludq" for 0x40033d>, <DisassemblerInsn "movaps" for 0x400341>, <DisassemblerInsn "pmuludq" for 0x400344>, <DisassemblerInsn "pshufd" for 0x400348>, <DisassemblerInsn "movaps" for 0x40034e>, <DisassemblerInsn "pmuludq" for 0x400351>, <DisassemblerInsn "movaps" for 0x400355>, <DisassemblerInsn "pmuludq" for 0x400358>, <DisassemblerInsn "pmuludq" for 0x40035d>, <DisassemblerInsn "pshufd" for 0x400362>, <DisassemblerInsn "pshufd" for 0x400367>, <DisassemblerInsn "pmuludq" for 0x40036d>, <DisassemblerInsn "pshufd" for 0x400372>, <DisassemblerInsn "punpckldq" for 0x400377>, <DisassemblerInsn "pmuludq" for 0x40037b>, <DisassemblerInsn "pshufd" for 0x40037f>, <DisassemblerInsn "pshufd" for 0x400384>, <DisassemblerInsn "pmuludq" for 0x400389>, <DisassemblerInsn "pshufd" for 0x40038d>, <DisassemblerInsn "punpckldq" for 0x400392>, <DisassemblerInsn "paddd" for 0x400396>, <DisassemblerInsn "paddd" for 0x40039a>, <DisassemblerInsn "pslld" for 0x40039e>, <DisassemblerInsn "psrad" for 0x4003a3>, <DisassemblerInsn "pslld" for 0x4003a8>, <DisassemblerInsn "psrad" for 0x4003ad>, <DisassemblerInsn "packssdw" for 0x4003b2>, <DisassemblerInsn "movups" for 0x4003b6>, <DisassemblerInsn "movups" for 0x4003bd>, <DisassemblerInsn "movaps" for 0x4003c1>, <DisassemblerInsn "punpckhwd" for 0x4003c5>, <DisassemblerInsn "punpcklwd" for 0x4003ca>, <DisassemblerInsn "movups" for 0x4003ce>, <DisassemblerInsn "movaps" for 0x4003d3>, <DisassemblerInsn "punpcklwd" for 0x4003d7>, <DisassemblerInsn "punpckhwd" for 0x4003db>, <DisassemblerInsn "pshufd" for 0x4003e0>, <DisassemblerInsn "movaps" for 0x4003e5>, <DisassemblerInsn "pmuludq" for 0x4003e8>, <DisassemblerInsn "movaps" for 0x4003ec>, <DisassemblerInsn "pmuludq" for 0x4003ef>, <DisassemblerInsn "pshufd" for 0x4003f3>, <DisassemblerInsn "movaps" for 0x4003f9>, <DisassemblerInsn "pmuludq" for 0x4003fc>, <DisassemblerInsn "movaps" for 0x400400>, <DisassemblerInsn "pmuludq" for 0x400403>, <DisassemblerInsn "pmuludq" for 0x400408>, <DisassemblerInsn "pshufd" for 0x40040d>, <DisassemblerInsn "pshufd" for 0x400412>, <DisassemblerInsn "pmuludq" for 0x400418>, <DisassemblerInsn "pshufd" for 0x40041d>, <DisassemblerInsn "punpckldq" for 0x400422>, <DisassemblerInsn "pmuludq" for 0x400426>, <DisassemblerInsn "pshufd" for 0x40042a>, <DisassemblerInsn "pshufd" for 0x40042f>, <DisassemblerInsn "pmuludq" for 0x400434>, <DisassemblerInsn "pshufd" for 0x400438>, <DisassemblerInsn "punpckldq" for 0x40043d>, <DisassemblerInsn "paddd" for 0x400441>, <DisassemblerInsn "paddd" for 0x400445>, <DisassemblerInsn "pslld" for 0x400449>, <DisassemblerInsn "psrad" for 0x40044e>, <DisassemblerInsn "pslld" for 0x400453>, <DisassemblerInsn "psrad" for 0x400458>, <DisassemblerInsn "packssdw" for 0x40045d>, <DisassemblerInsn "movups" for 0x400461>, <DisassemblerInsn "movups" for 0x400468>, <DisassemblerInsn "movaps" for 0x40046c>, <DisassemblerInsn "punpckhwd" for 0x400470>, <DisassemblerInsn "punpcklwd" for 0x400475>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "add" for 0x4014fa>, <DisassemblerInsn "pop" for 0x401501>, <DisassemblerInsn "pop" for 0x401502>, <DisassemblerInsn "pop" for 0x401504>, <DisassemblerInsn "ret" for 0x401505>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9a>, <DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "mov" for 0x400da9>, <DisassemblerInsn "mov" for 0x400db1>, <DisassemblerInsn "cmp" for 0x400db8>, <DisassemblerInsn "je" for 0x400dbe>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ab>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "call" for 0x4011c0>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "mov" for 0x400f1a>, <DisassemblerInsn "mov" for 0x400f22>, <DisassemblerInsn "mov" for 0x400f2a>, <DisassemblerInsn "mov" for 0x400f2d>, <DisassemblerInsn "shl" for 0x400f30>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "sar" for 0x400f37>, <DisassemblerInsn "xor" for 0x400f3a>, <DisassemblerInsn "cmp" for 0x400f3c>, <DisassemblerInsn "cmovl" for 0x400f40>, <DisassemblerInsn "xor" for 0x400f44>, <DisassemblerInsn "cmp" for 0x400f47>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "cmovl" for 0x400f4e>, <DisassemblerInsn "xor" for 0x400f52>, <DisassemblerInsn "cmp" for 0x400f55>, <DisassemblerInsn "cmovl" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5d>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6d>, <DisassemblerInsn "movsxd" for 0x400f73>, <DisassemblerInsn "add" for 0x400f76>, <DisassemblerInsn "mov" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f80>, <DisassemblerInsn "mov" for 0x400f8a>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "mov" for 0x400fa8>, <DisassemblerInsn "add" for 0x400fab>, <DisassemblerInsn "mov" for 0x400fb2>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "add" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc4>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "cmp" for 0x400fe3>, <DisassemblerInsn "jle" for 0x400fe6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df6>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e05>, <DisassemblerInsn "call" for 0x400e0c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "pmuludq" for 0x400609>, <DisassemblerInsn "pshufd" for 0x40060e>, <DisassemblerInsn "pshufd" for 0x400613>, <DisassemblerInsn "pmuludq" for 0x400619>, <DisassemblerInsn "pshufd" for 0x40061e>, <DisassemblerInsn "punpckldq" for 0x400623>, <DisassemblerInsn "pmuludq" for 0x400627>, <DisassemblerInsn "pshufd" for 0x40062b>, <DisassemblerInsn "pshufd" for 0x400630>, <DisassemblerInsn "pmuludq" for 0x400635>, <DisassemblerInsn "pshufd" for 0x400639>, <DisassemblerInsn "punpckldq" for 0x40063e>, <DisassemblerInsn "paddd" for 0x400642>, <DisassemblerInsn "paddd" for 0x400646>, <DisassemblerInsn "pslld" for 0x40064a>, <DisassemblerInsn "psrad" for 0x40064f>, <DisassemblerInsn "pslld" for 0x400654>, <DisassemblerInsn "psrad" for 0x400659>, <DisassemblerInsn "packssdw" for 0x40065e>, <DisassemblerInsn "movups" for 0x400662>, <DisassemblerInsn "movups" for 0x400669>, <DisassemblerInsn "movaps" for 0x40066d>, <DisassemblerInsn "punpckhwd" for 0x400670>, <DisassemblerInsn "punpcklwd" for 0x400674>, <DisassemblerInsn "movups" for 0x400678>, <DisassemblerInsn "movaps" for 0x40067c>, <DisassemblerInsn "punpcklwd" for 0x40067f>, <DisassemblerInsn "punpckhwd" for 0x400683>, <DisassemblerInsn "pshufd" for 0x400687>, <DisassemblerInsn "movaps" for 0x40068c>, <DisassemblerInsn "pmuludq" for 0x40068f>, <DisassemblerInsn "movaps" for 0x400693>, <DisassemblerInsn "pmuludq" for 0x400696>, <DisassemblerInsn "pshufd" for 0x40069a>, <DisassemblerInsn "movaps" for 0x4006a0>, <DisassemblerInsn "pmuludq" for 0x4006a3>, <DisassemblerInsn "pmuludq" for 0x4006a8>, <DisassemblerInsn "pmuludq" for 0x4006ac>, <DisassemblerInsn "pshufd" for 0x4006b0>, <DisassemblerInsn "pshufd" for 0x4006b5>, <DisassemblerInsn "pmuludq" for 0x4006ba>, <DisassemblerInsn "pshufd" for 0x4006be>, <DisassemblerInsn "punpckldq" for 0x4006c3>, <DisassemblerInsn "pmuludq" for 0x4006c7>, <DisassemblerInsn "pshufd" for 0x4006cb>, <DisassemblerInsn "pshufd" for 0x4006d0>, <DisassemblerInsn "pmuludq" for 0x4006d5>, <DisassemblerInsn "pshufd" for 0x4006d9>, <DisassemblerInsn "punpckldq" for 0x4006de>, <DisassemblerInsn "paddd" for 0x4006e2>, <DisassemblerInsn "paddd" for 0x4006e6>, <DisassemblerInsn "pslld" for 0x4006ea>, <DisassemblerInsn "psrad" for 0x4006ef>, <DisassemblerInsn "pslld" for 0x4006f4>, <DisassemblerInsn "psrad" for 0x4006f9>, <DisassemblerInsn "packssdw" for 0x4006fe>, <DisassemblerInsn "movdqu" for 0x400702>, <DisassemblerInsn "mov" for 0x40070a>, <DisassemblerInsn "mov" for 0x40070f>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "mov" for 0x40072e>, <DisassemblerInsn "movzx" for 0x400735>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "movzx" for 0x400740>, <DisassemblerInsn "imul" for 0x400744>, <DisassemblerInsn "imul" for 0x400747>, <DisassemblerInsn "add" for 0x40074a>, <DisassemblerInsn "shr" for 0x40074d>, <DisassemblerInsn "mov" for 0x400750>, <DisassemblerInsn "add" for 0x400758>, <DisassemblerInsn "mov" for 0x40075c>, <DisassemblerInsn "mov" for 0x400764>, <DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "mov" for 0x40077b>, <DisassemblerInsn "movzx" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "movzx" for 0x40078e>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "imul" for 0x400794>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x40145a>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x401466>, <DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "add" for 0x401486>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "add" for 0x40148b>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "cdq" for 0x401493>, <DisassemblerInsn "idiv" for 0x401494>, <DisassemblerInsn "mov" for 0x401496>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x40149c>, <DisassemblerInsn "cmp" for 0x4014a0>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b0>, <DisassemblerInsn "jl" for 0x4014b7>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401376>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401381>, <DisassemblerInsn "and" for 0x401384>, <DisassemblerInsn "cmp" for 0x401389>, <DisassemblerInsn "jne" for 0x40138c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6d>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "movzx" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "imul" for 0x400c91>, <DisassemblerInsn "mov" for 0x400c94>, <DisassemblerInsn "add" for 0x400c9b>, <DisassemblerInsn "mov" for 0x400c9e>, <DisassemblerInsn "shr" for 0x400ca5>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "mov" for 0x400caf>, <DisassemblerInsn "mov" for 0x400cb7>, <DisassemblerInsn "movzx" for 0x400cbe>, <DisassemblerInsn "imul" for 0x400cc3>, <DisassemblerInsn "mov" for 0x400cc6>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "mov" for 0x400cd0>, <DisassemblerInsn "shr" for 0x400cd7>, <DisassemblerInsn "mov" for 0x400cda>, <DisassemblerInsn "mov" for 0x400ce1>, <DisassemblerInsn "add" for 0x400ce9>, <DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "cmp" for 0x400cf5>, <DisassemblerInsn "mov" for 0x400cf9>, <DisassemblerInsn "jne" for 0x400d01>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e37>, <DisassemblerInsn "lea" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "call" for 0x400e45>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401304>, <DisassemblerInsn "mov" for 0x40130c>, <DisassemblerInsn "mov" for 0x401311>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131d>, <DisassemblerInsn "add" for 0x401320>, <DisassemblerInsn "call" for 0x401324>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132b>, <DisassemblerInsn "mov" for 0x401333>, <DisassemblerInsn "mov" for 0x40133b>, <DisassemblerInsn "mov" for 0x40133f>, <DisassemblerInsn "mov" for 0x401342>, <DisassemblerInsn "shl" for 0x401344>, <DisassemblerInsn "movsxd" for 0x401347>, <DisassemblerInsn "add" for 0x40134a>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "call" for 0x401352>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f3>, <DisassemblerInsn "mov" for 0x4011fb>, <DisassemblerInsn "mov" for 0x401203>, <DisassemblerInsn "call" for 0x401208>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "xor" for 0x4011d2>, <DisassemblerInsn "call" for 0x4011d4>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "mov" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014cd>, <DisassemblerInsn "mov" for 0x4014d5>, <DisassemblerInsn "mov" for 0x4014db>, <DisassemblerInsn "call" for 0x4014e0>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40120d>, <DisassemblerInsn "mov" for 0x401215>, <DisassemblerInsn "mov" for 0x40121d>, <DisassemblerInsn "call" for 0x401222>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "mov" for 0x400d0f>, <DisassemblerInsn "mov" for 0x400d16>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "add" for 0x400d26>, <DisassemblerInsn "mov" for 0x400d2a>, <DisassemblerInsn "mov" for 0x400d32>, <DisassemblerInsn "add" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3c>, <DisassemblerInsn "cmp" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4c>, <DisassemblerInsn "mov" for 0x400d53>, <DisassemblerInsn "je" for 0x400d5b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 43, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e5b>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [rsp + 0x28]>', '<mov~~r8d, dword ptr [rsp + 0x2c]>', '<mov~~r10, qword ptr [rsp + 0x38]>', '<mov~~r11d, dword ptr [rsp + 0x44]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 0x18], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x400764>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x188], rax>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rcx, qword ptr [rsp + 0x278]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x15c], ecx>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~ecx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~dword ptr [rsp + 0x144], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~ecx, dword ptr [rsp + 0x28c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm3, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x190], xmm3>', '<mov~~rcx, qword ptr [rip + 0xff77f]>', '<movups~~xmm0, xmmword ptr [rcx + 2]>', '<xorps~~xmm1, xmm1>', '<movaps~~xmmword ptr [rsp + 0x1a0], xmm1>', '<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rip + 0xff3f4]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 3>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x188], rax>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~ecx, dword ptr [rsp + 0x28c]>', '<movd~~xmm0, ecx>', '<pshufd~~xmm1, xmm0, 0>', '<movaps~~xmmword ptr [rsp + 0x200], xmm1>', '<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x210], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jle~~0x40146a>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~dword ptr [rsp + 0x130], eax>', '<mov~~eax, dword ptr [rsp + 0x130]>', '<add~~rsp, 0x2a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~edx, 5>', '<call~~0x500060>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rip + 0xffea1]>', '<movzx~~ecx, word ptr [rax]>', '<mov~~rax, qword ptr [rip + 0xffea7]>', '<movzx~~eax, word ptr [rax]>', '<imul~~eax, ecx>', '<shr~~eax, 0xb>', '<mov~~word ptr [rdx + 0x3280], ax>', '<mov~~rax, rdx>', '<add~~rax, 0x3280>', '<add~~rax, 2>', '<add~~rdx, 0x3300>', '<mov~~rcx, qword ptr [rip + 0xffe6c]>', '<add~~rcx, 0x80>', '<cmp~~rax, rcx>', '<setb~~cl>', '<mov~~rsi, qword ptr [rip + 0xffe58]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~sil>', '<and~~cl, sil>', '<mov~~rsi, qword ptr [rip + 0xffe53]>', '<add~~rsi, 0x80>', '<cmp~~rax, rsi>', '<setb~~al>', '<mov~~rsi, qword ptr [rip + 0xffe3f]>', '<add~~rsi, 2>', '<cmp~~rdx, rsi>', '<seta~~dl>', '<and~~al, dl>', '<or~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jne~~0x400717>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x10], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jl~~0x4011ab>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~r11, qword ptr [rsp + 0x100]>', '<mov~~r9, qword ptr [rsp + 0x68]>', '<mov~~r10, qword ptr [rsp + 0xc8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x58], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x20], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x28], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x2c], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x30], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x50]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 12, 'blockInsts': ['<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rip + 0xff801]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x3280>', '<add~~rcx, 2>', '<add~~rax, 0x3300>', '<mov~~rdx, qword ptr [rip + 0xff7dc]>', '<add~~rdx, 0x80>', '<cmp~~rcx, rdx>', '<setb~~cl>', '<mov~~rdx, qword ptr [rip + 0xff7c8]>', '<add~~rdx, 2>', '<cmp~~rax, rdx>', '<seta~~al>', '<and~~cl, al>', '<mov~~eax, 1>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<jne~~0x400c2e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x130], eax>', '<jmp~~0x4014f3>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x2a0>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x238], rdi>', '<mov~~qword ptr [rsp + 0x240], rsi>', '<mov~~qword ptr [rsp + 0x248], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x25c], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x260], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x268], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x274], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x278], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x280], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x28c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x298], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400830>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x114]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0x70], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0x78], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0x90], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x280>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<add~~rcx, 0x1728>', '<add~~rcx, 0x14b0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0x68]>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x134], eax>', '<je~~0x400e11>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x268]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x130], eax>', '<je~~0x4014f3>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x268]>', '<mov~~rdx, qword ptr [rsp + 0x260]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x118], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x120], rdx>', '<call~~0x500058>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 20, 'blockInsts': ['<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm0>']}, {'block_Idx': 16, 'blockInsts': ['<movaps~~xmm2, xmm0>', '<punpcklwd~~xmm2, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm2>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm5, xmm2, 0xf5>', '<movaps~~xmm2, xmm3>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm0, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0xc4c]>', '<movaps~~xmmword ptr [rsp + 0x1b0], xmm2>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdx, qword ptr [rip + 0xffde4]>', '<movups~~xmm4, xmmword ptr [rdx + 2]>', '<xorps~~xmm0, xmm0>', '<movaps~~xmmword ptr [rsp + 0x210], xmm0>', '<movaps~~xmm8, xmm4>', '<punpckhwd~~xmm8, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<mov~~rcx, qword ptr [rip + 0xffdd1]>', '<movups~~xmm7, xmmword ptr [rcx + 2]>', '<movaps~~xmm5, xmm7>', '<punpcklwd~~xmm5, xmm0>', '<punpckhwd~~xmm7, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm2, xmm1>', '<pmuludq~~xmm2, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm8, 0xf5>', '<movaps~~xmm6, xmm1>', '<pmuludq~~xmm6, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm8>', '<pmuludq~~xmm4, xmm7>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm7, xmm7, 0xf5>', '<pmuludq~~xmm6, xmm7>', '<pshufd~~xmm6, xmm6, 0xe8>', '<punpckldq~~xmm4, xmm6>', '<pmuludq~~xmm3, xmm5>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm5, xmm5, 0xf5>', '<pmuludq~~xmm2, xmm5>', '<pshufd~~xmm2, xmm2, 0xe8>', '<punpckldq~~xmm3, xmm2>', '<movaps~~xmm2, xmmword ptr [rip + 0x128d]>', '<movaps~~xmmword ptr [rsp + 0x220], xmm2>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>']}, {'block_Idx': 24, 'blockInsts': ['<movups~~xmm0, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm5, xmm0>', '<punpcklwd~~xmm5, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm4, xmm3>', '<pmuludq~~xmm4, xmm0>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm6, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm6>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm4, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm6, xmm5, 0xf5>', '<movaps~~xmm5, xmm3>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm0, xmm5>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 0xd>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm0>', '<movups~~xmm0, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm0>', '<punpcklwd~~xmm4, xmm1>', '<punpckhwd~~xmm0, xmm1>', '<movaps~~xmm1, xmm3>', '<pmuludq~~xmm1, xmm0>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm5, xmm0, 0xf5>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm0, xmm0, 0xe8>', '<punpckldq~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 0xd>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 0xd>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>', '<mov~~dword ptr [rsp + 0x1d0], esi>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x1d4], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x1d8], esi>', '<shr~~esi, 0xe>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff864]>', '<movzx~~edi, word ptr [rsi + rax*2 + 2]>', '<mov~~rsi, qword ptr [rip + 0xff868]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1e0], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1e4], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1e8], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1ec], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<je~~0x400d07>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~edx, 4>', '<call~~0x500060>']}, {'block_Idx': 21, 'blockInsts': ['<movups~~xmm8, xmmword ptr [rcx + 0x32]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32b2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x42]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x42]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32c2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x52]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x52]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~edx, 1>', '<call~~0x500060>']}, {'block_Idx': 17, 'blockInsts': ['<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3282], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x12]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x12]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x3292], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x22]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>', '<movups~~xmm8, xmmword ptr [rcx + 0x22]>', '<movaps~~xmm6, xmm8>', '<punpcklwd~~xmm6, xmm0>', '<punpckhwd~~xmm8, xmm0>', '<pshufd~~xmm3, xmm4, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm3>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm4, xmm9, 0xf5>', '<movaps~~xmm7, xmm1>', '<pmuludq~~xmm7, xmm4>', '<movaps~~xmm4, xmm1>', '<pmuludq~~xmm4, xmm9>', '<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32a2], xmm3>', '<movups~~xmm4, xmmword ptr [rdx + 0x32]>', '<movaps~~xmm9, xmm4>', '<punpckhwd~~xmm9, xmm0>', '<punpcklwd~~xmm4, xmm0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x130]>', '<add~~rsp, 0x2a0>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~dword ptr [rsp + 0x144], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400dd3>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rbx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x100], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<jle~~0x4014bd>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x144]>', '<mov~~rdi, qword ptr [rsp + 0x138]>', '<mov~~edx, dword ptr [rsp + 0x134]>', '<call~~0x500048>']}, {'block_Idx': 25, 'blockInsts': ['<pmuludq~~xmm4, xmm8>', '<pshufd~~xmm4, xmm4, 0xe8>', '<pshufd~~xmm8, xmm8, 0xf5>', '<pmuludq~~xmm7, xmm8>', '<pshufd~~xmm7, xmm7, 0xe8>', '<punpckldq~~xmm4, xmm7>', '<pmuludq~~xmm3, xmm6>', '<pshufd~~xmm3, xmm3, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm3, xmm5>', '<paddd~~xmm3, xmm2>', '<paddd~~xmm4, xmm2>', '<pslld~~xmm4, 2>', '<psrad~~xmm4, 0x10>', '<pslld~~xmm3, 2>', '<psrad~~xmm3, 0x10>', '<packssdw~~xmm3, xmm4>', '<movups~~xmmword ptr [rax + 0x32d2], xmm3>', '<movups~~xmm5, xmmword ptr [rdx + 0x62]>', '<movaps~~xmm7, xmm5>', '<punpckhwd~~xmm7, xmm0>', '<punpcklwd~~xmm5, xmm0>', '<movups~~xmm6, xmmword ptr [rcx + 0x62]>', '<movaps~~xmm4, xmm6>', '<punpcklwd~~xmm4, xmm0>', '<punpckhwd~~xmm6, xmm0>', '<pshufd~~xmm0, xmm5, 0xf5>', '<movaps~~xmm3, xmm1>', '<pmuludq~~xmm3, xmm0>', '<movaps~~xmm0, xmm1>', '<pmuludq~~xmm0, xmm5>', '<pshufd~~xmm8, xmm7, 0xf5>', '<movaps~~xmm5, xmm1>', '<pmuludq~~xmm5, xmm8>', '<pmuludq~~xmm1, xmm7>', '<pmuludq~~xmm1, xmm6>', '<pshufd~~xmm1, xmm1, 0xe8>', '<pshufd~~xmm6, xmm6, 0xf5>', '<pmuludq~~xmm5, xmm6>', '<pshufd~~xmm5, xmm5, 0xe8>', '<punpckldq~~xmm1, xmm5>', '<pmuludq~~xmm0, xmm4>', '<pshufd~~xmm0, xmm0, 0xe8>', '<pshufd~~xmm4, xmm4, 0xf5>', '<pmuludq~~xmm3, xmm4>', '<pshufd~~xmm3, xmm3, 0xe8>', '<punpckldq~~xmm0, xmm3>', '<paddd~~xmm0, xmm2>', '<paddd~~xmm1, xmm2>', '<pslld~~xmm1, 2>', '<psrad~~xmm1, 0x10>', '<pslld~~xmm0, 2>', '<psrad~~xmm0, 0x10>', '<packssdw~~xmm0, xmm1>', '<movdqu~~xmmword ptr [rax + 0x32e2], xmm0>', '<mov~~eax, 0x39>', '<mov~~qword ptr [rsp + 0x230], rax>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rsi, qword ptr [rip + 0xff8fb]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff900]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<imul~~edx, esi>', '<add~~edx, 0x20>', '<shr~~edx, 0xe>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1f8], rax>', '<mov~~rax, qword ptr [rsp + 0x1f8]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff8ae]>', '<movzx~~r8d, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xff8b2]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, r8d>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x5c], edx>', '<mov~~dword ptr [rsp + 0x60], ecx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~ecx, dword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<mov~~dword ptr [rsp + 0xc], esi>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp + 8]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0xec], edx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x401176>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x401412>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x134], eax>', '<jmp~~0x400df6>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~edx, dword ptr [rsp + 0x28c]>', '<mov~~rsi, qword ptr [rip + 0xff3b5]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~esi, edx>', '<imul~~esi, edi>', '<mov~~dword ptr [rsp + 0x168], esi>', '<add~~esi, 0x20>', '<mov~~dword ptr [rsp + 0x16c], esi>', '<shr~~esi, 3>', '<mov~~dword ptr [rsp + 0x170], esi>', '<mov~~word ptr [rcx + rax*2 + 0x3280], si>', '<mov~~rsi, qword ptr [rip + 0xff382]>', '<movzx~~esi, word ptr [rsi + rax*2 + 2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x174], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x178], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x17c], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3282], dx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x188], rax>', '<jne~~0x400c6d>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x238]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x75d]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<call~~rax>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~edx, 2>', '<call~~0x500060>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<xor~~edx, edx>', '<call~~0x500060>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x240]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, 3>', '<call~~0x500060>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x298]>', '<mov~~ecx, dword ptr [rsp + 0x274]>', '<mov~~rdx, qword ptr [rsp + 0x268]>', '<mov~~rsi, qword ptr [rsp + 0x250]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x148], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x15c], ecx>', '<mov~~qword ptr [rsp + 0x160], rax>', '<je~~0x400d9a>']}], 'cfg_edge_info': [(64, 66), (16, 20), (24, 27), (18, 23), (50, 52), (43, 46), (41, 43), (4, 9), (3, 7), (28, 9), (21, 25), (23, 22), (5, 10), (46, 48), (31, 35), (0, 2), (9, 14), (17, 21), (40, 44), (14, 19), (2, 5), (1, 3), (68, 66), (36, 37), (67, 40), (45, 40), (47, 46), (63, 64), (56, 58), (64, 65), (25, 28), (32, 36), (29, 19), (18, 22), (15, 29), (52, 54), (60, 61), (43, 45), (67, 47), (14, 18), (27, 9), (39, 41), (28, 8), (0, 1), (48, 50), (19, 23), (30, 32), (47, 45), (7, 12), (29, 18), (35, 37), (58, 60), (62, 63), (61, 62), (66, 46), (20, 24), (27, 11), (38, 39), (12, 17), (39, 40), (22, 30), (11, 9), (1, 4), (9, 15), (65, 68), (66, 67), (13, 9), (10, 16), (2, 6), (54, 56), (36, 38), (45, 47), (30, 31), (6, 9)], 'cdg_edge_info': [(47, 62), (39, 60), (64, 62), (47, 64), (39, 44), (1, 17), (47, 48), (64, 64), (39, 46), (64, 48), (67, 47), (47, 50), (64, 66), (1, 28), (2, 27), (18, 23), (47, 68), (0, 2), (1, 3), (67, 40), (64, 50), (1, 12), (1, 21), (2, 20), (30, 36), (47, 52), (47, 61), (39, 41), (64, 52), (47, 45), (64, 61), (39, 62), (47, 54), (47, 63), (1, 7), (67, 44), (36, 38), (64, 54), (30, 31), (39, 64), (1, 25), (64, 63), (2, 24), (47, 56), (47, 65), (39, 48), (64, 56), (47, 58), (29, 19), (43, 45), (39, 50), (2, 10), (64, 58), (30, 35), (39, 68), (39, 43), (39, 52), (45, 47), (39, 61), (64, 60), (30, 37), (29, 23), (2, 5), (45, 40), (39, 54), (36, 37), (39, 63), (9, 29), (47, 46), (0, 1), (64, 46), (36, 39), (39, 56), (2, 16), (30, 32), (39, 65), (29, 18), (47, 60), (39, 40), (9, 15), (66, 67), (45, 44), (39, 58)], 'ddg_edge_info': [(16, 20), (7, 17), (50, 52), (67, 68), (47, 62), (41, 58), (25, 41), (27, 68), (28, 67), (46, 48), (12, 25), (66, 60), (17, 21), (0, 5), (68, 66), (39, 60), (0, 23), (15, 23), (32, 39), (67, 61), (47, 64), (27, 61), (0, 44), (28, 60), (35, 44), (38, 46), (25, 61), (66, 62), (0, 7), (0, 16), (24, 65), (10, 20), (1, 17), (27, 36), (24, 19), (25, 18), (7, 12), (67, 63), (16, 24), (7, 21), (25, 36), (47, 66), (27, 63), (28, 62), (66, 46), (38, 39), (3, 17), (22, 30), (39, 46), (0, 64), (66, 64), (63, 47), (0, 9), (24, 67), (27, 29), (67, 47), (27, 38), (15, 18), (1, 28), (67, 65), (2, 27), (28, 46), (18, 23), (25, 29), (0, 39), (25, 38), (47, 68), (27, 65), (0, 48), (28, 64), (28, 9), (60, 62), (21, 25), (38, 41), (0, 2), (63, 40), (31, 35), (28, 18), (23, 22), (22, 32), (5, 16), (31, 44), (24, 60), (27, 22), (25, 68), (1, 12), (10, 24), (1, 21), (2, 20), (25, 22), (28, 39), (1, 30), (0, 32), (47, 61), (0, 41), (0, 50), (28, 66), (3, 12), (68, 47), (39, 41), (41, 60), (3, 21), (66, 68), (27, 15), (24, 62), (25, 15), (39, 62), (0, 25), (28, 41), (47, 63), (58, 60), (68, 40), (0, 52), (28, 68), (12, 17), (24, 46), (41, 62), (66, 61), (24, 64), (1, 7), (25, 63), (28, 25), (24, 9), (36, 38), (24, 18), (0, 18), (39, 64), (1, 25), (0, 27), (2, 24), (63, 65), (0, 36), (47, 65), (41, 46), (28, 61), (24, 39), (0, 54), (38, 47), (40, 44), (3, 25), (66, 63), (27, 19), (24, 66), (25, 65), (67, 46), (25, 19), (28, 36), (39, 66), (27, 46), (63, 67), (0, 29), (25, 28), (0, 38), (32, 36), (41, 48), (28, 63), (60, 61), (7, 25), (24, 41), (12, 21), (38, 40), (15, 29), (27, 67), (41, 66), (24, 68), (25, 67), (28, 29), (2, 10), (27, 39), (0, 22), (28, 38), (39, 68), (0, 31), (0, 40), (67, 60), (32, 38), (15, 22), (41, 50), (60, 63), (68, 46), (61, 62), (27, 60), (41, 68), (24, 61), (25, 60), (5, 20), (28, 22), (10, 16), (0, 15), (68, 67), (36, 44), (39, 61), (0, 24), (62, 63), (2, 30), (24, 27), (67, 62), (29, 23), (24, 36), (41, 52), (60, 65), (27, 62), (41, 61), (28, 15), (24, 63), (25, 62), (63, 46), (46, 60), (47, 46), (39, 63), (9, 29), (63, 64), (56, 58), (9, 38), (24, 29), (67, 64), (24, 38), (41, 54), (52, 54), (47, 67), (27, 64), (41, 63), (27, 9), (25, 46), (0, 56), (27, 18), (0, 1), (22, 31), (48, 50), (25, 64), (66, 65), (5, 24), (0, 10), (25, 9), (9, 22), (0, 19), (19, 23), (39, 65), (38, 67), (63, 66), (0, 28), (9, 40), (24, 22), (15, 19), (29, 18), (67, 66), (32, 44), (41, 47), (47, 60), (41, 56), (25, 39), (1, 47), (27, 66), (28, 65), (41, 65), (0, 58), (0, 3), (28, 19), (65, 68), (25, 66), (0, 12), (66, 67), (9, 15), (54, 56), (39, 67), (24, 15), (27, 41)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 784, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 785, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 786, 'instruction': 'movq\t%rdx, 0x100(%rsp)                 # 8-byte Spill'}, {'instIndex': 787, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 788, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 789, 'instruction': 'movq\t%rdx, 0x108(%rsp)                 # 8-byte Spill'}, {'instIndex': 791, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 792, 'instruction': 'movl\t%eax, 0x114(%rsp)                 # 4-byte Spill'}, {'instIndex': 793, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 794, 'instruction': 'jle\t.LBB1_26'}, {'instIndex': 857, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 858, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 859, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 860, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 861, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 867, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 868, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 869, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 870, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 871, 'instruction': 'jle\t.LBB1_25'}, {'instIndex': 999, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 1000, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 1001, 'instruction': 'movl\t%edx, 0x14(%rsp)                  # 4-byte Spill'}, {'instIndex': 1003, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 1004, 'instruction': 'movl\t%eax, 0x10(%rsp)                  # 4-byte Spill'}, {'instIndex': 1005, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1006, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 1007, 'instruction': 'cltd'}, {'instIndex': 1008, 'instruction': 'idivl\t%ecx'}, {'instIndex': 1009, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 1010, 'instruction': 'movl\t0x14(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1011, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 1012, 'instruction': 'jl\t.LBB1_21'}, {'instIndex': 1016, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 1017, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 1018, 'instruction': 'movl\t%edx, 0x5c(%rsp)                  # 4-byte Spill'}, {'instIndex': 1019, 'instruction': 'movl\t%ecx, 0x60(%rsp)                  # 4-byte Spill'}, {'instIndex': 1020, 'instruction': 'movl\t%eax, 0x64(%rsp)                 # 4-byte Spill'}, {'instIndex': 1027, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 1029, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 1030, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 1031, 'instruction': 'cltd'}, {'instIndex': 1032, 'instruction': 'idivl\t%esi'}, {'instIndex': 1033, 'instruction': 'movl\t8(%rsp), %edx                   # 4-byte Reload'}, {'instIndex': 1034, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 1035, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 1036, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 1037, 'instruction': 'movl\t%edx, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 1038, 'instruction': 'movl\t%ecx, 0xf0(%rsp)                 # 4-byte Spill'}, {'instIndex': 1039, 'instruction': 'movl\t%eax, 0xf4(%rsp)                 # 4-byte Spill'}, {'instIndex': 1040, 'instruction': 'jl\t.LBB1_20'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: eatqi.c
Patched function: 1---static av_cold int tqi_decode_init 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.s---tqi_decode_init---before
function id: 0
function flag: True
There are 33 instructions for function: tqi_decode_init in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '57', 'end': 71}, 'before': {'start': '57', 'end': 68}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}]
Patched function: 1---static int tqi_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.s---tqi_decode_frame---before
function id: 1
function flag: True
There are 478 instructions for function: tqi_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '138', 'end': 145}, 'before': {'start': '135', 'end': 141}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 210, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 211, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 212, 'instruction': 'movq\t%rdx, 0x130(%rsp)                 # 8-byte Spill'}, {'instIndex': 213, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 214, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 215, 'instruction': 'movq\t%rdx, 0x138(%rsp)                 # 8-byte Spill'}, {'instIndex': 217, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 218, 'instruction': 'movl\t%eax, 0x144(%rsp)                 # 4-byte Spill'}, {'instIndex': 219, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 220, 'instruction': 'jle\t.LBB1_24'}, {'instIndex': 283, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 284, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 285, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 286, 'instruction': 'movl\t%ecx, 0x120(%rsp)                 # 4-byte Spill'}, {'instIndex': 287, 'instruction': 'movl\t%eax, 0x124(%rsp)                 # 4-byte Spill'}, {'instIndex': 293, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%edx, 0x8c(%rsp)                 # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'movl\t%ecx, 0x90(%rsp)                 # 4-byte Spill'}, {'instIndex': 296, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 297, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 422, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 423, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 424, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 426, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 427, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 428, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 429, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 430, 'instruction': 'cltd'}, {'instIndex': 431, 'instruction': 'idivl\t%ecx'}, {'instIndex': 432, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 433, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 434, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 435, 'instruction': 'jl\t.LBB1_17'}, {'instIndex': 439, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 440, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 441, 'instruction': 'movl\t%edx, 0x8c(%rsp)                 # 4-byte Spill'}, {'instIndex': 442, 'instruction': 'movl\t%ecx, 0x90(%rsp)                 # 4-byte Spill'}, {'instIndex': 443, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 450, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 452, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 453, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 454, 'instruction': 'cltd'}, {'instIndex': 455, 'instruction': 'idivl\t%esi'}, {'instIndex': 456, 'instruction': 'movl\t(%rsp), %edx                    # 4-byte Reload'}, {'instIndex': 457, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 458, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 459, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 460, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 461, 'instruction': 'movl\t%ecx, 0x120(%rsp)                 # 4-byte Spill'}, {'instIndex': 462, 'instruction': 'movl\t%eax, 0x124(%rsp)                 # 4-byte Spill'}, {'instIndex': 463, 'instruction': 'jl\t.LBB1_16'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.o---before
The extraction of function: tqi_decode_init
Analyzing the binaries to generate subCFGs from patched function ...
It has 61 nodes and 99 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 33 instructions in binary file.
[4194475]
The extraction of function: tqi_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 61 nodes and 99 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 478 instructions in binary file.
[4195504, 4195730, 4196126, 4196133, 4196767, 4196825, 4196870]
The execution time of patched subCFG information extraction via angr: 0:00:01.499196
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}], 'cfg_edge_info': [(4, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d9>, <DisassemblerInsn "mov" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e5>, <DisassemblerInsn "mov" for 0x4009ed>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "mov" for 0x4009f1>, <DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "mov" for 0x4009ff>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0e>, <DisassemblerInsn "mov" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a1c>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "add" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "add" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "cdq" for 0x400a37>, <DisassemblerInsn "idiv" for 0x400a38>, <DisassemblerInsn "mov" for 0x400a3a>, <DisassemblerInsn "mov" for 0x400a3d>, <DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "cmp" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a45>, <DisassemblerInsn "mov" for 0x400a4c>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jl" for 0x400a5a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "add" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "add" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "add" for 0x4005f8>, <DisassemblerInsn "add" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400603>, <DisassemblerInsn "mov" for 0x40060b>, <DisassemblerInsn "add" for 0x40060e>, <DisassemblerInsn "mov" for 0x400615>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "add" for 0x400620>, <DisassemblerInsn "add" for 0x400627>, <DisassemblerInsn "mov" for 0x40062b>, <DisassemblerInsn "mov" for 0x400633>, <DisassemblerInsn "add" for 0x400636>, <DisassemblerInsn "add" for 0x40063d>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "mov" for 0x400649>, <DisassemblerInsn "add" for 0x40064c>, <DisassemblerInsn "add" for 0x400653>, <DisassemblerInsn "mov" for 0x400657>, <DisassemblerInsn "mov" for 0x40065f>, <DisassemblerInsn "add" for 0x400662>, <DisassemblerInsn "add" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "add" for 0x400678>, <DisassemblerInsn "add" for 0x40067f>, <DisassemblerInsn "mov" for 0x400686>, <DisassemblerInsn "mov" for 0x40068e>, <DisassemblerInsn "add" for 0x400691>, <DisassemblerInsn "add" for 0x400698>, <DisassemblerInsn "mov" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "add" for 0x4006aa>, <DisassemblerInsn "add" for 0x4006b1>, <DisassemblerInsn "mov" for 0x4006b8>, <DisassemblerInsn "mov" for 0x4006c0>, <DisassemblerInsn "add" for 0x4006c3>, <DisassemblerInsn "add" for 0x4006ca>, <DisassemblerInsn "mov" for 0x4006d1>, <DisassemblerInsn "mov" for 0x4006d9>, <DisassemblerInsn "add" for 0x4006dc>, <DisassemblerInsn "add" for 0x4006e3>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "add" for 0x4006f2>, <DisassemblerInsn "add" for 0x4006f9>, <DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "xor" for 0x40070e>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400717>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "call" for 0x400776>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400903>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "mov" for 0x40090e>, <DisassemblerInsn "and" for 0x400911>, <DisassemblerInsn "cmp" for 0x400916>, <DisassemblerInsn "jne" for 0x400919>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "cqo" for 0x40049c>, <DisassemblerInsn "idiv" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a1>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "call" for 0x4004ae>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "cmp" for 0x400748>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "jle" for 0x400760>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400983>, <DisassemblerInsn "mov" for 0x40098b>, <DisassemblerInsn "mov" for 0x400990>, <DisassemblerInsn "mov" for 0x400998>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "call" for 0x40099d>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a60>, <DisassemblerInsn "mov" for 0x400a68>, <DisassemblerInsn "mov" for 0x400a70>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "mov" for 0x400a7e>, <DisassemblerInsn "call" for 0x400a83>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "add" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b8>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009bc>, <DisassemblerInsn "add" for 0x4009c0>, <DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "cdq" for 0x4009c8>, <DisassemblerInsn "idiv" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009cb>, <DisassemblerInsn "mov" for 0x4009cd>, <DisassemblerInsn "cmp" for 0x4009d1>, <DisassemblerInsn "jl" for 0x4009d3>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0e>, <DisassemblerInsn "mov" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a1c>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "add" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "add" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "cdq" for 0x400a37>, <DisassemblerInsn "idiv" for 0x400a38>, <DisassemblerInsn "mov" for 0x400a3a>, <DisassemblerInsn "mov" for 0x400a3d>, <DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "cmp" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a45>, <DisassemblerInsn "mov" for 0x400a4c>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jl" for 0x400a5a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "mov" for 0x4004c8>, <DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "sar" for 0x4004dd>, <DisassemblerInsn "xor" for 0x4004e0>, <DisassemblerInsn "cmp" for 0x4004e2>, <DisassemblerInsn "cmovl" for 0x4004e6>, <DisassemblerInsn "xor" for 0x4004ea>, <DisassemblerInsn "cmp" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmovl" for 0x4004f4>, <DisassemblerInsn "xor" for 0x4004f8>, <DisassemblerInsn "cmp" for 0x4004fb>, <DisassemblerInsn "cmovl" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "movsxd" for 0x400519>, <DisassemblerInsn "add" for 0x40051c>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "add" for 0x400551>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "mov" for 0x400560>, <DisassemblerInsn "add" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "cmp" for 0x400589>, <DisassemblerInsn "jle" for 0x40058c>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071e>, <DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "cmp" for 0x400748>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "jle" for 0x400760>]'}], 'cfg_block_detailed_info': [{'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~dword ptr [rsp + 4], esi>', '<mov~~dword ptr [rsp], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jl~~0x400725>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xe0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x14b0>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0xf0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x100], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x280>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x40099f>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x11c]>', '<mov~~ecx, dword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x400a06>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x400766>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~dword ptr [rsp + 4], esi>', '<mov~~dword ptr [rsp], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jl~~0x400725>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x400a60>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x11c]>', '<mov~~ecx, dword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x400a06>']}], 'cfg_edge_info': [(25, 26), (28, 27), (39, 38), (28, 26), (21, 22), (40, 22), (40, 28), (23, 25), (36, 38), (25, 27), (38, 40), (26, 22), (26, 28), (38, 27), (21, 23), (20, 21)]}]}
{'tqi_decode_init': [4194475], 'tqi_decode_frame': [4195504, 4195730, 4196126, 4196133, 4196767, 4196825, 4196870]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/9/libav.libav/90290a5150e84fb138ccde57657dc03830f08c1c/clang_before/Os/eatqi.o---before
The extraction of function: tqi_decode_init
[4194475]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 10 nodes and 14 edges in CFGEmulated.
It has 5 nodes and 4 edges in CDG.
It has 98 nodes and 108 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194475]
{4194304, 4194475, 4194380, 4194348, 4194421, 4194359}
[9, 5, 0, 2, 7, 1]
The extraction of function: tqi_decode_frame
[4195504, 4195730, 4196126, 4196133, 4196767, 4196825, 4196870]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 47 nodes and 70 edges in CFGEmulated.
It has 46 nodes and 82 edges in CDG.
It has 1878 nodes and 2732 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195504, 4195730, 4196126, 4196133, 4196767, 4196825, 4196870]
{4195329, 4196226, 4196611, 4195075, 4196870, 4197000, 4196497, 4195730, 4197014, 4195100, 4195228, 4196126, 4196639, 4196767, 4196133, 4194853, 4194728, 4194989, 4195504, 4194482, 4196531, 4195255, 4195387, 4196289, 4194891, 4195280, 4195285, 4196825, 4196317, 4196960, 4196577, 4196198, 4195174, 4195432, 4195312, 4194674, 4196216, 4195193, 4196731}
[10, 12, 5, 20, 31, 9, 23, 15, 42, 33, 39, 35, 40, 17, 26, 3, 30, 8, 11, 46, 1, 2, 24, 28, 7, 21, 32, 25, 16, 44, 14, 36, 6, 41, 0, 4, 37, 22, 29, 43, 45]
The execution time of patched slicing information extraction via angr: 0:00:05.058342
{'tqi_decode_init': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "xor" for 0x4000ab>, <DisassemblerInsn "add" for 0x4000ad>, <DisassemblerInsn "ret" for 0x4000b1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "add" for 0x400054>, <DisassemblerInsn "add" for 0x40005b>, <DisassemblerInsn "add" for 0x400062>, <DisassemblerInsn "mov" for 0x400069>, <DisassemblerInsn "call" for 0x400070>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400008>, <DisassemblerInsn "mov" for 0x40000c>, <DisassemblerInsn "mov" for 0x400011>, <DisassemblerInsn "mov" for 0x400015>, <DisassemblerInsn "add" for 0x400018>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "cmp" for 0x400023>, <DisassemblerInsn "jne" for 0x40002a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400092>, <DisassemblerInsn "mov" for 0x40009c>, <DisassemblerInsn "call" for 0x4000a6>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "mov" for 0x400031>, <DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003b>, <DisassemblerInsn "add" for 0x400040>, <DisassemblerInsn "call" for 0x400047>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<xor~~eax, eax>', '<add~~rsp, 0x18>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x1728>', '<add~~rdi, 0x14c0>', '<add~~rsi, 0x188>', '<mov~~rdx, qword ptr [rip + 0xfffa0]>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x18>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~qword ptr [rax + 8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x36c>', '<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~dword ptr [rdi + 0x36c], 0>', '<jne~~0x400037>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rcx + 0x16d0], 1>', '<mov~~dword ptr [rax + 0x84], 1>', '<mov~~dword ptr [rax + 0x88], 0xf>', '<mov~~dword ptr [rax + 0xa8], 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~dword ptr [rax], 0x15>', '<mov~~rsi, qword ptr [rsp]>', '<mov~~rdi, qword ptr [rsp + 8]>', '<add~~rdi, 0x1728>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 5), (5, 7), (7, 9), (0, 2), (2, 5)], 'cdg_edge_info': [(0, 1), (0, 2)], 'ddg_edge_info': [(0, 1), (0, 7), (1, 2), (5, 7), (7, 9), (0, 2), (0, 5), (2, 5)]}], 'tqi_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400370>, <DisassemblerInsn "jmp" for 0x400377>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "mov" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "call" for 0x4003b2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x40025b>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "movzx" for 0x400269>, <DisassemblerInsn "imul" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "add" for 0x400277>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "shr" for 0x400281>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "cmp" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "jne" for 0x4002ab>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "jmp" for 0x4003fc>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400766>, <DisassemblerInsn "mov" for 0x40076e>, <DisassemblerInsn "call" for 0x400776>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400379>, <DisassemblerInsn "mov" for 0x400381>, <DisassemblerInsn "mov" for 0x400389>, <DisassemblerInsn "mov" for 0x40038f>, <DisassemblerInsn "cmp" for 0x400391>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "je" for 0x40039a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400468>, <DisassemblerInsn "mov" for 0x400470>, <DisassemblerInsn "mov" for 0x400478>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "mov" for 0x400488>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "mov" for 0x400497>, <DisassemblerInsn "cqo" for 0x40049c>, <DisassemblerInsn "idiv" for 0x40049e>, <DisassemblerInsn "mov" for 0x4004a1>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "call" for 0x4004ae>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003d0>, <DisassemblerInsn "jge" for 0x4003d3>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400903>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "mov" for 0x40090e>, <DisassemblerInsn "and" for 0x400911>, <DisassemblerInsn "cmp" for 0x400916>, <DisassemblerInsn "jne" for 0x400919>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "xor" for 0x400778>, <DisassemblerInsn "mov" for 0x40077a>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "mov" for 0x400797>, <DisassemblerInsn "add" for 0x40079a>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "shl" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ad>, <DisassemblerInsn "add" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007b5>, <DisassemblerInsn "mov" for 0x4007ba>, <DisassemblerInsn "call" for 0x4007bc>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400891>, <DisassemblerInsn "mov" for 0x400899>, <DisassemblerInsn "mov" for 0x40089e>, <DisassemblerInsn "mov" for 0x4008a6>, <DisassemblerInsn "mov" for 0x4008aa>, <DisassemblerInsn "add" for 0x4008ad>, <DisassemblerInsn "call" for 0x4008b1>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c1>, <DisassemblerInsn "add" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "cmp" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "jne" for 0x4007db>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008b3>, <DisassemblerInsn "mov" for 0x4008b8>, <DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "mov" for 0x4008cc>, <DisassemblerInsn "mov" for 0x4008cf>, <DisassemblerInsn "shl" for 0x4008d1>, <DisassemblerInsn "movsxd" for 0x4008d4>, <DisassemblerInsn "add" for 0x4008d7>, <DisassemblerInsn "mov" for 0x4008da>, <DisassemblerInsn "call" for 0x4008df>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400401>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "add" for 0x400414>, <DisassemblerInsn "mov" for 0x40041b>, <DisassemblerInsn "add" for 0x400423>, <DisassemblerInsn "add" for 0x40042a>, <DisassemblerInsn "mov" for 0x40042e>, <DisassemblerInsn "call" for 0x400436>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "add" for 0x4005ac>, <DisassemblerInsn "mov" for 0x4005b3>, <DisassemblerInsn "mov" for 0x4005bb>, <DisassemblerInsn "add" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cd>, <DisassemblerInsn "add" for 0x4005d0>, <DisassemblerInsn "add" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "add" for 0x4005e6>, <DisassemblerInsn "mov" for 0x4005ed>, <DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "add" for 0x4005f8>, <DisassemblerInsn "add" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400603>, <DisassemblerInsn "mov" for 0x40060b>, <DisassemblerInsn "add" for 0x40060e>, <DisassemblerInsn "mov" for 0x400615>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "add" for 0x400620>, <DisassemblerInsn "add" for 0x400627>, <DisassemblerInsn "mov" for 0x40062b>, <DisassemblerInsn "mov" for 0x400633>, <DisassemblerInsn "add" for 0x400636>, <DisassemblerInsn "add" for 0x40063d>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "mov" for 0x400649>, <DisassemblerInsn "add" for 0x40064c>, <DisassemblerInsn "add" for 0x400653>, <DisassemblerInsn "mov" for 0x400657>, <DisassemblerInsn "mov" for 0x40065f>, <DisassemblerInsn "add" for 0x400662>, <DisassemblerInsn "add" for 0x400669>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "add" for 0x400678>, <DisassemblerInsn "add" for 0x40067f>, <DisassemblerInsn "mov" for 0x400686>, <DisassemblerInsn "mov" for 0x40068e>, <DisassemblerInsn "add" for 0x400691>, <DisassemblerInsn "add" for 0x400698>, <DisassemblerInsn "mov" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "add" for 0x4006aa>, <DisassemblerInsn "add" for 0x4006b1>, <DisassemblerInsn "mov" for 0x4006b8>, <DisassemblerInsn "mov" for 0x4006c0>, <DisassemblerInsn "add" for 0x4006c3>, <DisassemblerInsn "add" for 0x4006ca>, <DisassemblerInsn "mov" for 0x4006d1>, <DisassemblerInsn "mov" for 0x4006d9>, <DisassemblerInsn "add" for 0x4006dc>, <DisassemblerInsn "add" for 0x4006e3>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "add" for 0x4006f2>, <DisassemblerInsn "add" for 0x4006f9>, <DisassemblerInsn "mov" for 0x400700>, <DisassemblerInsn "mov" for 0x400708>, <DisassemblerInsn "xor" for 0x40070e>, <DisassemblerInsn "mov" for 0x400710>, <DisassemblerInsn "mov" for 0x400717>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0e>, <DisassemblerInsn "mov" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a1c>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "add" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "add" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "cdq" for 0x400a37>, <DisassemblerInsn "idiv" for 0x400a38>, <DisassemblerInsn "mov" for 0x400a3a>, <DisassemblerInsn "mov" for 0x400a3d>, <DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "cmp" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a45>, <DisassemblerInsn "mov" for 0x400a4c>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jl" for 0x400a5a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400303>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b7>, <DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400983>, <DisassemblerInsn "mov" for 0x40098b>, <DisassemblerInsn "mov" for 0x400990>, <DisassemblerInsn "mov" for 0x400998>, <DisassemblerInsn "mov" for 0x40099b>, <DisassemblerInsn "call" for 0x40099d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "movzx" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "movzx" for 0x40018b>, <DisassemblerInsn "imul" for 0x40018e>, <DisassemblerInsn "shr" for 0x400191>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019b>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "movzx" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "movzx" for 0x4001d1>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "imul" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "add" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "shr" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "add" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "cmp" for 0x400211>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "je" for 0x40021d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023e>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x40025b>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "movzx" for 0x400269>, <DisassemblerInsn "imul" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "add" for 0x400277>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "shr" for 0x400281>, <DisassemblerInsn "mov" for 0x400284>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "cmp" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "jne" for 0x4002ab>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "mov" for 0x4004c0>, <DisassemblerInsn "mov" for 0x4004c8>, <DisassemblerInsn "mov" for 0x4004d0>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "shl" for 0x4004d6>, <DisassemblerInsn "mov" for 0x4004da>, <DisassemblerInsn "sar" for 0x4004dd>, <DisassemblerInsn "xor" for 0x4004e0>, <DisassemblerInsn "cmp" for 0x4004e2>, <DisassemblerInsn "cmovl" for 0x4004e6>, <DisassemblerInsn "xor" for 0x4004ea>, <DisassemblerInsn "cmp" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmovl" for 0x4004f4>, <DisassemblerInsn "xor" for 0x4004f8>, <DisassemblerInsn "cmp" for 0x4004fb>, <DisassemblerInsn "cmovl" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400503>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "add" for 0x400510>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "movsxd" for 0x400519>, <DisassemblerInsn "add" for 0x40051c>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x40054e>, <DisassemblerInsn "add" for 0x400551>, <DisassemblerInsn "mov" for 0x400558>, <DisassemblerInsn "mov" for 0x400560>, <DisassemblerInsn "add" for 0x400563>, <DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400582>, <DisassemblerInsn "cmp" for 0x400589>, <DisassemblerInsn "jle" for 0x40058c>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071e>, <DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "cmp" for 0x400748>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "jle" for 0x400760>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "je" for 0x400364>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "mov" for 0x400443>, <DisassemblerInsn "mov" for 0x40044a>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "cmp" for 0x400457>, <DisassemblerInsn "mov" for 0x40045b>, <DisassemblerInsn "je" for 0x400462>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400734>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400742>, <DisassemblerInsn "cmp" for 0x400748>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "jle" for 0x400760>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a60>, <DisassemblerInsn "mov" for 0x400a68>, <DisassemblerInsn "mov" for 0x400a70>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "mov" for 0x400a7e>, <DisassemblerInsn "call" for 0x400a83>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d5>, <DisassemblerInsn "mov" for 0x4003dd>, <DisassemblerInsn "lea" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "call" for 0x4003eb>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "add" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b8>, <DisassemblerInsn "mov" for 0x4009ba>, <DisassemblerInsn "mov" for 0x4009bc>, <DisassemblerInsn "add" for 0x4009c0>, <DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "cdq" for 0x4009c8>, <DisassemblerInsn "idiv" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009cb>, <DisassemblerInsn "mov" for 0x4009cd>, <DisassemblerInsn "cmp" for 0x4009d1>, <DisassemblerInsn "jl" for 0x4009d3>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031c>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400331>, <DisassemblerInsn "mov" for 0x400338>, <DisassemblerInsn "mov" for 0x400340>, <DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "cmp" for 0x40035e>, <DisassemblerInsn "je" for 0x400364>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "mov" for 0x40078a>, <DisassemblerInsn "mov" for 0x400792>, <DisassemblerInsn "mov" for 0x400797>, <DisassemblerInsn "add" for 0x40079a>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "shl" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007ad>, <DisassemblerInsn "add" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007b5>, <DisassemblerInsn "mov" for 0x4007ba>, <DisassemblerInsn "call" for 0x4007bc>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "movzx" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "movzx" for 0x4001d1>, <DisassemblerInsn "imul" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "imul" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "add" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "shr" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "add" for 0x400205>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "cmp" for 0x400211>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "je" for 0x40021d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e1>, <DisassemblerInsn "mov" for 0x4008e9>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008fa>, <DisassemblerInsn "add" for 0x4008fd>, <DisassemblerInsn "call" for 0x400901>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4000b2>, <DisassemblerInsn "push" for 0x4000b3>, <DisassemblerInsn "push" for 0x4000b5>, <DisassemblerInsn "sub" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bd>, <DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "mov" for 0x4000d0>, <DisassemblerInsn "mov" for 0x4000d8>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "mov" for 0x4000e4>, <DisassemblerInsn "mov" for 0x4000e7>, <DisassemblerInsn "cdqe" for 0x4000ee>, <DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "movzx" for 0x400104>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "add" for 0x400111>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "movzx" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "add" for 0x400127>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "movzx" for 0x400136>, <DisassemblerInsn "imul" for 0x40013a>, <DisassemblerInsn "add" for 0x40013d>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "add" for 0x40014d>, <DisassemblerInsn "mov" for 0x400151>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x400165>, <DisassemblerInsn "jne" for 0x40016c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "add" for 0x4002cc>, <DisassemblerInsn "mov" for 0x4002d0>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "add" for 0x4002db>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "cmp" for 0x4002ea>, <DisassemblerInsn "mov" for 0x4002f2>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "je" for 0x400301>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007dd>, <DisassemblerInsn "mov" for 0x4007e5>, <DisassemblerInsn "mov" for 0x4007ed>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "mov" for 0x400815>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "mov" for 0x40082d>, <DisassemblerInsn "mov" for 0x40082f>, <DisassemblerInsn "mov" for 0x400833>, <DisassemblerInsn "mov" for 0x400836>, <DisassemblerInsn "mov" for 0x400839>, <DisassemblerInsn "shl" for 0x40083b>, <DisassemblerInsn "imul" for 0x40083e>, <DisassemblerInsn "movsxd" for 0x400842>, <DisassemblerInsn "add" for 0x400845>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084b>, <DisassemblerInsn "shl" for 0x40084e>, <DisassemblerInsn "movsxd" for 0x400851>, <DisassemblerInsn "add" for 0x400854>, <DisassemblerInsn "mov" for 0x400857>, <DisassemblerInsn "mov" for 0x40085c>, <DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "shl" for 0x400864>, <DisassemblerInsn "mov" for 0x400868>, <DisassemblerInsn "mov" for 0x40086d>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "shl" for 0x400875>, <DisassemblerInsn "movsxd" for 0x400879>, <DisassemblerInsn "mov" for 0x40087c>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "mov" for 0x400889>, <DisassemblerInsn "mov" for 0x40088b>, <DisassemblerInsn "call" for 0x40088f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a96>, <DisassemblerInsn "add" for 0x400a9d>, <DisassemblerInsn "pop" for 0x400aa4>, <DisassemblerInsn "pop" for 0x400aa5>, <DisassemblerInsn "pop" for 0x400aa7>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a88>, <DisassemblerInsn "mov" for 0x400a8f>, <DisassemblerInsn "mov" for 0x400a96>, <DisassemblerInsn "add" for 0x400a9d>, <DisassemblerInsn "pop" for 0x400aa4>, <DisassemblerInsn "pop" for 0x400aa5>, <DisassemblerInsn "pop" for 0x400aa7>, <DisassemblerInsn "ret" for 0x400aa8>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400927>, <DisassemblerInsn "mov" for 0x40092f>, <DisassemblerInsn "mov" for 0x400937>, <DisassemblerInsn "mov" for 0x40093c>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400946>, <DisassemblerInsn "mov" for 0x40094b>, <DisassemblerInsn "mov" for 0x400950>, <DisassemblerInsn "imul" for 0x400955>, <DisassemblerInsn "movsxd" for 0x400959>, <DisassemblerInsn "add" for 0x40095c>, <DisassemblerInsn "add" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "imul" for 0x400967>, <DisassemblerInsn "movsxd" for 0x40096b>, <DisassemblerInsn "add" for 0x40096e>, <DisassemblerInsn "add" for 0x400971>, <DisassemblerInsn "mov" for 0x400974>, <DisassemblerInsn "mov" for 0x400977>, <DisassemblerInsn "call" for 0x400979>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d9>, <DisassemblerInsn "mov" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e5>, <DisassemblerInsn "mov" for 0x4009ed>, <DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "mov" for 0x4009f1>, <DisassemblerInsn "mov" for 0x4009f8>, <DisassemblerInsn "mov" for 0x4009ff>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0e>, <DisassemblerInsn "mov" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a1c>, <DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a27>, <DisassemblerInsn "add" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a2d>, <DisassemblerInsn "add" for 0x400a2f>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "cdq" for 0x400a37>, <DisassemblerInsn "idiv" for 0x400a38>, <DisassemblerInsn "mov" for 0x400a3a>, <DisassemblerInsn "mov" for 0x400a3d>, <DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "cmp" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a45>, <DisassemblerInsn "mov" for 0x400a4c>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "jl" for 0x400a5a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x164], eax>', '<jmp~~0x40039c>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x174]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~edx, dword ptr [rsp + 0x164]>', '<call~~0x500048>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rsi, qword ptr [rip + 0xffdd7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1a0], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x1a4], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40024b>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x160], eax>', '<jmp~~0x400a96>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xb0]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x220]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rcx + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~ecx, eax>', '<mov~~dword ptr [rsp + 0x164], eax>', '<je~~0x4003b7>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rcx + 0x2b10]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~ecx, 4>', '<cqo~~>', '<idiv~~rcx>', '<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~edx, ecx>', '<call~~rax>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400401>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rax, qword ptr [rax]>', '<mov~~eax, dword ptr [rax + 0x70]>', '<and~~eax, 0x2000>', '<cmp~~eax, 0>', '<jne~~0x40099f>']}, {'block_Idx': 33, 'blockInsts': ['<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x80], rax>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x208]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rsi, rdi>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x78], rax>', '<cmp~~rax, 6>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x400782>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shl~~ecx, 3>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<call~~rax>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x208]>', '<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rdi, rsi>', '<add~~rdi, 0x3d20>', '<mov~~qword ptr [rsp + 0x148], rdi>', '<add~~rsi, 0x3d28>', '<add~~rdx, -8>', '<mov~~qword ptr [rsp + 0x150], rdx>', '<call~~0x500058>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x144]>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3214>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~rsi, rax>', '<add~~rsi, 0x94>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x68>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0xb0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x40>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x44>', '<mov~~qword ptr [rsp + 0xd0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0xd8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3b50>', '<add~~rsi, 0x48>', '<mov~~qword ptr [rsp + 0xe0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x1728>', '<add~~rsi, 0x14b0>', '<mov~~qword ptr [rsp + 0xe8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x80>', '<mov~~qword ptr [rsp + 0xf0], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x100>', '<mov~~qword ptr [rsp + 0xf8], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x180>', '<mov~~qword ptr [rsp + 0x100], rsi>', '<mov~~rsi, rcx>', '<add~~rsi, 0x3d30>', '<add~~rsi, 0x200>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<add~~rcx, 0x3d30>', '<add~~rcx, 0x280>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~eax, dword ptr [rax + 0x94]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001a8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~dword ptr [rsp + 4], esi>', '<mov~~dword ptr [rsp], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jl~~0x400725>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x220]>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdi, rax>', '<call~~qword ptr [rax + 0x218]>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x208]>', '<mov~~rcx, qword ptr [rip + 0xffeaf]>', '<movzx~~edx, word ptr [rcx]>', '<mov~~rcx, qword ptr [rip + 0xffeb5]>', '<movzx~~ecx, word ptr [rcx]>', '<imul~~ecx, edx>', '<shr~~ecx, 0xb>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rsi, qword ptr [rip + 0xffe6a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe6f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1b8], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1c0], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1c4], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<je~~0x4002ad>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x208]>', '<mov~~rcx, qword ptr [rip + 0xffe0c]>', '<mov~~cx, word ptr [rcx]>', '<mov~~word ptr [rax + 0x3280], cx>', '<mov~~eax, 1>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rsi, qword ptr [rip + 0xffdd7]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1a0], edx>', '<shr~~edx, 3>', '<mov~~dword ptr [rsp + 0x1a4], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1a8], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<jne~~0x40024b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~rsi, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~rax, qword ptr [rsp + 0x1d8]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~r9d, esi>', '<shl~~r9d, 3>', '<mov~~esi, r9d>', '<sar~~esi, 3>', '<xor~~edi, edi>', '<cmp~~r9d, 0>', '<cmovl~~rdx, rdi>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<mov~~edi, r9d>', '<cmovl~~edi, r8d>', '<xor~~r8d, r8d>', '<cmp~~r9d, 0>', '<cmovl~~esi, r8d>', '<mov~~qword ptr [rcx + 0x39b0], rdx>', '<mov~~dword ptr [rcx + 0x39c4], edi>', '<add~~edi, 8>', '<mov~~dword ptr [rcx + 0x39c8], edi>', '<movsxd~~rsi, esi>', '<add~~rdx, rsi>', '<mov~~qword ptr [rcx + 0x39b8], rdx>', '<mov~~dword ptr [rcx + 0x39c0], 0>', '<mov~~dword ptr [rcx + 0x1618], 0>', '<mov~~dword ptr [rcx + 0x1614], 0>', '<mov~~dword ptr [rcx + 0x1610], 0>', '<mov~~rdx, rcx>', '<add~~rdx, 0x3218>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x98>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<mov~~dword ptr [rcx + 0x3218], 0>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x144], eax>', '<cmp~~eax, 0>', '<jle~~0x400a60>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~dword ptr [rsp + 0x124], eax>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x11c]>', '<mov~~ecx, dword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x400a06>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18c]>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~dword ptr [rsp + 0x174], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400379>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x208]>', '<mov~~rcx, qword ptr [rax + 0x3d20]>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x160], eax>', '<je~~0x400a96>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rsp + 0x11c]>', '<mov~~ecx, dword ptr [rsp + 0x120]>', '<mov~~eax, dword ptr [rsp + 0x124]>', '<mov~~dword ptr [rsi], 0>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<jle~~0x400a06>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~dword ptr [rax], 0x1d0>', '<mov~~edx, 0x1d0>', '<call~~0x500068>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x734]>', '<mov~~al, 0>', '<call~~0x500050>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~edx, dword ptr [rcx]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~dword ptr [rcx], edx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 8], eax>', '<add~~eax, 0xf>', '<mov~~ecx, 0x10>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<cmp~~eax, ecx>', '<jl~~0x400766>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x230]>', '<mov~~rcx, qword ptr [rsp + 0x218]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<mov~~ecx, dword ptr [rsp + 0x18c]>', '<mov~~rax, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~dword ptr [rsp + 0x174], ecx>', '<cmp~~dword ptr [rax + 0x94], ecx>', '<je~~0x400379>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x208]>', '<mov~~qword ptr [rsp + 0x70], rax>', '<mov~~rsi, rdi>', '<add~~rsi, 0x3d30>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~rcx, rax>', '<shl~~rcx, 7>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~edx, eax>', '<call~~0x500060>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1d0]>', '<mov~~rcx, qword ptr [rsp + 0x208]>', '<mov~~edx, dword ptr [rsp + 0x22c]>', '<mov~~rsi, qword ptr [rip + 0xffe6a]>', '<movzx~~edi, word ptr [rsi + rax*2]>', '<mov~~rsi, qword ptr [rip + 0xffe6f]>', '<movzx~~esi, word ptr [rsi + rax*2]>', '<imul~~edx, edi>', '<mov~~dword ptr [rsp + 0x1b8], edx>', '<imul~~edx, esi>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<add~~edx, 0x20>', '<mov~~dword ptr [rsp + 0x1c0], edx>', '<shr~~edx, 0xe>', '<mov~~dword ptr [rsp + 0x1c4], edx>', '<mov~~word ptr [rcx + rax*2 + 0x3280], dx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x1c8], rax>', '<cmp~~rax, 0x40>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<je~~0x4002ad>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~rax, qword ptr [rax]>', '<add~~rdi, 8>', '<call~~rax>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbp>', '<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x240>', '<mov~~rax, rcx>', '<mov~~qword ptr [rsp + 0x1d8], rdi>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~qword ptr [rsp + 0x1e8], rdx>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp + 0x1f0], rcx>', '<mov~~eax, dword ptr [rax + 0x18]>', '<mov~~dword ptr [rsp + 0x1fc], eax>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x200], rax>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0x208], rax>', '<movzx~~edx, word ptr [rcx]>', '<mov~~dword ptr [rsp + 0x214], edx>', '<mov~~rsi, rax>', '<add~~rsi, 0x10>', '<mov~~qword ptr [rsp + 0x218], rsi>', '<mov~~dword ptr [rax + 0x10], edx>', '<movzx~~edx, word ptr [rcx + 2]>', '<mov~~rsi, rax>', '<add~~rsi, 0x14>', '<mov~~qword ptr [rsp + 0x220], rsi>', '<mov~~dword ptr [rax + 0x14], edx>', '<movzx~~ecx, byte ptr [rcx + 4]>', '<imul~~ecx, ecx, -0xa>', '<add~~ecx, 0x433>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x230], rcx>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp + 0x238], rax>', '<cmp~~dword ptr [rax + 0x36c], 0x15>', '<jne~~0x400225>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~ecx, dword ptr [rsp + 0x214]>', '<mov~~rdx, qword ptr [rsp + 0x208]>', '<mov~~rsi, qword ptr [rsp + 0x1f0]>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x178], rsi>', '<mov~~rsi, rdx>', '<add~~rsi, 0x3b50>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<cmp~~qword ptr [rdx + 0x3b50], 0>', '<mov~~dword ptr [rsp + 0x18c], ecx>', '<mov~~qword ptr [rsp + 0x190], rax>', '<je~~0x400340>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~r8, qword ptr [rsp + 0xd8]>', '<mov~~r10, qword ptr [rsp + 0xd0]>', '<mov~~rbx, qword ptr [rsp + 0xc8]>', '<mov~~r9, qword ptr [rsp + 0x98]>', '<mov~~r11, qword ptr [rsp + 0x130]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x54], esi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~r11d, dword ptr [r11]>', '<mov~~ebp, esi>', '<shl~~ebp, 4>', '<imul~~ebp, r11d>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~r9d, dword ptr [r9]>', '<mov~~ebp, r9d>', '<shl~~ebp, 4>', '<movsxd~~r14, ebp>', '<add~~rdi, r14>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<mov~~rbx, qword ptr [rbx]>', '<mov~~qword ptr [rsp + 0x18], rbx>', '<shl~~r11d, 3>', '<mov~~dword ptr [rsp + 0x20], r11d>', '<mov~~r10d, dword ptr [r10]>', '<mov~~dword ptr [rsp + 0x24], r10d>', '<shl~~r9d, 3>', '<movsxd~~r9, r9d>', '<mov~~qword ptr [rsp + 0x28], r9>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x30], r8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x160]>', '<add~~rsp, 0x240>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1fc]>', '<mov~~dword ptr [rsp + 0x160], eax>', '<mov~~eax, dword ptr [rsp + 0x160]>', '<add~~rsp, 0x240>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [rsp + 0x20]>', '<mov~~r8d, dword ptr [rsp + 0x24]>', '<mov~~r10, qword ptr [rsp + 0x30]>', '<mov~~r11d, dword ptr [rsp + 0x3c]>', '<imul~~r11d, r9d>', '<movsxd~~r11, r11d>', '<add~~r10, r11>', '<add~~r10, rsi>', '<mov~~qword ptr [rsp + 0x10], r10>', '<imul~~r8d, r9d>', '<movsxd~~r8, r8d>', '<add~~rdi, r8>', '<add~~rdi, rsi>', '<mov~~rax, qword ptr [rax]>', '<mov~~esi, dword ptr [rcx]>', '<call~~rax>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~dword ptr [rsp + 0x90], ecx>', '<mov~~dword ptr [rsp + 0x94], eax>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0x94]>', '<mov~~dword ptr [rsp + 4], esi>', '<mov~~dword ptr [rsp], eax>', '<add~~ecx, 1>', '<mov~~dword ptr [rdx], ecx>', '<add~~eax, 0xf>', '<mov~~esi, 0x10>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, dword ptr [rsp]>', '<mov~~esi, eax>', '<mov~~eax, dword ptr [rsp + 4]>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<mov~~dword ptr [rsp + 0x120], ecx>', '<mov~~dword ptr [rsp + 0x124], eax>', '<jl~~0x400725>']}], 'cfg_edge_info': [(32, 31), (25, 29), (16, 20), (43, 46), (35, 36), (44, 45), (5, 4), (21, 22), (14, 10), (45, 25), (0, 2), (40, 41), (17, 21), (9, 11), (2, 5), (28, 30), (10, 12), (1, 3), (37, 39), (32, 30), (7, 10), (15, 17), (41, 42), (24, 26), (33, 35), (42, 44), (14, 9), (46, 44), (4, 8), (3, 6), (20, 22), (23, 24), (0, 1), (8, 14), (2, 4), (30, 32), (6, 4), (7, 9), (24, 25), (15, 16), (44, 31), (42, 43), (26, 28), (12, 11), (35, 37), (4, 7), (21, 23), (5, 5), (31, 33), (39, 40), (45, 32), (9, 12), (1, 4), (36, 35), (30, 25), (11, 15), (28, 31), (6, 3)], 'cdg_edge_info': [(15, 21), (32, 31), (42, 39), (32, 37), (24, 33), (32, 40), (32, 46), (44, 45), (24, 42), (32, 43), (35, 36), (21, 22), (14, 10), (24, 39), (45, 25), (0, 2), (1, 6), (2, 5), (28, 30), (42, 35), (32, 30), (24, 26), (32, 33), (32, 39), (42, 41), (15, 17), (24, 29), (32, 42), (42, 44), (35, 35), (24, 35), (14, 9), (15, 20), (4, 8), (21, 24), (14, 12), (4, 14), (24, 41), (0, 1), (30, 32), (30, 29), (42, 31), (24, 25), (15, 16), (42, 40), (24, 28), (32, 35), (42, 37), (15, 22), (24, 31), (24, 37), (32, 41), (21, 23), (24, 40), (24, 43), (5, 5), (24, 46), (45, 32), (9, 12), (45, 29), (30, 25), (6, 6), (42, 33), (42, 42)], 'ddg_edge_info': [(32, 37), (16, 20), (33, 36), (1, 31), (43, 46), (32, 46), (44, 45), (24, 42), (16, 29), (1, 40), (2, 39), (26, 39), (41, 31), (5, 10), (20, 29), (8, 9), (23, 25), (0, 5), (17, 21), (40, 41), (45, 37), (0, 14), (2, 11), (0, 23), (5, 37), (6, 11), (1, 24), (41, 42), (32, 39), (24, 26), (26, 32), (24, 44), (1, 42), (2, 41), (8, 11), (6, 41), (5, 21), (4, 23), (17, 23), (2, 4), (0, 16), (11, 16), (23, 45), (1, 8), (5, 39), (6, 4), (44, 31), (1, 26), (41, 44), (44, 40), (24, 37), (1, 44), (2, 43), (31, 33), (45, 32), (5, 14), (9, 12), (0, 9), (5, 23), (6, 43), (4, 25), (1, 10), (25, 29), (44, 42), (1, 37), (1, 46), (2, 45), (46, 45), (0, 2), (23, 31), (6, 45), (45, 46), (1, 21), (5, 46), (1, 39), (14, 12), (5, 9), (4, 11), (23, 24), (26, 41), (45, 39), (1, 14), (41, 32), (28, 32), (1, 23), (0, 25), (44, 37), (2, 31), (46, 31), (2, 40), (32, 41), (6, 31), (5, 11), (24, 46), (23, 26), (6, 40), (21, 29), (26, 43), (41, 25), (45, 41), (2, 24), (5, 41), (0, 36), (2, 42), (32, 43), (6, 24), (5, 4), (24, 39), (23, 28), (6, 42), (10, 12), (1, 9), (0, 11), (2, 8), (45, 43), (37, 39), (0, 29), (2, 26), (6, 8), (5, 43), (6, 26), (46, 44), (14, 9), (4, 8), (32, 45), (24, 41), (6, 44), (0, 4), (1, 11), (17, 29), (2, 10), (37, 41), (5, 45), (6, 10), (2, 37), (26, 31), (44, 46), (1, 41), (26, 40), (24, 43), (6, 37), (6, 46), (8, 10), (1, 4), (0, 6), (36, 35), (11, 15), (0, 24), (2, 21), (37, 43), (32, 31), (0, 42), (41, 43), (32, 40), (6, 21), (44, 39), (35, 36), (24, 45), (1, 43), (6, 39), (8, 12), (45, 31), (1, 6), (0, 8), (17, 24), (45, 40), (2, 5), (36, 37), (0, 17), (2, 14), (5, 31), (11, 17), (0, 26), (2, 23), (5, 40), (6, 14), (46, 32), (41, 45), (32, 42), (6, 23), (44, 41), (4, 14), (1, 45), (26, 44), (2, 44), (0, 1), (8, 14), (0, 10), (5, 24), (45, 42), (5, 42), (46, 25), (24, 31), (12, 11), (32, 44), (26, 28), (44, 43), (21, 23), (26, 37), (24, 40), (26, 46), (2, 46), (5, 8), (39, 40), (23, 32), (0, 12), (5, 26), (2, 9), (45, 44), (0, 21), (37, 40), (5, 44), (6, 9)]}]}
{'tqi_decode_init': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'addq\t$0x18, %rsp'}, {'instIndex': 32, 'instruction': 'retq'}]}], 'tqi_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 210, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 211, 'instruction': 'addq\t$0x3218, %rdx                    # imm = 0x0xc92'}, {'instIndex': 212, 'instruction': 'movq\t%rdx, 0x130(%rsp)                 # 8-byte Spill'}, {'instIndex': 213, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 214, 'instruction': 'addq\t$0x98, %rdx'}, {'instIndex': 215, 'instruction': 'movq\t%rdx, 0x138(%rsp)                 # 8-byte Spill'}, {'instIndex': 217, 'instruction': 'movl\t0x98(%rax), %eax'}, {'instIndex': 218, 'instruction': 'movl\t%eax, 0x144(%rsp)                 # 4-byte Spill'}, {'instIndex': 219, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 220, 'instruction': 'jle\t.LBB1_24'}, {'instIndex': 283, 'instruction': 'movl\t0x94(%rax), %eax'}, {'instIndex': 284, 'instruction': 'xorl\t%ecx, %ecx'}, {'instIndex': 285, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 286, 'instruction': 'movl\t%ecx, 0x120(%rsp)                 # 4-byte Spill'}, {'instIndex': 287, 'instruction': 'movl\t%eax, 0x124(%rsp)                 # 4-byte Spill'}, {'instIndex': 293, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 294, 'instruction': 'movl\t%edx, 0x8c(%rsp)                 # 4-byte Spill'}, {'instIndex': 295, 'instruction': 'movl\t%ecx, 0x90(%rsp)                 # 4-byte Spill'}, {'instIndex': 296, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 297, 'instruction': 'jle\t.LBB1_23'}, {'instIndex': 422, 'instruction': 'movl\t(%rcx), %edx'}, {'instIndex': 423, 'instruction': 'addl\t$1, %edx'}, {'instIndex': 424, 'instruction': 'movl\t%edx, 12(%rsp)                  # 4-byte Spill'}, {'instIndex': 426, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 427, 'instruction': 'movl\t%eax, 8(%rsp)                   # 4-byte Spill'}, {'instIndex': 428, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 429, 'instruction': 'movl\t$0x10, %ecx'}, {'instIndex': 430, 'instruction': 'cltd'}, {'instIndex': 431, 'instruction': 'idivl\t%ecx'}, {'instIndex': 432, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 433, 'instruction': 'movl\t12(%rsp), %eax                  # 4-byte Reload'}, {'instIndex': 434, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 435, 'instruction': 'jl\t.LBB1_17'}, {'instIndex': 439, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 440, 'instruction': 'movl\t(%rdx), %edx'}, {'instIndex': 441, 'instruction': 'movl\t%edx, 0x8c(%rsp)                 # 4-byte Spill'}, {'instIndex': 442, 'instruction': 'movl\t%ecx, 0x90(%rsp)                 # 4-byte Spill'}, {'instIndex': 443, 'instruction': 'movl\t%eax, 0x94(%rsp)                 # 4-byte Spill'}, {'instIndex': 450, 'instruction': 'addl\t$1, %ecx'}, {'instIndex': 452, 'instruction': 'addl\t$15, %eax'}, {'instIndex': 453, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 454, 'instruction': 'cltd'}, {'instIndex': 455, 'instruction': 'idivl\t%esi'}, {'instIndex': 456, 'instruction': 'movl\t(%rsp), %edx                    # 4-byte Reload'}, {'instIndex': 457, 'instruction': 'movl\t%eax, %esi'}, {'instIndex': 458, 'instruction': 'movl\t4(%rsp), %eax                   # 4-byte Reload'}, {'instIndex': 459, 'instruction': 'cmpl\t%esi, %ecx'}, {'instIndex': 460, 'instruction': 'movl\t%edx, 0x11c(%rsp)                 # 4-byte Spill'}, {'instIndex': 461, 'instruction': 'movl\t%ecx, 0x120(%rsp)                 # 4-byte Spill'}, {'instIndex': 462, 'instruction': 'movl\t%eax, 0x124(%rsp)                 # 4-byte Spill'}, {'instIndex': 463, 'instruction': 'jl\t.LBB1_16'}]}]}

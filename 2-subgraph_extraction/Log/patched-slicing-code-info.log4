The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2845006608154cf7db169bc53e0c2f3fbc6badd8/patch_info.txt
{'1': {'before': 'a/libavformat/rtsp.c', 'after': 'b/libavformat/rtsp.c'}}
{'1': [{'before': '-52,6', 'after': '+52,7', 'function': 'int rtsp_default_protocols = '}, {'before': '-1295,7', 'after': '+1296,7', 'function': 'static int rtsp_setup_output_streams'}, {'before': '-1314,7', 'after': '+1315,7', 'function': 'static int rtsp_setup_output_streams'}, {'before': '-2003,8', 'after': '+2004,6', 'function': 'static int sdp_probe'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2845006608154cf7db169bc53e0c2f3fbc6badd8---b/libavformat/rtsp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2845006608154cf7db169bc53e0c2f3fbc6badd8---a/libavformat/rtsp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2a03e8733071f4a4051ba06a00e0af328082eed1/patch_info.txt
{}
{}
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/patch_info.txt
{'1': {'before': 'a/ffplay.c', 'after': 'b/ffplay.c'}}
{'1': [{'before': '-2075,11', 'after': '+2075,11', 'function': 'static int decode_thread'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf---b/ffplay.c
The case of compiler gcc with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf---a/ffplay.c
The case of compiler gcc with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffplay.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/26534fe84742462f76710bda9c120cdde73a2cbf/clang_before/Os: directory not exists.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2b53e696c864c4ade3c38707f8595e17a998bedc/patch_info.txt
{'1': {'before': 'a/libavcodec/ptx.c', 'after': 'b/libavcodec/ptx.c'}}
{'1': [{'before': '-84,9', 'after': '+84,7', 'function': 'static int ptx_decode_frame'}, {'before': '-101,6', 'after': '+99,11', 'function': 'static int ptx_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2b53e696c864c4ade3c38707f8595e17a998bedc---b/libavcodec/ptx.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2b53e696c864c4ade3c38707f8595e17a998bedc---a/libavcodec/ptx.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/22ecfcd4c79cdf812fdf406525ddf0fd1f7114e4/patch_info.txt
{'1': {'before': 'a/libavfilter/af_channelmap.c', 'after': 'b/libavfilter/af_channelmap.c'}}
{'1': [{'before': '-276,8', 'after': '+275,6', 'function': 'static av_cold int channelmap_init'}, {'before': '-291,11', 'after': '+288,14', 'function': 'static av_cold int channelmap_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/22ecfcd4c79cdf812fdf406525ddf0fd1f7114e4---b/libavfilter/af_channelmap.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/22ecfcd4c79cdf812fdf406525ddf0fd1f7114e4---a/libavfilter/af_channelmap.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/patch_info.txt
{'1': {'before': 'a/libavformat/tls.c', 'after': 'b/libavformat/tls.c'}}
{'1': [{'before': '-213,7', 'after': '+213,7', 'function': 'static int tls_open'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07---b/libavformat/tls.c
The case of compiler gcc with optimization no.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07---a/libavformat/tls.c
The case of compiler gcc with optimization no.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: tls.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/29216d7fd14d1cec16821867d17c90b5c49e8c07/clang_before/Os: directory not exists.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/patch_info.txt
{'1': {'before': 'a/libavformat/id3v2.c', 'after': 'b/libavformat/id3v2.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e---b/libavformat/id3v2.c
The case of compiler gcc with optimization no.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/no/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/O0/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/O1/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/O2/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/O3/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_after/Os/id3v2.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/no/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/no/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.101456
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/no/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/no/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.097791
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/no/id3v2.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O0/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O0/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.097634
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O0/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O0/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.100452
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O0/id3v2.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O1/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O1/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.099474
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O1/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O1/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.104029
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O1/id3v2.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O2/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O2/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.103218
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O2/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O2/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.103218
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O2/id3v2.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O3/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O3/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.101837
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O3/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O3/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.101627
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/O3/id3v2.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/Os/id3v2.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/Os/id3v2.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.102717
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/Os/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/Os/id3v2.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.098502
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_after/Os/id3v2.o.
{}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e---a/libavformat/id3v2.c
The case of compiler gcc with optimization no.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/no/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/O0/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/O1/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/O2/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/O3/id3v2.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/gcc_before/Os/id3v2.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/no/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/no/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.103768
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/no/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/no/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.106690
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/no/id3v2.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O0/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O0/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.100528
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O0/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O0/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.102812
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O0/id3v2.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O1/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O1/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.103808
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O1/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O1/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.118563
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O1/id3v2.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O2/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O2/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.108847
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O2/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O2/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.106889
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O2/id3v2.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O3/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O3/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.103610
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O3/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O3/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.103267
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/O3/id3v2.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: id3v2.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/Os/id3v2.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/Os/id3v2.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.100686
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/Os/id3v2.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/Os/id3v2.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.105012
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/25b51b2c44f16f46d6bd5db4f3421ae57909924e/clang_before/Os/id3v2.o.
{}
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/patch_info.txt
{'1': {'before': 'a/tools/qt-faststart.c', 'after': 'b/tools/qt-faststart.c'}}
{'1': [{'before': '-83,7', 'after': '+83,7', 'function': 'int main'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162---b/tools/qt-faststart.c
The case of compiler gcc with optimization no.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162---a/tools/qt-faststart.c
The case of compiler gcc with optimization no.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: qt-faststart.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2ef9fd8e9ba9ec1ff75bede2a1f9f9570fc60162/clang_before/Os: directory not exists.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/patch_info.txt
{'1': {'before': 'a/libavcodec/libopenh264enc.c', 'after': 'b/libavcodec/libopenh264enc.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675---b/libavcodec/libopenh264enc.c
The case of compiler gcc with optimization no.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675---a/libavcodec/libopenh264enc.c
The case of compiler gcc with optimization no.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: libopenh264enc.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2d097c16b833c532ac974a7f1fd05c0a1f3b7675/clang_before/Os: directory not exists.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/236577230051ad61ec67fa2d68e817d54232d2a0/patch_info.txt
{'1': {'before': 'a/libavformat/mov.c', 'after': 'b/libavformat/mov.c'}}
{'1': [{'before': '-3335,7', 'after': '+3335,8', 'function': 'static int mov_parse_uuid_spherical'}, {'before': '-3348,7', 'after': '+3349,7', 'function': 'static int mov_parse_uuid_spherical'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/236577230051ad61ec67fa2d68e817d54232d2a0---b/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/236577230051ad61ec67fa2d68e817d54232d2a0---a/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/patch_info.txt
{'1': {'before': 'a/ffmpeg.c', 'after': 'b/ffmpeg.c'}}
{'1': [{'before': '-1692,8', 'after': '+1692,9', 'function': 'static int av_encode'}, {'before': '-1708,24', 'after': '+1709,25', 'function': 'static int av_encode'}, {'before': '-1734,7', 'after': '+1736,7', 'function': 'static int av_encode'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5---b/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5---a/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/23ffe323d0cd36a4283802f0240452b89e048ed5/clang_before/Os: directory not exists.
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/patch_info.txt
{'1': {'before': 'a/libavformat/rmdec.c', 'after': 'b/libavformat/rmdec.c'}}
{'1': [{'before': '-127,7', 'after': '+127,7', 'function': 'static int rm_read_audio_stream_info'}, {'before': '-139,6', 'after': '+139,7', 'function': 'static int rm_read_audio_stream_info'}, {'before': '-557,7', 'after': '+558,8', 'function': 'ff_rm_parse_packet '}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054---b/libavformat/rmdec.c
The case of compiler gcc with optimization no.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/no/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/no/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/no/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/no/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O0.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O0/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O0/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O0/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O0/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O1.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O1/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O1/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O1/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O1/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O2.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O2/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O2/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O2/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O2/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O3.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O3/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O3/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O3/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/O3/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization Os.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/Os/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/Os/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/Os/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_after/Os/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization no.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/no/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/no/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/no/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/no/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O0.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O0/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O0/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O0/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O0/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O1.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O1/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O1/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O1/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O1/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O2.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O2/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O2/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O2/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O2/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O3.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O3/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O3/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O3/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/O3/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization Os.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/Os/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/Os/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/Os/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_after/Os/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054---a/libavformat/rmdec.c
The case of compiler gcc with optimization no.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/no/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/no/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/no/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/no/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O0.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O0/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O0/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O0/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O0/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O1.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O1/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O1/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O1/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O1/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O2.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O2/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O2/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O2/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O2/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization O3.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O3/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O3/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O3/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/O3/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler gcc with optimization Os.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/Os/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/Os/rmdec_gcc.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/Os/rmdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/gcc_before/Os/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization no.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/no/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/no/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/no/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/no/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O0.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O0/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O0/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O0/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O0/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O1.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O1/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O1/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O1/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O1/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O2.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O2/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O2/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O2/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O2/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization O3.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O3/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O3/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O3/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/O3/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The case of compiler clang with optimization Os.
Patched source code file: rmdec.c
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/Os/rmdec.s
Assembly file does not exist.
Patched function: 1---static int rm_read_audio_stream_info 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/Os/rmdec.s
Assembly file does not exist.
Patched function: 1---ff_rm_parse_packet  
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/Os/rmdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2426bb960ab71afb21dcf55f7753f3a441694054/clang_before/Os/rmdec.o
Binary file does not exist.
{'rm_read_audio_stream_info': [], '': []}
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/patch_info.txt
{'1': {'before': 'a/libavcodec/wmadec.c', 'after': 'b/libavcodec/wmadec.c'}}
{'1': [{'before': '-791,18', 'after': '+791,18', 'function': 'static int wma_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e---b/libavcodec/wmadec.c
The case of compiler gcc with optimization no.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/no/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/no/wmadec_gcc.s---wma_decode_frame---after
function id: 77
function flag: True
There are 157 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 29, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x28768(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'cmpq\t%rdx, %rax'}, {'instIndex': 33, 'instruction': 'jne\t.L195'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L196'}, {'instIndex': 36, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'cltq'}, {'instIndex': 38, 'instruction': 'leaq\t(%rax,%rax), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 42, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'cltq'}, {'instIndex': 44, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 45, 'instruction': 'leaq\t0x10750(%rax), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 49, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 50, 'instruction': 'jmp\t.L197'}, {'instIndex': 51, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'leaq\t4(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movq\t%rdx, 0x38(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 55, 'instruction': 'movd\t%eax, %xmm0'}, {'instIndex': 56, 'instruction': 'call\tlrintf@PLT'}, {'instIndex': 57, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 58, 'instruction': 'call\tav_clip_int16'}, {'instIndex': 59, 'instruction': 'movq\t0x30(%rsp), %rdx'}, {'instIndex': 60, 'instruction': 'movw\t%ax, (%rdx)'}, {'instIndex': 61, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'cltq'}, {'instIndex': 63, 'instruction': 'addq\t%rax, %rax'}, {'instIndex': 64, 'instruction': 'addq\t%rax, 0x30(%rsp)'}, {'instIndex': 65, 'instruction': 'addl\t$1, 0x1c(%rsp)'}, {'instIndex': 66, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 67, 'instruction': 'cmpl\t0x28(%rsp), %eax'}, {'instIndex': 68, 'instruction': 'jl\t.L198'}, {'instIndex': 69, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 71, 'instruction': 'cltq'}, {'instIndex': 72, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 75, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 77, 'instruction': 'cltq'}, {'instIndex': 78, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 79, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 80, 'instruction': 'addq\t$0x41d4, %rax'}, {'instIndex': 81, 'instruction': 'leaq\t0(,%rax,4), %rcx'}, {'instIndex': 82, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 84, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 85, 'instruction': 'cltq'}, {'instIndex': 86, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 87, 'instruction': 'leaq\t0x10750(%rax), %rsi'}, {'instIndex': 88, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 91, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 92, 'instruction': 'call\tmemmove@PLT'}, {'instIndex': 93, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 96, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 97, 'instruction': 'jl\t.L199'}, {'instIndex': 98, 'instruction': 'jmp\t.L200'}, {'instIndex': 99, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 100, 'instruction': 'jmp\t.L201'}, {'instIndex': 110, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 111, 'instruction': 'cmpl\t$1, 0x20(%rsp)'}, {'instIndex': 112, 'instruction': 'jle\t.L202'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/no/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 29, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x28768(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'cmpq\t%rdx, %rax'}, {'instIndex': 33, 'instruction': 'jne\t.L195'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L196'}, {'instIndex': 36, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'cltq'}, {'instIndex': 38, 'instruction': 'leaq\t(%rax,%rax), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 42, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'cltq'}, {'instIndex': 44, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 45, 'instruction': 'leaq\t0x10750(%rax), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 49, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 50, 'instruction': 'jmp\t.L197'}, {'instIndex': 51, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'leaq\t4(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movq\t%rdx, 0x38(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 55, 'instruction': 'movd\t%eax, %xmm0'}, {'instIndex': 56, 'instruction': 'call\tlrintf@PLT'}, {'instIndex': 57, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 58, 'instruction': 'call\tav_clip_int16'}, {'instIndex': 59, 'instruction': 'movq\t0x30(%rsp), %rdx'}, {'instIndex': 60, 'instruction': 'movw\t%ax, (%rdx)'}, {'instIndex': 61, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'cltq'}, {'instIndex': 63, 'instruction': 'addq\t%rax, %rax'}, {'instIndex': 64, 'instruction': 'addq\t%rax, 0x30(%rsp)'}, {'instIndex': 65, 'instruction': 'addl\t$1, 0x1c(%rsp)'}, {'instIndex': 66, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 67, 'instruction': 'cmpl\t0x28(%rsp), %eax'}, {'instIndex': 68, 'instruction': 'jl\t.L198'}, {'instIndex': 69, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 71, 'instruction': 'cltq'}, {'instIndex': 72, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 75, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 77, 'instruction': 'cltq'}, {'instIndex': 78, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 79, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 80, 'instruction': 'addq\t$0x41d4, %rax'}, {'instIndex': 81, 'instruction': 'leaq\t0(,%rax,4), %rcx'}, {'instIndex': 82, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 84, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 85, 'instruction': 'cltq'}, {'instIndex': 86, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 87, 'instruction': 'leaq\t0x10750(%rax), %rsi'}, {'instIndex': 88, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 91, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 92, 'instruction': 'call\tmemmove@PLT'}, {'instIndex': 93, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 96, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 97, 'instruction': 'jl\t.L199'}, {'instIndex': 98, 'instruction': 'jmp\t.L200'}, {'instIndex': 99, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 100, 'instruction': 'jmp\t.L201'}, {'instIndex': 110, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 111, 'instruction': 'cmpl\t$1, 0x20(%rsp)'}, {'instIndex': 112, 'instruction': 'jle\t.L202'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O0/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O0/wmadec_gcc.s---wma_decode_frame---after
function id: 77
function flag: True
There are 157 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 29, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x28768(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'cmpq\t%rdx, %rax'}, {'instIndex': 33, 'instruction': 'jne\t.L195'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L196'}, {'instIndex': 36, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'cltq'}, {'instIndex': 38, 'instruction': 'leaq\t(%rax,%rax), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 42, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'cltq'}, {'instIndex': 44, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 45, 'instruction': 'leaq\t0x10750(%rax), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 49, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 50, 'instruction': 'jmp\t.L197'}, {'instIndex': 51, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'leaq\t4(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movq\t%rdx, 0x38(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 55, 'instruction': 'movd\t%eax, %xmm0'}, {'instIndex': 56, 'instruction': 'call\tlrintf@PLT'}, {'instIndex': 57, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 58, 'instruction': 'call\tav_clip_int16'}, {'instIndex': 59, 'instruction': 'movq\t0x30(%rsp), %rdx'}, {'instIndex': 60, 'instruction': 'movw\t%ax, (%rdx)'}, {'instIndex': 61, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'cltq'}, {'instIndex': 63, 'instruction': 'addq\t%rax, %rax'}, {'instIndex': 64, 'instruction': 'addq\t%rax, 0x30(%rsp)'}, {'instIndex': 65, 'instruction': 'addl\t$1, 0x1c(%rsp)'}, {'instIndex': 66, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 67, 'instruction': 'cmpl\t0x28(%rsp), %eax'}, {'instIndex': 68, 'instruction': 'jl\t.L198'}, {'instIndex': 69, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 71, 'instruction': 'cltq'}, {'instIndex': 72, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 75, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 77, 'instruction': 'cltq'}, {'instIndex': 78, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 79, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 80, 'instruction': 'addq\t$0x41d4, %rax'}, {'instIndex': 81, 'instruction': 'leaq\t0(,%rax,4), %rcx'}, {'instIndex': 82, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 84, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 85, 'instruction': 'cltq'}, {'instIndex': 86, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 87, 'instruction': 'leaq\t0x10750(%rax), %rsi'}, {'instIndex': 88, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 91, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 92, 'instruction': 'call\tmemmove@PLT'}, {'instIndex': 93, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 96, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 97, 'instruction': 'jl\t.L199'}, {'instIndex': 98, 'instruction': 'jmp\t.L200'}, {'instIndex': 99, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 100, 'instruction': 'jmp\t.L201'}, {'instIndex': 110, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 111, 'instruction': 'cmpl\t$1, 0x20(%rsp)'}, {'instIndex': 112, 'instruction': 'jle\t.L202'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O0/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x28(%rsp)'}, {'instIndex': 26, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 28, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 29, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x28768(%rax), %rax'}, {'instIndex': 31, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'cmpq\t%rdx, %rax'}, {'instIndex': 33, 'instruction': 'jne\t.L195'}, {'instIndex': 34, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 35, 'instruction': 'jmp\t.L196'}, {'instIndex': 36, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'cltq'}, {'instIndex': 38, 'instruction': 'leaq\t(%rax,%rax), %rdx'}, {'instIndex': 39, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 40, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 41, 'instruction': 'movq\t%rax, 0x30(%rsp)'}, {'instIndex': 42, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 43, 'instruction': 'cltq'}, {'instIndex': 44, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 45, 'instruction': 'leaq\t0x10750(%rax), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, 0x38(%rsp)'}, {'instIndex': 49, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 50, 'instruction': 'jmp\t.L197'}, {'instIndex': 51, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 52, 'instruction': 'leaq\t4(%rax), %rdx'}, {'instIndex': 53, 'instruction': 'movq\t%rdx, 0x38(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 55, 'instruction': 'movd\t%eax, %xmm0'}, {'instIndex': 56, 'instruction': 'call\tlrintf@PLT'}, {'instIndex': 57, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 58, 'instruction': 'call\tav_clip_int16'}, {'instIndex': 59, 'instruction': 'movq\t0x30(%rsp), %rdx'}, {'instIndex': 60, 'instruction': 'movw\t%ax, (%rdx)'}, {'instIndex': 61, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 62, 'instruction': 'cltq'}, {'instIndex': 63, 'instruction': 'addq\t%rax, %rax'}, {'instIndex': 64, 'instruction': 'addq\t%rax, 0x30(%rsp)'}, {'instIndex': 65, 'instruction': 'addl\t$1, 0x1c(%rsp)'}, {'instIndex': 66, 'instruction': 'movl\t0x1c(%rsp), %eax'}, {'instIndex': 67, 'instruction': 'cmpl\t0x28(%rsp), %eax'}, {'instIndex': 68, 'instruction': 'jl\t.L198'}, {'instIndex': 69, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 71, 'instruction': 'cltq'}, {'instIndex': 72, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 75, 'instruction': 'movslq\t%eax, %rcx'}, {'instIndex': 76, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 77, 'instruction': 'cltq'}, {'instIndex': 78, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 79, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 80, 'instruction': 'addq\t$0x41d4, %rax'}, {'instIndex': 81, 'instruction': 'leaq\t0(,%rax,4), %rcx'}, {'instIndex': 82, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 83, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 84, 'instruction': 'movl\t0x20(%rsp), %eax'}, {'instIndex': 85, 'instruction': 'cltq'}, {'instIndex': 86, 'instruction': 'salq\t$14, %rax'}, {'instIndex': 87, 'instruction': 'leaq\t0x10750(%rax), %rsi'}, {'instIndex': 88, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t%rsi, %rax'}, {'instIndex': 90, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 91, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 92, 'instruction': 'call\tmemmove@PLT'}, {'instIndex': 93, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 94, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 95, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 96, 'instruction': 'cmpl\t%eax, 0x20(%rsp)'}, {'instIndex': 97, 'instruction': 'jl\t.L199'}, {'instIndex': 98, 'instruction': 'jmp\t.L200'}, {'instIndex': 99, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 100, 'instruction': 'jmp\t.L201'}, {'instIndex': 110, 'instruction': 'addl\t$1, 0x20(%rsp)'}, {'instIndex': 111, 'instruction': 'cmpl\t$1, 0x20(%rsp)'}, {'instIndex': 112, 'instruction': 'jle\t.L202'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O1/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O1/wmadec_gcc.s---wma_decode_frame---after
function id: 45
function flag: True
There are 1669 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1290, 'instruction': 'movl\t0x4c(%r15), %r12d'}, {'instIndex': 1291, 'instruction': 'movq\t0x28768(%r15), %rax'}, {'instIndex': 1292, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 1293, 'instruction': 'je\t.L237'}, {'instIndex': 1319, 'instruction': 'testl\t%r12d, %r12d'}, {'instIndex': 1320, 'instruction': 'jle\t.L168'}, {'instIndex': 1321, 'instruction': 'movslq\t%r12d, %r12'}, {'instIndex': 1322, 'instruction': 'addq\t%r12, %r12'}, {'instIndex': 1323, 'instruction': 'leal\t-1(%rbx), %eax'}, {'instIndex': 1324, 'instruction': 'leaq\t0x10754(%r15,%rax,4), %rbp'}, {'instIndex': 1325, 'instruction': 'movq\t0x60(%rsp), %r14'}, {'instIndex': 1326, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 1327, 'instruction': 'notq\t%rax'}, {'instIndex': 1328, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 1329, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 1330, 'instruction': 'jmp\t.L150'}, {'instIndex': 1331, 'instruction': 'movslq\t0x4a0(%r15), %rax'}, {'instIndex': 1332, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 1333, 'instruction': 'movq\t%r13, %rcx'}, {'instIndex': 1334, 'instruction': 'salq\t$12, %rcx'}, {'instIndex': 1335, 'instruction': 'leaq\t0x41d4(%rax,%rcx), %rax'}, {'instIndex': 1336, 'instruction': 'leaq\t(%r15,%rax,4), %rsi'}, {'instIndex': 1338, 'instruction': 'addq\t$1, %r13'}, {'instIndex': 1339, 'instruction': 'addq\t$0x4000, %rbp'}, {'instIndex': 1340, 'instruction': 'addq\t$2, %r14'}, {'instIndex': 1341, 'instruction': 'cmpl\t%r13d, 0x4c(%r15)'}, {'instIndex': 1342, 'instruction': 'jle\t.L238'}, {'instIndex': 1343, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 1344, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 1345, 'instruction': 'leaq\t(%rax,%rbp), %rdi'}, {'instIndex': 1346, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 1347, 'instruction': 'jle\t.L146'}, {'instIndex': 1348, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 1349, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 1350, 'instruction': 'cvtss2siq\t-4(%rdx), %rax'}, {'instIndex': 1357, 'instruction': 'movw\t%ax, (%rsi)'}, {'instIndex': 1358, 'instruction': 'addq\t%r12, %rsi'}, {'instIndex': 1359, 'instruction': 'cmpq\t%rbp, %rdx'}, {'instIndex': 1360, 'instruction': 'jne\t.L149'}, {'instIndex': 1361, 'instruction': 'jmp\t.L146'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O1/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1290, 'instruction': 'movl\t0x4c(%r15), %r12d'}, {'instIndex': 1291, 'instruction': 'movq\t0x28768(%r15), %rax'}, {'instIndex': 1292, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 1293, 'instruction': 'je\t.L237'}, {'instIndex': 1319, 'instruction': 'testl\t%r12d, %r12d'}, {'instIndex': 1320, 'instruction': 'jle\t.L168'}, {'instIndex': 1321, 'instruction': 'movslq\t%r12d, %r12'}, {'instIndex': 1322, 'instruction': 'addq\t%r12, %r12'}, {'instIndex': 1323, 'instruction': 'leal\t-1(%rbx), %eax'}, {'instIndex': 1324, 'instruction': 'leaq\t0x10754(%r15,%rax,4), %rbp'}, {'instIndex': 1325, 'instruction': 'movq\t0x60(%rsp), %r14'}, {'instIndex': 1326, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 1327, 'instruction': 'notq\t%rax'}, {'instIndex': 1328, 'instruction': 'salq\t$2, %rax'}, {'instIndex': 1329, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 1330, 'instruction': 'jmp\t.L150'}, {'instIndex': 1331, 'instruction': 'movslq\t0x4a0(%r15), %rax'}, {'instIndex': 1332, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 1333, 'instruction': 'movq\t%r13, %rcx'}, {'instIndex': 1334, 'instruction': 'salq\t$12, %rcx'}, {'instIndex': 1335, 'instruction': 'leaq\t0x41d4(%rax,%rcx), %rax'}, {'instIndex': 1336, 'instruction': 'leaq\t(%r15,%rax,4), %rsi'}, {'instIndex': 1338, 'instruction': 'addq\t$1, %r13'}, {'instIndex': 1339, 'instruction': 'addq\t$0x4000, %rbp'}, {'instIndex': 1340, 'instruction': 'addq\t$2, %r14'}, {'instIndex': 1341, 'instruction': 'cmpl\t%r13d, 0x4c(%r15)'}, {'instIndex': 1342, 'instruction': 'jle\t.L238'}, {'instIndex': 1343, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 1344, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 1345, 'instruction': 'leaq\t(%rax,%rbp), %rdi'}, {'instIndex': 1346, 'instruction': 'testl\t%ebx, %ebx'}, {'instIndex': 1347, 'instruction': 'jle\t.L146'}, {'instIndex': 1348, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 1349, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 1350, 'instruction': 'cvtss2siq\t-4(%rdx), %rax'}, {'instIndex': 1357, 'instruction': 'movw\t%ax, (%rsi)'}, {'instIndex': 1358, 'instruction': 'addq\t%r12, %rsi'}, {'instIndex': 1359, 'instruction': 'cmpq\t%rbp, %rdx'}, {'instIndex': 1360, 'instruction': 'jne\t.L149'}, {'instIndex': 1361, 'instruction': 'jmp\t.L146'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O2/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O2/wmadec_gcc.s---wma_decode_frame---after
function id: 43
function flag: True
There are 1671 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 437, 'instruction': 'movq\t0x28768(%r14), %rax'}, {'instIndex': 438, 'instruction': 'movl\t0x4c(%r14), %r13d'}, {'instIndex': 439, 'instruction': 'movq\t%r14, %r15'}, {'instIndex': 440, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 441, 'instruction': 'je\t.L264'}, {'instIndex': 1245, 'instruction': 'testl\t%r13d, %r13d'}, {'instIndex': 1246, 'instruction': 'jle\t.L173'}, {'instIndex': 1247, 'instruction': 'leal\t-1(%r12), %ebx'}, {'instIndex': 1248, 'instruction': 'movslq\t%r13d, %rbp'}, {'instIndex': 1249, 'instruction': 'movq\t0x68(%rsp), %r10'}, {'instIndex': 1250, 'instruction': 'movslq\t%r12d, %r8'}, {'instIndex': 1251, 'instruction': 'leaq\t0x10754(%r14,%rbx,4), %r13'}, {'instIndex': 1252, 'instruction': 'notq\t%rbx'}, {'instIndex': 1253, 'instruction': 'addq\t%rbp, %rbp'}, {'instIndex': 1254, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 1255, 'instruction': 'salq\t$2, %rbx'}, {'instIndex': 1256, 'instruction': 'movq\t%rbx, (%rsp)'}, {'instIndex': 1257, 'instruction': 'movq\t%r15, %rbx'}, {'instIndex': 1258, 'instruction': 'movq\t%r10, %r15'}, {'instIndex': 1259, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 1260, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 1261, 'instruction': 'leaq\t(%rax,%r13), %rdi'}, {'instIndex': 1262, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 1263, 'instruction': 'testl\t%r12d, %r12d'}, {'instIndex': 1264, 'instruction': 'jle\t.L170'}, {'instIndex': 1265, 'instruction': 'cvtss2siq\t(%rdx), %rax'}, {'instIndex': 1266, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 1273, 'instruction': 'movw\t%ax, (%rsi)'}, {'instIndex': 1274, 'instruction': 'addq\t%rbp, %rsi'}, {'instIndex': 1275, 'instruction': 'cmpq\t%r13, %rdx'}, {'instIndex': 1276, 'instruction': 'jne\t.L165'}, {'instIndex': 1277, 'instruction': 'movq\t%r14, %rax'}, {'instIndex': 1278, 'instruction': 'leaq\t0(,%r8,4), %rdx'}, {'instIndex': 1279, 'instruction': 'addq\t$1, %r14'}, {'instIndex': 1280, 'instruction': 'addq\t$2, %r15'}, {'instIndex': 1281, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 1282, 'instruction': 'addq\t$0x4000, %r13'}, {'instIndex': 1283, 'instruction': 'leaq\t0x41d4(%r8,%rax), %rax'}, {'instIndex': 1284, 'instruction': 'leaq\t(%rbx,%rax,4), %rsi'}, {'instIndex': 1286, 'instruction': 'cmpl\t%r14d, 0x4c(%rbx)'}, {'instIndex': 1287, 'instruction': 'jle\t.L173'}, {'instIndex': 1288, 'instruction': 'movslq\t0x4a0(%rbx), %r8'}, {'instIndex': 1289, 'instruction': 'jmp\t.L171'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O2/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 437, 'instruction': 'movq\t0x28768(%r14), %rax'}, {'instIndex': 438, 'instruction': 'movl\t0x4c(%r14), %r13d'}, {'instIndex': 439, 'instruction': 'movq\t%r14, %r15'}, {'instIndex': 440, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 441, 'instruction': 'je\t.L264'}, {'instIndex': 1245, 'instruction': 'testl\t%r13d, %r13d'}, {'instIndex': 1246, 'instruction': 'jle\t.L173'}, {'instIndex': 1247, 'instruction': 'leal\t-1(%r12), %ebx'}, {'instIndex': 1248, 'instruction': 'movslq\t%r13d, %rbp'}, {'instIndex': 1249, 'instruction': 'movq\t0x68(%rsp), %r10'}, {'instIndex': 1250, 'instruction': 'movslq\t%r12d, %r8'}, {'instIndex': 1251, 'instruction': 'leaq\t0x10754(%r14,%rbx,4), %r13'}, {'instIndex': 1252, 'instruction': 'notq\t%rbx'}, {'instIndex': 1253, 'instruction': 'addq\t%rbp, %rbp'}, {'instIndex': 1254, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 1255, 'instruction': 'salq\t$2, %rbx'}, {'instIndex': 1256, 'instruction': 'movq\t%rbx, (%rsp)'}, {'instIndex': 1257, 'instruction': 'movq\t%r15, %rbx'}, {'instIndex': 1258, 'instruction': 'movq\t%r10, %r15'}, {'instIndex': 1259, 'instruction': 'movq\t(%rsp), %rax'}, {'instIndex': 1260, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 1261, 'instruction': 'leaq\t(%rax,%r13), %rdi'}, {'instIndex': 1262, 'instruction': 'movq\t%rdi, %rdx'}, {'instIndex': 1263, 'instruction': 'testl\t%r12d, %r12d'}, {'instIndex': 1264, 'instruction': 'jle\t.L170'}, {'instIndex': 1265, 'instruction': 'cvtss2siq\t(%rdx), %rax'}, {'instIndex': 1266, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 1273, 'instruction': 'movw\t%ax, (%rsi)'}, {'instIndex': 1274, 'instruction': 'addq\t%rbp, %rsi'}, {'instIndex': 1275, 'instruction': 'cmpq\t%r13, %rdx'}, {'instIndex': 1276, 'instruction': 'jne\t.L165'}, {'instIndex': 1277, 'instruction': 'movq\t%r14, %rax'}, {'instIndex': 1278, 'instruction': 'leaq\t0(,%r8,4), %rdx'}, {'instIndex': 1279, 'instruction': 'addq\t$1, %r14'}, {'instIndex': 1280, 'instruction': 'addq\t$2, %r15'}, {'instIndex': 1281, 'instruction': 'salq\t$12, %rax'}, {'instIndex': 1282, 'instruction': 'addq\t$0x4000, %r13'}, {'instIndex': 1283, 'instruction': 'leaq\t0x41d4(%r8,%rax), %rax'}, {'instIndex': 1284, 'instruction': 'leaq\t(%rbx,%rax,4), %rsi'}, {'instIndex': 1286, 'instruction': 'cmpl\t%r14d, 0x4c(%rbx)'}, {'instIndex': 1287, 'instruction': 'jle\t.L173'}, {'instIndex': 1288, 'instruction': 'movslq\t0x4a0(%rbx), %r8'}, {'instIndex': 1289, 'instruction': 'jmp\t.L171'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O3/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O3/wmadec_gcc.s---wma_decode_frame---after
There are 0 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]
Empty patched instructions for patched function: wma_decode_frame from assembly files.
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/O3/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': []}]}
The case of compiler gcc with optimization Os.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/Os/wmadec_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/Os/wmadec_gcc.s---wma_decode_frame---after
function id: 56
function flag: True
There are 1292 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 988, 'instruction': 'movq\t0x28768(%rbx), %rax'}, {'instIndex': 989, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 990, 'instruction': 'leaq\t0x10750(%rbx), %rbp'}, {'instIndex': 991, 'instruction': 'jne\t.L143'}, {'instIndex': 992, 'instruction': 'movq\t%rbp, %rcx'}, {'instIndex': 993, 'instruction': 'addq\t%r15, %r15'}, {'instIndex': 994, 'instruction': 'xorl\t%ebp, %ebp'}, {'instIndex': 995, 'instruction': 'jmp\t.L144'}, {'instIndex': 1008, 'instruction': 'cvtss2siq\t(%rcx,%rsi,4), %rdx'}, {'instIndex': 1016, 'instruction': 'movw\t%di, (%rax)'}, {'instIndex': 1017, 'instruction': 'incq\t%rsi'}, {'instIndex': 1018, 'instruction': 'addq\t%r15, %rax'}, {'instIndex': 1019, 'instruction': 'cmpl\t%esi, %r12d'}, {'instIndex': 1020, 'instruction': 'jg\t.L149'}, {'instIndex': 1021, 'instruction': 'movslq\t0x4a0(%rbx), %rax'}, {'instIndex': 1022, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 1025, 'instruction': 'salq\t$12, %rsi'}, {'instIndex': 1026, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 1027, 'instruction': 'leaq\t0x41d4(%rax,%rsi), %rax'}, {'instIndex': 1028, 'instruction': 'leaq\t(%rbx,%rax,4), %rsi'}, {'instIndex': 1031, 'instruction': 'addq\t$0x4000, %rcx'}, {'instIndex': 1032, 'instruction': 'cmpl\t%ebp, 0x4c(%rbx)'}, {'instIndex': 1033, 'instruction': 'jle\t.L205'}, {'instIndex': 1034, 'instruction': 'leaq\t0(%rbp,%rbp), %rax'}, {'instIndex': 1035, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 1036, 'instruction': 'addq\t0x38(%rsp), %rax'}, {'instIndex': 1037, 'instruction': 'jmp\t.L146'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/gcc_after/Os/wmadec.o
Binary file does not exist.
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 988, 'instruction': 'movq\t0x28768(%rbx), %rax'}, {'instIndex': 989, 'instruction': 'cmpq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rax'}, {'instIndex': 990, 'instruction': 'leaq\t0x10750(%rbx), %rbp'}, {'instIndex': 991, 'instruction': 'jne\t.L143'}, {'instIndex': 992, 'instruction': 'movq\t%rbp, %rcx'}, {'instIndex': 993, 'instruction': 'addq\t%r15, %r15'}, {'instIndex': 994, 'instruction': 'xorl\t%ebp, %ebp'}, {'instIndex': 995, 'instruction': 'jmp\t.L144'}, {'instIndex': 1008, 'instruction': 'cvtss2siq\t(%rcx,%rsi,4), %rdx'}, {'instIndex': 1016, 'instruction': 'movw\t%di, (%rax)'}, {'instIndex': 1017, 'instruction': 'incq\t%rsi'}, {'instIndex': 1018, 'instruction': 'addq\t%r15, %rax'}, {'instIndex': 1019, 'instruction': 'cmpl\t%esi, %r12d'}, {'instIndex': 1020, 'instruction': 'jg\t.L149'}, {'instIndex': 1021, 'instruction': 'movslq\t0x4a0(%rbx), %rax'}, {'instIndex': 1022, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 1025, 'instruction': 'salq\t$12, %rsi'}, {'instIndex': 1026, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 1027, 'instruction': 'leaq\t0x41d4(%rax,%rsi), %rax'}, {'instIndex': 1028, 'instruction': 'leaq\t(%rbx,%rax,4), %rsi'}, {'instIndex': 1031, 'instruction': 'addq\t$0x4000, %rcx'}, {'instIndex': 1032, 'instruction': 'cmpl\t%ebp, 0x4c(%rbx)'}, {'instIndex': 1033, 'instruction': 'jle\t.L205'}, {'instIndex': 1034, 'instruction': 'leaq\t0(%rbp,%rbp), %rax'}, {'instIndex': 1035, 'instruction': 'xorl\t%esi, %esi'}, {'instIndex': 1036, 'instruction': 'addq\t0x38(%rsp), %rax'}, {'instIndex': 1037, 'instruction': 'jmp\t.L146'}]}]}
The case of compiler clang with optimization no.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/no/wmadec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/no/wmadec.s---wma_decode_frame---after
function id: 7
function flag: True
There are 142 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 21, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rcx'}, {'instIndex': 26, 'instruction': 'cmpq\t%rcx, 0x28768(%rax)'}, {'instIndex': 27, 'instruction': 'jne\t.LBB7_16'}, {'instIndex': 28, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x48(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x4c(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB7_15'}, {'instIndex': 33, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 35, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 36, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 38, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}, {'instIndex': 40, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 41, 'instruction': 'shlq\t$14, %rcx'}, {'instIndex': 42, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 43, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t$0, 0x38(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 46, 'instruction': 'cmpl\t0x34(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'jge\t.LBB7_13'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 50, 'instruction': 'addq\t$4, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'movss\t(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 53, 'instruction': 'cvtss2si\t%xmm0, %rax'}, {'instIndex': 54, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 55, 'instruction': 'callq\tav_clip_int16'}, {'instIndex': 56, 'instruction': 'movw\t%ax, %cx'}, {'instIndex': 57, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movw\t%cx, (%rax)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %ecx'}, {'instIndex': 60, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 62, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 63, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 65, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 67, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB7_10'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$0x10750, %rdi                    # imm = 0x0x29fe'}, {'instIndex': 71, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 72, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 73, 'instruction': 'addq\t%rax, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rsi'}, {'instIndex': 75, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 76, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 77, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 78, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x4a0(%rax), %rax'}, {'instIndex': 81, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 82, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 83, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movslq\t0x4a0(%rax), %rdx'}, {'instIndex': 85, 'instruction': 'shlq\t$2, %rdx'}, {'instIndex': 86, 'instruction': 'callq\tmemmove@PLT'}, {'instIndex': 87, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 88, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 89, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB7_8'}, {'instIndex': 91, 'instruction': 'jmp\t.LBB7_25'}, {'instIndex': 92, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 93, 'instruction': 'cmpl\t$2, 0x30(%rsp)'}, {'instIndex': 94, 'instruction': 'jge\t.LBB7_20'}, {'instIndex': 102, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 103, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 104, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 105, 'instruction': 'jmp\t.LBB7_17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/no/wmadec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/no/wmadec.o---after
The extraction of function: wma_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 428 nodes and 735 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 142 instructions in binary file.
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
The execution time of patched subCFG information extraction via angr: 0:00:01.156248
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "movsxd" for 0x400bdc>, <DisassemblerInsn "shl" for 0x400be1>, <DisassemblerInsn "add" for 0x400be4>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "add" for 0x400bf1>, <DisassemblerInsn "movsxd" for 0x400bf7>, <DisassemblerInsn "shl" for 0x400bfc>, <DisassemblerInsn "add" for 0x400c00>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c08>, <DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "add" for 0x400c22>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "movss" for 0x400c2b>, <DisassemblerInsn "cvtss2si" for 0x400c2f>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "call" for 0x400c36>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "mov" for 0x400c43>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "movsxd" for 0x400c4f>, <DisassemblerInsn "shl" for 0x400c52>, <DisassemblerInsn "add" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c64>, <DisassemblerInsn "jmp" for 0x400c68>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d20>, <DisassemblerInsn "mov" for 0x400d25>, <DisassemblerInsn "movsxd" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2d>, <DisassemblerInsn "call" for 0x400d31>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b85>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bbd>, <DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ceb>, <DisassemblerInsn "movsxd" for 0x400cf2>, <DisassemblerInsn "shl" for 0x400cf7>, <DisassemblerInsn "add" for 0x400cfb>, <DisassemblerInsn "movsxd" for 0x400cfe>, <DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "add" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "jmp" for 0x400d12>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b98>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "cmp" for 0x400bb0>, <DisassemblerInsn "jne" for 0x400bb7>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "add" for 0x400cc6>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "jmp" for 0x400ccd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "add" for 0x400c6f>, <DisassemblerInsn "movsxd" for 0x400c76>, <DisassemblerInsn "shl" for 0x400c7b>, <DisassemblerInsn "add" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c87>, <DisassemblerInsn "movsxd" for 0x400c8e>, <DisassemblerInsn "shl" for 0x400c93>, <DisassemblerInsn "add" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "movsxd" for 0x400c9f>, <DisassemblerInsn "shl" for 0x400ca6>, <DisassemblerInsn "add" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cad>, <DisassemblerInsn "movsxd" for 0x400cb2>, <DisassemblerInsn "shl" for 0x400cb9>, <DisassemblerInsn "call" for 0x400cbd>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400cd2>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<add~~rax, 0x10750>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 0xe>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<movss~~xmm0, dword ptr [rax]>', '<cvtss2si~~rax, xmm0>', '<mov~~edi, eax>', '<call~~0x402a60>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~cx, ax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~word ptr [rax], cx>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x38], eax>', '<jmp~~0x400c10>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rsi, rsp>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<call~~rax>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x400b89>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x48]>', '<add~~rcx, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rcx, rax>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + rax*8], rcx>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400cdf>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rip + 0xff4d0]>', '<cmp~~qword ptr [rax + 0x28768], rcx>', '<jne~~0x400cd7>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400bc5>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rax, dword ptr [rax + 0x4a0]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rdx, dword ptr [rax + 0x4a0]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(21, 25), (8, 9), (9, 11), (6, 8), (18, 13), (15, 20), (11, 16), (10, 14), (25, 12), (24, 16), (16, 21), (12, 17), (20, 24), (9, 12), (8, 10), (10, 13), (11, 15), (13, 18), (25, 11), (24, 15), (18, 14)]}]}
{'wma_decode_frame': [4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/no/wmadec.o---after
The extraction of function: wma_decode_frame
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 662 nodes and 1021 edges in CFGEmulated.
It has 661 nodes and 1158 edges in CDG.
It has 9467 nodes and 29197 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
{4197253, 4197255, 4197257, 4197775, 4197392, 4197652, 4197402, 4197788, 4197790, 4197798, 4197168, 4197683, 4197435, 4197691, 4197309, 4197570, 4197317, 4197701, 4197586, 4197335, 4197591, 4197212, 4197599, 4197606, 4197222, 4197482, 4197233, 4197246}
[110, 85, 98, 75, 47, 29, 127, 581, 37, 86, 69, 48, 58, 77, 87, 133, 36, 68, 122, 383, 67, 121, 59, 380, 0, 379, 76, 159, 378, 74, 84, 49]
The execution time of patched slicing information extraction via angr: 0:02:34.668042
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "mov" for 0x402a8e>, <DisassemblerInsn "movsx" for 0x402a93>, <DisassemblerInsn "ret" for 0x402a98>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "add" for 0x400c6f>, <DisassemblerInsn "movsxd" for 0x400c76>, <DisassemblerInsn "shl" for 0x400c7b>, <DisassemblerInsn "add" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c87>, <DisassemblerInsn "movsxd" for 0x400c8e>, <DisassemblerInsn "shl" for 0x400c93>, <DisassemblerInsn "add" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "movsxd" for 0x400c9f>, <DisassemblerInsn "shl" for 0x400ca6>, <DisassemblerInsn "add" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cad>, <DisassemblerInsn "movsxd" for 0x400cb2>, <DisassemblerInsn "shl" for 0x400cb9>, <DisassemblerInsn "call" for 0x400cbd>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a64>, <DisassemblerInsn "add" for 0x402a68>, <DisassemblerInsn "and" for 0x402a6d>, <DisassemblerInsn "cmp" for 0x402a72>, <DisassemblerInsn "je" for 0x402a75>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400cd2>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "cmp" for 0x400b6a>, <DisassemblerInsn "jge" for 0x400b6f>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4e>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "pop" for 0x402a5c>, <DisassemblerInsn "pop" for 0x402a5d>, <DisassemblerInsn "ret" for 0x402a5f>]'}, {'block_Idx': 581, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "cmp" for 0x400d3f>, <DisassemblerInsn "jge" for 0x400d43>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b7e>, <DisassemblerInsn "je" for 0x400b83>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "push" for 0x400df0>, <DisassemblerInsn "push" for 0x400df2>, <DisassemblerInsn "sub" for 0x400df3>, <DisassemblerInsn "mov" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400e02>, <DisassemblerInsn "cmp" for 0x400e0a>, <DisassemblerInsn "je" for 0x400e0e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b85>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b98>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "cmp" for 0x400bb0>, <DisassemblerInsn "jne" for 0x400bb7>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d20>, <DisassemblerInsn "mov" for 0x400d25>, <DisassemblerInsn "movsxd" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2d>, <DisassemblerInsn "call" for 0x400d31>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "jmp" for 0x400b79>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "movsx" for 0x402a93>, <DisassemblerInsn "ret" for 0x402a98>]'}, {'block_Idx': 383, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bbd>, <DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "mov" for 0x400c43>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "movsxd" for 0x400c4f>, <DisassemblerInsn "shl" for 0x400c52>, <DisassemblerInsn "add" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c64>, <DisassemblerInsn "jmp" for 0x400c68>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b5c>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 380, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400d9c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b34>, <DisassemblerInsn "mov" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3e>, <DisassemblerInsn "mov" for 0x400b43>, <DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "mov" for 0x400b52>, <DisassemblerInsn "mov" for 0x400b5c>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 379, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d45>, <DisassemblerInsn "add" for 0x400d4a>, <DisassemblerInsn "movsxd" for 0x400d51>, <DisassemblerInsn "shl" for 0x400d56>, <DisassemblerInsn "add" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "movsxd" for 0x400d69>, <DisassemblerInsn "shl" for 0x400d6e>, <DisassemblerInsn "add" for 0x400d72>, <DisassemblerInsn "movsxd" for 0x400d75>, <DisassemblerInsn "shl" for 0x400d7a>, <DisassemblerInsn "add" for 0x400d7e>, <DisassemblerInsn "movsxd" for 0x400d81>, <DisassemblerInsn "shl" for 0x400d86>, <DisassemblerInsn "call" for 0x400d8a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ceb>, <DisassemblerInsn "movsxd" for 0x400cf2>, <DisassemblerInsn "shl" for 0x400cf7>, <DisassemblerInsn "add" for 0x400cfb>, <DisassemblerInsn "movsxd" for 0x400cfe>, <DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "add" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "jmp" for 0x400d12>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a43>, <DisassemblerInsn "mov" for 0x402a4e>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "pop" for 0x402a5c>, <DisassemblerInsn "pop" for 0x402a5d>, <DisassemblerInsn "ret" for 0x402a5f>]'}, {'block_Idx': 378, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "cmp" for 0x400d3f>, <DisassemblerInsn "jge" for 0x400d43>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "movsxd" for 0x400bdc>, <DisassemblerInsn "shl" for 0x400be1>, <DisassemblerInsn "add" for 0x400be4>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "add" for 0x400bf1>, <DisassemblerInsn "movsxd" for 0x400bf7>, <DisassemblerInsn "shl" for 0x400bfc>, <DisassemblerInsn "add" for 0x400c00>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c08>, <DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "add" for 0x400c22>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "movss" for 0x400c2b>, <DisassemblerInsn "cvtss2si" for 0x400c2f>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "call" for 0x400c36>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b87>]'}], 'cfg_block_detailed_info': [{'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 8]>', '<mov~~word ptr [rsp - 2], ax>', '<movsx~~eax, word ptr [rsp - 2]>', '<ret~~>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rax, dword ptr [rax + 0x4a0]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rdx, dword ptr [rax + 0x4a0]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, dword ptr [rsp - 8]>', '<add~~eax, 0x8000>', '<and~~eax, 0xffff0000>', '<cmp~~eax, 0>', '<je~~0x402a8a>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jge~~0x400b7e>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x178>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 581, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rsp + 0x2c]>', '<jge~~0x400d9c>']}, {'block_Idx': 37, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x3c], 0>', '<je~~0x400b87>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 69, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x178>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax + 0x60], 0>', '<je~~0x401076>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x400b89>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rip + 0xff4d0]>', '<cmp~~qword ptr [rax + 0x28768], rcx>', '<jne~~0x400cd7>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rsi, rsp>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<call~~rax>']}, {'block_Idx': 87, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<jmp~~0x400da6>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 122, 'blockInsts': ['<movsx~~eax, word ptr [rsp - 2]>', '<ret~~>']}, {'block_Idx': 383, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~cx, ax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~word ptr [rax], cx>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x38], eax>', '<jmp~~0x400c10>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400df0>']}, {'block_Idx': 380, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax + 0x4c0], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax + 0x4c4], 0>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400df0>']}, {'block_Idx': 379, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<movsxd~~rax, dword ptr [rsp + 0x34]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x48]>', '<add~~rcx, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rcx, rax>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + rax*8], rcx>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400cdf>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~dword ptr [rsp + 0x134], 0>', '<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x178>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 378, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rsp + 0x2c]>', '<jge~~0x400d9c>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<add~~rax, 0x10750>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 0xe>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<movss~~xmm0, dword ptr [rax]>', '<cvtss2si~~rax, xmm0>', '<mov~~edi, eax>', '<call~~0x402a60>']}, {'block_Idx': 49, 'blockInsts': ['<jmp~~0x400b5c>']}], 'cfg_edge_info': [(87, 77), (159, 29), (58, 68), (67, 74), (0, 69), (383, 75), (49, 59), (121, 133), (74, 85), (581, 380), (37, 48), (0, 29), (87, 76), (59, 69), (58, 67), (29, 37), (84, 98), (378, 380), (133, 85), (122, 121), (59, 29), (127, 29), (74, 84), (383, 74), (581, 379), (68, 77), (75, 86), (68, 76), (76, 87), (67, 75), (77, 378), (37, 49), (133, 84), (29, 36), (378, 379), (48, 58), (380, 86), (84, 121), (36, 47), (110, 121)], 'cdg_edge_info': [(37, 58), (58, 68), (67, 74), (58, 77), (379, 581), (67, 86), (29, 47), (383, 75), (581, 380), (37, 48), (68, 87), (87, 76), (58, 67), (29, 37), (58, 378), (74, 121), (378, 380), (67, 85), (74, 133), (37, 29), (74, 84), (383, 74), (581, 379), (85, 383), (581, 86), (383, 86), (37, 59), (133, 121), (67, 75), (37, 49), (87, 87), (133, 133), (133, 84), (29, 36), (378, 379), (378, 86), (383, 85), (68, 76)], 'ddg_edge_info': [(59, 58), (29, 87), (29, 84), (67, 74), (58, 77), (59, 76), (58, 74), (58, 379), (59, 85), (36, 86), (383, 84), (121, 133), (29, 59), (121, 84), (29, 68), (68, 87), (29, 74), (29, 77), (29, 86), (29, 37), (77, 379), (77, 86), (67, 85), (59, 383), (58, 76), (0, 59), (74, 121), (58, 85), (74, 133), (74, 84), (383, 74), (0, 74), (68, 77), (0, 77), (29, 58), (76, 87), (378, 581), (29, 67), (29, 76), (29, 85), (58, 121), (77, 378), (67, 383), (59, 74), (29, 36), (59, 379), (58, 133), (59, 77), (58, 383), (378, 379), (58, 84), (383, 85), (68, 76), (58, 581), (121, 85)]}]}
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 21, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rcx'}, {'instIndex': 26, 'instruction': 'cmpq\t%rcx, 0x28768(%rax)'}, {'instIndex': 27, 'instruction': 'jne\t.LBB7_16'}, {'instIndex': 28, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x48(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x4c(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB7_15'}, {'instIndex': 33, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 35, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 36, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 38, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}, {'instIndex': 40, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 41, 'instruction': 'shlq\t$14, %rcx'}, {'instIndex': 42, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 43, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t$0, 0x38(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 46, 'instruction': 'cmpl\t0x34(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'jge\t.LBB7_13'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 50, 'instruction': 'addq\t$4, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'movss\t(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 53, 'instruction': 'cvtss2si\t%xmm0, %rax'}, {'instIndex': 54, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 55, 'instruction': 'callq\tav_clip_int16'}, {'instIndex': 56, 'instruction': 'movw\t%ax, %cx'}, {'instIndex': 57, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movw\t%cx, (%rax)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %ecx'}, {'instIndex': 60, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 62, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 63, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 65, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 67, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB7_10'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$0x10750, %rdi                    # imm = 0x0x29fe'}, {'instIndex': 71, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 72, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 73, 'instruction': 'addq\t%rax, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rsi'}, {'instIndex': 75, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 76, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 77, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 78, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x4a0(%rax), %rax'}, {'instIndex': 81, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 82, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 83, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movslq\t0x4a0(%rax), %rdx'}, {'instIndex': 85, 'instruction': 'shlq\t$2, %rdx'}, {'instIndex': 86, 'instruction': 'callq\tmemmove@PLT'}, {'instIndex': 87, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 88, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 89, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB7_8'}, {'instIndex': 91, 'instruction': 'jmp\t.LBB7_25'}, {'instIndex': 92, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 93, 'instruction': 'cmpl\t$2, 0x30(%rsp)'}, {'instIndex': 94, 'instruction': 'jge\t.LBB7_20'}, {'instIndex': 102, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 103, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 104, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 105, 'instruction': 'jmp\t.LBB7_17'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O0/wmadec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O0/wmadec.s---wma_decode_frame---after
function id: 7
function flag: True
There are 142 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 21, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rcx'}, {'instIndex': 26, 'instruction': 'cmpq\t%rcx, 0x28768(%rax)'}, {'instIndex': 27, 'instruction': 'jne\t.LBB7_16'}, {'instIndex': 28, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x48(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x4c(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB7_15'}, {'instIndex': 33, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 35, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 36, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 38, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}, {'instIndex': 40, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 41, 'instruction': 'shlq\t$14, %rcx'}, {'instIndex': 42, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 43, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t$0, 0x38(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 46, 'instruction': 'cmpl\t0x34(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'jge\t.LBB7_13'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 50, 'instruction': 'addq\t$4, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'movss\t(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 53, 'instruction': 'cvtss2si\t%xmm0, %rax'}, {'instIndex': 54, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 55, 'instruction': 'callq\tav_clip_int16'}, {'instIndex': 56, 'instruction': 'movw\t%ax, %cx'}, {'instIndex': 57, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movw\t%cx, (%rax)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %ecx'}, {'instIndex': 60, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 62, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 63, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 65, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 67, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB7_10'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$0x10750, %rdi                    # imm = 0x0x29fe'}, {'instIndex': 71, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 72, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 73, 'instruction': 'addq\t%rax, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rsi'}, {'instIndex': 75, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 76, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 77, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 78, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x4a0(%rax), %rax'}, {'instIndex': 81, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 82, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 83, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movslq\t0x4a0(%rax), %rdx'}, {'instIndex': 85, 'instruction': 'shlq\t$2, %rdx'}, {'instIndex': 86, 'instruction': 'callq\tmemmove@PLT'}, {'instIndex': 87, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 88, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 89, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB7_8'}, {'instIndex': 91, 'instruction': 'jmp\t.LBB7_25'}, {'instIndex': 92, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 93, 'instruction': 'cmpl\t$2, 0x30(%rsp)'}, {'instIndex': 94, 'instruction': 'jge\t.LBB7_20'}, {'instIndex': 102, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 103, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 104, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 105, 'instruction': 'jmp\t.LBB7_17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O0/wmadec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O0/wmadec.o---after
The extraction of function: wma_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 428 nodes and 735 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 142 instructions in binary file.
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
The execution time of patched subCFG information extraction via angr: 0:00:02.882615
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "movsxd" for 0x400bdc>, <DisassemblerInsn "shl" for 0x400be1>, <DisassemblerInsn "add" for 0x400be4>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "add" for 0x400bf1>, <DisassemblerInsn "movsxd" for 0x400bf7>, <DisassemblerInsn "shl" for 0x400bfc>, <DisassemblerInsn "add" for 0x400c00>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c08>, <DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "add" for 0x400c22>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "movss" for 0x400c2b>, <DisassemblerInsn "cvtss2si" for 0x400c2f>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "call" for 0x400c36>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "mov" for 0x400c43>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "movsxd" for 0x400c4f>, <DisassemblerInsn "shl" for 0x400c52>, <DisassemblerInsn "add" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c64>, <DisassemblerInsn "jmp" for 0x400c68>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d20>, <DisassemblerInsn "mov" for 0x400d25>, <DisassemblerInsn "movsxd" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2d>, <DisassemblerInsn "call" for 0x400d31>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b85>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bbd>, <DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ceb>, <DisassemblerInsn "movsxd" for 0x400cf2>, <DisassemblerInsn "shl" for 0x400cf7>, <DisassemblerInsn "add" for 0x400cfb>, <DisassemblerInsn "movsxd" for 0x400cfe>, <DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "add" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "jmp" for 0x400d12>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b98>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "cmp" for 0x400bb0>, <DisassemblerInsn "jne" for 0x400bb7>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "add" for 0x400cc6>, <DisassemblerInsn "mov" for 0x400cc9>, <DisassemblerInsn "jmp" for 0x400ccd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "add" for 0x400c6f>, <DisassemblerInsn "movsxd" for 0x400c76>, <DisassemblerInsn "shl" for 0x400c7b>, <DisassemblerInsn "add" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c87>, <DisassemblerInsn "movsxd" for 0x400c8e>, <DisassemblerInsn "shl" for 0x400c93>, <DisassemblerInsn "add" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "movsxd" for 0x400c9f>, <DisassemblerInsn "shl" for 0x400ca6>, <DisassemblerInsn "add" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cad>, <DisassemblerInsn "movsxd" for 0x400cb2>, <DisassemblerInsn "shl" for 0x400cb9>, <DisassemblerInsn "call" for 0x400cbd>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400cd2>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<add~~rax, 0x10750>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 0xe>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<movss~~xmm0, dword ptr [rax]>', '<cvtss2si~~rax, xmm0>', '<mov~~edi, eax>', '<call~~0x402a60>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~cx, ax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~word ptr [rax], cx>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x38], eax>', '<jmp~~0x400c10>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rsi, rsp>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<call~~rax>']}, {'block_Idx': 6, 'blockInsts': ['<jmp~~0x400b89>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x48]>', '<add~~rcx, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rcx, rax>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + rax*8], rcx>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400cdf>']}, {'block_Idx': 18, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rip + 0xff4d0]>', '<cmp~~qword ptr [rax + 0x28768], rcx>', '<jne~~0x400cd7>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400bc5>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rax, dword ptr [rax + 0x4a0]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rdx, dword ptr [rax + 0x4a0]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(21, 25), (8, 9), (9, 11), (6, 8), (18, 13), (15, 20), (11, 16), (10, 14), (25, 12), (24, 16), (16, 21), (12, 17), (20, 24), (9, 12), (8, 10), (10, 13), (11, 15), (13, 18), (25, 11), (24, 15), (18, 14)]}]}
{'wma_decode_frame': [4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O0/wmadec.o---after
The extraction of function: wma_decode_frame
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 662 nodes and 1021 edges in CFGEmulated.
It has 661 nodes and 1158 edges in CDG.
It has 9467 nodes and 29197 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197257, 4197309, 4197317, 4197335, 4197392, 4197402, 4197435, 4197482, 4197570, 4197586, 4197591, 4197599, 4197606]
{4197253, 4197255, 4197257, 4197775, 4197392, 4197652, 4197402, 4197788, 4197790, 4197798, 4197168, 4197683, 4197435, 4197691, 4197309, 4197570, 4197317, 4197701, 4197586, 4197335, 4197591, 4197212, 4197599, 4197606, 4197222, 4197482, 4197233, 4197246}
[110, 85, 98, 75, 47, 29, 127, 581, 37, 86, 69, 48, 58, 77, 87, 133, 36, 68, 122, 383, 67, 121, 59, 380, 0, 379, 76, 159, 378, 74, 84, 49]
The execution time of patched slicing information extraction via angr: 0:02:34.612526
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a8a>, <DisassemblerInsn "mov" for 0x402a8e>, <DisassemblerInsn "movsx" for 0x402a93>, <DisassemblerInsn "ret" for 0x402a98>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "add" for 0x400c6f>, <DisassemblerInsn "movsxd" for 0x400c76>, <DisassemblerInsn "shl" for 0x400c7b>, <DisassemblerInsn "add" for 0x400c7f>, <DisassemblerInsn "mov" for 0x400c82>, <DisassemblerInsn "add" for 0x400c87>, <DisassemblerInsn "movsxd" for 0x400c8e>, <DisassemblerInsn "shl" for 0x400c93>, <DisassemblerInsn "add" for 0x400c97>, <DisassemblerInsn "mov" for 0x400c9a>, <DisassemblerInsn "movsxd" for 0x400c9f>, <DisassemblerInsn "shl" for 0x400ca6>, <DisassemblerInsn "add" for 0x400caa>, <DisassemblerInsn "mov" for 0x400cad>, <DisassemblerInsn "movsxd" for 0x400cb2>, <DisassemblerInsn "shl" for 0x400cb9>, <DisassemblerInsn "call" for 0x400cbd>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a64>, <DisassemblerInsn "add" for 0x402a68>, <DisassemblerInsn "and" for 0x402a6d>, <DisassemblerInsn "cmp" for 0x402a72>, <DisassemblerInsn "je" for 0x402a75>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400cd2>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "cmp" for 0x400b6a>, <DisassemblerInsn "jge" for 0x400b6f>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a4e>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "pop" for 0x402a5c>, <DisassemblerInsn "pop" for 0x402a5d>, <DisassemblerInsn "ret" for 0x402a5f>]'}, {'block_Idx': 581, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "cmp" for 0x400d3f>, <DisassemblerInsn "jge" for 0x400d43>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400b7e>, <DisassemblerInsn "je" for 0x400b83>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "add" for 0x400daa>, <DisassemblerInsn "ret" for 0x400dae>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "push" for 0x400df0>, <DisassemblerInsn "push" for 0x400df2>, <DisassemblerInsn "sub" for 0x400df3>, <DisassemblerInsn "mov" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400e02>, <DisassemblerInsn "cmp" for 0x400e0a>, <DisassemblerInsn "je" for 0x400e0e>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b85>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b89>, <DisassemblerInsn "mov" for 0x400b8e>, <DisassemblerInsn "mov" for 0x400b94>, <DisassemblerInsn "mov" for 0x400b98>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba0>, <DisassemblerInsn "mov" for 0x400ba4>, <DisassemblerInsn "mov" for 0x400ba9>, <DisassemblerInsn "cmp" for 0x400bb0>, <DisassemblerInsn "jne" for 0x400bb7>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d20>, <DisassemblerInsn "mov" for 0x400d25>, <DisassemblerInsn "movsxd" for 0x400d28>, <DisassemblerInsn "mov" for 0x400d2d>, <DisassemblerInsn "call" for 0x400d31>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "jmp" for 0x400b79>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd7>, <DisassemblerInsn "cmp" for 0x400cdf>, <DisassemblerInsn "jge" for 0x400ce4>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "movsx" for 0x402a93>, <DisassemblerInsn "ret" for 0x402a98>]'}, {'block_Idx': 383, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bbd>, <DisassemblerInsn "mov" for 0x400bc5>, <DisassemblerInsn "mov" for 0x400bc9>, <DisassemblerInsn "cmp" for 0x400bce>, <DisassemblerInsn "jge" for 0x400bd1>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c3e>, <DisassemblerInsn "mov" for 0x400c43>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "mov" for 0x400c4a>, <DisassemblerInsn "movsxd" for 0x400c4f>, <DisassemblerInsn "shl" for 0x400c52>, <DisassemblerInsn "add" for 0x400c55>, <DisassemblerInsn "mov" for 0x400c58>, <DisassemblerInsn "mov" for 0x400c5d>, <DisassemblerInsn "add" for 0x400c61>, <DisassemblerInsn "mov" for 0x400c64>, <DisassemblerInsn "jmp" for 0x400c68>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b5c>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 380, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400d9c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400b30>, <DisassemblerInsn "mov" for 0x400b34>, <DisassemblerInsn "mov" for 0x400b39>, <DisassemblerInsn "mov" for 0x400b3e>, <DisassemblerInsn "mov" for 0x400b43>, <DisassemblerInsn "mov" for 0x400b4d>, <DisassemblerInsn "mov" for 0x400b52>, <DisassemblerInsn "mov" for 0x400b5c>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 379, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d45>, <DisassemblerInsn "add" for 0x400d4a>, <DisassemblerInsn "movsxd" for 0x400d51>, <DisassemblerInsn "shl" for 0x400d56>, <DisassemblerInsn "add" for 0x400d5a>, <DisassemblerInsn "mov" for 0x400d5d>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "movsxd" for 0x400d69>, <DisassemblerInsn "shl" for 0x400d6e>, <DisassemblerInsn "add" for 0x400d72>, <DisassemblerInsn "movsxd" for 0x400d75>, <DisassemblerInsn "shl" for 0x400d7a>, <DisassemblerInsn "add" for 0x400d7e>, <DisassemblerInsn "movsxd" for 0x400d81>, <DisassemblerInsn "shl" for 0x400d86>, <DisassemblerInsn "call" for 0x400d8a>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce6>, <DisassemblerInsn "add" for 0x400ceb>, <DisassemblerInsn "movsxd" for 0x400cf2>, <DisassemblerInsn "shl" for 0x400cf7>, <DisassemblerInsn "add" for 0x400cfb>, <DisassemblerInsn "movsxd" for 0x400cfe>, <DisassemblerInsn "mov" for 0x400d03>, <DisassemblerInsn "mov" for 0x400d07>, <DisassemblerInsn "add" for 0x400d0b>, <DisassemblerInsn "mov" for 0x400d0e>, <DisassemblerInsn "jmp" for 0x400d12>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a43>, <DisassemblerInsn "mov" for 0x402a4e>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "pop" for 0x402a5c>, <DisassemblerInsn "pop" for 0x402a5d>, <DisassemblerInsn "ret" for 0x402a5f>]'}, {'block_Idx': 378, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "cmp" for 0x400d3f>, <DisassemblerInsn "jge" for 0x400d43>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "movsxd" for 0x400bdc>, <DisassemblerInsn "shl" for 0x400be1>, <DisassemblerInsn "add" for 0x400be4>, <DisassemblerInsn "mov" for 0x400be7>, <DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "add" for 0x400bf1>, <DisassemblerInsn "movsxd" for 0x400bf7>, <DisassemblerInsn "shl" for 0x400bfc>, <DisassemblerInsn "add" for 0x400c00>, <DisassemblerInsn "mov" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c08>, <DisassemblerInsn "mov" for 0x400c10>, <DisassemblerInsn "cmp" for 0x400c14>, <DisassemblerInsn "jge" for 0x400c18>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "mov" for 0x400c1f>, <DisassemblerInsn "add" for 0x400c22>, <DisassemblerInsn "mov" for 0x400c26>, <DisassemblerInsn "movss" for 0x400c2b>, <DisassemblerInsn "cvtss2si" for 0x400c2f>, <DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "call" for 0x400c36>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400b87>]'}], 'cfg_block_detailed_info': [{'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp - 8]>', '<mov~~word ptr [rsp - 2], ax>', '<movsx~~eax, word ptr [rsp - 2]>', '<ret~~>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rax, dword ptr [rax + 0x4a0]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<movsxd~~rdx, dword ptr [rax + 0x4a0]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~dword ptr [rsp - 8], edi>', '<mov~~eax, dword ptr [rsp - 8]>', '<add~~eax, 0x8000>', '<and~~eax, 0xffff0000>', '<cmp~~eax, 0>', '<je~~0x402a8a>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], eax>', '<cmp~~dword ptr [rsp + 0x3c], 0>', '<jge~~0x400b7e>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x178>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 581, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rsp + 0x2c]>', '<jge~~0x400d9c>']}, {'block_Idx': 37, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x3c], 0>', '<je~~0x400b87>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 69, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x178>', '<mov~~qword ptr [rsp + 0x128], rdi>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax + 0x60], 0>', '<je~~0x401076>']}, {'block_Idx': 48, 'blockInsts': ['<jmp~~0x400b89>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x34], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rcx, qword ptr [rip + 0xff4d0]>', '<cmp~~qword ptr [rax + 0x28768], rcx>', '<jne~~0x400cd7>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rsi, rsp>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<call~~rax>']}, {'block_Idx': 87, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~dword ptr [rsp + 0x54], 0xffffffff>', '<jmp~~0x400da6>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<cmp~~dword ptr [rsp + 0x30], 2>', '<jge~~0x400d14>']}, {'block_Idx': 122, 'blockInsts': ['<movsx~~eax, word ptr [rsp - 2]>', '<ret~~>']}, {'block_Idx': 383, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~eax, dword ptr [rcx + 0x4c]>', '<jge~~0x400cd2>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~cx, ax>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~word ptr [rax], cx>', '<mov~~ecx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x38], eax>', '<jmp~~0x400c10>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400df0>']}, {'block_Idx': 380, 'blockInsts': ['<jmp~~0x400d9e>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax + 0x4c0], 0>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax + 0x4c4], 0>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x400df0>']}, {'block_Idx': 379, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<add~~rdi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<add~~rsi, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<movsxd~~rax, dword ptr [rsp + 0x34]>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<movsxd~~rdx, dword ptr [rsp + 0x34]>', '<shl~~rdx, 2>', '<call~~0x500088>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x48]>', '<add~~rcx, 0x10750>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<shl~~rax, 0xe>', '<add~~rcx, rax>', '<movsxd~~rax, dword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + rax*8], rcx>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x30], eax>', '<jmp~~0x400cdf>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~dword ptr [rsp + 0x134], 0>', '<mov~~eax, dword ptr [rsp + 0x134]>', '<add~~rsp, 0x178>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 378, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], 0>', '<mov~~eax, dword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rsp + 0x2c]>', '<jge~~0x400d9c>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 1>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<add~~rax, 0x10750>', '<movsxd~~rcx, dword ptr [rsp + 0x30]>', '<shl~~rcx, 0xe>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~eax, dword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rsp + 0x34]>', '<jge~~0x400c6a>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<movss~~xmm0, dword ptr [rax]>', '<cvtss2si~~rax, xmm0>', '<mov~~edi, eax>', '<call~~0x402a60>']}, {'block_Idx': 49, 'blockInsts': ['<jmp~~0x400b5c>']}], 'cfg_edge_info': [(87, 77), (159, 29), (58, 68), (67, 74), (0, 69), (383, 75), (49, 59), (121, 133), (74, 85), (581, 380), (37, 48), (0, 29), (87, 76), (59, 69), (58, 67), (29, 37), (84, 98), (378, 380), (133, 85), (122, 121), (59, 29), (127, 29), (74, 84), (383, 74), (581, 379), (68, 77), (75, 86), (68, 76), (76, 87), (67, 75), (77, 378), (37, 49), (133, 84), (29, 36), (378, 379), (48, 58), (380, 86), (84, 121), (36, 47), (110, 121)], 'cdg_edge_info': [(37, 58), (58, 68), (67, 74), (58, 77), (379, 581), (67, 86), (29, 47), (383, 75), (581, 380), (37, 48), (68, 87), (87, 76), (58, 67), (29, 37), (58, 378), (74, 121), (378, 380), (67, 85), (74, 133), (37, 29), (74, 84), (383, 74), (581, 379), (85, 383), (581, 86), (383, 86), (37, 59), (133, 121), (67, 75), (37, 49), (87, 87), (133, 133), (133, 84), (29, 36), (378, 379), (378, 86), (383, 85), (68, 76)], 'ddg_edge_info': [(59, 58), (29, 87), (29, 84), (67, 74), (58, 77), (59, 76), (58, 74), (58, 379), (59, 85), (36, 86), (383, 84), (121, 133), (29, 59), (121, 84), (29, 68), (68, 87), (29, 74), (29, 77), (29, 86), (29, 37), (77, 379), (77, 86), (67, 85), (59, 383), (58, 76), (0, 59), (74, 121), (58, 85), (74, 133), (74, 84), (383, 74), (0, 74), (68, 77), (0, 77), (29, 58), (76, 87), (378, 581), (29, 67), (29, 76), (29, 85), (58, 121), (77, 378), (67, 383), (59, 74), (29, 36), (59, 379), (58, 133), (59, 77), (58, 383), (378, 379), (58, 84), (383, 85), (68, 76), (58, 581), (121, 85)]}]}
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 18, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x4a0(%rax), %eax'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 21, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 22, 'instruction': 'movl\t0x4c(%rax), %eax'}, {'instIndex': 23, 'instruction': 'movl\t%eax, 0x2c(%rsp)'}, {'instIndex': 24, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\tff_float_to_int0x10_interleave_c@GOTPCREL(%rip), %rcx'}, {'instIndex': 26, 'instruction': 'cmpq\t%rcx, 0x28768(%rax)'}, {'instIndex': 27, 'instruction': 'jne\t.LBB7_16'}, {'instIndex': 28, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 29, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 30, 'instruction': 'movq\t0x48(%rsp), %rcx'}, {'instIndex': 31, 'instruction': 'cmpl\t0x4c(%rcx), %eax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB7_15'}, {'instIndex': 33, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 35, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 36, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 37, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 38, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}, {'instIndex': 40, 'instruction': 'movslq\t0x30(%rsp), %rcx'}, {'instIndex': 41, 'instruction': 'shlq\t$14, %rcx'}, {'instIndex': 42, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 43, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 44, 'instruction': 'movl\t$0, 0x38(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 46, 'instruction': 'cmpl\t0x34(%rsp), %eax'}, {'instIndex': 47, 'instruction': 'jge\t.LBB7_13'}, {'instIndex': 48, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 50, 'instruction': 'addq\t$4, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'movss\t(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 53, 'instruction': 'cvtss2si\t%xmm0, %rax'}, {'instIndex': 54, 'instruction': 'movl\t%eax, %edi'}, {'instIndex': 55, 'instruction': 'callq\tav_clip_int16'}, {'instIndex': 56, 'instruction': 'movw\t%ax, %cx'}, {'instIndex': 57, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 58, 'instruction': 'movw\t%cx, (%rax)'}, {'instIndex': 59, 'instruction': 'movl\t0x2c(%rsp), %ecx'}, {'instIndex': 60, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 62, 'instruction': 'shlq\t$1, %rcx'}, {'instIndex': 63, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 65, 'instruction': 'movl\t0x38(%rsp), %eax'}, {'instIndex': 66, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 67, 'instruction': 'movl\t%eax, 0x38(%rsp)'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB7_10'}, {'instIndex': 69, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 70, 'instruction': 'addq\t$0x10750, %rdi                    # imm = 0x0x29fe'}, {'instIndex': 71, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 72, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 73, 'instruction': 'addq\t%rax, %rdi'}, {'instIndex': 74, 'instruction': 'movq\t0x48(%rsp), %rsi'}, {'instIndex': 75, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 76, 'instruction': 'movslq\t0x30(%rsp), %rax'}, {'instIndex': 77, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 78, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 79, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 80, 'instruction': 'movslq\t0x4a0(%rax), %rax'}, {'instIndex': 81, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 82, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 83, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 84, 'instruction': 'movslq\t0x4a0(%rax), %rdx'}, {'instIndex': 85, 'instruction': 'shlq\t$2, %rdx'}, {'instIndex': 86, 'instruction': 'callq\tmemmove@PLT'}, {'instIndex': 87, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 88, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 89, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 90, 'instruction': 'jmp\t.LBB7_8'}, {'instIndex': 91, 'instruction': 'jmp\t.LBB7_25'}, {'instIndex': 92, 'instruction': 'movl\t$0, 0x30(%rsp)'}, {'instIndex': 93, 'instruction': 'cmpl\t$2, 0x30(%rsp)'}, {'instIndex': 94, 'instruction': 'jge\t.LBB7_20'}, {'instIndex': 102, 'instruction': 'movl\t0x30(%rsp), %eax'}, {'instIndex': 103, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 104, 'instruction': 'movl\t%eax, 0x30(%rsp)'}, {'instIndex': 105, 'instruction': 'jmp\t.LBB7_17'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O1/wmadec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O1/wmadec.s---wma_decode_frame---after
function id: 3
function flag: True
There are 2731 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2540, 'instruction': 'andb\t$1, %al'}, {'instIndex': 2541, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 2542, 'instruction': 'movl\t%eax, 0xa04(%rsp)                # 4-byte Spill'}, {'instIndex': 2543, 'instruction': 'movl\t0xa04(%rsp), %ecx                # 4-byte Reload'}, {'instIndex': 2544, 'instruction': 'movl\t%ecx, 0x158(%rsp)                 # 4-byte Spill'}, {'instIndex': 2545, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 2546, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 2547, 'instruction': 'movl\t%eax, 0x15c(%rsp)                 # 4-byte Spill'}, {'instIndex': 2548, 'instruction': 'jl\t.LBB3_183'}, {'instIndex': 2549, 'instruction': 'movl\t0x158(%rsp), %eax                 # 4-byte Reload'}, {'instIndex': 2550, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 2551, 'instruction': 'je\t.LBB3_1'}, {'instIndex': 2552, 'instruction': 'movq\t0xa30(%rsp), %rax                # 8-byte Reload'}, {'instIndex': 2553, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 2554, 'instruction': 'addq\t$0x4a0, %rcx                     # imm = 0x4A0'}, {'instIndex': 2556, 'instruction': 'movl\t0x4a0(%rax), %ecx'}, {'instIndex': 2557, 'instruction': 'movl\t%ecx, 0x13c(%rsp)                 # 4-byte Spill'}, {'instIndex': 2558, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 2559, 'instruction': 'addq\t$0x4c, %rcx'}, {'instIndex': 2573, 'instruction': 'movl\t0x14c(%rsp), %eax                 # 4-byte Reload'}, {'instIndex': 2574, 'instruction': 'movl\t0x13c(%rsp), %ecx                 # 4-byte Reload'}, {'instIndex': 2575, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 2576, 'instruction': 'setg\t%cl'}, {'instIndex': 2577, 'instruction': 'movb\t%cl, 0x11f(%rsp)                  # 1-byte Spill'}, {'instIndex': 2578, 'instruction': 'cltq'}, {'instIndex': 2579, 'instruction': 'movq\t%rax, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 2583, 'instruction': 'movq\t0xa30(%rsp), %rcx                # 8-byte Reload'}, {'instIndex': 2584, 'instruction': 'movq\t0x128(%rsp), %rdx                 # 8-byte Reload'}, {'instIndex': 2594, 'instruction': 'movq\t0xa28(%rsp), %rcx                # 8-byte Reload'}, {'instIndex': 2595, 'instruction': 'movq\t0x108(%rsp), %rax                 # 8-byte Reload'}, {'instIndex': 2596, 'instruction': 'shlq\t$1, %rax'}, {'instIndex': 2597, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 2598, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 2607, 'instruction': 'movq\t%r8, %rdx'}, {'instIndex': 2608, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 2609, 'instruction': 'movq\t%rdx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2610, 'instruction': 'movss\t(%r8), %xmm0                    # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 2612, 'instruction': 'movl\t$0xffff8000, %r9d               # imm = 0xFFFF0x1f40'}, {'instIndex': 2614, 'instruction': 'cmovgl\t%r8d, %r9d'}, {'instIndex': 2615, 'instruction': 'movl\t%r9d, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 2618, 'instruction': 'cmovll\t%r9d, %r8d'}, {'instIndex': 2623, 'instruction': 'addq\t%rdi, %rcx'}, {'instIndex': 2624, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2625, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 2626, 'instruction': 'movl\t%eax, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 2627, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 2628, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2629, 'instruction': 'movq\t%rcx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2630, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 2631, 'instruction': 'jne\t.LBB3_175'}, {'instIndex': 2634, 'instruction': 'movq\t0x130(%rsp), %rcx                 # 8-byte Reload'}, {'instIndex': 2635, 'instruction': 'movq\t0x110(%rsp), %rdi                 # 8-byte Reload'}, {'instIndex': 2636, 'instruction': 'movslq\t(%rcx), %rdx'}, {'instIndex': 2637, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 2638, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 2640, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 2641, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 2642, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 2655, 'instruction': 'leaq\t0xc60(%rsp), %rax'}, {'instIndex': 2656, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 2657, 'instruction': 'movq\t%rax, 0xc0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2658, 'instruction': 'movq\t0xc0(%rsp), %rcx                 # 8-byte Reload'}, {'instIndex': 2659, 'instruction': 'movq\t0xa30(%rsp), %rax                # 8-byte Reload'}, {'instIndex': 2660, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O1/wmadec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O1/wmadec.o---after
The extraction of function: wma_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 295 nodes and 539 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 2718 instructions in binary file.
[4211548, 4211643, 4211669, 4211716, 4211773, 4211778, 4211833, 4212013, 4212081, 4212130, 4212135, 4212153]
The execution time of patched subCFG information extraction via angr: 0:00:08.219149
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4045a7>, <DisassemblerInsn "xor" for 0x4045af>, <DisassemblerInsn "mov" for 0x4045b1>, <DisassemblerInsn "mov" for 0x4045b9>, <DisassemblerInsn "mov" for 0x4045c1>, <DisassemblerInsn "add" for 0x4045c9>, <DisassemblerInsn "mov" for 0x4045cf>, <DisassemblerInsn "mov" for 0x4045d7>, <DisassemblerInsn "shl" for 0x4045da>, <DisassemblerInsn "mov" for 0x4045de>, <DisassemblerInsn "add" for 0x4045e6>, <DisassemblerInsn "mov" for 0x4045e9>, <DisassemblerInsn "mov" for 0x4045f1>, <DisassemblerInsn "mov" for 0x4045f9>, <DisassemblerInsn "add" for 0x4045fc>, <DisassemblerInsn "mov" for 0x404600>, <DisassemblerInsn "cmp" for 0x404608>, <DisassemblerInsn "mov" for 0x40460c>, <DisassemblerInsn "je" for 0x404614>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40452d>, <DisassemblerInsn "mov" for 0x404535>, <DisassemblerInsn "mov" for 0x40453d>, <DisassemblerInsn "mov" for 0x404545>, <DisassemblerInsn "movsxd" for 0x40454d>, <DisassemblerInsn "add" for 0x404550>, <DisassemblerInsn "shl" for 0x404557>, <DisassemblerInsn "add" for 0x40455b>, <DisassemblerInsn "mov" for 0x40455e>, <DisassemblerInsn "shl" for 0x404561>, <DisassemblerInsn "add" for 0x404565>, <DisassemblerInsn "shl" for 0x404568>, <DisassemblerInsn "call" for 0x40456c>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4045a2>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40434c>, <DisassemblerInsn "cmp" for 0x404353>, <DisassemblerInsn "je" for 0x404356>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40443d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043bb>, <DisassemblerInsn "xor" for 0x4043c3>, <DisassemblerInsn "cmp" for 0x4043c5>, <DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "jle" for 0x4043cf>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404479>, <DisassemblerInsn "mov" for 0x404480>, <DisassemblerInsn "mov" for 0x404488>, <DisassemblerInsn "mov" for 0x404490>, <DisassemblerInsn "mov" for 0x404497>, <DisassemblerInsn "mov" for 0x40449f>, <DisassemblerInsn "add" for 0x4044a2>, <DisassemblerInsn "mov" for 0x4044a6>, <DisassemblerInsn "movss" for 0x4044ae>, <DisassemblerInsn "cvtss2si" for 0x4044b3>, <DisassemblerInsn "mov" for 0x4044b8>, <DisassemblerInsn "cmp" for 0x4044be>, <DisassemblerInsn "cmovg" for 0x4044c5>, <DisassemblerInsn "mov" for 0x4044c9>, <DisassemblerInsn "mov" for 0x4044d1>, <DisassemblerInsn "cmp" for 0x4044d7>, <DisassemblerInsn "cmovl" for 0x4044de>, <DisassemblerInsn "mov" for 0x4044e2>, <DisassemblerInsn "mov" for 0x4044ea>, <DisassemblerInsn "shl" for 0x4044ee>, <DisassemblerInsn "mov" for 0x4044f1>, <DisassemblerInsn "add" for 0x4044f9>, <DisassemblerInsn "mov" for 0x4044fc>, <DisassemblerInsn "add" for 0x404504>, <DisassemblerInsn "mov" for 0x404507>, <DisassemblerInsn "cmp" for 0x40450e>, <DisassemblerInsn "mov" for 0x404510>, <DisassemblerInsn "mov" for 0x404518>, <DisassemblerInsn "mov" for 0x404520>, <DisassemblerInsn "jne" for 0x404527>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404616>, <DisassemblerInsn "mov" for 0x40461d>, <DisassemblerInsn "mov" for 0x404625>, <DisassemblerInsn "mov" for 0x40462d>, <DisassemblerInsn "lea" for 0x404634>, <DisassemblerInsn "movsxd" for 0x40463c>, <DisassemblerInsn "mov" for 0x40463f>, <DisassemblerInsn "call" for 0x404647>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404733>, <DisassemblerInsn "add" for 0x40473a>, <DisassemblerInsn "pop" for 0x404741>, <DisassemblerInsn "pop" for 0x404742>, <DisassemblerInsn "ret" for 0x404744>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404404>, <DisassemblerInsn "mov" for 0x40440b>, <DisassemblerInsn "mov" for 0x404413>, <DisassemblerInsn "mov" for 0x40441b>, <DisassemblerInsn "add" for 0x404423>, <DisassemblerInsn "shl" for 0x40442a>, <DisassemblerInsn "add" for 0x40442e>, <DisassemblerInsn "mov" for 0x404431>, <DisassemblerInsn "test" for 0x404439>, <DisassemblerInsn "jne" for 0x40443b>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043d5>, <DisassemblerInsn "mov" for 0x4043dc>, <DisassemblerInsn "cmp" for 0x4043e3>, <DisassemblerInsn "setg" for 0x4043e6>, <DisassemblerInsn "mov" for 0x4043e9>, <DisassemblerInsn "cdqe" for 0x4043f0>, <DisassemblerInsn "mov" for 0x4043f2>, <DisassemblerInsn "xor" for 0x4043fa>, <DisassemblerInsn "mov" for 0x4043fc>, <DisassemblerInsn "mov" for 0x404404>, <DisassemblerInsn "mov" for 0x40440b>, <DisassemblerInsn "mov" for 0x404413>, <DisassemblerInsn "mov" for 0x40441b>, <DisassemblerInsn "add" for 0x404423>, <DisassemblerInsn "shl" for 0x40442a>, <DisassemblerInsn "add" for 0x40442e>, <DisassemblerInsn "mov" for 0x404431>, <DisassemblerInsn "test" for 0x404439>, <DisassemblerInsn "jne" for 0x40443b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40435c>, <DisassemblerInsn "mov" for 0x404364>, <DisassemblerInsn "add" for 0x404367>, <DisassemblerInsn "mov" for 0x40436e>, <DisassemblerInsn "mov" for 0x404376>, <DisassemblerInsn "mov" for 0x40437c>, <DisassemblerInsn "mov" for 0x404383>, <DisassemblerInsn "add" for 0x404386>, <DisassemblerInsn "mov" for 0x40438a>, <DisassemblerInsn "mov" for 0x404392>, <DisassemblerInsn "mov" for 0x404395>, <DisassemblerInsn "mov" for 0x40439c>, <DisassemblerInsn "mov" for 0x4043a3>, <DisassemblerInsn "mov" for 0x4043ab>, <DisassemblerInsn "cmp" for 0x4043b2>, <DisassemblerInsn "jne" for 0x4043b5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4045b9>, <DisassemblerInsn "mov" for 0x4045c1>, <DisassemblerInsn "add" for 0x4045c9>, <DisassemblerInsn "mov" for 0x4045cf>, <DisassemblerInsn "mov" for 0x4045d7>, <DisassemblerInsn "shl" for 0x4045da>, <DisassemblerInsn "mov" for 0x4045de>, <DisassemblerInsn "add" for 0x4045e6>, <DisassemblerInsn "mov" for 0x4045e9>, <DisassemblerInsn "mov" for 0x4045f1>, <DisassemblerInsn "mov" for 0x4045f9>, <DisassemblerInsn "add" for 0x4045fc>, <DisassemblerInsn "mov" for 0x404600>, <DisassemblerInsn "cmp" for 0x404608>, <DisassemblerInsn "mov" for 0x40460c>, <DisassemblerInsn "je" for 0x404614>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404571>, <DisassemblerInsn "mov" for 0x404579>, <DisassemblerInsn "add" for 0x404581>, <DisassemblerInsn "movsxd" for 0x404585>, <DisassemblerInsn "xor" for 0x404588>, <DisassemblerInsn "cmp" for 0x40458a>, <DisassemblerInsn "mov" for 0x40458d>, <DisassemblerInsn "mov" for 0x404595>, <DisassemblerInsn "jl" for 0x40459c>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404442>, <DisassemblerInsn "mov" for 0x40444a>, <DisassemblerInsn "mov" for 0x404452>, <DisassemblerInsn "shl" for 0x40445a>, <DisassemblerInsn "add" for 0x40445d>, <DisassemblerInsn "xor" for 0x404460>, <DisassemblerInsn "mov" for 0x404462>, <DisassemblerInsn "mov" for 0x40446a>, <DisassemblerInsn "mov" for 0x404472>, <DisassemblerInsn "mov" for 0x404479>, <DisassemblerInsn "mov" for 0x404480>, <DisassemblerInsn "mov" for 0x404488>, <DisassemblerInsn "mov" for 0x404490>, <DisassemblerInsn "mov" for 0x404497>, <DisassemblerInsn "mov" for 0x40449f>, <DisassemblerInsn "add" for 0x4044a2>, <DisassemblerInsn "mov" for 0x4044a6>, <DisassemblerInsn "movss" for 0x4044ae>, <DisassemblerInsn "cvtss2si" for 0x4044b3>, <DisassemblerInsn "mov" for 0x4044b8>, <DisassemblerInsn "cmp" for 0x4044be>, <DisassemblerInsn "cmovg" for 0x4044c5>, <DisassemblerInsn "mov" for 0x4044c9>, <DisassemblerInsn "mov" for 0x4044d1>, <DisassemblerInsn "cmp" for 0x4044d7>, <DisassemblerInsn "cmovl" for 0x4044de>, <DisassemblerInsn "mov" for 0x4044e2>, <DisassemblerInsn "mov" for 0x4044ea>, <DisassemblerInsn "shl" for 0x4044ee>, <DisassemblerInsn "mov" for 0x4044f1>, <DisassemblerInsn "add" for 0x4044f9>, <DisassemblerInsn "mov" for 0x4044fc>, <DisassemblerInsn "add" for 0x404504>, <DisassemblerInsn "mov" for 0x404507>, <DisassemblerInsn "cmp" for 0x40450e>, <DisassemblerInsn "mov" for 0x404510>, <DisassemblerInsn "mov" for 0x404518>, <DisassemblerInsn "mov" for 0x404520>, <DisassemblerInsn "jne" for 0x404527>]'}], 'cfg_block_detailed_info': [{'block_Idx': 41, 'blockInsts': ['<lea~~rax, [rsp + 0xc60]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x10750>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rdx, rcx>', '<shl~~rdx, 0xe>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~qword ptr [rsp + rcx*8 + 0xc60], rax>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<je~~0x4045b9>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<movsxd~~rdx, dword ptr [rcx]>', '<add~~rsi, 0x10750>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, rdx>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<shl~~rdx, 2>', '<call~~0x5000b8>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x404733>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x158]>', '<cmp~~eax, 0>', '<je~~0x4011fc>']}, {'block_Idx': 54, 'blockInsts': ['<jmp~~0x40452d>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<jle~~0x404733>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, r8>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<movss~~xmm0, dword ptr [r8]>', '<cvtss2si~~r8, xmm0>', '<mov~~r9d, 0xffff8000>', '<cmp~~r8d, 0xffff8000>', '<cmovg~~r9d, r8d>', '<mov~~dword ptr [rsp + 0xd0], r9d>', '<mov~~r8d, 0x7fff>', '<cmp~~r9d, 0x7fff>', '<cmovl~~r8d, r9d>', '<mov~~dword ptr [rsp + 0xd4], r8d>', '<mov~~word ptr [rcx], r8w>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jne~~0x404479>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0xa28]>', '<mov~~edx, dword ptr [rsp + 0x13c]>', '<lea~~rsi, [rsp + 0xc60]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<call~~rax>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x15c]>', '<add~~rsp, 0xce8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x404442>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<cmp~~ecx, 0>', '<setg~~cl>', '<mov~~byte ptr [rsp + 0x11f], cl>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x120], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x404442>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, rax>', '<add~~rcx, 0x4a0>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~ecx, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x4c>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~ecx, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rip + 0xfbcfe]>', '<cmp~~rax, rcx>', '<jne~~0x4045a7>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x10750>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rdx, rcx>', '<shl~~rdx, 0xe>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~qword ptr [rsp + rcx*8 + 0xc60], rax>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<je~~0x4045b9>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~rax, qword ptr [rsp + 0x140]>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rax]>', '<xor~~eax, eax>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<jl~~0x404404>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0xa28]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<shl~~rax, 1>', '<add~~rcx, rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, r8>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<movss~~xmm0, dword ptr [r8]>', '<cvtss2si~~r8, xmm0>', '<mov~~r9d, 0xffff8000>', '<cmp~~r8d, 0xffff8000>', '<cmovg~~r9d, r8d>', '<mov~~dword ptr [rsp + 0xd0], r9d>', '<mov~~r8d, 0x7fff>', '<cmp~~r9d, 0x7fff>', '<cmovl~~r8d, r9d>', '<mov~~dword ptr [rsp + 0xd4], r8d>', '<mov~~word ptr [rcx], r8w>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jne~~0x404479>']}], 'cfg_edge_info': [(41, 49), (61, 70), (70, 79), (40, 47), (48, 48), (36, 40), (28, 36), (54, 61), (62, 62), (78, 55), (47, 55), (55, 62), (41, 48), (70, 78), (62, 61), (78, 54), (47, 54), (55, 61), (40, 27), (48, 49), (36, 41), (79, 27)]}]}
{'wma_decode_frame': [4211548, 4211643, 4211669, 4211716, 4211773, 4211778, 4211833, 4212013, 4212081, 4212130, 4212135, 4212153]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O1/wmadec.o---after
The extraction of function: wma_decode_frame
[4211548, 4211643, 4211669, 4211716, 4211773, 4211778, 4211833, 4212013, 4212081, 4212130, 4212135, 4212153]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 250 nodes and 404 edges in CFGEmulated.
It has 248 nodes and 461 edges in CDG.
It has 11545 nodes and 24554 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4211548, 4211643, 4211669, 4211716, 4211773, 4211778, 4211833, 4212013, 4212081, 4212130, 4212135, 4212153]
{4211716, 4201991, 4206600, 4203531, 4199437, 4198925, 4207118, 4208655, 4204052, 4212246, 4210202, 4200479, 4210734, 4204592, 4201009, 4208186, 4200506, 4211773, 4211778, 4206147, 4204102, 4210246, 4212297, 4208713, 4209227, 4203084, 4198992, 4202069, 4204630, 4210263, 4212313, 4205661, 4207711, 4199527, 4201578, 4205674, 4202096, 4200561, 4205687, 4211833, 4204668, 4198528, 4200578, 4203656, 4212360, 4205195, 4200591, 4201107, 4204692, 4202134, 4207254, 4199576, 4205210, 4205723, 4204700, 4206237, 4210341, 4202151, 4199593, 4203177, 4208304, 4203701, 4207291, 4205244, 4201149, 4209342, 4211395, 4199624, 4199118, 4200143, 4207824, 4210895, 4200658, 4203731, 4205274, 4208346, 4204768, 4201698, 4210402, 4203748, 4201187, 4205798, 4209384, 4211435, 4200684, 4199664, 4198128, 4204279, 4200185, 4201213, 4199167, 4205314, 4212483, 4203783, 4210954, 4199184, 4201747, 4207894, 4200216, 4210460, 4204318, 4201254, 4205350, 4199720, 4211497, 4212522, 4206890, 4203820, 4212013, 4209965, 4201777, 4207922, 4212531, 4200754, 4204347, 4203837, 4210496, 4207424, 4201794, 4205893, 4199750, 4211532, 4205388, 4210516, 4206420, 4199767, 4200792, 4210009, 4211548, 4201820, 4197728, 4202347, 4199789, 4212081, 4200818, 4205938, 4206453, 4207990, 4204919, 4209017, 4203386, 4201337, 4211068, 4206974, 4205443, 4209539, 4201351, 4210057, 4202890, 4204429, 4199314, 4205972, 4208022, 4205464, 4200344, 4204959, 4206497, 4212130, 4200356, 4212135, 4199852, 4204460, 4206008, 4212153, 4209594, 4211643, 4200895, 4199360, 4206530, 4199877, 4205511, 4204489, 4208075, 4201932, 4211150, 4199377, 4211669, 4210646, 4201431, 4210134, 4207583, 4206560, 4208607, 4210147, 4202980, 4209637, 4199405, 4210160, 4201969, 4198908, 4210173, 4199934}
[169, 174, 191, 96, 200, 125, 85, 88, 55, 13, 51, 119, 67, 37, 94, 38, 139, 223, 112, 203, 34, 99, 103, 27, 102, 9, 156, 115, 159, 189, 28, 95, 89, 45, 230, 129, 61, 173, 106, 232, 144, 71, 24, 141, 130, 134, 150, 166, 84, 59, 204, 153, 22, 207, 142, 40, 154, 235, 81, 97, 92, 131, 124, 201, 80, 123, 17, 90, 60, 194, 206, 83, 132, 198, 196, 77, 58, 14, 12, 2, 224, 29, 218, 163, 152, 32, 185, 137, 46, 63, 36, 18, 180, 65, 7, 33, 140, 165, 171, 183, 52, 208, 10, 175, 3, 121, 15, 74, 214, 195, 146, 91, 0, 25, 176, 202, 133, 126, 6, 158, 79, 161, 53, 110, 164, 111, 54, 57, 197, 78, 113, 1, 86, 21, 199, 147, 122, 213, 190, 114, 70, 93, 73, 162, 184, 193, 177, 35, 219, 75, 43, 149, 117, 178, 5, 160, 220, 143, 8, 98, 170, 210, 179, 48, 138, 192, 50, 44, 188, 76, 68, 19, 82, 31, 120, 47, 16, 64, 72, 128, 87, 62, 136, 148, 181, 116, 109, 101, 26, 118, 100, 211, 172, 145, 66, 39, 127, 187, 155, 56, 182, 104, 216, 209, 42, 4]
The execution time of patched slicing information extraction via angr: 0:01:46.448936
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d2d>, <DisassemblerInsn "mov" for 0x403d34>, <DisassemblerInsn "mov" for 0x403d3c>, <DisassemblerInsn "mov" for 0x403d44>, <DisassemblerInsn "mov" for 0x403d4c>, <DisassemblerInsn "mov" for 0x403d4e>, <DisassemblerInsn "cmp" for 0x403d55>, <DisassemblerInsn "jle" for 0x403d57>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40299f>, <DisassemblerInsn "movss" for 0x4029a8>, <DisassemblerInsn "movss" for 0x4029b1>, <DisassemblerInsn "movss" for 0x4029ba>, <DisassemblerInsn "subss" for 0x4029c2>, <DisassemblerInsn "mulss" for 0x4029c6>, <DisassemblerInsn "mulss" for 0x4029ca>, <DisassemblerInsn "movss" for 0x4029ce>, <DisassemblerInsn "addss" for 0x4029d6>, <DisassemblerInsn "mulss" for 0x4029da>, <DisassemblerInsn "mulss" for 0x4029de>, <DisassemblerInsn "addss" for 0x4029e2>, <DisassemblerInsn "movd" for 0x4029e6>, <DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "shr" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f1>, <DisassemblerInsn "shr" for 0x4029f4>, <DisassemblerInsn "and" for 0x4029f8>, <DisassemblerInsn "shl" for 0x4029fc>, <DisassemblerInsn "and" for 0x402a00>, <DisassemblerInsn "or" for 0x402a07>, <DisassemblerInsn "movd" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "movss" for 0x402a16>, <DisassemblerInsn "movss" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "movss" for 0x402a2c>, <DisassemblerInsn "mulss" for 0x402a35>, <DisassemblerInsn "addss" for 0x402a39>, <DisassemblerInsn "mulss" for 0x402a3d>, <DisassemblerInsn "movaps" for 0x402a41>, <DisassemblerInsn "cmpltss" for 0x402a44>, <DisassemblerInsn "movaps" for 0x402a49>, <DisassemblerInsn "andps" for 0x402a4c>, <DisassemblerInsn "andnps" for 0x402a4f>, <DisassemblerInsn "orps" for 0x402a52>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "shl" for 0x402a5c>, <DisassemblerInsn "add" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "shl" for 0x402a66>, <DisassemblerInsn "add" for 0x402a6a>, <DisassemblerInsn "movss" for 0x402a6d>, <DisassemblerInsn "add" for 0x402a71>, <DisassemblerInsn "cmp" for 0x402a75>, <DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "movaps" for 0x402a80>, <DisassemblerInsn "movaps" for 0x402a83>, <DisassemblerInsn "movss" for 0x402a8b>, <DisassemblerInsn "jne" for 0x402a94>]'}, {'block_Idx': 191, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403340>, <DisassemblerInsn "mov" for 0x403348>, <DisassemblerInsn "movss" for 0x40334f>, <DisassemblerInsn "cvtsi2ss" for 0x403358>, <DisassemblerInsn "divss" for 0x40335c>, <DisassemblerInsn "movss" for 0x403360>, <DisassemblerInsn "mov" for 0x403369>, <DisassemblerInsn "mov" for 0x403370>, <DisassemblerInsn "mov" for 0x403378>, <DisassemblerInsn "mov" for 0x403380>, <DisassemblerInsn "mov" for 0x403387>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "shl" for 0x403395>, <DisassemblerInsn "mov" for 0x403397>, <DisassemblerInsn "sar" for 0x40339e>, <DisassemblerInsn "mov" for 0x4033a0>, <DisassemblerInsn "movsxd" for 0x4033a8>, <DisassemblerInsn "shl" for 0x4033ab>, <DisassemblerInsn "add" for 0x4033af>, <DisassemblerInsn "add" for 0x4033b2>, <DisassemblerInsn "cmp" for 0x4033b6>, <DisassemblerInsn "mov" for 0x4033b9>, <DisassemblerInsn "mov" for 0x4033c1>, <DisassemblerInsn "mov" for 0x4033c3>, <DisassemblerInsn "mov" for 0x4033ca>, <DisassemblerInsn "mov" for 0x4033d2>, <DisassemblerInsn "jne" for 0x4033d9>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40278d>, <DisassemblerInsn "shr" for 0x402794>, <DisassemblerInsn "mov" for 0x402797>, <DisassemblerInsn "mov" for 0x40279c>, <DisassemblerInsn "mov" for 0x4027a3>, <DisassemblerInsn "jmp" for 0x4027aa>]'}, {'block_Idx': 200, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40380f>, <DisassemblerInsn "mov" for 0x403817>, <DisassemblerInsn "mov" for 0x40381f>, <DisassemblerInsn "mov" for 0x403827>, <DisassemblerInsn "xor" for 0x403829>, <DisassemblerInsn "mov" for 0x40382b>, <DisassemblerInsn "mov" for 0x403832>, <DisassemblerInsn "mov" for 0x403839>, <DisassemblerInsn "mov" for 0x403841>, <DisassemblerInsn "mov" for 0x403849>, <DisassemblerInsn "mov" for 0x403851>, <DisassemblerInsn "mov" for 0x403859>, <DisassemblerInsn "mov" for 0x403860>, <DisassemblerInsn "mov" for 0x403867>, <DisassemblerInsn "movss" for 0x40386e>, <DisassemblerInsn "mov" for 0x403877>, <DisassemblerInsn "mov" for 0x40387f>, <DisassemblerInsn "mov" for 0x403886>, <DisassemblerInsn "movsxd" for 0x40388e>, <DisassemblerInsn "movss" for 0x403891>, <DisassemblerInsn "add" for 0x40389b>, <DisassemblerInsn "mov" for 0x40389e>, <DisassemblerInsn "and" for 0x4038a5>, <DisassemblerInsn "mov" for 0x4038ab>, <DisassemblerInsn "mov" for 0x4038b2>, <DisassemblerInsn "add" for 0x4038b5>, <DisassemblerInsn "mov" for 0x4038b9>, <DisassemblerInsn "addss" for 0x4038c1>, <DisassemblerInsn "movss" for 0x4038c6>, <DisassemblerInsn "mov" for 0x4038cf>, <DisassemblerInsn "shl" for 0x4038d2>, <DisassemblerInsn "mov" for 0x4038d5>, <DisassemblerInsn "mov" for 0x4038dc>, <DisassemblerInsn "sar" for 0x4038e4>, <DisassemblerInsn "mov" for 0x4038e7>, <DisassemblerInsn "mov" for 0x4038ef>, <DisassemblerInsn "movsxd" for 0x4038f7>, <DisassemblerInsn "mulss" for 0x4038fa>, <DisassemblerInsn "movss" for 0x403900>, <DisassemblerInsn "mulss" for 0x403909>, <DisassemblerInsn "movss" for 0x40390d>, <DisassemblerInsn "mov" for 0x403916>, <DisassemblerInsn "add" for 0x403919>, <DisassemblerInsn "mov" for 0x40391d>, <DisassemblerInsn "movss" for 0x403925>, <DisassemblerInsn "add" for 0x40392a>, <DisassemblerInsn "mov" for 0x40392d>, <DisassemblerInsn "cmp" for 0x403934>, <DisassemblerInsn "mov" for 0x403936>, <DisassemblerInsn "mov" for 0x403938>, <DisassemblerInsn "mov" for 0x40393f>, <DisassemblerInsn "mov" for 0x403946>, <DisassemblerInsn "mov" for 0x403949>, <DisassemblerInsn "mov" for 0x403951>, <DisassemblerInsn "mov" for 0x403954>, <DisassemblerInsn "mov" for 0x40395c>, <DisassemblerInsn "mov" for 0x403963>, <DisassemblerInsn "mov" for 0x40396b>, <DisassemblerInsn "jne" for 0x403973>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403dfd>, <DisassemblerInsn "mov" for 0x403e05>, <DisassemblerInsn "movsxd" for 0x403e0c>, <DisassemblerInsn "shl" for 0x403e0f>, <DisassemblerInsn "xor" for 0x403e13>, <DisassemblerInsn "call" for 0x403e15>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40271e>, <DisassemblerInsn "mov" for 0x402726>, <DisassemblerInsn "mov" for 0x402729>, <DisassemblerInsn "xor" for 0x402731>, <DisassemblerInsn "mov" for 0x402733>, <DisassemblerInsn "mov" for 0x40273b>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "mov" for 0x40274b>, <DisassemblerInsn "mov" for 0x402753>, <DisassemblerInsn "add" for 0x40275b>, <DisassemblerInsn "mov" for 0x40275e>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402767>, <DisassemblerInsn "shr" for 0x402769>, <DisassemblerInsn "mov" for 0x40276c>, <DisassemblerInsn "mov" for 0x40276e>, <DisassemblerInsn "ror" for 0x402771>, <DisassemblerInsn "ror" for 0x402775>, <DisassemblerInsn "ror" for 0x402778>, <DisassemblerInsn "and" for 0x40277c>, <DisassemblerInsn "shl" for 0x40277f>, <DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "cmp" for 0x402788>, <DisassemblerInsn "jae" for 0x40278b>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ab8>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4045b9>, <DisassemblerInsn "mov" for 0x4045c1>, <DisassemblerInsn "add" for 0x4045c9>, <DisassemblerInsn "mov" for 0x4045cf>, <DisassemblerInsn "mov" for 0x4045d7>, <DisassemblerInsn "shl" for 0x4045da>, <DisassemblerInsn "mov" for 0x4045de>, <DisassemblerInsn "add" for 0x4045e6>, <DisassemblerInsn "mov" for 0x4045e9>, <DisassemblerInsn "mov" for 0x4045f1>, <DisassemblerInsn "mov" for 0x4045f9>, <DisassemblerInsn "add" for 0x4045fc>, <DisassemblerInsn "mov" for 0x404600>, <DisassemblerInsn "cmp" for 0x404608>, <DisassemblerInsn "mov" for 0x40460c>, <DisassemblerInsn "je" for 0x404614>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146e>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "mov" for 0x40147e>, <DisassemblerInsn "mov" for 0x401481>, <DisassemblerInsn "sub" for 0x401483>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "lea" for 0x40148a>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "call" for 0x401493>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40402e>, <DisassemblerInsn "mov" for 0x404036>, <DisassemblerInsn "mov" for 0x40403e>, <DisassemblerInsn "mov" for 0x404046>, <DisassemblerInsn "mov" for 0x40404c>, <DisassemblerInsn "shl" for 0x40404f>, <DisassemblerInsn "mov" for 0x404052>, <DisassemblerInsn "mov" for 0x40405a>, <DisassemblerInsn "mov" for 0x404062>, <DisassemblerInsn "sub" for 0x404064>, <DisassemblerInsn "mov" for 0x404067>, <DisassemblerInsn "cdq" for 0x40406c>, <DisassemblerInsn "idiv" for 0x40406d>, <DisassemblerInsn "mov" for 0x40406f>, <DisassemblerInsn "mov" for 0x404077>, <DisassemblerInsn "mov" for 0x404079>, <DisassemblerInsn "mov" for 0x404081>, <DisassemblerInsn "sub" for 0x404083>, <DisassemblerInsn "mov" for 0x404086>, <DisassemblerInsn "movsxd" for 0x404089>, <DisassemblerInsn "mov" for 0x40408c>, <DisassemblerInsn "mov" for 0x404094>, <DisassemblerInsn "shl" for 0x404097>, <DisassemblerInsn "add" for 0x40409b>, <DisassemblerInsn "mov" for 0x40409e>, <DisassemblerInsn "mov" for 0x4040a6>, <DisassemblerInsn "add" for 0x4040a9>, <DisassemblerInsn "shl" for 0x4040b0>, <DisassemblerInsn "add" for 0x4040b4>, <DisassemblerInsn "mov" for 0x4040b7>, <DisassemblerInsn "movsxd" for 0x4040bf>, <DisassemblerInsn "mov" for 0x4040c2>, <DisassemblerInsn "mov" for 0x4040ca>, <DisassemblerInsn "call" for 0x4040cd>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402a9a>, <DisassemblerInsn "mov" for 0x402aa2>, <DisassemblerInsn "movss" for 0x402aaa>, <DisassemblerInsn "movss" for 0x402ab3>, <DisassemblerInsn "mov" for 0x402abc>, <DisassemblerInsn "mov" for 0x402ac4>, <DisassemblerInsn "mov" for 0x402acc>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae2>, <DisassemblerInsn "add" for 0x402aea>, <DisassemblerInsn "movsxd" for 0x402aee>, <DisassemblerInsn "cmp" for 0x402af1>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "jl" for 0x402afc>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40188d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40434c>, <DisassemblerInsn "cmp" for 0x404353>, <DisassemblerInsn "je" for 0x404356>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b98>, <DisassemblerInsn "mov" for 0x402ba0>, <DisassemblerInsn "mov" for 0x402ba8>, <DisassemblerInsn "mov" for 0x402baf>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "movsxd" for 0x402bb9>, <DisassemblerInsn "shl" for 0x402bbc>, <DisassemblerInsn "xor" for 0x402bc0>, <DisassemblerInsn "call" for 0x402bc2>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013c0>, <DisassemblerInsn "mov" for 0x4013c5>, <DisassemblerInsn "jmp" for 0x4013cc>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "movaps" for 0x402894>, <DisassemblerInsn "mov" for 0x40289c>, <DisassemblerInsn "movss" for 0x4028a4>, <DisassemblerInsn "movss" for 0x4028ad>, <DisassemblerInsn "mov" for 0x4028b6>, <DisassemblerInsn "movss" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c3>, <DisassemblerInsn "movaps" for 0x4028cb>, <DisassemblerInsn "movss" for 0x4028ce>, <DisassemblerInsn "movss" for 0x4028d7>, <DisassemblerInsn "movss" for 0x4028e0>, <DisassemblerInsn "movss" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "movss" for 0x4028fa>, <DisassemblerInsn "movaps" for 0x402903>, <DisassemblerInsn "subss" for 0x402906>, <DisassemblerInsn "movss" for 0x40290f>, <DisassemblerInsn "mulss" for 0x402918>, <DisassemblerInsn "movss" for 0x40291c>, <DisassemblerInsn "subss" for 0x402925>, <DisassemblerInsn "movss" for 0x40292e>, <DisassemblerInsn "mulss" for 0x402937>, <DisassemblerInsn "movss" for 0x40293b>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "add" for 0x402947>, <DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "cmp" for 0x402953>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "movss" for 0x40295f>, <DisassemblerInsn "movss" for 0x402968>, <DisassemblerInsn "jb" for 0x402971>]'}, {'block_Idx': 223, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404404>, <DisassemblerInsn "mov" for 0x40440b>, <DisassemblerInsn "mov" for 0x404413>, <DisassemblerInsn "mov" for 0x40441b>, <DisassemblerInsn "add" for 0x404423>, <DisassemblerInsn "shl" for 0x40442a>, <DisassemblerInsn "add" for 0x40442e>, <DisassemblerInsn "mov" for 0x404431>, <DisassemblerInsn "test" for 0x404439>, <DisassemblerInsn "jne" for 0x40443b>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4021e4>, <DisassemblerInsn "movss" for 0x4021ec>, <DisassemblerInsn "mov" for 0x4021f5>, <DisassemblerInsn "mov" for 0x4021fd>, <DisassemblerInsn "mov" for 0x402204>, <DisassemblerInsn "mov" for 0x40220c>, <DisassemblerInsn "mov" for 0x402214>, <DisassemblerInsn "mov" for 0x402217>, <DisassemblerInsn "mov" for 0x40221f>, <DisassemblerInsn "mov" for 0x402222>, <DisassemblerInsn "mov" for 0x40222a>, <DisassemblerInsn "mov" for 0x402231>, <DisassemblerInsn "movss" for 0x402239>, <DisassemblerInsn "mov" for 0x402242>, <DisassemblerInsn "jmp" for 0x40224a>]'}, {'block_Idx': 203, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403979>, <DisassemblerInsn "mov" for 0x403981>, <DisassemblerInsn "mov" for 0x403988>, <DisassemblerInsn "mov" for 0x403990>, <DisassemblerInsn "mov" for 0x403998>, <DisassemblerInsn "mov" for 0x40399a>, <DisassemblerInsn "mov" for 0x4039a2>, <DisassemblerInsn "mov" for 0x4039aa>, <DisassemblerInsn "mov" for 0x4039b2>, <DisassemblerInsn "mov" for 0x4039ba>, <DisassemblerInsn "mov" for 0x4039c2>, <DisassemblerInsn "mov" for 0x4039ca>, <DisassemblerInsn "mov" for 0x4039d1>, <DisassemblerInsn "mov" for 0x4039d9>, <DisassemblerInsn "mov" for 0x4039e1>, <DisassemblerInsn "shl" for 0x4039e9>, <DisassemblerInsn "mov" for 0x4039ec>, <DisassemblerInsn "sar" for 0x4039f3>, <DisassemblerInsn "mov" for 0x4039f6>, <DisassemblerInsn "movsxd" for 0x4039fe>, <DisassemblerInsn "shl" for 0x403a01>, <DisassemblerInsn "add" for 0x403a05>, <DisassemblerInsn "add" for 0x403a08>, <DisassemblerInsn "cmp" for 0x403a0c>, <DisassemblerInsn "mov" for 0x403a0f>, <DisassemblerInsn "mov" for 0x403a17>, <DisassemblerInsn "mov" for 0x403a1a>, <DisassemblerInsn "mov" for 0x403a22>, <DisassemblerInsn "mov" for 0x403a25>, <DisassemblerInsn "mov" for 0x403a2d>, <DisassemblerInsn "mov" for 0x403a35>, <DisassemblerInsn "mov" for 0x403a3d>, <DisassemblerInsn "jne" for 0x403a45>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401718>, <DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "mov" for 0x401727>, <DisassemblerInsn "mov" for 0x40172f>, <DisassemblerInsn "mov" for 0x401731>, <DisassemblerInsn "shr" for 0x401733>, <DisassemblerInsn "mov" for 0x401736>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "ror" for 0x401742>, <DisassemblerInsn "ror" for 0x401746>, <DisassemblerInsn "ror" for 0x401749>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401754>, <DisassemblerInsn "and" for 0x401756>, <DisassemblerInsn "mov" for 0x401759>, <DisassemblerInsn "shl" for 0x401760>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "shr" for 0x40176b>, <DisassemblerInsn "mov" for 0x40176e>, <DisassemblerInsn "add" for 0x401775>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "mov" for 0x40177f>, <DisassemblerInsn "mov" for 0x401781>, <DisassemblerInsn "add" for 0x401783>, <DisassemblerInsn "mov" for 0x401785>, <DisassemblerInsn "cmp" for 0x40178c>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "je" for 0x401796>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40218a>, <DisassemblerInsn "mov" for 0x402192>, <DisassemblerInsn "movss" for 0x40219a>, <DisassemblerInsn "mov" for 0x4021a3>, <DisassemblerInsn "mov" for 0x4021ab>, <DisassemblerInsn "mov" for 0x4021b2>, <DisassemblerInsn "mov" for 0x4021b9>, <DisassemblerInsn "movss" for 0x4021c1>, <DisassemblerInsn "mov" for 0x4021ca>, <DisassemblerInsn "cmp" for 0x4021d2>, <DisassemblerInsn "movss" for 0x4021d5>, <DisassemblerInsn "jae" for 0x4021de>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a31>, <DisassemblerInsn "mov" for 0x401a39>, <DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a49>, <DisassemblerInsn "add" for 0x401a51>, <DisassemblerInsn "shl" for 0x401a58>, <DisassemblerInsn "add" for 0x401a5c>, <DisassemblerInsn "shl" for 0x401a5f>, <DisassemblerInsn "add" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a66>, <DisassemblerInsn "mov" for 0x401a68>, <DisassemblerInsn "sub" for 0x401a6a>, <DisassemblerInsn "mov" for 0x401a6c>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "mov" for 0x401a76>, <DisassemblerInsn "add" for 0x401a7e>, <DisassemblerInsn "cmp" for 0x401a82>, <DisassemblerInsn "mov" for 0x401a85>, <DisassemblerInsn "jne" for 0x401a8d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404329>, <DisassemblerInsn "mov" for 0x404330>, <DisassemblerInsn "mov" for 0x404337>, <DisassemblerInsn "cmp" for 0x40433c>, <DisassemblerInsn "mov" for 0x40433f>, <DisassemblerInsn "jl" for 0x404346>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "mov" for 0x401a76>, <DisassemblerInsn "add" for 0x401a7e>, <DisassemblerInsn "cmp" for 0x401a82>, <DisassemblerInsn "mov" for 0x401a85>, <DisassemblerInsn "jne" for 0x401a8d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "mov" for 0x401575>, <DisassemblerInsn "mov" for 0x40157d>, <DisassemblerInsn "mov" for 0x401585>, <DisassemblerInsn "mov" for 0x401587>, <DisassemblerInsn "mov" for 0x40158a>, <DisassemblerInsn "shr" for 0x40158c>, <DisassemblerInsn "mov" for 0x40158f>, <DisassemblerInsn "mov" for 0x401591>, <DisassemblerInsn "mov" for 0x401595>, <DisassemblerInsn "and" for 0x401597>, <DisassemblerInsn "movzx" for 0x40159a>, <DisassemblerInsn "shl" for 0x40159e>, <DisassemblerInsn "mov" for 0x4015a0>, <DisassemblerInsn "add" for 0x4015a2>, <DisassemblerInsn "mov" for 0x4015a5>, <DisassemblerInsn "shr" for 0x4015a7>, <DisassemblerInsn "mov" for 0x4015aa>, <DisassemblerInsn "mov" for 0x4015ac>, <DisassemblerInsn "xor" for 0x4015b3>, <DisassemblerInsn "cmp" for 0x4015b5>, <DisassemblerInsn "mov" for 0x4015b8>, <DisassemblerInsn "jle" for 0x4015bf>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403b83>, <DisassemblerInsn "mov" for 0x403b8b>, <DisassemblerInsn "mov" for 0x403b93>, <DisassemblerInsn "mov" for 0x403b9b>, <DisassemblerInsn "mov" for 0x403ba2>, <DisassemblerInsn "cmp" for 0x403ba9>, <DisassemblerInsn "mov" for 0x403bac>, <DisassemblerInsn "jle" for 0x403bb4>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d7>, <DisassemblerInsn "mov" for 0x4019df>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019ea>, <DisassemblerInsn "shr" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f2>, <DisassemblerInsn "mov" for 0x4019f5>, <DisassemblerInsn "and" for 0x4019f8>, <DisassemblerInsn "movzx" for 0x4019fb>, <DisassemblerInsn "shl" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "shr" for 0x401a08>, <DisassemblerInsn "add" for 0x401a0b>, <DisassemblerInsn "mov" for 0x401a0f>, <DisassemblerInsn "and" for 0x401a12>, <DisassemblerInsn "add" for 0x401a15>, <DisassemblerInsn "shl" for 0x401a1c>, <DisassemblerInsn "add" for 0x401a20>, <DisassemblerInsn "shl" for 0x401a23>, <DisassemblerInsn "add" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "cmp" for 0x401a2c>, <DisassemblerInsn "je" for 0x401a2f>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403008>, <DisassemblerInsn "mov" for 0x403010>, <DisassemblerInsn "mov" for 0x403018>, <DisassemblerInsn "mov" for 0x40301f>, <DisassemblerInsn "movss" for 0x403026>, <DisassemblerInsn "mov" for 0x40302f>, <DisassemblerInsn "mov" for 0x403037>, <DisassemblerInsn "mov" for 0x40303f>, <DisassemblerInsn "mov" for 0x403046>, <DisassemblerInsn "movsxd" for 0x40304e>, <DisassemblerInsn "movss" for 0x403051>, <DisassemblerInsn "shl" for 0x40305b>, <DisassemblerInsn "mov" for 0x40305e>, <DisassemblerInsn "mov" for 0x403065>, <DisassemblerInsn "sar" for 0x40306d>, <DisassemblerInsn "mov" for 0x403070>, <DisassemblerInsn "mov" for 0x403077>, <DisassemblerInsn "movsxd" for 0x40307f>, <DisassemblerInsn "add" for 0x403082>, <DisassemblerInsn "mov" for 0x403088>, <DisassemblerInsn "shl" for 0x403090>, <DisassemblerInsn "mov" for 0x403094>, <DisassemblerInsn "add" for 0x40309c>, <DisassemblerInsn "mov" for 0x40309f>, <DisassemblerInsn "shl" for 0x4030a7>, <DisassemblerInsn "mov" for 0x4030ab>, <DisassemblerInsn "add" for 0x4030b3>, <DisassemblerInsn "mov" for 0x4030b6>, <DisassemblerInsn "mulss" for 0x4030be>, <DisassemblerInsn "movss" for 0x4030c2>, <DisassemblerInsn "mulss" for 0x4030cb>, <DisassemblerInsn "movss" for 0x4030cf>, <DisassemblerInsn "mov" for 0x4030d8>, <DisassemblerInsn "add" for 0x4030db>, <DisassemblerInsn "mov" for 0x4030df>, <DisassemblerInsn "movss" for 0x4030e7>, <DisassemblerInsn "add" for 0x4030eb>, <DisassemblerInsn "mov" for 0x4030ee>, <DisassemblerInsn "and" for 0x4030f5>, <DisassemblerInsn "mov" for 0x4030fb>, <DisassemblerInsn "add" for 0x403102>, <DisassemblerInsn "mov" for 0x403105>, <DisassemblerInsn "cmp" for 0x40310c>, <DisassemblerInsn "mov" for 0x40310e>, <DisassemblerInsn "mov" for 0x403115>, <DisassemblerInsn "mov" for 0x40311c>, <DisassemblerInsn "jne" for 0x403124>]'}, {'block_Idx': 189, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403532>, <DisassemblerInsn "mov" for 0x40353a>, <DisassemblerInsn "mov" for 0x403542>, <DisassemblerInsn "mov" for 0x40354a>, <DisassemblerInsn "mov" for 0x403552>, <DisassemblerInsn "sub" for 0x403554>, <DisassemblerInsn "movsxd" for 0x403556>, <DisassemblerInsn "add" for 0x403559>, <DisassemblerInsn "shl" for 0x40355f>, <DisassemblerInsn "add" for 0x403563>, <DisassemblerInsn "shl" for 0x403566>, <DisassemblerInsn "add" for 0x40356a>, <DisassemblerInsn "mov" for 0x40356d>, <DisassemblerInsn "mov" for 0x40356f>, <DisassemblerInsn "mov" for 0x403576>, <DisassemblerInsn "mov" for 0x40357e>, <DisassemblerInsn "mov" for 0x403585>, <DisassemblerInsn "cmp" for 0x40358c>, <DisassemblerInsn "jle" for 0x403590>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401498>, <DisassemblerInsn "mov" for 0x40149d>, <DisassemblerInsn "jmp" for 0x4014a4>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b83>, <DisassemblerInsn "cmp" for 0x402b8b>, <DisassemblerInsn "setne" for 0x402b8e>, <DisassemblerInsn "mov" for 0x402b91>, <DisassemblerInsn "mov" for 0x402b98>, <DisassemblerInsn "mov" for 0x402ba0>, <DisassemblerInsn "mov" for 0x402ba8>, <DisassemblerInsn "mov" for 0x402baf>, <DisassemblerInsn "mov" for 0x402bb6>, <DisassemblerInsn "movsxd" for 0x402bb9>, <DisassemblerInsn "shl" for 0x402bbc>, <DisassemblerInsn "xor" for 0x402bc0>, <DisassemblerInsn "call" for 0x402bc2>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "mov" for 0x401979>, <DisassemblerInsn "mov" for 0x401981>, <DisassemblerInsn "mov" for 0x401989>, <DisassemblerInsn "mov" for 0x40198c>, <DisassemblerInsn "lea" for 0x401994>, <DisassemblerInsn "shl" for 0x40199c>, <DisassemblerInsn "add" for 0x4019a0>, <DisassemblerInsn "mov" for 0x4019a3>, <DisassemblerInsn "mov" for 0x4019ab>, <DisassemblerInsn "mov" for 0x4019ad>, <DisassemblerInsn "xor" for 0x4019b5>, <DisassemblerInsn "mov" for 0x4019b7>, <DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cf>, <DisassemblerInsn "mov" for 0x4019d7>, <DisassemblerInsn "mov" for 0x4019df>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019ea>, <DisassemblerInsn "shr" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f2>, <DisassemblerInsn "mov" for 0x4019f5>, <DisassemblerInsn "and" for 0x4019f8>, <DisassemblerInsn "movzx" for 0x4019fb>, <DisassemblerInsn "shl" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "shr" for 0x401a08>, <DisassemblerInsn "add" for 0x401a0b>, <DisassemblerInsn "mov" for 0x401a0f>, <DisassemblerInsn "and" for 0x401a12>, <DisassemblerInsn "add" for 0x401a15>, <DisassemblerInsn "shl" for 0x401a1c>, <DisassemblerInsn "add" for 0x401a20>, <DisassemblerInsn "shl" for 0x401a23>, <DisassemblerInsn "add" for 0x401a27>, <DisassemblerInsn "mov" for 0x401a2a>, <DisassemblerInsn "cmp" for 0x401a2c>, <DisassemblerInsn "je" for 0x401a2f>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f54>, <DisassemblerInsn "mov" for 0x403f5c>, <DisassemblerInsn "mov" for 0x403f64>, <DisassemblerInsn "mov" for 0x403f6c>, <DisassemblerInsn "mov" for 0x403f73>, <DisassemblerInsn "mov" for 0x403f7b>, <DisassemblerInsn "mov" for 0x403f7d>, <DisassemblerInsn "cdq" for 0x403f83>, <DisassemblerInsn "idiv" for 0x403f84>, <DisassemblerInsn "mov" for 0x403f87>, <DisassemblerInsn "mov" for 0x403f8f>, <DisassemblerInsn "mov" for 0x403f92>, <DisassemblerInsn "add" for 0x403f9a>, <DisassemblerInsn "add" for 0x403f9d>, <DisassemblerInsn "movsxd" for 0x403fa0>, <DisassemblerInsn "add" for 0x403fa3>, <DisassemblerInsn "shl" for 0x403faa>, <DisassemblerInsn "add" for 0x403fae>, <DisassemblerInsn "shl" for 0x403fb1>, <DisassemblerInsn "add" for 0x403fb5>, <DisassemblerInsn "mov" for 0x403fb8>, <DisassemblerInsn "mov" for 0x403fc0>, <DisassemblerInsn "mov" for 0x403fc2>, <DisassemblerInsn "mov" for 0x403fc9>, <DisassemblerInsn "mov" for 0x403fcb>, <DisassemblerInsn "cmp" for 0x403fd2>, <DisassemblerInsn "jg" for 0x403fd4>]'}, {'block_Idx': 230, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4041c9>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40287c>, <DisassemblerInsn "mov" for 0x402884>, <DisassemblerInsn "movaps" for 0x40288c>, <DisassemblerInsn "movaps" for 0x402894>, <DisassemblerInsn "mov" for 0x40289c>, <DisassemblerInsn "movss" for 0x4028a4>, <DisassemblerInsn "movss" for 0x4028ad>, <DisassemblerInsn "mov" for 0x4028b6>, <DisassemblerInsn "movss" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c3>, <DisassemblerInsn "movaps" for 0x4028cb>, <DisassemblerInsn "movss" for 0x4028ce>, <DisassemblerInsn "movss" for 0x4028d7>, <DisassemblerInsn "movss" for 0x4028e0>, <DisassemblerInsn "movss" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "movss" for 0x4028fa>, <DisassemblerInsn "movaps" for 0x402903>, <DisassemblerInsn "subss" for 0x402906>, <DisassemblerInsn "movss" for 0x40290f>, <DisassemblerInsn "mulss" for 0x402918>, <DisassemblerInsn "movss" for 0x40291c>, <DisassemblerInsn "subss" for 0x402925>, <DisassemblerInsn "movss" for 0x40292e>, <DisassemblerInsn "mulss" for 0x402937>, <DisassemblerInsn "movss" for 0x40293b>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "add" for 0x402947>, <DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "cmp" for 0x402953>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "movss" for 0x40295f>, <DisassemblerInsn "movss" for 0x402968>, <DisassemblerInsn "jb" for 0x402971>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401df1>, <DisassemblerInsn "mov" for 0x401df9>, <DisassemblerInsn "mov" for 0x401e01>, <DisassemblerInsn "cmp" for 0x401e03>, <DisassemblerInsn "je" for 0x401e05>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40312a>, <DisassemblerInsn "mov" for 0x403132>, <DisassemblerInsn "mov" for 0x40313a>, <DisassemblerInsn "mov" for 0x403141>, <DisassemblerInsn "mov" for 0x403143>, <DisassemblerInsn "mov" for 0x40314b>, <DisassemblerInsn "mov" for 0x403153>, <DisassemblerInsn "mov" for 0x40315b>, <DisassemblerInsn "mov" for 0x403163>, <DisassemblerInsn "mov" for 0x403165>, <DisassemblerInsn "xor" for 0x40316c>, <DisassemblerInsn "cmp" for 0x40316e>, <DisassemblerInsn "mov" for 0x403171>, <DisassemblerInsn "jle" for 0x403178>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c77>, <DisassemblerInsn "mov" for 0x402c7f>, <DisassemblerInsn "mov" for 0x402c81>, <DisassemblerInsn "xor" for 0x402c88>, <DisassemblerInsn "sub" for 0x402c8a>, <DisassemblerInsn "and" for 0x402c8c>, <DisassemblerInsn "mov" for 0x402c8f>, <DisassemblerInsn "cmp" for 0x402c96>, <DisassemblerInsn "je" for 0x402c99>]'}, {'block_Idx': 232, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ea5>, <DisassemblerInsn "mov" for 0x403ead>, <DisassemblerInsn "mov" for 0x403eb5>, <DisassemblerInsn "mov" for 0x403ebd>, <DisassemblerInsn "mov" for 0x403ebf>, <DisassemblerInsn "cdq" for 0x403ec4>, <DisassemblerInsn "idiv" for 0x403ec5>, <DisassemblerInsn "mov" for 0x403ec7>, <DisassemblerInsn "mov" for 0x403ec9>, <DisassemblerInsn "mov" for 0x403ed1>, <DisassemblerInsn "cmp" for 0x403ed8>, <DisassemblerInsn "je" for 0x403ee0>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c6a>, <DisassemblerInsn "mov" for 0x401c72>, <DisassemblerInsn "mov" for 0x401c79>, <DisassemblerInsn "mov" for 0x401c81>, <DisassemblerInsn "add" for 0x401c88>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "mov" for 0x401c92>, <DisassemblerInsn "shr" for 0x401c94>, <DisassemblerInsn "mov" for 0x401c97>, <DisassemblerInsn "mov" for 0x401c99>, <DisassemblerInsn "ror" for 0x401c9c>, <DisassemblerInsn "ror" for 0x401ca0>, <DisassemblerInsn "ror" for 0x401ca3>, <DisassemblerInsn "and" for 0x401ca7>, <DisassemblerInsn "shl" for 0x401caa>, <DisassemblerInsn "mov" for 0x401cac>, <DisassemblerInsn "shr" for 0x401cb4>, <DisassemblerInsn "mov" for 0x401cb6>, <DisassemblerInsn "add" for 0x401cbd>, <DisassemblerInsn "mov" for 0x401cbf>, <DisassemblerInsn "mov" for 0x401cc1>, <DisassemblerInsn "movsx" for 0x401cc3>, <DisassemblerInsn "mov" for 0x401cc7>, <DisassemblerInsn "mov" for 0x401ccc>, <DisassemblerInsn "mov" for 0x401cd3>, <DisassemblerInsn "mov" for 0x401cda>, <DisassemblerInsn "mov" for 0x401ce2>, <DisassemblerInsn "mov" for 0x401cea>, <DisassemblerInsn "mov" for 0x401cf1>, <DisassemblerInsn "mov" for 0x401cf8>, <DisassemblerInsn "mov" for 0x401d00>, <DisassemblerInsn "movsx" for 0x401d07>, <DisassemblerInsn "add" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0c>, <DisassemblerInsn "cmp" for 0x401d0e>, <DisassemblerInsn "jge" for 0x401d11>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e70>, <DisassemblerInsn "mov" for 0x401e78>, <DisassemblerInsn "mov" for 0x401e80>, <DisassemblerInsn "cmp" for 0x401e88>, <DisassemblerInsn "je" for 0x401e90>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403e46>, <DisassemblerInsn "cmp" for 0x403e4e>, <DisassemblerInsn "jle" for 0x403e51>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024b5>, <DisassemblerInsn "mov" for 0x4024bd>, <DisassemblerInsn "mov" for 0x4024c0>, <DisassemblerInsn "lea" for 0x4024c5>, <DisassemblerInsn "mov" for 0x4024cc>, <DisassemblerInsn "call" for 0x4024ce>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40237a>, <DisassemblerInsn "mov" for 0x402382>, <DisassemblerInsn "mov" for 0x402389>, <DisassemblerInsn "mov" for 0x402390>, <DisassemblerInsn "mov" for 0x402398>, <DisassemblerInsn "add" for 0x40239f>, <DisassemblerInsn "mov" for 0x4023a2>, <DisassemblerInsn "shr" for 0x4023a9>, <DisassemblerInsn "mov" for 0x4023ac>, <DisassemblerInsn "mov" for 0x4023ae>, <DisassemblerInsn "ror" for 0x4023b1>, <DisassemblerInsn "ror" for 0x4023b5>, <DisassemblerInsn "ror" for 0x4023b8>, <DisassemblerInsn "shl" for 0x4023bc>, <DisassemblerInsn "mov" for 0x4023be>, <DisassemblerInsn "shr" for 0x4023c6>, <DisassemblerInsn "mov" for 0x4023c8>, <DisassemblerInsn "add" for 0x4023cf>, <DisassemblerInsn "mov" for 0x4023d1>, <DisassemblerInsn "mov" for 0x4023d3>, <DisassemblerInsn "movsx" for 0x4023d5>, <DisassemblerInsn "mov" for 0x4023d9>, <DisassemblerInsn "mov" for 0x4023e0>, <DisassemblerInsn "mov" for 0x4023e5>, <DisassemblerInsn "movsx" for 0x4023ed>, <DisassemblerInsn "cmp" for 0x4023f0>, <DisassemblerInsn "mov" for 0x4023f4>, <DisassemblerInsn "mov" for 0x4023fb>, <DisassemblerInsn "mov" for 0x402402>, <DisassemblerInsn "jge" for 0x402409>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bd7>, <DisassemblerInsn "mov" for 0x401bdf>, <DisassemblerInsn "mov" for 0x401be7>, <DisassemblerInsn "mov" for 0x401bef>, <DisassemblerInsn "mov" for 0x401bf2>, <DisassemblerInsn "mov" for 0x401bfa>, <DisassemblerInsn "mov" for 0x401bfc>, <DisassemblerInsn "mov" for 0x401c03>, <DisassemblerInsn "mov" for 0x401c06>, <DisassemblerInsn "mov" for 0x401c0e>, <DisassemblerInsn "shr" for 0x401c10>, <DisassemblerInsn "mov" for 0x401c13>, <DisassemblerInsn "mov" for 0x401c15>, <DisassemblerInsn "ror" for 0x401c18>, <DisassemblerInsn "ror" for 0x401c1c>, <DisassemblerInsn "ror" for 0x401c1f>, <DisassemblerInsn "and" for 0x401c23>, <DisassemblerInsn "shl" for 0x401c26>, <DisassemblerInsn "mov" for 0x401c28>, <DisassemblerInsn "shr" for 0x401c2f>, <DisassemblerInsn "mov" for 0x401c32>, <DisassemblerInsn "mov" for 0x401c34>, <DisassemblerInsn "movsx" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3a>, <DisassemblerInsn "mov" for 0x401c41>, <DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "cmp" for 0x401c4e>, <DisassemblerInsn "mov" for 0x401c52>, <DisassemblerInsn "mov" for 0x401c59>, <DisassemblerInsn "mov" for 0x401c60>, <DisassemblerInsn "jge" for 0x401c68>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40289c>, <DisassemblerInsn "movss" for 0x4028a4>, <DisassemblerInsn "movss" for 0x4028ad>, <DisassemblerInsn "mov" for 0x4028b6>, <DisassemblerInsn "movss" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c3>, <DisassemblerInsn "movaps" for 0x4028cb>, <DisassemblerInsn "movss" for 0x4028ce>, <DisassemblerInsn "movss" for 0x4028d7>, <DisassemblerInsn "movss" for 0x4028e0>, <DisassemblerInsn "movss" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "movss" for 0x4028fa>, <DisassemblerInsn "movaps" for 0x402903>, <DisassemblerInsn "subss" for 0x402906>, <DisassemblerInsn "movss" for 0x40290f>, <DisassemblerInsn "mulss" for 0x402918>, <DisassemblerInsn "movss" for 0x40291c>, <DisassemblerInsn "subss" for 0x402925>, <DisassemblerInsn "movss" for 0x40292e>, <DisassemblerInsn "mulss" for 0x402937>, <DisassemblerInsn "movss" for 0x40293b>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "add" for 0x402947>, <DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "cmp" for 0x402953>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "movss" for 0x40295f>, <DisassemblerInsn "movss" for 0x402968>, <DisassemblerInsn "jb" for 0x402971>]'}, {'block_Idx': 166, 'blockInsts': '[<DisassemblerInsn "movss" for 0x402646>, <DisassemblerInsn "mov" for 0x40264f>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "mov" for 0x40265e>, <DisassemblerInsn "add" for 0x402661>, <DisassemblerInsn "movss" for 0x402665>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "movss" for 0x402678>, <DisassemblerInsn "mov" for 0x402681>, <DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "mov" for 0x402690>, <DisassemblerInsn "add" for 0x402693>, <DisassemblerInsn "movss" for 0x402697>, <DisassemblerInsn "mov" for 0x40269b>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "movss" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b3>, <DisassemblerInsn "mov" for 0x4026bb>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "add" for 0x4026c5>, <DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "movss" for 0x4026d1>, <DisassemblerInsn "mov" for 0x4026d5>, <DisassemblerInsn "add" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "jg" for 0x4026ec>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b4c>, <DisassemblerInsn "mov" for 0x402b54>, <DisassemblerInsn "add" for 0x402b5c>, <DisassemblerInsn "mov" for 0x402b62>, <DisassemblerInsn "shl" for 0x402b65>, <DisassemblerInsn "add" for 0x402b69>, <DisassemblerInsn "mov" for 0x402b6c>, <DisassemblerInsn "xor" for 0x402b74>, <DisassemblerInsn "cmp" for 0x402b76>, <DisassemblerInsn "mov" for 0x402b7a>, <DisassemblerInsn "jne" for 0x402b81>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40443d>]'}, {'block_Idx': 204, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403849>, <DisassemblerInsn "mov" for 0x403851>, <DisassemblerInsn "mov" for 0x403859>, <DisassemblerInsn "mov" for 0x403860>, <DisassemblerInsn "mov" for 0x403867>, <DisassemblerInsn "movss" for 0x40386e>, <DisassemblerInsn "mov" for 0x403877>, <DisassemblerInsn "mov" for 0x40387f>, <DisassemblerInsn "mov" for 0x403886>, <DisassemblerInsn "movsxd" for 0x40388e>, <DisassemblerInsn "movss" for 0x403891>, <DisassemblerInsn "add" for 0x40389b>, <DisassemblerInsn "mov" for 0x40389e>, <DisassemblerInsn "and" for 0x4038a5>, <DisassemblerInsn "mov" for 0x4038ab>, <DisassemblerInsn "mov" for 0x4038b2>, <DisassemblerInsn "add" for 0x4038b5>, <DisassemblerInsn "mov" for 0x4038b9>, <DisassemblerInsn "addss" for 0x4038c1>, <DisassemblerInsn "movss" for 0x4038c6>, <DisassemblerInsn "mov" for 0x4038cf>, <DisassemblerInsn "shl" for 0x4038d2>, <DisassemblerInsn "mov" for 0x4038d5>, <DisassemblerInsn "mov" for 0x4038dc>, <DisassemblerInsn "sar" for 0x4038e4>, <DisassemblerInsn "mov" for 0x4038e7>, <DisassemblerInsn "mov" for 0x4038ef>, <DisassemblerInsn "movsxd" for 0x4038f7>, <DisassemblerInsn "mulss" for 0x4038fa>, <DisassemblerInsn "movss" for 0x403900>, <DisassemblerInsn "mulss" for 0x403909>, <DisassemblerInsn "movss" for 0x40390d>, <DisassemblerInsn "mov" for 0x403916>, <DisassemblerInsn "add" for 0x403919>, <DisassemblerInsn "mov" for 0x40391d>, <DisassemblerInsn "movss" for 0x403925>, <DisassemblerInsn "add" for 0x40392a>, <DisassemblerInsn "mov" for 0x40392d>, <DisassemblerInsn "cmp" for 0x403934>, <DisassemblerInsn "mov" for 0x403936>, <DisassemblerInsn "mov" for 0x403938>, <DisassemblerInsn "mov" for 0x40393f>, <DisassemblerInsn "mov" for 0x403946>, <DisassemblerInsn "mov" for 0x403949>, <DisassemblerInsn "mov" for 0x403951>, <DisassemblerInsn "mov" for 0x403954>, <DisassemblerInsn "mov" for 0x40395c>, <DisassemblerInsn "mov" for 0x403963>, <DisassemblerInsn "mov" for 0x40396b>, <DisassemblerInsn "jne" for 0x403973>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402507>, <DisassemblerInsn "mov" for 0x40250e>, <DisassemblerInsn "mov" for 0x402516>, <DisassemblerInsn "mov" for 0x402519>, <DisassemblerInsn "lea" for 0x40251e>, <DisassemblerInsn "mov" for 0x402525>, <DisassemblerInsn "call" for 0x402527>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401392>, <DisassemblerInsn "mov" for 0x401399>, <DisassemblerInsn "mov" for 0x4013a0>, <DisassemblerInsn "mov" for 0x4013a8>, <DisassemblerInsn "sub" for 0x4013ab>, <DisassemblerInsn "mov" for 0x4013ad>, <DisassemblerInsn "lea" for 0x4013b2>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "call" for 0x4013bb>]'}, {'block_Idx': 207, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4036b0>, <DisassemblerInsn "mov" for 0x4036b8>, <DisassemblerInsn "mov" for 0x4036c0>, <DisassemblerInsn "xor" for 0x4036c2>, <DisassemblerInsn "mov" for 0x4036c4>, <DisassemblerInsn "mov" for 0x4036cb>, <DisassemblerInsn "mov" for 0x4036d2>, <DisassemblerInsn "mov" for 0x4036da>, <DisassemblerInsn "mov" for 0x4036e2>, <DisassemblerInsn "mov" for 0x4036e9>, <DisassemblerInsn "mov" for 0x4036f0>, <DisassemblerInsn "movss" for 0x4036f7>, <DisassemblerInsn "mov" for 0x403700>, <DisassemblerInsn "mov" for 0x403708>, <DisassemblerInsn "mov" for 0x40370f>, <DisassemblerInsn "movsxd" for 0x403717>, <DisassemblerInsn "movss" for 0x40371a>, <DisassemblerInsn "add" for 0x403724>, <DisassemblerInsn "mov" for 0x403727>, <DisassemblerInsn "and" for 0x40372e>, <DisassemblerInsn "mov" for 0x403734>, <DisassemblerInsn "mov" for 0x40373b>, <DisassemblerInsn "shl" for 0x40373e>, <DisassemblerInsn "mov" for 0x403741>, <DisassemblerInsn "mov" for 0x403748>, <DisassemblerInsn "sar" for 0x403750>, <DisassemblerInsn "mov" for 0x403753>, <DisassemblerInsn "mov" for 0x40375b>, <DisassemblerInsn "movsxd" for 0x403763>, <DisassemblerInsn "mulss" for 0x403766>, <DisassemblerInsn "movss" for 0x40376c>, <DisassemblerInsn "mulss" for 0x403775>, <DisassemblerInsn "movss" for 0x403779>, <DisassemblerInsn "mov" for 0x403782>, <DisassemblerInsn "add" for 0x403785>, <DisassemblerInsn "mov" for 0x403789>, <DisassemblerInsn "movss" for 0x403791>, <DisassemblerInsn "add" for 0x403796>, <DisassemblerInsn "mov" for 0x403799>, <DisassemblerInsn "cmp" for 0x4037a0>, <DisassemblerInsn "mov" for 0x4037a2>, <DisassemblerInsn "mov" for 0x4037a4>, <DisassemblerInsn "mov" for 0x4037ab>, <DisassemblerInsn "mov" for 0x4037b2>, <DisassemblerInsn "mov" for 0x4037b5>, <DisassemblerInsn "mov" for 0x4037bd>, <DisassemblerInsn "mov" for 0x4037c4>, <DisassemblerInsn "mov" for 0x4037cc>, <DisassemblerInsn "je" for 0x4037d4>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024e4>, <DisassemblerInsn "mov" for 0x4024eb>, <DisassemblerInsn "add" for 0x4024f2>, <DisassemblerInsn "mov" for 0x4024f4>, <DisassemblerInsn "add" for 0x4024f6>, <DisassemblerInsn "mov" for 0x4024f9>, <DisassemblerInsn "cmp" for 0x402500>, <DisassemblerInsn "jbe" for 0x402505>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ee2>, <DisassemblerInsn "mov" for 0x403eea>, <DisassemblerInsn "mov" for 0x403ef2>, <DisassemblerInsn "mov" for 0x403efa>, <DisassemblerInsn "mov" for 0x403f02>, <DisassemblerInsn "add" for 0x403f0a>, <DisassemblerInsn "shl" for 0x403f11>, <DisassemblerInsn "add" for 0x403f15>, <DisassemblerInsn "call" for 0x403f18>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d13>, <DisassemblerInsn "mov" for 0x401d1b>, <DisassemblerInsn "mov" for 0x401d1e>, <DisassemblerInsn "lea" for 0x401d23>, <DisassemblerInsn "mov" for 0x401d2a>, <DisassemblerInsn "call" for 0x401d2c>]'}, {'block_Idx': 235, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404688>, <DisassemblerInsn "mov" for 0x404690>, <DisassemblerInsn "mov" for 0x404698>, <DisassemblerInsn "mov" for 0x4046a0>, <DisassemblerInsn "mov" for 0x4046a8>, <DisassemblerInsn "mov" for 0x4046ad>, <DisassemblerInsn "add" for 0x4046b0>, <DisassemblerInsn "mov" for 0x4046b7>, <DisassemblerInsn "mov" for 0x4046bc>, <DisassemblerInsn "shl" for 0x4046bf>, <DisassemblerInsn "mov" for 0x4046c3>, <DisassemblerInsn "add" for 0x4046c8>, <DisassemblerInsn "mov" for 0x4046cb>, <DisassemblerInsn "add" for 0x4046d0>, <DisassemblerInsn "mov" for 0x4046d7>, <DisassemblerInsn "shl" for 0x4046dc>, <DisassemblerInsn "mov" for 0x4046e0>, <DisassemblerInsn "add" for 0x4046e5>, <DisassemblerInsn "mov" for 0x4046e8>, <DisassemblerInsn "shl" for 0x4046ed>, <DisassemblerInsn "mov" for 0x4046f1>, <DisassemblerInsn "add" for 0x4046f6>, <DisassemblerInsn "mov" for 0x4046f9>, <DisassemblerInsn "call" for 0x4046fe>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "movss" for 0x402d45>, <DisassemblerInsn "mov" for 0x402d4e>, <DisassemblerInsn "cvtsi2sd" for 0x402d55>, <DisassemblerInsn "sqrtsd" for 0x402d59>, <DisassemblerInsn "cvtss2sd" for 0x402d5d>, <DisassemblerInsn "mulsd" for 0x402d61>, <DisassemblerInsn "cvtsd2ss" for 0x402d65>, <DisassemblerInsn "movss" for 0x402d69>, <DisassemblerInsn "mov" for 0x402d72>, <DisassemblerInsn "movss" for 0x402d79>, <DisassemblerInsn "movss" for 0x402d82>, <DisassemblerInsn "cmp" for 0x402d8b>, <DisassemblerInsn "jle" for 0x402d8e>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027ac>, <DisassemblerInsn "shr" for 0x4027b3>, <DisassemblerInsn "mov" for 0x4027b6>, <DisassemblerInsn "mov" for 0x4027bb>, <DisassemblerInsn "mov" for 0x4027c2>, <DisassemblerInsn "mov" for 0x4027c9>, <DisassemblerInsn "mov" for 0x4027d1>, <DisassemblerInsn "mov" for 0x4027d9>, <DisassemblerInsn "mov" for 0x4027e0>, <DisassemblerInsn "mov" for 0x4027e7>, <DisassemblerInsn "add" for 0x4027ee>, <DisassemblerInsn "mov" for 0x4027f0>, <DisassemblerInsn "movsxd" for 0x4027f2>, <DisassemblerInsn "mov" for 0x4027f5>, <DisassemblerInsn "mov" for 0x4027fc>, <DisassemblerInsn "shl" for 0x4027ff>, <DisassemblerInsn "add" for 0x402803>, <DisassemblerInsn "shl" for 0x402806>, <DisassemblerInsn "add" for 0x40280a>, <DisassemblerInsn "movss" for 0x40280d>, <DisassemblerInsn "movss" for 0x402811>, <DisassemblerInsn "add" for 0x40281a>, <DisassemblerInsn "cmp" for 0x40281e>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "jne" for 0x40282a>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c6a>, <DisassemblerInsn "cmp" for 0x402c72>, <DisassemblerInsn "jle" for 0x402c75>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402488>, <DisassemblerInsn "mov" for 0x402490>, <DisassemblerInsn "mov" for 0x402497>, <DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a5>, <DisassemblerInsn "add" for 0x4024ac>, <DisassemblerInsn "mov" for 0x4024ae>, <DisassemblerInsn "cmp" for 0x4024b0>, <DisassemblerInsn "jge" for 0x4024b3>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b79>, <DisassemblerInsn "cmp" for 0x401b80>, <DisassemblerInsn "jne" for 0x401b85>]'}, {'block_Idx': 201, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4035cb>, <DisassemblerInsn "mov" for 0x4035d3>, <DisassemblerInsn "mov" for 0x4035db>, <DisassemblerInsn "mov" for 0x4035e3>, <DisassemblerInsn "movss" for 0x4035eb>, <DisassemblerInsn "divss" for 0x4035f4>, <DisassemblerInsn "sqrtss" for 0x4035f8>, <DisassemblerInsn "cvtss2sd" for 0x4035fc>, <DisassemblerInsn "movsd" for 0x403600>, <DisassemblerInsn "add" for 0x403609>, <DisassemblerInsn "shl" for 0x40360f>, <DisassemblerInsn "add" for 0x403613>, <DisassemblerInsn "shl" for 0x403616>, <DisassemblerInsn "add" for 0x40361a>, <DisassemblerInsn "cvtsi2sd" for 0x40361d>, <DisassemblerInsn "movsd" for 0x403621>, <DisassemblerInsn "mulsd" for 0x403629>, <DisassemblerInsn "movsd" for 0x40362d>, <DisassemblerInsn "call" for 0x403635>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401958>, <DisassemblerInsn "mov" for 0x401960>, <DisassemblerInsn "mov" for 0x401962>, <DisassemblerInsn "cmp" for 0x401969>, <DisassemblerInsn "jle" for 0x40196c>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d99>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "add" for 0x401db0>, <DisassemblerInsn "cmp" for 0x401db4>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "mov" for 0x401dbf>, <DisassemblerInsn "jne" for 0x401dc6>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015c5>, <DisassemblerInsn "mov" for 0x4015cc>, <DisassemblerInsn "mov" for 0x4015d4>, <DisassemblerInsn "mov" for 0x4015d7>, <DisassemblerInsn "mov" for 0x4015df>, <DisassemblerInsn "mov" for 0x4015e1>, <DisassemblerInsn "xor" for 0x4015e9>, <DisassemblerInsn "mov" for 0x4015eb>, <DisassemblerInsn "xor" for 0x4015ed>, <DisassemblerInsn "mov" for 0x4015ef>, <DisassemblerInsn "mov" for 0x4015f7>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "mov" for 0x40160d>, <DisassemblerInsn "mov" for 0x401615>, <DisassemblerInsn "mov" for 0x40161d>, <DisassemblerInsn "mov" for 0x401625>, <DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "mov" for 0x401638>, <DisassemblerInsn "shr" for 0x40163b>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401645>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "mov" for 0x40164a>, <DisassemblerInsn "and" for 0x40164d>, <DisassemblerInsn "mov" for 0x401650>, <DisassemblerInsn "movzx" for 0x401657>, <DisassemblerInsn "shl" for 0x40165a>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "shr" for 0x40166b>, <DisassemblerInsn "mov" for 0x40166e>, <DisassemblerInsn "add" for 0x401675>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "and" for 0x401684>, <DisassemblerInsn "mov" for 0x401687>, <DisassemblerInsn "mov" for 0x40168e>, <DisassemblerInsn "mov" for 0x401691>, <DisassemblerInsn "or" for 0x401699>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "add" for 0x4016a2>, <DisassemblerInsn "mov" for 0x4016a6>, <DisassemblerInsn "cmp" for 0x4016ae>, <DisassemblerInsn "mov" for 0x4016b1>, <DisassemblerInsn "mov" for 0x4016b9>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016c2>, <DisassemblerInsn "jne" for 0x4016c9>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403dd6>, <DisassemblerInsn "cmp" for 0x403dde>, <DisassemblerInsn "je" for 0x403de1>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404442>, <DisassemblerInsn "mov" for 0x40444a>, <DisassemblerInsn "mov" for 0x404452>, <DisassemblerInsn "shl" for 0x40445a>, <DisassemblerInsn "add" for 0x40445d>, <DisassemblerInsn "xor" for 0x404460>, <DisassemblerInsn "mov" for 0x404462>, <DisassemblerInsn "mov" for 0x40446a>, <DisassemblerInsn "mov" for 0x404472>, <DisassemblerInsn "mov" for 0x404479>, <DisassemblerInsn "mov" for 0x404480>, <DisassemblerInsn "mov" for 0x404488>, <DisassemblerInsn "mov" for 0x404490>, <DisassemblerInsn "mov" for 0x404497>, <DisassemblerInsn "mov" for 0x40449f>, <DisassemblerInsn "add" for 0x4044a2>, <DisassemblerInsn "mov" for 0x4044a6>, <DisassemblerInsn "movss" for 0x4044ae>, <DisassemblerInsn "cvtss2si" for 0x4044b3>, <DisassemblerInsn "mov" for 0x4044b8>, <DisassemblerInsn "cmp" for 0x4044be>, <DisassemblerInsn "cmovg" for 0x4044c5>, <DisassemblerInsn "mov" for 0x4044c9>, <DisassemblerInsn "mov" for 0x4044d1>, <DisassemblerInsn "cmp" for 0x4044d7>, <DisassemblerInsn "cmovl" for 0x4044de>, <DisassemblerInsn "mov" for 0x4044e2>, <DisassemblerInsn "mov" for 0x4044ea>, <DisassemblerInsn "shl" for 0x4044ee>, <DisassemblerInsn "mov" for 0x4044f1>, <DisassemblerInsn "add" for 0x4044f9>, <DisassemblerInsn "mov" for 0x4044fc>, <DisassemblerInsn "add" for 0x404504>, <DisassemblerInsn "mov" for 0x404507>, <DisassemblerInsn "cmp" for 0x40450e>, <DisassemblerInsn "mov" for 0x404510>, <DisassemblerInsn "mov" for 0x404518>, <DisassemblerInsn "mov" for 0x404520>, <DisassemblerInsn "jne" for 0x404527>]'}, {'block_Idx': 194, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403b7e>]'}, {'block_Idx': 206, 'blockInsts': '[<DisassemblerInsn "movsd" for 0x40363a>, <DisassemblerInsn "mov" for 0x403643>, <DisassemblerInsn "mov" for 0x40364b>, <DisassemblerInsn "mov" for 0x403653>, <DisassemblerInsn "mov" for 0x40365a>, <DisassemblerInsn "mov" for 0x403662>, <DisassemblerInsn "movaps" for 0x40366a>, <DisassemblerInsn "movss" for 0x40366d>, <DisassemblerInsn "mulsd" for 0x403676>, <DisassemblerInsn "cvtsd2ss" for 0x40367a>, <DisassemblerInsn "movss" for 0x40367e>, <DisassemblerInsn "mulss" for 0x403682>, <DisassemblerInsn "divss" for 0x403686>, <DisassemblerInsn "mulss" for 0x40368a>, <DisassemblerInsn "movss" for 0x40368e>, <DisassemblerInsn "cmp" for 0x403697>, <DisassemblerInsn "mov" for 0x40369a>, <DisassemblerInsn "mov" for 0x4036a2>, <DisassemblerInsn "jle" for 0x4036aa>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c5d>, <DisassemblerInsn "cmp" for 0x402c65>, <DisassemblerInsn "jne" for 0x402c68>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b26>, <DisassemblerInsn "mov" for 0x401b2e>, <DisassemblerInsn "mov" for 0x401b36>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b45>, <DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "add" for 0x401b54>, <DisassemblerInsn "shl" for 0x401b5b>, <DisassemblerInsn "add" for 0x401b5f>, <DisassemblerInsn "shl" for 0x401b62>, <DisassemblerInsn "add" for 0x401b66>, <DisassemblerInsn "cmp" for 0x401b69>, <DisassemblerInsn "mov" for 0x401b6c>, <DisassemblerInsn "je" for 0x401b73>]'}, {'block_Idx': 198, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403ae8>, <DisassemblerInsn "mov" for 0x403af0>, <DisassemblerInsn "mov" for 0x403af7>, <DisassemblerInsn "mov" for 0x403afe>, <DisassemblerInsn "mov" for 0x403b05>, <DisassemblerInsn "movss" for 0x403b0d>, <DisassemblerInsn "movsxd" for 0x403b16>, <DisassemblerInsn "mulss" for 0x403b19>, <DisassemblerInsn "movss" for 0x403b23>, <DisassemblerInsn "mov" for 0x403b2c>, <DisassemblerInsn "add" for 0x403b2f>, <DisassemblerInsn "mov" for 0x403b33>, <DisassemblerInsn "movss" for 0x403b3b>, <DisassemblerInsn "add" for 0x403b3f>, <DisassemblerInsn "mov" for 0x403b42>, <DisassemblerInsn "and" for 0x403b49>, <DisassemblerInsn "mov" for 0x403b4f>, <DisassemblerInsn "add" for 0x403b56>, <DisassemblerInsn "mov" for 0x403b59>, <DisassemblerInsn "cmp" for 0x403b60>, <DisassemblerInsn "mov" for 0x403b62>, <DisassemblerInsn "mov" for 0x403b69>, <DisassemblerInsn "mov" for 0x403b70>, <DisassemblerInsn "je" for 0x403b78>]'}, {'block_Idx': 196, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4037df>, <DisassemblerInsn "mov" for 0x4037e7>, <DisassemblerInsn "mov" for 0x4037ef>, <DisassemblerInsn "cmp" for 0x4037f6>, <DisassemblerInsn "mov" for 0x4037f9>, <DisassemblerInsn "mov" for 0x403801>, <DisassemblerInsn "jle" for 0x403809>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e96>, <DisassemblerInsn "cmp" for 0x401e9e>, <DisassemblerInsn "je" for 0x401ea1>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "mov" for 0x401842>, <DisassemblerInsn "mov" for 0x40184a>, <DisassemblerInsn "mov" for 0x401851>, <DisassemblerInsn "add" for 0x401858>, <DisassemblerInsn "mov" for 0x40185c>, <DisassemblerInsn "cmp" for 0x401864>, <DisassemblerInsn "mov" for 0x401867>, <DisassemblerInsn "jne" for 0x40186f>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401310>, <DisassemblerInsn "mov" for 0x401318>, <DisassemblerInsn "mov" for 0x40131f>, <DisassemblerInsn "mov" for 0x401326>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401336>, <DisassemblerInsn "mov" for 0x40133e>, <DisassemblerInsn "mov" for 0x401346>, <DisassemblerInsn "mov" for 0x401349>, <DisassemblerInsn "sub" for 0x401351>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "mov" for 0x401357>, <DisassemblerInsn "shr" for 0x401359>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "ror" for 0x401361>, <DisassemblerInsn "ror" for 0x401365>, <DisassemblerInsn "ror" for 0x401368>, <DisassemblerInsn "mov" for 0x40136c>, <DisassemblerInsn "and" for 0x40136e>, <DisassemblerInsn "shl" for 0x401371>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "shr" for 0x40137a>, <DisassemblerInsn "mov" for 0x40137c>, <DisassemblerInsn "mov" for 0x401383>, <DisassemblerInsn "add" for 0x40138a>, <DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "cmp" for 0x40138e>, <DisassemblerInsn "jl" for 0x401390>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b1>, <DisassemblerInsn "mov" for 0x4014b8>, <DisassemblerInsn "mov" for 0x4014c0>, <DisassemblerInsn "sub" for 0x4014c2>, <DisassemblerInsn "mov" for 0x4014c4>, <DisassemblerInsn "jmp" for 0x4014c6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401080>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "add" for 0x40108b>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401099>, <DisassemblerInsn "add" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "lea" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bf>, <DisassemblerInsn "add" for 0x4010c2>, <DisassemblerInsn "mov" for 0x4010c8>, <DisassemblerInsn "mov" for 0x4010d0>, <DisassemblerInsn "add" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "mov" for 0x4010e1>, <DisassemblerInsn "add" for 0x4010e4>, <DisassemblerInsn "add" for 0x4010ea>, <DisassemblerInsn "mov" for 0x4010ee>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "add" for 0x4010f9>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "mov" for 0x401107>, <DisassemblerInsn "add" for 0x40110a>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "mov" for 0x401118>, <DisassemblerInsn "add" for 0x40111b>, <DisassemblerInsn "mov" for 0x401121>, <DisassemblerInsn "mov" for 0x401129>, <DisassemblerInsn "add" for 0x40112c>, <DisassemblerInsn "mov" for 0x401132>, <DisassemblerInsn "mov" for 0x40113a>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "add" for 0x401143>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "add" for 0x401154>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "mov" for 0x401162>, <DisassemblerInsn "add" for 0x401165>, <DisassemblerInsn "add" for 0x40116b>, <DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "add" for 0x40117c>, <DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "mov" for 0x40118a>, <DisassemblerInsn "add" for 0x40118d>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x40119c>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "add" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b5>, <DisassemblerInsn "add" for 0x4011b8>, <DisassemblerInsn "add" for 0x4011be>, <DisassemblerInsn "mov" for 0x4011c4>, <DisassemblerInsn "mov" for 0x4011cc>, <DisassemblerInsn "add" for 0x4011cf>, <DisassemblerInsn "mov" for 0x4011d5>, <DisassemblerInsn "mov" for 0x4011dd>, <DisassemblerInsn "add" for 0x4011e0>, <DisassemblerInsn "add" for 0x4011e6>, <DisassemblerInsn "mov" for 0x4011ec>, <DisassemblerInsn "mov" for 0x4011f4>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "cmp" for 0x401204>, <DisassemblerInsn "je" for 0x401207>]'}, {'block_Idx': 224, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4045a2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "shr" for 0x40142b>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "ror" for 0x401433>, <DisassemblerInsn "ror" for 0x401437>, <DisassemblerInsn "ror" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143e>, <DisassemblerInsn "and" for 0x401440>, <DisassemblerInsn "shl" for 0x401443>, <DisassemblerInsn "mov" for 0x401445>, <DisassemblerInsn "or" for 0x40144c>, <DisassemblerInsn "shr" for 0x40144f>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401458>, <DisassemblerInsn "add" for 0x40145f>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "cmp" for 0x401463>, <DisassemblerInsn "jl" for 0x401465>]'}, {'block_Idx': 218, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404649>, <DisassemblerInsn "cmp" for 0x404650>, <DisassemblerInsn "jle" for 0x404653>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "movss" for 0x402678>, <DisassemblerInsn "mov" for 0x402681>, <DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "mov" for 0x402690>, <DisassemblerInsn "add" for 0x402693>, <DisassemblerInsn "movss" for 0x402697>, <DisassemblerInsn "mov" for 0x40269b>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "movss" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b3>, <DisassemblerInsn "mov" for 0x4026bb>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "add" for 0x4026c5>, <DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "movss" for 0x4026d1>, <DisassemblerInsn "mov" for 0x4026d5>, <DisassemblerInsn "add" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "jg" for 0x4026ec>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40253d>, <DisassemblerInsn "movss" for 0x402545>, <DisassemblerInsn "mov" for 0x40254e>, <DisassemblerInsn "movsxd" for 0x402555>, <DisassemblerInsn "lea" for 0x402558>, <DisassemblerInsn "movss" for 0x40255f>, <DisassemblerInsn "movss" for 0x402568>, <DisassemblerInsn "maxss" for 0x402571>, <DisassemblerInsn "movss" for 0x402575>, <DisassemblerInsn "mov" for 0x40257e>, <DisassemblerInsn "add" for 0x402581>, <DisassemblerInsn "mov" for 0x402585>, <DisassemblerInsn "movzx" for 0x40258d>, <DisassemblerInsn "mov" for 0x402590>, <DisassemblerInsn "and" for 0x402597>, <DisassemblerInsn "mov" for 0x40259a>, <DisassemblerInsn "mov" for 0x4025a2>, <DisassemblerInsn "mov" for 0x4025a9>, <DisassemblerInsn "mov" for 0x4025b1>, <DisassemblerInsn "lea" for 0x4025b9>, <DisassemblerInsn "movsxd" for 0x4025c0>, <DisassemblerInsn "add" for 0x4025c4>, <DisassemblerInsn "mov" for 0x4025c7>, <DisassemblerInsn "mov" for 0x4025ca>, <DisassemblerInsn "mov" for 0x4025d2>, <DisassemblerInsn "mov" for 0x4025d4>, <DisassemblerInsn "mov" for 0x4025db>, <DisassemblerInsn "mov" for 0x4025de>, <DisassemblerInsn "mov" for 0x4025e6>, <DisassemblerInsn "mov" for 0x4025e8>, <DisassemblerInsn "mov" for 0x4025ef>, <DisassemblerInsn "mov" for 0x4025f2>, <DisassemblerInsn "mov" for 0x4025fa>, <DisassemblerInsn "mov" for 0x4025fc>, <DisassemblerInsn "mov" for 0x402603>, <DisassemblerInsn "mov" for 0x40260b>, <DisassemblerInsn "jmp" for 0x402612>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4042eb>, <DisassemblerInsn "mov" for 0x4042f3>, <DisassemblerInsn "mov" for 0x4042fb>, <DisassemblerInsn "mov" for 0x404303>, <DisassemblerInsn "mov" for 0x40430b>, <DisassemblerInsn "add" for 0x40430d>, <DisassemblerInsn "mov" for 0x404310>, <DisassemblerInsn "mov" for 0x404312>, <DisassemblerInsn "add" for 0x404314>, <DisassemblerInsn "mov" for 0x404316>, <DisassemblerInsn "cmp" for 0x404318>, <DisassemblerInsn "setge" for 0x40431a>, <DisassemblerInsn "and" for 0x40431d>, <DisassemblerInsn "movzx" for 0x40431f>, <DisassemblerInsn "mov" for 0x404322>, <DisassemblerInsn "mov" for 0x404329>, <DisassemblerInsn "mov" for 0x404330>, <DisassemblerInsn "mov" for 0x404337>, <DisassemblerInsn "cmp" for 0x40433c>, <DisassemblerInsn "mov" for 0x40433f>, <DisassemblerInsn "jl" for 0x404346>]'}, {'block_Idx': 185, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40224c>, <DisassemblerInsn "mov" for 0x402255>, <DisassemblerInsn "mov" for 0x40225d>, <DisassemblerInsn "mov" for 0x402265>, <DisassemblerInsn "mov" for 0x40226c>, <DisassemblerInsn "cmp" for 0x402274>, <DisassemblerInsn "mov" for 0x402277>, <DisassemblerInsn "mov" for 0x40227e>, <DisassemblerInsn "movaps" for 0x402286>, <DisassemblerInsn "movss" for 0x402289>, <DisassemblerInsn "mov" for 0x402292>, <DisassemblerInsn "movss" for 0x40229a>, <DisassemblerInsn "jae" for 0x4022a3>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fa1>, <DisassemblerInsn "mov" for 0x402fa9>, <DisassemblerInsn "test" for 0x402fb0>, <DisassemblerInsn "mov" for 0x402fb3>, <DisassemblerInsn "jne" for 0x402fbb>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "mov" for 0x4017ab>, <DisassemblerInsn "mov" for 0x4017b3>, <DisassemblerInsn "mov" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017bd>, <DisassemblerInsn "mov" for 0x4017c5>, <DisassemblerInsn "movsxd" for 0x4017cc>, <DisassemblerInsn "mov" for 0x4017cf>, <DisassemblerInsn "mov" for 0x4017d7>, <DisassemblerInsn "add" for 0x4017da>, <DisassemblerInsn "mov" for 0x4017e1>, <DisassemblerInsn "shl" for 0x4017e4>, <DisassemblerInsn "add" for 0x4017e8>, <DisassemblerInsn "mov" for 0x4017eb>, <DisassemblerInsn "mov" for 0x4017f3>, <DisassemblerInsn "sub" for 0x4017fa>, <DisassemblerInsn "mov" for 0x4017fc>, <DisassemblerInsn "mov" for 0x401803>, <DisassemblerInsn "mov" for 0x401805>, <DisassemblerInsn "cmp" for 0x40180c>, <DisassemblerInsn "setg" for 0x40180f>, <DisassemblerInsn "mov" for 0x401812>, <DisassemblerInsn "test" for 0x401819>, <DisassemblerInsn "jne" for 0x40181b>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40452d>, <DisassemblerInsn "mov" for 0x404535>, <DisassemblerInsn "mov" for 0x40453d>, <DisassemblerInsn "mov" for 0x404545>, <DisassemblerInsn "movsxd" for 0x40454d>, <DisassemblerInsn "add" for 0x404550>, <DisassemblerInsn "shl" for 0x404557>, <DisassemblerInsn "add" for 0x40455b>, <DisassemblerInsn "mov" for 0x40455e>, <DisassemblerInsn "shl" for 0x404561>, <DisassemblerInsn "add" for 0x404565>, <DisassemblerInsn "shl" for 0x404568>, <DisassemblerInsn "call" for 0x40456c>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404733>, <DisassemblerInsn "add" for 0x40473a>, <DisassemblerInsn "pop" for 0x404741>, <DisassemblerInsn "pop" for 0x404742>, <DisassemblerInsn "ret" for 0x404744>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401546>, <DisassemblerInsn "mov" for 0x40154b>, <DisassemblerInsn "jmp" for 0x401552>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "movss" for 0x403a4b>, <DisassemblerInsn "mov" for 0x403a54>, <DisassemblerInsn "mov" for 0x403a5b>, <DisassemblerInsn "mov" for 0x403a62>, <DisassemblerInsn "mov" for 0x403a6a>, <DisassemblerInsn "mov" for 0x403a71>, <DisassemblerInsn "mov" for 0x403a79>, <DisassemblerInsn "mov" for 0x403a81>, <DisassemblerInsn "mov" for 0x403a89>, <DisassemblerInsn "sub" for 0x403a91>, <DisassemblerInsn "mov" for 0x403a93>, <DisassemblerInsn "sar" for 0x403a9a>, <DisassemblerInsn "mov" for 0x403a9c>, <DisassemblerInsn "movsxd" for 0x403aa4>, <DisassemblerInsn "mulss" for 0x403aa7>, <DisassemblerInsn "movss" for 0x403aac>, <DisassemblerInsn "cmp" for 0x403ab5>, <DisassemblerInsn "jle" for 0x403ab8>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e55>, <DisassemblerInsn "xor" for 0x401e5d>, <DisassemblerInsn "cmp" for 0x401e5f>, <DisassemblerInsn "mov" for 0x401e62>, <DisassemblerInsn "jle" for 0x401e6a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013ed>, <DisassemblerInsn "mov" for 0x4013f5>, <DisassemblerInsn "mov" for 0x4013fd>, <DisassemblerInsn "mov" for 0x401405>, <DisassemblerInsn "mov" for 0x401407>, <DisassemblerInsn "mov" for 0x401409>, <DisassemblerInsn "mov" for 0x40140b>, <DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "mov" for 0x401424>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "shr" for 0x40142b>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "ror" for 0x401433>, <DisassemblerInsn "ror" for 0x401437>, <DisassemblerInsn "ror" for 0x40143a>, <DisassemblerInsn "mov" for 0x40143e>, <DisassemblerInsn "and" for 0x401440>, <DisassemblerInsn "shl" for 0x401443>, <DisassemblerInsn "mov" for 0x401445>, <DisassemblerInsn "or" for 0x40144c>, <DisassemblerInsn "shr" for 0x40144f>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401458>, <DisassemblerInsn "add" for 0x40145f>, <DisassemblerInsn "mov" for 0x401461>, <DisassemblerInsn "cmp" for 0x401463>, <DisassemblerInsn "jl" for 0x401465>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403e57>, <DisassemblerInsn "mov" for 0x403e5f>, <DisassemblerInsn "movsxd" for 0x403e66>, <DisassemblerInsn "mov" for 0x403e69>, <DisassemblerInsn "add" for 0x403e6c>, <DisassemblerInsn "imul" for 0x403e73>, <DisassemblerInsn "add" for 0x403e77>, <DisassemblerInsn "mov" for 0x403e7a>, <DisassemblerInsn "add" for 0x403e82>, <DisassemblerInsn "imul" for 0x403e88>, <DisassemblerInsn "add" for 0x403e8c>, <DisassemblerInsn "add" for 0x403e8f>, <DisassemblerInsn "mov" for 0x403e93>, <DisassemblerInsn "xor" for 0x403e9b>, <DisassemblerInsn "mov" for 0x403e9d>, <DisassemblerInsn "mov" for 0x403ea5>, <DisassemblerInsn "mov" for 0x403ead>, <DisassemblerInsn "mov" for 0x403eb5>, <DisassemblerInsn "mov" for 0x403ebd>, <DisassemblerInsn "mov" for 0x403ebf>, <DisassemblerInsn "cdq" for 0x403ec4>, <DisassemblerInsn "idiv" for 0x403ec5>, <DisassemblerInsn "mov" for 0x403ec7>, <DisassemblerInsn "mov" for 0x403ec9>, <DisassemblerInsn "mov" for 0x403ed1>, <DisassemblerInsn "cmp" for 0x403ed8>, <DisassemblerInsn "je" for 0x403ee0>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40240b>, <DisassemblerInsn "mov" for 0x402413>, <DisassemblerInsn "mov" for 0x40241a>, <DisassemblerInsn "mov" for 0x402422>, <DisassemblerInsn "mov" for 0x402429>, <DisassemblerInsn "sub" for 0x402430>, <DisassemblerInsn "mov" for 0x402432>, <DisassemblerInsn "mov" for 0x402439>, <DisassemblerInsn "shr" for 0x40243b>, <DisassemblerInsn "mov" for 0x40243e>, <DisassemblerInsn "mov" for 0x402440>, <DisassemblerInsn "ror" for 0x402443>, <DisassemblerInsn "ror" for 0x402447>, <DisassemblerInsn "ror" for 0x40244a>, <DisassemblerInsn "and" for 0x40244e>, <DisassemblerInsn "shl" for 0x402451>, <DisassemblerInsn "mov" for 0x402453>, <DisassemblerInsn "shr" for 0x40245b>, <DisassemblerInsn "mov" for 0x40245d>, <DisassemblerInsn "add" for 0x402464>, <DisassemblerInsn "mov" for 0x402466>, <DisassemblerInsn "mov" for 0x402468>, <DisassemblerInsn "movsx" for 0x40246a>, <DisassemblerInsn "movsx" for 0x40246e>, <DisassemblerInsn "mov" for 0x402473>, <DisassemblerInsn "mov" for 0x40247a>, <DisassemblerInsn "mov" for 0x402481>, <DisassemblerInsn "mov" for 0x402488>, <DisassemblerInsn "mov" for 0x402490>, <DisassemblerInsn "mov" for 0x402497>, <DisassemblerInsn "mov" for 0x40249e>, <DisassemblerInsn "mov" for 0x4024a5>, <DisassemblerInsn "add" for 0x4024ac>, <DisassemblerInsn "mov" for 0x4024ae>, <DisassemblerInsn "cmp" for 0x4024b0>, <DisassemblerInsn "jge" for 0x4024b3>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "movss" for 0x402614>, <DisassemblerInsn "mov" for 0x40261d>, <DisassemblerInsn "mov" for 0x402625>, <DisassemblerInsn "mov" for 0x40262c>, <DisassemblerInsn "add" for 0x40262f>, <DisassemblerInsn "movss" for 0x402633>, <DisassemblerInsn "mov" for 0x402637>, <DisassemblerInsn "mov" for 0x40263f>, <DisassemblerInsn "movss" for 0x402646>, <DisassemblerInsn "mov" for 0x40264f>, <DisassemblerInsn "mov" for 0x402657>, <DisassemblerInsn "mov" for 0x40265e>, <DisassemblerInsn "add" for 0x402661>, <DisassemblerInsn "movss" for 0x402665>, <DisassemblerInsn "mov" for 0x402669>, <DisassemblerInsn "mov" for 0x402671>, <DisassemblerInsn "movss" for 0x402678>, <DisassemblerInsn "mov" for 0x402681>, <DisassemblerInsn "mov" for 0x402689>, <DisassemblerInsn "mov" for 0x402690>, <DisassemblerInsn "add" for 0x402693>, <DisassemblerInsn "movss" for 0x402697>, <DisassemblerInsn "mov" for 0x40269b>, <DisassemblerInsn "mov" for 0x4026a3>, <DisassemblerInsn "movss" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b3>, <DisassemblerInsn "mov" for 0x4026bb>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "add" for 0x4026c5>, <DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "movss" for 0x4026d1>, <DisassemblerInsn "mov" for 0x4026d5>, <DisassemblerInsn "add" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "jg" for 0x4026ec>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4033df>, <DisassemblerInsn "mov" for 0x4033e6>, <DisassemblerInsn "mov" for 0x4033ee>, <DisassemblerInsn "mov" for 0x4033f6>, <DisassemblerInsn "mov" for 0x4033fd>, <DisassemblerInsn "mov" for 0x403404>, <DisassemblerInsn "mov" for 0x40340c>, <DisassemblerInsn "shl" for 0x403414>, <DisassemblerInsn "mov" for 0x403416>, <DisassemblerInsn "sar" for 0x40341d>, <DisassemblerInsn "mov" for 0x40341f>, <DisassemblerInsn "movsxd" for 0x403427>, <DisassemblerInsn "add" for 0x40342a>, <DisassemblerInsn "shl" for 0x403430>, <DisassemblerInsn "add" for 0x403434>, <DisassemblerInsn "shl" for 0x403437>, <DisassemblerInsn "add" for 0x40343b>, <DisassemblerInsn "mov" for 0x40343e>, <DisassemblerInsn "cmp" for 0x403446>, <DisassemblerInsn "mov" for 0x403449>, <DisassemblerInsn "mov" for 0x403451>, <DisassemblerInsn "jle" for 0x403459>]'}, {'block_Idx': 183, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403296>, <DisassemblerInsn "xorps" for 0x40329d>, <DisassemblerInsn "xor" for 0x4032a0>, <DisassemblerInsn "cmp" for 0x4032a2>, <DisassemblerInsn "movss" for 0x4032a5>, <DisassemblerInsn "mov" for 0x4032ae>, <DisassemblerInsn "jle" for 0x4032b5>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40181d>]'}, {'block_Idx': 208, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4037da>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015ac>, <DisassemblerInsn "xor" for 0x4015b3>, <DisassemblerInsn "cmp" for 0x4015b5>, <DisassemblerInsn "mov" for 0x4015b8>, <DisassemblerInsn "jle" for 0x4015bf>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4026f2>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014c8>, <DisassemblerInsn "mov" for 0x4014d0>, <DisassemblerInsn "mov" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014e0>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "mov" for 0x4014ea>, <DisassemblerInsn "mov" for 0x4014ec>, <DisassemblerInsn "mov" for 0x4014ee>, <DisassemblerInsn "mov" for 0x4014f0>, <DisassemblerInsn "mov" for 0x4014f8>, <DisassemblerInsn "mov" for 0x401500>, <DisassemblerInsn "mov" for 0x401508>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "mov" for 0x401511>, <DisassemblerInsn "shl" for 0x401516>, <DisassemblerInsn "mov" for 0x401518>, <DisassemblerInsn "mov" for 0x401520>, <DisassemblerInsn "add" for 0x401522>, <DisassemblerInsn "cmp" for 0x401524>, <DisassemblerInsn "jle" for 0x401526>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4022a9>, <DisassemblerInsn "mov" for 0x4022b1>, <DisassemblerInsn "mov" for 0x4022b9>, <DisassemblerInsn "mov" for 0x4022c1>, <DisassemblerInsn "mov" for 0x4022c8>, <DisassemblerInsn "movss" for 0x4022d0>, <DisassemblerInsn "mov" for 0x4022d9>, <DisassemblerInsn "mov" for 0x4022e1>, <DisassemblerInsn "movss" for 0x4022e9>, <DisassemblerInsn "mov" for 0x4022f2>, <DisassemblerInsn "mov" for 0x4022fa>, <DisassemblerInsn "mov" for 0x402301>, <DisassemblerInsn "mov" for 0x402303>, <DisassemblerInsn "mov" for 0x40230a>, <DisassemblerInsn "shr" for 0x40230c>, <DisassemblerInsn "mov" for 0x40230f>, <DisassemblerInsn "mov" for 0x402311>, <DisassemblerInsn "ror" for 0x402314>, <DisassemblerInsn "ror" for 0x402318>, <DisassemblerInsn "ror" for 0x40231b>, <DisassemblerInsn "and" for 0x40231f>, <DisassemblerInsn "mov" for 0x402322>, <DisassemblerInsn "shl" for 0x402329>, <DisassemblerInsn "mov" for 0x40232b>, <DisassemblerInsn "shr" for 0x402332>, <DisassemblerInsn "mov" for 0x402335>, <DisassemblerInsn "mov" for 0x402337>, <DisassemblerInsn "movsx" for 0x402339>, <DisassemblerInsn "mov" for 0x40233d>, <DisassemblerInsn "mov" for 0x402344>, <DisassemblerInsn "mov" for 0x402349>, <DisassemblerInsn "movsx" for 0x402351>, <DisassemblerInsn "mov" for 0x402354>, <DisassemblerInsn "cmp" for 0x40235b>, <DisassemblerInsn "mov" for 0x40235f>, <DisassemblerInsn "mov" for 0x402366>, <DisassemblerInsn "mov" for 0x40236d>, <DisassemblerInsn "jge" for 0x402374>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ce>, <DisassemblerInsn "mov" for 0x4012d5>, <DisassemblerInsn "mov" for 0x4012dd>, <DisassemblerInsn "mov" for 0x4012e5>, <DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "sub" for 0x4012ea>, <DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "lea" for 0x4012f1>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "call" for 0x4012fa>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ce6>, <DisassemblerInsn "mov" for 0x402cee>, <DisassemblerInsn "mov" for 0x402cf5>, <DisassemblerInsn "mov" for 0x402cfc>, <DisassemblerInsn "mov" for 0x402cfe>, <DisassemblerInsn "mov" for 0x402d05>, <DisassemblerInsn "cdq" for 0x402d0a>, <DisassemblerInsn "idiv" for 0x402d0b>, <DisassemblerInsn "mov" for 0x402d0d>, <DisassemblerInsn "mov" for 0x402d0f>, <DisassemblerInsn "mov" for 0x402d17>, <DisassemblerInsn "cvtsi2ss" for 0x402d1e>, <DisassemblerInsn "movss" for 0x402d22>, <DisassemblerInsn "divss" for 0x402d2a>, <DisassemblerInsn "movss" for 0x402d2e>, <DisassemblerInsn "cmp" for 0x402d37>, <DisassemblerInsn "movss" for 0x402d3a>, <DisassemblerInsn "jne" for 0x402d43>]'}, {'block_Idx': 214, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4041ce>, <DisassemblerInsn "mov" for 0x4041d6>, <DisassemblerInsn "mov" for 0x4041de>, <DisassemblerInsn "mov" for 0x4041e5>, <DisassemblerInsn "mov" for 0x4041ec>, <DisassemblerInsn "shl" for 0x4041f1>, <DisassemblerInsn "mov" for 0x4041f3>, <DisassemblerInsn "mov" for 0x4041fb>, <DisassemblerInsn "sub" for 0x404202>, <DisassemblerInsn "mov" for 0x404204>, <DisassemblerInsn "cdq" for 0x40420a>, <DisassemblerInsn "idiv" for 0x40420b>, <DisassemblerInsn "mov" for 0x40420e>, <DisassemblerInsn "mov" for 0x404215>, <DisassemblerInsn "sub" for 0x404217>, <DisassemblerInsn "mov" for 0x404219>, <DisassemblerInsn "movsxd" for 0x404220>, <DisassemblerInsn "mov" for 0x404223>, <DisassemblerInsn "shl" for 0x40422b>, <DisassemblerInsn "mov" for 0x40422f>, <DisassemblerInsn "call" for 0x404237>]'}, {'block_Idx': 195, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403576>, <DisassemblerInsn "mov" for 0x40357e>, <DisassemblerInsn "mov" for 0x403585>, <DisassemblerInsn "cmp" for 0x40358c>, <DisassemblerInsn "jle" for 0x403590>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402fbd>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d94>, <DisassemblerInsn "cvtsi2sd" for 0x402d9b>, <DisassemblerInsn "movsd" for 0x402d9f>, <DisassemblerInsn "mulsd" for 0x402da7>, <DisassemblerInsn "movsd" for 0x402dab>, <DisassemblerInsn "call" for 0x402db3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400d60>, <DisassemblerInsn "push" for 0x400d62>, <DisassemblerInsn "sub" for 0x400d63>, <DisassemblerInsn "mov" for 0x400d6a>, <DisassemblerInsn "mov" for 0x400d72>, <DisassemblerInsn "mov" for 0x400d7a>, <DisassemblerInsn "add" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d83>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "mov" for 0x400d95>, <DisassemblerInsn "add" for 0x400d98>, <DisassemblerInsn "mov" for 0x400d9e>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "lea" for 0x400db0>, <DisassemblerInsn "mov" for 0x400db8>, <DisassemblerInsn "add" for 0x400dbb>, <DisassemblerInsn "mov" for 0x400dbf>, <DisassemblerInsn "mov" for 0x400dc7>, <DisassemblerInsn "add" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dd0>, <DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "add" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400de1>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "add" for 0x400dec>, <DisassemblerInsn "mov" for 0x400df0>, <DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "add" for 0x400dfb>, <DisassemblerInsn "mov" for 0x400dff>, <DisassemblerInsn "mov" for 0x400e07>, <DisassemblerInsn "mov" for 0x400e0a>, <DisassemblerInsn "mov" for 0x400e12>, <DisassemblerInsn "add" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e23>, <DisassemblerInsn "add" for 0x400e26>, <DisassemblerInsn "mov" for 0x400e2c>, <DisassemblerInsn "mov" for 0x400e34>, <DisassemblerInsn "add" for 0x400e37>, <DisassemblerInsn "mov" for 0x400e3d>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "add" for 0x400e53>, <DisassemblerInsn "mov" for 0x400e59>, <DisassemblerInsn "mov" for 0x400e61>, <DisassemblerInsn "add" for 0x400e64>, <DisassemblerInsn "mov" for 0x400e6a>, <DisassemblerInsn "mov" for 0x400e72>, <DisassemblerInsn "add" for 0x400e75>, <DisassemblerInsn "mov" for 0x400e7b>, <DisassemblerInsn "mov" for 0x400e83>, <DisassemblerInsn "add" for 0x400e86>, <DisassemblerInsn "mov" for 0x400e8c>, <DisassemblerInsn "mov" for 0x400e94>, <DisassemblerInsn "add" for 0x400e97>, <DisassemblerInsn "mov" for 0x400e9b>, <DisassemblerInsn "mov" for 0x400ea3>, <DisassemblerInsn "add" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400eaa>, <DisassemblerInsn "mov" for 0x400eb2>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "mov" for 0x400ebd>, <DisassemblerInsn "add" for 0x400ec0>, <DisassemblerInsn "mov" for 0x400ec6>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "add" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed7>, <DisassemblerInsn "mov" for 0x400edf>, <DisassemblerInsn "add" for 0x400ee2>, <DisassemblerInsn "mov" for 0x400ee8>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016f9>, <DisassemblerInsn "mov" for 0x401701>, <DisassemblerInsn "mov" for 0x401704>, <DisassemblerInsn "mov" for 0x40170c>, <DisassemblerInsn "mov" for 0x401711>, <DisassemblerInsn "mov" for 0x401718>, <DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "mov" for 0x401727>, <DisassemblerInsn "mov" for 0x40172f>, <DisassemblerInsn "mov" for 0x401731>, <DisassemblerInsn "shr" for 0x401733>, <DisassemblerInsn "mov" for 0x401736>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "ror" for 0x401742>, <DisassemblerInsn "ror" for 0x401746>, <DisassemblerInsn "ror" for 0x401749>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401754>, <DisassemblerInsn "and" for 0x401756>, <DisassemblerInsn "mov" for 0x401759>, <DisassemblerInsn "shl" for 0x401760>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "shr" for 0x40176b>, <DisassemblerInsn "mov" for 0x40176e>, <DisassemblerInsn "add" for 0x401775>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "mov" for 0x40177f>, <DisassemblerInsn "mov" for 0x401781>, <DisassemblerInsn "add" for 0x401783>, <DisassemblerInsn "mov" for 0x401785>, <DisassemblerInsn "cmp" for 0x40178c>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "je" for 0x401796>]'}, {'block_Idx': 176, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40252c>, <DisassemblerInsn "mov" for 0x402531>, <DisassemblerInsn "jmp" for 0x402538>]'}, {'block_Idx': 202, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4034d0>, <DisassemblerInsn "mov" for 0x4034d8>, <DisassemblerInsn "mov" for 0x4034e0>, <DisassemblerInsn "mov" for 0x4034e8>, <DisassemblerInsn "mov" for 0x4034f0>, <DisassemblerInsn "mov" for 0x4034f8>, <DisassemblerInsn "mov" for 0x403500>, <DisassemblerInsn "mov" for 0x403508>, <DisassemblerInsn "cmp" for 0x403510>, <DisassemblerInsn "jge" for 0x403514>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b87>, <DisassemblerInsn "mov" for 0x401b8f>, <DisassemblerInsn "mov" for 0x401b97>, <DisassemblerInsn "mov" for 0x401b99>, <DisassemblerInsn "mov" for 0x401b9c>, <DisassemblerInsn "shr" for 0x401b9e>, <DisassemblerInsn "mov" for 0x401ba1>, <DisassemblerInsn "mov" for 0x401ba3>, <DisassemblerInsn "ror" for 0x401ba6>, <DisassemblerInsn "ror" for 0x401baa>, <DisassemblerInsn "ror" for 0x401bad>, <DisassemblerInsn "mov" for 0x401bb1>, <DisassemblerInsn "and" for 0x401bb3>, <DisassemblerInsn "shl" for 0x401bb6>, <DisassemblerInsn "mov" for 0x401bb8>, <DisassemblerInsn "shr" for 0x401bc0>, <DisassemblerInsn "add" for 0x401bc3>, <DisassemblerInsn "mov" for 0x401bc6>, <DisassemblerInsn "add" for 0x401bc8>, <DisassemblerInsn "mov" for 0x401bcb>, <DisassemblerInsn "jmp" for 0x401bd2>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403e25>, <DisassemblerInsn "mov" for 0x403e2d>, <DisassemblerInsn "mov" for 0x403e34>, <DisassemblerInsn "mov" for 0x403e3c>, <DisassemblerInsn "call" for 0x403e44>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401528>, <DisassemblerInsn "mov" for 0x401530>, <DisassemblerInsn "mov" for 0x401533>, <DisassemblerInsn "lea" for 0x401538>, <DisassemblerInsn "mov" for 0x40153f>, <DisassemblerInsn "call" for 0x401541>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40314b>, <DisassemblerInsn "mov" for 0x403153>, <DisassemblerInsn "mov" for 0x40315b>, <DisassemblerInsn "mov" for 0x403163>, <DisassemblerInsn "mov" for 0x403165>, <DisassemblerInsn "xor" for 0x40316c>, <DisassemblerInsn "cmp" for 0x40316e>, <DisassemblerInsn "mov" for 0x403171>, <DisassemblerInsn "jle" for 0x403178>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a93>, <DisassemblerInsn "mov" for 0x401a9b>, <DisassemblerInsn "add" for 0x401aa3>, <DisassemblerInsn "cmp" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aaa>, <DisassemblerInsn "je" for 0x401ab2>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402977>, <DisassemblerInsn "mov" for 0x40297f>, <DisassemblerInsn "mov" for 0x402987>, <DisassemblerInsn "mov" for 0x40298f>, <DisassemblerInsn "movaps" for 0x402997>, <DisassemblerInsn "movss" for 0x40299f>, <DisassemblerInsn "movss" for 0x4029a8>, <DisassemblerInsn "movss" for 0x4029b1>, <DisassemblerInsn "movss" for 0x4029ba>, <DisassemblerInsn "subss" for 0x4029c2>, <DisassemblerInsn "mulss" for 0x4029c6>, <DisassemblerInsn "mulss" for 0x4029ca>, <DisassemblerInsn "movss" for 0x4029ce>, <DisassemblerInsn "addss" for 0x4029d6>, <DisassemblerInsn "mulss" for 0x4029da>, <DisassemblerInsn "mulss" for 0x4029de>, <DisassemblerInsn "addss" for 0x4029e2>, <DisassemblerInsn "movd" for 0x4029e6>, <DisassemblerInsn "mov" for 0x4029eb>, <DisassemblerInsn "shr" for 0x4029ee>, <DisassemblerInsn "mov" for 0x4029f1>, <DisassemblerInsn "shr" for 0x4029f4>, <DisassemblerInsn "and" for 0x4029f8>, <DisassemblerInsn "shl" for 0x4029fc>, <DisassemblerInsn "and" for 0x402a00>, <DisassemblerInsn "or" for 0x402a07>, <DisassemblerInsn "movd" for 0x402a0e>, <DisassemblerInsn "mov" for 0x402a13>, <DisassemblerInsn "movss" for 0x402a16>, <DisassemblerInsn "movss" for 0x402a20>, <DisassemblerInsn "mov" for 0x402a2a>, <DisassemblerInsn "movss" for 0x402a2c>, <DisassemblerInsn "mulss" for 0x402a35>, <DisassemblerInsn "addss" for 0x402a39>, <DisassemblerInsn "mulss" for 0x402a3d>, <DisassemblerInsn "movaps" for 0x402a41>, <DisassemblerInsn "cmpltss" for 0x402a44>, <DisassemblerInsn "movaps" for 0x402a49>, <DisassemblerInsn "andps" for 0x402a4c>, <DisassemblerInsn "andnps" for 0x402a4f>, <DisassemblerInsn "orps" for 0x402a52>, <DisassemblerInsn "add" for 0x402a55>, <DisassemblerInsn "shl" for 0x402a5c>, <DisassemblerInsn "add" for 0x402a60>, <DisassemblerInsn "mov" for 0x402a63>, <DisassemblerInsn "shl" for 0x402a66>, <DisassemblerInsn "add" for 0x402a6a>, <DisassemblerInsn "movss" for 0x402a6d>, <DisassemblerInsn "add" for 0x402a71>, <DisassemblerInsn "cmp" for 0x402a75>, <DisassemblerInsn "mov" for 0x402a78>, <DisassemblerInsn "movaps" for 0x402a80>, <DisassemblerInsn "movaps" for 0x402a83>, <DisassemblerInsn "movss" for 0x402a8b>, <DisassemblerInsn "jne" for 0x402a94>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40181f>, <DisassemblerInsn "mov" for 0x401826>, <DisassemblerInsn "mov" for 0x401828>, <DisassemblerInsn "xor" for 0x401830>, <DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x40183a>, <DisassemblerInsn "mov" for 0x401842>, <DisassemblerInsn "mov" for 0x40184a>, <DisassemblerInsn "mov" for 0x401851>, <DisassemblerInsn "add" for 0x401858>, <DisassemblerInsn "mov" for 0x40185c>, <DisassemblerInsn "cmp" for 0x401864>, <DisassemblerInsn "mov" for 0x401867>, <DisassemblerInsn "jne" for 0x40186f>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40273b>, <DisassemblerInsn "mov" for 0x402743>, <DisassemblerInsn "mov" for 0x40274b>, <DisassemblerInsn "mov" for 0x402753>, <DisassemblerInsn "add" for 0x40275b>, <DisassemblerInsn "mov" for 0x40275e>, <DisassemblerInsn "mov" for 0x402760>, <DisassemblerInsn "mov" for 0x402767>, <DisassemblerInsn "shr" for 0x402769>, <DisassemblerInsn "mov" for 0x40276c>, <DisassemblerInsn "mov" for 0x40276e>, <DisassemblerInsn "ror" for 0x402771>, <DisassemblerInsn "ror" for 0x402775>, <DisassemblerInsn "ror" for 0x402778>, <DisassemblerInsn "and" for 0x40277c>, <DisassemblerInsn "shl" for 0x40277f>, <DisassemblerInsn "mov" for 0x402781>, <DisassemblerInsn "cmp" for 0x402788>, <DisassemblerInsn "jae" for 0x40278b>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "movss" for 0x4026aa>, <DisassemblerInsn "mov" for 0x4026b3>, <DisassemblerInsn "mov" for 0x4026bb>, <DisassemblerInsn "mov" for 0x4026c2>, <DisassemblerInsn "add" for 0x4026c5>, <DisassemblerInsn "mov" for 0x4026c9>, <DisassemblerInsn "movss" for 0x4026d1>, <DisassemblerInsn "mov" for 0x4026d5>, <DisassemblerInsn "add" for 0x4026d7>, <DisassemblerInsn "cmp" for 0x4026da>, <DisassemblerInsn "mov" for 0x4026dd>, <DisassemblerInsn "mov" for 0x4026e5>, <DisassemblerInsn "jg" for 0x4026ec>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402830>, <DisassemblerInsn "mov" for 0x402838>, <DisassemblerInsn "mov" for 0x40283a>, <DisassemblerInsn "xorps" for 0x402841>, <DisassemblerInsn "cmp" for 0x402844>, <DisassemblerInsn "movss" for 0x402847>, <DisassemblerInsn "jle" for 0x402850>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043d5>, <DisassemblerInsn "mov" for 0x4043dc>, <DisassemblerInsn "cmp" for 0x4043e3>, <DisassemblerInsn "setg" for 0x4043e6>, <DisassemblerInsn "mov" for 0x4043e9>, <DisassemblerInsn "cdqe" for 0x4043f0>, <DisassemblerInsn "mov" for 0x4043f2>, <DisassemblerInsn "xor" for 0x4043fa>, <DisassemblerInsn "mov" for 0x4043fc>, <DisassemblerInsn "mov" for 0x404404>, <DisassemblerInsn "mov" for 0x40440b>, <DisassemblerInsn "mov" for 0x404413>, <DisassemblerInsn "mov" for 0x40441b>, <DisassemblerInsn "add" for 0x404423>, <DisassemblerInsn "shl" for 0x40442a>, <DisassemblerInsn "add" for 0x40442e>, <DisassemblerInsn "mov" for 0x404431>, <DisassemblerInsn "test" for 0x404439>, <DisassemblerInsn "jne" for 0x40443b>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401871>, <DisassemblerInsn "cmp" for 0x401879>, <DisassemblerInsn "je" for 0x40187c>]'}, {'block_Idx': 197, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403596>, <DisassemblerInsn "mov" for 0x40359e>, <DisassemblerInsn "mov" for 0x4035a6>, <DisassemblerInsn "add" for 0x4035ae>, <DisassemblerInsn "shl" for 0x4035b4>, <DisassemblerInsn "add" for 0x4035b8>, <DisassemblerInsn "shl" for 0x4035bb>, <DisassemblerInsn "add" for 0x4035bf>, <DisassemblerInsn "cmp" for 0x4035c2>, <DisassemblerInsn "je" for 0x4035c5>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018ec>, <DisassemblerInsn "mov" for 0x4018f3>, <DisassemblerInsn "mov" for 0x4018fb>, <DisassemblerInsn "add" for 0x401903>, <DisassemblerInsn "shl" for 0x40190a>, <DisassemblerInsn "add" for 0x40190e>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "mov" for 0x401919>, <DisassemblerInsn "mov" for 0x40191b>, <DisassemblerInsn "xor" for 0x401923>, <DisassemblerInsn "mov" for 0x401925>, <DisassemblerInsn "jmp" for 0x40192d>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4026f7>, <DisassemblerInsn "mov" for 0x4026ff>, <DisassemblerInsn "movss" for 0x402707>, <DisassemblerInsn "movss" for 0x402710>, <DisassemblerInsn "jmp" for 0x402719>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ef0>, <DisassemblerInsn "add" for 0x400ef3>, <DisassemblerInsn "mov" for 0x400ef9>, <DisassemblerInsn "mov" for 0x400f01>, <DisassemblerInsn "add" for 0x400f04>, <DisassemblerInsn "mov" for 0x400f0a>, <DisassemblerInsn "mov" for 0x400f12>, <DisassemblerInsn "add" for 0x400f15>, <DisassemblerInsn "mov" for 0x400f1b>, <DisassemblerInsn "mov" for 0x400f23>, <DisassemblerInsn "add" for 0x400f26>, <DisassemblerInsn "mov" for 0x400f2c>, <DisassemblerInsn "mov" for 0x400f34>, <DisassemblerInsn "add" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3d>, <DisassemblerInsn "mov" for 0x400f45>, <DisassemblerInsn "add" for 0x400f48>, <DisassemblerInsn "mov" for 0x400f4e>, <DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "add" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5f>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "add" for 0x400f6a>, <DisassemblerInsn "mov" for 0x400f6e>, <DisassemblerInsn "mov" for 0x400f76>, <DisassemblerInsn "add" for 0x400f79>, <DisassemblerInsn "mov" for 0x400f7d>, <DisassemblerInsn "mov" for 0x400f85>, <DisassemblerInsn "add" for 0x400f88>, <DisassemblerInsn "mov" for 0x400f8c>, <DisassemblerInsn "mov" for 0x400f94>, <DisassemblerInsn "add" for 0x400f97>, <DisassemblerInsn "mov" for 0x400f9d>, <DisassemblerInsn "mov" for 0x400fa5>, <DisassemblerInsn "add" for 0x400fa8>, <DisassemblerInsn "mov" for 0x400fac>, <DisassemblerInsn "mov" for 0x400fb4>, <DisassemblerInsn "add" for 0x400fb7>, <DisassemblerInsn "mov" for 0x400fbb>, <DisassemblerInsn "mov" for 0x400fc3>, <DisassemblerInsn "add" for 0x400fc6>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd4>, <DisassemblerInsn "add" for 0x400fd7>, <DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "add" for 0x400fe6>, <DisassemblerInsn "mov" for 0x400fea>, <DisassemblerInsn "mov" for 0x400ff2>, <DisassemblerInsn "add" for 0x400ff5>, <DisassemblerInsn "mov" for 0x400ffb>, <DisassemblerInsn "mov" for 0x401003>, <DisassemblerInsn "add" for 0x401006>, <DisassemblerInsn "mov" for 0x40100a>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "add" for 0x401015>, <DisassemblerInsn "mov" for 0x40101b>, <DisassemblerInsn "mov" for 0x401023>, <DisassemblerInsn "mov" for 0x401026>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "add" for 0x401031>, <DisassemblerInsn "mov" for 0x401035>, <DisassemblerInsn "mov" for 0x40103d>, <DisassemblerInsn "add" for 0x401040>, <DisassemblerInsn "mov" for 0x401044>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "add" for 0x40104f>, <DisassemblerInsn "mov" for 0x401053>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "add" for 0x40105e>, <DisassemblerInsn "mov" for 0x401062>, <DisassemblerInsn "lea" for 0x40106a>, <DisassemblerInsn "mov" for 0x401072>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107d>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea7>, <DisassemblerInsn "mov" for 0x401eaf>, <DisassemblerInsn "mov" for 0x401eb7>, <DisassemblerInsn "mov" for 0x401ebf>, <DisassemblerInsn "mov" for 0x401ec7>, <DisassemblerInsn "mov" for 0x401ecf>, <DisassemblerInsn "mov" for 0x401ed7>, <DisassemblerInsn "sub" for 0x401ed9>, <DisassemblerInsn "movsxd" for 0x401edb>, <DisassemblerInsn "mov" for 0x401ede>, <DisassemblerInsn "mov" for 0x401ee6>, <DisassemblerInsn "add" for 0x401ee9>, <DisassemblerInsn "imul" for 0x401ef0>, <DisassemblerInsn "add" for 0x401ef4>, <DisassemblerInsn "mov" for 0x401ef7>, <DisassemblerInsn "mov" for 0x401eff>, <DisassemblerInsn "add" for 0x401f02>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "shl" for 0x401f0c>, <DisassemblerInsn "add" for 0x401f10>, <DisassemblerInsn "mov" for 0x401f13>, <DisassemblerInsn "movsxd" for 0x401f1b>, <DisassemblerInsn "add" for 0x401f1e>, <DisassemblerInsn "shl" for 0x401f24>, <DisassemblerInsn "add" for 0x401f28>, <DisassemblerInsn "shl" for 0x401f2b>, <DisassemblerInsn "add" for 0x401f2f>, <DisassemblerInsn "mov" for 0x401f32>, <DisassemblerInsn "xorps" for 0x401f3a>, <DisassemblerInsn "mov" for 0x401f3d>, <DisassemblerInsn "cmp" for 0x401f42>, <DisassemblerInsn "mov" for 0x401f45>, <DisassemblerInsn "movss" for 0x401f4d>, <DisassemblerInsn "mov" for 0x401f56>, <DisassemblerInsn "mov" for 0x401f5e>, <DisassemblerInsn "jne" for 0x401f65>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013d1>, <DisassemblerInsn "mov" for 0x4013d9>, <DisassemblerInsn "mov" for 0x4013e0>, <DisassemblerInsn "sub" for 0x4013e7>, <DisassemblerInsn "mov" for 0x4013e9>, <DisassemblerInsn "jmp" for 0x4013eb>]'}, {'block_Idx': 199, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4039aa>, <DisassemblerInsn "mov" for 0x4039b2>, <DisassemblerInsn "mov" for 0x4039ba>, <DisassemblerInsn "mov" for 0x4039c2>, <DisassemblerInsn "mov" for 0x4039ca>, <DisassemblerInsn "mov" for 0x4039d1>, <DisassemblerInsn "mov" for 0x4039d9>, <DisassemblerInsn "mov" for 0x4039e1>, <DisassemblerInsn "shl" for 0x4039e9>, <DisassemblerInsn "mov" for 0x4039ec>, <DisassemblerInsn "sar" for 0x4039f3>, <DisassemblerInsn "mov" for 0x4039f6>, <DisassemblerInsn "movsxd" for 0x4039fe>, <DisassemblerInsn "shl" for 0x403a01>, <DisassemblerInsn "add" for 0x403a05>, <DisassemblerInsn "add" for 0x403a08>, <DisassemblerInsn "cmp" for 0x403a0c>, <DisassemblerInsn "mov" for 0x403a0f>, <DisassemblerInsn "mov" for 0x403a17>, <DisassemblerInsn "mov" for 0x403a1a>, <DisassemblerInsn "mov" for 0x403a22>, <DisassemblerInsn "mov" for 0x403a25>, <DisassemblerInsn "mov" for 0x403a2d>, <DisassemblerInsn "mov" for 0x403a35>, <DisassemblerInsn "mov" for 0x403a3d>, <DisassemblerInsn "jne" for 0x403a45>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402fc2>, <DisassemblerInsn "mov" for 0x402fc9>, <DisassemblerInsn "mov" for 0x402fd1>, <DisassemblerInsn "mov" for 0x402fd3>, <DisassemblerInsn "shl" for 0x402fd5>, <DisassemblerInsn "xor" for 0x402fd9>, <DisassemblerInsn "call" for 0x402fdb>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402abc>, <DisassemblerInsn "mov" for 0x402ac4>, <DisassemblerInsn "mov" for 0x402acc>, <DisassemblerInsn "mov" for 0x402ad3>, <DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae2>, <DisassemblerInsn "add" for 0x402aea>, <DisassemblerInsn "movsxd" for 0x402aee>, <DisassemblerInsn "cmp" for 0x402af1>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "jl" for 0x402afc>]'}, {'block_Idx': 213, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40417c>, <DisassemblerInsn "mov" for 0x404183>, <DisassemblerInsn "mov" for 0x40418b>, <DisassemblerInsn "mov" for 0x404193>, <DisassemblerInsn "mov" for 0x40419b>, <DisassemblerInsn "mov" for 0x4041a3>, <DisassemblerInsn "mov" for 0x4041ab>, <DisassemblerInsn "mov" for 0x4041b3>, <DisassemblerInsn "sub" for 0x4041b6>, <DisassemblerInsn "mov" for 0x4041b9>, <DisassemblerInsn "movsxd" for 0x4041bc>, <DisassemblerInsn "mov" for 0x4041bf>, <DisassemblerInsn "call" for 0x4041c7>]'}, {'block_Idx': 190, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40320e>, <DisassemblerInsn "mov" for 0x403216>, <DisassemblerInsn "mov" for 0x40321e>, <DisassemblerInsn "mov" for 0x403226>, <DisassemblerInsn "mov" for 0x40322e>, <DisassemblerInsn "mov" for 0x403235>, <DisassemblerInsn "mov" for 0x40323d>, <DisassemblerInsn "mov" for 0x403245>, <DisassemblerInsn "mov" for 0x40324d>, <DisassemblerInsn "add" for 0x403250>, <DisassemblerInsn "shl" for 0x403257>, <DisassemblerInsn "add" for 0x40325b>, <DisassemblerInsn "mov" for 0x40325e>, <DisassemblerInsn "shl" for 0x403261>, <DisassemblerInsn "add" for 0x403265>, <DisassemblerInsn "mov" for 0x403268>, <DisassemblerInsn "mov" for 0x40326a>, <DisassemblerInsn "add" for 0x403271>, <DisassemblerInsn "shl" for 0x403278>, <DisassemblerInsn "add" for 0x40327c>, <DisassemblerInsn "shl" for 0x40327f>, <DisassemblerInsn "add" for 0x403283>, <DisassemblerInsn "cmp" for 0x403286>, <DisassemblerInsn "mov" for 0x403289>, <DisassemblerInsn "je" for 0x403290>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401afd>, <DisassemblerInsn "mov" for 0x401b04>, <DisassemblerInsn "mov" for 0x401b06>, <DisassemblerInsn "xor" for 0x401b0e>, <DisassemblerInsn "mov" for 0x401b10>, <DisassemblerInsn "mov" for 0x401b12>, <DisassemblerInsn "mov" for 0x401b17>, <DisassemblerInsn "mov" for 0x401b1f>, <DisassemblerInsn "mov" for 0x401b26>, <DisassemblerInsn "mov" for 0x401b2e>, <DisassemblerInsn "mov" for 0x401b36>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b45>, <DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "add" for 0x401b54>, <DisassemblerInsn "shl" for 0x401b5b>, <DisassemblerInsn "add" for 0x401b5f>, <DisassemblerInsn "shl" for 0x401b62>, <DisassemblerInsn "add" for 0x401b66>, <DisassemblerInsn "cmp" for 0x401b69>, <DisassemblerInsn "mov" for 0x401b6c>, <DisassemblerInsn "je" for 0x401b73>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b02>, <DisassemblerInsn "mov" for 0x402b0a>, <DisassemblerInsn "xor" for 0x402b0c>, <DisassemblerInsn "cmp" for 0x402b0e>, <DisassemblerInsn "mov" for 0x402b11>, <DisassemblerInsn "mov" for 0x402b19>, <DisassemblerInsn "jle" for 0x402b20>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "add" for 0x402cc5>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "movsxd" for 0x402ccb>, <DisassemblerInsn "cmp" for 0x402cce>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd9>, <DisassemblerInsn "jl" for 0x402ce0>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401932>, <DisassemblerInsn "mov" for 0x40193a>, <DisassemblerInsn "mov" for 0x401942>, <DisassemblerInsn "cmp" for 0x40194a>, <DisassemblerInsn "je" for 0x401952>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4024d3>, <DisassemblerInsn "mov" for 0x4024d8>, <DisassemblerInsn "jmp" for 0x4024df>]'}, {'block_Idx': 184, 'blockInsts': '[<DisassemblerInsn "movss" for 0x402a8b>, <DisassemblerInsn "jne" for 0x402a94>]'}, {'block_Idx': 193, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d89>, <DisassemblerInsn "mov" for 0x403d91>, <DisassemblerInsn "mov" for 0x403d98>, <DisassemblerInsn "mov" for 0x403d9a>, <DisassemblerInsn "mov" for 0x403da2>, <DisassemblerInsn "mov" for 0x403daa>, <DisassemblerInsn "add" for 0x403db2>, <DisassemblerInsn "add" for 0x403db6>, <DisassemblerInsn "cmp" for 0x403dbd>, <DisassemblerInsn "mov" for 0x403dc0>, <DisassemblerInsn "mov" for 0x403dc8>, <DisassemblerInsn "jne" for 0x403dd0>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d31>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "jmp" for 0x401d3d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "call" for 0x40179f>]'}, {'block_Idx': 219, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40472a>, <DisassemblerInsn "mov" for 0x40472c>, <DisassemblerInsn "mov" for 0x404733>, <DisassemblerInsn "add" for 0x40473a>, <DisassemblerInsn "pop" for 0x404741>, <DisassemblerInsn "pop" for 0x404742>, <DisassemblerInsn "ret" for 0x404744>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402b26>, <DisassemblerInsn "mov" for 0x402b2e>, <DisassemblerInsn "mov" for 0x402b36>, <DisassemblerInsn "cmp" for 0x402b3e>, <DisassemblerInsn "je" for 0x402b46>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "cmp" for 0x401204>, <DisassemblerInsn "je" for 0x401207>]'}, {'block_Idx': 149, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f75>, <DisassemblerInsn "mov" for 0x402f7d>, <DisassemblerInsn "mov" for 0x402f85>, <DisassemblerInsn "xor" for 0x402f87>, <DisassemblerInsn "mov" for 0x402f89>, <DisassemblerInsn "mov" for 0x402f90>, <DisassemblerInsn "mov" for 0x402f97>, <DisassemblerInsn "jmp" for 0x402f9f>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402db8>, <DisassemblerInsn "mov" for 0x402dc0>, <DisassemblerInsn "mov" for 0x402dc8>, <DisassemblerInsn "mov" for 0x402dcf>, <DisassemblerInsn "movsd" for 0x402dd6>, <DisassemblerInsn "mov" for 0x402ddf>, <DisassemblerInsn "add" for 0x402de2>, <DisassemblerInsn "mov" for 0x402de9>, <DisassemblerInsn "shl" for 0x402dec>, <DisassemblerInsn "add" for 0x402df0>, <DisassemblerInsn "mov" for 0x402df3>, <DisassemblerInsn "add" for 0x402dfb>, <DisassemblerInsn "shl" for 0x402e02>, <DisassemblerInsn "add" for 0x402e06>, <DisassemblerInsn "mov" for 0x402e09>, <DisassemblerInsn "mov" for 0x402e11>, <DisassemblerInsn "shl" for 0x402e16>, <DisassemblerInsn "mov" for 0x402e18>, <DisassemblerInsn "mov" for 0x402e20>, <DisassemblerInsn "mov" for 0x402e27>, <DisassemblerInsn "mov" for 0x402e29>, <DisassemblerInsn "xor" for 0x402e31>, <DisassemblerInsn "mov" for 0x402e33>, <DisassemblerInsn "mov" for 0x402e3b>, <DisassemblerInsn "mov" for 0x402e43>, <DisassemblerInsn "mov" for 0x402e4b>, <DisassemblerInsn "mov" for 0x402e53>, <DisassemblerInsn "mov" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e63>, <DisassemblerInsn "mov" for 0x402e6b>, <DisassemblerInsn "add" for 0x402e6e>, <DisassemblerInsn "mov" for 0x402e75>, <DisassemblerInsn "shl" for 0x402e78>, <DisassemblerInsn "add" for 0x402e7c>, <DisassemblerInsn "mov" for 0x402e7f>, <DisassemblerInsn "mov" for 0x402e87>, <DisassemblerInsn "cmp" for 0x402e8f>, <DisassemblerInsn "je" for 0x402e97>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d59>, <DisassemblerInsn "mov" for 0x403d60>, <DisassemblerInsn "mov" for 0x403d67>, <DisassemblerInsn "xor" for 0x403d6f>, <DisassemblerInsn "add" for 0x403d72>, <DisassemblerInsn "mov" for 0x403d74>, <DisassemblerInsn "mov" for 0x403d76>, <DisassemblerInsn "shl" for 0x403d78>, <DisassemblerInsn "add" for 0x403d7c>, <DisassemblerInsn "xor" for 0x403d80>, <DisassemblerInsn "call" for 0x403d82>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401557>, <DisassemblerInsn "mov" for 0x40155f>, <DisassemblerInsn "mov" for 0x401561>, <DisassemblerInsn "cmp" for 0x401568>, <DisassemblerInsn "jne" for 0x40156b>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "movss" for 0x4028e0>, <DisassemblerInsn "movss" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "movss" for 0x4028fa>, <DisassemblerInsn "movaps" for 0x402903>, <DisassemblerInsn "subss" for 0x402906>, <DisassemblerInsn "movss" for 0x40290f>, <DisassemblerInsn "mulss" for 0x402918>, <DisassemblerInsn "movss" for 0x40291c>, <DisassemblerInsn "subss" for 0x402925>, <DisassemblerInsn "movss" for 0x40292e>, <DisassemblerInsn "mulss" for 0x402937>, <DisassemblerInsn "movss" for 0x40293b>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "add" for 0x402947>, <DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "cmp" for 0x402953>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "movss" for 0x40295f>, <DisassemblerInsn "movss" for 0x402968>, <DisassemblerInsn "jb" for 0x402971>]'}, {'block_Idx': 220, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404659>, <DisassemblerInsn "mov" for 0x404660>, <DisassemblerInsn "shl" for 0x404668>, <DisassemblerInsn "mov" for 0x40466c>, <DisassemblerInsn "mov" for 0x404674>, <DisassemblerInsn "mov" for 0x404676>, <DisassemblerInsn "xor" for 0x40467e>, <DisassemblerInsn "mov" for 0x404680>, <DisassemblerInsn "mov" for 0x404688>, <DisassemblerInsn "mov" for 0x404690>, <DisassemblerInsn "mov" for 0x404698>, <DisassemblerInsn "mov" for 0x4046a0>, <DisassemblerInsn "mov" for 0x4046a8>, <DisassemblerInsn "mov" for 0x4046ad>, <DisassemblerInsn "add" for 0x4046b0>, <DisassemblerInsn "mov" for 0x4046b7>, <DisassemblerInsn "mov" for 0x4046bc>, <DisassemblerInsn "shl" for 0x4046bf>, <DisassemblerInsn "mov" for 0x4046c3>, <DisassemblerInsn "add" for 0x4046c8>, <DisassemblerInsn "mov" for 0x4046cb>, <DisassemblerInsn "add" for 0x4046d0>, <DisassemblerInsn "mov" for 0x4046d7>, <DisassemblerInsn "shl" for 0x4046dc>, <DisassemblerInsn "mov" for 0x4046e0>, <DisassemblerInsn "add" for 0x4046e5>, <DisassemblerInsn "mov" for 0x4046e8>, <DisassemblerInsn "shl" for 0x4046ed>, <DisassemblerInsn "mov" for 0x4046f1>, <DisassemblerInsn "add" for 0x4046f6>, <DisassemblerInsn "mov" for 0x4046f9>, <DisassemblerInsn "call" for 0x4046fe>]'}, {'block_Idx': 143, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "mov" for 0x401d64>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "mov" for 0x401d74>, <DisassemblerInsn "add" for 0x401d7b>, <DisassemblerInsn "shl" for 0x401d82>, <DisassemblerInsn "add" for 0x401d86>, <DisassemblerInsn "shl" for 0x401d89>, <DisassemblerInsn "add" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d90>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d99>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "add" for 0x401db0>, <DisassemblerInsn "cmp" for 0x401db4>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "mov" for 0x401dbf>, <DisassemblerInsn "jne" for 0x401dc6>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "mov" for 0x40125f>, <DisassemblerInsn "mov" for 0x401267>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "mov" for 0x401275>, <DisassemblerInsn "mov" for 0x401277>, <DisassemblerInsn "mov" for 0x40127a>, <DisassemblerInsn "mov" for 0x401282>, <DisassemblerInsn "shr" for 0x401284>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x401289>, <DisassemblerInsn "ror" for 0x40128c>, <DisassemblerInsn "ror" for 0x401290>, <DisassemblerInsn "ror" for 0x401293>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "and" for 0x401299>, <DisassemblerInsn "shl" for 0x40129c>, <DisassemblerInsn "mov" for 0x40129e>, <DisassemblerInsn "or" for 0x4012a5>, <DisassemblerInsn "mov" for 0x4012a8>, <DisassemblerInsn "shr" for 0x4012af>, <DisassemblerInsn "mov" for 0x4012b1>, <DisassemblerInsn "mov" for 0x4012b8>, <DisassemblerInsn "add" for 0x4012bf>, <DisassemblerInsn "mov" for 0x4012c1>, <DisassemblerInsn "mov" for 0x4012c8>, <DisassemblerInsn "cmp" for 0x4012ca>, <DisassemblerInsn "jl" for 0x4012cc>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f6b>, <DisassemblerInsn "mov" for 0x401f73>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "mov" for 0x401f8b>, <DisassemblerInsn "mov" for 0x401f8e>, <DisassemblerInsn "mov" for 0x401f91>, <DisassemblerInsn "shr" for 0x401f94>, <DisassemblerInsn "mov" for 0x401f97>, <DisassemblerInsn "ror" for 0x401f9a>, <DisassemblerInsn "ror" for 0x401f9e>, <DisassemblerInsn "ror" for 0x401fa1>, <DisassemblerInsn "mov" for 0x401fa5>, <DisassemblerInsn "and" for 0x401fa8>, <DisassemblerInsn "shl" for 0x401fab>, <DisassemblerInsn "mov" for 0x401fad>, <DisassemblerInsn "shr" for 0x401fb5>, <DisassemblerInsn "add" for 0x401fb8>, <DisassemblerInsn "mov" for 0x401fbc>, <DisassemblerInsn "add" for 0x401fbf>, <DisassemblerInsn "mov" for 0x401fc2>, <DisassemblerInsn "movsxd" for 0x401fc9>, <DisassemblerInsn "lea" for 0x401fcc>, <DisassemblerInsn "movss" for 0x401fd3>, <DisassemblerInsn "movss" for 0x401fdc>, <DisassemblerInsn "imul" for 0x401fe5>, <DisassemblerInsn "lea" for 0x401fe9>, <DisassemblerInsn "mov" for 0x401ff1>, <DisassemblerInsn "movzx" for 0x401ff9>, <DisassemblerInsn "mov" for 0x401ffc>, <DisassemblerInsn "and" for 0x402003>, <DisassemblerInsn "mov" for 0x402006>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "mov" for 0x40201d>, <DisassemblerInsn "lea" for 0x402025>, <DisassemblerInsn "movsxd" for 0x40202c>, <DisassemblerInsn "add" for 0x402030>, <DisassemblerInsn "mov" for 0x402033>, <DisassemblerInsn "mov" for 0x402036>, <DisassemblerInsn "mov" for 0x40203e>, <DisassemblerInsn "mov" for 0x402040>, <DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "mov" for 0x40204a>, <DisassemblerInsn "mov" for 0x402052>, <DisassemblerInsn "mov" for 0x402054>, <DisassemblerInsn "mov" for 0x40205b>, <DisassemblerInsn "mov" for 0x40205e>, <DisassemblerInsn "mov" for 0x402066>, <DisassemblerInsn "mov" for 0x402068>, <DisassemblerInsn "mov" for 0x40206f>, <DisassemblerInsn "mov" for 0x402077>, <DisassemblerInsn "jmp" for 0x40207e>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403bba>, <DisassemblerInsn "mov" for 0x403bc2>, <DisassemblerInsn "mov" for 0x403bc9>, <DisassemblerInsn "mov" for 0x403bcb>, <DisassemblerInsn "xor" for 0x403bd3>, <DisassemblerInsn "mov" for 0x403bd5>, <DisassemblerInsn "mov" for 0x403bdd>, <DisassemblerInsn "mov" for 0x403be5>, <DisassemblerInsn "mov" for 0x403bed>, <DisassemblerInsn "mov" for 0x403bf5>, <DisassemblerInsn "movss" for 0x403bfd>, <DisassemblerInsn "mov" for 0x403c06>, <DisassemblerInsn "mov" for 0x403c0e>, <DisassemblerInsn "mov" for 0x403c16>, <DisassemblerInsn "mov" for 0x403c1d>, <DisassemblerInsn "mov" for 0x403c25>, <DisassemblerInsn "add" for 0x403c28>, <DisassemblerInsn "mov" for 0x403c2f>, <DisassemblerInsn "mov" for 0x403c37>, <DisassemblerInsn "shl" for 0x403c3a>, <DisassemblerInsn "mov" for 0x403c3e>, <DisassemblerInsn "add" for 0x403c46>, <DisassemblerInsn "mov" for 0x403c49>, <DisassemblerInsn "mov" for 0x403c51>, <DisassemblerInsn "shl" for 0x403c54>, <DisassemblerInsn "mov" for 0x403c58>, <DisassemblerInsn "add" for 0x403c60>, <DisassemblerInsn "mov" for 0x403c63>, <DisassemblerInsn "movss" for 0x403c6b>, <DisassemblerInsn "shl" for 0x403c70>, <DisassemblerInsn "mov" for 0x403c72>, <DisassemblerInsn "mov" for 0x403c79>, <DisassemblerInsn "sar" for 0x403c80>, <DisassemblerInsn "mov" for 0x403c82>, <DisassemblerInsn "mov" for 0x403c8a>, <DisassemblerInsn "movsxd" for 0x403c91>, <DisassemblerInsn "add" for 0x403c94>, <DisassemblerInsn "mov" for 0x403c9a>, <DisassemblerInsn "shl" for 0x403ca2>, <DisassemblerInsn "mov" for 0x403ca6>, <DisassemblerInsn "add" for 0x403cae>, <DisassemblerInsn "mov" for 0x403cb1>, <DisassemblerInsn "shl" for 0x403cb9>, <DisassemblerInsn "mov" for 0x403cbd>, <DisassemblerInsn "add" for 0x403cc5>, <DisassemblerInsn "mov" for 0x403cc8>, <DisassemblerInsn "mulss" for 0x403cd0>, <DisassemblerInsn "movss" for 0x403cd4>, <DisassemblerInsn "mulss" for 0x403cdd>, <DisassemblerInsn "movss" for 0x403ce1>, <DisassemblerInsn "mov" for 0x403cea>, <DisassemblerInsn "add" for 0x403ced>, <DisassemblerInsn "mov" for 0x403cf1>, <DisassemblerInsn "movss" for 0x403cf9>, <DisassemblerInsn "add" for 0x403cfd>, <DisassemblerInsn "mov" for 0x403d01>, <DisassemblerInsn "cmp" for 0x403d09>, <DisassemblerInsn "mov" for 0x403d0c>, <DisassemblerInsn "mov" for 0x403d14>, <DisassemblerInsn "mov" for 0x403d17>, <DisassemblerInsn "mov" for 0x403d1f>, <DisassemblerInsn "jne" for 0x403d27>]'}, {'block_Idx': 210, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x403f1a>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403be5>, <DisassemblerInsn "mov" for 0x403bed>, <DisassemblerInsn "mov" for 0x403bf5>, <DisassemblerInsn "movss" for 0x403bfd>, <DisassemblerInsn "mov" for 0x403c06>, <DisassemblerInsn "mov" for 0x403c0e>, <DisassemblerInsn "mov" for 0x403c16>, <DisassemblerInsn "mov" for 0x403c1d>, <DisassemblerInsn "mov" for 0x403c25>, <DisassemblerInsn "add" for 0x403c28>, <DisassemblerInsn "mov" for 0x403c2f>, <DisassemblerInsn "mov" for 0x403c37>, <DisassemblerInsn "shl" for 0x403c3a>, <DisassemblerInsn "mov" for 0x403c3e>, <DisassemblerInsn "add" for 0x403c46>, <DisassemblerInsn "mov" for 0x403c49>, <DisassemblerInsn "mov" for 0x403c51>, <DisassemblerInsn "shl" for 0x403c54>, <DisassemblerInsn "mov" for 0x403c58>, <DisassemblerInsn "add" for 0x403c60>, <DisassemblerInsn "mov" for 0x403c63>, <DisassemblerInsn "movss" for 0x403c6b>, <DisassemblerInsn "shl" for 0x403c70>, <DisassemblerInsn "mov" for 0x403c72>, <DisassemblerInsn "mov" for 0x403c79>, <DisassemblerInsn "sar" for 0x403c80>, <DisassemblerInsn "mov" for 0x403c82>, <DisassemblerInsn "mov" for 0x403c8a>, <DisassemblerInsn "movsxd" for 0x403c91>, <DisassemblerInsn "add" for 0x403c94>, <DisassemblerInsn "mov" for 0x403c9a>, <DisassemblerInsn "shl" for 0x403ca2>, <DisassemblerInsn "mov" for 0x403ca6>, <DisassemblerInsn "add" for 0x403cae>, <DisassemblerInsn "mov" for 0x403cb1>, <DisassemblerInsn "shl" for 0x403cb9>, <DisassemblerInsn "mov" for 0x403cbd>, <DisassemblerInsn "add" for 0x403cc5>, <DisassemblerInsn "mov" for 0x403cc8>, <DisassemblerInsn "mulss" for 0x403cd0>, <DisassemblerInsn "movss" for 0x403cd4>, <DisassemblerInsn "mulss" for 0x403cdd>, <DisassemblerInsn "movss" for 0x403ce1>, <DisassemblerInsn "mov" for 0x403cea>, <DisassemblerInsn "add" for 0x403ced>, <DisassemblerInsn "mov" for 0x403cf1>, <DisassemblerInsn "movss" for 0x403cf9>, <DisassemblerInsn "add" for 0x403cfd>, <DisassemblerInsn "mov" for 0x403d01>, <DisassemblerInsn "cmp" for 0x403d09>, <DisassemblerInsn "mov" for 0x403d0c>, <DisassemblerInsn "mov" for 0x403d14>, <DisassemblerInsn "mov" for 0x403d17>, <DisassemblerInsn "mov" for 0x403d1f>, <DisassemblerInsn "jne" for 0x403d27>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4045a7>, <DisassemblerInsn "xor" for 0x4045af>, <DisassemblerInsn "mov" for 0x4045b1>, <DisassemblerInsn "mov" for 0x4045b9>, <DisassemblerInsn "mov" for 0x4045c1>, <DisassemblerInsn "add" for 0x4045c9>, <DisassemblerInsn "mov" for 0x4045cf>, <DisassemblerInsn "mov" for 0x4045d7>, <DisassemblerInsn "shl" for 0x4045da>, <DisassemblerInsn "mov" for 0x4045de>, <DisassemblerInsn "add" for 0x4045e6>, <DisassemblerInsn "mov" for 0x4045e9>, <DisassemblerInsn "mov" for 0x4045f1>, <DisassemblerInsn "mov" for 0x4045f9>, <DisassemblerInsn "add" for 0x4045fc>, <DisassemblerInsn "mov" for 0x404600>, <DisassemblerInsn "cmp" for 0x404608>, <DisassemblerInsn "mov" for 0x40460c>, <DisassemblerInsn "je" for 0x404614>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402f54>, <DisassemblerInsn "mov" for 0x402f5c>, <DisassemblerInsn "test" for 0x402f63>, <DisassemblerInsn "mov" for 0x402f66>, <DisassemblerInsn "jne" for 0x402f6e>]'}, {'block_Idx': 192, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032bb>, <DisassemblerInsn "movss" for 0x4032c2>, <DisassemblerInsn "mov" for 0x4032cb>, <DisassemblerInsn "mov" for 0x4032d3>, <DisassemblerInsn "mov" for 0x4032da>, <DisassemblerInsn "shl" for 0x4032dc>, <DisassemblerInsn "mov" for 0x4032de>, <DisassemblerInsn "mov" for 0x4032e5>, <DisassemblerInsn "sar" for 0x4032ec>, <DisassemblerInsn "mov" for 0x4032ee>, <DisassemblerInsn "mov" for 0x4032f5>, <DisassemblerInsn "movsxd" for 0x4032fc>, <DisassemblerInsn "movss" for 0x4032ff>, <DisassemblerInsn "mulss" for 0x403304>, <DisassemblerInsn "movss" for 0x403308>, <DisassemblerInsn "addss" for 0x403311>, <DisassemblerInsn "movss" for 0x403315>, <DisassemblerInsn "add" for 0x40331e>, <DisassemblerInsn "mov" for 0x403321>, <DisassemblerInsn "cmp" for 0x403328>, <DisassemblerInsn "movss" for 0x40332a>, <DisassemblerInsn "mov" for 0x403333>, <DisassemblerInsn "jne" for 0x40333a>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403fd6>, <DisassemblerInsn "mov" for 0x403fde>, <DisassemblerInsn "mov" for 0x403fe6>, <DisassemblerInsn "mov" for 0x403fee>, <DisassemblerInsn "mov" for 0x403ff6>, <DisassemblerInsn "mov" for 0x403ffe>, <DisassemblerInsn "mov" for 0x404006>, <DisassemblerInsn "mov" for 0x40400e>, <DisassemblerInsn "mov" for 0x404011>, <DisassemblerInsn "sub" for 0x404013>, <DisassemblerInsn "mov" for 0x404016>, <DisassemblerInsn "movsxd" for 0x404019>, <DisassemblerInsn "mov" for 0x40401c>, <DisassemblerInsn "mov" for 0x404024>, <DisassemblerInsn "call" for 0x404027>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f40>, <DisassemblerInsn "xor" for 0x403f48>, <DisassemblerInsn "mov" for 0x403f4a>, <DisassemblerInsn "call" for 0x403f4f>]'}, {'block_Idx': 188, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403516>, <DisassemblerInsn "mov" for 0x40351d>, <DisassemblerInsn "mov" for 0x403525>, <DisassemblerInsn "sub" for 0x403527>, <DisassemblerInsn "mov" for 0x403529>, <DisassemblerInsn "jmp" for 0x403530>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402ada>, <DisassemblerInsn "mov" for 0x402ae2>, <DisassemblerInsn "add" for 0x402aea>, <DisassemblerInsn "movsxd" for 0x402aee>, <DisassemblerInsn "cmp" for 0x402af1>, <DisassemblerInsn "mov" for 0x402af4>, <DisassemblerInsn "jl" for 0x402afc>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40188f>, <DisassemblerInsn "mov" for 0x401896>, <DisassemblerInsn "mov" for 0x40189e>, <DisassemblerInsn "add" for 0x4018a6>, <DisassemblerInsn "shl" for 0x4018ad>, <DisassemblerInsn "add" for 0x4018b1>, <DisassemblerInsn "mov" for 0x4018b4>, <DisassemblerInsn "mov" for 0x4018bc>, <DisassemblerInsn "mov" for 0x4018be>, <DisassemblerInsn "xor" for 0x4018c6>, <DisassemblerInsn "mov" for 0x4018c8>, <DisassemblerInsn "jmp" for 0x4018d0>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014f0>, <DisassemblerInsn "mov" for 0x4014f8>, <DisassemblerInsn "mov" for 0x401500>, <DisassemblerInsn "mov" for 0x401508>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "mov" for 0x401511>, <DisassemblerInsn "shl" for 0x401516>, <DisassemblerInsn "mov" for 0x401518>, <DisassemblerInsn "mov" for 0x401520>, <DisassemblerInsn "add" for 0x401522>, <DisassemblerInsn "cmp" for 0x401524>, <DisassemblerInsn "jle" for 0x401526>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402d72>, <DisassemblerInsn "movss" for 0x402d79>, <DisassemblerInsn "movss" for 0x402d82>, <DisassemblerInsn "cmp" for 0x402d8b>, <DisassemblerInsn "jle" for 0x402d8e>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ff>, <DisassemblerInsn "mov" for 0x401304>, <DisassemblerInsn "jmp" for 0x40130b>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402856>, <DisassemblerInsn "mov" for 0x40285d>, <DisassemblerInsn "mov" for 0x40285f>, <DisassemblerInsn "xor" for 0x402867>, <DisassemblerInsn "xorps" for 0x402869>, <DisassemblerInsn "mov" for 0x40286c>, <DisassemblerInsn "movaps" for 0x402874>, <DisassemblerInsn "mov" for 0x40287c>, <DisassemblerInsn "mov" for 0x402884>, <DisassemblerInsn "movaps" for 0x40288c>, <DisassemblerInsn "movaps" for 0x402894>, <DisassemblerInsn "mov" for 0x40289c>, <DisassemblerInsn "movss" for 0x4028a4>, <DisassemblerInsn "movss" for 0x4028ad>, <DisassemblerInsn "mov" for 0x4028b6>, <DisassemblerInsn "movss" for 0x4028bb>, <DisassemblerInsn "mov" for 0x4028c3>, <DisassemblerInsn "movaps" for 0x4028cb>, <DisassemblerInsn "movss" for 0x4028ce>, <DisassemblerInsn "movss" for 0x4028d7>, <DisassemblerInsn "movss" for 0x4028e0>, <DisassemblerInsn "movss" for 0x4028e9>, <DisassemblerInsn "mov" for 0x4028f2>, <DisassemblerInsn "movss" for 0x4028fa>, <DisassemblerInsn "movaps" for 0x402903>, <DisassemblerInsn "subss" for 0x402906>, <DisassemblerInsn "movss" for 0x40290f>, <DisassemblerInsn "mulss" for 0x402918>, <DisassemblerInsn "movss" for 0x40291c>, <DisassemblerInsn "subss" for 0x402925>, <DisassemblerInsn "movss" for 0x40292e>, <DisassemblerInsn "mulss" for 0x402937>, <DisassemblerInsn "movss" for 0x40293b>, <DisassemblerInsn "mov" for 0x402944>, <DisassemblerInsn "add" for 0x402947>, <DisassemblerInsn "mov" for 0x40294b>, <DisassemblerInsn "cmp" for 0x402953>, <DisassemblerInsn "mov" for 0x402957>, <DisassemblerInsn "movss" for 0x40295f>, <DisassemblerInsn "movss" for 0x402968>, <DisassemblerInsn "jb" for 0x402971>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4043bb>, <DisassemblerInsn "xor" for 0x4043c3>, <DisassemblerInsn "cmp" for 0x4043c5>, <DisassemblerInsn "mov" for 0x4043c8>, <DisassemblerInsn "jle" for 0x4043cf>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "mov" for 0x4016de>, <DisassemblerInsn "mov" for 0x4016e5>, <DisassemblerInsn "sub" for 0x4016e7>, <DisassemblerInsn "mov" for 0x4016e9>, <DisassemblerInsn "cmp" for 0x4016f0>, <DisassemblerInsn "je" for 0x4016f3>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404479>, <DisassemblerInsn "mov" for 0x404480>, <DisassemblerInsn "mov" for 0x404488>, <DisassemblerInsn "mov" for 0x404490>, <DisassemblerInsn "mov" for 0x404497>, <DisassemblerInsn "mov" for 0x40449f>, <DisassemblerInsn "add" for 0x4044a2>, <DisassemblerInsn "mov" for 0x4044a6>, <DisassemblerInsn "movss" for 0x4044ae>, <DisassemblerInsn "cvtss2si" for 0x4044b3>, <DisassemblerInsn "mov" for 0x4044b8>, <DisassemblerInsn "cmp" for 0x4044be>, <DisassemblerInsn "cmovg" for 0x4044c5>, <DisassemblerInsn "mov" for 0x4044c9>, <DisassemblerInsn "mov" for 0x4044d1>, <DisassemblerInsn "cmp" for 0x4044d7>, <DisassemblerInsn "cmovl" for 0x4044de>, <DisassemblerInsn "mov" for 0x4044e2>, <DisassemblerInsn "mov" for 0x4044ea>, <DisassemblerInsn "shl" for 0x4044ee>, <DisassemblerInsn "mov" for 0x4044f1>, <DisassemblerInsn "add" for 0x4044f9>, <DisassemblerInsn "mov" for 0x4044fc>, <DisassemblerInsn "add" for 0x404504>, <DisassemblerInsn "mov" for 0x404507>, <DisassemblerInsn "cmp" for 0x40450e>, <DisassemblerInsn "mov" for 0x404510>, <DisassemblerInsn "mov" for 0x404518>, <DisassemblerInsn "mov" for 0x404520>, <DisassemblerInsn "jne" for 0x404527>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d2>, <DisassemblerInsn "mov" for 0x4018da>, <DisassemblerInsn "mov" for 0x4018dc>, <DisassemblerInsn "cmp" for 0x4018e3>, <DisassemblerInsn "jle" for 0x4018e6>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e9d>, <DisassemblerInsn "mov" for 0x402ea5>, <DisassemblerInsn "movss" for 0x402ead>, <DisassemblerInsn "movsd" for 0x402eb6>, <DisassemblerInsn "mov" for 0x402ebf>, <DisassemblerInsn "mov" for 0x402ec7>, <DisassemblerInsn "mov" for 0x402ecf>, <DisassemblerInsn "add" for 0x402ed2>, <DisassemblerInsn "mov" for 0x402ed9>, <DisassemblerInsn "shl" for 0x402edc>, <DisassemblerInsn "add" for 0x402ee0>, <DisassemblerInsn "mov" for 0x402ee3>, <DisassemblerInsn "mov" for 0x402eeb>, <DisassemblerInsn "mov" for 0x402ef2>, <DisassemblerInsn "mov" for 0x402ef9>, <DisassemblerInsn "add" for 0x402efc>, <DisassemblerInsn "mov" for 0x402f03>, <DisassemblerInsn "shl" for 0x402f06>, <DisassemblerInsn "add" for 0x402f0a>, <DisassemblerInsn "mov" for 0x402f0d>, <DisassemblerInsn "movss" for 0x402f15>, <DisassemblerInsn "cvtss2sd" for 0x402f1e>, <DisassemblerInsn "divsd" for 0x402f22>, <DisassemblerInsn "cvtsd2ss" for 0x402f26>, <DisassemblerInsn "mulss" for 0x402f2a>, <DisassemblerInsn "movss" for 0x402f2e>, <DisassemblerInsn "mov" for 0x402f37>, <DisassemblerInsn "mov" for 0x402f39>, <DisassemblerInsn "mov" for 0x402f3b>, <DisassemblerInsn "cmp" for 0x402f42>, <DisassemblerInsn "setg" for 0x402f45>, <DisassemblerInsn "mov" for 0x402f48>, <DisassemblerInsn "cmp" for 0x402f4f>, <DisassemblerInsn "je" for 0x402f52>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401abd>, <DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "mov" for 0x401acd>, <DisassemblerInsn "cmp" for 0x401ad5>, <DisassemblerInsn "je" for 0x401add>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401882>, <DisassemblerInsn "test" for 0x401889>, <DisassemblerInsn "jne" for 0x40188b>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402e43>, <DisassemblerInsn "mov" for 0x402e4b>, <DisassemblerInsn "mov" for 0x402e53>, <DisassemblerInsn "mov" for 0x402e5b>, <DisassemblerInsn "mov" for 0x402e63>, <DisassemblerInsn "mov" for 0x402e6b>, <DisassemblerInsn "add" for 0x402e6e>, <DisassemblerInsn "mov" for 0x402e75>, <DisassemblerInsn "shl" for 0x402e78>, <DisassemblerInsn "add" for 0x402e7c>, <DisassemblerInsn "mov" for 0x402e7f>, <DisassemblerInsn "mov" for 0x402e87>, <DisassemblerInsn "cmp" for 0x402e8f>, <DisassemblerInsn "je" for 0x402e97>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x402f70>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40345f>, <DisassemblerInsn "mov" for 0x403467>, <DisassemblerInsn "mov" for 0x40346f>, <DisassemblerInsn "mov" for 0x403477>, <DisassemblerInsn "mov" for 0x40347e>, <DisassemblerInsn "movsxd" for 0x403485>, <DisassemblerInsn "lea" for 0x403488>, <DisassemblerInsn "shl" for 0x403490>, <DisassemblerInsn "add" for 0x403494>, <DisassemblerInsn "mov" for 0x403497>, <DisassemblerInsn "mov" for 0x40349f>, <DisassemblerInsn "mov" for 0x4034a1>, <DisassemblerInsn "mov" for 0x4034a9>, <DisassemblerInsn "mov" for 0x4034b0>, <DisassemblerInsn "mov" for 0x4034b8>, <DisassemblerInsn "mov" for 0x4034c0>, <DisassemblerInsn "mov" for 0x4034c8>, <DisassemblerInsn "mov" for 0x4034d0>, <DisassemblerInsn "mov" for 0x4034d8>, <DisassemblerInsn "mov" for 0x4034e0>, <DisassemblerInsn "mov" for 0x4034e8>, <DisassemblerInsn "mov" for 0x4034f0>, <DisassemblerInsn "mov" for 0x4034f8>, <DisassemblerInsn "mov" for 0x403500>, <DisassemblerInsn "mov" for 0x403508>, <DisassemblerInsn "cmp" for 0x403510>, <DisassemblerInsn "jge" for 0x403514>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403df0>, <DisassemblerInsn "cmp" for 0x403df8>, <DisassemblerInsn "jne" for 0x403dfb>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4027c9>, <DisassemblerInsn "mov" for 0x4027d1>, <DisassemblerInsn "mov" for 0x4027d9>, <DisassemblerInsn "mov" for 0x4027e0>, <DisassemblerInsn "mov" for 0x4027e7>, <DisassemblerInsn "add" for 0x4027ee>, <DisassemblerInsn "mov" for 0x4027f0>, <DisassemblerInsn "movsxd" for 0x4027f2>, <DisassemblerInsn "mov" for 0x4027f5>, <DisassemblerInsn "mov" for 0x4027fc>, <DisassemblerInsn "shl" for 0x4027ff>, <DisassemblerInsn "add" for 0x402803>, <DisassemblerInsn "shl" for 0x402806>, <DisassemblerInsn "add" for 0x40280a>, <DisassemblerInsn "movss" for 0x40280d>, <DisassemblerInsn "movss" for 0x402811>, <DisassemblerInsn "add" for 0x40281a>, <DisassemblerInsn "cmp" for 0x40281e>, <DisassemblerInsn "mov" for 0x402822>, <DisassemblerInsn "jne" for 0x40282a>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "mov" for 0x401aeb>, <DisassemblerInsn "mov" for 0x401aed>, <DisassemblerInsn "cmp" for 0x401af4>, <DisassemblerInsn "jle" for 0x401af7>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "mov" for 0x40160d>, <DisassemblerInsn "mov" for 0x401615>, <DisassemblerInsn "mov" for 0x40161d>, <DisassemblerInsn "mov" for 0x401625>, <DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "mov" for 0x401638>, <DisassemblerInsn "shr" for 0x40163b>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401645>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "mov" for 0x40164a>, <DisassemblerInsn "and" for 0x40164d>, <DisassemblerInsn "mov" for 0x401650>, <DisassemblerInsn "movzx" for 0x401657>, <DisassemblerInsn "shl" for 0x40165a>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "shr" for 0x40166b>, <DisassemblerInsn "mov" for 0x40166e>, <DisassemblerInsn "add" for 0x401675>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "and" for 0x401684>, <DisassemblerInsn "mov" for 0x401687>, <DisassemblerInsn "mov" for 0x40168e>, <DisassemblerInsn "mov" for 0x401691>, <DisassemblerInsn "or" for 0x401699>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "add" for 0x4016a2>, <DisassemblerInsn "mov" for 0x4016a6>, <DisassemblerInsn "cmp" for 0x4016ae>, <DisassemblerInsn "mov" for 0x4016b1>, <DisassemblerInsn "mov" for 0x4016b9>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016c2>, <DisassemblerInsn "jne" for 0x4016c9>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402c9b>, <DisassemblerInsn "mov" for 0x402ca3>, <DisassemblerInsn "mov" for 0x402caa>, <DisassemblerInsn "add" for 0x402cb1>, <DisassemblerInsn "mov" for 0x402cb3>, <DisassemblerInsn "mov" for 0x402cb5>, <DisassemblerInsn "mov" for 0x402cbd>, <DisassemblerInsn "add" for 0x402cc5>, <DisassemblerInsn "mov" for 0x402cc9>, <DisassemblerInsn "movsxd" for 0x402ccb>, <DisassemblerInsn "cmp" for 0x402cce>, <DisassemblerInsn "mov" for 0x402cd1>, <DisassemblerInsn "mov" for 0x402cd9>, <DisassemblerInsn "jl" for 0x402ce0>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dcc>, <DisassemblerInsn "mov" for 0x401dd4>, <DisassemblerInsn "add" for 0x401ddc>, <DisassemblerInsn "cmp" for 0x401de0>, <DisassemblerInsn "mov" for 0x401de3>, <DisassemblerInsn "jne" for 0x401deb>]'}, {'block_Idx': 211, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x404029>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40317e>, <DisassemblerInsn "mov" for 0x403186>, <DisassemblerInsn "mov" for 0x40318e>, <DisassemblerInsn "mov" for 0x403196>, <DisassemblerInsn "mov" for 0x40319e>, <DisassemblerInsn "mov" for 0x4031a5>, <DisassemblerInsn "mov" for 0x4031ad>, <DisassemblerInsn "shl" for 0x4031af>, <DisassemblerInsn "mov" for 0x4031b1>, <DisassemblerInsn "sar" for 0x4031b8>, <DisassemblerInsn "mov" for 0x4031ba>, <DisassemblerInsn "movsxd" for 0x4031c1>, <DisassemblerInsn "add" for 0x4031c4>, <DisassemblerInsn "shl" for 0x4031ca>, <DisassemblerInsn "add" for 0x4031ce>, <DisassemblerInsn "shl" for 0x4031d1>, <DisassemblerInsn "add" for 0x4031d5>, <DisassemblerInsn "mov" for 0x4031d8>, <DisassemblerInsn "sub" for 0x4031da>, <DisassemblerInsn "movsxd" for 0x4031dc>, <DisassemblerInsn "mov" for 0x4031df>, <DisassemblerInsn "mov" for 0x4031e7>, <DisassemblerInsn "mov" for 0x4031e9>, <DisassemblerInsn "xor" for 0x4031f1>, <DisassemblerInsn "mov" for 0x4031f3>, <DisassemblerInsn "xor" for 0x4031f5>, <DisassemblerInsn "mov" for 0x4031f7>, <DisassemblerInsn "mov" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403206>, <DisassemblerInsn "mov" for 0x40320e>, <DisassemblerInsn "mov" for 0x403216>, <DisassemblerInsn "mov" for 0x40321e>, <DisassemblerInsn "mov" for 0x403226>, <DisassemblerInsn "mov" for 0x40322e>, <DisassemblerInsn "mov" for 0x403235>, <DisassemblerInsn "mov" for 0x40323d>, <DisassemblerInsn "mov" for 0x403245>, <DisassemblerInsn "mov" for 0x40324d>, <DisassemblerInsn "add" for 0x403250>, <DisassemblerInsn "shl" for 0x403257>, <DisassemblerInsn "add" for 0x40325b>, <DisassemblerInsn "mov" for 0x40325e>, <DisassemblerInsn "shl" for 0x403261>, <DisassemblerInsn "add" for 0x403265>, <DisassemblerInsn "mov" for 0x403268>, <DisassemblerInsn "mov" for 0x40326a>, <DisassemblerInsn "add" for 0x403271>, <DisassemblerInsn "shl" for 0x403278>, <DisassemblerInsn "add" for 0x40327c>, <DisassemblerInsn "shl" for 0x40327f>, <DisassemblerInsn "add" for 0x403283>, <DisassemblerInsn "cmp" for 0x403286>, <DisassemblerInsn "mov" for 0x403289>, <DisassemblerInsn "je" for 0x403290>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ce2>, <DisassemblerInsn "mov" for 0x401cea>, <DisassemblerInsn "mov" for 0x401cf1>, <DisassemblerInsn "mov" for 0x401cf8>, <DisassemblerInsn "mov" for 0x401d00>, <DisassemblerInsn "movsx" for 0x401d07>, <DisassemblerInsn "add" for 0x401d0a>, <DisassemblerInsn "mov" for 0x401d0c>, <DisassemblerInsn "cmp" for 0x401d0e>, <DisassemblerInsn "jge" for 0x401d11>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e07>, <DisassemblerInsn "mov" for 0x401e0f>, <DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e19>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "shr" for 0x401e1e>, <DisassemblerInsn "mov" for 0x401e21>, <DisassemblerInsn "mov" for 0x401e23>, <DisassemblerInsn "mov" for 0x401e27>, <DisassemblerInsn "and" for 0x401e29>, <DisassemblerInsn "movzx" for 0x401e2c>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "add" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "mov" for 0x401e3c>, <DisassemblerInsn "shr" for 0x401e41>, <DisassemblerInsn "mov" for 0x401e43>, <DisassemblerInsn "and" for 0x401e4a>, <DisassemblerInsn "cmp" for 0x401e4c>, <DisassemblerInsn "je" for 0x401e4f>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403f1c>, <DisassemblerInsn "mov" for 0x403f24>, <DisassemblerInsn "mov" for 0x403f2c>, <DisassemblerInsn "test" for 0x403f2e>, <DisassemblerInsn "setne" for 0x403f30>, <DisassemblerInsn "sub" for 0x403f33>, <DisassemblerInsn "sete" for 0x403f37>, <DisassemblerInsn "and" for 0x403f3a>, <DisassemblerInsn "test" for 0x403f3c>, <DisassemblerInsn "jne" for 0x403f3e>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403d9a>, <DisassemblerInsn "mov" for 0x403da2>, <DisassemblerInsn "mov" for 0x403daa>, <DisassemblerInsn "add" for 0x403db2>, <DisassemblerInsn "add" for 0x403db6>, <DisassemblerInsn "cmp" for 0x403dbd>, <DisassemblerInsn "mov" for 0x403dc0>, <DisassemblerInsn "mov" for 0x403dc8>, <DisassemblerInsn "jne" for 0x403dd0>]'}, {'block_Idx': 187, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403abe>, <DisassemblerInsn "mov" for 0x403ac6>, <DisassemblerInsn "mov" for 0x403ace>, <DisassemblerInsn "xor" for 0x403ad0>, <DisassemblerInsn "mov" for 0x403ad2>, <DisassemblerInsn "mov" for 0x403ad9>, <DisassemblerInsn "mov" for 0x403ae0>, <DisassemblerInsn "mov" for 0x403ae8>, <DisassemblerInsn "mov" for 0x403af0>, <DisassemblerInsn "mov" for 0x403af7>, <DisassemblerInsn "mov" for 0x403afe>, <DisassemblerInsn "mov" for 0x403b05>, <DisassemblerInsn "movss" for 0x403b0d>, <DisassemblerInsn "movsxd" for 0x403b16>, <DisassemblerInsn "mulss" for 0x403b19>, <DisassemblerInsn "movss" for 0x403b23>, <DisassemblerInsn "mov" for 0x403b2c>, <DisassemblerInsn "add" for 0x403b2f>, <DisassemblerInsn "mov" for 0x403b33>, <DisassemblerInsn "movss" for 0x403b3b>, <DisassemblerInsn "add" for 0x403b3f>, <DisassemblerInsn "mov" for 0x403b42>, <DisassemblerInsn "and" for 0x403b49>, <DisassemblerInsn "mov" for 0x403b4f>, <DisassemblerInsn "add" for 0x403b56>, <DisassemblerInsn "mov" for 0x403b59>, <DisassemblerInsn "cmp" for 0x403b60>, <DisassemblerInsn "mov" for 0x403b62>, <DisassemblerInsn "mov" for 0x403b69>, <DisassemblerInsn "mov" for 0x403b70>, <DisassemblerInsn "je" for 0x403b78>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d42>, <DisassemblerInsn "mov" for 0x401d49>, <DisassemblerInsn "add" for 0x401d50>, <DisassemblerInsn "add" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d55>, <DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "mov" for 0x401d64>, <DisassemblerInsn "mov" for 0x401d6c>, <DisassemblerInsn "mov" for 0x401d74>, <DisassemblerInsn "add" for 0x401d7b>, <DisassemblerInsn "shl" for 0x401d82>, <DisassemblerInsn "add" for 0x401d86>, <DisassemblerInsn "shl" for 0x401d89>, <DisassemblerInsn "add" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d90>, <DisassemblerInsn "mov" for 0x401d92>, <DisassemblerInsn "mov" for 0x401d99>, <DisassemblerInsn "mov" for 0x401da1>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "add" for 0x401db0>, <DisassemblerInsn "cmp" for 0x401db4>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "mov" for 0x401dbf>, <DisassemblerInsn "jne" for 0x401dc6>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x404616>, <DisassemblerInsn "mov" for 0x40461d>, <DisassemblerInsn "mov" for 0x404625>, <DisassemblerInsn "mov" for 0x40462d>, <DisassemblerInsn "lea" for 0x404634>, <DisassemblerInsn "movsxd" for 0x40463c>, <DisassemblerInsn "mov" for 0x40463f>, <DisassemblerInsn "call" for 0x404647>]'}, {'block_Idx': 182, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403370>, <DisassemblerInsn "mov" for 0x403378>, <DisassemblerInsn "mov" for 0x403380>, <DisassemblerInsn "mov" for 0x403387>, <DisassemblerInsn "mov" for 0x40338e>, <DisassemblerInsn "shl" for 0x403395>, <DisassemblerInsn "mov" for 0x403397>, <DisassemblerInsn "sar" for 0x40339e>, <DisassemblerInsn "mov" for 0x4033a0>, <DisassemblerInsn "movsxd" for 0x4033a8>, <DisassemblerInsn "shl" for 0x4033ab>, <DisassemblerInsn "add" for 0x4033af>, <DisassemblerInsn "add" for 0x4033b2>, <DisassemblerInsn "cmp" for 0x4033b6>, <DisassemblerInsn "mov" for 0x4033b9>, <DisassemblerInsn "mov" for 0x4033c1>, <DisassemblerInsn "mov" for 0x4033c3>, <DisassemblerInsn "mov" for 0x4033ca>, <DisassemblerInsn "mov" for 0x4033d2>, <DisassemblerInsn "jne" for 0x4033d9>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403de3>, <DisassemblerInsn "cmp" for 0x403deb>, <DisassemblerInsn "je" for 0x403dee>]'}, {'block_Idx': 216, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4040cf>, <DisassemblerInsn "mov" for 0x4040d6>, <DisassemblerInsn "mov" for 0x4040de>, <DisassemblerInsn "mov" for 0x4040e6>, <DisassemblerInsn "cdqe" for 0x4040ee>, <DisassemblerInsn "mov" for 0x4040f0>, <DisassemblerInsn "shl" for 0x4040f3>, <DisassemblerInsn "add" for 0x4040f7>, <DisassemblerInsn "shl" for 0x4040fa>, <DisassemblerInsn "add" for 0x4040fe>, <DisassemblerInsn "shl" for 0x404101>, <DisassemblerInsn "call" for 0x404105>]'}, {'block_Idx': 209, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4036da>, <DisassemblerInsn "mov" for 0x4036e2>, <DisassemblerInsn "mov" for 0x4036e9>, <DisassemblerInsn "mov" for 0x4036f0>, <DisassemblerInsn "movss" for 0x4036f7>, <DisassemblerInsn "mov" for 0x403700>, <DisassemblerInsn "mov" for 0x403708>, <DisassemblerInsn "mov" for 0x40370f>, <DisassemblerInsn "movsxd" for 0x403717>, <DisassemblerInsn "movss" for 0x40371a>, <DisassemblerInsn "add" for 0x403724>, <DisassemblerInsn "mov" for 0x403727>, <DisassemblerInsn "and" for 0x40372e>, <DisassemblerInsn "mov" for 0x403734>, <DisassemblerInsn "mov" for 0x40373b>, <DisassemblerInsn "shl" for 0x40373e>, <DisassemblerInsn "mov" for 0x403741>, <DisassemblerInsn "mov" for 0x403748>, <DisassemblerInsn "sar" for 0x403750>, <DisassemblerInsn "mov" for 0x403753>, <DisassemblerInsn "mov" for 0x40375b>, <DisassemblerInsn "movsxd" for 0x403763>, <DisassemblerInsn "mulss" for 0x403766>, <DisassemblerInsn "movss" for 0x40376c>, <DisassemblerInsn "mulss" for 0x403775>, <DisassemblerInsn "movss" for 0x403779>, <DisassemblerInsn "mov" for 0x403782>, <DisassemblerInsn "add" for 0x403785>, <DisassemblerInsn "mov" for 0x403789>, <DisassemblerInsn "movss" for 0x403791>, <DisassemblerInsn "add" for 0x403796>, <DisassemblerInsn "mov" for 0x403799>, <DisassemblerInsn "cmp" for 0x4037a0>, <DisassemblerInsn "mov" for 0x4037a2>, <DisassemblerInsn "mov" for 0x4037a4>, <DisassemblerInsn "mov" for 0x4037ab>, <DisassemblerInsn "mov" for 0x4037b2>, <DisassemblerInsn "mov" for 0x4037b5>, <DisassemblerInsn "mov" for 0x4037bd>, <DisassemblerInsn "mov" for 0x4037c4>, <DisassemblerInsn "mov" for 0x4037cc>, <DisassemblerInsn "je" for 0x4037d4>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40435c>, <DisassemblerInsn "mov" for 0x404364>, <DisassemblerInsn "add" for 0x404367>, <DisassemblerInsn "mov" for 0x40436e>, <DisassemblerInsn "mov" for 0x404376>, <DisassemblerInsn "mov" for 0x40437c>, <DisassemblerInsn "mov" for 0x404383>, <DisassemblerInsn "add" for 0x404386>, <DisassemblerInsn "mov" for 0x40438a>, <DisassemblerInsn "mov" for 0x404392>, <DisassemblerInsn "mov" for 0x404395>, <DisassemblerInsn "mov" for 0x40439c>, <DisassemblerInsn "mov" for 0x4043a3>, <DisassemblerInsn "mov" for 0x4043ab>, <DisassemblerInsn "cmp" for 0x4043b2>, <DisassemblerInsn "jne" for 0x4043b5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40120d>, <DisassemblerInsn "mov" for 0x401215>, <DisassemblerInsn "mov" for 0x40121d>, <DisassemblerInsn "mov" for 0x40121f>, <DisassemblerInsn "add" for 0x401226>, <DisassemblerInsn "or" for 0x401229>, <DisassemblerInsn "bsr" for 0x40122c>, <DisassemblerInsn "xor" for 0x40122f>, <DisassemblerInsn "mov" for 0x401232>, <DisassemblerInsn "mov" for 0x401239>, <DisassemblerInsn "sub" for 0x40123e>, <DisassemblerInsn "mov" for 0x401240>, <DisassemblerInsn "cmp" for 0x401247>, <DisassemblerInsn "je" for 0x40124a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 169, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5b4]>', '<mov~~rcx, qword ptr [rsp + 0x960]>', '<mov~~rdx, qword ptr [rsp + 0x2b0]>', '<mov~~qword ptr [rsp + 0x1f8], rdx>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x204], ecx>', '<cmp~~eax, ecx>', '<jle~~0x403d9a>']}, {'block_Idx': 174, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x5fc]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movss~~xmm1, dword ptr [rsp + 0x604]>', '<movss~~xmm4, dword ptr [rip + 0x1dc2]>', '<subss~~xmm4, xmm2>', '<mulss~~xmm4, xmm1>', '<mulss~~xmm1, xmm4>', '<movss~~xmm4, dword ptr [rip + 0x1dae]>', '<addss~~xmm2, xmm4>', '<mulss~~xmm2, xmm0>', '<mulss~~xmm0, xmm2>', '<addss~~xmm0, xmm1>', '<movd~~r9d, xmm0>', '<mov~~edi, r9d>', '<shr~~edi, 0x17>', '<mov~~r8d, r9d>', '<shr~~r8d, 0x10>', '<and~~r8d, 0x7f>', '<shl~~r9d, 7>', '<and~~r9d, 0x7fff80>', '<or~~r9d, 0x3f800000>', '<movd~~xmm4, r9d>', '<mov~~r8d, r8d>', '<movss~~xmm2, dword ptr [rdx + r8*4 + 0x26b64]>', '<movss~~xmm0, dword ptr [rdx + r8*4 + 0x26d64]>', '<mov~~edi, edi>', '<movss~~xmm1, dword ptr [rdx + rdi*4 + 0x26764]>', '<mulss~~xmm0, xmm4>', '<addss~~xmm0, xmm2>', '<mulss~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<cmpltss~~xmm0, xmm1>', '<movaps~~xmm2, xmm0>', '<andps~~xmm2, xmm1>', '<andnps~~xmm0, xmm3>', '<orps~~xmm0, xmm2>', '<add~~rdx, 0x4e0>', '<shl~~rsi, 0xd>', '<add~~rdx, rsi>', '<mov~~rsi, rax>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<movss~~dword ptr [rdx], xmm1>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x648], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x650], xmm1>', '<movss~~dword ptr [rsp + 0x664], xmm0>', '<jne~~0x40287c>']}, {'block_Idx': 191, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x468]>', '<mov~~ecx, dword ptr [rsp + 0x470]>', '<movss~~xmm0, dword ptr [rsp + 0x458]>', '<cvtsi2ss~~xmm1, ecx>', '<divss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + rax*4 + 0xc70], xmm0>', '<mov~~dword ptr [rsp + 0x474], eax>', '<mov~~rsi, qword ptr [rsp + 0x480]>', '<mov~~rdx, qword ptr [rsp + 0x468]>', '<mov~~edi, dword ptr [rsp + 0x470]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~eax, dword ptr [rsp + 0x474]>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x460]>', '<movsxd~~rdi, edi>', '<shl~~rdi, 2>', '<add~~rcx, rdi>', '<add~~rdx, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x488], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x494], edx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<jne~~0x40320e>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x67c]>', '<shr~~eax, 0xfd>', '<mov~~ecx, 3>', '<mov~~dword ptr [rsp + 0x668], ecx>', '<mov~~dword ptr [rsp + 0x66c], eax>', '<jmp~~0x4027c9>']}, {'block_Idx': 200, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3d0]>', '<mov~~rcx, qword ptr [rsp + 0x3d8]>', '<mov~~rdx, qword ptr [rsp + 0xbd0]>', '<mov~~esi, dword ptr [rdx]>', '<xor~~edx, edx>', '<mov~~dword ptr [rsp + 0x348], esi>', '<mov~~dword ptr [rsp + 0x34c], edx>', '<mov~~qword ptr [rsp + 0x350], rcx>', '<mov~~qword ptr [rsp + 0x358], rax>', '<mov~~r9, qword ptr [rsp + 0x358]>', '<mov~~r8, qword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x34c]>', '<mov~~edx, dword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x3c8]>', '<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~r10, qword ptr [rsp + 0xa30]>', '<movsxd~~r11, edx>', '<movss~~xmm1, dword ptr [r10 + r11*4 + 0x1c75c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x310], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x314], edx>', '<mov~~r10, r9>', '<add~~r10, 4>', '<mov~~qword ptr [rsp + 0x320], r10>', '<addss~~xmm1, dword ptr [r9]>', '<movss~~dword ptr [rsp + 0x318], xmm1>', '<mov~~r9d, esi>', '<shl~~r9d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x31c], r9d>', '<sar~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~dword ptr [rsp + 0x32c], r9d>', '<movsxd~~r9, r9d>', '<mulss~~xmm1, dword ptr [rax + r9*4]>', '<movss~~dword ptr [rsp + 0x330], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x334], xmm0>', '<mov~~rax, r8>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x338], rax>', '<movss~~dword ptr [r8], xmm0>', '<add~~esi, 1>', '<mov~~dword ptr [rsp + 0x344], esi>', '<cmp~~esi, edi>', '<mov~~edi, edx>', '<mov~~dword ptr [rsp + 0x348], edi>', '<mov~~dword ptr [rsp + 0x34c], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x350], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x358], rsi>', '<mov~~dword ptr [rsp + 0x384], edx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~qword ptr [rsp + 0x390], rax>', '<jne~~0x403849>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xc00]>', '<mov~~eax, dword ptr [rsp + 0x5b4]>', '<movsxd~~rdx, eax>', '<shl~~rdx, 2>', '<xor~~esi, esi>', '<call~~0x500098>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb98]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x680], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x688], rax>', '<mov~~rdx, qword ptr [rsp + 0x680]>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0x688]>', '<mov~~qword ptr [rsp + 0x670], rax>', '<add~~eax, -8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x678], ecx>', '<mov~~esi, ecx>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edx, dword ptr [rdx + rsi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<shl~~edx, cl>', '<mov~~dword ptr [rsp + 0x67c], edx>', '<cmp~~eax, -7>', '<jae~~0x4027ac>']}, {'block_Idx': 88, 'blockInsts': ['<jmp~~0x401932>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x10750>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rdx, rcx>', '<shl~~rdx, 0xe>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~qword ptr [rsp + rcx*8 + 0xc60], rax>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<je~~0x4045b9>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9f8]>', '<mov~~rcx, qword ptr [rsp + 0xad0]>', '<mov~~rdx, qword ptr [rsp + 0xac8]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, eax>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3637]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~r9d, dword ptr [rsp + 0x1cc]>', '<mov~~rdi, qword ptr [rsp + 0xb50]>', '<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~r8d, 1>', '<mov~~ecx, r9d>', '<shl~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~dword ptr [rsp + 0x1a4], r8d>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, r8d>', '<mov~~esi, 2>', '<cdq~~>', '<idiv~~esi>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0xc40]>', '<mov~~edi, dword ptr [rdi]>', '<sub~~edi, r9d>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~r9, esi>', '<mov~~qword ptr [rsp + 0x1b8], r9>', '<mov~~rsi, r9>', '<shl~~rsi, 2>', '<add~~rcx, rsi>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<mov~~rsi, rdx>', '<add~~rsi, 0xc4f0>', '<shl~~r9, 2>', '<add~~rsi, r9>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<movsxd~~rdi, edi>', '<mov~~rdx, qword ptr [rdx + rdi*8 + 0x10720]>', '<mov~~rdi, rcx>', '<call~~rax>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x848]>', '<movss~~xmm0, dword ptr [rsp + 0x664]>', '<movss~~dword ptr [rax + rcx*4 + 0x44e0], xmm0>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x848]>', '<mov~~edx, dword ptr [rsp + 0x99c]>', '<mov~~dword ptr [rax + rcx*4 + 0x4cc], edx>', '<mov~~rcx, qword ptr [rsp + 0xb20]>', '<mov~~rax, qword ptr [rsp + 0x848]>', '<add~~rax, 1>', '<movsxd~~rcx, dword ptr [rcx]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x850], rax>', '<jl~~0x401e70>']}, {'block_Idx': 67, 'blockInsts': ['<jmp~~0x4018d2>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x158]>', '<cmp~~eax, 0>', '<je~~0x4011fc>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~r14, qword ptr [rsp + 0x5d0]>', '<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~cl, byte ptr [rsp + 0x5df]>', '<mov~~byte ptr [rsp + 0x5cf], cl>', '<mov~~rdi, r14>', '<movsxd~~rdx, dword ptr [rax]>', '<shl~~rdx, 2>', '<xor~~esi, esi>', '<call~~0x500098>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 139, 'blockInsts': ['<movaps~~xmmword ptr [rsp + 0x610], xmm0>', '<mov~~qword ptr [rsp + 0x620], rcx>', '<movss~~xmm0, dword ptr [rax + rcx*4 + 0x24764]>', '<movss~~dword ptr [rsp + 0x62c], xmm0>', '<mov~~eax, 1>', '<movss~~xmm0, dword ptr [rip + 0x1ebd]>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movaps~~xmm1, xmm0>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<movss~~xmm0, dword ptr [rsp + 0x63c]>', '<movss~~xmm1, dword ptr [rsp + 0x638]>', '<mov~~rcx, qword ptr [rsp + 0x630]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movaps~~xmm3, xmm2>', '<subss~~xmm3, dword ptr [rsp + rcx*4 + 0xcbc]>', '<movss~~dword ptr [rsp + 0x5f8], xmm3>', '<mulss~~xmm1, xmm3>', '<movss~~dword ptr [rsp + 0x5fc], xmm1>', '<subss~~xmm2, dword ptr [rsp + rcx*4 + 0xcc0]>', '<movss~~dword ptr [rsp + 0x600], xmm2>', '<mulss~~xmm0, xmm2>', '<movss~~dword ptr [rsp + 0x604], xmm0>', '<mov~~rax, rcx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x608], rax>', '<cmp~~rcx, 8>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<jb~~0x4028e0>']}, {'block_Idx': 223, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x404442>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x798]>', '<movss~~xmm0, dword ptr [rsp + 0x794]>', '<mov~~rcx, qword ptr [rsp + 0x788]>', '<mov~~edx, dword ptr [rsp + 0x784]>', '<mov~~rsi, qword ptr [rsp + 0xb98]>', '<mov~~rdi, qword ptr [rsp + 0xba0]>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x750], rdi>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~qword ptr [rsp + 0x758], rsi>', '<mov~~dword ptr [rsp + 0x764], edx>', '<mov~~qword ptr [rsp + 0x768], rcx>', '<movss~~dword ptr [rsp + 0x774], xmm0>', '<mov~~qword ptr [rsp + 0x778], rax>', '<jmp~~0x4022a9>']}, {'block_Idx': 203, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xbd0]>', '<mov~~esi, dword ptr [rsp + 0x384]>', '<mov~~rcx, qword ptr [rsp + 0x388]>', '<mov~~rax, qword ptr [rsp + 0x390]>', '<mov~~dword ptr [rdx], esi>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~qword ptr [rsp + 0x3c0], rax>', '<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~rsi, qword ptr [rsp + 0x3e8]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~r8d, dword ptr [rsp + 0x3c8]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~rdx, qword ptr [rsp + 0x3b8]>', '<mov~~r9, qword ptr [rsp + 0x3c0]>', '<mov~~qword ptr [rsp + 0x308], r9>', '<shl~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x308]>', '<movsxd~~r8, r8d>', '<shl~~r8, 2>', '<add~~rax, r8>', '<add~~rsi, 1>', '<cmp~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x400], rsi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x408], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x410], rsi>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<jne~~0x4034d0>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x998]>', '<mov~~rax, qword ptr [rsp + 0xb60]>', '<mov~~rcx, qword ptr [rsp + 0x990]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x974], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<ror~~di, 8>', '<ror~~edi, 0x10>', '<ror~~di, 8>', '<mov~~dword ptr [rsp + 0x978], edi>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x97c], ecx>', '<shl~~edi, cl>', '<mov~~dword ptr [rsp + 0x980], edi>', '<mov~~ecx, edi>', '<shr~~ecx, 0xf9>', '<mov~~dword ptr [rsp + 0x984], ecx>', '<add~~esi, 7>', '<mov~~dword ptr [rsp + 0x988], esi>', '<mov~~dword ptr [rax], esi>', '<mov~~eax, ecx>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x98c], eax>', '<cmp~~ecx, 0x7f>', '<mov~~dword ptr [rsp + 0x998], eax>', '<je~~0x401718>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x820]>', '<mov~~rdx, qword ptr [rsp + 0x828]>', '<movss~~xmm0, dword ptr [rsp + 0x834]>', '<mov~~rax, qword ptr [rsp + 0x838]>', '<mov~~esi, dword ptr [rsp + 0x844]>', '<mov~~dword ptr [rsp + 0x784], esi>', '<mov~~qword ptr [rsp + 0x788], rax>', '<movss~~dword ptr [rsp + 0x794], xmm0>', '<mov~~qword ptr [rsp + 0x798], rdx>', '<cmp~~rax, rcx>', '<movss~~dword ptr [rsp + 0x7a4], xmm0>', '<jae~~0x4026f7>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x8d8]>', '<mov~~rdx, qword ptr [rsp + 0x8c8]>', '<mov~~rsi, qword ptr [rsp + 0x958]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<add~~rcx, 0x1d8>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~edx, dword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<mov~~rcx, qword ptr [rsp + 0x8e0]>', '<mov~~rax, qword ptr [rsp + 0x8c8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x8e8], rax>', '<jne~~0x4019bf>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa04]>', '<mov~~dword ptr [rsp + 0x158], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<jl~~0x404733>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x8e0]>', '<mov~~rax, qword ptr [rsp + 0x8c8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x8e8], rax>', '<jne~~0x4019bf>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb38]>', '<mov~~rdx, qword ptr [rsp + 0xb28]>', '<mov~~rcx, qword ptr [rsp + 0xb30]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~dil, byte ptr [rcx + rdi]>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<movzx~~edi, dil>', '<shl~~edi, cl>', '<mov~~ecx, edi>', '<add~~esi, 1>', '<mov~~dword ptr [rdx], esi>', '<shr~~cl, 7>', '<mov~~byte ptr [rax], cl>', '<mov~~ecx, dword ptr [rsp + 0x9f0]>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x9ec], eax>', '<jle~~0x4016cf>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0x508]>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<mov~~ecx, dword ptr [rsp + rcx*4 + 0xcb8]>', '<mov~~dword ptr [rsp + 0x2ac], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<jle~~0x403d2d>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x8f8]>', '<mov~~rdi, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0x8d0]>', '<mov~~rdx, qword ptr [rsp + 0x8e8]>', '<mov~~qword ptr [rsp + 0x8c8], rdx>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~ecx, r8d>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<movzx~~eax, al>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<shr~~eax, 7>', '<add~~r8d, 1>', '<mov~~dword ptr [rdi], r8d>', '<and~~eax, 1>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~dword ptr [rcx], eax>', '<cmp~~eax, 0>', '<je~~0x401a6e>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x518]>', '<mov~~r8d, dword ptr [rsp + 0x514]>', '<mov~~edx, dword ptr [rsp + 0x510]>', '<mov~~esi, dword ptr [rsp + 0x548]>', '<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~r9, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~dword ptr [rsp + 0x4b8], r8d>', '<movsxd~~r10, edx>', '<movss~~xmm1, dword ptr [rax + r10*4 + 0x1c75c]>', '<shl~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x4b4], r8d>', '<sar~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x4b8]>', '<mov~~dword ptr [rsp + 0x4bc], r8d>', '<movsxd~~r8, r8d>', '<add~~rax, 0x4e0>', '<mov~~qword ptr [rsp + 0x4c0], rax>', '<shl~~r9, 0xd>', '<mov~~qword ptr [rsp + 0x4c8], r9>', '<add~~rax, r9>', '<mov~~qword ptr [rsp + 0x4d0], rax>', '<shl~~r8, 2>', '<mov~~qword ptr [rsp + 0x4d8], r8>', '<add~~rax, r8>', '<mov~~qword ptr [rsp + 0x4e0], rax>', '<mulss~~xmm1, dword ptr [rax]>', '<movss~~dword ptr [rsp + 0x4e8], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x4ec], xmm0>', '<mov~~rax, rdi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x4f0], rax>', '<movss~~dword ptr [rdi], xmm0>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x4fc], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x500], edx>', '<add~~ecx, 1>', '<mov~~dword ptr [rsp + 0x504], ecx>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x510], edx>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<mov~~qword ptr [rsp + 0x518], rax>', '<jne~~0x403008>']}, {'block_Idx': 189, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3e8]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rsi, qword ptr [rsp + 0xb08]>', '<mov~~rdx, qword ptr [rsp + 0xb50]>', '<mov~~edx, dword ptr [rdx]>', '<sub~~edx, dword ptr [rsi]>', '<movsxd~~rdx, edx>', '<add~~rax, 0x1d8>', '<shl~~rdx, 6>', '<add~~rax, rdx>', '<shl~~rcx, 2>', '<add~~rax, rcx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x3cc], eax>', '<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~ecx, dword ptr [rsp + 0x3cc]>', '<mov~~dword ptr [rsp + 0x3c8], ecx>', '<cmp~~rax, -1>', '<jle~~0x4037df>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbb8]>', '<cmp~~byte ptr [rax], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x5df], al>', '<mov~~r14, qword ptr [rsp + 0x5d0]>', '<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~cl, byte ptr [rsp + 0x5df]>', '<mov~~byte ptr [rsp + 0x5cf], cl>', '<mov~~rdi, r14>', '<movsxd~~rdx, dword ptr [rax]>', '<shl~~rdx, 2>', '<xor~~esi, esi>', '<call~~0x500098>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8f4]>', '<mov~~rdx, qword ptr [rsp + 0x8f8]>', '<mov~~rcx, qword ptr [rsp + 0xb58]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x8d0], rcx>', '<lea~~rcx, [rsp + 0xcb8]>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x8d8], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x8e0], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x8e8], rax>', '<mov~~rsi, qword ptr [rsp + 0x8f8]>', '<mov~~rdi, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0x8d0]>', '<mov~~rdx, qword ptr [rsp + 0x8e8]>', '<mov~~qword ptr [rsp + 0x8c8], rdx>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~ecx, r8d>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~ecx, r8d>', '<and~~ecx, 7>', '<movzx~~eax, al>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<shr~~eax, 7>', '<add~~r8d, 1>', '<mov~~dword ptr [rdi], r8d>', '<and~~eax, 1>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~dword ptr [rcx], eax>', '<cmp~~eax, 0>', '<je~~0x401a6e>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc38]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~r9, qword ptr [rsp + 0xa40]>', '<mov~~esi, dword ptr [rsp + 0x1dc]>', '<mov~~rax, qword ptr [rsp + 0xb18]>', '<mov~~eax, dword ptr [rax]>', '<mov~~r8d, 2>', '<cdq~~>', '<idiv~~r8d>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~r8d, eax>', '<mov~~rax, qword ptr [rsp + 0xb08]>', '<add~~esi, dword ptr [r9]>', '<add~~esi, r8d>', '<movsxd~~rsi, esi>', '<add~~rdx, 0x10750>', '<shl~~rdi, 0xe>', '<add~~rdx, rdi>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x1c8], eax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x1cc], ecx>', '<cmp~~eax, ecx>', '<jg~~0x40402e>']}, {'block_Idx': 230, 'blockInsts': ['<jmp~~0x4042c3>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x648]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x650]>', '<movaps~~xmmword ptr [rsp + 0x610], xmm0>', '<mov~~qword ptr [rsp + 0x620], rcx>', '<movss~~xmm0, dword ptr [rax + rcx*4 + 0x24764]>', '<movss~~dword ptr [rsp + 0x62c], xmm0>', '<mov~~eax, 1>', '<movss~~xmm0, dword ptr [rip + 0x1ebd]>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movaps~~xmm1, xmm0>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<movss~~xmm0, dword ptr [rsp + 0x63c]>', '<movss~~xmm1, dword ptr [rsp + 0x638]>', '<mov~~rcx, qword ptr [rsp + 0x630]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movaps~~xmm3, xmm2>', '<subss~~xmm3, dword ptr [rsp + rcx*4 + 0xcbc]>', '<movss~~dword ptr [rsp + 0x5f8], xmm3>', '<mulss~~xmm1, xmm3>', '<movss~~dword ptr [rsp + 0x5fc], xmm1>', '<subss~~xmm2, dword ptr [rsp + rcx*4 + 0xcc0]>', '<movss~~dword ptr [rsp + 0x600], xmm2>', '<mulss~~xmm0, xmm2>', '<movss~~dword ptr [rsp + 0x604], xmm0>', '<mov~~rax, rcx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x608], rax>', '<cmp~~rcx, 8>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<jb~~0x4028e0>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb50]>', '<mov~~rax, qword ptr [rsp + 0xb08]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, dword ptr [rcx]>', '<je~~0x401e55>']}, {'block_Idx': 173, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4f0]>', '<mov~~rcx, qword ptr [rsp + 0xbd0]>', '<mov~~edx, dword ptr [rsp + 0x500]>', '<mov~~dword ptr [rcx], edx>', '<mov~~qword ptr [rsp + 0x520], rax>', '<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x4ac], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<jle~~0x4033df>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb60]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x5c4], ecx>', '<xor~~eax, eax>', '<sub~~eax, ecx>', '<and~~eax, 7>', '<mov~~dword ptr [rsp + 0x5c8], eax>', '<cmp~~eax, 0>', '<je~~0x402cb5>']}, {'block_Idx': 232, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~qword ptr [rsp + 0x1d0], rcx>', '<mov~~eax, dword ptr [rax]>', '<mov~~esi, 0xfffffffe>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x403f1c>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x868]>', '<mov~~esi, dword ptr [rsp + 0x87c]>', '<mov~~rdx, qword ptr [rsp + 0x870]>', '<mov~~ecx, dword ptr [rsp + 0x878]>', '<add~~ecx, 9>', '<mov~~dword ptr [rsp + 0x864], ecx>', '<mov~~edi, ecx>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~edx, dword ptr [rdx + rdi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<shl~~edx, cl>', '<mov~~cx, word ptr [rsp + 0x882]>', '<shr~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x864]>', '<add~~edx, esi>', '<mov~~edx, edx>', '<mov~~esi, edx>', '<movsx~~edx, word ptr [rax + rsi*4]>', '<mov~~ax, word ptr [rax + rsi*4 + 2]>', '<mov~~dword ptr [rsp + 0x884], edx>', '<mov~~dword ptr [rsp + 0x888], ecx>', '<mov~~word ptr [rsp + 0x88e], ax>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~eax, dword ptr [rsp + 0x884]>', '<mov~~edx, dword ptr [rsp + 0x888]>', '<mov~~si, word ptr [rsp + 0x88e]>', '<mov~~dword ptr [rsp + 0x860], eax>', '<movsx~~esi, si>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<cmp~~eax, 0>', '<jge~~0x401d42>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x850]>', '<mov~~qword ptr [rsp + 0x848], rcx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x402ada>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<cmp~~dword ptr [rax], 0>', '<jle~~0x4042eb>']}, {'block_Idx': 141, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbb0]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2648]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x750]>', '<mov~~esi, dword ptr [rsp + 0x71c]>', '<mov~~ecx, dword ptr [rsp + 0x714]>', '<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~edi, dword ptr [rsp + 0x718]>', '<add~~edi, 8>', '<mov~~dword ptr [rsp + 0x6ec], edi>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~edx, dword ptr [rdx + rdi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<shl~~edx, cl>', '<mov~~cx, word ptr [rsp + 0x722]>', '<shr~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x6ec]>', '<add~~edx, esi>', '<mov~~edx, edx>', '<mov~~esi, edx>', '<movsx~~edx, word ptr [rax + rsi*4]>', '<mov~~dword ptr [rsp + 0x6f0], edx>', '<mov~~si, word ptr [rax + rsi*4 + 2]>', '<mov~~word ptr [rsp + 0x6f6], si>', '<movsx~~eax, si>', '<cmp~~si, 0>', '<mov~~dword ptr [rsp + 0x728], edx>', '<mov~~dword ptr [rsp + 0x72c], ecx>', '<mov~~dword ptr [rsp + 0x730], eax>', '<jge~~0x402488>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb58]>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0xb78]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x868], rax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x878], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~qword ptr [rsp + 0x870], rdx>', '<mov~~esi, ecx>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edx, dword ptr [rdx + rsi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x878]>', '<shr~~edx, 0xf7>', '<mov~~edx, edx>', '<mov~~esi, edx>', '<movsx~~edx, word ptr [rax + rsi*4]>', '<mov~~dword ptr [rsp + 0x87c], edx>', '<mov~~ax, word ptr [rax + rsi*4 + 2]>', '<mov~~word ptr [rsp + 0x882], ax>', '<cmp~~ax, 0>', '<mov~~dword ptr [rsp + 0x884], edx>', '<mov~~dword ptr [rsp + 0x888], ecx>', '<mov~~word ptr [rsp + 0x88e], ax>', '<jge~~0x401ce2>']}, {'block_Idx': 150, 'blockInsts': ['<mov~~qword ptr [rsp + 0x620], rcx>', '<movss~~xmm0, dword ptr [rax + rcx*4 + 0x24764]>', '<movss~~dword ptr [rsp + 0x62c], xmm0>', '<mov~~eax, 1>', '<movss~~xmm0, dword ptr [rip + 0x1ebd]>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movaps~~xmm1, xmm0>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<movss~~xmm0, dword ptr [rsp + 0x63c]>', '<movss~~xmm1, dword ptr [rsp + 0x638]>', '<mov~~rcx, qword ptr [rsp + 0x630]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movaps~~xmm3, xmm2>', '<subss~~xmm3, dword ptr [rsp + rcx*4 + 0xcbc]>', '<movss~~dword ptr [rsp + 0x5f8], xmm3>', '<mulss~~xmm1, xmm3>', '<movss~~dword ptr [rsp + 0x5fc], xmm1>', '<subss~~xmm2, dword ptr [rsp + rcx*4 + 0xcc0]>', '<movss~~dword ptr [rsp + 0x600], xmm2>', '<mulss~~xmm0, xmm2>', '<movss~~dword ptr [rsp + 0x604], xmm0>', '<mov~~rax, rcx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x608], rax>', '<cmp~~rcx, 8>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<jb~~0x4028e0>']}, {'block_Idx': 166, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x6a0]>', '<mov~~eax, dword ptr [rsp + 0x6ac]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6b0], rcx>', '<mov~~dword ptr [rsp + 0x6bc], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x6b0]>', '<mov~~eax, dword ptr [rsp + 0x6bc]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6c0], rcx>', '<mov~~dword ptr [rsp + 0x6cc], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~edx, dword ptr [rsp + 0x6cc]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<movss~~dword ptr [rax], xmm0>', '<mov~~eax, edx>', '<add~~eax, -4>', '<cmp~~edx, 4>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<mov~~dword ptr [rsp + 0x69c], eax>', '<jg~~0x402614>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x5e0]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x44e8>', '<mov~~rdx, rcx>', '<shl~~rdx, 0xd>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0x5d0], rax>', '<xor~~eax, eax>', '<cmp~~rcx, 1>', '<mov~~byte ptr [rsp + 0x5df], al>', '<jne~~0x402b98>']}, {'block_Idx': 59, 'blockInsts': ['<jmp~~0x40452d>']}, {'block_Idx': 204, 'blockInsts': ['<mov~~r9, qword ptr [rsp + 0x358]>', '<mov~~r8, qword ptr [rsp + 0x350]>', '<mov~~esi, dword ptr [rsp + 0x34c]>', '<mov~~edx, dword ptr [rsp + 0x348]>', '<mov~~edi, dword ptr [rsp + 0x3c8]>', '<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~r10, qword ptr [rsp + 0xa30]>', '<movsxd~~r11, edx>', '<movss~~xmm1, dword ptr [r10 + r11*4 + 0x1c75c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x310], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x314], edx>', '<mov~~r10, r9>', '<add~~r10, 4>', '<mov~~qword ptr [rsp + 0x320], r10>', '<addss~~xmm1, dword ptr [r9]>', '<movss~~dword ptr [rsp + 0x318], xmm1>', '<mov~~r9d, esi>', '<shl~~r9d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x31c], r9d>', '<sar~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x320]>', '<mov~~dword ptr [rsp + 0x32c], r9d>', '<movsxd~~r9, r9d>', '<mulss~~xmm1, dword ptr [rax + r9*4]>', '<movss~~dword ptr [rsp + 0x330], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x334], xmm0>', '<mov~~rax, r8>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x338], rax>', '<movss~~dword ptr [r8], xmm0>', '<add~~esi, 1>', '<mov~~dword ptr [rsp + 0x344], esi>', '<cmp~~esi, edi>', '<mov~~edi, edx>', '<mov~~dword ptr [rsp + 0x348], edi>', '<mov~~dword ptr [rsp + 0x34c], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x350], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x358], rsi>', '<mov~~dword ptr [rsp + 0x384], edx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~qword ptr [rsp + 0x390], rax>', '<jne~~0x403849>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x734]>', '<mov~~rax, qword ptr [rsp + 0xba8]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2605]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa00]>', '<mov~~ecx, dword ptr [rsp + 0x9fc]>', '<mov~~rdx, qword ptr [rsp + 0xa90]>', '<mov~~rdi, qword ptr [rdx]>', '<sub~~ecx, eax>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x36ef]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 207, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3d8]>', '<mov~~rcx, qword ptr [rsp + 0xbd0]>', '<mov~~edx, dword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x398], edx>', '<mov~~dword ptr [rsp + 0x39c], ecx>', '<mov~~qword ptr [rsp + 0x3a0], rax>', '<mov~~r8, qword ptr [rsp + 0x3a0]>', '<mov~~esi, dword ptr [rsp + 0x39c]>', '<mov~~edx, dword ptr [rsp + 0x398]>', '<mov~~edi, dword ptr [rsp + 0x3c8]>', '<movss~~xmm0, dword ptr [rsp + 0x3b4]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~r9, qword ptr [rsp + 0xa30]>', '<movsxd~~r10, edx>', '<movss~~xmm1, dword ptr [r9 + r10*4 + 0x1c75c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x360], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x364], edx>', '<mov~~r9d, esi>', '<shl~~r9d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x368], r9d>', '<sar~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~dword ptr [rsp + 0x36c], r9d>', '<movsxd~~r9, r9d>', '<mulss~~xmm1, dword ptr [rax + r9*4]>', '<movss~~dword ptr [rsp + 0x370], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x374], xmm0>', '<mov~~rax, r8>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x378], rax>', '<movss~~dword ptr [r8], xmm0>', '<add~~esi, 1>', '<mov~~dword ptr [rsp + 0x380], esi>', '<cmp~~esi, edi>', '<mov~~edi, edx>', '<mov~~dword ptr [rsp + 0x398], edi>', '<mov~~dword ptr [rsp + 0x39c], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x3a0], rsi>', '<mov~~dword ptr [rsp + 0x384], edx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~qword ptr [rsp + 0x390], rax>', '<je~~0x403979>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x710]>', '<mov~~eax, dword ptr [rsp + 0x6e4]>', '<add~~eax, ecx>', '<mov~~ecx, eax>', '<add~~ecx, -0x3c>', '<mov~~dword ptr [rsp + 0x734], ecx>', '<cmp~~eax, 0x9c>', '<jbe~~0x40253d>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rsi, qword ptr [rsp + 0xc20]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<add~~rdx, 0x84f0>', '<shl~~rcx, 0xd>', '<add~~rdx, rcx>', '<call~~qword ptr [rax]>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb80]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2dd7]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 235, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0xa30]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~rdi, rsi>', '<add~~rdi, 0x10750>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, rcx>', '<shl~~r8, 0xe>', '<mov~~qword ptr [rsp + 0x38], r8>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<add~~rsi, 0x10750>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<shl~~rcx, 0xe>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<shl~~rax, 2>', '<mov~~qword ptr [rsp + 0x60], rax>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<call~~0x5000b8>']}, {'block_Idx': 81, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x5bc]>', '<mov~~eax, dword ptr [rsp + 0x5b8]>', '<cvtsi2sd~~xmm0, eax>', '<sqrtsd~~xmm0, xmm0>', '<cvtss2sd~~xmm1, xmm1>', '<mulsd~~xmm0, xmm1>', '<cvtsd2ss~~xmm0, xmm0>', '<movss~~dword ptr [rsp + 0x5c0], xmm0>', '<mov~~eax, dword ptr [rsp + 0x5b0]>', '<movss~~xmm0, dword ptr [rsp + 0x5c0]>', '<movss~~dword ptr [rsp + 0x5ac], xmm0>', '<cmp~~eax, 0>', '<jle~~0x403dd6>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x67c]>', '<shr~~eax, 0xfc>', '<mov~~ecx, 4>', '<mov~~dword ptr [rsp + 0x668], ecx>', '<mov~~dword ptr [rsp + 0x66c], eax>', '<mov~~rax, qword ptr [rsp + 0x670]>', '<mov~~rdx, qword ptr [rsp + 0xb60]>', '<mov~~esi, dword ptr [rsp + 0x678]>', '<mov~~edi, dword ptr [rsp + 0x668]>', '<mov~~ecx, dword ptr [rsp + 0x66c]>', '<add~~esi, edi>', '<mov~~dword ptr [rdx], esi>', '<movsxd~~rdx, ecx>', '<mov~~rcx, qword ptr [rip + 0xfd894]>', '<mov~~rsi, rax>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<movss~~xmm0, dword ptr [rcx]>', '<movss~~dword ptr [rsp + rax*4 + 0xcc0], xmm0>', '<add~~rax, 1>', '<cmp~~rax, 0xa>', '<mov~~qword ptr [rsp + 0x688], rax>', '<jne~~0x40273b>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<cmp~~dword ptr [rax], 1>', '<jle~~0x402cb5>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~eax, dword ptr [rsp + 0x728]>', '<mov~~esi, dword ptr [rsp + 0x72c]>', '<mov~~edx, dword ptr [rsp + 0x730]>', '<mov~~dword ptr [rsp + 0x6e4], eax>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<cmp~~eax, 0>', '<jge~~0x4024e4>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x894]>', '<cmp~~eax, 0x80000000>', '<jne~~0x401bd7>']}, {'block_Idx': 201, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3e8]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rsi, qword ptr [rsp + 0x3f0]>', '<movss~~xmm0, dword ptr [rsp + rcx*4 + 0xc70]>', '<divss~~xmm0, dword ptr [rsi]>', '<sqrtss~~xmm0, xmm0>', '<cvtss2sd~~xmm0, xmm0>', '<movsd~~qword ptr [rsp + 0x3a8], xmm0>', '<add~~rax, 0x3b0>', '<shl~~rdx, 6>', '<add~~rax, rdx>', '<shl~~rcx, 2>', '<add~~rax, rcx>', '<cvtsi2sd~~xmm1, dword ptr [rax]>', '<movsd~~xmm0, qword ptr [rip + 0x1147]>', '<mulsd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x1133]>', '<call~~0x500068>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x920]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x8f4], eax>', '<cmp~~eax, 0>', '<jle~~0x401a93>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x8a8]>', '<mov~~rcx, qword ptr [rsp + 0x898]>', '<mov~~eax, dword ptr [rsp + 0x8a4]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x8b0], rcx>', '<mov~~dword ptr [rsp + 0x8b8], eax>', '<jne~~0x401b26>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9f0]>', '<mov~~rcx, qword ptr [rsp + 0xb48]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x9d0], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x9d8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x9e0], rcx>', '<mov~~dword ptr [rsp + 0x9e8], eax>', '<mov~~esi, dword ptr [rsp + 0x9e8]>', '<mov~~rcx, qword ptr [rsp + 0x9e0]>', '<mov~~rdx, qword ptr [rsp + 0x9d8]>', '<mov~~rdi, qword ptr [rsp + 0xa30]>', '<mov~~r8, qword ptr [rsp + 0xb40]>', '<mov~~rax, qword ptr [rsp + 0x9d0]>', '<mov~~qword ptr [rsp + 0x9a8], rcx>', '<mov~~r9d, dword ptr [r8]>', '<mov~~ecx, r9d>', '<shr~~ecx, 3>', '<mov~~dword ptr [rsp + 0x9a0], ecx>', '<mov~~ecx, ecx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~ecx, r9d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x9a4], ecx>', '<movzx~~eax, al>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0x9a8]>', '<mov~~dword ptr [rsp + 0x9b4], eax>', '<shr~~eax, 7>', '<mov~~dword ptr [rsp + 0x9b8], eax>', '<add~~r9d, 1>', '<mov~~dword ptr [rsp + 0x9bc], r9d>', '<mov~~dword ptr [r8], r9d>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c0], eax>', '<mov~~r8b, al>', '<mov~~byte ptr [rdi + rcx + 0x4c9], r8b>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x9c4], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x9c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x9e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x9e8], ecx>', '<mov~~dword ptr [rsp + 0x9ec], eax>', '<jne~~0x4015fe>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbe8]>', '<cmp~~byte ptr [rax], 0>', '<je~~0x403e46>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0xa28]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<shl~~rax, 1>', '<add~~rcx, rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, r8>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<movss~~xmm0, dword ptr [r8]>', '<cvtss2si~~r8, xmm0>', '<mov~~r9d, 0xffff8000>', '<cmp~~r8d, 0xffff8000>', '<cmovg~~r9d, r8d>', '<mov~~dword ptr [rsp + 0xd0], r9d>', '<mov~~r8d, 0x7fff>', '<cmp~~r9d, 0x7fff>', '<cmovl~~r8d, r9d>', '<mov~~dword ptr [rsp + 0xd4], r8d>', '<mov~~word ptr [rcx], r8w>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jne~~0x404479>']}, {'block_Idx': 194, 'blockInsts': ['<jmp~~0x403ae8>']}, {'block_Idx': 206, 'blockInsts': ['<movsd~~xmm2, qword ptr [rsp + 0x3a8]>', '<mov~~rdi, qword ptr [rsp + 0x538]>', '<mov~~rsi, qword ptr [rsp + 0xbd8]>', '<mov~~edx, dword ptr [rsp + 0x3c8]>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~rax, qword ptr [rsp + 0x3d8]>', '<movaps~~xmm1, xmm0>', '<movss~~xmm0, dword ptr [rsp + 0x5ac]>', '<mulsd~~xmm1, xmm2>', '<cvtsd2ss~~xmm1, xmm1>', '<movss~~xmm2, dword ptr [rdi]>', '<mulss~~xmm2, dword ptr [rsi]>', '<divss~~xmm1, xmm2>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x3b4], xmm0>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~qword ptr [rsp + 0x3c0], rax>', '<jle~~0x4039aa>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbc0]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x402cb5>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x8c0]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x8b0]>', '<mov~~eax, dword ptr [rsp + 0x8b8]>', '<mov~~dword ptr [rsp + 0x894], eax>', '<mov~~qword ptr [rsp + 0x898], rdx>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x8a4], eax>', '<je~~0x401d99>']}, {'block_Idx': 198, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~ecx, dword ptr [rsp + 0x2dc]>', '<mov~~edx, dword ptr [rsp + 0x2d8]>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<movss~~xmm0, dword ptr [rsp + 0x304]>', '<movsxd~~r8, edx>', '<mulss~~xmm0, dword ptr [rax + r8*4 + 0x1c75c]>', '<movss~~dword ptr [rsp + 0x2bc], xmm0>', '<mov~~rax, rdi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<movss~~dword ptr [rdi], xmm0>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x2cc], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x2d0], edx>', '<add~~ecx, 1>', '<mov~~dword ptr [rsp + 0x2d4], ecx>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x2d8], edx>', '<mov~~dword ptr [rsp + 0x2dc], ecx>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<je~~0x403d89>']}, {'block_Idx': 196, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3d8]>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~edx, dword ptr [rsp + 0x3c8]>', '<cmp~~edx, 0>', '<mov~~qword ptr [rsp + 0x3b8], rcx>', '<mov~~qword ptr [rsp + 0x3c0], rax>', '<jle~~0x4039aa>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb88]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40271e>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x948]>', '<mov~~rcx, qword ptr [rsp + 0x940]>', '<mov~~edx, dword ptr [rsp + 0x968]>', '<mov~~dword ptr [rsp + rax*4 + 0xcb8], edx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x938], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x948], rax>', '<jne~~0x40183a>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa60]>', '<mov~~edi, dword ptr [rsp + 0xa24]>', '<mov~~esi, dword ptr [rsp + 0xa18]>', '<mov~~rax, qword ptr [rsp + 0xa08]>', '<mov~~rcx, qword ptr [rsp + 0xa88]>', '<mov~~r9d, dword ptr [rsp + 0xa14]>', '<mov~~r8, qword ptr [rsp + 0xa80]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~dword ptr [rsp + 0x9fc], r8d>', '<sub~~r8d, r9d>', '<mov~~dword ptr [rcx], r8d>', '<mov~~ecx, esi>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shl~~eax, cl>', '<mov~~cl, byte ptr [rsp + 0xa13]>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa1c]>', '<mov~~dword ptr [rsp + 0xa00], eax>', '<add~~esi, edi>', '<mov~~dword ptr [rdx], esi>', '<cmp~~eax, ecx>', '<jl~~0x4013d1>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xae0]>', '<mov~~edx, dword ptr [rsp + 0x9f8]>', '<mov~~rcx, qword ptr [rsp + 0xad8]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<jmp~~0x4014f0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp + 0xbb0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4c8>', '<mov~~qword ptr [rsp + 0xbb8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xbc0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xbc8], rax>', '<lea~~rax, [rsp + 0xc70]>', '<mov~~rax, rdi>', '<add~~rax, 0x2475c>', '<mov~~qword ptr [rsp + 0xbd0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x24760>', '<mov~~qword ptr [rsp + 0xbd8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x84f0>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xbe0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4c8>', '<mov~~qword ptr [rsp + 0xbe8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4ca>', '<mov~~qword ptr [rsp + 0xbf0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4c9>', '<mov~~qword ptr [rsp + 0xbf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x84f0>', '<mov~~qword ptr [rsp + 0xc00], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x26f68>', '<add~~rax, 0x17f0>', '<mov~~qword ptr [rsp + 0xc08], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x84f0>', '<mov~~qword ptr [rsp + 0xc10], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x84f0>', '<add~~rax, 0x2000>', '<mov~~qword ptr [rsp + 0xc18], rax>', '<mov~~rax, rdi>', '<add~~rax, 0xc4f0>', '<mov~~qword ptr [rsp + 0xc20], rax>', '<mov~~rcx, rdi>', '<add~~rcx, 0x4c8>', '<mov~~qword ptr [rsp + 0xc28], rcx>', '<mov~~qword ptr [rsp + 0xc30], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b8>', '<mov~~qword ptr [rsp + 0xc38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x26f68>', '<add~~rax, 0x17a0>', '<mov~~qword ptr [rsp + 0xc40], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b4>', '<mov~~qword ptr [rsp + 0xc48], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x26f68>', '<add~~rax, 0x1798>', '<mov~~qword ptr [rsp + 0xc50], rax>', '<mov~~qword ptr [rsp + 0xc58], rdi>', '<mov~~rax, qword ptr [rsp + 0xa48]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4014c8>']}, {'block_Idx': 224, 'blockInsts': ['<jmp~~0x404733>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xab8]>', '<mov~~edi, dword ptr [rsp + 0xa24]>', '<mov~~rax, qword ptr [rsp + 0xac0]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shl~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa20]>', '<or~~cl, 0xe0>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa1c]>', '<mov~~dword ptr [rsp + 0x9f8], eax>', '<add~~esi, edi>', '<mov~~dword ptr [rdx], esi>', '<cmp~~eax, ecx>', '<jl~~0x4014a9>']}, {'block_Idx': 218, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<cmp~~eax, 0>', '<jle~~0x40472a>']}, {'block_Idx': 163, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x6b0]>', '<mov~~eax, dword ptr [rsp + 0x6bc]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6c0], rcx>', '<mov~~dword ptr [rsp + 0x6cc], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~edx, dword ptr [rsp + 0x6cc]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<movss~~dword ptr [rax], xmm0>', '<mov~~eax, edx>', '<add~~eax, -4>', '<cmp~~edx, 4>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<mov~~dword ptr [rsp + 0x69c], eax>', '<jg~~0x402614>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6f8]>', '<movss~~xmm1, dword ptr [rsp + 0x704]>', '<mov~~ecx, dword ptr [rsp + 0x734]>', '<movsxd~~rdx, ecx>', '<lea~~rcx, [rip + 0x2251]>', '<movss~~xmm0, dword ptr [rcx + rdx*4 + 0xf0]>', '<movss~~dword ptr [rsp + 0x6d0], xmm0>', '<maxss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x74c], xmm0>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x740], rcx>', '<movzx~~eax, word ptr [rax]>', '<mov~~dword ptr [rsp + 0x6d4], eax>', '<and~~eax, 3>', '<mov~~qword ptr [rsp + 0x6d8], rax>', '<mov~~ecx, dword ptr [rsp + 0x6d4]>', '<mov~~rdx, qword ptr [rsp + 0x708]>', '<mov~~rax, qword ptr [rsp + 0x6d8]>', '<lea~~rsi, [rip + 0x21e0]>', '<movsxd~~rax, dword ptr [rsi + rax*4]>', '<add~~rax, rsi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x690], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x69c], esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x6a0], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x6ac], esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x6b0], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x6bc], esi>', '<mov~~qword ptr [rsp + 0x6c0], rdx>', '<mov~~dword ptr [rsp + 0x6cc], ecx>', '<jmp~~rax>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb18]>', '<mov~~rdx, qword ptr [rsp + 0xa40]>', '<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~rsi, qword ptr [rsp + 0xa38]>', '<mov~~edi, dword ptr [rsi]>', '<add~~edi, 1>', '<mov~~dword ptr [rsi], edi>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rdx], eax>', '<cmp~~eax, dword ptr [rcx]>', '<setge~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<mov~~ecx, dword ptr [rsp + 0xa04]>', '<mov~~dword ptr [rsp + 0x158], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<jl~~0x404733>']}, {'block_Idx': 185, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x74c]>', '<mov~~rax, qword ptr [rsp + 0x740]>', '<mov~~rcx, qword ptr [rsp + 0x738]>', '<mov~~edx, dword ptr [rsp + 0x734]>', '<mov~~rsi, qword ptr [rsp + 0x820]>', '<cmp~~rcx, rsi>', '<mov~~dword ptr [rsp + 0x764], edx>', '<mov~~qword ptr [rsp + 0x768], rcx>', '<movaps~~xmm1, xmm0>', '<movss~~dword ptr [rsp + 0x774], xmm1>', '<mov~~qword ptr [rsp + 0x778], rax>', '<movss~~dword ptr [rsp + 0x7a4], xmm0>', '<jae~~0x4026f7>']}, {'block_Idx': 137, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~cl, byte ptr [rsp + 0x54f]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x508], rax>', '<jne~~0x402fc2>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x99c]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0xb68]>', '<mov~~edi, eax>', '<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~dword ptr [rsp + 0x954], edi>', '<movsxd~~rsi, esi>', '<mov~~qword ptr [rsp + 0x958], rsi>', '<mov~~rdi, rcx>', '<add~~rdi, 0x1b0>', '<mov~~r8, rsi>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x960], rdi>', '<mov~~ecx, dword ptr [rcx + rsi*4 + 0x1b0]>', '<sub~~ecx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x968], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x96c], eax>', '<cmp~~eax, 0>', '<setg~~al>', '<mov~~byte ptr [rsp + 0x973], al>', '<test~~al, 1>', '<jne~~0x40181f>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~rsi, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdi, qword ptr [rsp + 0x110]>', '<movsxd~~rdx, dword ptr [rcx]>', '<add~~rsi, 0x10750>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, rdx>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<shl~~rdx, 2>', '<call~~0x5000b8>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x15c]>', '<add~~rsp, 0xce8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 180, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~edx, dword ptr [rsp + 0x58c]>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~rsi, qword ptr [rsp + 0x960]>', '<mov~~eax, dword ptr [rsp + 0x5b4]>', '<mov~~rdi, qword ptr [rsp + 0x430]>', '<mov~~r8, qword ptr [rsp + 0x438]>', '<mov~~qword ptr [rsp + 0x2f8], r8>', '<mov~~qword ptr [rsp + 0x2e8], rdi>', '<sub~~eax, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x2f4], eax>', '<sar~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0x2f8]>', '<movsxd~~rdx, edx>', '<mulss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x304], xmm0>', '<cmp~~eax, 0>', '<jle~~0x403d9a>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb20]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~qword ptr [rsp + 0x850], rax>', '<jle~~0x402b02>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xaa0]>', '<mov~~rcx, qword ptr [rsp + 0xab0]>', '<mov~~rdx, qword ptr [rsp + 0xaa8]>', '<mov~~esi, dword ptr [rax]>', '<mov~~dword ptr [rdx], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rdx, qword ptr [rsp + 0xab8]>', '<mov~~edi, dword ptr [rsp + 0xa24]>', '<mov~~rax, qword ptr [rsp + 0xac0]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, esi>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shl~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa20]>', '<or~~cl, 0xe0>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa1c]>', '<mov~~dword ptr [rsp + 0x9f8], eax>', '<add~~esi, edi>', '<mov~~dword ptr [rdx], esi>', '<cmp~~eax, ecx>', '<jl~~0x4014a9>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<movsxd~~rcx, ecx>', '<mov~~rdx, rax>', '<add~~rdx, 0x104f0>', '<imul~~rsi, rcx, 0x70>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<add~~rax, 0x104f0>', '<imul~~rcx, rcx, 0x70>', '<add~~rax, rcx>', '<add~~rax, 0x50>', '<mov~~qword ptr [rsp + 0x1e8], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~rcx, qword ptr [rsp + 0x1f0]>', '<mov~~qword ptr [rsp + 0x1d0], rcx>', '<mov~~eax, dword ptr [rax]>', '<mov~~esi, 0xfffffffe>', '<cdq~~>', '<idiv~~esi>', '<mov~~edx, eax>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~dword ptr [rsp + 0x1dc], edx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x403f1c>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x750]>', '<mov~~esi, dword ptr [rsp + 0x6f0]>', '<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~edi, dword ptr [rsp + 0x724]>', '<mov~~ecx, dword ptr [rsp + 0x6ec]>', '<sub~~ecx, edi>', '<mov~~dword ptr [rsp + 0x6e8], ecx>', '<mov~~edi, ecx>', '<shr~~edi, 3>', '<mov~~edi, edi>', '<mov~~edx, dword ptr [rdx + rdi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<shl~~edx, cl>', '<mov~~cx, word ptr [rsp + 0x6f6]>', '<shr~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x6e8]>', '<add~~edx, esi>', '<mov~~edx, edx>', '<mov~~esi, edx>', '<movsx~~edx, word ptr [rax + rsi*4]>', '<movsx~~eax, word ptr [rax + rsi*4 + 2]>', '<mov~~dword ptr [rsp + 0x728], edx>', '<mov~~dword ptr [rsp + 0x72c], ecx>', '<mov~~dword ptr [rsp + 0x730], eax>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~eax, dword ptr [rsp + 0x728]>', '<mov~~esi, dword ptr [rsp + 0x72c]>', '<mov~~edx, dword ptr [rsp + 0x730]>', '<mov~~dword ptr [rsp + 0x6e4], eax>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<cmp~~eax, 0>', '<jge~~0x4024e4>']}, {'block_Idx': 165, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x690]>', '<mov~~eax, dword ptr [rsp + 0x69c]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6a0], rcx>', '<mov~~dword ptr [rsp + 0x6ac], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x6a0]>', '<mov~~eax, dword ptr [rsp + 0x6ac]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6b0], rcx>', '<mov~~dword ptr [rsp + 0x6bc], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rdx, qword ptr [rsp + 0x6b0]>', '<mov~~eax, dword ptr [rsp + 0x6bc]>', '<mov~~rcx, rdx>', '<add~~rcx, 4>', '<movss~~dword ptr [rdx], xmm0>', '<mov~~qword ptr [rsp + 0x6c0], rcx>', '<mov~~dword ptr [rsp + 0x6cc], eax>', '<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~edx, dword ptr [rsp + 0x6cc]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<movss~~dword ptr [rax], xmm0>', '<mov~~eax, edx>', '<add~~eax, -4>', '<cmp~~edx, 4>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<mov~~dword ptr [rsp + 0x69c], eax>', '<jg~~0x402614>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x4ac]>', '<mov~~rdi, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~esi, dword ptr [rsp + 0x548]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~r8d, dword ptr [rsp + 0x4b0]>', '<mov~~dword ptr [rsp + 0x424], r8d>', '<shl~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<movsxd~~rsi, esi>', '<add~~rax, 0x4e0>', '<shl~~rdi, 0xd>', '<add~~rax, rdi>', '<shl~~rsi, 2>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x428], rax>', '<cmp~~edx, -1>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<jle~~0x403a4b>']}, {'block_Idx': 183, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x470]>', '<xorps~~xmm0, xmm0>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<movss~~dword ptr [rsp + 0x458], xmm0>', '<mov~~dword ptr [rsp + 0x45c], eax>', '<jle~~0x403340>']}, {'block_Idx': 52, 'blockInsts': ['<jmp~~0x401871>']}, {'block_Idx': 208, 'blockInsts': ['<jmp~~0x4036da>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x9f0]>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x9ec], eax>', '<jle~~0x4016cf>']}, {'block_Idx': 175, 'blockInsts': ['<jmp~~0x40224c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb00]>', '<mov~~rdx, qword ptr [rsp + 0xaf8]>', '<mov~~rsi, qword ptr [rsp + 0xaf0]>', '<mov~~rcx, qword ptr [rsp + 0xae8]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsi], ecx>', '<mov~~dword ptr [rdx], ecx>', '<mov~~dword ptr [rax], ecx>', '<mov~~rdx, qword ptr [rsp + 0xa40]>', '<mov~~rsi, qword ptr [rsp + 0xb10]>', '<mov~~rax, qword ptr [rsp + 0xb08]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x9f4], ecx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb18]>', '<mov~~dword ptr [rsi], eax>', '<add~~eax, dword ptr [rdx]>', '<cmp~~eax, dword ptr [rcx]>', '<jle~~0x401557>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x750]>', '<mov~~rdx, qword ptr [rsp + 0x758]>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~esi, dword ptr [rsp + 0x764]>', '<mov~~rdi, qword ptr [rsp + 0x768]>', '<movss~~xmm0, dword ptr [rsp + 0x774]>', '<mov~~r8, qword ptr [rsp + 0x778]>', '<mov~~qword ptr [rsp + 0x6f8], r8>', '<movss~~dword ptr [rsp + 0x704], xmm0>', '<mov~~qword ptr [rsp + 0x708], rdi>', '<mov~~dword ptr [rsp + 0x710], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x718], ecx>', '<mov~~esi, ecx>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edx, dword ptr [rdx + rsi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x714], ecx>', '<shl~~edx, cl>', '<mov~~ecx, dword ptr [rsp + 0x718]>', '<shr~~edx, 0xf8>', '<mov~~edx, edx>', '<mov~~esi, edx>', '<movsx~~edx, word ptr [rax + rsi*4]>', '<mov~~dword ptr [rsp + 0x71c], edx>', '<mov~~si, word ptr [rax + rsi*4 + 2]>', '<mov~~word ptr [rsp + 0x722], si>', '<movsx~~eax, si>', '<mov~~dword ptr [rsp + 0x724], eax>', '<cmp~~si, 0>', '<mov~~dword ptr [rsp + 0x728], edx>', '<mov~~dword ptr [rsp + 0x72c], ecx>', '<mov~~dword ptr [rsp + 0x730], eax>', '<jge~~0x402488>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa14]>', '<mov~~rcx, qword ptr [rsp + 0xa78]>', '<mov~~rdx, qword ptr [rsp + 0xa70]>', '<mov~~rdi, qword ptr [rdx]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, eax>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x378b]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~ecx, dword ptr [rsp + 0x5f4]>', '<mov~~dword ptr [rsp + 0x5b0], ecx>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x5b4], eax>', '<mov~~ecx, 2>', '<cdq~~>', '<idiv~~ecx>', '<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xbc8]>', '<mov~~dword ptr [rsp + 0x5b8], ecx>', '<cvtsi2ss~~xmm1, ecx>', '<movss~~xmm0, dword ptr [rip + 0x1a5e]>', '<divss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x5bc], xmm0>', '<cmp~~dword ptr [rax], 1>', '<movss~~dword ptr [rsp + 0x5c0], xmm0>', '<jne~~0x402d72>']}, {'block_Idx': 214, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~ecx, dword ptr [rsp + 0x1a0]>', '<mov~~eax, dword ptr [rsp + 0x184]>', '<mov~~edx, 1>', '<shl~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0xb50]>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<sub~~eax, edx>', '<mov~~r8d, 2>', '<cdq~~>', '<idiv~~r8d>', '<mov~~edx, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x168], ecx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<shl~~rdx, 2>', '<mov~~qword ptr [rsp + 0x178], rdx>', '<call~~0x500078>']}, {'block_Idx': 195, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x3e8]>', '<mov~~ecx, dword ptr [rsp + 0x3cc]>', '<mov~~dword ptr [rsp + 0x3c8], ecx>', '<cmp~~rax, -1>', '<jle~~0x4037df>']}, {'block_Idx': 146, 'blockInsts': ['<jmp~~0x403b83>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x98c]>', '<cvtsi2sd~~xmm1, eax>', '<movsd~~xmm0, qword ptr [rip + 0x19c9]>', '<mulsd~~xmm1, xmm0>', '<movsd~~xmm0, qword ptr [rip + 0x19b5]>', '<call~~0x500068>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xce8>', '<mov~~qword ptr [rsp + 0xa28], rsi>', '<mov~~qword ptr [rsp + 0xa30], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x4c0>', '<mov~~qword ptr [rsp + 0xa38], rax>', '<mov~~dword ptr [rdi + 0x4c0], 0>', '<mov~~rax, rdi>', '<add~~rax, 0x4c4>', '<mov~~qword ptr [rsp + 0xa40], rax>', '<mov~~dword ptr [rdi + 0x4c4], 0>', '<lea~~rax, [rsp + 0xcb8]>', '<mov~~rax, rdi>', '<add~~rax, 0x60>', '<mov~~qword ptr [rsp + 0xa48], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a8>', '<mov~~qword ptr [rsp + 0xa50], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4ac>', '<mov~~qword ptr [rsp + 0xa58], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xa60], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xa68], rax>', '<mov~~rax, rdi>', '<mov~~qword ptr [rsp + 0xa70], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xa78], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xa80], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b8>', '<mov~~qword ptr [rsp + 0xa88], rax>', '<mov~~rax, rdi>', '<mov~~qword ptr [rsp + 0xa90], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b0>', '<mov~~qword ptr [rsp + 0xa98], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b0>', '<mov~~qword ptr [rsp + 0xaa0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b8>', '<mov~~qword ptr [rsp + 0xaa8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b4>', '<mov~~qword ptr [rsp + 0xab0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xab8], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xac0], rax>', '<mov~~rax, rdi>', '<mov~~qword ptr [rsp + 0xac8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xad0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xad8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b4>', '<mov~~qword ptr [rsp + 0xae0], rax>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb58]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0x990], rax>', '<mov~~eax, 1>', '<mov~~dword ptr [rsp + 0x998], eax>', '<mov~~edx, dword ptr [rsp + 0x998]>', '<mov~~rax, qword ptr [rsp + 0xb60]>', '<mov~~rcx, qword ptr [rsp + 0x990]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edi, esi>', '<shr~~edi, 3>', '<mov~~dword ptr [rsp + 0x974], edi>', '<mov~~edi, edi>', '<mov~~edi, dword ptr [rcx + rdi]>', '<ror~~di, 8>', '<ror~~edi, 0x10>', '<ror~~di, 8>', '<mov~~dword ptr [rsp + 0x978], edi>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x97c], ecx>', '<shl~~edi, cl>', '<mov~~dword ptr [rsp + 0x980], edi>', '<mov~~ecx, edi>', '<shr~~ecx, 0xf9>', '<mov~~dword ptr [rsp + 0x984], ecx>', '<add~~esi, 7>', '<mov~~dword ptr [rsp + 0x988], esi>', '<mov~~dword ptr [rax], esi>', '<mov~~eax, ecx>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x98c], eax>', '<cmp~~ecx, 0x7f>', '<mov~~dword ptr [rsp + 0x998], eax>', '<je~~0x401718>']}, {'block_Idx': 176, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 202, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rsp + 0x408]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x418]>', '<mov~~qword ptr [rsp + 0x3d0], rsi>', '<mov~~qword ptr [rsp + 0x3d8], rdx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~qword ptr [rsp + 0x3e8], rax>', '<cmp~~rax, 0>', '<jge~~0x403532>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0xb58]>', '<mov~~edx, dword ptr [rcx]>', '<mov~~rax, qword ptr [rax]>', '<mov~~ecx, edx>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~ecx, edx>', '<and~~ecx, 7>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<shr~~eax, 0xf9>', '<add~~edx, 7>', '<mov~~dword ptr [rcx], edx>', '<add~~eax, -0x13>', '<mov~~dword ptr [rsp + 0x890], eax>', '<jmp~~0x401d5c>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc08]>', '<mov~~edx, dword ptr [rsp + 0x5b4]>', '<mov~~rsi, qword ptr [rsp + 0xc18]>', '<mov~~rdi, qword ptr [rsp + 0xc10]>', '<call~~qword ptr [rax]>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc58]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x35ae]>', '<mov~~al, 0>', '<call~~0x500070>']}, {'block_Idx': 158, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x578]>', '<mov~~rcx, qword ptr [rsp + 0x520]>', '<mov~~qword ptr [rsp + 0x4a0], rcx>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x4ac], ecx>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<jle~~0x4033df>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x928]>', '<mov~~rax, qword ptr [rsp + 0x8f8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x930], rax>', '<je~~0x4018d2>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x640]>', '<mov~~rax, qword ptr [rsp + 0x620]>', '<mov~~rsi, qword ptr [rsp + 0x848]>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<movaps~~xmm3, xmmword ptr [rsp + 0x610]>', '<movss~~xmm0, dword ptr [rsp + 0x5fc]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movss~~xmm1, dword ptr [rsp + 0x604]>', '<movss~~xmm4, dword ptr [rip + 0x1dc2]>', '<subss~~xmm4, xmm2>', '<mulss~~xmm4, xmm1>', '<mulss~~xmm1, xmm4>', '<movss~~xmm4, dword ptr [rip + 0x1dae]>', '<addss~~xmm2, xmm4>', '<mulss~~xmm2, xmm0>', '<mulss~~xmm0, xmm2>', '<addss~~xmm0, xmm1>', '<movd~~r9d, xmm0>', '<mov~~edi, r9d>', '<shr~~edi, 0x17>', '<mov~~r8d, r9d>', '<shr~~r8d, 0x10>', '<and~~r8d, 0x7f>', '<shl~~r9d, 7>', '<and~~r9d, 0x7fff80>', '<or~~r9d, 0x3f800000>', '<movd~~xmm4, r9d>', '<mov~~r8d, r8d>', '<movss~~xmm2, dword ptr [rdx + r8*4 + 0x26b64]>', '<movss~~xmm0, dword ptr [rdx + r8*4 + 0x26d64]>', '<mov~~edi, edi>', '<movss~~xmm1, dword ptr [rdx + rdi*4 + 0x26764]>', '<mulss~~xmm0, xmm4>', '<addss~~xmm0, xmm2>', '<mulss~~xmm1, xmm0>', '<movaps~~xmm0, xmm3>', '<cmpltss~~xmm0, xmm1>', '<movaps~~xmm2, xmm0>', '<andps~~xmm2, xmm1>', '<andnps~~xmm0, xmm3>', '<orps~~xmm0, xmm2>', '<add~~rdx, 0x4e0>', '<shl~~rsi, 0xd>', '<add~~rdx, rsi>', '<mov~~rsi, rax>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<movss~~dword ptr [rdx], xmm1>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x648], rax>', '<movaps~~xmm1, xmm0>', '<movaps~~xmmword ptr [rsp + 0x650], xmm1>', '<movss~~dword ptr [rsp + 0x664], xmm0>', '<jne~~0x40287c>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x96c]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x940], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x948], rax>', '<mov~~rax, qword ptr [rsp + 0x948]>', '<mov~~rcx, qword ptr [rsp + 0x940]>', '<mov~~edx, dword ptr [rsp + 0x968]>', '<mov~~dword ptr [rsp + rax*4 + 0xcb8], edx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x938], rax>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x948], rax>', '<jne~~0x40183a>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x680]>', '<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~rax, qword ptr [rsp + 0x688]>', '<mov~~qword ptr [rsp + 0x670], rax>', '<add~~eax, -8>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x678], ecx>', '<mov~~esi, ecx>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~edx, dword ptr [rdx + rsi]>', '<ror~~dx, 8>', '<ror~~edx, 0x10>', '<ror~~dx, 8>', '<and~~ecx, 7>', '<shl~~edx, cl>', '<mov~~dword ptr [rsp + 0x67c], edx>', '<cmp~~eax, -7>', '<jae~~0x4027ac>']}, {'block_Idx': 164, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x6d0]>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~edx, dword ptr [rsp + 0x6cc]>', '<mov~~rcx, rax>', '<add~~rcx, 4>', '<mov~~qword ptr [rsp + 0x738], rcx>', '<movss~~dword ptr [rax], xmm0>', '<mov~~eax, edx>', '<add~~eax, -4>', '<cmp~~edx, 4>', '<mov~~qword ptr [rsp + 0x690], rcx>', '<mov~~dword ptr [rsp + 0x69c], eax>', '<jg~~0x402614>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb10]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x660], eax>', '<xorps~~xmm0, xmm0>', '<cmp~~eax, 0>', '<movss~~dword ptr [rsp + 0x664], xmm0>', '<jle~~0x402a9a>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<cmp~~ecx, 0>', '<setg~~cl>', '<mov~~byte ptr [rsp + 0x11f], cl>', '<cdqe~~>', '<mov~~qword ptr [rsp + 0x120], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x404442>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb70]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x401df1>']}, {'block_Idx': 197, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x3e8]>', '<mov~~rdx, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x330>', '<shl~~rdx, 6>', '<add~~rax, rdx>', '<shl~~rcx, 2>', '<add~~rax, rcx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4037df>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x91c]>', '<mov~~rdx, qword ptr [rsp + 0x958]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<add~~rcx, 0x1c4>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x900], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x908], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x910], rax>', '<jmp~~0x401abd>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x848]>', '<movss~~xmm0, dword ptr [rsp + 0x7a4]>', '<movss~~dword ptr [rax + rcx*4 + 0x44e0], xmm0>', '<jmp~~0x402abc>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xae8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b4>', '<mov~~qword ptr [rsp + 0xaf0], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b8>', '<mov~~qword ptr [rsp + 0xaf8], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b0>', '<mov~~qword ptr [rsp + 0xb00], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4b0>', '<mov~~qword ptr [rsp + 0xb08], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4bc>', '<mov~~qword ptr [rsp + 0xb10], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a0>', '<mov~~qword ptr [rsp + 0xb18], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4c>', '<mov~~qword ptr [rsp + 0xb20], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xb28], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xb30], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4c8>', '<mov~~qword ptr [rsp + 0xb38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xb40], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xb48], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x4a4>', '<mov~~qword ptr [rsp + 0xb50], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xb58], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x18>', '<mov~~qword ptr [rsp + 0xb60], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x1ac>', '<mov~~qword ptr [rsp + 0xb68], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x68>', '<mov~~qword ptr [rsp + 0xb70], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x320>', '<mov~~qword ptr [rsp + 0xb78], rax>', '<mov~~rax, rdi>', '<mov~~qword ptr [rsp + 0xb80], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x64>', '<mov~~qword ptr [rsp + 0xb88], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x54>', '<mov~~qword ptr [rsp + 0xb90], rax>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xb98], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x78>', '<mov~~qword ptr [rsp + 0xba0], rax>', '<lea~~rax, [rsp + 0xcc0]>', '<mov~~rax, rdi>', '<mov~~qword ptr [rsp + 0xba8], rax>', '<mov~~rax, rdi>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb90]>', '<mov~~r8, qword ptr [rsp + 0x848]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rdi, qword ptr [rsp + 0xb10]>', '<mov~~rdx, qword ptr [rsp + 0xb08]>', '<mov~~rcx, qword ptr [rsp + 0xb50]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, dword ptr [rdx]>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x808], rcx>', '<mov~~rdx, rax>', '<add~~rdx, 0x9c>', '<imul~~rcx, rcx, 0x32>', '<add~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x810], rdx>', '<mov~~rcx, rax>', '<add~~rcx, 0x4e0>', '<mov~~r9, r8>', '<shl~~r9, 0xd>', '<add~~rcx, r9>', '<mov~~qword ptr [rsp + 0x818], rcx>', '<movsxd~~rdi, dword ptr [rdi]>', '<add~~rax, 0x4e0>', '<shl~~r8, 0xd>', '<add~~rax, r8>', '<shl~~rdi, 2>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x820], rax>', '<xorps~~xmm0, xmm0>', '<mov~~eax, 0x24>', '<cmp~~dword ptr [rsi], 1>', '<mov~~qword ptr [rsp + 0x828], rdx>', '<movss~~dword ptr [rsp + 0x834], xmm0>', '<mov~~qword ptr [rsp + 0x838], rcx>', '<mov~~dword ptr [rsp + 0x844], eax>', '<jne~~0x40218a>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa98]>', '<mov~~edx, dword ptr [rsp + 0xa00]>', '<mov~~ecx, dword ptr [rsp + 0x9fc]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<jmp~~0x40140d>']}, {'block_Idx': 199, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x3f8]>', '<mov~~rsi, qword ptr [rsp + 0x3e8]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~r8d, dword ptr [rsp + 0x3c8]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~rdx, qword ptr [rsp + 0x3b8]>', '<mov~~r9, qword ptr [rsp + 0x3c0]>', '<mov~~qword ptr [rsp + 0x308], r9>', '<shl~~r8d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~r8d, cl>', '<mov~~rcx, qword ptr [rsp + 0x308]>', '<movsxd~~r8, r8d>', '<shl~~r8, 2>', '<add~~rax, r8>', '<add~~rsi, 1>', '<cmp~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x400], rsi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x408], rsi>', '<mov~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x410], rsi>', '<mov~~qword ptr [rsp + 0x418], rdx>', '<mov~~qword ptr [rsp + 0x430], rcx>', '<mov~~qword ptr [rsp + 0x438], rax>', '<jne~~0x4034d0>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x548]>', '<mov~~rdi, qword ptr [rsp + 0x568]>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 2>', '<xor~~esi, esi>', '<call~~0x500098>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x848]>', '<mov~~edx, dword ptr [rsp + 0x99c]>', '<mov~~dword ptr [rax + rcx*4 + 0x4cc], edx>', '<mov~~rcx, qword ptr [rsp + 0xb20]>', '<mov~~rax, qword ptr [rsp + 0x848]>', '<add~~rax, 1>', '<movsxd~~rcx, dword ptr [rcx]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x850], rax>', '<jl~~0x401e70>']}, {'block_Idx': 213, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x184]>', '<mov~~rsi, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~rax, qword ptr [rsp + 0xc50]>', '<mov~~r9d, dword ptr [rsp + 0x19c]>', '<mov~~r8, qword ptr [rsp + 0xb50]>', '<mov~~r8d, dword ptr [r8]>', '<sub~~r8d, r9d>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~r8, r8d>', '<mov~~rdx, qword ptr [rdx + r8*8 + 0x10720]>', '<call~~rax>']}, {'block_Idx': 190, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~r8, qword ptr [rsp + 0x478]>', '<mov~~rdx, qword ptr [rsp + 0x488]>', '<mov~~eax, dword ptr [rsp + 0x494]>', '<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~qword ptr [rsp + 0x460], rdi>', '<mov~~qword ptr [rsp + 0x468], rdx>', '<mov~~rdi, rcx>', '<add~~rdi, 0x1d8>', '<shl~~r8, 6>', '<add~~rdi, r8>', '<mov~~r8, rdx>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsp + 0x470], edi>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x474], eax>', '<je~~0x403370>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8bc]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x8a8], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<mov~~eax, 0x80000000>', '<mov~~qword ptr [rsp + 0x8b0], rcx>', '<mov~~dword ptr [rsp + 0x8b8], eax>', '<mov~~rsi, qword ptr [rsp + 0x8c0]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x8b0]>', '<mov~~eax, dword ptr [rsp + 0x8b8]>', '<mov~~dword ptr [rsp + 0x894], eax>', '<mov~~qword ptr [rsp + 0x898], rdx>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x8a4], eax>', '<je~~0x401d99>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~eax, dword ptr [rax]>', '<xor~~ecx, ecx>', '<cmp~~eax, 0>', '<mov~~qword ptr [rsp + 0x5e8], rcx>', '<mov~~dword ptr [rsp + 0x5f4], eax>', '<jle~~0x402ce6>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~rcx, qword ptr [rsp + 0x5e0]>', '<add~~rcx, 1>', '<mov~~eax, dword ptr [rax]>', '<movsxd~~rdx, eax>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x5e8], rcx>', '<mov~~dword ptr [rsp + 0x5f4], eax>', '<jl~~0x402b26>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x930]>', '<mov~~qword ptr [rsp + 0x8f8], rcx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x401a93>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 184, 'blockInsts': ['<movss~~dword ptr [rsp + 0x664], xmm0>', '<jne~~0x40287c>']}, {'block_Idx': 193, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbd0]>', '<mov~~ecx, dword ptr [rsp + 0x2d0]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rdx, qword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<add~~rax, 1>', '<add~~rcx, 0x2000>', '<cmp~~rax, rdx>', '<mov~~qword ptr [rsp + 0x598], rcx>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<jne~~0x402e43>']}, {'block_Idx': 177, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x98c]>', '<call~~0x500080>']}, {'block_Idx': 219, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~eax, dword ptr [rsp + 0x15c]>', '<add~~rsp, 0xce8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x5e8]>', '<mov~~qword ptr [rsp + 0x5e0], rcx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x402c5d>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa48]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4014c8>']}, {'block_Idx': 149, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~rcx, qword ptr [rsp + 0xbd0]>', '<mov~~edx, dword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x510], edx>', '<mov~~dword ptr [rsp + 0x514], ecx>', '<mov~~qword ptr [rsp + 0x518], rax>', '<jmp~~0x403008>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~rsi, qword ptr [rsp + 0x958]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~eax, dword ptr [rsp + 0x5b0]>', '<movsd~~qword ptr [rsp + 0x570], xmm0>', '<mov~~rdi, rdx>', '<add~~rdi, 0x1c4>', '<mov~~r8, rsi>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x578], rdi>', '<add~~rdx, 0x198>', '<shl~~rsi, 2>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x580], rdx>', '<mov~~edx, 0xffffffff>', '<shl~~edx, cl>', '<mov~~rcx, qword ptr [rsp + 0xbe0]>', '<mov~~dword ptr [rsp + 0x58c], edx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x590], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x598], rcx>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x598]>', '<mov~~rcx, qword ptr [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x550], rcx>', '<mov~~qword ptr [rsp + 0x558], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x84f0>', '<mov~~rsi, rcx>', '<shl~~rsi, 0xd>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x560], rdx>', '<mov~~qword ptr [rsp + 0x568], rdx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x403d9a>']}, {'block_Idx': 178, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5b4]>', '<mov~~ecx, dword ptr [rsp + 0x204]>', '<mov~~rdi, qword ptr [rsp + 0x1f8]>', '<xor~~ecx, 0xffffffff>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 2>', '<add~~rdx, 4>', '<xor~~esi, esi>', '<call~~0x500098>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x9f0], eax>', '<cmp~~eax, 2>', '<jne~~0x4015ac>']}, {'block_Idx': 160, 'blockInsts': ['<movss~~xmm0, dword ptr [rsp + 0x63c]>', '<movss~~xmm1, dword ptr [rsp + 0x638]>', '<mov~~rcx, qword ptr [rsp + 0x630]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movaps~~xmm3, xmm2>', '<subss~~xmm3, dword ptr [rsp + rcx*4 + 0xcbc]>', '<movss~~dword ptr [rsp + 0x5f8], xmm3>', '<mulss~~xmm1, xmm3>', '<movss~~dword ptr [rsp + 0x5fc], xmm1>', '<subss~~xmm2, dword ptr [rsp + rcx*4 + 0xcc0]>', '<movss~~dword ptr [rsp + 0x600], xmm2>', '<mulss~~xmm0, xmm2>', '<movss~~dword ptr [rsp + 0x604], xmm0>', '<mov~~rax, rcx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x608], rax>', '<cmp~~rcx, 8>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<jb~~0x4028e0>']}, {'block_Idx': 220, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x14c]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<shl~~rcx, 2>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x88], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rsi, qword ptr [rsp + 0xa30]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~rdi, rsi>', '<add~~rdi, 0x10750>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, rcx>', '<shl~~r8, 0xe>', '<mov~~qword ptr [rsp + 0x38], r8>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x40], rdi>', '<add~~rsi, 0x10750>', '<mov~~qword ptr [rsp + 0x48], rsi>', '<shl~~rcx, 0xe>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<add~~rsi, rcx>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<shl~~rax, 2>', '<mov~~qword ptr [rsp + 0x60], rax>', '<add~~rsi, rax>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<call~~0x5000b8>']}, {'block_Idx': 143, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x898]>', '<mov~~rsi, qword ptr [rsp + 0x8c0]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~eax, dword ptr [rsp + 0x890]>', '<add~~rcx, 0x3b0>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~dword ptr [rcx], eax>', '<mov~~dword ptr [rsp + 0x8a4], eax>', '<mov~~rdx, qword ptr [rsp + 0x8a8]>', '<mov~~rcx, qword ptr [rsp + 0x898]>', '<mov~~eax, dword ptr [rsp + 0x8a4]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x8b0], rcx>', '<mov~~dword ptr [rsp + 0x8b8], eax>', '<jne~~0x401b26>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa60]>', '<mov~~edi, dword ptr [rsp + 0xa24]>', '<mov~~rax, qword ptr [rsp + 0xa68]>', '<mov~~rcx, qword ptr [rsp + 0xa58]>', '<mov~~dword ptr [rcx], 0>', '<mov~~esi, dword ptr [rdx]>', '<mov~~rax, qword ptr [rax]>', '<mov~~qword ptr [rsp + 0xa08], rax>', '<mov~~ecx, esi>', '<shr~~ecx, 3>', '<mov~~ecx, ecx>', '<mov~~eax, dword ptr [rax + rcx]>', '<ror~~ax, 8>', '<ror~~eax, 0x10>', '<ror~~ax, 8>', '<mov~~ecx, esi>', '<and~~ecx, 7>', '<shl~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa20]>', '<or~~cl, 0xe0>', '<mov~~byte ptr [rsp + 0xa13], cl>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0xa1c]>', '<mov~~dword ptr [rsp + 0xa14], eax>', '<add~~esi, edi>', '<mov~~dword ptr [rsp + 0xa18], esi>', '<mov~~dword ptr [rdx], esi>', '<cmp~~eax, ecx>', '<jl~~0x401310>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x810]>', '<mov~~rdx, qword ptr [rsp + 0x808]>', '<mov~~rdi, qword ptr [rsp + 0xb60]>', '<mov~~rcx, qword ptr [rsp + 0xb98]>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~esi, r8d>', '<shr~~esi, 3>', '<mov~~esi, dword ptr [rcx + rsi]>', '<ror~~si, 8>', '<ror~~esi, 0x10>', '<ror~~si, 8>', '<mov~~cl, r8b>', '<and~~cl, 7>', '<shl~~esi, cl>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<shr~~esi, 0xfb>', '<add~~r8d, 5>', '<mov~~dword ptr [rdi], r8d>', '<add~~esi, 0xa>', '<mov~~dword ptr [rsp + 0x7e8], esi>', '<movsxd~~rdi, esi>', '<lea~~rsi, [rip + 0x27dd]>', '<movss~~xmm0, dword ptr [rsi + rdi*4 + 0xf0]>', '<movss~~dword ptr [rsp + 0x7ec], xmm0>', '<imul~~rdx, rdx, 0x32>', '<lea~~rcx, [rcx + rdx + 0x9e]>', '<mov~~qword ptr [rsp + 0x7f0], rcx>', '<movzx~~eax, word ptr [rax]>', '<mov~~dword ptr [rsp + 0x7fc], eax>', '<and~~eax, 3>', '<mov~~qword ptr [rsp + 0x800], rax>', '<mov~~ecx, dword ptr [rsp + 0x7fc]>', '<mov~~rdx, qword ptr [rsp + 0x818]>', '<mov~~rax, qword ptr [rsp + 0x800]>', '<lea~~rsi, [rip + 0x2764]>', '<movsxd~~rax, dword ptr [rsi + rax*4]>', '<add~~rax, rsi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x7a8], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x7b4], esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x7b8], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x7c4], esi>', '<mov~~rsi, rdx>', '<mov~~qword ptr [rsp + 0x7c8], rsi>', '<mov~~esi, ecx>', '<mov~~dword ptr [rsp + 0x7d4], esi>', '<mov~~qword ptr [rsp + 0x7d8], rdx>', '<mov~~dword ptr [rsp + 0x7e4], ecx>', '<jmp~~rax>']}, {'block_Idx': 170, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~ecx, dword ptr [rsp + 0x2ac]>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~qword ptr [rsp + 0x298], rax>', '<mov~~rsi, qword ptr [rsp + 0x298]>', '<mov~~rdi, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~r8, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~qword ptr [rsp + 0x238], rdi>', '<mov~~r9, rax>', '<add~~r9, 0x44e8>', '<mov~~qword ptr [rsp + 0x208], r9>', '<mov~~r10, r8>', '<shl~~r10, 0xd>', '<mov~~qword ptr [rsp + 0x210], r10>', '<add~~r9, r10>', '<mov~~qword ptr [rsp + 0x218], r9>', '<mov~~r10, rdi>', '<shl~~r10, 2>', '<mov~~qword ptr [rsp + 0x220], r10>', '<add~~r9, r10>', '<mov~~qword ptr [rsp + 0x228], r9>', '<movss~~xmm1, dword ptr [r9]>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x234], edi>', '<sar~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rsp + 0x244], edi>', '<movsxd~~rdi, edi>', '<add~~rax, 0x4e0>', '<mov~~qword ptr [rsp + 0x248], rax>', '<shl~~r8, 0xd>', '<mov~~qword ptr [rsp + 0x250], r8>', '<add~~rax, r8>', '<mov~~qword ptr [rsp + 0x258], rax>', '<shl~~rdi, 2>', '<mov~~qword ptr [rsp + 0x260], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x268], rax>', '<mulss~~xmm1, dword ptr [rax]>', '<movss~~dword ptr [rsp + 0x270], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x274], xmm0>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x278], rax>', '<movss~~dword ptr [rsi], xmm0>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x298], rcx>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<jne~~0x403be5>']}, {'block_Idx': 210, 'blockInsts': ['<jmp~~0x403f54>']}, {'block_Idx': 179, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x298]>', '<mov~~rdi, qword ptr [rsp + 0x290]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<movss~~xmm0, dword ptr [rsp + 0x544]>', '<mov~~r8, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~qword ptr [rsp + 0x238], rdi>', '<mov~~r9, rax>', '<add~~r9, 0x44e8>', '<mov~~qword ptr [rsp + 0x208], r9>', '<mov~~r10, r8>', '<shl~~r10, 0xd>', '<mov~~qword ptr [rsp + 0x210], r10>', '<add~~r9, r10>', '<mov~~qword ptr [rsp + 0x218], r9>', '<mov~~r10, rdi>', '<shl~~r10, 2>', '<mov~~qword ptr [rsp + 0x220], r10>', '<add~~r9, r10>', '<mov~~qword ptr [rsp + 0x228], r9>', '<movss~~xmm1, dword ptr [r9]>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x234], edi>', '<sar~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~dword ptr [rsp + 0x244], edi>', '<movsxd~~rdi, edi>', '<add~~rax, 0x4e0>', '<mov~~qword ptr [rsp + 0x248], rax>', '<shl~~r8, 0xd>', '<mov~~qword ptr [rsp + 0x250], r8>', '<add~~rax, r8>', '<mov~~qword ptr [rsp + 0x258], rax>', '<shl~~rdi, 2>', '<mov~~qword ptr [rsp + 0x260], rdi>', '<add~~rax, rdi>', '<mov~~qword ptr [rsp + 0x268], rax>', '<mulss~~xmm1, dword ptr [rax]>', '<movss~~dword ptr [rsp + 0x270], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x274], xmm0>', '<mov~~rax, rsi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x278], rax>', '<movss~~dword ptr [rsi], xmm0>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x298], rcx>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<jne~~0x403be5>']}, {'block_Idx': 48, 'blockInsts': ['<lea~~rax, [rsp + 0xc60]>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<add~~rax, 0x10750>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~rdx, rcx>', '<shl~~rdx, 0xe>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<add~~rax, rdx>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~qword ptr [rsp + rcx*8 + 0xc60], rax>', '<mov~~rax, rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<je~~0x4045b9>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x560]>', '<mov~~cl, byte ptr [rsp + 0x54f]>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x520], rax>', '<jne~~0x402f75>']}, {'block_Idx': 192, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x45c]>', '<movss~~xmm1, dword ptr [rsp + 0x458]>', '<mov~~rdx, qword ptr [rsp + 0x460]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~esi, eax>', '<shl~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x444], esi>', '<sar~~esi, cl>', '<mov~~ecx, dword ptr [rsp + 0x470]>', '<mov~~dword ptr [rsp + 0x448], esi>', '<movsxd~~rsi, esi>', '<movss~~xmm0, dword ptr [rdx + rsi*4]>', '<mulss~~xmm0, xmm0>', '<movss~~dword ptr [rsp + 0x44c], xmm0>', '<addss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x450], xmm0>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x454], eax>', '<cmp~~eax, ecx>', '<movss~~dword ptr [rsp + 0x458], xmm0>', '<mov~~dword ptr [rsp + 0x45c], eax>', '<jne~~0x4032bb>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rsi, qword ptr [rsp + 0xc20]>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~rax, qword ptr [rsp + 0xc40]>', '<mov~~r9d, dword ptr [rsp + 0x1c8]>', '<mov~~rdi, qword ptr [rsp + 0xb50]>', '<mov~~r8, qword ptr [rsp + 0xb10]>', '<mov~~r8d, dword ptr [r8]>', '<mov~~edi, dword ptr [rdi]>', '<sub~~edi, r9d>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rdi, edi>', '<mov~~rdx, qword ptr [rdx + rdi*8 + 0x10720]>', '<mov~~rdi, rcx>', '<call~~rax>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xc30]>', '<xor~~esi, esi>', '<mov~~edx, 0x4000>', '<call~~0x500098>']}, {'block_Idx': 188, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x548]>', '<mov~~rax, qword ptr [rsp + 0x580]>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, ecx>', '<mov~~dword ptr [rsp + 0x3cc], eax>', '<jmp~~0x403576>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb20]>', '<mov~~rax, qword ptr [rsp + 0x848]>', '<add~~rax, 1>', '<movsxd~~rcx, dword ptr [rcx]>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x850], rax>', '<jl~~0x401e70>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x96c]>', '<mov~~rdx, qword ptr [rsp + 0x958]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<add~~rcx, 0x1c4>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x920], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x928], rax>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x930], rax>', '<jmp~~0x401932>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa40]>', '<mov~~rsi, qword ptr [rsp + 0xb10]>', '<mov~~rax, qword ptr [rsp + 0xb08]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x9f4], ecx>', '<mov~~eax, 1>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0xb18]>', '<mov~~dword ptr [rsi], eax>', '<add~~eax, dword ptr [rdx]>', '<cmp~~eax, dword ptr [rcx]>', '<jle~~0x401557>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x5b0]>', '<movss~~xmm0, dword ptr [rsp + 0x5c0]>', '<movss~~dword ptr [rsp + 0x5ac], xmm0>', '<cmp~~eax, 0>', '<jle~~0x403dd6>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xa04], eax>', '<jmp~~0x404329>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x660]>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x640], rax>', '<xor~~eax, eax>', '<xorps~~xmm0, xmm0>', '<mov~~qword ptr [rsp + 0x648], rax>', '<movaps~~xmmword ptr [rsp + 0x650], xmm0>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x648]>', '<movaps~~xmm0, xmmword ptr [rsp + 0x650]>', '<movaps~~xmmword ptr [rsp + 0x610], xmm0>', '<mov~~qword ptr [rsp + 0x620], rcx>', '<movss~~xmm0, dword ptr [rax + rcx*4 + 0x24764]>', '<movss~~dword ptr [rsp + 0x62c], xmm0>', '<mov~~eax, 1>', '<movss~~xmm0, dword ptr [rip + 0x1ebd]>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movaps~~xmm1, xmm0>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<movss~~xmm0, dword ptr [rsp + 0x63c]>', '<movss~~xmm1, dword ptr [rsp + 0x638]>', '<mov~~rcx, qword ptr [rsp + 0x630]>', '<movss~~xmm2, dword ptr [rsp + 0x62c]>', '<movaps~~xmm3, xmm2>', '<subss~~xmm3, dword ptr [rsp + rcx*4 + 0xcbc]>', '<movss~~dword ptr [rsp + 0x5f8], xmm3>', '<mulss~~xmm1, xmm3>', '<movss~~dword ptr [rsp + 0x5fc], xmm1>', '<subss~~xmm2, dword ptr [rsp + rcx*4 + 0xcc0]>', '<movss~~dword ptr [rsp + 0x600], xmm2>', '<mulss~~xmm0, xmm2>', '<movss~~dword ptr [rsp + 0x604], xmm0>', '<mov~~rax, rcx>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x608], rax>', '<cmp~~rcx, 8>', '<mov~~qword ptr [rsp + 0x630], rax>', '<movss~~dword ptr [rsp + 0x638], xmm1>', '<movss~~dword ptr [rsp + 0x63c], xmm0>', '<jb~~0x4028e0>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<jle~~0x404733>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x9f4]>', '<mov~~rcx, qword ptr [rsp + 0xb50]>', '<mov~~eax, dword ptr [rsp + 0x9ec]>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x99c], ecx>', '<cmp~~eax, 0>', '<je~~0x403e46>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x104]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~r8, qword ptr [rsp + 0xf0]>', '<mov~~esi, dword ptr [rsp + 0x13c]>', '<mov~~rdi, qword ptr [rsp + 0x120]>', '<mov~~rdx, r8>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<movss~~xmm0, dword ptr [r8]>', '<cvtss2si~~r8, xmm0>', '<mov~~r9d, 0xffff8000>', '<cmp~~r8d, 0xffff8000>', '<cmovg~~r9d, r8d>', '<mov~~dword ptr [rsp + 0xd0], r9d>', '<mov~~r8d, 0x7fff>', '<cmp~~r9d, 0x7fff>', '<cmovl~~r8d, r9d>', '<mov~~dword ptr [rsp + 0xd4], r8d>', '<mov~~word ptr [rcx], r8w>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, esi>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<jne~~0x404479>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x91c], eax>', '<cmp~~eax, 0>', '<jle~~0x401df1>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb68]>', '<mov~~rax, qword ptr [rsp + 0xb70]>', '<movss~~xmm0, dword ptr [rsp + 0x5ac]>', '<movsd~~xmm1, qword ptr [rsp + 0x570]>', '<mov~~rdx, qword ptr [rsp + 0xa30]>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rdi, rdx>', '<add~~rdi, 0x44e8>', '<mov~~r8, rsi>', '<shl~~r8, 0xd>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x528], rdi>', '<mov~~edi, dword ptr [rdx + rsi*4 + 0x4cc]>', '<mov~~dword ptr [rsp + 0x534], edi>', '<mov~~rdi, rdx>', '<add~~rdi, 0x44e0>', '<mov~~r8, rsi>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x538], rdi>', '<movss~~xmm2, dword ptr [rdx + rsi*4 + 0x44e0]>', '<cvtss2sd~~xmm2, xmm2>', '<divsd~~xmm1, xmm2>', '<cvtsd2ss~~xmm1, xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x544], xmm0>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x548], ecx>', '<cmp~~ecx, 0>', '<setg~~cl>', '<mov~~byte ptr [rsp + 0x54f], cl>', '<cmp~~eax, 0>', '<je~~0x402fa1>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, qword ptr [rsp + 0x910]>', '<mov~~qword ptr [rsp + 0x8c0], rcx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x401dcc>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x973]>', '<test~~al, 1>', '<jne~~0x40188f>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rdx, qword ptr [rsp + 0x598]>', '<mov~~rcx, qword ptr [rsp + 0x5a0]>', '<mov~~qword ptr [rsp + 0x550], rcx>', '<mov~~qword ptr [rsp + 0x558], rdx>', '<mov~~rdx, rax>', '<add~~rdx, 0x84f0>', '<mov~~rsi, rcx>', '<shl~~rsi, 0xd>', '<add~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x560], rdx>', '<mov~~qword ptr [rsp + 0x568], rdx>', '<cmp~~byte ptr [rax + rcx + 0x4c9], 0>', '<je~~0x403d9a>']}, {'block_Idx': 148, 'blockInsts': ['<jmp~~0x40314b>']}, {'block_Idx': 181, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x528]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<mov~~rdx, qword ptr [rsp + 0x428]>', '<mov~~esi, dword ptr [rsp + 0x4ac]>', '<mov~~edi, dword ptr [rsp + 0x424]>', '<movsxd~~r8, edi>', '<lea~~rdi, [rsp + 0xc70]>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~qword ptr [rsp + 0x3f0], rdi>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x3f8], rsi>', '<mov~~rsi, -1>', '<mov~~qword ptr [rsp + 0x400], rsi>', '<mov~~qword ptr [rsp + 0x408], rdx>', '<mov~~qword ptr [rsp + 0x410], rcx>', '<mov~~qword ptr [rsp + 0x418], rax>', '<mov~~rax, qword ptr [rsp + 0x400]>', '<mov~~rcx, qword ptr [rsp + 0x408]>', '<mov~~rdx, qword ptr [rsp + 0x410]>', '<mov~~rsi, qword ptr [rsp + 0x418]>', '<mov~~qword ptr [rsp + 0x3d0], rsi>', '<mov~~qword ptr [rsp + 0x3d8], rdx>', '<mov~~qword ptr [rsp + 0x3e0], rcx>', '<mov~~qword ptr [rsp + 0x3e8], rax>', '<cmp~~rax, 0>', '<jge~~0x403532>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbf8]>', '<cmp~~byte ptr [rax], 0>', '<jne~~0x403e25>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x670]>', '<mov~~rdx, qword ptr [rsp + 0xb60]>', '<mov~~esi, dword ptr [rsp + 0x678]>', '<mov~~edi, dword ptr [rsp + 0x668]>', '<mov~~ecx, dword ptr [rsp + 0x66c]>', '<add~~esi, edi>', '<mov~~dword ptr [rdx], esi>', '<movsxd~~rdx, ecx>', '<mov~~rcx, qword ptr [rip + 0xfd894]>', '<mov~~rsi, rax>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<movss~~xmm0, dword ptr [rcx]>', '<movss~~dword ptr [rsp + rax*4 + 0xcc0], xmm0>', '<add~~rax, 1>', '<cmp~~rax, 0xa>', '<mov~~qword ptr [rsp + 0x688], rax>', '<jne~~0x40273b>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x900]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x8bc], eax>', '<cmp~~eax, 0>', '<jle~~0x401dcc>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x9e8]>', '<mov~~rcx, qword ptr [rsp + 0x9e0]>', '<mov~~rdx, qword ptr [rsp + 0x9d8]>', '<mov~~rdi, qword ptr [rsp + 0xa30]>', '<mov~~r8, qword ptr [rsp + 0xb40]>', '<mov~~rax, qword ptr [rsp + 0x9d0]>', '<mov~~qword ptr [rsp + 0x9a8], rcx>', '<mov~~r9d, dword ptr [r8]>', '<mov~~ecx, r9d>', '<shr~~ecx, 3>', '<mov~~dword ptr [rsp + 0x9a0], ecx>', '<mov~~ecx, ecx>', '<mov~~al, byte ptr [rax + rcx]>', '<mov~~ecx, r9d>', '<and~~ecx, 7>', '<mov~~dword ptr [rsp + 0x9a4], ecx>', '<movzx~~eax, al>', '<shl~~eax, cl>', '<mov~~rcx, qword ptr [rsp + 0x9a8]>', '<mov~~dword ptr [rsp + 0x9b4], eax>', '<shr~~eax, 7>', '<mov~~dword ptr [rsp + 0x9b8], eax>', '<add~~r9d, 1>', '<mov~~dword ptr [rsp + 0x9bc], r9d>', '<mov~~dword ptr [r8], r9d>', '<and~~eax, 1>', '<mov~~dword ptr [rsp + 0x9c0], eax>', '<mov~~r8b, al>', '<mov~~byte ptr [rdi + rcx + 0x4c9], r8b>', '<or~~eax, esi>', '<mov~~dword ptr [rsp + 0x9c4], eax>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x9c8], rcx>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x9e0], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x9e8], ecx>', '<mov~~dword ptr [rsp + 0x9ec], eax>', '<jne~~0x4015fe>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb60]>', '<mov~~edx, dword ptr [rsp + 0x5c4]>', '<mov~~ecx, dword ptr [rsp + 0x5c8]>', '<add~~ecx, edx>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0xb20]>', '<mov~~rcx, qword ptr [rsp + 0x5e0]>', '<add~~rcx, 1>', '<mov~~eax, dword ptr [rax]>', '<movsxd~~rdx, eax>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x5e8], rcx>', '<mov~~dword ptr [rsp + 0x5f4], eax>', '<jl~~0x402b26>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x908]>', '<mov~~rax, qword ptr [rsp + 0x8c0]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x910], rax>', '<jne~~0x401abd>']}, {'block_Idx': 211, 'blockInsts': ['<jmp~~0x40410a>']}, {'block_Idx': 172, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb08]>', '<mov~~rdx, qword ptr [rsp + 0xb50]>', '<mov~~r8, qword ptr [rsp + 0x550]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~rdi, qword ptr [rsp + 0x580]>', '<mov~~edi, dword ptr [rdi]>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x4ac]>', '<movsxd~~rdi, edi>', '<add~~rax, 0x4e0>', '<shl~~r8, 0xd>', '<add~~rax, r8>', '<shl~~rdi, 2>', '<add~~rax, rdi>', '<mov~~edx, dword ptr [rdx]>', '<sub~~edx, dword ptr [rsi]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x478], rdx>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x480], rcx>', '<xor~~ecx, ecx>', '<mov~~edx, ecx>', '<xor~~ecx, ecx>', '<mov~~qword ptr [rsp + 0x488], rdx>', '<mov~~dword ptr [rsp + 0x494], ecx>', '<mov~~qword ptr [rsp + 0x498], rax>', '<mov~~rsi, qword ptr [rsp + 0x550]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~r8, qword ptr [rsp + 0x478]>', '<mov~~rdx, qword ptr [rsp + 0x488]>', '<mov~~eax, dword ptr [rsp + 0x494]>', '<mov~~rdi, qword ptr [rsp + 0x498]>', '<mov~~qword ptr [rsp + 0x460], rdi>', '<mov~~qword ptr [rsp + 0x468], rdx>', '<mov~~rdi, rcx>', '<add~~rdi, 0x1d8>', '<shl~~r8, 6>', '<add~~rdi, r8>', '<mov~~r8, rdx>', '<shl~~r8, 2>', '<add~~rdi, r8>', '<mov~~edi, dword ptr [rdi]>', '<mov~~dword ptr [rsp + 0x470], edi>', '<add~~rcx, 0x330>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x474], eax>', '<je~~0x403370>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb60]>', '<mov~~eax, dword ptr [rsp + 0x884]>', '<mov~~edx, dword ptr [rsp + 0x888]>', '<mov~~si, word ptr [rsp + 0x88e]>', '<mov~~dword ptr [rsp + 0x860], eax>', '<movsx~~esi, si>', '<add~~edx, esi>', '<mov~~dword ptr [rcx], edx>', '<cmp~~eax, 0>', '<jge~~0x401d42>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb60]>', '<mov~~rcx, qword ptr [rsp + 0xb58]>', '<mov~~edx, dword ptr [rax]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~esi, edx>', '<shr~~esi, 3>', '<mov~~esi, esi>', '<mov~~sil, byte ptr [rcx + rsi]>', '<mov~~ecx, edx>', '<and~~ecx, 7>', '<movzx~~esi, sil>', '<mov~~dword ptr [rsp + 0x85c], esi>', '<add~~edx, 1>', '<mov~~dword ptr [rax], edx>', '<mov~~eax, 0x80>', '<shr~~eax, cl>', '<mov~~ecx, dword ptr [rsp + 0x85c]>', '<and~~eax, ecx>', '<cmp~~eax, 0>', '<je~~0x402b02>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0xc28]>', '<mov~~al, byte ptr [rax]>', '<test~~al, al>', '<setne~~al>', '<sub~~rcx, 1>', '<sete~~cl>', '<and~~al, cl>', '<test~~al, 1>', '<jne~~0x403f54>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x590]>', '<mov~~rcx, qword ptr [rsp + 0x558]>', '<mov~~rax, qword ptr [rsp + 0x550]>', '<add~~rax, 1>', '<add~~rcx, 0x2000>', '<cmp~~rax, rdx>', '<mov~~qword ptr [rsp + 0x598], rcx>', '<mov~~qword ptr [rsp + 0x5a0], rax>', '<jne~~0x402e43>']}, {'block_Idx': 187, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2e8]>', '<mov~~rcx, qword ptr [rsp + 0xbd0]>', '<mov~~edx, dword ptr [rcx]>', '<xor~~ecx, ecx>', '<mov~~dword ptr [rsp + 0x2d8], edx>', '<mov~~dword ptr [rsp + 0x2dc], ecx>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~ecx, dword ptr [rsp + 0x2dc]>', '<mov~~edx, dword ptr [rsp + 0x2d8]>', '<mov~~esi, dword ptr [rsp + 0x2f4]>', '<mov~~rax, qword ptr [rsp + 0xa30]>', '<movss~~xmm0, dword ptr [rsp + 0x304]>', '<movsxd~~r8, edx>', '<mulss~~xmm0, dword ptr [rax + r8*4 + 0x1c75c]>', '<movss~~dword ptr [rsp + 0x2bc], xmm0>', '<mov~~rax, rdi>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<movss~~dword ptr [rdi], xmm0>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x2cc], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x2d0], edx>', '<add~~ecx, 1>', '<mov~~dword ptr [rsp + 0x2d4], ecx>', '<cmp~~ecx, esi>', '<mov~~dword ptr [rsp + 0x2d8], edx>', '<mov~~dword ptr [rsp + 0x2dc], ecx>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<je~~0x403d89>']}, {'block_Idx': 155, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x860]>', '<mov~~eax, dword ptr [rsp + 0x894]>', '<add~~eax, -0x12>', '<add~~eax, ecx>', '<mov~~dword ptr [rsp + 0x890], eax>', '<mov~~rdx, qword ptr [rsp + 0x898]>', '<mov~~rsi, qword ptr [rsp + 0x8c0]>', '<mov~~rcx, qword ptr [rsp + 0xa30]>', '<mov~~eax, dword ptr [rsp + 0x890]>', '<add~~rcx, 0x3b0>', '<shl~~rsi, 6>', '<add~~rcx, rsi>', '<shl~~rdx, 2>', '<add~~rcx, rdx>', '<mov~~dword ptr [rcx], eax>', '<mov~~dword ptr [rsp + 0x8a4], eax>', '<mov~~rdx, qword ptr [rsp + 0x8a8]>', '<mov~~rcx, qword ptr [rsp + 0x898]>', '<mov~~eax, dword ptr [rsp + 0x8a4]>', '<add~~rcx, 1>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x8b0], rcx>', '<mov~~dword ptr [rsp + 0x8b8], eax>', '<jne~~0x401b26>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x14c]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0xa28]>', '<mov~~edx, dword ptr [rsp + 0x13c]>', '<lea~~rsi, [rsp + 0xc60]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<call~~rax>']}, {'block_Idx': 182, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x480]>', '<mov~~rdx, qword ptr [rsp + 0x468]>', '<mov~~edi, dword ptr [rsp + 0x470]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~eax, dword ptr [rsp + 0x474]>', '<shl~~edi, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<sar~~edi, cl>', '<mov~~rcx, qword ptr [rsp + 0x460]>', '<movsxd~~rdi, edi>', '<shl~~rdi, 2>', '<add~~rcx, rdi>', '<add~~rdx, 1>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x488], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x494], edx>', '<mov~~qword ptr [rsp + 0x498], rcx>', '<mov~~dword ptr [rsp + 0x4b0], eax>', '<jne~~0x40320e>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xbf0]>', '<cmp~~byte ptr [rax], 0>', '<je~~0x403e46>']}, {'block_Idx': 216, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a4]>', '<mov~~rdi, qword ptr [rsp + 0x1a8]>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rsp + 0x1b8]>', '<cdqe~~>', '<mov~~rcx, rax>', '<shl~~rcx, 2>', '<add~~rdi, rcx>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<shl~~rdx, 2>', '<call~~0x500078>']}, {'block_Idx': 209, 'blockInsts': ['<mov~~r8, qword ptr [rsp + 0x3a0]>', '<mov~~esi, dword ptr [rsp + 0x39c]>', '<mov~~edx, dword ptr [rsp + 0x398]>', '<mov~~edi, dword ptr [rsp + 0x3c8]>', '<movss~~xmm0, dword ptr [rsp + 0x3b4]>', '<mov~~rax, qword ptr [rsp + 0x3e0]>', '<mov~~ecx, dword ptr [rsp + 0x99c]>', '<mov~~r9, qword ptr [rsp + 0xa30]>', '<movsxd~~r10, edx>', '<movss~~xmm1, dword ptr [r9 + r10*4 + 0x1c75c]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x360], edx>', '<and~~edx, 0x1fff>', '<mov~~dword ptr [rsp + 0x364], edx>', '<mov~~r9d, esi>', '<shl~~r9d, cl>', '<mov~~ecx, dword ptr [rsp + 0x534]>', '<mov~~dword ptr [rsp + 0x368], r9d>', '<sar~~r9d, cl>', '<mov~~rcx, qword ptr [rsp + 0x3d0]>', '<mov~~dword ptr [rsp + 0x36c], r9d>', '<movsxd~~r9, r9d>', '<mulss~~xmm1, dword ptr [rax + r9*4]>', '<movss~~dword ptr [rsp + 0x370], xmm1>', '<mulss~~xmm0, xmm1>', '<movss~~dword ptr [rsp + 0x374], xmm0>', '<mov~~rax, r8>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x378], rax>', '<movss~~dword ptr [r8], xmm0>', '<add~~esi, 1>', '<mov~~dword ptr [rsp + 0x380], esi>', '<cmp~~esi, edi>', '<mov~~edi, edx>', '<mov~~dword ptr [rsp + 0x398], edi>', '<mov~~dword ptr [rsp + 0x39c], esi>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x3a0], rsi>', '<mov~~dword ptr [rsp + 0x384], edx>', '<mov~~qword ptr [rsp + 0x388], rcx>', '<mov~~qword ptr [rsp + 0x390], rax>', '<je~~0x403979>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa30]>', '<mov~~rcx, rax>', '<add~~rcx, 0x4a0>', '<mov~~qword ptr [rsp + 0x130], rcx>', '<mov~~ecx, dword ptr [rax + 0x4a0]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x4c>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~ecx, dword ptr [rax + 0x4c]>', '<mov~~dword ptr [rsp + 0x14c], ecx>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~rcx, qword ptr [rip + 0xfbcfe]>', '<cmp~~rax, rcx>', '<jne~~0x4045a7>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa58]>', '<mov~~rcx, qword ptr [rsp + 0xa50]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xa1c], ecx>', '<add~~ecx, -1>', '<or~~ecx, 1>', '<bsr~~edx, ecx>', '<xor~~edx, 0x1f>', '<mov~~dword ptr [rsp + 0xa20], edx>', '<mov~~ecx, 0x20>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0xa24], ecx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4013ed>']}], 'cfg_edge_info': [(90, 24), (223, 59), (170, 169), (92, 106), (111, 119), (203, 202), (25, 34), (3, 6), (133, 143), (165, 175), (26, 16), (7, 12), (158, 172), (180, 187), (99, 113), (77, 85), (100, 87), (140, 141), (172, 182), (81, 91), (93, 74), (103, 115), (114, 124), (187, 194), (198, 194), (206, 207), (55, 56), (29, 13), (59, 63), (159, 159), (188, 195), (207, 208), (177, 27), (132, 123), (10, 17), (192, 192), (54, 60), (3, 5), (165, 165), (35, 46), (66, 70), (50, 211), (158, 171), (80, 89), (62, 68), (32, 36), (24, 32), (146, 156), (143, 132), (118, 75), (195, 197), (187, 193), (198, 193), (29, 12), (209, 208), (58, 57), (104, 24), (191, 190), (121, 131), (2, 3), (10, 16), (54, 59), (183, 191), (91, 117), (87, 101), (209, 203), (199, 180), (160, 161), (128, 138), (61, 66), (80, 79), (134, 145), (113, 122), (210, 45), (153, 176), (118, 74), (179, 179), (136, 128), (109, 111), (68, 73), (197, 196), (191, 171), (120, 129), (6, 18), (79, 88), (42, 48), (171, 180), (142, 153), (43, 3), (112, 121), (145, 154), (127, 136), (27, 36), (160, 160), (189, 196), (134, 144), (122, 71), (202, 189), (72, 61), (53, 57), (179, 169), (86, 99), (109, 110), (42, 47), (190, 183), (193, 90), (60, 64), (102, 79), (155, 100), (104, 116), (152, 165), (204, 203), (196, 199), (127, 90), (175, 185), (38, 27), (67, 72), (208, 209), (159, 173), (149, 159), (12, 19), (115, 102), (232, 40), (34, 34), (224, 36), (85, 97), (174, 184), (86, 98), (89, 103), (51, 216), (163, 165), (82, 91), (60, 63), (152, 164), (37, 43), (166, 175), (207, 203), (99, 112), (79, 72), (71, 77), (81, 90), (144, 155), (66, 65), (45, 51), (114, 123), (85, 96), (55, 55), (40, 210), (130, 131), (192, 191), (200, 204), (123, 100), (44, 45), (14, 22), (74, 82), (37, 42), (166, 165), (119, 71), (70, 75), (218, 220), (48, 56), (129, 139), (62, 67), (33, 40), (173, 172), (154, 177), (195, 196), (106, 118), (19, 6), (199, 202), (121, 130), (193, 136), (73, 80), (14, 21), (84, 95), (87, 100), (47, 36), (117, 128), (47, 54), (119, 70), (128, 137), (21, 29), (61, 65), (150, 161), (110, 97), (25, 35), (173, 171), (155, 132), (28, 27), (162, 27), (136, 127), (100, 61), (139, 150), (77, 86), (142, 152), (101, 114), (203, 180), (169, 178), (161, 174), (172, 183), (185, 113), (83, 93), (131, 142), (213, 230), (102, 115), (194, 198), (84, 94), (116, 126), (206, 199), (65, 71), (76, 71), (88, 73), (117, 127), (201, 206), (101, 100), (150, 160), (132, 124), (39, 45), (110, 96), (122, 70), (75, 84), (202, 188), (72, 78), (16, 25), (124, 134), (46, 53), (57, 62), (17, 26), (190, 182), (90, 104), (31, 27), (56, 218), (83, 92), (131, 141), (185, 121), (103, 79), (32, 37), (24, 33), (164, 165), (106, 93), (116, 125), (5, 10), (156, 170), (65, 70), (76, 70), (9, 17), (97, 111), (138, 149), (169, 127), (58, 58), (39, 44), (2, 4), (232, 39), (75, 83), (123, 132), (183, 192), (13, 28), (64, 64), (16, 24), (124, 133), (17, 16), (46, 52), (57, 61), (130, 140), (89, 102), (176, 27), (184, 129), (82, 90), (152, 163), (137, 147), (180, 127), (5, 9), (156, 169), (9, 16), (97, 110), (138, 148), (71, 76), (171, 181), (182, 190), (43, 4), (144, 154), (143, 100), (45, 50), (64, 63), (145, 155), (8, 15), (184, 119), (197, 201), (27, 37), (189, 197), (200, 203), (4, 8), (52, 57), (181, 189), (126, 24), (1, 2), (141, 162), (74, 81), (53, 58), (137, 146), (223, 60), (15, 31), (18, 27), (70, 74), (78, 87), (218, 219), (48, 55), (170, 179), (111, 120), (182, 171), (33, 39), (152, 166), (204, 204), (22, 38), (196, 200), (7, 13), (26, 26), (96, 109), (19, 5), (0, 1), (8, 14), (92, 93), (140, 142), (4, 7), (73, 79), (115, 103), (181, 188), (93, 75), (34, 35)], 'cdg_edge_info': [(223, 59), (207, 209), (185, 32), (19, 18), (77, 90), (92, 106), (203, 202), (25, 34), (145, 90), (147, 32), (3, 6), (3, 24), (206, 203), (16, 70), (7, 12), (29, 27), (180, 187), (77, 85), (100, 87), (140, 141), (184, 184), (110, 109), (178, 24), (189, 24), (172, 191), (81, 91), (137, 90), (128, 32), (103, 115), (114, 124), (206, 207), (16, 74), (29, 13), (159, 159), (184, 161), (128, 171), (10, 17), (192, 192), (54, 60), (62, 73), (202, 196), (3, 5), (165, 165), (198, 198), (187, 198), (80, 89), (184, 174), (82, 117), (62, 68), (95, 74), (32, 36), (95, 83), (143, 132), (3, 18), (16, 46), (118, 75), (195, 197), (29, 12), (104, 24), (77, 70), (191, 190), (143, 24), (121, 131), (2, 3), (145, 61), (145, 70), (54, 59), (202, 195), (111, 184), (131, 162), (114, 100), (24, 45), (87, 101), (131, 27), (132, 90), (128, 138), (77, 74), (61, 66), (134, 145), (144, 100), (45, 216), (111, 161), (94, 90), (142, 176), (145, 74), (77, 24), (145, 177), (179, 179), (136, 128), (197, 196), (104, 32), (42, 48), (184, 150), (142, 153), (43, 3), (111, 174), (145, 154), (142, 27), (86, 113), (27, 36), (160, 160), (86, 122), (19, 32), (137, 24), (134, 144), (122, 71), (202, 189), (16, 35), (86, 90), (77, 32), (86, 99), (109, 110), (57, 72), (8, 27), (19, 27), (42, 47), (145, 32), (190, 183), (42, 56), (60, 64), (104, 116), (152, 165), (132, 61), (132, 70), (79, 73), (8, 31), (145, 27), (137, 32), (185, 90), (111, 150), (181, 196), (34, 34), (232, 40), (196, 203), (85, 97), (147, 90), (86, 98), (132, 74), (89, 103), (100, 100), (128, 180), (143, 61), (82, 91), (143, 70), (3, 32), (37, 43), (132, 24), (99, 112), (99, 121), (94, 24), (77, 111), (71, 77), (189, 32), (178, 32), (143, 74), (181, 195), (144, 155), (81, 117), (14, 27), (3, 27), (66, 65), (45, 51), (85, 96), (55, 55), (86, 70), (147, 156), (130, 131), (189, 180), (19, 16), (200, 204), (114, 24), (140, 162), (14, 22), (74, 82), (37, 42), (140, 27), (166, 165), (132, 32), (86, 74), (7, 19), (119, 71), (7, 28), (70, 75), (144, 24), (147, 169), (218, 220), (94, 32), (77, 119), (142, 185), (33, 40), (173, 172), (86, 24), (195, 196), (106, 118), (118, 83), (16, 90), (19, 6), (143, 32), (121, 130), (73, 80), (193, 136), (114, 90), (84, 95), (14, 21), (47, 36), (76, 90), (47, 54), (117, 128), (47, 63), (128, 137), (185, 24), (180, 193), (61, 65), (144, 90), (110, 97), (147, 24), (145, 100), (155, 132), (95, 90), (3, 16), (86, 32), (42, 218), (29, 19), (138, 173), (29, 28), (77, 86), (101, 114), (142, 152), (169, 178), (172, 183), (185, 113), (131, 142), (185, 122), (84, 94), (16, 57), (76, 71), (65, 71), (138, 159), (150, 160), (132, 124), (110, 96), (75, 84), (202, 188), (72, 78), (16, 25), (72, 87), (124, 134), (124, 143), (46, 53), (16, 61), (17, 26), (57, 62), (184, 139), (90, 104), (190, 191), (94, 74), (94, 83), (114, 61), (83, 92), (131, 141), (114, 70), (185, 121), (32, 37), (24, 33), (116, 125), (128, 90), (72, 100), (5, 10), (156, 170), (76, 70), (9, 17), (138, 149), (209, 209), (58, 58), (144, 61), (144, 70), (39, 44), (2, 4), (232, 39), (114, 74), (183, 192), (64, 64), (124, 133), (76, 74), (130, 140), (184, 129), (132, 100), (144, 74), (76, 24), (144, 177), (178, 90), (189, 90), (137, 147), (85, 109), (137, 156), (5, 9), (97, 110), (197, 206), (71, 76), (185, 70), (95, 24), (171, 181), (111, 139), (43, 4), (143, 100), (144, 154), (45, 50), (145, 155), (137, 169), (8, 15), (197, 201), (19, 24), (27, 37), (189, 197), (185, 74), (114, 32), (4, 8), (181, 189), (74, 81), (53, 58), (76, 32), (223, 60), (7, 27), (70, 83), (144, 32), (218, 219), (48, 55), (170, 179), (79, 79), (145, 24), (111, 120), (111, 129), (33, 39), (95, 32), (143, 90), (152, 166), (204, 204), (196, 200), (7, 13), (26, 26), (19, 5), (144, 27), (8, 14), (140, 142), (4, 7), (62, 79), (128, 24), (115, 103), (181, 188), (14, 29), (14, 38)], 'ddg_edge_info': [(140, 43), (141, 8), (113, 26), (173, 40), (118, 104), (32, 101), (198, 213), (204, 64), (91, 7), (35, 106), (8, 9), (154, 63), (0, 5), (140, 128), (6, 48), (165, 72), (9, 90), (204, 149), (115, 71), (25, 34), (213, 5), (179, 92), (159, 34), (144, 134), (91, 128), (2, 50), (3, 15), (203, 40), (122, 115), (181, 201), (153, 219), (155, 149), (173, 197), (201, 116), (66, 71), (232, 103), (115, 192), (35, 83), (15, 25), (113, 39), (179, 213), (154, 40), (133, 17), (136, 171), (134, 98), (66, 192), (201, 8), (140, 141), (166, 50), (16, 191), (203, 197), (22, 5), (81, 91), (122, 92), (0, 103), (34, 16), (173, 174), (174, 139), (193, 152), (145, 112), (9, 188), (103, 115), (35, 60), (122, 128), (209, 133), (113, 16), (159, 132), (165, 26), (35, 96), (122, 213), (188, 195), (66, 169), (140, 118), (119, 95), (9, 80), (203, 174), (115, 61), (26, 132), (119, 180), (198, 95), (159, 24), (16, 204), (2, 40), (209, 110), (173, 187), (174, 152), (13, 55), (9, 201), (35, 73), (173, 43), (119, 72), (6, 15), (165, 39), (9, 57), (6, 51), (32, 189), (133, 92), (118, 192), (198, 72), (145, 66), (204, 152), (54, 64), (209, 87), (155, 116), (174, 129), (13, 32), (32, 45), (203, 43), (115, 159), (35, 50), (155, 152), (1, 57), (34, 91), (153, 42), (179, 180), (133, 213), (198, 193), (159, 122), (154, 7), (165, 16), (145, 187), (9, 34), (136, 138), (109, 121), (29, 12), (154, 43), (66, 159), (26, 86), (166, 17), (191, 190), (115, 51), (134, 150), (26, 122), (213, 214), (173, 141), (179, 72), (174, 106), (110, 121), (183, 191), (22, 8), (202, 204), (122, 95), (1, 34), (26, 207), (66, 51), (153, 19), (13, 45), (119, 26), (115, 172), (35, 63), (1, 70), (34, 104), (153, 55), (66, 136), (140, 85), (198, 206), (5, 40), (145, 200), (6, 5), (46, 78), (203, 141), (204, 106), (9, 47), (66, 172), (140, 121), (113, 104), (173, 118), (232, 204), (32, 179), (16, 171), (35, 184), (9, 132), (110, 98), (122, 72), (153, 176), (209, 77), (155, 106), (140, 206), (173, 154), (193, 132), (166, 115), (13, 22), (213, 47), (165, 150), (115, 149), (35, 40), (153, 32), (159, 112), (118, 74), (5, 17), (119, 39), (9, 24), (136, 128), (68, 73), (203, 118), (209, 198), (0, 204), (109, 111), (66, 149), (140, 98), (141, 63), (6, 18), (179, 26), (118, 159), (138, 174), (198, 39), (203, 154), (35, 161), (0, 60), (155, 83), (166, 92), (112, 121), (56, 220), (109, 232), (35, 17), (209, 90), (26, 197), (1, 24), (166, 128), (13, 35), (213, 60), (153, 9), (118, 51), (119, 16), (145, 154), (232, 73), (159, 89), (133, 180), (154, 10), (140, 75), (141, 40), (46, 68), (145, 190), (32, 133), (91, 219), (78, 100), (198, 16), (166, 213), (122, 206), (201, 207), (121, 98), (1, 145), (26, 89), (0, 37), (174, 73), (118, 172), (165, 104), (193, 86), (179, 39), (9, 122), (109, 209), (0, 73), (201, 63), (165, 140), (13, 12), (213, 37), (32, 25), (159, 66), (232, 50), (22, 60), (34, 71), (153, 22), (198, 173), (193, 207), (91, 196), (204, 73), (209, 188), (201, 184), (26, 66), (113, 71), (173, 85), (118, 149), (179, 16), (159, 187), (193, 63), (232, 171), (42, 47), (122, 39), (34, 192), (0, 50), (155, 73), (140, 173), (60, 64), (173, 121), (174, 86), (119, 150), (201, 40), (213, 14), (115, 116), (35, 7), (140, 209), (113, 192), (26, 187), (213, 50), (198, 150), (145, 144), (91, 173), (2, 95), (203, 85), (223, 63), (128, 91), (15, 34), (0, 171), (174, 207), (66, 116), (26, 43), (46, 58), (133, 26), (203, 121), (204, 86), (201, 197), (34, 169), (122, 16), (173, 98), (19, 40), (174, 63), (159, 200), (9, 112), (209, 57), (155, 86), (113, 169), (166, 95), (232, 40), (204, 207), (196, 203), (22, 50), (26, 200), (14, 46), (34, 61), (174, 184), (179, 150), (193, 197), (140, 42), (141, 7), (166, 180), (203, 98), (204, 63), (122, 173), (15, 47), (155, 207), (1, 112), (113, 61), (0, 4), (141, 43), (32, 136), (174, 40), (119, 104), (133, 39), (173, 75), (165, 71), (130, 150), (232, 161), (35, 141), (117, 180), (9, 89), (136, 193), (2, 193), (91, 42), (209, 34), (0, 40), (66, 214), (155, 63), (119, 140), (166, 72), (213, 4), (198, 104), (115, 106), (193, 174), (198, 140), (165, 192), (145, 134), (203, 75), (204, 40), (22, 63), (122, 150), (0, 161), (15, 24), (173, 232), (174, 197), (66, 106), (154, 219), (133, 16), (118, 116), (159, 154), (91, 19), (35, 118), (34, 159), (0, 17), (155, 40), (201, 7), (159, 190), (6, 60), (193, 66), (2, 206), (117, 193), (109, 189), (115, 83), (201, 43), (113, 159), (26, 154), (179, 104), (213, 17), (159, 46), (204, 197), (22, 40), (109, 45), (209, 132), (34, 51), (201, 128), (173, 209), (66, 83), (193, 187), (140, 32), (32, 90), (232, 115), (115, 204), (35, 95), (15, 37), (155, 197), (26, 46), (113, 51), (34, 136), (173, 65), (145, 232), (165, 61), (193, 43), (166, 26), (91, 32), (128, 179), (134, 110), (34, 172), (209, 24), (121, 140), (66, 204), (140, 153), (200, 204), (203, 209), (204, 174), (2, 39), (22, 17), (122, 104), (14, 13), (0, 115), (113, 172), (133, 150), (74, 64), (140, 9), (9, 200), (203, 65), (35, 72), (122, 140), (15, 14), (155, 174), (174, 187), (153, 64), (141, 10), (32, 103), (232, 128), (118, 106), (119, 71), (159, 144), (173, 42), (91, 9), (29, 34), (87, 155), (1, 115), (34, 149), (0, 7), (140, 130), (174, 43), (6, 50), (166, 39), (32, 188), (165, 74), (9, 92), (109, 179), (115, 73), (26, 144), (113, 149), (33, 40), (119, 192), (193, 141), (145, 101), (204, 187), (203, 42), (14, 26), (0, 128), (209, 122), (32, 80), (118, 83), (159, 121), (9, 213), (50, 214), (204, 43), (35, 85), (136, 137), (1, 92), (87, 132), (154, 42), (165, 51), (166, 16), (91, 22), (2, 173), (115, 50), (121, 130), (155, 43), (26, 121), (201, 10), (6, 63), (32, 201), (179, 71), (133, 104), (118, 204), (115, 86), (1, 213), (22, 7), (202, 203), (14, 3), (73, 89), (155, 128), (174, 141), (66, 50), (165, 172), (193, 154), (32, 57), (9, 190), (35, 62), (15, 4), (153, 54), (179, 192), (154, 19), (173, 32), (159, 134), (119, 61), (206, 209), (166, 173), (115, 207), (9, 46), (154, 55), (26, 98), (6, 40), (198, 61), (204, 141), (109, 169), (115, 63), (110, 97), (2, 6), (26, 134), (173, 153), (174, 118), (165, 149), (32, 34), (3, 7), (203, 32), (35, 39), (109, 25), (209, 112), (155, 141), (174, 154), (66, 63), (166, 150), (173, 9), (159, 111), (32, 70), (232, 95), (35, 75), (34, 116), (154, 32), (173, 45), (119, 74), (6, 17), (138, 173), (203, 153), (204, 118), (115, 40), (26, 111), (113, 116), (173, 130), (179, 61), (159, 232), (198, 74), (71, 119), (204, 154), (82, 128), (203, 9), (209, 89), (155, 118), (66, 40), (193, 144), (13, 34), (32, 47), (118, 50), (9, 180), (203, 45), (26, 232), (141, 219), (153, 44), (154, 9), (119, 51), (145, 189), (203, 130), (115, 17), (201, 206), (140, 110), (46, 103), (133, 71), (198, 51), (145, 45), (150, 160), (122, 61), (209, 66), (34, 214), (118, 207), (119, 172), (66, 17), (166, 104), (193, 121), (179, 74), (32, 24), (202, 206), (35, 29), (26, 209), (113, 214), (166, 140), (13, 47), (133, 192), (198, 172), (118, 63), (159, 101), (153, 21), (179, 159), (115, 174), (2, 117), (9, 13), (34, 106), (154, 22), (6, 7), (35, 150), (109, 136), (201, 219), (121, 110), (66, 174), (26, 101), (113, 106), (174, 85), (179, 51), (165, 116), (193, 98), (119, 149), (198, 64), (9, 134), (122, 74), (174, 121), (165, 152), (13, 24), (198, 149), (118, 40), (32, 37), (35, 42), (8, 174), (34, 83), (153, 34), (179, 172), (140, 64), (145, 179), (9, 26), (204, 85), (209, 200), (201, 196), (113, 83), (133, 61), (19, 39), (193, 75), (71, 86), (204, 121), (91, 64), (122, 51), (34, 204), (155, 85), (173, 133), (118, 197), (174, 98), (193, 111), (71, 122), (232, 39), (115, 128), (35, 19), (155, 121), (1, 26), (113, 204), (13, 37), (179, 149), (159, 91), (109, 90), (122, 172), (15, 46), (134, 34), (201, 173), (155, 206), (66, 128), (39, 174), (141, 42), (193, 232), (140, 77), (203, 133), (204, 98), (35, 140), (209, 213), (201, 209), (0, 39), (173, 110), (174, 75), (133, 74), (165, 106), (166, 71), (122, 64), (155, 98), (1, 3), (140, 198), (133, 159), (13, 14), (213, 39), (115, 141), (35, 32), (122, 149), (34, 73), (193, 209), (145, 169), (32, 112), (91, 198), (203, 110), (9, 16), (204, 75), (209, 190), (174, 232), (113, 73), (141, 55), (133, 51), (159, 189), (119, 116), (193, 65), (165, 83), (173, 87), (145, 25), (91, 54), (35, 153), (9, 101), (128, 201), (209, 46), (155, 75), (201, 42), (119, 152), (213, 16), (32, 4), (159, 45), (22, 219), (115, 118), (35, 9), (26, 189), (1, 16), (34, 50), (133, 172), (152, 185), (198, 152), (118, 43), (204, 232), (82, 206), (203, 87), (174, 209), (66, 118), (26, 45), (141, 32), (113, 50), (118, 128), (16, 117), (35, 130), (0, 29), (201, 19), (174, 65), (166, 61), (185, 74), (109, 201), (115, 95), (140, 188), (201, 55), (133, 149), (13, 4), (213, 29), (179, 116), (204, 209), (2, 74), (113, 207), (209, 144), (155, 173), (34, 63), (179, 152), (66, 95), (141, 9), (145, 159), (192, 91), (91, 188), (204, 65), (209, 180), (155, 209), (113, 63), (154, 64), (0, 6), (173, 77), (174, 42), (119, 106), (159, 179), (165, 73), (91, 44), (128, 191), (0, 42), (155, 65), (201, 32), (121, 152), (166, 74), (213, 6), (198, 106), (232, 19), (109, 214), (2, 51), (22, 29), (26, 179), (181, 202), (34, 40), (173, 198), (145, 136), (203, 77), (204, 42), (109, 70), (35, 84), (122, 152), (15, 26), (113, 40), (141, 22), (32, 115), (119, 83), (193, 32), (35, 120), (91, 21), (110, 34), (136, 172), (29, 46), (0, 19), (155, 42), (140, 142), (201, 9), (173, 90), (165, 86), (166, 51), (9, 104), (203, 198), (115, 85), (34, 17), (179, 106), (213, 19), (193, 153), (22, 42), (109, 47), (209, 134), (15, 3), (66, 85), (165, 207), (193, 189), (166, 172), (140, 34), (32, 92), (118, 95), (232, 117), (113, 17), (144, 4), (203, 90), (115, 206), (35, 97), (136, 149), (15, 39), (6, 219), (154, 54), (207, 209), (174, 32), (159, 169), (193, 45), (191, 201), (165, 63), (91, 34), (117, 172), (128, 181), (209, 26), (121, 142), (66, 206), (201, 22), (26, 133), (133, 116), (179, 83), (32, 213), (159, 25), (145, 90), (115, 98), (22, 19), (109, 24), (122, 106), (113, 174), (0, 117), (209, 111), (173, 188), (14, 15), (174, 153), (166, 149), (204, 32), (35, 74), (15, 16), (121, 34), (26, 25), (166, 185), (179, 204), (141, 12), (174, 9), (119, 73), (165, 40), (40, 45), (155, 32), (0, 9), (174, 45), (32, 190), (198, 73), (203, 188), (204, 153), (110, 109), (115, 75), (81, 82), (174, 130), (44, 51), (9, 179), (3, 19), (22, 32), (204, 9), (155, 153), (66, 75), (165, 197), (140, 24), (153, 43), (204, 45), (35, 87), (29, 13), (34, 128), (154, 44), (155, 9), (173, 57), (119, 86), (6, 29), (9, 71), (204, 130), (128, 171), (201, 12), (113, 128), (133, 106), (118, 206), (179, 73), (198, 86), (22, 9), (209, 101), (155, 130), (119, 207), (165, 174), (13, 46), (232, 84), (9, 192), (203, 57), (115, 173), (35, 64), (15, 6), (187, 198), (153, 56), (154, 21), (173, 34), (159, 136), (119, 63), (145, 201), (198, 207), (29, 26), (66, 173), (140, 122), (6, 42), (133, 83), (179, 50), (32, 180), (198, 63), (16, 172), (35, 185), (115, 65), (82, 117), (122, 73), (113, 141), (0, 84), (172, 190), (179, 86), (193, 133), (166, 116), (9, 169), (203, 34), (133, 204), (153, 33), (166, 152), (32, 72), (118, 75), (119, 40), (35, 77), (9, 25), (109, 112), (34, 118), (179, 207), (154, 34), (6, 19), (145, 214), (165, 43), (198, 40), (9, 61), (115, 42), (113, 118), (173, 132), (179, 63), (165, 128), (193, 110), (145, 70), (202, 195), (122, 86), (209, 91), (174, 133), (119, 197), (66, 42), (213, 61), (232, 74), (159, 90), (35, 54), (1, 61), (34, 95), (206, 201), (153, 46), (198, 197), (173, 24), (203, 132), (122, 207), (128, 138), (140, 112), (113, 95), (26, 90), (6, 32), (118, 173), (179, 40), (145, 47), (204, 133), (122, 63), (201, 64), (174, 110), (119, 174), (165, 141), (118, 209), (166, 106), (32, 26), (232, 51), (9, 159), (203, 24), (115, 140), (155, 133), (34, 72), (198, 174), (159, 103), (91, 197), (9, 15), (209, 189), (134, 46), (154, 24), (66, 140), (179, 197), (141, 54), (145, 204), (6, 9), (232, 172), (191, 171), (133, 50), (204, 110), (35, 152), (115, 32), (122, 40), (26, 103), (0, 51), (173, 122), (174, 87), (133, 86), (165, 118), (9, 136), (35, 8), (0, 87), (155, 110), (26, 188), (66, 32), (13, 26), (213, 51), (32, 39), (159, 80), (118, 42), (115, 153), (35, 44), (1, 51), (0, 172), (34, 85), (133, 207), (179, 174), (119, 43), (203, 122), (204, 87), (35, 129), (122, 197), (115, 9), (201, 198), (26, 80), (113, 85), (213, 172), (133, 63), (159, 201), (119, 128), (193, 77), (198, 43), (130, 174), (35, 165), (1, 172), (134, 144), (34, 206), (0, 64), (155, 87), (140, 187), (201, 54), (66, 9), (46, 180), (13, 3), (32, 16), (159, 57), (9, 149), (115, 130), (35, 21), (26, 201), (113, 206), (153, 13), (213, 64), (193, 198), (91, 187), (38, 32), (109, 92), (122, 174), (209, 179), (15, 48), (66, 130), (26, 57), (141, 44), (133, 40), (91, 43), (35, 142), (134, 121), (155, 64), (173, 112), (174, 77), (119, 141), (193, 90), (166, 73), (179, 43), (145, 50), (159, 214), (109, 213), (209, 71), (140, 200), (1, 5), (34, 39), (13, 16), (179, 128), (198, 141), (159, 70), (118, 32), (22, 64), (34, 75), (133, 197), (174, 198), (26, 34), (141, 21), (91, 200), (203, 112), (204, 77), (35, 119), (209, 192), (201, 188), (26, 70), (113, 75), (173, 89), (159, 191), (119, 118), (165, 85), (91, 56), (2, 207), (9, 103), (109, 190), (128, 203), (122, 43), (0, 54), (155, 77), (201, 44), (174, 90), (165, 121), (166, 86), (198, 118), (118, 9), (159, 47), (204, 198), (153, 3), (133, 174), (179, 141), (165, 206), (193, 188), (198, 154), (203, 89), (209, 169), (155, 198), (26, 47), (166, 207), (86, 98), (141, 34), (173, 66), (89, 103), (204, 90), (35, 132), (91, 33), (128, 180), (34, 173), (209, 25), (201, 21), (159, 204), (193, 80), (166, 63), (192, 201), (165, 98), (9, 116), (140, 190), (113, 173), (179, 118), (203, 66), (22, 54), (122, 141), (174, 188), (193, 201), (85, 110), (26, 24), (32, 104), (232, 129), (91, 10), (35, 109), (15, 51), (201, 178), (113, 65), (0, 8), (165, 75), (193, 57), (166, 40), (145, 17), (203, 187), (136, 197), (109, 180), (115, 74), (201, 34), (113, 150), (133, 128), (179, 95), (213, 8), (4, 14), (44, 50), (204, 188), (115, 110), (122, 118), (0, 129), (34, 42), (173, 200), (66, 74), (45, 51), (9, 214), (35, 86), (122, 154), (209, 159), (155, 188), (141, 24), (113, 42), (166, 197), (119, 85), (193, 34), (35, 122), (9, 70), (0, 21), (174, 57), (6, 64), (192, 191), (198, 85), (203, 200), (115, 87), (1, 214), (119, 206), (165, 173), (198, 121), (144, 150), (22, 44), (209, 136), (15, 5), (165, 209), (166, 174), (232, 119), (204, 57), (35, 99), (1, 106), (128, 147), (34, 140), (154, 56), (174, 34), (119, 98), (165, 65), (193, 47), (2, 187), (9, 83), (115, 64), (201, 24), (113, 140), (133, 118), (179, 85), (198, 98), (145, 92), (2, 43), (22, 21), (109, 26), (154, 177), (0, 119), (173, 190), (66, 64), (32, 71), (9, 204), (204, 34), (113, 32), (154, 33), (179, 206), (173, 46), (119, 75), (145, 213), (165, 42), (193, 24), (91, 13), (155, 34), (26, 112), (6, 54), (32, 192), (133, 95), (166, 43), (198, 75), (203, 190), (115, 77), (122, 85), (113, 153), (34, 9), (174, 132), (179, 98), (84, 95), (203, 46), (35, 53), (109, 39), (122, 121), (0, 132), (87, 100), (66, 77), (113, 9), (153, 45), (130, 98), (115, 198), (2, 141), (117, 128), (35, 89), (128, 137), (34, 130), (154, 46), (174, 24), (32, 169), (9, 73), (204, 132), (35, 174), (109, 160), (150, 161), (66, 198), (113, 130), (173, 144), (179, 75), (119, 173), (193, 122), (159, 17), (109, 16), (122, 98), (209, 103), (202, 207), (155, 132), (173, 180), (140, 232), (119, 209), (166, 141), (13, 48), (32, 61), (118, 64), (232, 86), (204, 24), (35, 66), (195, 204), (198, 209), (119, 65), (6, 8), (165, 32), (91, 3), (9, 50), (203, 144), (155, 24), (6, 44), (133, 85), (198, 65), (203, 180), (150, 174), (81, 74), (122, 75), (209, 80), (0, 86), (174, 122), (165, 153), (166, 118), (13, 25), (145, 95), (232, 63), (115, 152), (35, 43), (209, 116), (1, 50), (153, 35), (179, 173), (133, 206), (213, 86), (159, 115), (119, 42), (165, 9), (65, 71), (145, 180), (115, 188), (209, 201), (179, 209), (6, 21), (32, 159), (198, 42), (204, 122), (26, 115), (0, 63), (133, 98), (118, 198), (179, 65), (165, 130), (193, 112), (173, 134), (202, 197), (155, 122), (165, 166), (153, 12), (213, 63), (32, 51), (159, 92), (35, 56), (153, 48), (154, 13), (173, 26), (9, 40), (203, 134), (122, 209), (209, 214), (74, 169), (26, 92), (32, 172), (133, 75), (232, 197), (159, 213), (179, 42), (193, 89), (173, 111), (122, 65), (209, 70), (174, 112), (13, 15), (213, 40), (185, 121), (203, 26), (35, 33), (26, 213), (34, 74), (153, 25), (119, 32), (5, 10), (9, 17), (203, 111), (109, 104), (15, 60), (0, 197), (201, 187), (113, 74), (141, 56), (32, 149), (198, 32), (145, 26), (204, 112), (35, 154), (91, 55), (115, 34), (134, 133), (122, 42), (209, 47), (113, 110), (118, 188), (46, 169), (174, 89), (166, 85), (71, 113), (119, 153), (203, 232), (35, 10), (209, 83), (155, 112), (26, 190), (1, 17), (133, 173), (179, 140), (13, 28), (198, 153), (166, 121), (119, 9), (16, 33), (34, 87), (133, 209), (154, 3), (166, 206), (141, 33), (198, 9), (130, 140), (204, 89), (68, 79), (209, 204), (201, 200), (8, 34), (113, 87), (173, 101), (179, 32), (174, 66), (198, 45), (133, 65), (119, 130), (145, 39), (9, 115), (155, 89), (201, 56), (140, 189), (165, 133), (166, 98), (13, 5), (198, 130), (58, 156), (115, 132), (81, 139), (34, 64), (153, 15), (179, 153), (140, 45), (193, 200), (91, 189), (137, 156), (156, 169), (203, 101), (204, 66), (15, 50), (141, 46), (113, 64), (133, 42), (159, 180), (179, 9), (145, 16), (89, 115), (91, 45), (35, 144), (128, 192), (122, 32), (0, 43), (155, 66), (201, 33), (193, 92), (166, 75), (165, 110), (213, 7), (9, 128), (26, 180), (181, 203), (179, 130), (213, 43), (118, 34), (159, 72), (64, 63), (45, 50), (109, 71), (122, 153), (155, 187), (174, 200), (193, 213), (18, 32), (32, 116), (91, 202), (35, 121), (15, 63), (201, 190), (1, 128), (122, 9), (113, 77), (165, 87), (109, 192), (34, 198), (122, 45), (209, 50), (140, 179), (133, 140), (232, 33), (204, 200), (115, 122), (35, 13), (22, 43), (122, 130), (113, 198), (66, 86), (193, 190), (91, 179), (35, 98), (15, 40), (155, 200), (174, 213), (66, 122), (166, 209), (133, 32), (165, 64), (193, 46), (170, 179), (35, 134), (117, 173), (91, 35), (0, 33), (66, 207), (119, 133), (86, 185), (12, 7), (166, 65), (32, 214), (159, 26), (9, 118), (35, 219), (173, 189), (152, 166), (198, 133), (204, 213), (91, 156), (22, 56), (128, 74), (15, 17), (174, 190), (141, 13), (32, 106), (133, 9), (35, 111), (91, 12), (1, 118), (128, 159), (8, 14), (0, 10), (174, 46), (119, 110), (165, 77), (166, 42), (91, 48), (9, 95), (203, 189), (140, 169), (113, 152), (73, 79), (133, 130), (213, 10), (198, 110), (159, 39), (145, 104), (204, 190), (22, 33), (14, 29), (73, 115), (155, 154), (179, 133), (165, 198), (140, 25), (193, 180), (145, 140), (32, 83), (91, 169), (204, 46), (115, 197), (155, 190), (1, 95), (26, 39), (154, 45), (119, 87), (91, 25), (9, 72), (109, 159), (54, 223), (128, 172), (14, 150), (209, 17), (66, 197), (155, 46), (201, 13), (206, 91), (111, 119), (32, 204), (198, 87), (159, 16), (203, 202), (115, 89), (22, 10), (173, 179), (179, 110), (174, 144), (22, 46), (35, 65), (122, 133), (47, 219), (109, 51), (195, 203), (1, 72), (174, 180), (15, 7), (26, 16), (141, 3), (119, 64), (130, 110), (35, 101), (8, 4), (74, 178), (173, 71), (100, 87), (6, 43), (166, 32), (203, 179), (9, 85), (109, 172), (204, 144), (115, 66), (129, 150), (140, 159), (132, 155), (172, 191), (179, 87), (193, 134), (16, 209), (204, 180), (2, 45), (122, 110), (209, 115), (155, 144), (173, 192), (165, 188), (166, 153), (13, 60), (32, 73), (232, 98), (9, 206), (203, 71), (115, 187), (35, 78), (1, 85), (201, 147), (154, 35), (159, 150), (119, 77), (193, 26), (166, 9), (91, 15), (109, 149), (115, 43), (74, 191), (66, 187), (201, 3), (140, 136), (6, 56), (179, 64), (198, 77), (58, 103), (203, 192), (145, 71), (202, 196), (122, 87), (209, 92), (0, 98), (173, 169), (174, 134), (66, 43), (119, 198), (166, 130), (32, 50), (232, 75), (91, 136), (35, 55), (209, 128), (153, 47), (154, 12), (173, 25), (232, 111), (145, 192), (115, 200), (9, 39), (29, 17), (0, 219), (34, 132), (19, 232), (154, 48), (174, 26), (6, 33), (203, 169), (204, 134), (113, 132), (0, 75), (213, 219), (133, 110), (174, 111), (179, 77), (198, 90), (32, 207), (56, 235), (203, 25), (22, 13), (202, 209), (14, 9), (155, 134), (153, 24), (13, 50), (32, 63), (159, 104), (204, 26), (35, 68), (195, 206), (81, 184), (153, 60), (179, 198), (154, 25), (140, 90), (6, 10), (193, 16), (165, 34), (204, 111), (109, 139), (0, 232), (220, 235), (26, 104), (6, 46), (133, 87), (118, 187), (232, 209), (193, 101), (145, 61), (10, 16), (91, 90), (122, 77), (155, 111), (173, 159), (119, 188), (32, 40), (9, 173), (115, 154), (75, 118), (35, 45), (34, 86), (153, 37), (13, 63), (198, 188), (9, 29), (109, 116), (122, 198), (209, 203), (0, 209), (155, 232), (113, 86), (133, 64), (203, 159), (35, 166), (115, 46), (134, 145), (34, 207), (113, 122), (173, 136), (118, 200), (174, 101), (165, 132), (145, 74), (32, 17), (232, 42), (9, 150), (35, 22), (122, 90), (209, 95), (166, 133), (13, 40), (153, 14), (232, 78), (35, 58), (9, 6), (1, 65), (179, 188), (154, 15), (141, 45), (165, 24), (203, 136), (204, 101), (160, 174), (8, 46), (133, 77), (32, 174), (198, 57), (145, 51), (209, 72), (0, 78), (155, 101), (140, 201), (166, 110), (13, 17), (213, 42), (232, 55), (159, 71), (115, 144), (133, 198), (119, 34), (145, 172), (91, 201), (62, 174), (109, 106), (122, 188), (201, 189), (26, 71), (6, 13), (19, 32), (159, 192), (198, 34), (128, 204), (33, 232), (34, 197), (0, 55), (201, 45), (118, 190), (174, 91), (193, 104), (165, 122), (166, 87), (232, 32), (9, 140), (115, 121), (202, 189), (35, 12), (1, 19), (113, 197), (140, 214), (26, 192), (153, 4), (213, 55), (145, 149), (91, 178), (109, 83), (74, 125), (34, 89), (66, 121), (140, 70), (141, 35), (86, 99), (32, 128), (204, 91), (35, 133), (209, 206), (1, 140), (201, 202), (113, 89), (0, 32), (173, 103), (232, 189), (119, 132), (179, 34), (166, 64), (190, 192), (109, 204), (122, 57), (0, 68), (26, 169), (174, 104), (13, 7), (152, 165), (198, 132), (159, 61), (232, 45), (213, 32), (130, 34), (115, 134), (35, 25), (22, 55), (1, 32), (134, 4), (34, 66), (133, 188), (174, 189), (66, 98), (140, 47), (153, 17), (119, 24), (91, 191), (203, 103), (35, 110), (0, 189), (201, 179), (26, 61), (113, 66), (141, 48), (173, 80), (32, 141), (79, 73), (198, 24), (91, 47), (1, 153), (122, 34), (209, 39), (0, 45), (34, 187), (201, 35), (173, 116), (165, 112), (166, 77), (31, 32), (213, 9), (9, 130), (204, 189), (115, 111), (140, 204), (113, 187), (1, 9), (34, 43), (173, 201), (179, 132), (213, 45), (193, 179), (159, 74), (144, 174), (2, 90), (203, 80), (15, 29), (155, 189), (201, 156), (166, 198), (141, 25), (113, 43), (32, 118), (203, 116), (115, 232), (91, 24), (201, 192), (8, 26), (209, 16), (0, 22), (155, 45), (119, 122), (193, 71), (165, 89), (51, 216), (91, 60), (203, 201), (66, 232), (201, 48), (26, 159), (46, 174), (213, 22), (198, 122), (159, 51), (145, 116), (22, 45), (109, 50), (122, 132), (113, 200), (173, 214), (174, 179), (193, 192), (32, 95), (91, 181), (115, 209), (35, 100), (209, 173), (15, 42), (201, 169), (26, 51), (133, 34), (159, 172), (173, 70), (165, 66), (91, 37), (122, 24), (0, 35), (66, 209), (26, 136), (174, 71), (201, 25), (203, 214), (204, 179), (109, 207), (115, 101), (2, 44), (26, 172), (133, 155), (179, 122), (66, 65), (165, 187), (193, 169), (203, 70), (109, 63), (209, 150), (15, 19), (155, 179), (174, 192), (140, 50), (141, 15), (166, 188), (173, 47), (159, 149), (193, 25), (204, 71), (91, 14), (35, 113), (0, 12), (173, 83), (119, 112), (6, 55), (193, 61), (117, 188), (26, 149), (113, 154), (133, 132), (118, 232), (213, 12), (198, 112), (145, 106), (204, 192), (203, 47), (22, 35), (109, 40), (74, 82), (173, 204), (174, 169), (165, 200), (166, 165), (32, 85), (192, 74), (203, 83), (35, 90), (110, 4), (15, 32), (201, 159), (113, 46), (154, 47), (174, 25), (119, 89), (9, 74), (129, 139), (201, 15), (32, 206), (166, 57), (198, 89), (203, 204), (145, 83), (204, 169), (22, 12), (109, 17), (14, 8), (209, 104), (173, 181), (179, 112), (193, 159), (140, 4), (232, 87), (204, 25), (209, 140), (15, 9), (155, 169), (201, 136), (1, 74), (141, 5), (119, 66), (91, 4), (35, 103), (9, 51), (1, 110), (74, 180), (34, 144), (154, 60), (180, 198), (0, 2), (155, 25), (6, 45), (166, 34), (198, 66), (109, 174), (113, 144), (133, 122), (179, 89), (119, 187), (165, 154), (193, 136), (32, 219), (91, 125), (9, 172), (3, 12), (29, 150), (22, 25), (122, 112), (14, 21), (121, 4), (174, 159), (140, 17), (165, 190), (198, 187), (159, 116), (32, 75), (115, 189), (35, 80), (34, 121), (154, 37), (173, 50), (159, 152), (6, 22), (165, 46), (9, 64), (115, 45), (40, 51), (66, 189), (201, 5), (113, 121), (26, 116), (179, 66), (204, 159), (122, 89), (173, 171), (174, 136), (66, 45), (201, 90), (166, 132), (13, 39), (193, 149), (119, 200), (91, 138), (203, 50), (35, 57), (155, 159), (34, 98), (179, 187), (154, 14), (198, 200), (42, 218), (109, 128), (34, 134), (113, 98), (6, 35), (166, 24), (232, 198), (32, 173), (204, 136), (169, 178), (161, 174), (122, 66), (113, 134), (133, 112), (165, 144), (145, 86), (35, 34), (0, 113), (155, 136), (26, 214), (174, 149), (153, 26), (32, 65), (159, 106), (115, 179), (35, 70), (122, 187), (1, 77), (0, 198), (179, 200), (140, 92), (145, 207), (32, 150), (6, 12), (35, 155), (66, 179), (26, 106), (113, 111), (132, 124), (118, 189), (119, 154), (193, 103), (144, 98), (145, 63), (75, 84), (34, 232), (140, 213), (119, 190), (166, 122), (13, 29), (213, 54), (32, 42), (159, 83), (118, 45), (72, 78), (35, 47), (62, 150), (113, 232), (153, 39), (154, 4), (173, 17), (198, 190), (119, 46), (46, 62), (109, 118), (29, 9), (122, 200), (68, 80), (26, 83), (6, 25), (133, 66), (198, 46), (145, 40), (190, 191), (42, 64), (34, 209), (209, 61), (155, 90), (174, 103), (193, 116), (165, 134), (13, 6), (32, 19), (9, 152), (203, 17), (115, 133), (35, 24), (202, 201), (26, 204), (113, 209), (34, 65), (133, 187), (13, 42), (179, 154), (153, 16), (91, 190), (115, 169), (156, 170), (9, 8), (109, 95), (34, 101), (179, 190), (154, 17), (141, 47), (145, 197), (133, 43), (32, 140), (204, 103), (35, 145), (115, 25), (113, 101), (0, 44), (173, 115), (232, 201), (179, 46), (165, 111), (174, 80), (118, 179), (119, 144), (209, 74), (155, 103), (174, 116), (66, 25), (166, 112), (13, 19), (213, 44), (198, 144), (159, 73), (35, 37), (153, 29), (174, 201), (66, 110), (198, 180), (193, 214), (133, 200), (145, 174), (165, 232), (91, 203), (2, 125), (203, 115), (204, 80), (122, 190), (15, 64), (0, 201), (201, 191), (140, 95), (141, 60), (26, 73), (173, 92), (32, 153), (119, 121), (193, 70), (204, 116), (42, 54), (9, 106), (128, 206), (122, 46), (209, 51), (155, 80), (173, 128), (140, 180), (201, 47), (193, 106), (166, 89), (213, 21), (32, 9), (159, 50), (204, 201), (35, 14), (153, 6), (179, 144), (173, 213), (159, 86), (91, 180), (203, 92), (109, 85), (209, 172), (155, 201), (174, 214), (26, 50), (141, 37), (32, 130), (232, 155), (203, 128), (16, 122), (201, 204), (0, 34), (155, 57), (118, 169), (46, 150), (193, 83), (166, 66), (165, 101), (119, 134), (171, 181), (174, 70), (159, 207), (203, 213), (145, 43), (109, 206), (209, 64), (201, 60), (34, 32), (179, 121), (213, 34), (198, 134), (118, 25), (159, 63), (13, 9), (204, 214), (145, 128), (115, 136), (122, 144), (209, 149), (0, 155), (133, 190), (193, 204), (166, 187), (141, 14), (232, 132), (91, 193), (130, 121), (204, 70), (35, 112), (122, 180), (109, 98), (15, 54), (155, 214), (201, 181), (8, 15), (26, 63), (141, 50), (133, 46), (174, 47), (119, 111), (198, 26), (2, 200), (14, 174), (34, 189), (0, 47), (155, 70), (201, 37), (174, 83), (198, 111), (159, 40), (35, 4), (22, 34), (113, 189), (34, 45), (74, 81), (53, 58), (119, 232), (140, 26), (179, 134), (91, 170), (204, 47), (109, 75), (223, 60), (15, 31), (74, 117), (174, 204), (26, 40), (166, 200), (113, 45), (198, 232), (78, 87), (204, 83), (35, 125), (91, 26), (0, 24), (155, 47), (201, 14), (173, 95), (159, 197), (193, 73), (111, 120), (2, 213), (128, 209), (115, 90), (201, 50), (133, 144), (179, 111), (213, 24), (145, 118), (91, 147), (22, 47), (122, 134), (15, 8), (66, 90), (26, 17), (141, 4), (140, 39), (91, 183), (232, 122), (137, 150), (203, 95), (15, 44), (155, 204), (201, 171), (1, 109), (179, 232), (0, 1), (173, 72), (118, 136), (159, 174), (193, 50), (119, 101), (46, 117), (91, 39), (9, 86), (136, 190), (109, 173), (34, 179), (122, 26), (133, 121), (198, 101), (115, 103), (22, 24), (122, 111), (113, 179), (26, 174), (34, 35), (0, 122), (140, 16), (166, 154), (165, 189), (32, 74), (9, 207), (203, 72), (35, 79), (209, 152), (15, 21), (1, 86), (166, 190), (141, 17), (32, 110), (165, 45), (91, 16), (35, 115), (9, 63), (109, 150), (1, 122), (122, 232), (40, 50), (66, 188), (201, 4), (174, 50), (0, 14), (166, 46), (2, 203), (115, 80), (133, 134), (179, 101), (159, 43), (91, 137), (22, 37), (109, 42), (173, 206), (201, 125), (206, 203), (32, 87), (159, 128), (118, 90), (115, 201), (35, 92), (204, 50), (34, 133), (180, 187), (99, 113), (193, 40), (6, 34), (91, 29), (177, 32), (115, 57), (66, 201), (201, 17), (26, 128), (140, 150), (113, 133), (155, 50), (203, 206), (145, 85), (22, 14), (122, 101), (209, 106), (34, 25), (165, 179), (166, 144), (13, 51), (145, 121), (32, 64), (9, 197), (201, 138), (34, 110), (113, 25), (154, 26), (133, 232), (173, 39), (159, 141), (193, 17), (145, 206), (115, 214), (91, 6), (109, 140), (6, 47), (115, 70), (26, 141), (179, 91), (66, 34), (119, 189), (144, 133), (145, 98), (9, 174), (3, 14), (203, 39), (35, 46), (109, 32), (66, 70), (13, 64), (198, 189), (32, 77), (173, 16), (119, 45), (159, 118), (35, 82), (29, 8), (1, 89), (154, 39), (140, 104), (174, 17), (6, 24), (9, 66), (42, 63), (115, 47), (80, 89), (26, 118), (133, 101), (118, 201), (232, 223), (193, 115), (32, 198), (144, 110), (145, 75), (91, 104), (203, 16), (22, 4), (202, 200), (109, 9), (66, 47), (165, 169), (166, 134), (159, 95), (9, 187), (16, 46), (204, 17), (1, 66), (153, 51), (154, 16), (179, 189), (165, 25), (42, 220), (9, 43), (136, 147), (109, 130), (115, 24), (0, 223), (120, 139), (155, 17), (26, 95), (6, 37), (179, 45), (203, 173), (209, 73), (113, 136), (173, 150), (174, 115), (66, 24), (193, 128), (166, 111), (118, 214), (16, 203), (112, 140), (91, 117), (119, 179), (34, 77), (13, 54), (198, 179), (145, 173), (122, 189), (154, 29), (26, 72), (166, 232), (145, 209), (6, 14), (32, 152), (203, 150), (204, 115), (0, 56), (174, 92), (232, 213), (198, 71), (145, 65), (9, 141), (209, 86), (155, 115), (174, 128), (165, 159), (153, 5), (213, 56), (159, 85), (118, 47), (34, 90), (154, 6), (198, 192), (140, 71), (97, 109), (204, 92), (209, 207), (0, 213), (21, 7), (120, 129), (201, 203), (26, 85), (113, 90), (173, 104), (232, 190), (159, 206), (145, 42), (171, 180), (204, 128), (142, 153), (209, 63), (155, 92), (140, 192), (173, 140), (119, 169), (165, 136), (166, 101), (13, 8), (112, 130), (213, 33), (193, 118), (232, 46), (9, 154), (118, 24), (35, 26), (26, 206), (133, 189), (13, 44), (198, 169), (159, 98), (119, 25), (91, 192), (203, 104), (9, 10), (122, 179), (0, 190), (155, 213), (201, 180), (5, 39), (6, 4), (133, 45), (198, 25), (203, 140), (1, 154), (34, 188), (113, 103), (0, 46), (209, 40), (193, 95), (185, 91), (115, 112), (35, 3), (122, 71), (113, 188), (13, 21), (159, 75), (109, 74), (1, 46), (34, 80), (179, 169), (66, 112), (141, 26), (109, 110), (122, 192), (35, 124), (209, 197), (201, 193), (26, 75), (113, 80), (179, 25), (165, 90), (193, 72), (145, 32), (35, 160), (190, 183), (42, 56), (34, 201), (174, 95), (119, 159), (56, 219), (4, 29), (9, 144), (204, 203), (35, 16), (113, 201), (34, 57), (133, 179), (153, 8), (198, 159), (2, 104), (103, 156), (122, 169), (209, 174), (15, 43), (201, 170), (140, 74), (113, 57), (141, 39), (32, 132), (159, 173), (138, 150), (145, 9), (204, 95), (149, 159), (189, 195), (122, 25), (201, 26), (174, 72), (119, 136), (193, 85), (165, 103), (159, 209), (91, 74), (9, 121), (155, 95), (26, 173), (198, 136), (159, 65), (145, 130), (91, 159), (109, 64), (155, 180), (34, 70), (140, 51), (193, 206), (166, 189), (113, 34), (141, 16), (91, 195), (204, 72), (35, 114), (209, 187), (15, 56), (201, 183), (1, 121), (8, 17), (26, 65), (113, 70), (0, 13), (165, 80), (166, 45), (91, 51), (9, 98), (209, 43), (155, 72), (201, 39), (26, 150), (140, 172), (213, 13), (159, 42), (232, 26), (35, 6), (34, 47), (133, 169), (179, 136), (165, 201), (32, 86), (91, 172), (35, 91), (122, 159), (109, 77), (15, 33), (114, 155), (1, 98), (174, 206), (7, 29), (26, 42), (141, 29), (113, 47), (99, 112), (32, 122), (133, 25), (173, 61), (193, 39), (165, 57), (144, 34), (119, 90), (9, 75), (136, 179), (1, 134), (0, 26), (66, 200), (201, 16), (140, 149), (9, 111), (109, 198), (115, 92), (34, 24), (213, 26), (118, 17), (204, 206), (91, 149), (29, 174), (203, 61), (122, 136), (209, 141), (15, 10), (114, 132), (201, 137), (66, 92), (165, 214), (166, 179), (113, 24), (141, 6), (159, 140), (9, 232), (115, 213), (35, 104), (91, 5), (136, 156), (1, 111), (0, 3), (155, 26), (173, 74), (139, 161), (119, 103), (174, 39), (19, 16), (165, 70), (128, 188), (66, 213), (201, 29), (26, 140), (213, 232), (179, 90), (213, 3), (198, 103), (44, 45), (159, 32), (3, 13), (1, 232), (22, 26), (209, 118), (14, 22), (193, 173), (145, 133), (9, 209), (203, 74), (115, 190), (35, 81), (204, 39), (209, 154), (7, 19), (26, 32), (166, 192), (141, 19), (34, 122), (173, 51), (174, 16), (119, 80), (159, 153), (70, 75), (165, 47), (9, 65), (120, 161), (0, 16), (155, 39), (66, 190), (201, 6), (32, 197), (198, 80), (159, 9), (109, 188), (142, 185), (22, 3), (26, 153), (133, 136), (179, 103), (119, 201), (198, 116), (173, 172), (144, 145), (71, 161), (145, 110), (91, 139), (193, 150), (203, 51), (22, 39), (204, 16), (195, 196), (174, 173), (106, 118), (165, 204), (26, 9), (153, 50), (166, 169), (198, 201), (118, 92), (32, 89), (119, 57), (159, 130), (9, 42), (154, 51), (155, 16), (140, 116), (173, 64), (193, 42), (166, 25), (203, 172), (140, 152), (26, 130), (173, 149), (118, 213), (232, 235), (179, 80), (145, 87), (204, 173), (91, 116), (22, 16), (122, 103), (14, 12), (201, 104), (174, 150), (119, 214), (32, 66), (203, 64), (115, 180), (35, 71), (15, 13), (195, 209), (28, 32), (162, 32), (34, 112), (153, 63), (179, 201), (198, 214), (119, 70), (91, 8), (203, 149), (136, 159), (0, 235), (66, 180), (113, 112), (32, 187), (133, 90), (206, 74), (198, 70), (179, 57), (16, 179), (204, 150), (145, 64), (115, 72), (122, 80), (209, 85), (193, 140), (32, 43), (232, 68), (35, 48), (122, 116), (209, 121), (109, 34), (155, 150), (15, 219), (153, 40), (166, 159), (154, 5), (119, 47), (50, 213), (9, 32), (122, 201), (179, 214), (140, 106), (165, 50), (6, 26), (198, 47), (142, 152), (101, 114), (32, 200), (179, 70), (198, 83), (16, 192), (145, 77), (185, 113), (9, 153), (22, 6), (209, 98), (174, 140), (119, 204), (166, 136), (13, 43), (9, 189), (35, 61), (198, 204), (159, 133), (140, 83), (145, 198), (193, 9), (6, 3), (2, 149), (117, 136), (9, 45), (204, 104), (122, 214), (115, 26), (21, 19), (213, 189), (6, 39), (118, 180), (179, 47), (204, 140), (110, 96), (1, 189), (122, 70), (209, 75), (155, 104), (173, 152), (66, 26), (193, 130), (155, 140), (1, 45), (133, 201), (13, 56), (159, 110), (46, 53), (91, 204), (17, 26), (9, 22), (34, 115), (26, 74), (6, 16), (32, 154), (179, 24), (232, 179), (203, 152), (209, 232), (115, 39), (34, 200), (113, 115), (26, 110), (122, 47), (166, 90), (56, 218), (35, 15), (122, 83), (134, 174), (66, 39), (153, 7), (13, 33), (32, 46), (159, 87), (232, 71), (35, 51), (109, 86), (0, 179), (34, 92), (133, 214), (154, 8), (74, 128), (119, 50), (145, 188), (165, 17), (109, 122), (122, 204), (115, 16), (176, 32), (26, 87), (113, 92), (173, 106), (133, 70), (198, 50), (16, 159), (34, 213), (209, 65), (0, 71), (66, 16), (166, 103), (13, 10), (213, 35), (159, 64), (118, 26), (183, 192), (113, 213), (2, 116), (203, 106), (15, 55), (140, 86), (141, 51), (26, 64), (133, 47), (32, 144), (91, 50), (136, 201), (34, 190), (209, 42), (0, 48), (155, 71), (165, 115), (166, 80), (9, 133), (35, 5), (201, 74), (140, 207), (113, 190), (34, 46), (213, 48), (159, 77), (118, 39), (91, 171), (115, 150), (110, 184), (155, 192), (140, 63), (166, 201), (133, 24), (32, 121), (137, 174), (1, 133), (201, 195), (8, 29), (26, 77), (141, 64), (0, 25), (174, 61), (159, 198), (165, 92), (193, 74), (145, 34), (91, 63), (9, 110), (109, 197), (122, 50), (201, 51), (213, 25), (118, 16), (22, 48), (8, 150), (26, 198), (1, 25), (153, 10), (165, 213), (140, 40), (119, 17), (145, 155), (32, 98), (91, 184), (204, 61), (15, 45), (201, 172), (166, 214), (32, 134), (232, 159), (173, 73), (193, 51), (184, 119), (144, 46), (198, 17), (78, 101), (91, 40), (35, 139), (9, 87), (34, 180), (209, 32), (155, 61), (174, 74), (193, 87), (166, 70), (4, 8), (130, 4), (115, 104), (140, 197), (1, 2), (141, 162), (113, 180), (193, 172), (145, 132), (110, 174), (2, 83), (203, 73), (209, 153), (0, 159), (15, 22), (201, 149), (66, 104), (39, 150), (32, 111), (232, 136), (70, 74), (204, 74), (35, 116), (91, 17), (48, 55), (113, 72), (0, 15), (209, 9), (173, 86), (159, 188), (174, 51), (179, 17), (166, 47), (119, 115), (145, 24), (193, 64), (109, 187), (209, 45), (155, 74), (140, 174), (26, 152), (13, 219), (166, 83), (32, 232), (213, 15), (198, 115), (22, 38), (109, 43), (209, 130), (14, 34), (0, 136), (173, 207), (174, 172), (232, 113), (203, 86), (204, 51), (96, 109), (15, 35), (166, 204), (154, 50), (173, 63), (119, 92), (9, 77), (74, 206), (122, 17), (155, 51), (174, 64), (165, 95), (32, 209), (198, 92), (144, 121), (203, 207), (204, 172), (109, 200), (121, 174), (22, 15), (34, 26), (179, 115), (119, 213), (198, 128), (165, 180), (145, 122), (9, 198), (203, 63), (22, 51), (15, 12), (155, 172), (201, 139)]}]}
{'wma_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 2540, 'instruction': 'andb\t$1, %al'}, {'instIndex': 2541, 'instruction': 'movzbl\t%al, %eax'}, {'instIndex': 2542, 'instruction': 'movl\t%eax, 0xa04(%rsp)                # 4-byte Spill'}, {'instIndex': 2543, 'instruction': 'movl\t0xa04(%rsp), %ecx                # 4-byte Reload'}, {'instIndex': 2544, 'instruction': 'movl\t%ecx, 0x158(%rsp)                 # 4-byte Spill'}, {'instIndex': 2545, 'instruction': 'movl\t$0xffffffff, %eax               # imm = 0xFFFFFFFF'}, {'instIndex': 2546, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 2547, 'instruction': 'movl\t%eax, 0x15c(%rsp)                 # 4-byte Spill'}, {'instIndex': 2548, 'instruction': 'jl\t.LBB3_183'}, {'instIndex': 2549, 'instruction': 'movl\t0x158(%rsp), %eax                 # 4-byte Reload'}, {'instIndex': 2550, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 2551, 'instruction': 'je\t.LBB3_1'}, {'instIndex': 2552, 'instruction': 'movq\t0xa30(%rsp), %rax                # 8-byte Reload'}, {'instIndex': 2553, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 2554, 'instruction': 'addq\t$0x4a0, %rcx                     # imm = 0x4A0'}, {'instIndex': 2556, 'instruction': 'movl\t0x4a0(%rax), %ecx'}, {'instIndex': 2557, 'instruction': 'movl\t%ecx, 0x13c(%rsp)                 # 4-byte Spill'}, {'instIndex': 2558, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 2559, 'instruction': 'addq\t$0x4c, %rcx'}, {'instIndex': 2573, 'instruction': 'movl\t0x14c(%rsp), %eax                 # 4-byte Reload'}, {'instIndex': 2574, 'instruction': 'movl\t0x13c(%rsp), %ecx                 # 4-byte Reload'}, {'instIndex': 2575, 'instruction': 'cmpl\t$0, %ecx'}, {'instIndex': 2576, 'instruction': 'setg\t%cl'}, {'instIndex': 2577, 'instruction': 'movb\t%cl, 0x11f(%rsp)                  # 1-byte Spill'}, {'instIndex': 2578, 'instruction': 'cltq'}, {'instIndex': 2579, 'instruction': 'movq\t%rax, 0x120(%rsp)                 # 8-byte Spill'}, {'instIndex': 2583, 'instruction': 'movq\t0xa30(%rsp), %rcx                # 8-byte Reload'}, {'instIndex': 2584, 'instruction': 'movq\t0x128(%rsp), %rdx                 # 8-byte Reload'}, {'instIndex': 2594, 'instruction': 'movq\t0xa28(%rsp), %rcx                # 8-byte Reload'}, {'instIndex': 2595, 'instruction': 'movq\t0x108(%rsp), %rax                 # 8-byte Reload'}, {'instIndex': 2596, 'instruction': 'shlq\t$1, %rax'}, {'instIndex': 2597, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 2598, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 2607, 'instruction': 'movq\t%r8, %rdx'}, {'instIndex': 2608, 'instruction': 'addq\t$4, %rdx'}, {'instIndex': 2609, 'instruction': 'movq\t%rdx, 0xc8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2610, 'instruction': 'movss\t(%r8), %xmm0                    # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 2612, 'instruction': 'movl\t$0xffff8000, %r9d               # imm = 0xFFFF0x1f40'}, {'instIndex': 2614, 'instruction': 'cmovgl\t%r8d, %r9d'}, {'instIndex': 2615, 'instruction': 'movl\t%r9d, 0xd0(%rsp)                 # 4-byte Spill'}, {'instIndex': 2618, 'instruction': 'cmovll\t%r9d, %r8d'}, {'instIndex': 2623, 'instruction': 'addq\t%rdi, %rcx'}, {'instIndex': 2624, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2625, 'instruction': 'addl\t$1, %eax'}, {'instIndex': 2626, 'instruction': 'movl\t%eax, 0xec(%rsp)                 # 4-byte Spill'}, {'instIndex': 2627, 'instruction': 'cmpl\t%esi, %eax'}, {'instIndex': 2628, 'instruction': 'movq\t%rdx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2629, 'instruction': 'movq\t%rcx, 0xf8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2630, 'instruction': 'movl\t%eax, 0x104(%rsp)                 # 4-byte Spill'}, {'instIndex': 2631, 'instruction': 'jne\t.LBB3_175'}, {'instIndex': 2634, 'instruction': 'movq\t0x130(%rsp), %rcx                 # 8-byte Reload'}, {'instIndex': 2635, 'instruction': 'movq\t0x110(%rsp), %rdi                 # 8-byte Reload'}, {'instIndex': 2636, 'instruction': 'movslq\t(%rcx), %rdx'}, {'instIndex': 2637, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 2638, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 2640, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 2641, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 2642, 'instruction': 'addq\t%rax, %rsi'}, {'instIndex': 2655, 'instruction': 'leaq\t0xc60(%rsp), %rax'}, {'instIndex': 2656, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 2657, 'instruction': 'movq\t%rax, 0xc0(%rsp)                 # 8-byte Spill'}, {'instIndex': 2658, 'instruction': 'movq\t0xc0(%rsp), %rcx                 # 8-byte Reload'}, {'instIndex': 2659, 'instruction': 'movq\t0xa30(%rsp), %rax                # 8-byte Reload'}, {'instIndex': 2660, 'instruction': 'addq\t$0x10750, %rax                    # imm = 0x0x29fe'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: wmadec.c
Patched function: 1---static int wma_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O2/wmadec.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O2/wmadec.s---wma_decode_frame---after
function id: 3
function flag: True
There are 3597 instructions for function: wma_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '791', 'end': 808}, 'before': {'start': '791', 'end': 808}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 3237, 'instruction': 'movl\t%edi, 0x2c4(%rsp)                 # 4-byte Spill'}, {'instIndex': 3238, 'instruction': 'movl\t(%rsi), %edi'}, {'instIndex': 3239, 'instruction': 'addl\t$1, %edi'}, {'instIndex': 3240, 'instruction': 'movl\t%edi, (%rsi)'}, {'instIndex': 3241, 'instruction': 'movl\t(%rax), %eax'}, {'instIndex': 3243, 'instruction': 'movl\t%eax, (%rdx)'}, {'instIndex': 3244, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 3245, 'instruction': 'movl\t%ecx, 0x2c8(%rsp)                 # 4-byte Spill'}, {'instIndex': 3246, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 3270, 'instruction': 'sete\t%dl'}, {'instIndex': 3271, 'instruction': 'movb\t%dl, 0x2a7(%rsp)                  # 1-byte Spill'}, {'instIndex': 3272, 'instruction': 'andl\t$-2, %ecx'}, {'instIndex': 3273, 'instruction': 'movl\t%ecx, 0x2a8(%rsp)                 # 4-byte Spill'}, {'instIndex': 3274, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 3275, 'instruction': 'sete\t%al'}, {'instIndex': 3276, 'instruction': 'movb\t%al, 0x2af(%rsp)                  # 1-byte Spill'}, {'instIndex': 3281, 'instruction': 'movq\t0x2b0(%rsp), %rdx                 # 8-byte Reload'}, {'instIndex': 3282, 'instruction': 'movq\t%rdx, 0x280(%rsp)                 # 8-byte Spill'}, {'instIndex': 3283, 'instruction': 'addq\t$0x10750, %rcx                    # imm = 0x0x29fe'}, {'instIndex': 3284, 'instruction': 'shlq\t$14, %rdx'}, {'instIndex': 3285, 'instruction': 'addq\t%rdx, %rcx'}, {'instIndex': 3286, 'instruction': 'movq\t%rcx, 0x288(%rsp)                 # 8-byte Spill'}, {'instIndex': 3288, 'instruction': 'jne\t.LBB3_195'}, {'instIndex': 3294, 'instruction': 'shlq\t$1, %rax'}, {'instIndex': 3295, 'instruction': 'addq\t%rax, %rcx'}, {'instIndex': 3304, 'instruction': 'movq\t0x268(%rsp), %r9                  # 8-byte Reload'}, {'instIndex': 3305, 'instruction': 'movl\t0x2a8(%rsp), %esi                 # 4-byte Reload'}, {'instIndex': 3306, 'instruction': 'movq\t0x298(%rsp), %rdi                 # 8-byte Reload'}, {'instIndex': 3307, 'instruction': 'movss\t(%r9), %xmm0                    # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 3308, 'instruction': 'cvtss2si\t%xmm0, %rcx'}, {'instIndex': 3309, 'instruction': 'movl\t$0xffff8000, %edx               # imm = 0xFFFF0x1f40'}, {'instIndex': 3310, 'instruction': 'cmpl\t$-0x8000, %ecx                   # imm = 0x0x1f40'}, {'instIndex': 3311, 'instruction': 'cmovgl\t%ecx, %edx'}, {'instIndex': 3312, 'instruction': 'movl\t%edx, 0x228(%rsp)                 # 4-byte Spill'}, {'instIndex': 3313, 'instruction': 'movl\t$0x7fff, %ecx                    # imm = 0x7FFF'}, {'instIndex': 3314, 'instruction': 'cmpl\t$0x7fff, %edx                    # imm = 0x7FFF'}, {'instIndex': 3315, 'instruction': 'cmovll\t%edx, %ecx'}, {'instIndex': 3324, 'instruction': 'movq\t%r9, %rdx'}, {'instIndex': 3325, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 3326, 'instruction': 'movq\t%rdx, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 3327, 'instruction': 'movss\t4(%r9), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 3329, 'instruction': 'movl\t$0xffff8000, %r10d              # imm = 0xFFFF0x1f40'}, {'instIndex': 3330, 'instruction': 'cmpl\t$-0x8000, %r9d                   # imm = 0x0x1f40'}, {'instIndex': 3331, 'instruction': 'cmovgl\t%r9d, %r10d'}, {'instIndex': 3332, 'instruction': 'movl\t%r10d, 0x248(%rsp)                # 4-byte Spill'}, {'instIndex': 3335, 'instruction': 'cmovll\t%r10d, %r9d'}, {'instIndex': 3341, 'instruction': 'movq\t%rcx, 0x258(%rsp)                 # 8-byte Spill'}, {'instIndex': 3342, 'instruction': 'addl\t$2, %eax'}, {'instIndex': 3345, 'instruction': 'movq\t%rdx, 0x268(%rsp)                 # 8-byte Spill'}, {'instIndex': 3346, 'instruction': 'movq\t%rcx, 0x270(%rsp)                 # 8-byte Spill'}, {'instIndex': 3353, 'instruction': 'movq\t%rcx, 0x220(%rsp)                 # 8-byte Spill'}, {'instIndex': 3358, 'instruction': 'movss\t(%rcx), %xmm0                   # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 3359, 'instruction': 'cvtss2si\t%xmm0, %rcx'}, {'instIndex': 3360, 'instruction': 'movl\t$0xffff8000, %edx               # imm = 0xFFFF0x1f40'}, {'instIndex': 3361, 'instruction': 'cmpl\t$-0x8000, %ecx                   # imm = 0x0x1f40'}, {'instIndex': 3362, 'instruction': 'cmovgl\t%ecx, %edx'}, {'instIndex': 3363, 'instruction': 'movl\t$0x7fff, %ecx                    # imm = 0x7FFF'}, {'instIndex': 3364, 'instruction': 'cmpl\t$0x7fff, %edx                    # imm = 0x7FFF'}, {'instIndex': 3365, 'instruction': 'cmovll\t%edx, %ecx'}, {'instIndex': 3366, 'instruction': 'movw\t%cx, (%rax)'}, {'instIndex': 3369, 'instruction': 'movq\t0x11d0(%rsp), %rcx                # 8-byte Reload'}, {'instIndex': 3370, 'instruction': 'movq\t0x288(%rsp), %rdi                 # 8-byte Reload'}, {'instIndex': 3371, 'instruction': 'movslq\t(%rcx), %rdx'}, {'instIndex': 3372, 'instruction': 'addq\t$0x10750, %rsi                    # imm = 0x0x29fe'}, {'instIndex': 3373, 'instruction': 'shlq\t$14, %rax'}, {'instIndex': 3375, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 3376, 'instruction': 'shlq\t$2, %rax'}, {'instIndex': 3382, 'instruction': 'addq\t$1, %rcx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O2/wmadec.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O2/wmadec.o---after
The extraction of function: wma_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 354 nodes and 650 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 3584 instructions in binary file.
[4217039, 4217078, 4217103, 4217191, 4217248, 4217253, 4217326, 4217592, 4217635, 4217691, 4217759, 4217808, 4217813]
The execution time of patched subCFG information extraction via angr: 0:00:08.859802
{'wma_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405967>, <DisassemblerInsn "mov" for 0x40596e>, <DisassemblerInsn "mov" for 0x405976>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "add" for 0x405986>, <DisassemblerInsn "shl" for 0x40598d>, <DisassemblerInsn "add" for 0x405991>, <DisassemblerInsn "mov" for 0x405994>, <DisassemblerInsn "test" for 0x40599c>, <DisassemblerInsn "jne" for 0x40599e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058f6>, <DisassemblerInsn "xor" for 0x4058fd>, <DisassemblerInsn "cmp" for 0x4058ff>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "jle" for 0x405909>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40587c>, <DisassemblerInsn "mov" for 0x405884>, <DisassemblerInsn "mov" for 0x40588c>, <DisassemblerInsn "mov" for 0x405894>, <DisassemblerInsn "mov" for 0x40589c>, <DisassemblerInsn "mov" for 0x4058a3>, <DisassemblerInsn "mov" for 0x4058aa>, <DisassemblerInsn "add" for 0x4058ac>, <DisassemblerInsn "mov" for 0x4058af>, <DisassemblerInsn "mov" for 0x4058b1>, <DisassemblerInsn "add" for 0x4058b3>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058b7>, <DisassemblerInsn "mov" for 0x4058b9>, <DisassemblerInsn "cmp" for 0x4058c0>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "jl" for 0x4058c9>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405c40>, <DisassemblerInsn "cmp" for 0x405c47>, <DisassemblerInsn "jle" for 0x405c4a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x406096>, <DisassemblerInsn "add" for 0x40609d>, <DisassemblerInsn "pop" for 0x4060a4>, <DisassemblerInsn "pop" for 0x4060a5>, <DisassemblerInsn "pop" for 0x4060a7>, <DisassemblerInsn "ret" for 0x4060a8>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058cf>, <DisassemblerInsn "mov" for 0x4058d7>, <DisassemblerInsn "mov" for 0x4058de>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "cmp" for 0x4058ed>, <DisassemblerInsn "jne" for 0x4058f0>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4059a0>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b9f>, <DisassemblerInsn "mov" for 0x405ba7>, <DisassemblerInsn "add" for 0x405baf>, <DisassemblerInsn "movsxd" for 0x405bb3>, <DisassemblerInsn "xor" for 0x405bb6>, <DisassemblerInsn "cmp" for 0x405bb8>, <DisassemblerInsn "mov" for 0x405bbb>, <DisassemblerInsn "mov" for 0x405bc3>, <DisassemblerInsn "jl" for 0x405bca>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40590f>, <DisassemblerInsn "mov" for 0x405916>, <DisassemblerInsn "cmp" for 0x40591d>, <DisassemblerInsn "setg" for 0x405920>, <DisassemblerInsn "mov" for 0x405923>, <DisassemblerInsn "mov" for 0x40592a>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405934>, <DisassemblerInsn "and" for 0x405936>, <DisassemblerInsn "cmp" for 0x405939>, <DisassemblerInsn "sete" for 0x40593c>, <DisassemblerInsn "mov" for 0x40593f>, <DisassemblerInsn "and" for 0x405946>, <DisassemblerInsn "mov" for 0x405949>, <DisassemblerInsn "cmp" for 0x405950>, <DisassemblerInsn "sete" for 0x405953>, <DisassemblerInsn "mov" for 0x405956>, <DisassemblerInsn "xor" for 0x40595d>, <DisassemblerInsn "mov" for 0x40595f>, <DisassemblerInsn "mov" for 0x405967>, <DisassemblerInsn "mov" for 0x40596e>, <DisassemblerInsn "mov" for 0x405976>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "add" for 0x405986>, <DisassemblerInsn "shl" for 0x40598d>, <DisassemblerInsn "add" for 0x405991>, <DisassemblerInsn "mov" for 0x405994>, <DisassemblerInsn "test" for 0x40599c>, <DisassemblerInsn "jne" for 0x40599e>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405bd5>, <DisassemblerInsn "mov" for 0x405bdc>, <DisassemblerInsn "mov" for 0x405be4>, <DisassemblerInsn "mov" for 0x405bec>, <DisassemblerInsn "mov" for 0x405bf3>, <DisassemblerInsn "lea" for 0x405bfb>, <DisassemblerInsn "mov" for 0x405c03>, <DisassemblerInsn "add" for 0x405c06>, <DisassemblerInsn "lea" for 0x405c0d>, <DisassemblerInsn "mov" for 0x405c15>, <DisassemblerInsn "add" for 0x405c1d>, <DisassemblerInsn "add" for 0x405c24>, <DisassemblerInsn "mov" for 0x405c2b>, <DisassemblerInsn "movsxd" for 0x405c33>, <DisassemblerInsn "mov" for 0x405c36>, <DisassemblerInsn "call" for 0x405c3e>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405bd0>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059a5>, <DisassemblerInsn "mov" for 0x4059ad>, <DisassemblerInsn "mov" for 0x4059b5>, <DisassemblerInsn "mov" for 0x4059bd>, <DisassemblerInsn "shl" for 0x4059c5>, <DisassemblerInsn "add" for 0x4059c8>, <DisassemblerInsn "xor" for 0x4059cb>, <DisassemblerInsn "test" for 0x4059cd>, <DisassemblerInsn "mov" for 0x4059d1>, <DisassemblerInsn "mov" for 0x4059d9>, <DisassemblerInsn "mov" for 0x4059e1>, <DisassemblerInsn "jne" for 0x4059e8>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b23>, <DisassemblerInsn "mov" for 0x405b2b>, <DisassemblerInsn "movss" for 0x405b33>, <DisassemblerInsn "cvtss2si" for 0x405b37>, <DisassemblerInsn "mov" for 0x405b3c>, <DisassemblerInsn "cmp" for 0x405b41>, <DisassemblerInsn "cmovg" for 0x405b47>, <DisassemblerInsn "mov" for 0x405b4a>, <DisassemblerInsn "cmp" for 0x405b4f>, <DisassemblerInsn "cmovl" for 0x405b55>, <DisassemblerInsn "mov" for 0x405b58>, <DisassemblerInsn "mov" for 0x405b5b>, <DisassemblerInsn "mov" for 0x405b63>, <DisassemblerInsn "mov" for 0x405b6b>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "movsxd" for 0x405b7b>, <DisassemblerInsn "add" for 0x405b7e>, <DisassemblerInsn "shl" for 0x405b85>, <DisassemblerInsn "add" for 0x405b89>, <DisassemblerInsn "mov" for 0x405b8c>, <DisassemblerInsn "shl" for 0x405b8f>, <DisassemblerInsn "add" for 0x405b93>, <DisassemblerInsn "shl" for 0x405b96>, <DisassemblerInsn "call" for 0x405b9a>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059ee>, <DisassemblerInsn "mov" for 0x4059f5>, <DisassemblerInsn "mov" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a05>, <DisassemblerInsn "mov" for 0x405a0c>, <DisassemblerInsn "movss" for 0x405a14>, <DisassemblerInsn "cvtss2si" for 0x405a19>, <DisassemblerInsn "mov" for 0x405a1e>, <DisassemblerInsn "cmp" for 0x405a23>, <DisassemblerInsn "cmovg" for 0x405a29>, <DisassemblerInsn "mov" for 0x405a2c>, <DisassemblerInsn "mov" for 0x405a33>, <DisassemblerInsn "cmp" for 0x405a38>, <DisassemblerInsn "cmovl" for 0x405a3e>, <DisassemblerInsn "mov" for 0x405a41>, <DisassemblerInsn "mov" for 0x405a48>, <DisassemblerInsn "mov" for 0x405a4c>, <DisassemblerInsn "shl" for 0x405a4f>, <DisassemblerInsn "mov" for 0x405a52>, <DisassemblerInsn "mov" for 0x405a5a>, <DisassemblerInsn "add" for 0x405a5d>, <DisassemblerInsn "mov" for 0x405a60>, <DisassemblerInsn "mov" for 0x405a68>, <DisassemblerInsn "add" for 0x405a6b>, <DisassemblerInsn "mov" for 0x405a6f>, <DisassemblerInsn "movss" for 0x405a77>, <DisassemblerInsn "cvtss2si" for 0x405a7d>, <DisassemblerInsn "mov" for 0x405a82>, <DisassemblerInsn "cmp" for 0x405a88>, <DisassemblerInsn "cmovg" for 0x405a8f>, <DisassemblerInsn "mov" for 0x405a93>, <DisassemblerInsn "mov" for 0x405a9b>, <DisassemblerInsn "cmp" for 0x405aa1>, <DisassemblerInsn "cmovl" for 0x405aa8>, <DisassemblerInsn "mov" for 0x405aac>, <DisassemblerInsn "mov" for 0x405ab4>, <DisassemblerInsn "shl" for 0x405ab9>, <DisassemblerInsn "mov" for 0x405abc>, <DisassemblerInsn "add" for 0x405ac4>, <DisassemblerInsn "mov" for 0x405ac7>, <DisassemblerInsn "add" for 0x405acf>, <DisassemblerInsn "mov" for 0x405ad2>, <DisassemblerInsn "cmp" for 0x405ad9>, <DisassemblerInsn "mov" for 0x405adb>, <DisassemblerInsn "mov" for 0x405ae3>, <DisassemblerInsn "mov" for 0x405aeb>, <DisassemblerInsn "jne" for 0x405af2>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b5b>, <DisassemblerInsn "mov" for 0x405b63>, <DisassemblerInsn "mov" for 0x405b6b>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "movsxd" for 0x405b7b>, <DisassemblerInsn "add" for 0x405b7e>, <DisassemblerInsn "shl" for 0x405b85>, <DisassemblerInsn "add" for 0x405b89>, <DisassemblerInsn "mov" for 0x405b8c>, <DisassemblerInsn "shl" for 0x405b8f>, <DisassemblerInsn "add" for 0x405b93>, <DisassemblerInsn "shl" for 0x405b96>, <DisassemblerInsn "call" for 0x405b9a>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405af8>, <DisassemblerInsn "mov" for 0x405aff>, <DisassemblerInsn "mov" for 0x405b07>, <DisassemblerInsn "mov" for 0x405b0f>, <DisassemblerInsn "mov" for 0x405b17>, <DisassemblerInsn "test" for 0x405b1f>, <DisassemblerInsn "jne" for 0x405b21>]'}], 'cfg_block_detailed_info': [{'block_Idx': 70, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x297]>', '<mov~~rcx, qword ptr [rsp + 0x1168]>', '<mov~~rdx, qword ptr [rsp + 0x2b0]>', '<mov~~qword ptr [rsp + 0x280], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<test~~al, 1>', '<jne~~0x4059a5>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<xor~~eax, eax>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x2cc], eax>', '<jle~~0x406096>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x11d0]>', '<mov~~rdx, qword ptr [rsp + 0x1178]>', '<mov~~rax, qword ptr [rsp + 0x11c8]>', '<mov~~rsi, qword ptr [rsp + 0x1170]>', '<mov~~edi, dword ptr [rsp + 0x10e4]>', '<mov~~dword ptr [rsp + 0x2c4], edi>', '<mov~~edi, dword ptr [rsi]>', '<add~~edi, 1>', '<mov~~dword ptr [rsi], edi>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rdx], eax>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x2c8], ecx>', '<cmp~~eax, ecx>', '<mov~~dword ptr [rsp + 0x12bc], eax>', '<jl~~0x40156b>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c4]>', '<cmp~~eax, 0>', '<jle~~0x40608d>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2cc]>', '<add~~rsp, 0x1350>', '<pop~~rbx>', '<pop~~r14>', '<pop~~rbp>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1168]>', '<mov~~rax, qword ptr [rax + 0x28768]>', '<mov~~qword ptr [rsp + 0x2b8], rax>', '<mov~~rcx, qword ptr [rip + 0xfa7c3]>', '<cmp~~rax, rcx>', '<jne~~0x405bd5>']}, {'block_Idx': 43, 'blockInsts': ['<jmp~~0x405b5b>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x280]>', '<mov~~rax, qword ptr [rsp + 0x11d8]>', '<add~~rcx, 1>', '<movsxd~~rdx, dword ptr [rax]>', '<xor~~eax, eax>', '<cmp~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x2b0], rcx>', '<mov~~dword ptr [rsp + 0x2cc], eax>', '<jl~~0x405967>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c8]>', '<mov~~eax, dword ptr [rsp + 0x2c4]>', '<cmp~~ecx, 0>', '<setg~~dl>', '<mov~~byte ptr [rsp + 0x297], dl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x298], rax>', '<mov~~eax, ecx>', '<and~~eax, 1>', '<cmp~~ecx, 1>', '<sete~~dl>', '<mov~~byte ptr [rsp + 0x2a7], dl>', '<and~~ecx, 0xfffffffe>', '<mov~~dword ptr [rsp + 0x2a8], ecx>', '<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x2af], al>', '<xor~~eax, eax>', '<mov~~qword ptr [rsp + 0x2b0], rax>', '<mov~~al, byte ptr [rsp + 0x297]>', '<mov~~rcx, qword ptr [rsp + 0x1168]>', '<mov~~rdx, qword ptr [rsp + 0x2b0]>', '<mov~~qword ptr [rsp + 0x280], rdx>', '<add~~rcx, 0x10750>', '<shl~~rdx, 0xe>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<test~~al, 1>', '<jne~~0x4059a5>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x2c4]>', '<mov~~rax, qword ptr [rsp + 0x2b8]>', '<mov~~rdi, qword ptr [rsp + 0x1160]>', '<mov~~edx, dword ptr [rsp + 0x2c8]>', '<mov~~r8, qword ptr [rsp + 0x1168]>', '<lea~~rsi, [rsp + 0x12c0]>', '<mov~~r9, r8>', '<add~~r9, 0x10750>', '<lea~~rsi, [rsp + 0x12c0]>', '<mov~~qword ptr [rsp + 0x12c0], r9>', '<add~~r8, 0x10750>', '<add~~r8, 0x4000>', '<mov~~qword ptr [rsp + 0x12c8], r8>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x210], rdx>', '<call~~rax>']}, {'block_Idx': 71, 'blockInsts': ['<jmp~~0x406096>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~sil, byte ptr [rsp + 0x2a7]>', '<mov~~rcx, qword ptr [rsp + 0x1160]>', '<mov~~rax, qword ptr [rsp + 0x280]>', '<shl~~rax, 1>', '<add~~rcx, rax>', '<xor~~eax, eax>', '<test~~sil, 1>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<jne~~0x405af8>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x218]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<movss~~xmm0, dword ptr [rcx]>', '<cvtss2si~~rcx, xmm0>', '<mov~~edx, 0xffff8000>', '<cmp~~ecx, 0xffff8000>', '<cmovg~~edx, ecx>', '<mov~~ecx, 0x7fff>', '<cmp~~edx, 0x7fff>', '<cmovl~~ecx, edx>', '<mov~~word ptr [rax], cx>', '<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rsi, qword ptr [rsp + 0x1168]>', '<mov~~rcx, qword ptr [rsp + 0x11d0]>', '<mov~~rdi, qword ptr [rsp + 0x288]>', '<movsxd~~rdx, dword ptr [rcx]>', '<add~~rsi, 0x10750>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, rdx>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<shl~~rdx, 2>', '<call~~0x5000b8>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x27c]>', '<mov~~r8, qword ptr [rsp + 0x270]>', '<mov~~r9, qword ptr [rsp + 0x268]>', '<mov~~esi, dword ptr [rsp + 0x2a8]>', '<mov~~rdi, qword ptr [rsp + 0x298]>', '<movss~~xmm0, dword ptr [r9]>', '<cvtss2si~~rcx, xmm0>', '<mov~~edx, 0xffff8000>', '<cmp~~ecx, 0xffff8000>', '<cmovg~~edx, ecx>', '<mov~~dword ptr [rsp + 0x228], edx>', '<mov~~ecx, 0x7fff>', '<cmp~~edx, 0x7fff>', '<cmovl~~ecx, edx>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<mov~~word ptr [r8], cx>', '<mov~~rdx, rdi>', '<shl~~rdx, 1>', '<mov~~qword ptr [rsp + 0x230], rdx>', '<mov~~rcx, r8>', '<add~~rcx, rdx>', '<mov~~qword ptr [rsp + 0x238], rcx>', '<mov~~rdx, r9>', '<add~~rdx, 8>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<movss~~xmm0, dword ptr [r9 + 4]>', '<cvtss2si~~r9, xmm0>', '<mov~~r10d, 0xffff8000>', '<cmp~~r9d, 0xffff8000>', '<cmovg~~r10d, r9d>', '<mov~~dword ptr [rsp + 0x248], r10d>', '<mov~~r9d, 0x7fff>', '<cmp~~r10d, 0x7fff>', '<cmovl~~r9d, r10d>', '<mov~~dword ptr [rsp + 0x24c], r9d>', '<mov~~word ptr [r8 + rdi*2], r9w>', '<shl~~rdi, 1>', '<mov~~qword ptr [rsp + 0x250], rdi>', '<add~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<add~~eax, 2>', '<mov~~dword ptr [rsp + 0x264], eax>', '<cmp~~eax, esi>', '<mov~~qword ptr [rsp + 0x268], rdx>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~dword ptr [rsp + 0x27c], eax>', '<jne~~0x4059ee>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~rsi, qword ptr [rsp + 0x1168]>', '<mov~~rcx, qword ptr [rsp + 0x11d0]>', '<mov~~rdi, qword ptr [rsp + 0x288]>', '<movsxd~~rdx, dword ptr [rcx]>', '<add~~rsi, 0x10750>', '<shl~~rax, 0xe>', '<add~~rsi, rax>', '<mov~~rax, rdx>', '<shl~~rax, 2>', '<add~~rsi, rax>', '<shl~~rdx, 2>', '<call~~0x5000b8>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x2af]>', '<mov~~rcx, qword ptr [rsp + 0x268]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x218], rdx>', '<mov~~qword ptr [rsp + 0x220], rcx>', '<test~~al, 1>', '<jne~~0x405b5b>']}], 'cfg_edge_info': [(44, 51), (52, 61), (34, 28), (60, 71), (17, 27), (27, 34), (71, 28), (51, 52), (50, 60), (61, 60), (60, 70), (39, 44), (34, 39), (70, 44), (51, 51), (52, 50), (35, 40), (44, 52), (43, 50), (39, 43), (27, 35), (70, 43)]}]}
{'wma_decode_frame': [4217039, 4217078, 4217103, 4217191, 4217248, 4217253, 4217326, 4217592, 4217635, 4217691, 4217759, 4217808, 4217813]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/2/libav.libav/2cbc1ec67666eaddfe5f48c029857137d630d60e/clang_after/O2/wmadec.o---after
The extraction of function: wma_decode_frame
[4217039, 4217078, 4217103, 4217191, 4217248, 4217253, 4217326, 4217592, 4217635, 4217691, 4217759, 4217808, 4217813]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
